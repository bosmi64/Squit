ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM_MOTOR.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	PWM_MOTOR_initVar
  19              		.bss
  20              		.type	PWM_MOTOR_initVar, %object
  21              		.size	PWM_MOTOR_initVar, 1
  22              	PWM_MOTOR_initVar:
  23 0000 00       		.space	1
  24              		.section	.text.PWM_MOTOR_Start,"ax",%progbits
  25              		.align	2
  26              		.global	PWM_MOTOR_Start
  27              		.thumb
  28              		.thumb_func
  29              		.type	PWM_MOTOR_Start, %function
  30              	PWM_MOTOR_Start:
  31              	.LFB0:
  32              		.file 1 ".\\Generated_Source\\PSoC5\\PWM_MOTOR.c"
   1:.\Generated_Source\PSoC5/PWM_MOTOR.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * File Name: PWM_MOTOR.c  
   3:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Version 3.0
   4:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
   5:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Description:
   6:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks. 
  10:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  The compare value output may be configured to be active when the present 
  11:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  15:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Note:
  16:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  17:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *******************************************************************************
  18:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * You may use this file only in accordance with the license, terms, conditions, 
  20:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  21:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC5/PWM_MOTOR.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
  24:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #include "cytypes.h"
  25:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #include "PWM_MOTOR.h"
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 2


  26:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
  27:.\Generated_Source\PSoC5/PWM_MOTOR.c **** uint8 PWM_MOTOR_initVar = 0u;
  28:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
  29:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
  30:.\Generated_Source\PSoC5/PWM_MOTOR.c **** /*******************************************************************************
  31:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Function Name: PWM_MOTOR_Start
  32:.\Generated_Source\PSoC5/PWM_MOTOR.c **** ********************************************************************************
  33:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  34:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Summary:
  35:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  The start function initializes the pwm with the default values, the 
  36:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  37:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  the EnableInt command should be called if interrupt generation is required.
  38:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  39:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Parameters:  
  40:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None  
  41:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  42:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Return: 
  43:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
  44:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  45:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Global variables:
  46:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  PWM_MOTOR_initVar: Is modified when this function is called for the 
  47:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *   first time. Is used to ensure that initialization happens only once.
  48:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  49:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *******************************************************************************/
  50:.\Generated_Source\PSoC5/PWM_MOTOR.c **** void PWM_MOTOR_Start(void) 
  51:.\Generated_Source\PSoC5/PWM_MOTOR.c **** {
  33              		.loc 1 51 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 00AF     		add	r7, sp, #0
  43              	.LCFI1:
  44              		.cfi_def_cfa_register 7
  52:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /* If not Initialized then initialize all required hardware and software */
  53:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     if(PWM_MOTOR_initVar == 0u)
  45              		.loc 1 53 0
  46 0004 40F20003 		movw	r3, #:lower16:PWM_MOTOR_initVar
  47 0008 C0F20003 		movt	r3, #:upper16:PWM_MOTOR_initVar
  48 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  49 000e 002B     		cmp	r3, #0
  50 0010 08D1     		bne	.L2
  54:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
  55:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_Init();
  51              		.loc 1 55 0
  52 0012 FFF7FEFF 		bl	PWM_MOTOR_Init
  56:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_initVar = 1u;
  53              		.loc 1 56 0
  54 0016 40F20003 		movw	r3, #:lower16:PWM_MOTOR_initVar
  55 001a C0F20003 		movt	r3, #:upper16:PWM_MOTOR_initVar
  56 001e 4FF00102 		mov	r2, #1
  57 0022 1A70     		strb	r2, [r3, #0]
  58              	.L2:
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 3


  57:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
  58:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     PWM_MOTOR_Enable();
  59              		.loc 1 58 0
  60 0024 FFF7FEFF 		bl	PWM_MOTOR_Enable
  59:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
  60:.\Generated_Source\PSoC5/PWM_MOTOR.c **** }
  61              		.loc 1 60 0
  62 0028 80BD     		pop	{r7, pc}
  63              		.cfi_endproc
  64              	.LFE0:
  65              		.size	PWM_MOTOR_Start, .-PWM_MOTOR_Start
  66 002a 00BF     		.section	.text.PWM_MOTOR_Init,"ax",%progbits
  67              		.align	2
  68              		.global	PWM_MOTOR_Init
  69              		.thumb
  70              		.thumb_func
  71              		.type	PWM_MOTOR_Init, %function
  72              	PWM_MOTOR_Init:
  73              	.LFB1:
  61:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
  62:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
  63:.\Generated_Source\PSoC5/PWM_MOTOR.c **** /*******************************************************************************
  64:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Function Name: PWM_MOTOR_Init
  65:.\Generated_Source\PSoC5/PWM_MOTOR.c **** ********************************************************************************
  66:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  67:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Summary:
  68:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  Initialize component's parameters to the parameters set by user in the 
  69:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  customizer of the component placed onto schematic. Usually called in 
  70:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  PWM_MOTOR_Start().
  71:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  72:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Parameters:  
  73:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
  74:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  75:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Return: 
  76:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
  77:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
  78:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *******************************************************************************/
  79:.\Generated_Source\PSoC5/PWM_MOTOR.c **** void PWM_MOTOR_Init(void) 
  80:.\Generated_Source\PSoC5/PWM_MOTOR.c **** {
  74              		.loc 1 80 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              	.LCFI2:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI3:
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              	.LCFI4:
  88              		.cfi_def_cfa_register 7
  81:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UsingFixedFunction || PWM_MOTOR_UseControl)
  82:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         uint8 ctrl;
  83:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UsingFixedFunction || PWM_MOTOR_UseControl) */
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 4


  84:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     
  85:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if(!PWM_MOTOR_UsingFixedFunction) 
  86:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if(PWM_MOTOR_UseStatus)
  87:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Interrupt State Backup for Critical Region*/
  88:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             uint8 PWM_MOTOR_interruptState;
  89:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_UseStatus) */
  90:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (!PWM_MOTOR_UsingFixedFunction) */
  91:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     
  92:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UsingFixedFunction)
  93:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* You are allowed to write the compare value (FF only) */
  94:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_CONTROL |= PWM_MOTOR_CFG0_MODE;
  95:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_DeadBand2_4)
  96:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_CONTROL |= PWM_MOTOR_CFG0_DB;
  97:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_DeadBand2_4) */
  98:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 
  99:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         ctrl = PWM_MOTOR_CONTROL3 & ((uint8 )(~PWM_MOTOR_CTRL_CMPMODE1_MASK));
 100:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_CONTROL3 = ctrl | PWM_MOTOR_DEFAULT_COMPARE1_MODE;
 101:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 102:.\Generated_Source\PSoC5/PWM_MOTOR.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 103:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_RT1 &= ((uint8)(~PWM_MOTOR_RT1_MASK));
 104:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_RT1 |= PWM_MOTOR_SYNC;     
 105:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 
 106:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 107:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_RT1 &= ((uint8)(~PWM_MOTOR_SYNCDSI_MASK));
 108:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_RT1 |= PWM_MOTOR_SYNCDSI_EN;
 109:.\Generated_Source\PSoC5/PWM_MOTOR.c ****        
 110:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #elif (PWM_MOTOR_UseControl)
 111:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* Set the default compare mode defined in the parameter */
 112:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         ctrl = PWM_MOTOR_CONTROL & ((uint8)(~PWM_MOTOR_CTRL_CMPMODE2_MASK)) & ((uint8)(~PWM_MOTOR_C
  89              		.loc 1 112 0
  90 0006 46F27453 		movw	r3, #25972
  91 000a C4F20003 		movt	r3, 16384
  92 000e 1B78     		ldrb	r3, [r3, #0]
  93 0010 DBB2     		uxtb	r3, r3
  94 0012 23F03F03 		bic	r3, r3, #63
  95 0016 FB71     		strb	r3, [r7, #7]
 113:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_CONTROL = ctrl | PWM_MOTOR_DEFAULT_COMPARE2_MODE | 
  96              		.loc 1 113 0
  97 0018 46F27453 		movw	r3, #25972
  98 001c C4F20003 		movt	r3, 16384
  99 0020 FA79     		ldrb	r2, [r7, #7]
 100 0022 42F00902 		orr	r2, r2, #9
 101 0026 D2B2     		uxtb	r2, r2
 102 0028 1A70     		strb	r2, [r3, #0]
 114:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                    PWM_MOTOR_DEFAULT_COMPARE1_MODE;
 115:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UsingFixedFunction) */
 116:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 117:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (!PWM_MOTOR_UsingFixedFunction)
 118:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_Resolution == 8)
 119:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Set FIFO 0 to 1 byte register for period*/
 120:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_AUX_CONTROLDP0 |= (PWM_MOTOR_AUX_CTRL_FIFO0_CLR);
 121:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else /* (PWM_MOTOR_Resolution == 16)*/
 122:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Set FIFO 0 to 1 byte register for period */
 123:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_AUX_CONTROLDP0 |= (PWM_MOTOR_AUX_CTRL_FIFO0_CLR);
 103              		.loc 1 123 0
 104 002a 46F29453 		movw	r3, #26004
 105 002e C4F20003 		movt	r3, 16384
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 5


 106 0032 46F29452 		movw	r2, #26004
 107 0036 C4F20002 		movt	r2, 16384
 108 003a 1278     		ldrb	r2, [r2, #0]
 109 003c D2B2     		uxtb	r2, r2
 110 003e 42F00102 		orr	r2, r2, #1
 111 0042 D2B2     		uxtb	r2, r2
 112 0044 1A70     		strb	r2, [r3, #0]
 124:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_AUX_CONTROLDP1 |= (PWM_MOTOR_AUX_CTRL_FIFO0_CLR);
 113              		.loc 1 124 0
 114 0046 46F29553 		movw	r3, #26005
 115 004a C4F20003 		movt	r3, 16384
 116 004e 46F29552 		movw	r2, #26005
 117 0052 C4F20002 		movt	r2, 16384
 118 0056 1278     		ldrb	r2, [r2, #0]
 119 0058 D2B2     		uxtb	r2, r2
 120 005a 42F00102 		orr	r2, r2, #1
 121 005e D2B2     		uxtb	r2, r2
 122 0060 1A70     		strb	r2, [r3, #0]
 125:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_Resolution == 8) */
 126:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 127:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_WriteCounter(PWM_MOTOR_INIT_PERIOD_VALUE);
 123              		.loc 1 127 0
 124 0062 40F6B830 		movw	r0, #3000
 125 0066 FFF7FEFF 		bl	PWM_MOTOR_WriteCounter
 128:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (!PWM_MOTOR_UsingFixedFunction) */
 129:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 130:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     PWM_MOTOR_WritePeriod(PWM_MOTOR_INIT_PERIOD_VALUE);
 126              		.loc 1 130 0
 127 006a 40F6B830 		movw	r0, #3000
 128 006e FFF7FEFF 		bl	PWM_MOTOR_WritePeriod
 131:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 132:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_UseOneCompareMode)
 133:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_WriteCompare(PWM_MOTOR_INIT_COMPARE_VALUE1);
 129              		.loc 1 133 0
 130 0072 40F2DC50 		movw	r0, #1500
 131 0076 FFF7FEFF 		bl	PWM_MOTOR_WriteCompare
 134:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else
 135:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_WriteCompare1(PWM_MOTOR_INIT_COMPARE_VALUE1);
 136:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_WriteCompare2(PWM_MOTOR_INIT_COMPARE_VALUE2);
 137:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_UseOneCompareMode) */
 138:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 139:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_KillModeMinTime)
 140:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_WriteKillTime(PWM_MOTOR_MinimumKillTime);
 141:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_KillModeMinTime) */
 142:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 143:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_DeadBandUsed)
 144:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_WriteDeadTime(PWM_MOTOR_INIT_DEAD_TIME);
 132              		.loc 1 144 0
 133 007a 4FF00100 		mov	r0, #1
 134 007e FFF7FEFF 		bl	PWM_MOTOR_WriteDeadTime
 145:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_DeadBandUsed) */
 146:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 147:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UseStatus || PWM_MOTOR_UsingFixedFunction)
 148:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_SetInterruptMode(PWM_MOTOR_INIT_INTERRUPTS_MODE);
 135              		.loc 1 148 0
 136 0082 4FF00000 		mov	r0, #0
 137 0086 FFF7FEFF 		bl	PWM_MOTOR_SetInterruptMode
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 6


 149:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UseStatus || PWM_MOTOR_UsingFixedFunction) */
 150:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 151:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UsingFixedFunction)
 152:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* Globally Enable the Fixed Function Block chosen */
 153:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_GLOBAL_ENABLE |= PWM_MOTOR_BLOCK_EN_MASK;
 154:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* Set the Interrupt source to come from the status register */
 155:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_CONTROL2 |= PWM_MOTOR_CTRL2_IRQ_SEL;
 156:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #else
 157:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if(PWM_MOTOR_UseStatus)
 158:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             
 159:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 160:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Enter Critical Region*/
 161:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_interruptState = CyEnterCriticalSection();
 138              		.loc 1 161 0
 139 008a FFF7FEFF 		bl	CyEnterCriticalSection
 140 008e 0346     		mov	r3, r0
 141 0090 BB71     		strb	r3, [r7, #6]
 162:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Use the interrupt output of the status register for IRQ output */
 163:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_STATUS_AUX_CTRL |= PWM_MOTOR_STATUS_ACTL_INT_EN_MASK;
 142              		.loc 1 163 0
 143 0092 46F29553 		movw	r3, #26005
 144 0096 C4F20003 		movt	r3, 16384
 145 009a 46F29552 		movw	r2, #26005
 146 009e C4F20002 		movt	r2, 16384
 147 00a2 1278     		ldrb	r2, [r2, #0]
 148 00a4 D2B2     		uxtb	r2, r2
 149 00a6 42F01002 		orr	r2, r2, #16
 150 00aa D2B2     		uxtb	r2, r2
 151 00ac 1A70     		strb	r2, [r3, #0]
 164:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             
 165:.\Generated_Source\PSoC5/PWM_MOTOR.c ****              /* Exit Critical Region*/
 166:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             CyExitCriticalSection(PWM_MOTOR_interruptState);
 152              		.loc 1 166 0
 153 00ae BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 154 00b0 1846     		mov	r0, r3
 155 00b2 FFF7FEFF 		bl	CyExitCriticalSection
 167:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             
 168:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Clear the FIFO to enable the PWM_MOTOR_STATUS_FIFOFULL
 169:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                    bit to be set on FIFO full. */
 170:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_ClearFIFO();
 156              		.loc 1 170 0
 157 00b6 FFF7FEFF 		bl	PWM_MOTOR_ClearFIFO
 171:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_UseStatus) */
 172:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UsingFixedFunction) */
 173:.\Generated_Source\PSoC5/PWM_MOTOR.c **** }
 158              		.loc 1 173 0
 159 00ba 07F10807 		add	r7, r7, #8
 160 00be BD46     		mov	sp, r7
 161 00c0 80BD     		pop	{r7, pc}
 162              		.cfi_endproc
 163              	.LFE1:
 164              		.size	PWM_MOTOR_Init, .-PWM_MOTOR_Init
 165 00c2 00BF     		.section	.text.PWM_MOTOR_Enable,"ax",%progbits
 166              		.align	2
 167              		.global	PWM_MOTOR_Enable
 168              		.thumb
 169              		.thumb_func
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 7


 170              		.type	PWM_MOTOR_Enable, %function
 171              	PWM_MOTOR_Enable:
 172              	.LFB2:
 174:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 175:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 176:.\Generated_Source\PSoC5/PWM_MOTOR.c **** /*******************************************************************************
 177:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Function Name: PWM_MOTOR_Enable
 178:.\Generated_Source\PSoC5/PWM_MOTOR.c **** ********************************************************************************
 179:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 180:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Summary: 
 181:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  Enables the PWM block operation
 182:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 183:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Parameters:  
 184:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
 185:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 186:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Return: 
 187:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
 188:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 189:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Side Effects: 
 190:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  This works only if software enable mode is chosen
 191:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 192:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *******************************************************************************/
 193:.\Generated_Source\PSoC5/PWM_MOTOR.c **** void PWM_MOTOR_Enable(void) 
 194:.\Generated_Source\PSoC5/PWM_MOTOR.c **** {
 173              		.loc 1 194 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178 0000 80B4     		push	{r7}
 179              	.LCFI5:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 7, -4
 182 0002 00AF     		add	r7, sp, #0
 183              	.LCFI6:
 184              		.cfi_def_cfa_register 7
 195:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /* Globally Enable the Fixed Function Block chosen */
 196:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UsingFixedFunction)
 197:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_GLOBAL_ENABLE |= PWM_MOTOR_BLOCK_EN_MASK;
 198:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_GLOBAL_STBY_ENABLE |= PWM_MOTOR_BLOCK_STBY_EN_MASK;
 199:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UsingFixedFunction) */
 200:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     
 201:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /* Enable the PWM from the control register  */
 202:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UseControl || PWM_MOTOR_UsingFixedFunction)
 203:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_CONTROL |= PWM_MOTOR_CTRL_ENABLE;
 185              		.loc 1 203 0
 186 0004 46F27453 		movw	r3, #25972
 187 0008 C4F20003 		movt	r3, 16384
 188 000c 46F27452 		movw	r2, #25972
 189 0010 C4F20002 		movt	r2, 16384
 190 0014 1278     		ldrb	r2, [r2, #0]
 191 0016 D2B2     		uxtb	r2, r2
 192 0018 62F07F02 		orn	r2, r2, #127
 193 001c D2B2     		uxtb	r2, r2
 194 001e 1A70     		strb	r2, [r3, #0]
 204:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UseControl || PWM_MOTOR_UsingFixedFunction) */
 205:.\Generated_Source\PSoC5/PWM_MOTOR.c **** }
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 8


 195              		.loc 1 205 0
 196 0020 BD46     		mov	sp, r7
 197 0022 80BC     		pop	{r7}
 198 0024 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE2:
 201              		.size	PWM_MOTOR_Enable, .-PWM_MOTOR_Enable
 202 0026 00BF     		.section	.text.PWM_MOTOR_Stop,"ax",%progbits
 203              		.align	2
 204              		.global	PWM_MOTOR_Stop
 205              		.thumb
 206              		.thumb_func
 207              		.type	PWM_MOTOR_Stop, %function
 208              	PWM_MOTOR_Stop:
 209              	.LFB3:
 206:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 207:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 208:.\Generated_Source\PSoC5/PWM_MOTOR.c **** /*******************************************************************************
 209:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Function Name: PWM_MOTOR_Stop
 210:.\Generated_Source\PSoC5/PWM_MOTOR.c **** ********************************************************************************
 211:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 212:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Summary:
 213:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  The stop function halts the PWM, but does not change any modes or disable
 214:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  interrupts.
 215:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 216:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Parameters:  
 217:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None  
 218:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 219:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Return: 
 220:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
 221:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 222:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Side Effects:
 223:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  If the Enable mode is set to Hardware only then this function
 224:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  has no effect on the operation of the PWM
 225:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 226:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *******************************************************************************/
 227:.\Generated_Source\PSoC5/PWM_MOTOR.c **** void PWM_MOTOR_Stop(void) 
 228:.\Generated_Source\PSoC5/PWM_MOTOR.c **** {
 210              		.loc 1 228 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215 0000 80B4     		push	{r7}
 216              	.LCFI7:
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 7, -4
 219 0002 00AF     		add	r7, sp, #0
 220              	.LCFI8:
 221              		.cfi_def_cfa_register 7
 229:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UseControl || PWM_MOTOR_UsingFixedFunction)
 230:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_CONTROL &= ((uint8)(~PWM_MOTOR_CTRL_ENABLE));
 222              		.loc 1 230 0
 223 0004 46F27453 		movw	r3, #25972
 224 0008 C4F20003 		movt	r3, 16384
 225 000c 46F27452 		movw	r2, #25972
 226 0010 C4F20002 		movt	r2, 16384
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 9


 227 0014 1278     		ldrb	r2, [r2, #0]
 228 0016 D2B2     		uxtb	r2, r2
 229 0018 02F07F02 		and	r2, r2, #127
 230 001c D2B2     		uxtb	r2, r2
 231 001e 1A70     		strb	r2, [r3, #0]
 231:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UseControl || PWM_MOTOR_UsingFixedFunction) */
 232:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     
 233:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /* Globally disable the Fixed Function Block chosen */
 234:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if (PWM_MOTOR_UsingFixedFunction)
 235:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_GLOBAL_ENABLE &= ((uint8)(~PWM_MOTOR_BLOCK_EN_MASK));
 236:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         PWM_MOTOR_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_MOTOR_BLOCK_STBY_EN_MASK));
 237:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UsingFixedFunction) */
 238:.\Generated_Source\PSoC5/PWM_MOTOR.c **** }
 232              		.loc 1 238 0
 233 0020 BD46     		mov	sp, r7
 234 0022 80BC     		pop	{r7}
 235 0024 7047     		bx	lr
 236              		.cfi_endproc
 237              	.LFE3:
 238              		.size	PWM_MOTOR_Stop, .-PWM_MOTOR_Stop
 239 0026 00BF     		.section	.text.PWM_MOTOR_WriteCounter,"ax",%progbits
 240              		.align	2
 241              		.global	PWM_MOTOR_WriteCounter
 242              		.thumb
 243              		.thumb_func
 244              		.type	PWM_MOTOR_WriteCounter, %function
 245              	PWM_MOTOR_WriteCounter:
 246              	.LFB4:
 239:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 240:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 241:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (PWM_MOTOR_UseOneCompareMode)
 242:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	#if (PWM_MOTOR_CompareMode1SW)
 243:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 244:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 245:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		/*******************************************************************************
 246:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Function Name: PWM_MOTOR_SetCompareMode
 247:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		********************************************************************************
 248:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* 
 249:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Summary:
 250:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*  This function writes the Compare Mode for the pwm output when in Dither mode,
 251:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*  Center Align Mode or One Output Mode.
 252:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*
 253:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Parameters:
 254:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*  comparemode:  The new compare mode for the PWM output. Use the compare types
 255:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*                defined in the H file as input arguments.
 256:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*
 257:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Return:
 258:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*  None
 259:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*
 260:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*******************************************************************************/
 261:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		void PWM_MOTOR_SetCompareMode(uint8 comparemode) 
 262:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		{
 263:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #if(PWM_MOTOR_UsingFixedFunction)
 264:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             
 265:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #if(0 != PWM_MOTOR_CTRL_CMPMODE1_SHIFT)
 266:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_MOTOR_CTRL_CMPMODE
 267:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #else
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 10


 268:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                     uint8 comparemodemasked = comparemode;
 269:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #endif /* (0 != PWM_MOTOR_CTRL_CMPMODE1_SHIFT) */
 270:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             
 271:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	            PWM_MOTOR_CONTROL3 &= ((uint8)(~PWM_MOTOR_CTRL_CMPMODE1_MASK)); /*Clear Existing Data 
 272:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	            PWM_MOTOR_CONTROL3 |= comparemodemasked;     
 273:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		                
 274:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #elif (PWM_MOTOR_UseControl)
 275:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        
 276:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #if(0 != PWM_MOTOR_CTRL_CMPMODE1_SHIFT)
 277:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_MOTOR_CTRL_CMPMOD
 278:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     		                                    PWM_MOTOR_CTRL_CMPMODE1_MASK;
 279:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #else
 280:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                     uint8 comparemode1masked = comparemode & PWM_MOTOR_CTRL_CMPMODE1_MASK;         
 281:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #endif /* (0 != PWM_MOTOR_CTRL_CMPMODE1_SHIFT) */
 282:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 
 283:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #if(0 != PWM_MOTOR_CTRL_CMPMODE2_SHIFT)                            
 284:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     		        uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_MOTOR_CTRL_CMPMODE2_SHI
 285:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     		                                   PWM_MOTOR_CTRL_CMPMODE2_MASK;
 286:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #else
 287:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     		        uint8 comparemode2masked = comparemode & PWM_MOTOR_CTRL_CMPMODE2_MASK;               
 288:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 #endif /* (0 != PWM_MOTOR_CTRL_CMPMODE2_SHIFT) */
 289:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 
 290:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        /*Clear existing mode */
 291:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        PWM_MOTOR_CONTROL &= ((uint8)(~(PWM_MOTOR_CTRL_CMPMODE1_MASK | PWM_MOTOR_CTRL_CMPMODE2_MA
 292:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        PWM_MOTOR_CONTROL |= (comparemode1masked | comparemode2masked);
 293:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        
 294:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #else
 295:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        uint8 temp = comparemode;
 296:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #endif /* (PWM_MOTOR_UsingFixedFunction) */
 297:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		}
 298:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	#endif /* PWM_MOTOR_CompareMode1SW */
 299:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 300:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #else /* UseOneCompareMode */
 301:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 302:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	#if (PWM_MOTOR_CompareMode1SW)
 303:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 304:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 305:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		/*******************************************************************************
 306:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Function Name: PWM_MOTOR_SetCompareMode1
 307:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		********************************************************************************
 308:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* 
 309:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Summary:
 310:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*  This function writes the Compare Mode for the pwm or pwm1 output
 311:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*
 312:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Parameters:  
 313:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*  comparemode:  The new compare mode for the PWM output. Use the compare types
 314:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*                defined in the H file as input arguments.
 315:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*
 316:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		* Return: 
 317:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*  None
 318:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*
 319:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		*******************************************************************************/
 320:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		void PWM_MOTOR_SetCompareMode1(uint8 comparemode) 
 321:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		{
 322:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #if(0 != PWM_MOTOR_CTRL_CMPMODE1_SHIFT)
 323:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_MOTOR_CTRL_CMPMODE1_SH
 324:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     		                               PWM_MOTOR_CTRL_CMPMODE1_MASK;
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 11


 325:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #else
 326:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 uint8 comparemodemasked = comparemode & PWM_MOTOR_CTRL_CMPMODE1_MASK;              
 327:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #endif /* (0 != PWM_MOTOR_CTRL_CMPMODE1_SHIFT) */
 328:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                    
 329:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #if (PWM_MOTOR_UseControl)
 330:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        PWM_MOTOR_CONTROL &= ((uint8)(~PWM_MOTOR_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 331:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		        PWM_MOTOR_CONTROL |= comparemodemasked;
 332:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		    #endif /* (PWM_MOTOR_UseControl) */
 333:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		}
 334:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	#endif /* PWM_MOTOR_CompareMode1SW */
 335:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 336:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (PWM_MOTOR_CompareMode2SW)
 337:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 338:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 339:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 340:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_SetCompareMode2
 341:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 342:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 343:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 344:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 345:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 346:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 347:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 348:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *                defined in the H file as input arguments.
 349:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 350:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 351:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 352:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 353:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 354:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_SetCompareMode2(uint8 comparemode) 
 355:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 356:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 357:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if(0 != PWM_MOTOR_CTRL_CMPMODE2_SHIFT)
 358:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_MOTOR_CTRL_CMPMODE2_SHIFT)
 359:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                                  PWM_MOTOR_CTRL_CMPMODE2_MASK;
 360:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else
 361:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             uint8 comparemodemasked = comparemode & PWM_MOTOR_CTRL_CMPMODE2_MASK;            
 362:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (0 != PWM_MOTOR_CTRL_CMPMODE2_SHIFT) */
 363:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 364:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_UseControl)
 365:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_CONTROL &= ((uint8)(~PWM_MOTOR_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 366:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_CONTROL |= comparemodemasked;
 367:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_UseControl) */
 368:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 369:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /*PWM_MOTOR_CompareMode2SW */
 370:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 371:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* UseOneCompareMode */
 372:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 373:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 374:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (!PWM_MOTOR_UsingFixedFunction)
 375:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 376:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 377:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 378:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_WriteCounter
 379:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 380:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 381:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 12


 382:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Writes a new counter value directly to the counter register. This will be 
 383:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  implemented for that currently running period and only that period. This API 
 384:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  is valid only for UDB implementation and not available for fixed function 
 385:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  PWM implementation.    
 386:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 387:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 388:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  counter:  The period new period counter value.
 389:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 390:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 391:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 392:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 393:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Side Effects: 
 394:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 395:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 396:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 397:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_WriteCounter(uint16 counter) \
 398:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                        
 399:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 247              		.loc 1 399 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 8
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252 0000 80B4     		push	{r7}
 253              	.LCFI9:
 254              		.cfi_def_cfa_offset 4
 255              		.cfi_offset 7, -4
 256 0002 83B0     		sub	sp, sp, #12
 257              	.LCFI10:
 258              		.cfi_def_cfa_offset 16
 259 0004 00AF     		add	r7, sp, #0
 260              	.LCFI11:
 261              		.cfi_def_cfa_register 7
 262 0006 0346     		mov	r3, r0
 263 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 400:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         CY_SET_REG16(PWM_MOTOR_COUNTER_LSB_PTR, counter);
 264              		.loc 1 400 0
 265 000a 46F60823 		movw	r3, #27144
 266 000e C4F20003 		movt	r3, 16384
 267 0012 FA88     		ldrh	r2, [r7, #6]	@ movhi
 268 0014 1A80     		strh	r2, [r3, #0]	@ movhi
 401:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 269              		.loc 1 401 0
 270 0016 07F10C07 		add	r7, r7, #12
 271 001a BD46     		mov	sp, r7
 272 001c 80BC     		pop	{r7}
 273 001e 7047     		bx	lr
 274              		.cfi_endproc
 275              	.LFE4:
 276              		.size	PWM_MOTOR_WriteCounter, .-PWM_MOTOR_WriteCounter
 277              		.section	.text.PWM_MOTOR_ReadCounter,"ax",%progbits
 278              		.align	2
 279              		.global	PWM_MOTOR_ReadCounter
 280              		.thumb
 281              		.thumb_func
 282              		.type	PWM_MOTOR_ReadCounter, %function
 283              	PWM_MOTOR_ReadCounter:
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 13


 284              	.LFB5:
 402:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 403:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 404:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 405:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadCounter
 406:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 407:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 408:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 409:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This function returns the current value of the counter.  It doesn't matter
 410:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  if the counter is enabled or running.
 411:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 412:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 413:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None  
 414:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 415:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 416:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  The current value of the counter.
 417:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 418:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 419:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint16 PWM_MOTOR_ReadCounter(void) 
 420:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 285              		.loc 1 420 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 1, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290 0000 80B4     		push	{r7}
 291              	.LCFI12:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 7, -4
 294 0002 00AF     		add	r7, sp, #0
 295              	.LCFI13:
 296              		.cfi_def_cfa_register 7
 421:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* Force capture by reading Accumulator */
 422:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* Must first do a software capture to be able to read the counter */
 423:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 424:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         (void)PWM_MOTOR_COUNTERCAP_LSB;
 297              		.loc 1 424 0
 298 0004 46F62823 		movw	r3, #27176
 299 0008 C4F20003 		movt	r3, 16384
 300 000c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 425:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 426:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* Read the data from the FIFO (or capture register for Fixed Function)*/
 427:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         return (CY_GET_REG16(PWM_MOTOR_CAPTURE_LSB_PTR));
 301              		.loc 1 427 0
 302 000e 46F6A823 		movw	r3, #27304
 303 0012 C4F20003 		movt	r3, 16384
 304 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 305 0018 9BB2     		uxth	r3, r3
 428:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 306              		.loc 1 428 0
 307 001a 1846     		mov	r0, r3
 308 001c BD46     		mov	sp, r7
 309 001e 80BC     		pop	{r7}
 310 0020 7047     		bx	lr
 311              		.cfi_endproc
 312              	.LFE5:
 313              		.size	PWM_MOTOR_ReadCounter, .-PWM_MOTOR_ReadCounter
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 14


 314 0022 00BF     		.section	.text.PWM_MOTOR_ClearFIFO,"ax",%progbits
 315              		.align	2
 316              		.global	PWM_MOTOR_ClearFIFO
 317              		.thumb
 318              		.thumb_func
 319              		.type	PWM_MOTOR_ClearFIFO, %function
 320              	PWM_MOTOR_ClearFIFO:
 321              	.LFB6:
 429:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 430:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_UseStatus)
 431:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 432:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 433:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /*******************************************************************************
 434:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             * Function Name: PWM_MOTOR_ClearFIFO
 435:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             ********************************************************************************
 436:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             * 
 437:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             * Summary:
 438:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             *  This function clears all capture data from the capture FIFO
 439:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             *
 440:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             * Parameters:  
 441:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             *  None
 442:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             *
 443:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             * Return: 
 444:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             *  None
 445:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             *
 446:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             *******************************************************************************/
 447:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             void PWM_MOTOR_ClearFIFO(void) 
 448:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             {
 322              		.loc 1 448 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326 0000 80B5     		push	{r7, lr}
 327              	.LCFI14:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 7, -8
 330              		.cfi_offset 14, -4
 331 0002 00AF     		add	r7, sp, #0
 332              	.LCFI15:
 333              		.cfi_def_cfa_register 7
 449:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 while(0u != (PWM_MOTOR_ReadStatusRegister() & PWM_MOTOR_STATUS_FIFONEMPTY))
 334              		.loc 1 449 0
 335 0004 01E0     		b	.L10
 336              	.L11:
 450:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 {
 451:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                     (void)PWM_MOTOR_ReadCapture();
 337              		.loc 1 451 0
 338 0006 FFF7FEFF 		bl	PWM_MOTOR_ReadCapture
 339              	.L10:
 449:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 while(0u != (PWM_MOTOR_ReadStatusRegister() & PWM_MOTOR_STATUS_FIFONEMPTY))
 340              		.loc 1 449 0 discriminator 1
 341 000a FFF7FEFF 		bl	PWM_MOTOR_ReadStatusRegister
 342 000e 0346     		mov	r3, r0
 343 0010 03F01003 		and	r3, r3, #16
 344 0014 002B     		cmp	r3, #0
 345 0016 F6D1     		bne	.L11
 452:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 }
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 15


 453:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             }
 346              		.loc 1 453 0
 347 0018 80BD     		pop	{r7, pc}
 348              		.cfi_endproc
 349              	.LFE6:
 350              		.size	PWM_MOTOR_ClearFIFO, .-PWM_MOTOR_ClearFIFO
 351 001a 00BF     		.section	.text.PWM_MOTOR_WritePeriod,"ax",%progbits
 352              		.align	2
 353              		.global	PWM_MOTOR_WritePeriod
 354              		.thumb
 355              		.thumb_func
 356              		.type	PWM_MOTOR_WritePeriod, %function
 357              	PWM_MOTOR_WritePeriod:
 358              	.LFB7:
 454:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 455:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* PWM_MOTOR_UseStatus */
 456:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 457:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* !PWM_MOTOR_UsingFixedFunction */
 458:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 459:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 460:.\Generated_Source\PSoC5/PWM_MOTOR.c **** /*******************************************************************************
 461:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Function Name: PWM_MOTOR_WritePeriod
 462:.\Generated_Source\PSoC5/PWM_MOTOR.c **** ********************************************************************************
 463:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * 
 464:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Summary:
 465:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  This function is used to change the period of the counter.  The new period 
 466:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  will be loaded the next time terminal count is detected.
 467:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 468:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Parameters:  
 469:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0 
 470:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *           will result in the counter remaining at zero.
 471:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 472:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Return: 
 473:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
 474:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 475:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *******************************************************************************/
 476:.\Generated_Source\PSoC5/PWM_MOTOR.c **** void PWM_MOTOR_WritePeriod(uint16 period) 
 477:.\Generated_Source\PSoC5/PWM_MOTOR.c **** {
 359              		.loc 1 477 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 0000 80B4     		push	{r7}
 365              	.LCFI16:
 366              		.cfi_def_cfa_offset 4
 367              		.cfi_offset 7, -4
 368 0002 83B0     		sub	sp, sp, #12
 369              	.LCFI17:
 370              		.cfi_def_cfa_offset 16
 371 0004 00AF     		add	r7, sp, #0
 372              	.LCFI18:
 373              		.cfi_def_cfa_register 7
 374 0006 0346     		mov	r3, r0
 375 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 478:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #if(PWM_MOTOR_UsingFixedFunction)
 479:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         CY_SET_REG16(PWM_MOTOR_PERIOD_LSB_PTR, (uint16)period);
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 16


 480:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #else
 481:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         CY_SET_REG16(PWM_MOTOR_PERIOD_LSB_PTR, period);
 376              		.loc 1 481 0
 377 000a 46F68823 		movw	r3, #27272
 378 000e C4F20003 		movt	r3, 16384
 379 0012 FA88     		ldrh	r2, [r7, #6]	@ movhi
 380 0014 1A80     		strh	r2, [r3, #0]	@ movhi
 482:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UsingFixedFunction) */
 483:.\Generated_Source\PSoC5/PWM_MOTOR.c **** }
 381              		.loc 1 483 0
 382 0016 07F10C07 		add	r7, r7, #12
 383 001a BD46     		mov	sp, r7
 384 001c 80BC     		pop	{r7}
 385 001e 7047     		bx	lr
 386              		.cfi_endproc
 387              	.LFE7:
 388              		.size	PWM_MOTOR_WritePeriod, .-PWM_MOTOR_WritePeriod
 389              		.section	.text.PWM_MOTOR_WriteCompare,"ax",%progbits
 390              		.align	2
 391              		.global	PWM_MOTOR_WriteCompare
 392              		.thumb
 393              		.thumb_func
 394              		.type	PWM_MOTOR_WriteCompare, %function
 395              	PWM_MOTOR_WriteCompare:
 396              	.LFB8:
 484:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 485:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (PWM_MOTOR_UseOneCompareMode)
 486:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 487:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 488:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 489:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_WriteCompare
 490:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 491:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 492:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 493:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 494:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  mode. The compare output will reflect the new value on the next UDB clock. 
 495:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  The compare output will be driven high when the present counter value is 
 496:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  compared to the compare value based on the compare mode defined in 
 497:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Dither Mode.
 498:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 499:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 500:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  compare:  New compare value.  
 501:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 502:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 503:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 504:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 505:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Side Effects:
 506:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This function is only available if the PWM mode parameter is set to
 507:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 508:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 509:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 510:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_WriteCompare(uint16 compare) \
 511:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                        
 512:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {	
 397              		.loc 1 512 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 17


 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401              		@ link register save eliminated.
 402 0000 80B4     		push	{r7}
 403              	.LCFI19:
 404              		.cfi_def_cfa_offset 4
 405              		.cfi_offset 7, -4
 406 0002 83B0     		sub	sp, sp, #12
 407              	.LCFI20:
 408              		.cfi_def_cfa_offset 16
 409 0004 00AF     		add	r7, sp, #0
 410              	.LCFI21:
 411              		.cfi_def_cfa_register 7
 412 0006 0346     		mov	r3, r0
 413 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 513:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		#if(PWM_MOTOR_UsingFixedFunction)
 514:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 			CY_SET_REG16(PWM_MOTOR_COMPARE1_LSB_PTR, (uint16)compare);
 515:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		#else
 516:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	        CY_SET_REG16(PWM_MOTOR_COMPARE1_LSB_PTR, compare);	
 414              		.loc 1 516 0
 415 000a 46F64823 		movw	r3, #27208
 416 000e C4F20003 		movt	r3, 16384
 417 0012 FA88     		ldrh	r2, [r7, #6]	@ movhi
 418 0014 1A80     		strh	r2, [r3, #0]	@ movhi
 517:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		#endif /* (PWM_MOTOR_UsingFixedFunction) */
 518:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 519:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if (PWM_MOTOR_PWMMode == PWM_MOTOR__B_PWM__DITHER)
 520:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #if(PWM_MOTOR_UsingFixedFunction)
 521:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     			CY_SET_REG16(PWM_MOTOR_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 522:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     		#else
 523:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	        CY_SET_REG16(PWM_MOTOR_COMPARE2_LSB_PTR, (compare + 1u));	
 524:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     		#endif /* (PWM_MOTOR_UsingFixedFunction) */
 525:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_PWMMode == PWM_MOTOR__B_PWM__DITHER) */
 526:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 419              		.loc 1 526 0
 420 0016 07F10C07 		add	r7, r7, #12
 421 001a BD46     		mov	sp, r7
 422 001c 80BC     		pop	{r7}
 423 001e 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE8:
 426              		.size	PWM_MOTOR_WriteCompare, .-PWM_MOTOR_WriteCompare
 427              		.section	.text.PWM_MOTOR_WriteDeadTime,"ax",%progbits
 428              		.align	2
 429              		.global	PWM_MOTOR_WriteDeadTime
 430              		.thumb
 431              		.thumb_func
 432              		.type	PWM_MOTOR_WriteDeadTime, %function
 433              	PWM_MOTOR_WriteDeadTime:
 434              	.LFB9:
 527:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 528:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 529:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #else
 530:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 531:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 532:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 533:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_WriteCompare1
 534:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 18


 535:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 536:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 537:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This funtion is used to change the compare1 value.  The compare output will 
 538:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  reflect the new value on the next UDB clock.  The compare output will be 
 539:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  driven high when the present counter value is less than or less than or 
 540:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  equal to the compare register, depending on the mode.
 541:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 542:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 543:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  compare:  New compare value.  
 544:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 545:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 546:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 547:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 548:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 549:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_WriteCompare1(uint16 compare) \
 550:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                         
 551:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 552:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if(PWM_MOTOR_UsingFixedFunction)
 553:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             CY_SET_REG16(PWM_MOTOR_COMPARE1_LSB_PTR, (uint16)compare);
 554:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else
 555:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             CY_SET_REG16(PWM_MOTOR_COMPARE1_LSB_PTR, compare);
 556:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_UsingFixedFunction) */
 557:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 558:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 559:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 560:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 561:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_WriteCompare2
 562:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 563:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 564:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 565:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This funtion is used to change the compare value, for compare1 output.  
 566:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  The compare output will reflect the new value on the next UDB clock.  
 567:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  The compare output will be driven high when the present counter value is 
 568:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  less than or less than or equal to the compare register, depending on the 
 569:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  mode.
 570:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 571:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 572:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  compare:  New compare value.  
 573:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 574:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 575:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 576:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 577:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 578:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_WriteCompare2(uint16 compare) \
 579:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                         
 580:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 581:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if(PWM_MOTOR_UsingFixedFunction)
 582:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             CY_SET_REG16(PWM_MOTOR_COMPARE2_LSB_PTR, compare);
 583:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else
 584:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             CY_SET_REG16(PWM_MOTOR_COMPARE2_LSB_PTR, compare);
 585:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_UsingFixedFunction) */
 586:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 587:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* UseOneCompareMode */
 588:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 589:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (PWM_MOTOR_DeadBandUsed)
 590:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 591:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 19


 592:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 593:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_WriteDeadTime
 594:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 595:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 596:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 597:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This function writes the dead-band counts to the corresponding register
 598:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 599:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 600:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  deadtime:  Number of counts for dead time 
 601:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 602:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 603:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 604:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 605:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 606:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_WriteDeadTime(uint8 deadtime) 
 607:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 435              		.loc 1 607 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 8
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440 0000 80B4     		push	{r7}
 441              	.LCFI22:
 442              		.cfi_def_cfa_offset 4
 443              		.cfi_offset 7, -4
 444 0002 83B0     		sub	sp, sp, #12
 445              	.LCFI23:
 446              		.cfi_def_cfa_offset 16
 447 0004 00AF     		add	r7, sp, #0
 448              	.LCFI24:
 449              		.cfi_def_cfa_register 7
 450 0006 0346     		mov	r3, r0
 451 0008 FB71     		strb	r3, [r7, #7]
 608:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 609:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if(!PWM_MOTOR_DeadBand2_4)
 610:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             CY_SET_REG8(PWM_MOTOR_DEADBAND_COUNT_PTR, deadtime);
 611:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else
 612:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Otherwise the data has to be masked and offset */        
 613:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Clear existing data */
 614:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             PWM_MOTOR_DEADBAND_COUNT &= ((uint8)(~PWM_MOTOR_DEADBAND_COUNT_MASK));
 452              		.loc 1 614 0
 453 000a 46F27653 		movw	r3, #25974
 454 000e C4F20003 		movt	r3, 16384
 455 0012 46F27652 		movw	r2, #25974
 456 0016 C4F20002 		movt	r2, 16384
 457 001a 1278     		ldrb	r2, [r2, #0]
 458 001c D2B2     		uxtb	r2, r2
 459 001e 22F00302 		bic	r2, r2, #3
 460 0022 D2B2     		uxtb	r2, r2
 461 0024 1A70     		strb	r2, [r3, #0]
 615:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             
 616:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Set new dead time */
 617:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #if(PWM_MOTOR_DEADBAND_COUNT_SHIFT)        
 618:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 PWM_MOTOR_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_MOTOR_DEADBAND_COUNT_SH
 619:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                                     PWM_MOTOR_DEADBAND_COUNT_MASK;
 620:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #else
 621:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 PWM_MOTOR_DEADBAND_COUNT |= deadtime & PWM_MOTOR_DEADBAND_COUNT_MASK;        
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 20


 462              		.loc 1 621 0
 463 0026 46F27653 		movw	r3, #25974
 464 002a C4F20003 		movt	r3, 16384
 465 002e 46F27652 		movw	r2, #25974
 466 0032 C4F20002 		movt	r2, 16384
 467 0036 1278     		ldrb	r2, [r2, #0]
 468 0038 D2B2     		uxtb	r2, r2
 469 003a D1B2     		uxtb	r1, r2
 470 003c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 471 003e 02F00302 		and	r2, r2, #3
 472 0042 D2B2     		uxtb	r2, r2
 473 0044 0A43     		orrs	r2, r2, r1
 474 0046 D2B2     		uxtb	r2, r2
 475 0048 D2B2     		uxtb	r2, r2
 476 004a 1A70     		strb	r2, [r3, #0]
 622:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #endif /* (PWM_MOTOR_DEADBAND_COUNT_SHIFT) */
 623:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 624:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (!PWM_MOTOR_DeadBand2_4) */
 625:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 477              		.loc 1 625 0
 478 004c 07F10C07 		add	r7, r7, #12
 479 0050 BD46     		mov	sp, r7
 480 0052 80BC     		pop	{r7}
 481 0054 7047     		bx	lr
 482              		.cfi_endproc
 483              	.LFE9:
 484              		.size	PWM_MOTOR_WriteDeadTime, .-PWM_MOTOR_WriteDeadTime
 485 0056 00BF     		.section	.text.PWM_MOTOR_ReadDeadTime,"ax",%progbits
 486              		.align	2
 487              		.global	PWM_MOTOR_ReadDeadTime
 488              		.thumb
 489              		.thumb_func
 490              		.type	PWM_MOTOR_ReadDeadTime, %function
 491              	PWM_MOTOR_ReadDeadTime:
 492              	.LFB10:
 626:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 627:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 628:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 629:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadDeadTime
 630:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 631:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 632:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 633:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This function reads the dead-band counts from the corresponding register
 634:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 635:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 636:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 637:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 638:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 639:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Dead Band Counts
 640:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 641:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 642:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint8 PWM_MOTOR_ReadDeadTime(void) 
 643:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 493              		.loc 1 643 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 21


 497              		@ link register save eliminated.
 498 0000 80B4     		push	{r7}
 499              	.LCFI25:
 500              		.cfi_def_cfa_offset 4
 501              		.cfi_offset 7, -4
 502 0002 00AF     		add	r7, sp, #0
 503              	.LCFI26:
 504              		.cfi_def_cfa_register 7
 644:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 645:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #if(!PWM_MOTOR_DeadBand2_4)
 646:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             return (CY_GET_REG8(PWM_MOTOR_DEADBAND_COUNT_PTR));
 647:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else
 648:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         
 649:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             /* Otherwise the data has to be masked and offset */
 650:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #if(PWM_MOTOR_DEADBAND_COUNT_SHIFT)      
 651:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 return ((uint8)(((uint8)(PWM_MOTOR_DEADBAND_COUNT & PWM_MOTOR_DEADBAND_COUNT_MASK))
 652:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                                                                            PWM_MOTOR_DEADBAND_COUNT
 653:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #else
 654:.\Generated_Source\PSoC5/PWM_MOTOR.c ****                 return (PWM_MOTOR_DEADBAND_COUNT & PWM_MOTOR_DEADBAND_COUNT_MASK);
 505              		.loc 1 654 0
 506 0004 46F27653 		movw	r3, #25974
 507 0008 C4F20003 		movt	r3, 16384
 508 000c 1B78     		ldrb	r3, [r3, #0]
 509 000e DBB2     		uxtb	r3, r3
 510 0010 03F00303 		and	r3, r3, #3
 511 0014 DBB2     		uxtb	r3, r3
 655:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             #endif /* (PWM_MOTOR_DEADBAND_COUNT_SHIFT) */
 656:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (!PWM_MOTOR_DeadBand2_4) */
 657:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 512              		.loc 1 657 0
 513 0016 1846     		mov	r0, r3
 514 0018 BD46     		mov	sp, r7
 515 001a 80BC     		pop	{r7}
 516 001c 7047     		bx	lr
 517              		.cfi_endproc
 518              	.LFE10:
 519              		.size	PWM_MOTOR_ReadDeadTime, .-PWM_MOTOR_ReadDeadTime
 520 001e 00BF     		.section	.text.PWM_MOTOR_SetInterruptMode,"ax",%progbits
 521              		.align	2
 522              		.global	PWM_MOTOR_SetInterruptMode
 523              		.thumb
 524              		.thumb_func
 525              		.type	PWM_MOTOR_SetInterruptMode, %function
 526              	PWM_MOTOR_SetInterruptMode:
 527              	.LFB11:
 658:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* DeadBandUsed */
 659:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 660:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (PWM_MOTOR_UseStatus || PWM_MOTOR_UsingFixedFunction)
 661:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 662:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 663:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 664:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_SetInterruptMode
 665:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 666:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 667:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 668:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This function configures the interrupts mask control of theinterrupt 
 669:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  source status register.
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 22


 670:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 671:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 672:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled 
 673:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 674:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 675:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 676:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 677:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 678:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_SetInterruptMode(uint8 interruptMode)  
 679:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 528              		.loc 1 679 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 8
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 533 0000 80B4     		push	{r7}
 534              	.LCFI27:
 535              		.cfi_def_cfa_offset 4
 536              		.cfi_offset 7, -4
 537 0002 83B0     		sub	sp, sp, #12
 538              	.LCFI28:
 539              		.cfi_def_cfa_offset 16
 540 0004 00AF     		add	r7, sp, #0
 541              	.LCFI29:
 542              		.cfi_def_cfa_register 7
 543 0006 0346     		mov	r3, r0
 544 0008 FB71     		strb	r3, [r7, #7]
 680:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	CY_SET_REG8(PWM_MOTOR_STATUS_MASK_PTR, interruptMode);
 545              		.loc 1 680 0
 546 000a 46F28553 		movw	r3, #25989
 547 000e C4F20003 		movt	r3, 16384
 548 0012 FA79     		ldrb	r2, [r7, #7]
 549 0014 1A70     		strb	r2, [r3, #0]
 681:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 550              		.loc 1 681 0
 551 0016 07F10C07 		add	r7, r7, #12
 552 001a BD46     		mov	sp, r7
 553 001c 80BC     		pop	{r7}
 554 001e 7047     		bx	lr
 555              		.cfi_endproc
 556              	.LFE11:
 557              		.size	PWM_MOTOR_SetInterruptMode, .-PWM_MOTOR_SetInterruptMode
 558              		.section	.text.PWM_MOTOR_ReadStatusRegister,"ax",%progbits
 559              		.align	2
 560              		.global	PWM_MOTOR_ReadStatusRegister
 561              		.thumb
 562              		.thumb_func
 563              		.type	PWM_MOTOR_ReadStatusRegister, %function
 564              	PWM_MOTOR_ReadStatusRegister:
 565              	.LFB12:
 682:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 683:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 684:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 685:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadStatusRegister
 686:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 687:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 688:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 23


 689:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  This function returns the current state of the status register. 
 690:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 691:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 692:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 693:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 694:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 695:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8 : Current status register value. The status register bits are:
 696:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [7:6] : Unused(0)
 697:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [5]   : Kill event output
 698:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [4]   : FIFO not empty
 699:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [3]   : FIFO full
 700:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [2]   : Terminal count
 701:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [1]   : Compare output 2
 702:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [0]   : Compare output 1
 703:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 704:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/
 705:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint8 PWM_MOTOR_ReadStatusRegister(void)   
 706:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 566              		.loc 1 706 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 8
 569              		@ frame_needed = 1, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571 0000 80B4     		push	{r7}
 572              	.LCFI30:
 573              		.cfi_def_cfa_offset 4
 574              		.cfi_offset 7, -4
 575 0002 83B0     		sub	sp, sp, #12
 576              	.LCFI31:
 577              		.cfi_def_cfa_offset 16
 578 0004 00AF     		add	r7, sp, #0
 579              	.LCFI32:
 580              		.cfi_def_cfa_register 7
 707:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	uint8 result;
 708:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	
 709:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	result = CY_GET_REG8(PWM_MOTOR_STATUS_PTR);
 581              		.loc 1 709 0
 582 0006 46F26553 		movw	r3, #25957
 583 000a C4F20003 		movt	r3, 16384
 584 000e 1B78     		ldrb	r3, [r3, #0]
 585 0010 FB71     		strb	r3, [r7, #7]
 710:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	return (result);
 586              		.loc 1 710 0
 587 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 711:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 588              		.loc 1 711 0
 589 0014 1846     		mov	r0, r3
 590 0016 07F10C07 		add	r7, r7, #12
 591 001a BD46     		mov	sp, r7
 592 001c 80BC     		pop	{r7}
 593 001e 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE12:
 596              		.size	PWM_MOTOR_ReadStatusRegister, .-PWM_MOTOR_ReadStatusRegister
 597              		.section	.text.PWM_MOTOR_ReadControlRegister,"ax",%progbits
 598              		.align	2
 599              		.global	PWM_MOTOR_ReadControlRegister
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 24


 600              		.thumb
 601              		.thumb_func
 602              		.type	PWM_MOTOR_ReadControlRegister, %function
 603              	PWM_MOTOR_ReadControlRegister:
 604              	.LFB13:
 712:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 713:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* (PWM_MOTOR_UseStatus || PWM_MOTOR_UsingFixedFunction) */
 714:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 715:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 716:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (PWM_MOTOR_UseControl)
 717:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 718:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 719:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 720:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadControlRegister
 721:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 722:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 723:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 724:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Returns the current state of the control register. This API is available 
 725:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  only if the control register is not removed.
 726:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 727:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 728:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None 
 729:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 730:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 731:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8 : Current control register value
 732:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 733:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/    
 734:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint8 PWM_MOTOR_ReadControlRegister(void) 
 735:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 605              		.loc 1 735 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 8
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 610 0000 80B4     		push	{r7}
 611              	.LCFI33:
 612              		.cfi_def_cfa_offset 4
 613              		.cfi_offset 7, -4
 614 0002 83B0     		sub	sp, sp, #12
 615              	.LCFI34:
 616              		.cfi_def_cfa_offset 16
 617 0004 00AF     		add	r7, sp, #0
 618              	.LCFI35:
 619              		.cfi_def_cfa_register 7
 736:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	uint8 result;
 737:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	
 738:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	result = CY_GET_REG8(PWM_MOTOR_CONTROL_PTR);
 620              		.loc 1 738 0
 621 0006 46F27453 		movw	r3, #25972
 622 000a C4F20003 		movt	r3, 16384
 623 000e 1B78     		ldrb	r3, [r3, #0]
 624 0010 FB71     		strb	r3, [r7, #7]
 739:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	return (result);
 625              		.loc 1 739 0
 626 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 740:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 627              		.loc 1 740 0
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 25


 628 0014 1846     		mov	r0, r3
 629 0016 07F10C07 		add	r7, r7, #12
 630 001a BD46     		mov	sp, r7
 631 001c 80BC     		pop	{r7}
 632 001e 7047     		bx	lr
 633              		.cfi_endproc
 634              	.LFE13:
 635              		.size	PWM_MOTOR_ReadControlRegister, .-PWM_MOTOR_ReadControlRegister
 636              		.section	.text.PWM_MOTOR_WriteControlRegister,"ax",%progbits
 637              		.align	2
 638              		.global	PWM_MOTOR_WriteControlRegister
 639              		.thumb
 640              		.thumb_func
 641              		.type	PWM_MOTOR_WriteControlRegister, %function
 642              	PWM_MOTOR_WriteControlRegister:
 643              	.LFB14:
 741:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 742:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 743:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 744:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_WriteControlRegister
 745:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 746:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 747:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 748:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Sets the bit field of the control register. This API is available only if 
 749:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  the control register is not removed.
 750:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 751:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 752:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8 control: Control register bit field, The status register bits are:
 753:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [7]   : PWM Enable
 754:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [6]   : Reset
 755:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [5:3] : Compare Mode2
 756:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  [2:0] : Compare Mode2
 757:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 758:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 759:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 760:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 761:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/  
 762:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     void PWM_MOTOR_WriteControlRegister(uint8 control) 
 763:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 644              		.loc 1 763 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 8
 647              		@ frame_needed = 1, uses_anonymous_args = 0
 648              		@ link register save eliminated.
 649 0000 80B4     		push	{r7}
 650              	.LCFI36:
 651              		.cfi_def_cfa_offset 4
 652              		.cfi_offset 7, -4
 653 0002 83B0     		sub	sp, sp, #12
 654              	.LCFI37:
 655              		.cfi_def_cfa_offset 16
 656 0004 00AF     		add	r7, sp, #0
 657              	.LCFI38:
 658              		.cfi_def_cfa_register 7
 659 0006 0346     		mov	r3, r0
 660 0008 FB71     		strb	r3, [r7, #7]
 764:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	CY_SET_REG8(PWM_MOTOR_CONTROL_PTR, control);
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 26


 661              		.loc 1 764 0
 662 000a 46F27453 		movw	r3, #25972
 663 000e C4F20003 		movt	r3, 16384
 664 0012 FA79     		ldrb	r2, [r7, #7]
 665 0014 1A70     		strb	r2, [r3, #0]
 765:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 666              		.loc 1 765 0
 667 0016 07F10C07 		add	r7, r7, #12
 668 001a BD46     		mov	sp, r7
 669 001c 80BC     		pop	{r7}
 670 001e 7047     		bx	lr
 671              		.cfi_endproc
 672              	.LFE14:
 673              		.size	PWM_MOTOR_WriteControlRegister, .-PWM_MOTOR_WriteControlRegister
 674              		.section	.text.PWM_MOTOR_ReadCapture,"ax",%progbits
 675              		.align	2
 676              		.global	PWM_MOTOR_ReadCapture
 677              		.thumb
 678              		.thumb_func
 679              		.type	PWM_MOTOR_ReadCapture, %function
 680              	PWM_MOTOR_ReadCapture:
 681              	.LFB15:
 766:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	
 767:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* (PWM_MOTOR_UseControl) */
 768:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 769:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 770:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (!PWM_MOTOR_UsingFixedFunction)
 771:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 772:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 773:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 774:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadCapture
 775:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 776:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 777:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 778:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Reads the capture value from the capture FIFO.
 779:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 780:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 781:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 782:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 783:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 784:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8/uint16: The current capture value
 785:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 786:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/  
 787:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint16 PWM_MOTOR_ReadCapture(void)  
 788:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 682              		.loc 1 788 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 1, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 687 0000 80B4     		push	{r7}
 688              	.LCFI39:
 689              		.cfi_def_cfa_offset 4
 690              		.cfi_offset 7, -4
 691 0002 00AF     		add	r7, sp, #0
 692              	.LCFI40:
 693              		.cfi_def_cfa_register 7
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 27


 789:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     	return (CY_GET_REG16(PWM_MOTOR_CAPTURE_LSB_PTR));
 694              		.loc 1 789 0
 695 0004 46F6A823 		movw	r3, #27304
 696 0008 C4F20003 		movt	r3, 16384
 697 000c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 698 000e 9BB2     		uxth	r3, r3
 790:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 699              		.loc 1 790 0
 700 0010 1846     		mov	r0, r3
 701 0012 BD46     		mov	sp, r7
 702 0014 80BC     		pop	{r7}
 703 0016 7047     		bx	lr
 704              		.cfi_endproc
 705              	.LFE15:
 706              		.size	PWM_MOTOR_ReadCapture, .-PWM_MOTOR_ReadCapture
 707              		.section	.text.PWM_MOTOR_ReadCompare,"ax",%progbits
 708              		.align	2
 709              		.global	PWM_MOTOR_ReadCompare
 710              		.thumb
 711              		.thumb_func
 712              		.type	PWM_MOTOR_ReadCompare, %function
 713              	PWM_MOTOR_ReadCompare:
 714              	.LFB16:
 791:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	
 792:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* (!PWM_MOTOR_UsingFixedFunction) */
 793:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 794:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 795:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #if (PWM_MOTOR_UseOneCompareMode)
 796:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 797:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 798:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 799:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadCompare
 800:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 801:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 802:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 803:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is 
 804:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 805:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 806:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 807:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 808:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 809:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 810:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8/uint16: Current compare value
 811:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 812:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/  
 813:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint16 PWM_MOTOR_ReadCompare(void)  
 814:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 715              		.loc 1 814 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 1, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 720 0000 80B4     		push	{r7}
 721              	.LCFI41:
 722              		.cfi_def_cfa_offset 4
 723              		.cfi_offset 7, -4
 724 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 28


 725              	.LCFI42:
 726              		.cfi_def_cfa_register 7
 815:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		#if(PWM_MOTOR_UsingFixedFunction)
 816:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             return ((uint16)CY_GET_REG16(PWM_MOTOR_COMPARE1_LSB_PTR));
 817:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #else
 818:.\Generated_Source\PSoC5/PWM_MOTOR.c ****             return (CY_GET_REG16(PWM_MOTOR_COMPARE1_LSB_PTR));
 727              		.loc 1 818 0
 728 0004 46F64823 		movw	r3, #27208
 729 0008 C4F20003 		movt	r3, 16384
 730 000c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 731 000e 9BB2     		uxth	r3, r3
 819:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         #endif /* (PWM_MOTOR_UsingFixedFunction) */
 820:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 732              		.loc 1 820 0
 733 0010 1846     		mov	r0, r3
 734 0012 BD46     		mov	sp, r7
 735 0014 80BC     		pop	{r7}
 736 0016 7047     		bx	lr
 737              		.cfi_endproc
 738              	.LFE16:
 739              		.size	PWM_MOTOR_ReadCompare, .-PWM_MOTOR_ReadCompare
 740              		.section	.text.PWM_MOTOR_ReadPeriod,"ax",%progbits
 741              		.align	2
 742              		.global	PWM_MOTOR_ReadPeriod
 743              		.thumb
 744              		.thumb_func
 745              		.type	PWM_MOTOR_ReadPeriod, %function
 746              	PWM_MOTOR_ReadPeriod:
 747              	.LFB17:
 821:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 822:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #else
 823:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 824:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 825:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 826:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadCompare1
 827:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 828:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
 829:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 830:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Reads the compare value for the compare1 output.
 831:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 832:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 833:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 834:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 835:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 836:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8/uint16: Current compare value.
 837:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 838:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/  
 839:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint16 PWM_MOTOR_ReadCompare1(void) 
 840:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 841:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		return (CY_GET_REG16(PWM_MOTOR_COMPARE1_LSB_PTR));
 842:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 843:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 844:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 845:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     /*******************************************************************************
 846:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Function Name: PWM_MOTOR_ReadCompare2
 847:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     ********************************************************************************
 848:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * 
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 29


 849:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Summary:
 850:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  Reads the compare value for the compare2 output.
 851:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 852:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Parameters:  
 853:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  None
 854:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 855:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     * Return: 
 856:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *  uint8/uint16: Current compare value.
 857:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *
 858:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     *******************************************************************************/  
 859:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     uint16 PWM_MOTOR_ReadCompare2(void)  
 860:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     {
 861:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 		return (CY_GET_REG16(PWM_MOTOR_COMPARE2_LSB_PTR));
 862:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     }
 863:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 864:.\Generated_Source\PSoC5/PWM_MOTOR.c **** #endif /* (PWM_MOTOR_UseOneCompareMode) */
 865:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 866:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 
 867:.\Generated_Source\PSoC5/PWM_MOTOR.c **** /*******************************************************************************
 868:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Function Name: PWM_MOTOR_ReadPeriod
 869:.\Generated_Source\PSoC5/PWM_MOTOR.c **** ********************************************************************************
 870:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * 
 871:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Summary:
 872:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  Reads the period value used by the PWM hardware.
 873:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 874:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Parameters:  
 875:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  None
 876:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 877:.\Generated_Source\PSoC5/PWM_MOTOR.c **** * Return: 
 878:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *  uint8/16: Period value
 879:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *
 880:.\Generated_Source\PSoC5/PWM_MOTOR.c **** *******************************************************************************/ 
 881:.\Generated_Source\PSoC5/PWM_MOTOR.c **** uint16 PWM_MOTOR_ReadPeriod(void) 
 882:.\Generated_Source\PSoC5/PWM_MOTOR.c **** {
 748              		.loc 1 882 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 1, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 753 0000 80B4     		push	{r7}
 754              	.LCFI43:
 755              		.cfi_def_cfa_offset 4
 756              		.cfi_offset 7, -4
 757 0002 00AF     		add	r7, sp, #0
 758              	.LCFI44:
 759              		.cfi_def_cfa_register 7
 883:.\Generated_Source\PSoC5/PWM_MOTOR.c **** 	#if(PWM_MOTOR_UsingFixedFunction)
 884:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         return ((uint16)CY_GET_REG16(PWM_MOTOR_PERIOD_LSB_PTR));
 885:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #else
 886:.\Generated_Source\PSoC5/PWM_MOTOR.c ****         return (CY_GET_REG16(PWM_MOTOR_PERIOD_LSB_PTR));
 760              		.loc 1 886 0
 761 0004 46F68823 		movw	r3, #27272
 762 0008 C4F20003 		movt	r3, 16384
 763 000c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 764 000e 9BB2     		uxth	r3, r3
 887:.\Generated_Source\PSoC5/PWM_MOTOR.c ****     #endif /* (PWM_MOTOR_UsingFixedFunction) */
 888:.\Generated_Source\PSoC5/PWM_MOTOR.c **** }
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 30


 765              		.loc 1 888 0
 766 0010 1846     		mov	r0, r3
 767 0012 BD46     		mov	sp, r7
 768 0014 80BC     		pop	{r7}
 769 0016 7047     		bx	lr
 770              		.cfi_endproc
 771              	.LFE17:
 772              		.size	PWM_MOTOR_ReadPeriod, .-PWM_MOTOR_ReadPeriod
 773              		.text
 774              	.Letext0:
 775              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 776              		.section	.debug_info,"",%progbits
 777              	.Ldebug_info0:
 778 0000 47030000 		.4byte	0x347
 779 0004 0200     		.2byte	0x2
 780 0006 00000000 		.4byte	.Ldebug_abbrev0
 781 000a 04       		.byte	0x4
 782 000b 01       		.uleb128 0x1
 783 000c 00030000 		.4byte	.LASF44
 784 0010 01       		.byte	0x1
 785 0011 2F020000 		.4byte	.LASF45
 786 0015 55000000 		.4byte	.LASF46
 787 0019 00000000 		.4byte	.Ldebug_ranges0+0
 788 001d 00000000 		.4byte	0
 789 0021 00000000 		.4byte	0
 790 0025 00000000 		.4byte	.Ldebug_line0
 791 0029 02       		.uleb128 0x2
 792 002a 01       		.byte	0x1
 793 002b 06       		.byte	0x6
 794 002c 03010000 		.4byte	.LASF0
 795 0030 02       		.uleb128 0x2
 796 0031 01       		.byte	0x1
 797 0032 08       		.byte	0x8
 798 0033 0F010000 		.4byte	.LASF1
 799 0037 02       		.uleb128 0x2
 800 0038 02       		.byte	0x2
 801 0039 05       		.byte	0x5
 802 003a F6020000 		.4byte	.LASF2
 803 003e 02       		.uleb128 0x2
 804 003f 02       		.byte	0x2
 805 0040 07       		.byte	0x7
 806 0041 42000000 		.4byte	.LASF3
 807 0045 02       		.uleb128 0x2
 808 0046 04       		.byte	0x4
 809 0047 05       		.byte	0x5
 810 0048 49030000 		.4byte	.LASF4
 811 004c 02       		.uleb128 0x2
 812 004d 04       		.byte	0x4
 813 004e 07       		.byte	0x7
 814 004f 38010000 		.4byte	.LASF5
 815 0053 02       		.uleb128 0x2
 816 0054 08       		.byte	0x8
 817 0055 05       		.byte	0x5
 818 0056 9E020000 		.4byte	.LASF6
 819 005a 02       		.uleb128 0x2
 820 005b 08       		.byte	0x8
 821 005c 07       		.byte	0x7
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 31


 822 005d 11020000 		.4byte	.LASF7
 823 0061 03       		.uleb128 0x3
 824 0062 04       		.byte	0x4
 825 0063 05       		.byte	0x5
 826 0064 696E7400 		.ascii	"int\000"
 827 0068 02       		.uleb128 0x2
 828 0069 04       		.byte	0x4
 829 006a 07       		.byte	0x7
 830 006b EE010000 		.4byte	.LASF8
 831 006f 04       		.uleb128 0x4
 832 0070 4A010000 		.4byte	.LASF9
 833 0074 02       		.byte	0x2
 834 0075 5B       		.byte	0x5b
 835 0076 30000000 		.4byte	0x30
 836 007a 04       		.uleb128 0x4
 837 007b CF010000 		.4byte	.LASF10
 838 007f 02       		.byte	0x2
 839 0080 5C       		.byte	0x5c
 840 0081 3E000000 		.4byte	0x3e
 841 0085 02       		.uleb128 0x2
 842 0086 04       		.byte	0x4
 843 0087 04       		.byte	0x4
 844 0088 E8000000 		.4byte	.LASF11
 845 008c 02       		.uleb128 0x2
 846 008d 08       		.byte	0x8
 847 008e 04       		.byte	0x4
 848 008f CB000000 		.4byte	.LASF12
 849 0093 02       		.uleb128 0x2
 850 0094 01       		.byte	0x1
 851 0095 08       		.byte	0x8
 852 0096 52030000 		.4byte	.LASF13
 853 009a 04       		.uleb128 0x4
 854 009b 1D010000 		.4byte	.LASF14
 855 009f 02       		.byte	0x2
 856 00a0 F0       		.byte	0xf0
 857 00a1 A5000000 		.4byte	0xa5
 858 00a5 05       		.uleb128 0x5
 859 00a6 6F000000 		.4byte	0x6f
 860 00aa 04       		.uleb128 0x4
 861 00ab 00000000 		.4byte	.LASF15
 862 00af 02       		.byte	0x2
 863 00b0 F1       		.byte	0xf1
 864 00b1 B5000000 		.4byte	0xb5
 865 00b5 05       		.uleb128 0x5
 866 00b6 7A000000 		.4byte	0x7a
 867 00ba 02       		.uleb128 0x2
 868 00bb 04       		.byte	0x4
 869 00bc 07       		.byte	0x7
 870 00bd 78020000 		.4byte	.LASF16
 871 00c1 06       		.uleb128 0x6
 872 00c2 01       		.byte	0x1
 873 00c3 BF010000 		.4byte	.LASF19
 874 00c7 01       		.byte	0x1
 875 00c8 32       		.byte	0x32
 876 00c9 01       		.byte	0x1
 877 00ca 00000000 		.4byte	.LFB0
 878 00ce 2A000000 		.4byte	.LFE0
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 32


 879 00d2 00000000 		.4byte	.LLST0
 880 00d6 01       		.byte	0x1
 881 00d7 07       		.uleb128 0x7
 882 00d8 01       		.byte	0x1
 883 00d9 E7020000 		.4byte	.LASF22
 884 00dd 01       		.byte	0x1
 885 00de 4F       		.byte	0x4f
 886 00df 01       		.byte	0x1
 887 00e0 00000000 		.4byte	.LFB1
 888 00e4 C2000000 		.4byte	.LFE1
 889 00e8 2C000000 		.4byte	.LLST1
 890 00ec 01       		.byte	0x1
 891 00ed 0E010000 		.4byte	0x10e
 892 00f1 08       		.uleb128 0x8
 893 00f2 54020000 		.4byte	.LASF17
 894 00f6 01       		.byte	0x1
 895 00f7 52       		.byte	0x52
 896 00f8 6F000000 		.4byte	0x6f
 897 00fc 02       		.byte	0x2
 898 00fd 91       		.byte	0x91
 899 00fe 77       		.sleb128 -9
 900 00ff 08       		.uleb128 0x8
 901 0100 95010000 		.4byte	.LASF18
 902 0104 01       		.byte	0x1
 903 0105 58       		.byte	0x58
 904 0106 6F000000 		.4byte	0x6f
 905 010a 02       		.byte	0x2
 906 010b 91       		.byte	0x91
 907 010c 76       		.sleb128 -10
 908 010d 00       		.byte	0
 909 010e 09       		.uleb128 0x9
 910 010f 01       		.byte	0x1
 911 0110 AE010000 		.4byte	.LASF20
 912 0114 01       		.byte	0x1
 913 0115 C1       		.byte	0xc1
 914 0116 01       		.byte	0x1
 915 0117 00000000 		.4byte	.LFB2
 916 011b 26000000 		.4byte	.LFE2
 917 011f 64000000 		.4byte	.LLST2
 918 0123 01       		.byte	0x1
 919 0124 09       		.uleb128 0x9
 920 0125 01       		.byte	0x1
 921 0126 33000000 		.4byte	.LASF21
 922 012a 01       		.byte	0x1
 923 012b E3       		.byte	0xe3
 924 012c 01       		.byte	0x1
 925 012d 00000000 		.4byte	.LFB3
 926 0131 26000000 		.4byte	.LFE3
 927 0135 90000000 		.4byte	.LLST3
 928 0139 01       		.byte	0x1
 929 013a 0A       		.uleb128 0xa
 930 013b 01       		.byte	0x1
 931 013c BA020000 		.4byte	.LASF23
 932 0140 01       		.byte	0x1
 933 0141 8D01     		.2byte	0x18d
 934 0143 01       		.byte	0x1
 935 0144 00000000 		.4byte	.LFB4
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 33


 936 0148 20000000 		.4byte	.LFE4
 937 014c BC000000 		.4byte	.LLST4
 938 0150 01       		.byte	0x1
 939 0151 65010000 		.4byte	0x165
 940 0155 0B       		.uleb128 0xb
 941 0156 6F010000 		.4byte	.LASF26
 942 015a 01       		.byte	0x1
 943 015b 8D01     		.2byte	0x18d
 944 015d 7A000000 		.4byte	0x7a
 945 0161 02       		.byte	0x2
 946 0162 91       		.byte	0x91
 947 0163 76       		.sleb128 -10
 948 0164 00       		.byte	0
 949 0165 0C       		.uleb128 0xc
 950 0166 01       		.byte	0x1
 951 0167 FB010000 		.4byte	.LASF32
 952 016b 01       		.byte	0x1
 953 016c A301     		.2byte	0x1a3
 954 016e 01       		.byte	0x1
 955 016f 7A000000 		.4byte	0x7a
 956 0173 00000000 		.4byte	.LFB5
 957 0177 22000000 		.4byte	.LFE5
 958 017b F4000000 		.4byte	.LLST5
 959 017f 01       		.byte	0x1
 960 0180 0D       		.uleb128 0xd
 961 0181 01       		.byte	0x1
 962 0182 06000000 		.4byte	.LASF24
 963 0186 01       		.byte	0x1
 964 0187 BF01     		.2byte	0x1bf
 965 0189 01       		.byte	0x1
 966 018a 00000000 		.4byte	.LFB6
 967 018e 1A000000 		.4byte	.LFE6
 968 0192 20010000 		.4byte	.LLST6
 969 0196 01       		.byte	0x1
 970 0197 0A       		.uleb128 0xa
 971 0198 01       		.byte	0x1
 972 0199 22010000 		.4byte	.LASF25
 973 019d 01       		.byte	0x1
 974 019e DC01     		.2byte	0x1dc
 975 01a0 01       		.byte	0x1
 976 01a1 00000000 		.4byte	.LFB7
 977 01a5 20000000 		.4byte	.LFE7
 978 01a9 4C010000 		.4byte	.LLST7
 979 01ad 01       		.byte	0x1
 980 01ae C2010000 		.4byte	0x1c2
 981 01b2 0B       		.uleb128 0xb
 982 01b3 2C000000 		.4byte	.LASF27
 983 01b7 01       		.byte	0x1
 984 01b8 DC01     		.2byte	0x1dc
 985 01ba 7A000000 		.4byte	0x7a
 986 01be 02       		.byte	0x2
 987 01bf 91       		.byte	0x91
 988 01c0 76       		.sleb128 -10
 989 01c1 00       		.byte	0
 990 01c2 0A       		.uleb128 0xa
 991 01c3 01       		.byte	0x1
 992 01c4 58010000 		.4byte	.LASF28
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 34


 993 01c8 01       		.byte	0x1
 994 01c9 FE01     		.2byte	0x1fe
 995 01cb 01       		.byte	0x1
 996 01cc 00000000 		.4byte	.LFB8
 997 01d0 20000000 		.4byte	.LFE8
 998 01d4 84010000 		.4byte	.LLST8
 999 01d8 01       		.byte	0x1
 1000 01d9 ED010000 		.4byte	0x1ed
 1001 01dd 0B       		.uleb128 0xb
 1002 01de 72030000 		.4byte	.LASF29
 1003 01e2 01       		.byte	0x1
 1004 01e3 FE01     		.2byte	0x1fe
 1005 01e5 7A000000 		.4byte	0x7a
 1006 01e9 02       		.byte	0x2
 1007 01ea 91       		.byte	0x91
 1008 01eb 76       		.sleb128 -10
 1009 01ec 00       		.byte	0
 1010 01ed 0A       		.uleb128 0xa
 1011 01ee 01       		.byte	0x1
 1012 01ef D6010000 		.4byte	.LASF30
 1013 01f3 01       		.byte	0x1
 1014 01f4 5E02     		.2byte	0x25e
 1015 01f6 01       		.byte	0x1
 1016 01f7 00000000 		.4byte	.LFB9
 1017 01fb 56000000 		.4byte	.LFE9
 1018 01ff BC010000 		.4byte	.LLST9
 1019 0203 01       		.byte	0x1
 1020 0204 18020000 		.4byte	0x218
 1021 0208 0B       		.uleb128 0xb
 1022 0209 7A030000 		.4byte	.LASF31
 1023 020d 01       		.byte	0x1
 1024 020e 5E02     		.2byte	0x25e
 1025 0210 6F000000 		.4byte	0x6f
 1026 0214 02       		.byte	0x2
 1027 0215 91       		.byte	0x91
 1028 0216 77       		.sleb128 -9
 1029 0217 00       		.byte	0
 1030 0218 0C       		.uleb128 0xc
 1031 0219 01       		.byte	0x1
 1032 021a 83030000 		.4byte	.LASF33
 1033 021e 01       		.byte	0x1
 1034 021f 8202     		.2byte	0x282
 1035 0221 01       		.byte	0x1
 1036 0222 6F000000 		.4byte	0x6f
 1037 0226 00000000 		.4byte	.LFB10
 1038 022a 1E000000 		.4byte	.LFE10
 1039 022e F4010000 		.4byte	.LLST10
 1040 0232 01       		.byte	0x1
 1041 0233 0A       		.uleb128 0xa
 1042 0234 01       		.byte	0x1
 1043 0235 57030000 		.4byte	.LASF34
 1044 0239 01       		.byte	0x1
 1045 023a A602     		.2byte	0x2a6
 1046 023c 01       		.byte	0x1
 1047 023d 00000000 		.4byte	.LFB11
 1048 0241 20000000 		.4byte	.LFE11
 1049 0245 20020000 		.4byte	.LLST11
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 35


 1050 0249 01       		.byte	0x1
 1051 024a 5E020000 		.4byte	0x25e
 1052 024e 0B       		.uleb128 0xb
 1053 024f AC020000 		.4byte	.LASF35
 1054 0253 01       		.byte	0x1
 1055 0254 A602     		.2byte	0x2a6
 1056 0256 6F000000 		.4byte	0x6f
 1057 025a 02       		.byte	0x2
 1058 025b 91       		.byte	0x91
 1059 025c 77       		.sleb128 -9
 1060 025d 00       		.byte	0
 1061 025e 0E       		.uleb128 0xe
 1062 025f 01       		.byte	0x1
 1063 0260 81020000 		.4byte	.LASF37
 1064 0264 01       		.byte	0x1
 1065 0265 C102     		.2byte	0x2c1
 1066 0267 01       		.byte	0x1
 1067 0268 6F000000 		.4byte	0x6f
 1068 026c 00000000 		.4byte	.LFB12
 1069 0270 20000000 		.4byte	.LFE12
 1070 0274 58020000 		.4byte	.LLST12
 1071 0278 01       		.byte	0x1
 1072 0279 8D020000 		.4byte	0x28d
 1073 027d 0F       		.uleb128 0xf
 1074 027e 28020000 		.4byte	.LASF36
 1075 0282 01       		.byte	0x1
 1076 0283 C302     		.2byte	0x2c3
 1077 0285 6F000000 		.4byte	0x6f
 1078 0289 02       		.byte	0x2
 1079 028a 91       		.byte	0x91
 1080 028b 77       		.sleb128 -9
 1081 028c 00       		.byte	0
 1082 028d 0E       		.uleb128 0xe
 1083 028e 01       		.byte	0x1
 1084 028f 77010000 		.4byte	.LASF38
 1085 0293 01       		.byte	0x1
 1086 0294 DE02     		.2byte	0x2de
 1087 0296 01       		.byte	0x1
 1088 0297 6F000000 		.4byte	0x6f
 1089 029b 00000000 		.4byte	.LFB13
 1090 029f 20000000 		.4byte	.LFE13
 1091 02a3 90020000 		.4byte	.LLST13
 1092 02a7 01       		.byte	0x1
 1093 02a8 BC020000 		.4byte	0x2bc
 1094 02ac 0F       		.uleb128 0xf
 1095 02ad 28020000 		.4byte	.LASF36
 1096 02b1 01       		.byte	0x1
 1097 02b2 E002     		.2byte	0x2e0
 1098 02b4 6F000000 		.4byte	0x6f
 1099 02b8 02       		.byte	0x2
 1100 02b9 91       		.byte	0x91
 1101 02ba 77       		.sleb128 -9
 1102 02bb 00       		.byte	0
 1103 02bc 0A       		.uleb128 0xa
 1104 02bd 01       		.byte	0x1
 1105 02be 59020000 		.4byte	.LASF39
 1106 02c2 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 36


 1107 02c3 FA02     		.2byte	0x2fa
 1108 02c5 01       		.byte	0x1
 1109 02c6 00000000 		.4byte	.LFB14
 1110 02ca 20000000 		.4byte	.LFE14
 1111 02ce C8020000 		.4byte	.LLST14
 1112 02d2 01       		.byte	0x1
 1113 02d3 E7020000 		.4byte	0x2e7
 1114 02d7 0B       		.uleb128 0xb
 1115 02d8 50010000 		.4byte	.LASF40
 1116 02dc 01       		.byte	0x1
 1117 02dd FA02     		.2byte	0x2fa
 1118 02df 6F000000 		.4byte	0x6f
 1119 02e3 02       		.byte	0x2
 1120 02e4 91       		.byte	0x91
 1121 02e5 77       		.sleb128 -9
 1122 02e6 00       		.byte	0
 1123 02e7 0C       		.uleb128 0xc
 1124 02e8 01       		.byte	0x1
 1125 02e9 D1020000 		.4byte	.LASF41
 1126 02ed 01       		.byte	0x1
 1127 02ee 1303     		.2byte	0x313
 1128 02f0 01       		.byte	0x1
 1129 02f1 7A000000 		.4byte	0x7a
 1130 02f5 00000000 		.4byte	.LFB15
 1131 02f9 18000000 		.4byte	.LFE15
 1132 02fd 00030000 		.4byte	.LLST15
 1133 0301 01       		.byte	0x1
 1134 0302 0C       		.uleb128 0xc
 1135 0303 01       		.byte	0x1
 1136 0304 D2000000 		.4byte	.LASF42
 1137 0308 01       		.byte	0x1
 1138 0309 2D03     		.2byte	0x32d
 1139 030b 01       		.byte	0x1
 1140 030c 7A000000 		.4byte	0x7a
 1141 0310 00000000 		.4byte	.LFB16
 1142 0314 18000000 		.4byte	.LFE16
 1143 0318 2C030000 		.4byte	.LLST16
 1144 031c 01       		.byte	0x1
 1145 031d 0C       		.uleb128 0xc
 1146 031e 01       		.byte	0x1
 1147 031f EE000000 		.4byte	.LASF43
 1148 0323 01       		.byte	0x1
 1149 0324 7103     		.2byte	0x371
 1150 0326 01       		.byte	0x1
 1151 0327 7A000000 		.4byte	0x7a
 1152 032b 00000000 		.4byte	.LFB17
 1153 032f 18000000 		.4byte	.LFE17
 1154 0333 58030000 		.4byte	.LLST17
 1155 0337 01       		.byte	0x1
 1156 0338 10       		.uleb128 0x10
 1157 0339 1A000000 		.4byte	.LASF47
 1158 033d 01       		.byte	0x1
 1159 033e 1B       		.byte	0x1b
 1160 033f 6F000000 		.4byte	0x6f
 1161 0343 01       		.byte	0x1
 1162 0344 05       		.byte	0x5
 1163 0345 03       		.byte	0x3
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 37


 1164 0346 00000000 		.4byte	PWM_MOTOR_initVar
 1165 034a 00       		.byte	0
 1166              		.section	.debug_abbrev,"",%progbits
 1167              	.Ldebug_abbrev0:
 1168 0000 01       		.uleb128 0x1
 1169 0001 11       		.uleb128 0x11
 1170 0002 01       		.byte	0x1
 1171 0003 25       		.uleb128 0x25
 1172 0004 0E       		.uleb128 0xe
 1173 0005 13       		.uleb128 0x13
 1174 0006 0B       		.uleb128 0xb
 1175 0007 03       		.uleb128 0x3
 1176 0008 0E       		.uleb128 0xe
 1177 0009 1B       		.uleb128 0x1b
 1178 000a 0E       		.uleb128 0xe
 1179 000b 55       		.uleb128 0x55
 1180 000c 06       		.uleb128 0x6
 1181 000d 11       		.uleb128 0x11
 1182 000e 01       		.uleb128 0x1
 1183 000f 52       		.uleb128 0x52
 1184 0010 01       		.uleb128 0x1
 1185 0011 10       		.uleb128 0x10
 1186 0012 06       		.uleb128 0x6
 1187 0013 00       		.byte	0
 1188 0014 00       		.byte	0
 1189 0015 02       		.uleb128 0x2
 1190 0016 24       		.uleb128 0x24
 1191 0017 00       		.byte	0
 1192 0018 0B       		.uleb128 0xb
 1193 0019 0B       		.uleb128 0xb
 1194 001a 3E       		.uleb128 0x3e
 1195 001b 0B       		.uleb128 0xb
 1196 001c 03       		.uleb128 0x3
 1197 001d 0E       		.uleb128 0xe
 1198 001e 00       		.byte	0
 1199 001f 00       		.byte	0
 1200 0020 03       		.uleb128 0x3
 1201 0021 24       		.uleb128 0x24
 1202 0022 00       		.byte	0
 1203 0023 0B       		.uleb128 0xb
 1204 0024 0B       		.uleb128 0xb
 1205 0025 3E       		.uleb128 0x3e
 1206 0026 0B       		.uleb128 0xb
 1207 0027 03       		.uleb128 0x3
 1208 0028 08       		.uleb128 0x8
 1209 0029 00       		.byte	0
 1210 002a 00       		.byte	0
 1211 002b 04       		.uleb128 0x4
 1212 002c 16       		.uleb128 0x16
 1213 002d 00       		.byte	0
 1214 002e 03       		.uleb128 0x3
 1215 002f 0E       		.uleb128 0xe
 1216 0030 3A       		.uleb128 0x3a
 1217 0031 0B       		.uleb128 0xb
 1218 0032 3B       		.uleb128 0x3b
 1219 0033 0B       		.uleb128 0xb
 1220 0034 49       		.uleb128 0x49
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 38


 1221 0035 13       		.uleb128 0x13
 1222 0036 00       		.byte	0
 1223 0037 00       		.byte	0
 1224 0038 05       		.uleb128 0x5
 1225 0039 35       		.uleb128 0x35
 1226 003a 00       		.byte	0
 1227 003b 49       		.uleb128 0x49
 1228 003c 13       		.uleb128 0x13
 1229 003d 00       		.byte	0
 1230 003e 00       		.byte	0
 1231 003f 06       		.uleb128 0x6
 1232 0040 2E       		.uleb128 0x2e
 1233 0041 00       		.byte	0
 1234 0042 3F       		.uleb128 0x3f
 1235 0043 0C       		.uleb128 0xc
 1236 0044 03       		.uleb128 0x3
 1237 0045 0E       		.uleb128 0xe
 1238 0046 3A       		.uleb128 0x3a
 1239 0047 0B       		.uleb128 0xb
 1240 0048 3B       		.uleb128 0x3b
 1241 0049 0B       		.uleb128 0xb
 1242 004a 27       		.uleb128 0x27
 1243 004b 0C       		.uleb128 0xc
 1244 004c 11       		.uleb128 0x11
 1245 004d 01       		.uleb128 0x1
 1246 004e 12       		.uleb128 0x12
 1247 004f 01       		.uleb128 0x1
 1248 0050 40       		.uleb128 0x40
 1249 0051 06       		.uleb128 0x6
 1250 0052 9642     		.uleb128 0x2116
 1251 0054 0C       		.uleb128 0xc
 1252 0055 00       		.byte	0
 1253 0056 00       		.byte	0
 1254 0057 07       		.uleb128 0x7
 1255 0058 2E       		.uleb128 0x2e
 1256 0059 01       		.byte	0x1
 1257 005a 3F       		.uleb128 0x3f
 1258 005b 0C       		.uleb128 0xc
 1259 005c 03       		.uleb128 0x3
 1260 005d 0E       		.uleb128 0xe
 1261 005e 3A       		.uleb128 0x3a
 1262 005f 0B       		.uleb128 0xb
 1263 0060 3B       		.uleb128 0x3b
 1264 0061 0B       		.uleb128 0xb
 1265 0062 27       		.uleb128 0x27
 1266 0063 0C       		.uleb128 0xc
 1267 0064 11       		.uleb128 0x11
 1268 0065 01       		.uleb128 0x1
 1269 0066 12       		.uleb128 0x12
 1270 0067 01       		.uleb128 0x1
 1271 0068 40       		.uleb128 0x40
 1272 0069 06       		.uleb128 0x6
 1273 006a 9642     		.uleb128 0x2116
 1274 006c 0C       		.uleb128 0xc
 1275 006d 01       		.uleb128 0x1
 1276 006e 13       		.uleb128 0x13
 1277 006f 00       		.byte	0
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 39


 1278 0070 00       		.byte	0
 1279 0071 08       		.uleb128 0x8
 1280 0072 34       		.uleb128 0x34
 1281 0073 00       		.byte	0
 1282 0074 03       		.uleb128 0x3
 1283 0075 0E       		.uleb128 0xe
 1284 0076 3A       		.uleb128 0x3a
 1285 0077 0B       		.uleb128 0xb
 1286 0078 3B       		.uleb128 0x3b
 1287 0079 0B       		.uleb128 0xb
 1288 007a 49       		.uleb128 0x49
 1289 007b 13       		.uleb128 0x13
 1290 007c 02       		.uleb128 0x2
 1291 007d 0A       		.uleb128 0xa
 1292 007e 00       		.byte	0
 1293 007f 00       		.byte	0
 1294 0080 09       		.uleb128 0x9
 1295 0081 2E       		.uleb128 0x2e
 1296 0082 00       		.byte	0
 1297 0083 3F       		.uleb128 0x3f
 1298 0084 0C       		.uleb128 0xc
 1299 0085 03       		.uleb128 0x3
 1300 0086 0E       		.uleb128 0xe
 1301 0087 3A       		.uleb128 0x3a
 1302 0088 0B       		.uleb128 0xb
 1303 0089 3B       		.uleb128 0x3b
 1304 008a 0B       		.uleb128 0xb
 1305 008b 27       		.uleb128 0x27
 1306 008c 0C       		.uleb128 0xc
 1307 008d 11       		.uleb128 0x11
 1308 008e 01       		.uleb128 0x1
 1309 008f 12       		.uleb128 0x12
 1310 0090 01       		.uleb128 0x1
 1311 0091 40       		.uleb128 0x40
 1312 0092 06       		.uleb128 0x6
 1313 0093 9742     		.uleb128 0x2117
 1314 0095 0C       		.uleb128 0xc
 1315 0096 00       		.byte	0
 1316 0097 00       		.byte	0
 1317 0098 0A       		.uleb128 0xa
 1318 0099 2E       		.uleb128 0x2e
 1319 009a 01       		.byte	0x1
 1320 009b 3F       		.uleb128 0x3f
 1321 009c 0C       		.uleb128 0xc
 1322 009d 03       		.uleb128 0x3
 1323 009e 0E       		.uleb128 0xe
 1324 009f 3A       		.uleb128 0x3a
 1325 00a0 0B       		.uleb128 0xb
 1326 00a1 3B       		.uleb128 0x3b
 1327 00a2 05       		.uleb128 0x5
 1328 00a3 27       		.uleb128 0x27
 1329 00a4 0C       		.uleb128 0xc
 1330 00a5 11       		.uleb128 0x11
 1331 00a6 01       		.uleb128 0x1
 1332 00a7 12       		.uleb128 0x12
 1333 00a8 01       		.uleb128 0x1
 1334 00a9 40       		.uleb128 0x40
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 40


 1335 00aa 06       		.uleb128 0x6
 1336 00ab 9742     		.uleb128 0x2117
 1337 00ad 0C       		.uleb128 0xc
 1338 00ae 01       		.uleb128 0x1
 1339 00af 13       		.uleb128 0x13
 1340 00b0 00       		.byte	0
 1341 00b1 00       		.byte	0
 1342 00b2 0B       		.uleb128 0xb
 1343 00b3 05       		.uleb128 0x5
 1344 00b4 00       		.byte	0
 1345 00b5 03       		.uleb128 0x3
 1346 00b6 0E       		.uleb128 0xe
 1347 00b7 3A       		.uleb128 0x3a
 1348 00b8 0B       		.uleb128 0xb
 1349 00b9 3B       		.uleb128 0x3b
 1350 00ba 05       		.uleb128 0x5
 1351 00bb 49       		.uleb128 0x49
 1352 00bc 13       		.uleb128 0x13
 1353 00bd 02       		.uleb128 0x2
 1354 00be 0A       		.uleb128 0xa
 1355 00bf 00       		.byte	0
 1356 00c0 00       		.byte	0
 1357 00c1 0C       		.uleb128 0xc
 1358 00c2 2E       		.uleb128 0x2e
 1359 00c3 00       		.byte	0
 1360 00c4 3F       		.uleb128 0x3f
 1361 00c5 0C       		.uleb128 0xc
 1362 00c6 03       		.uleb128 0x3
 1363 00c7 0E       		.uleb128 0xe
 1364 00c8 3A       		.uleb128 0x3a
 1365 00c9 0B       		.uleb128 0xb
 1366 00ca 3B       		.uleb128 0x3b
 1367 00cb 05       		.uleb128 0x5
 1368 00cc 27       		.uleb128 0x27
 1369 00cd 0C       		.uleb128 0xc
 1370 00ce 49       		.uleb128 0x49
 1371 00cf 13       		.uleb128 0x13
 1372 00d0 11       		.uleb128 0x11
 1373 00d1 01       		.uleb128 0x1
 1374 00d2 12       		.uleb128 0x12
 1375 00d3 01       		.uleb128 0x1
 1376 00d4 40       		.uleb128 0x40
 1377 00d5 06       		.uleb128 0x6
 1378 00d6 9742     		.uleb128 0x2117
 1379 00d8 0C       		.uleb128 0xc
 1380 00d9 00       		.byte	0
 1381 00da 00       		.byte	0
 1382 00db 0D       		.uleb128 0xd
 1383 00dc 2E       		.uleb128 0x2e
 1384 00dd 00       		.byte	0
 1385 00de 3F       		.uleb128 0x3f
 1386 00df 0C       		.uleb128 0xc
 1387 00e0 03       		.uleb128 0x3
 1388 00e1 0E       		.uleb128 0xe
 1389 00e2 3A       		.uleb128 0x3a
 1390 00e3 0B       		.uleb128 0xb
 1391 00e4 3B       		.uleb128 0x3b
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 41


 1392 00e5 05       		.uleb128 0x5
 1393 00e6 27       		.uleb128 0x27
 1394 00e7 0C       		.uleb128 0xc
 1395 00e8 11       		.uleb128 0x11
 1396 00e9 01       		.uleb128 0x1
 1397 00ea 12       		.uleb128 0x12
 1398 00eb 01       		.uleb128 0x1
 1399 00ec 40       		.uleb128 0x40
 1400 00ed 06       		.uleb128 0x6
 1401 00ee 9642     		.uleb128 0x2116
 1402 00f0 0C       		.uleb128 0xc
 1403 00f1 00       		.byte	0
 1404 00f2 00       		.byte	0
 1405 00f3 0E       		.uleb128 0xe
 1406 00f4 2E       		.uleb128 0x2e
 1407 00f5 01       		.byte	0x1
 1408 00f6 3F       		.uleb128 0x3f
 1409 00f7 0C       		.uleb128 0xc
 1410 00f8 03       		.uleb128 0x3
 1411 00f9 0E       		.uleb128 0xe
 1412 00fa 3A       		.uleb128 0x3a
 1413 00fb 0B       		.uleb128 0xb
 1414 00fc 3B       		.uleb128 0x3b
 1415 00fd 05       		.uleb128 0x5
 1416 00fe 27       		.uleb128 0x27
 1417 00ff 0C       		.uleb128 0xc
 1418 0100 49       		.uleb128 0x49
 1419 0101 13       		.uleb128 0x13
 1420 0102 11       		.uleb128 0x11
 1421 0103 01       		.uleb128 0x1
 1422 0104 12       		.uleb128 0x12
 1423 0105 01       		.uleb128 0x1
 1424 0106 40       		.uleb128 0x40
 1425 0107 06       		.uleb128 0x6
 1426 0108 9742     		.uleb128 0x2117
 1427 010a 0C       		.uleb128 0xc
 1428 010b 01       		.uleb128 0x1
 1429 010c 13       		.uleb128 0x13
 1430 010d 00       		.byte	0
 1431 010e 00       		.byte	0
 1432 010f 0F       		.uleb128 0xf
 1433 0110 34       		.uleb128 0x34
 1434 0111 00       		.byte	0
 1435 0112 03       		.uleb128 0x3
 1436 0113 0E       		.uleb128 0xe
 1437 0114 3A       		.uleb128 0x3a
 1438 0115 0B       		.uleb128 0xb
 1439 0116 3B       		.uleb128 0x3b
 1440 0117 05       		.uleb128 0x5
 1441 0118 49       		.uleb128 0x49
 1442 0119 13       		.uleb128 0x13
 1443 011a 02       		.uleb128 0x2
 1444 011b 0A       		.uleb128 0xa
 1445 011c 00       		.byte	0
 1446 011d 00       		.byte	0
 1447 011e 10       		.uleb128 0x10
 1448 011f 34       		.uleb128 0x34
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 42


 1449 0120 00       		.byte	0
 1450 0121 03       		.uleb128 0x3
 1451 0122 0E       		.uleb128 0xe
 1452 0123 3A       		.uleb128 0x3a
 1453 0124 0B       		.uleb128 0xb
 1454 0125 3B       		.uleb128 0x3b
 1455 0126 0B       		.uleb128 0xb
 1456 0127 49       		.uleb128 0x49
 1457 0128 13       		.uleb128 0x13
 1458 0129 3F       		.uleb128 0x3f
 1459 012a 0C       		.uleb128 0xc
 1460 012b 02       		.uleb128 0x2
 1461 012c 0A       		.uleb128 0xa
 1462 012d 00       		.byte	0
 1463 012e 00       		.byte	0
 1464 012f 00       		.byte	0
 1465              		.section	.debug_loc,"",%progbits
 1466              	.Ldebug_loc0:
 1467              	.LLST0:
 1468 0000 00000000 		.4byte	.LFB0
 1469 0004 02000000 		.4byte	.LCFI0
 1470 0008 0200     		.2byte	0x2
 1471 000a 7D       		.byte	0x7d
 1472 000b 00       		.sleb128 0
 1473 000c 02000000 		.4byte	.LCFI0
 1474 0010 04000000 		.4byte	.LCFI1
 1475 0014 0200     		.2byte	0x2
 1476 0016 7D       		.byte	0x7d
 1477 0017 08       		.sleb128 8
 1478 0018 04000000 		.4byte	.LCFI1
 1479 001c 2A000000 		.4byte	.LFE0
 1480 0020 0200     		.2byte	0x2
 1481 0022 77       		.byte	0x77
 1482 0023 08       		.sleb128 8
 1483 0024 00000000 		.4byte	0
 1484 0028 00000000 		.4byte	0
 1485              	.LLST1:
 1486 002c 00000000 		.4byte	.LFB1
 1487 0030 02000000 		.4byte	.LCFI2
 1488 0034 0200     		.2byte	0x2
 1489 0036 7D       		.byte	0x7d
 1490 0037 00       		.sleb128 0
 1491 0038 02000000 		.4byte	.LCFI2
 1492 003c 04000000 		.4byte	.LCFI3
 1493 0040 0200     		.2byte	0x2
 1494 0042 7D       		.byte	0x7d
 1495 0043 08       		.sleb128 8
 1496 0044 04000000 		.4byte	.LCFI3
 1497 0048 06000000 		.4byte	.LCFI4
 1498 004c 0200     		.2byte	0x2
 1499 004e 7D       		.byte	0x7d
 1500 004f 10       		.sleb128 16
 1501 0050 06000000 		.4byte	.LCFI4
 1502 0054 C2000000 		.4byte	.LFE1
 1503 0058 0200     		.2byte	0x2
 1504 005a 77       		.byte	0x77
 1505 005b 10       		.sleb128 16
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 43


 1506 005c 00000000 		.4byte	0
 1507 0060 00000000 		.4byte	0
 1508              	.LLST2:
 1509 0064 00000000 		.4byte	.LFB2
 1510 0068 02000000 		.4byte	.LCFI5
 1511 006c 0200     		.2byte	0x2
 1512 006e 7D       		.byte	0x7d
 1513 006f 00       		.sleb128 0
 1514 0070 02000000 		.4byte	.LCFI5
 1515 0074 04000000 		.4byte	.LCFI6
 1516 0078 0200     		.2byte	0x2
 1517 007a 7D       		.byte	0x7d
 1518 007b 04       		.sleb128 4
 1519 007c 04000000 		.4byte	.LCFI6
 1520 0080 26000000 		.4byte	.LFE2
 1521 0084 0200     		.2byte	0x2
 1522 0086 77       		.byte	0x77
 1523 0087 04       		.sleb128 4
 1524 0088 00000000 		.4byte	0
 1525 008c 00000000 		.4byte	0
 1526              	.LLST3:
 1527 0090 00000000 		.4byte	.LFB3
 1528 0094 02000000 		.4byte	.LCFI7
 1529 0098 0200     		.2byte	0x2
 1530 009a 7D       		.byte	0x7d
 1531 009b 00       		.sleb128 0
 1532 009c 02000000 		.4byte	.LCFI7
 1533 00a0 04000000 		.4byte	.LCFI8
 1534 00a4 0200     		.2byte	0x2
 1535 00a6 7D       		.byte	0x7d
 1536 00a7 04       		.sleb128 4
 1537 00a8 04000000 		.4byte	.LCFI8
 1538 00ac 26000000 		.4byte	.LFE3
 1539 00b0 0200     		.2byte	0x2
 1540 00b2 77       		.byte	0x77
 1541 00b3 04       		.sleb128 4
 1542 00b4 00000000 		.4byte	0
 1543 00b8 00000000 		.4byte	0
 1544              	.LLST4:
 1545 00bc 00000000 		.4byte	.LFB4
 1546 00c0 02000000 		.4byte	.LCFI9
 1547 00c4 0200     		.2byte	0x2
 1548 00c6 7D       		.byte	0x7d
 1549 00c7 00       		.sleb128 0
 1550 00c8 02000000 		.4byte	.LCFI9
 1551 00cc 04000000 		.4byte	.LCFI10
 1552 00d0 0200     		.2byte	0x2
 1553 00d2 7D       		.byte	0x7d
 1554 00d3 04       		.sleb128 4
 1555 00d4 04000000 		.4byte	.LCFI10
 1556 00d8 06000000 		.4byte	.LCFI11
 1557 00dc 0200     		.2byte	0x2
 1558 00de 7D       		.byte	0x7d
 1559 00df 10       		.sleb128 16
 1560 00e0 06000000 		.4byte	.LCFI11
 1561 00e4 20000000 		.4byte	.LFE4
 1562 00e8 0200     		.2byte	0x2
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 44


 1563 00ea 77       		.byte	0x77
 1564 00eb 10       		.sleb128 16
 1565 00ec 00000000 		.4byte	0
 1566 00f0 00000000 		.4byte	0
 1567              	.LLST5:
 1568 00f4 00000000 		.4byte	.LFB5
 1569 00f8 02000000 		.4byte	.LCFI12
 1570 00fc 0200     		.2byte	0x2
 1571 00fe 7D       		.byte	0x7d
 1572 00ff 00       		.sleb128 0
 1573 0100 02000000 		.4byte	.LCFI12
 1574 0104 04000000 		.4byte	.LCFI13
 1575 0108 0200     		.2byte	0x2
 1576 010a 7D       		.byte	0x7d
 1577 010b 04       		.sleb128 4
 1578 010c 04000000 		.4byte	.LCFI13
 1579 0110 22000000 		.4byte	.LFE5
 1580 0114 0200     		.2byte	0x2
 1581 0116 77       		.byte	0x77
 1582 0117 04       		.sleb128 4
 1583 0118 00000000 		.4byte	0
 1584 011c 00000000 		.4byte	0
 1585              	.LLST6:
 1586 0120 00000000 		.4byte	.LFB6
 1587 0124 02000000 		.4byte	.LCFI14
 1588 0128 0200     		.2byte	0x2
 1589 012a 7D       		.byte	0x7d
 1590 012b 00       		.sleb128 0
 1591 012c 02000000 		.4byte	.LCFI14
 1592 0130 04000000 		.4byte	.LCFI15
 1593 0134 0200     		.2byte	0x2
 1594 0136 7D       		.byte	0x7d
 1595 0137 08       		.sleb128 8
 1596 0138 04000000 		.4byte	.LCFI15
 1597 013c 1A000000 		.4byte	.LFE6
 1598 0140 0200     		.2byte	0x2
 1599 0142 77       		.byte	0x77
 1600 0143 08       		.sleb128 8
 1601 0144 00000000 		.4byte	0
 1602 0148 00000000 		.4byte	0
 1603              	.LLST7:
 1604 014c 00000000 		.4byte	.LFB7
 1605 0150 02000000 		.4byte	.LCFI16
 1606 0154 0200     		.2byte	0x2
 1607 0156 7D       		.byte	0x7d
 1608 0157 00       		.sleb128 0
 1609 0158 02000000 		.4byte	.LCFI16
 1610 015c 04000000 		.4byte	.LCFI17
 1611 0160 0200     		.2byte	0x2
 1612 0162 7D       		.byte	0x7d
 1613 0163 04       		.sleb128 4
 1614 0164 04000000 		.4byte	.LCFI17
 1615 0168 06000000 		.4byte	.LCFI18
 1616 016c 0200     		.2byte	0x2
 1617 016e 7D       		.byte	0x7d
 1618 016f 10       		.sleb128 16
 1619 0170 06000000 		.4byte	.LCFI18
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 45


 1620 0174 20000000 		.4byte	.LFE7
 1621 0178 0200     		.2byte	0x2
 1622 017a 77       		.byte	0x77
 1623 017b 10       		.sleb128 16
 1624 017c 00000000 		.4byte	0
 1625 0180 00000000 		.4byte	0
 1626              	.LLST8:
 1627 0184 00000000 		.4byte	.LFB8
 1628 0188 02000000 		.4byte	.LCFI19
 1629 018c 0200     		.2byte	0x2
 1630 018e 7D       		.byte	0x7d
 1631 018f 00       		.sleb128 0
 1632 0190 02000000 		.4byte	.LCFI19
 1633 0194 04000000 		.4byte	.LCFI20
 1634 0198 0200     		.2byte	0x2
 1635 019a 7D       		.byte	0x7d
 1636 019b 04       		.sleb128 4
 1637 019c 04000000 		.4byte	.LCFI20
 1638 01a0 06000000 		.4byte	.LCFI21
 1639 01a4 0200     		.2byte	0x2
 1640 01a6 7D       		.byte	0x7d
 1641 01a7 10       		.sleb128 16
 1642 01a8 06000000 		.4byte	.LCFI21
 1643 01ac 20000000 		.4byte	.LFE8
 1644 01b0 0200     		.2byte	0x2
 1645 01b2 77       		.byte	0x77
 1646 01b3 10       		.sleb128 16
 1647 01b4 00000000 		.4byte	0
 1648 01b8 00000000 		.4byte	0
 1649              	.LLST9:
 1650 01bc 00000000 		.4byte	.LFB9
 1651 01c0 02000000 		.4byte	.LCFI22
 1652 01c4 0200     		.2byte	0x2
 1653 01c6 7D       		.byte	0x7d
 1654 01c7 00       		.sleb128 0
 1655 01c8 02000000 		.4byte	.LCFI22
 1656 01cc 04000000 		.4byte	.LCFI23
 1657 01d0 0200     		.2byte	0x2
 1658 01d2 7D       		.byte	0x7d
 1659 01d3 04       		.sleb128 4
 1660 01d4 04000000 		.4byte	.LCFI23
 1661 01d8 06000000 		.4byte	.LCFI24
 1662 01dc 0200     		.2byte	0x2
 1663 01de 7D       		.byte	0x7d
 1664 01df 10       		.sleb128 16
 1665 01e0 06000000 		.4byte	.LCFI24
 1666 01e4 56000000 		.4byte	.LFE9
 1667 01e8 0200     		.2byte	0x2
 1668 01ea 77       		.byte	0x77
 1669 01eb 10       		.sleb128 16
 1670 01ec 00000000 		.4byte	0
 1671 01f0 00000000 		.4byte	0
 1672              	.LLST10:
 1673 01f4 00000000 		.4byte	.LFB10
 1674 01f8 02000000 		.4byte	.LCFI25
 1675 01fc 0200     		.2byte	0x2
 1676 01fe 7D       		.byte	0x7d
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 46


 1677 01ff 00       		.sleb128 0
 1678 0200 02000000 		.4byte	.LCFI25
 1679 0204 04000000 		.4byte	.LCFI26
 1680 0208 0200     		.2byte	0x2
 1681 020a 7D       		.byte	0x7d
 1682 020b 04       		.sleb128 4
 1683 020c 04000000 		.4byte	.LCFI26
 1684 0210 1E000000 		.4byte	.LFE10
 1685 0214 0200     		.2byte	0x2
 1686 0216 77       		.byte	0x77
 1687 0217 04       		.sleb128 4
 1688 0218 00000000 		.4byte	0
 1689 021c 00000000 		.4byte	0
 1690              	.LLST11:
 1691 0220 00000000 		.4byte	.LFB11
 1692 0224 02000000 		.4byte	.LCFI27
 1693 0228 0200     		.2byte	0x2
 1694 022a 7D       		.byte	0x7d
 1695 022b 00       		.sleb128 0
 1696 022c 02000000 		.4byte	.LCFI27
 1697 0230 04000000 		.4byte	.LCFI28
 1698 0234 0200     		.2byte	0x2
 1699 0236 7D       		.byte	0x7d
 1700 0237 04       		.sleb128 4
 1701 0238 04000000 		.4byte	.LCFI28
 1702 023c 06000000 		.4byte	.LCFI29
 1703 0240 0200     		.2byte	0x2
 1704 0242 7D       		.byte	0x7d
 1705 0243 10       		.sleb128 16
 1706 0244 06000000 		.4byte	.LCFI29
 1707 0248 20000000 		.4byte	.LFE11
 1708 024c 0200     		.2byte	0x2
 1709 024e 77       		.byte	0x77
 1710 024f 10       		.sleb128 16
 1711 0250 00000000 		.4byte	0
 1712 0254 00000000 		.4byte	0
 1713              	.LLST12:
 1714 0258 00000000 		.4byte	.LFB12
 1715 025c 02000000 		.4byte	.LCFI30
 1716 0260 0200     		.2byte	0x2
 1717 0262 7D       		.byte	0x7d
 1718 0263 00       		.sleb128 0
 1719 0264 02000000 		.4byte	.LCFI30
 1720 0268 04000000 		.4byte	.LCFI31
 1721 026c 0200     		.2byte	0x2
 1722 026e 7D       		.byte	0x7d
 1723 026f 04       		.sleb128 4
 1724 0270 04000000 		.4byte	.LCFI31
 1725 0274 06000000 		.4byte	.LCFI32
 1726 0278 0200     		.2byte	0x2
 1727 027a 7D       		.byte	0x7d
 1728 027b 10       		.sleb128 16
 1729 027c 06000000 		.4byte	.LCFI32
 1730 0280 20000000 		.4byte	.LFE12
 1731 0284 0200     		.2byte	0x2
 1732 0286 77       		.byte	0x77
 1733 0287 10       		.sleb128 16
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 47


 1734 0288 00000000 		.4byte	0
 1735 028c 00000000 		.4byte	0
 1736              	.LLST13:
 1737 0290 00000000 		.4byte	.LFB13
 1738 0294 02000000 		.4byte	.LCFI33
 1739 0298 0200     		.2byte	0x2
 1740 029a 7D       		.byte	0x7d
 1741 029b 00       		.sleb128 0
 1742 029c 02000000 		.4byte	.LCFI33
 1743 02a0 04000000 		.4byte	.LCFI34
 1744 02a4 0200     		.2byte	0x2
 1745 02a6 7D       		.byte	0x7d
 1746 02a7 04       		.sleb128 4
 1747 02a8 04000000 		.4byte	.LCFI34
 1748 02ac 06000000 		.4byte	.LCFI35
 1749 02b0 0200     		.2byte	0x2
 1750 02b2 7D       		.byte	0x7d
 1751 02b3 10       		.sleb128 16
 1752 02b4 06000000 		.4byte	.LCFI35
 1753 02b8 20000000 		.4byte	.LFE13
 1754 02bc 0200     		.2byte	0x2
 1755 02be 77       		.byte	0x77
 1756 02bf 10       		.sleb128 16
 1757 02c0 00000000 		.4byte	0
 1758 02c4 00000000 		.4byte	0
 1759              	.LLST14:
 1760 02c8 00000000 		.4byte	.LFB14
 1761 02cc 02000000 		.4byte	.LCFI36
 1762 02d0 0200     		.2byte	0x2
 1763 02d2 7D       		.byte	0x7d
 1764 02d3 00       		.sleb128 0
 1765 02d4 02000000 		.4byte	.LCFI36
 1766 02d8 04000000 		.4byte	.LCFI37
 1767 02dc 0200     		.2byte	0x2
 1768 02de 7D       		.byte	0x7d
 1769 02df 04       		.sleb128 4
 1770 02e0 04000000 		.4byte	.LCFI37
 1771 02e4 06000000 		.4byte	.LCFI38
 1772 02e8 0200     		.2byte	0x2
 1773 02ea 7D       		.byte	0x7d
 1774 02eb 10       		.sleb128 16
 1775 02ec 06000000 		.4byte	.LCFI38
 1776 02f0 20000000 		.4byte	.LFE14
 1777 02f4 0200     		.2byte	0x2
 1778 02f6 77       		.byte	0x77
 1779 02f7 10       		.sleb128 16
 1780 02f8 00000000 		.4byte	0
 1781 02fc 00000000 		.4byte	0
 1782              	.LLST15:
 1783 0300 00000000 		.4byte	.LFB15
 1784 0304 02000000 		.4byte	.LCFI39
 1785 0308 0200     		.2byte	0x2
 1786 030a 7D       		.byte	0x7d
 1787 030b 00       		.sleb128 0
 1788 030c 02000000 		.4byte	.LCFI39
 1789 0310 04000000 		.4byte	.LCFI40
 1790 0314 0200     		.2byte	0x2
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 48


 1791 0316 7D       		.byte	0x7d
 1792 0317 04       		.sleb128 4
 1793 0318 04000000 		.4byte	.LCFI40
 1794 031c 18000000 		.4byte	.LFE15
 1795 0320 0200     		.2byte	0x2
 1796 0322 77       		.byte	0x77
 1797 0323 04       		.sleb128 4
 1798 0324 00000000 		.4byte	0
 1799 0328 00000000 		.4byte	0
 1800              	.LLST16:
 1801 032c 00000000 		.4byte	.LFB16
 1802 0330 02000000 		.4byte	.LCFI41
 1803 0334 0200     		.2byte	0x2
 1804 0336 7D       		.byte	0x7d
 1805 0337 00       		.sleb128 0
 1806 0338 02000000 		.4byte	.LCFI41
 1807 033c 04000000 		.4byte	.LCFI42
 1808 0340 0200     		.2byte	0x2
 1809 0342 7D       		.byte	0x7d
 1810 0343 04       		.sleb128 4
 1811 0344 04000000 		.4byte	.LCFI42
 1812 0348 18000000 		.4byte	.LFE16
 1813 034c 0200     		.2byte	0x2
 1814 034e 77       		.byte	0x77
 1815 034f 04       		.sleb128 4
 1816 0350 00000000 		.4byte	0
 1817 0354 00000000 		.4byte	0
 1818              	.LLST17:
 1819 0358 00000000 		.4byte	.LFB17
 1820 035c 02000000 		.4byte	.LCFI43
 1821 0360 0200     		.2byte	0x2
 1822 0362 7D       		.byte	0x7d
 1823 0363 00       		.sleb128 0
 1824 0364 02000000 		.4byte	.LCFI43
 1825 0368 04000000 		.4byte	.LCFI44
 1826 036c 0200     		.2byte	0x2
 1827 036e 7D       		.byte	0x7d
 1828 036f 04       		.sleb128 4
 1829 0370 04000000 		.4byte	.LCFI44
 1830 0374 18000000 		.4byte	.LFE17
 1831 0378 0200     		.2byte	0x2
 1832 037a 77       		.byte	0x77
 1833 037b 04       		.sleb128 4
 1834 037c 00000000 		.4byte	0
 1835 0380 00000000 		.4byte	0
 1836              		.section	.debug_aranges,"",%progbits
 1837 0000 A4000000 		.4byte	0xa4
 1838 0004 0200     		.2byte	0x2
 1839 0006 00000000 		.4byte	.Ldebug_info0
 1840 000a 04       		.byte	0x4
 1841 000b 00       		.byte	0
 1842 000c 0000     		.2byte	0
 1843 000e 0000     		.2byte	0
 1844 0010 00000000 		.4byte	.LFB0
 1845 0014 2A000000 		.4byte	.LFE0-.LFB0
 1846 0018 00000000 		.4byte	.LFB1
 1847 001c C2000000 		.4byte	.LFE1-.LFB1
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 49


 1848 0020 00000000 		.4byte	.LFB2
 1849 0024 26000000 		.4byte	.LFE2-.LFB2
 1850 0028 00000000 		.4byte	.LFB3
 1851 002c 26000000 		.4byte	.LFE3-.LFB3
 1852 0030 00000000 		.4byte	.LFB4
 1853 0034 20000000 		.4byte	.LFE4-.LFB4
 1854 0038 00000000 		.4byte	.LFB5
 1855 003c 22000000 		.4byte	.LFE5-.LFB5
 1856 0040 00000000 		.4byte	.LFB6
 1857 0044 1A000000 		.4byte	.LFE6-.LFB6
 1858 0048 00000000 		.4byte	.LFB7
 1859 004c 20000000 		.4byte	.LFE7-.LFB7
 1860 0050 00000000 		.4byte	.LFB8
 1861 0054 20000000 		.4byte	.LFE8-.LFB8
 1862 0058 00000000 		.4byte	.LFB9
 1863 005c 56000000 		.4byte	.LFE9-.LFB9
 1864 0060 00000000 		.4byte	.LFB10
 1865 0064 1E000000 		.4byte	.LFE10-.LFB10
 1866 0068 00000000 		.4byte	.LFB11
 1867 006c 20000000 		.4byte	.LFE11-.LFB11
 1868 0070 00000000 		.4byte	.LFB12
 1869 0074 20000000 		.4byte	.LFE12-.LFB12
 1870 0078 00000000 		.4byte	.LFB13
 1871 007c 20000000 		.4byte	.LFE13-.LFB13
 1872 0080 00000000 		.4byte	.LFB14
 1873 0084 20000000 		.4byte	.LFE14-.LFB14
 1874 0088 00000000 		.4byte	.LFB15
 1875 008c 18000000 		.4byte	.LFE15-.LFB15
 1876 0090 00000000 		.4byte	.LFB16
 1877 0094 18000000 		.4byte	.LFE16-.LFB16
 1878 0098 00000000 		.4byte	.LFB17
 1879 009c 18000000 		.4byte	.LFE17-.LFB17
 1880 00a0 00000000 		.4byte	0
 1881 00a4 00000000 		.4byte	0
 1882              		.section	.debug_ranges,"",%progbits
 1883              	.Ldebug_ranges0:
 1884 0000 00000000 		.4byte	.LFB0
 1885 0004 2A000000 		.4byte	.LFE0
 1886 0008 00000000 		.4byte	.LFB1
 1887 000c C2000000 		.4byte	.LFE1
 1888 0010 00000000 		.4byte	.LFB2
 1889 0014 26000000 		.4byte	.LFE2
 1890 0018 00000000 		.4byte	.LFB3
 1891 001c 26000000 		.4byte	.LFE3
 1892 0020 00000000 		.4byte	.LFB4
 1893 0024 20000000 		.4byte	.LFE4
 1894 0028 00000000 		.4byte	.LFB5
 1895 002c 22000000 		.4byte	.LFE5
 1896 0030 00000000 		.4byte	.LFB6
 1897 0034 1A000000 		.4byte	.LFE6
 1898 0038 00000000 		.4byte	.LFB7
 1899 003c 20000000 		.4byte	.LFE7
 1900 0040 00000000 		.4byte	.LFB8
 1901 0044 20000000 		.4byte	.LFE8
 1902 0048 00000000 		.4byte	.LFB9
 1903 004c 56000000 		.4byte	.LFE9
 1904 0050 00000000 		.4byte	.LFB10
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 50


 1905 0054 1E000000 		.4byte	.LFE10
 1906 0058 00000000 		.4byte	.LFB11
 1907 005c 20000000 		.4byte	.LFE11
 1908 0060 00000000 		.4byte	.LFB12
 1909 0064 20000000 		.4byte	.LFE12
 1910 0068 00000000 		.4byte	.LFB13
 1911 006c 20000000 		.4byte	.LFE13
 1912 0070 00000000 		.4byte	.LFB14
 1913 0074 20000000 		.4byte	.LFE14
 1914 0078 00000000 		.4byte	.LFB15
 1915 007c 18000000 		.4byte	.LFE15
 1916 0080 00000000 		.4byte	.LFB16
 1917 0084 18000000 		.4byte	.LFE16
 1918 0088 00000000 		.4byte	.LFB17
 1919 008c 18000000 		.4byte	.LFE17
 1920 0090 00000000 		.4byte	0
 1921 0094 00000000 		.4byte	0
 1922              		.section	.debug_line,"",%progbits
 1923              	.Ldebug_line0:
 1924 0000 B9010000 		.section	.debug_str,"MS",%progbits,1
 1924      02004800 
 1924      00000201 
 1924      FB0E0D00 
 1924      01010101 
 1925              	.LASF15:
 1926 0000 72656731 		.ascii	"reg16\000"
 1926      3600
 1927              	.LASF24:
 1928 0006 50574D5F 		.ascii	"PWM_MOTOR_ClearFIFO\000"
 1928      4D4F544F 
 1928      525F436C 
 1928      65617246 
 1928      49464F00 
 1929              	.LASF47:
 1930 001a 50574D5F 		.ascii	"PWM_MOTOR_initVar\000"
 1930      4D4F544F 
 1930      525F696E 
 1930      69745661 
 1930      7200
 1931              	.LASF27:
 1932 002c 70657269 		.ascii	"period\000"
 1932      6F6400
 1933              	.LASF21:
 1934 0033 50574D5F 		.ascii	"PWM_MOTOR_Stop\000"
 1934      4D4F544F 
 1934      525F5374 
 1934      6F7000
 1935              	.LASF3:
 1936 0042 73686F72 		.ascii	"short unsigned int\000"
 1936      7420756E 
 1936      7369676E 
 1936      65642069 
 1936      6E7400
 1937              	.LASF46:
 1938 0055 433A5C44 		.ascii	"C:\\Documents and Settings\\user\\Documenti\\PSoC C"
 1938      6F63756D 
 1938      656E7473 
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 51


 1938      20616E64 
 1938      20536574 
 1939 0084 72656174 		.ascii	"reator\\GOBEE\\Vers.0.0-T10-BL 2015-0123 C3.0 (hw t"
 1939      6F725C47 
 1939      4F424545 
 1939      5C566572 
 1939      732E302E 
 1940 00b5 65737420 		.ascii	"est V)\\GoBee-00.cydsn\000"
 1940      56295C47 
 1940      6F426565 
 1940      2D30302E 
 1940      63796473 
 1941              	.LASF12:
 1942 00cb 646F7562 		.ascii	"double\000"
 1942      6C6500
 1943              	.LASF42:
 1944 00d2 50574D5F 		.ascii	"PWM_MOTOR_ReadCompare\000"
 1944      4D4F544F 
 1944      525F5265 
 1944      6164436F 
 1944      6D706172 
 1945              	.LASF11:
 1946 00e8 666C6F61 		.ascii	"float\000"
 1946      7400
 1947              	.LASF43:
 1948 00ee 50574D5F 		.ascii	"PWM_MOTOR_ReadPeriod\000"
 1948      4D4F544F 
 1948      525F5265 
 1948      61645065 
 1948      72696F64 
 1949              	.LASF0:
 1950 0103 7369676E 		.ascii	"signed char\000"
 1950      65642063 
 1950      68617200 
 1951              	.LASF1:
 1952 010f 756E7369 		.ascii	"unsigned char\000"
 1952      676E6564 
 1952      20636861 
 1952      7200
 1953              	.LASF14:
 1954 011d 72656738 		.ascii	"reg8\000"
 1954      00
 1955              	.LASF25:
 1956 0122 50574D5F 		.ascii	"PWM_MOTOR_WritePeriod\000"
 1956      4D4F544F 
 1956      525F5772 
 1956      69746550 
 1956      6572696F 
 1957              	.LASF5:
 1958 0138 6C6F6E67 		.ascii	"long unsigned int\000"
 1958      20756E73 
 1958      69676E65 
 1958      6420696E 
 1958      7400
 1959              	.LASF9:
 1960 014a 75696E74 		.ascii	"uint8\000"
 1960      3800
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 52


 1961              	.LASF40:
 1962 0150 636F6E74 		.ascii	"control\000"
 1962      726F6C00 
 1963              	.LASF28:
 1964 0158 50574D5F 		.ascii	"PWM_MOTOR_WriteCompare\000"
 1964      4D4F544F 
 1964      525F5772 
 1964      69746543 
 1964      6F6D7061 
 1965              	.LASF26:
 1966 016f 636F756E 		.ascii	"counter\000"
 1966      74657200 
 1967              	.LASF38:
 1968 0177 50574D5F 		.ascii	"PWM_MOTOR_ReadControlRegister\000"
 1968      4D4F544F 
 1968      525F5265 
 1968      6164436F 
 1968      6E74726F 
 1969              	.LASF18:
 1970 0195 50574D5F 		.ascii	"PWM_MOTOR_interruptState\000"
 1970      4D4F544F 
 1970      525F696E 
 1970      74657272 
 1970      75707453 
 1971              	.LASF20:
 1972 01ae 50574D5F 		.ascii	"PWM_MOTOR_Enable\000"
 1972      4D4F544F 
 1972      525F456E 
 1972      61626C65 
 1972      00
 1973              	.LASF19:
 1974 01bf 50574D5F 		.ascii	"PWM_MOTOR_Start\000"
 1974      4D4F544F 
 1974      525F5374 
 1974      61727400 
 1975              	.LASF10:
 1976 01cf 75696E74 		.ascii	"uint16\000"
 1976      313600
 1977              	.LASF30:
 1978 01d6 50574D5F 		.ascii	"PWM_MOTOR_WriteDeadTime\000"
 1978      4D4F544F 
 1978      525F5772 
 1978      69746544 
 1978      65616454 
 1979              	.LASF8:
 1980 01ee 756E7369 		.ascii	"unsigned int\000"
 1980      676E6564 
 1980      20696E74 
 1980      00
 1981              	.LASF32:
 1982 01fb 50574D5F 		.ascii	"PWM_MOTOR_ReadCounter\000"
 1982      4D4F544F 
 1982      525F5265 
 1982      6164436F 
 1982      756E7465 
 1983              	.LASF7:
 1984 0211 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 53


 1984      206C6F6E 
 1984      6720756E 
 1984      7369676E 
 1984      65642069 
 1985              	.LASF36:
 1986 0228 72657375 		.ascii	"result\000"
 1986      6C7400
 1987              	.LASF45:
 1988 022f 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\PWM_MOTOR.c\000"
 1988      6E657261 
 1988      7465645F 
 1988      536F7572 
 1988      63655C50 
 1989              	.LASF17:
 1990 0254 6374726C 		.ascii	"ctrl\000"
 1990      00
 1991              	.LASF39:
 1992 0259 50574D5F 		.ascii	"PWM_MOTOR_WriteControlRegister\000"
 1992      4D4F544F 
 1992      525F5772 
 1992      69746543 
 1992      6F6E7472 
 1993              	.LASF16:
 1994 0278 73697A65 		.ascii	"sizetype\000"
 1994      74797065 
 1994      00
 1995              	.LASF37:
 1996 0281 50574D5F 		.ascii	"PWM_MOTOR_ReadStatusRegister\000"
 1996      4D4F544F 
 1996      525F5265 
 1996      61645374 
 1996      61747573 
 1997              	.LASF6:
 1998 029e 6C6F6E67 		.ascii	"long long int\000"
 1998      206C6F6E 
 1998      6720696E 
 1998      7400
 1999              	.LASF35:
 2000 02ac 696E7465 		.ascii	"interruptMode\000"
 2000      72727570 
 2000      744D6F64 
 2000      6500
 2001              	.LASF23:
 2002 02ba 50574D5F 		.ascii	"PWM_MOTOR_WriteCounter\000"
 2002      4D4F544F 
 2002      525F5772 
 2002      69746543 
 2002      6F756E74 
 2003              	.LASF41:
 2004 02d1 50574D5F 		.ascii	"PWM_MOTOR_ReadCapture\000"
 2004      4D4F544F 
 2004      525F5265 
 2004      61644361 
 2004      70747572 
 2005              	.LASF22:
 2006 02e7 50574D5F 		.ascii	"PWM_MOTOR_Init\000"
 2006      4D4F544F 
ARM GAS  C:\DOCUME~1\user\IMPOST~1\Temp\ccML84Gc.s 			page 54


 2006      525F496E 
 2006      697400
 2007              	.LASF2:
 2008 02f6 73686F72 		.ascii	"short int\000"
 2008      7420696E 
 2008      7400
 2009              	.LASF44:
 2010 0300 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 2010      4320342E 
 2010      372E3320 
 2010      32303133 
 2010      30333132 
 2011 0333 616E6368 		.ascii	"anch revision 196615]\000"
 2011      20726576 
 2011      6973696F 
 2011      6E203139 
 2011      36363135 
 2012              	.LASF4:
 2013 0349 6C6F6E67 		.ascii	"long int\000"
 2013      20696E74 
 2013      00
 2014              	.LASF13:
 2015 0352 63686172 		.ascii	"char\000"
 2015      00
 2016              	.LASF34:
 2017 0357 50574D5F 		.ascii	"PWM_MOTOR_SetInterruptMode\000"
 2017      4D4F544F 
 2017      525F5365 
 2017      74496E74 
 2017      65727275 
 2018              	.LASF29:
 2019 0372 636F6D70 		.ascii	"compare\000"
 2019      61726500 
 2020              	.LASF31:
 2021 037a 64656164 		.ascii	"deadtime\000"
 2021      74696D65 
 2021      00
 2022              	.LASF33:
 2023 0383 50574D5F 		.ascii	"PWM_MOTOR_ReadDeadTime\000"
 2023      4D4F544F 
 2023      525F5265 
 2023      61644465 
 2023      61645469 
 2024              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br

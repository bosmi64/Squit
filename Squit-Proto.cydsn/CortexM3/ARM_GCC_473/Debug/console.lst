ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"console.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	TORQUESTAT,32,8
  19              		.global	userInputBuffer
  20              		.bss
  21              		.align	2
  22              		.type	userInputBuffer, %object
  23              		.size	userInputBuffer, 40
  24              	userInputBuffer:
  25 0000 00000000 		.space	40
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.comm	actual_cmd,45,4
  27              		.comm	USB_Check_prev,1,1
  28              		.global	slegenda
  29              		.align	2
  30              		.type	slegenda, %object
  31              		.size	slegenda, 15
  32              	slegenda:
  33 0028 00000000 		.space	15
  33      00000000 
  33      00000000 
  33      000000
  34 0037 00       		.section	.rodata
  35              		.align	2
  36              	.LC0:
  37 0000 28534D5F 		.ascii	"(SM_ON_ORIGIN)\000"
  37      4F4E5F4F 
  37      52494749 
  37      4E2900
  38 000f 00       		.align	2
  39              	.LC1:
  40 0010 28534D5F 		.ascii	"(SM_MOVING_TO_FACE)\000"
  40      4D4F5649 
  40      4E475F54 
  40      4F5F4641 
  40      43452900 
  41              		.align	2
  42              	.LC2:
  43 0024 28534D5F 		.ascii	"(SM_ON_FACE)\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 2


  43      4F4E5F46 
  43      41434529 
  43      00
  44 0031 000000   		.align	2
  45              	.LC3:
  46 0034 28534D5F 		.ascii	"(SM_MOVING_TO_ORIGIN)\000"
  46      4D4F5649 
  46      4E475F54 
  46      4F5F4F52 
  46      4947494E 
  47 004a 0000     		.align	2
  48              	.LC4:
  49 004c 28534D5F 		.ascii	"(SM_MOVING_PANORAMIC)\000"
  49      4D4F5649 
  49      4E475F50 
  49      414E4F52 
  49      414D4943 
  50 0062 0000     		.align	2
  51              	.LC5:
  52 0064 28534D5F 		.ascii	"(SM_MOVING_JUMP)\000"
  52      4D4F5649 
  52      4E475F4A 
  52      554D5029 
  52      00
  53 0075 000000   		.align	2
  54              	.LC6:
  55 0078 28534D5F 		.ascii	"(SM_MOVING_TO_WHEEL)\000"
  55      4D4F5649 
  55      4E475F54 
  55      4F5F5748 
  55      45454C29 
  56 008d 000000   		.align	2
  57              	.LC7:
  58 0090 28534D5F 		.ascii	"(SM_ON_WHEEL)\000"
  58      4F4E5F57 
  58      4845454C 
  58      2900
  59 009e 0000     		.align	2
  60              	.LC8:
  61 00a0 28534D5F 		.ascii	"(SM_STANDBY)\000"
  61      5354414E 
  61      44425929 
  61      00
  62 00ad 000000   		.align	2
  63              	.LC9:
  64 00b0 282A6572 		.ascii	"(*err)\000"
  64      722900
  65              		.section	.text.ShowStatusMappingSM,"ax",%progbits
  66              		.align	2
  67              		.global	ShowStatusMappingSM
  68              		.thumb
  69              		.thumb_func
  70              		.type	ShowStatusMappingSM, %function
  71              	ShowStatusMappingSM:
  72              	.LFB56:
  73              		.file 1 ".\\console.c"
   1:.\console.c   **** /* ==============================================
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 3


   2:.\console.c   ****  *                                              *
   3:.\console.c   ****  * GoBee Director Console Interface functions	*
   4:.\console.c   ****  *												*
   5:.\console.c   ****  * Copyright 2017 Gobee Srl		         		*
   6:.\console.c   ****  * Author : Graziano G. Ravizza                 *
   7:.\console.c   ****  * All Rights Reserved							*
   8:.\console.c   ****  * UNPUBLISHED, LICENSED SOFTWARE.				*
   9:.\console.c   ****  *												*
  10:.\console.c   ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION		*
  11:.\console.c   ****  * WHICH IS THE PROPERTY OF Gobee Srl			*
  12:.\console.c   ****  * ==============================================
  13:.\console.c   **** */
  14:.\console.c   **** 
  15:.\console.c   **** /* Include files */
  16:.\console.c   **** #include <device.h>
  17:.\console.c   **** #include <stdio.h>
  18:.\console.c   **** #include <stdlib.h>
  19:.\console.c   **** #include <string.h>
  20:.\console.c   **** #include <math.h>
  21:.\console.c   **** 
  22:.\console.c   **** #include <gobee.h>
  23:.\console.c   **** #include <console.h>
  24:.\console.c   **** #include <systrings.h>
  25:.\console.c   **** #include <gobeelib.h>
  26:.\console.c   **** #include <ITG-3701.h>
  27:.\console.c   **** #include <IMU_UM7.h>
  28:.\console.c   **** #include <XTR-8LR100.h>
  29:.\console.c   **** #include <mover.h>
  30:.\console.c   **** #include <motor_CTRL.h>
  31:.\console.c   **** #include <pid_lib.h>
  32:.\console.c   **** #include <My_I2C_lib.h>
  33:.\console.c   **** #include <estimators.h>
  34:.\console.c   **** #include <clu.h>
  35:.\console.c   **** #include <gml.h>
  36:.\console.c   **** #include <statistics.h>
  37:.\console.c   **** #include <torquestat.h>
  38:.\console.c   **** 
  39:.\console.c   **** 
  40:.\console.c   **** /* External Global Wars */
  41:.\console.c   **** extern struct GOBEE_PARAMS gobee_param;
  42:.\console.c   **** extern int16 AdcValue[ADC_MUX_LENGHT];
  43:.\console.c   **** 
  44:.\console.c   **** extern uint8 machine_state;			/* Initial Machine State = POWERON 					*/
  45:.\console.c   **** 									/* Machine States = [POWERON | OPERATIVE | FAULT]	*/
  46:.\console.c   **** 
  47:.\console.c   **** /* GoBee Faults structure */
  48:.\console.c   **** extern struct GOBEE_FAULTS gobeeFaults;	
  49:.\console.c   **** 
  50:.\console.c   **** /* External CLU execution state machine */
  51:.\console.c   **** extern struct CLU_STATEMACHINE clu_sm;		
  52:.\console.c   **** 
  53:.\console.c   **** /* extern Control Variables */
  54:.\console.c   **** extern float fsampling;			/* fsampling [kHz]							*/
  55:.\console.c   **** 
  56:.\console.c   **** 
  57:.\console.c   **** /* External Motor Axis 		 */
  58:.\console.c   **** extern struct MOTOR_AXIS pan_axis; 					/* PAN  Motor Axis Parameters & RT Datas			   */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 4


  59:.\console.c   **** extern struct MOTOR_AXIS tilt_axis; 				/* TILT Motor Axis Parameters & RT Datas			   */
  60:.\console.c   **** extern struct MOTOR_AXIS *Selected_ANAOUT;			/* Selected Axis for Analog Output					   */
  61:.\console.c   **** 
  62:.\console.c   **** /* EXTERNAL Absolute Position Sensor */
  63:.\console.c   **** extern struct ABSPOS_SENSOR	pan_absolute_sensor;	/* PAN  Absolute Position Sensor Parameters & RT D
  64:.\console.c   **** extern struct ABSPOS_SENSOR	tilt_absolute_sensor;	/* TILT Absolute Position Sensor Parameters & RT 
  65:.\console.c   **** 
  66:.\console.c   **** /* extern axis absolute sensor STATISTICS	*/
  67:.\console.c   **** extern struct STATISTICS pan_absolute_sensor_stat;	/* PAN  Absolute Position Sensor Statistics Data
  68:.\console.c   **** extern struct STATISTICS tilt_absolute_sensor_stat;	/* TILT Absolute Position Sensor Statistics Dat
  69:.\console.c   **** 
  70:.\console.c   **** /* extern axis current and power STATISTICS	*/
  71:.\console.c   **** extern struct STATISTICS pan_current_stat;			/* PAN  Current  Statistic    [A]           (Motor Tor
  72:.\console.c   **** extern struct STATISTICS pan_qpower_stat;			/* PAN  quasi-power Statistic [A * rad/sec] (Motor Powe
  73:.\console.c   **** extern struct STATISTICS tilt_current_stat;			/* TILT Current  Statistic    [A]           (Motor To
  74:.\console.c   **** extern struct STATISTICS tilt_qpower_stat;			/* TILT quasi-power Statistic [A * rad/sec] (Motor Pow
  75:.\console.c   **** 
  76:.\console.c   **** /* extern axis TORQUE Estimator	*/
  77:.\console.c   **** extern struct TORQUESTAT pan_torque_stat;			/* PAN  Torque Statistics Real Time Datas	*/
  78:.\console.c   **** extern struct TORQUESTAT tilt_torque_stat;			/* TILT Torque Statistics Real Time Datas	*/
  79:.\console.c   **** 
  80:.\console.c   **** /* EXTERN MOVER PATH Array */
  81:.\console.c   **** extern path_type path[PATH_N_MAX];		/* path array structure 	*/
  82:.\console.c   **** extern path_type path_to_home;			/* path to home structure instatiation		*/
  83:.\console.c   **** 
  84:.\console.c   **** /* EXTERN MOVER PAN&TILT PATHs */
  85:.\console.c   **** extern mover_type mover_pan;			/* mover PAN structure 		*/
  86:.\console.c   **** extern mover_type mover_tilt;			/* mover TILT structure 	*/
  87:.\console.c   **** 
  88:.\console.c   **** /* external Q elements (shots) ARRAY	*/
  89:.\console.c   **** extern struct QELEMENT q[MAX_Q_MEMORIES_SAFE];
  90:.\console.c   **** 
  91:.\console.c   **** /* external [Q number --> Q memory index] table for fast indexing */
  92:.\console.c   **** extern uint8 q_table[MAX_Q_NUMBER_SAFE];
  93:.\console.c   **** extern uint8 qmemory_standard_address[MAX_Q_NUMBER_SAFE]; 
  94:.\console.c   **** 
  95:.\console.c   **** /* EXTERN CLU Sequence Array 	*/
  96:.\console.c   **** extern uint8 clu_sequence[MAX_CLU_SEQUENCE_STEPS];
  97:.\console.c   **** 
  98:.\console.c   **** /* external events structure	*/
  99:.\console.c   **** extern struct EVENTS events;
 100:.\console.c   **** 
 101:.\console.c   **** /* extern IMU UM7 vars */ 
 102:.\console.c   **** #if IMU_UM7_ENABLED
 103:.\console.c   **** extern EULER_ANGLES euler_angles; 		/* Struttura in cui vengono messi gli angoli di Eulero misurati
 104:.\console.c   **** #endif
 105:.\console.c   **** 
 106:.\console.c   **** /* extern IMU sensor vars */
 107:.\console.c   **** extern struct IMU_SENSOR	IMU_sensor;		/* Struttura dei dati della IMU */
 108:.\console.c   **** 
 109:.\console.c   **** /* external ITG-3701 digital gyro vars */
 110:.\console.c   **** extern float gRes;      				// scale resolutions per LSB for the sensors
 111:.\console.c   **** extern int16 gyroCount[3];  			// Stores the 16-bit signed gyro output
 112:.\console.c   **** extern float gx, gy, gz; 				// variables to hold latest sensor data values 
 113:.\console.c   **** extern float gyroBias[3];			 	// Bias corrections for gyro, accelerometer, and magnetometer
 114:.\console.c   **** extern float temperature;          		// Stores the ITG3701yro internal chip temperature in degrees 
 115:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 5


 116:.\console.c   **** /* extern accelerometer and gyroscopes and estimated Variables */
 117:.\console.c   **** extern int16 gyro_ADC_offset;			/* analog gyroscope ADC offset				*/
 118:.\console.c   **** 
 119:.\console.c   **** //extern float angle_estim_analog_gyro;	/* estimated angle [deg] from ADXRS646     (analog gyro) 		
 120:.\console.c   **** //extern float angle_estim_digital_gyro;	/* estimated angle [deg] from ADXRS453     (digital gyro)	
 121:.\console.c   **** //extern float angle_estim_acc;			/* estimated angle [deg] from ADXL203      (analog accelerometer)
 122:.\console.c   **** //extern float angle_estim_acc_lowpass;	/* Low Pass Filtered estimated angle [deg] (analog accelero
 123:.\console.c   **** 
 124:.\console.c   **** extern signed long system_dynamic_scalar;	/* x_acc_ADC^2 + y_acc_ADC^2 - (1g_ADC)^2						*/
 125:.\console.c   **** 
 126:.\console.c   **** //extern float gyro;					/* analog gyroscope float value						*/
 127:.\console.c   **** //extern float gyro_offset_fine;		/* fine Gyro offset									*/
 128:.\console.c   **** //extern float int_gyro;				/* estimated angle [deg] from ADXRS646				*/
 129:.\console.c   **** //extern float angle;					/* Complementary Filter Estimated angle float [deg]	*/
 130:.\console.c   **** extern float angle_lowpass;
 131:.\console.c   **** extern float agyro_mean;			/* analog gyro mean_value(t)						*/
 132:.\console.c   **** extern float agyro_mean_previous;	/* analog gyro mean_value(t-1)						*/
 133:.\console.c   **** extern uint32 iteration;			/* mean value iteration counter						*/
 134:.\console.c   **** extern uint8 agyro_messg;			/* analog gyro message passing console --> isr_ctrl	*/
 135:.\console.c   **** extern uint16 GyroNullPauseTicks;	/* centiseconds ticks counter for Gyroscope Autonull Procedure De
 136:.\console.c   **** 
 137:.\console.c   **** /* extern Analog ADXL325 3D accelerometer vars) */
 138:.\console.c   **** extern struct ANALOG_3D_ACCELEROMETER aacc;
 139:.\console.c   **** 
 140:.\console.c   **** /* GLOBAL Analog External ADXRS646 gyroscope vars) */
 141:.\console.c   **** extern struct ANALOG_GYRO agyro;
 142:.\console.c   **** 
 143:.\console.c   **** //extern Digital Gyroscope Vars
 144:.\console.c   **** extern unsigned long int dgyro_spi32;	/* ADXRS453 Digital Gyro 32 bit SPI Response			*/
 145:.\console.c   **** extern float dgyro_rate_float;			/* ADXRS453 Digital Gyro Rate (float) [deg/sec] 		*/
 146:.\console.c   **** extern float dgyro_mean;				/* digital gyro mean_value(t)							*/
 147:.\console.c   **** extern float dgyro_mean_of;				/* digital gyro ofsetted mean_value(t)					*/
 148:.\console.c   **** extern uint8 dgyro_messg;				/* digital gyro message passing console --> isr_ctrl	*/
 149:.\console.c   **** 
 150:.\console.c   **** /* extern anapos vars */
 151:.\console.c   **** extern float anapos;					/* Analog Position Output(t) 				*/
 152:.\console.c   **** extern int32 anapos_offset;				/* Analog Position Output Offset			*/
 153:.\console.c   **** 
 154:.\console.c   **** /* EXTERNAL CONTROL CHECK VARS */
 155:.\console.c   **** extern uint16 isr_START_check_counter;
 156:.\console.c   **** extern uint16 isr_STOP_check_counter;
 157:.\console.c   **** 
 158:.\console.c   **** /* EXTERNAL EEPROM Buffers */
 159:.\console.c   **** extern char8 EEreadBuffer[18];
 160:.\console.c   **** extern char8 EEwriteBuffer[18];
 161:.\console.c   **** 
 162:.\console.c   **** extern struct  GOBEE_FAULTS nemo_Faults;			/* Faults Flags Structure */
 163:.\console.c   **** 
 164:.\console.c   **** 
 165:.\console.c   **** /* ASTIM WAVES (3Hz - 3333 samples/sec */
 166:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_sine[WaveDAC8_WAVE_SINE_LENGTH];
 167:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_triangle[WaveDAC8_WAVE_TRIANGLE_LENGTH];
 168:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_square[WaveDAC8_WAVE_SQUARE_LENGTH];
 169:.\console.c   **** 
 170:.\console.c   **** /* Console Module Wars */
 171:.\console.c   **** char   userInputBuffer[40]="";		/* User Input Buffer from USB UART 	*/
 172:.\console.c   **** struct command actual_cmd;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 6


 173:.\console.c   **** uint8  USB_Check_prev;				/* USB Check(t-1) 					*/
 174:.\console.c   **** char   slegenda[15]="";				/* hystogram legenda string 		*/
 175:.\console.c   **** 
 176:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 177:.\console.c   **** // Show Status of the Mapping State Machine Auxiliary Functions
 178:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 179:.\console.c   **** void ShowStatusMappingSM(uint8 status)
 180:.\console.c   **** {
  74              		.loc 1 180 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              	.LCFI2:
  88              		.cfi_def_cfa_register 7
  89 0006 0346     		mov	r3, r0
  90 0008 FB71     		strb	r3, [r7, #7]
 181:.\console.c   **** 	switch (status)
  91              		.loc 1 181 0
  92 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  93 000c 042B     		cmp	r3, #4
  94 000e 32D0     		beq	.L7
  95 0010 042B     		cmp	r3, #4
  96 0012 0BDC     		bgt	.L12
  97 0014 012B     		cmp	r3, #1
  98 0016 19D0     		beq	.L4
  99 0018 012B     		cmp	r3, #1
 100 001a 02DC     		bgt	.L13
 101 001c 002B     		cmp	r3, #0
 102 001e 0ED0     		beq	.L3
 103 0020 4CE0     		b	.L2
 104              	.L13:
 105 0022 022B     		cmp	r3, #2
 106 0024 19D0     		beq	.L5
 107 0026 032B     		cmp	r3, #3
 108 0028 1ED0     		beq	.L6
 109 002a 47E0     		b	.L2
 110              	.L12:
 111 002c 062B     		cmp	r3, #6
 112 002e 30D0     		beq	.L9
 113 0030 062B     		cmp	r3, #6
 114 0032 27DB     		blt	.L8
 115 0034 072B     		cmp	r3, #7
 116 0036 33D0     		beq	.L10
 117 0038 632B     		cmp	r3, #99
 118 003a 38D0     		beq	.L11
 119 003c 3EE0     		b	.L2
 120              	.L3:
 182:.\console.c   **** 	{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 7


 183:.\console.c   **** 		case SM_ON_ORIGIN:
 184:.\console.c   **** 			printf("(SM_ON_ORIGIN)");
 121              		.loc 1 184 0
 122 003e 40F20000 		movw	r0, #:lower16:.LC0
 123 0042 C0F20000 		movt	r0, #:upper16:.LC0
 124 0046 FFF7FEFF 		bl	printf
 185:.\console.c   **** 		break;	
 125              		.loc 1 185 0
 126 004a 3EE0     		b	.L1
 127              	.L4:
 186:.\console.c   **** 		case SM_MOVING_TO_FACE:
 187:.\console.c   **** 			printf("(SM_MOVING_TO_FACE)");
 128              		.loc 1 187 0
 129 004c 40F20000 		movw	r0, #:lower16:.LC1
 130 0050 C0F20000 		movt	r0, #:upper16:.LC1
 131 0054 FFF7FEFF 		bl	printf
 188:.\console.c   **** 		break;		
 132              		.loc 1 188 0
 133 0058 37E0     		b	.L1
 134              	.L5:
 189:.\console.c   **** 		case SM_ON_FACE:
 190:.\console.c   **** 			printf("(SM_ON_FACE)");
 135              		.loc 1 190 0
 136 005a 40F20000 		movw	r0, #:lower16:.LC2
 137 005e C0F20000 		movt	r0, #:upper16:.LC2
 138 0062 FFF7FEFF 		bl	printf
 191:.\console.c   **** 		break;
 139              		.loc 1 191 0
 140 0066 30E0     		b	.L1
 141              	.L6:
 192:.\console.c   **** 		case SM_MOVING_TO_ORIGIN:
 193:.\console.c   **** 			printf("(SM_MOVING_TO_ORIGIN)");
 142              		.loc 1 193 0
 143 0068 40F20000 		movw	r0, #:lower16:.LC3
 144 006c C0F20000 		movt	r0, #:upper16:.LC3
 145 0070 FFF7FEFF 		bl	printf
 194:.\console.c   **** 		break;
 146              		.loc 1 194 0
 147 0074 29E0     		b	.L1
 148              	.L7:
 195:.\console.c   **** 		case SM_MOVING_PANORAMIC:
 196:.\console.c   **** 			printf("(SM_MOVING_PANORAMIC)");
 149              		.loc 1 196 0
 150 0076 40F20000 		movw	r0, #:lower16:.LC4
 151 007a C0F20000 		movt	r0, #:upper16:.LC4
 152 007e FFF7FEFF 		bl	printf
 197:.\console.c   **** 		break;
 153              		.loc 1 197 0
 154 0082 22E0     		b	.L1
 155              	.L8:
 198:.\console.c   **** 		case SM_MOVING_JUMP:
 199:.\console.c   **** 			printf("(SM_MOVING_JUMP)");
 156              		.loc 1 199 0
 157 0084 40F20000 		movw	r0, #:lower16:.LC5
 158 0088 C0F20000 		movt	r0, #:upper16:.LC5
 159 008c FFF7FEFF 		bl	printf
 200:.\console.c   **** 		break;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 8


 160              		.loc 1 200 0
 161 0090 1BE0     		b	.L1
 162              	.L9:
 201:.\console.c   **** 		case SM_MOVING_TO_WHEEL:
 202:.\console.c   **** 			printf("(SM_MOVING_TO_WHEEL)");
 163              		.loc 1 202 0
 164 0092 40F20000 		movw	r0, #:lower16:.LC6
 165 0096 C0F20000 		movt	r0, #:upper16:.LC6
 166 009a FFF7FEFF 		bl	printf
 203:.\console.c   **** 		break;			
 167              		.loc 1 203 0
 168 009e 14E0     		b	.L1
 169              	.L10:
 204:.\console.c   **** 		case SM_ON_WHEEL:
 205:.\console.c   **** 			printf("(SM_ON_WHEEL)");
 170              		.loc 1 205 0
 171 00a0 40F20000 		movw	r0, #:lower16:.LC7
 172 00a4 C0F20000 		movt	r0, #:upper16:.LC7
 173 00a8 FFF7FEFF 		bl	printf
 206:.\console.c   **** 		break;			
 174              		.loc 1 206 0
 175 00ac 0DE0     		b	.L1
 176              	.L11:
 207:.\console.c   **** 		case SM_STANDBY:
 208:.\console.c   **** 			printf("(SM_STANDBY)");
 177              		.loc 1 208 0
 178 00ae 40F20000 		movw	r0, #:lower16:.LC8
 179 00b2 C0F20000 		movt	r0, #:upper16:.LC8
 180 00b6 FFF7FEFF 		bl	printf
 209:.\console.c   **** 		break;			
 181              		.loc 1 209 0
 182 00ba 06E0     		b	.L1
 183              	.L2:
 210:.\console.c   **** 		default:
 211:.\console.c   **** 			printf("(*err)");
 184              		.loc 1 211 0
 185 00bc 40F20000 		movw	r0, #:lower16:.LC9
 186 00c0 C0F20000 		movt	r0, #:upper16:.LC9
 187 00c4 FFF7FEFF 		bl	printf
 212:.\console.c   **** 		break;
 188              		.loc 1 212 0
 189 00c8 00BF     		nop
 190              	.L1:
 213:.\console.c   **** 	}
 214:.\console.c   **** }
 191              		.loc 1 214 0
 192 00ca 07F10807 		add	r7, r7, #8
 193 00ce BD46     		mov	sp, r7
 194 00d0 80BD     		pop	{r7, pc}
 195              		.cfi_endproc
 196              	.LFE56:
 197              		.size	ShowStatusMappingSM, .-ShowStatusMappingSM
 198 00d2 00BF     		.section	.rodata
 199 00b7 00       		.align	2
 200              	.LC10:
 201 00b8 28434C55 		.ascii	"(CLUSM_NOP)\000"
 201      534D5F4E 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 9


 201      4F502900 
 202              		.align	2
 203              	.LC11:
 204 00c4 28434C55 		.ascii	"(CLUSM_START)\000"
 204      534D5F53 
 204      54415254 
 204      2900
 205 00d2 0000     		.align	2
 206              	.LC12:
 207 00d4 28434C55 		.ascii	"(CLUSM_LINE_EXECUTING)\000"
 207      534D5F4C 
 207      494E455F 
 207      45584543 
 207      5554494E 
 208 00eb 00       		.align	2
 209              	.LC13:
 210 00ec 28434C55 		.ascii	"(CLUSM_PAUSE_EXECUTION)\000"
 210      534D5F50 
 210      41555345 
 210      5F455845 
 210      43555449 
 211              		.align	2
 212              	.LC14:
 213 0104 28434C55 		.ascii	"(CLUSM_PGOTO_EXECUTION)\000"
 213      534D5F50 
 213      474F544F 
 213      5F455845 
 213      43555449 
 214              		.align	2
 215              	.LC15:
 216 011c 28434C55 		.ascii	"(CLUSM_TGOTO_EXECUTION)\000"
 216      534D5F54 
 216      474F544F 
 216      5F455845 
 216      43555449 
 217              		.align	2
 218              	.LC16:
 219 0134 28434C55 		.ascii	"(CLUSM_PATH_EXECUTION)\000"
 219      534D5F50 
 219      4154485F 
 219      45584543 
 219      5554494F 
 220 014b 00       		.align	2
 221              	.LC17:
 222 014c 28434C55 		.ascii	"(CLUSM_LINE_EXECUTED)\000"
 222      534D5F4C 
 222      494E455F 
 222      45584543 
 222      55544544 
 223 0162 0000     		.align	2
 224              	.LC18:
 225 0164 28434C55 		.ascii	"(CLUSM_STOP)\000"
 225      534D5F53 
 225      544F5029 
 225      00
 226 0171 000000   		.align	2
 227              	.LC19:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 10


 228 0174 28434C55 		.ascii	"(CLUSM_END)\000"
 228      534D5F45 
 228      4E442900 
 229              		.section	.text.ShowCLUSM,"ax",%progbits
 230              		.align	2
 231              		.global	ShowCLUSM
 232              		.thumb
 233              		.thumb_func
 234              		.type	ShowCLUSM, %function
 235              	ShowCLUSM:
 236              	.LFB57:
 215:.\console.c   **** 
 216:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 217:.\console.c   **** // Show Status of the CLU Machine Auxiliary Functions
 218:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 219:.\console.c   **** void ShowCLUSM(uint8 status)
 220:.\console.c   **** {
 237              		.loc 1 220 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 8
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241 0000 80B5     		push	{r7, lr}
 242              	.LCFI3:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 7, -8
 245              		.cfi_offset 14, -4
 246 0002 82B0     		sub	sp, sp, #8
 247              	.LCFI4:
 248              		.cfi_def_cfa_offset 16
 249 0004 00AF     		add	r7, sp, #0
 250              	.LCFI5:
 251              		.cfi_def_cfa_register 7
 252 0006 0346     		mov	r3, r0
 253 0008 FB71     		strb	r3, [r7, #7]
 221:.\console.c   **** 	switch (status)
 254              		.loc 1 221 0
 255 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 256 000c 0C2B     		cmp	r3, #12
 257 000e 63D8     		bhi	.L16
 258 0010 01A2     		adr	r2, .L27
 259 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 260 0016 00BF     		.align	2
 261              	.L27:
 262 0018 4D000000 		.word	.L17+1
 263 001c 5B000000 		.word	.L18+1
 264 0020 69000000 		.word	.L19+1
 265 0024 77000000 		.word	.L20+1
 266 0028 85000000 		.word	.L21+1
 267 002c 93000000 		.word	.L22+1
 268 0030 A1000000 		.word	.L23+1
 269 0034 D9000000 		.word	.L16+1
 270 0038 D9000000 		.word	.L16+1
 271 003c D9000000 		.word	.L16+1
 272 0040 AF000000 		.word	.L24+1
 273 0044 BD000000 		.word	.L25+1
 274 0048 CB000000 		.word	.L26+1
 275              	.L17:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 11


 222:.\console.c   **** 	{
 223:.\console.c   **** 		case CLUSM_NOP:
 224:.\console.c   **** 			printf("(CLUSM_NOP)");
 276              		.loc 1 224 0
 277 004c 40F20000 		movw	r0, #:lower16:.LC10
 278 0050 C0F20000 		movt	r0, #:upper16:.LC10
 279 0054 FFF7FEFF 		bl	printf
 225:.\console.c   **** 		break;	
 280              		.loc 1 225 0
 281 0058 45E0     		b	.L15
 282              	.L18:
 226:.\console.c   **** 		case CLUSM_START:
 227:.\console.c   **** 			printf("(CLUSM_START)");
 283              		.loc 1 227 0
 284 005a 40F20000 		movw	r0, #:lower16:.LC11
 285 005e C0F20000 		movt	r0, #:upper16:.LC11
 286 0062 FFF7FEFF 		bl	printf
 228:.\console.c   **** 		break;
 287              		.loc 1 228 0
 288 0066 3EE0     		b	.L15
 289              	.L19:
 229:.\console.c   **** 		case CLUSM_LINE_EXECUTING:
 230:.\console.c   **** 			printf("(CLUSM_LINE_EXECUTING)");
 290              		.loc 1 230 0
 291 0068 40F20000 		movw	r0, #:lower16:.LC12
 292 006c C0F20000 		movt	r0, #:upper16:.LC12
 293 0070 FFF7FEFF 		bl	printf
 231:.\console.c   **** 		break;
 294              		.loc 1 231 0
 295 0074 37E0     		b	.L15
 296              	.L20:
 232:.\console.c   **** 		case CLUSM_PAUSE_EXECUTION:
 233:.\console.c   **** 			printf("(CLUSM_PAUSE_EXECUTION)");
 297              		.loc 1 233 0
 298 0076 40F20000 		movw	r0, #:lower16:.LC13
 299 007a C0F20000 		movt	r0, #:upper16:.LC13
 300 007e FFF7FEFF 		bl	printf
 234:.\console.c   **** 		break;		
 301              		.loc 1 234 0
 302 0082 30E0     		b	.L15
 303              	.L21:
 235:.\console.c   **** 		case CLUSM_PGOTO_EXECUTION:
 236:.\console.c   **** 			printf("(CLUSM_PGOTO_EXECUTION)");
 304              		.loc 1 236 0
 305 0084 40F20000 		movw	r0, #:lower16:.LC14
 306 0088 C0F20000 		movt	r0, #:upper16:.LC14
 307 008c FFF7FEFF 		bl	printf
 237:.\console.c   **** 		break;	
 308              		.loc 1 237 0
 309 0090 29E0     		b	.L15
 310              	.L22:
 238:.\console.c   **** 		case CLUSM_TGOTO_EXECUTION:
 239:.\console.c   **** 			printf("(CLUSM_TGOTO_EXECUTION)");
 311              		.loc 1 239 0
 312 0092 40F20000 		movw	r0, #:lower16:.LC15
 313 0096 C0F20000 		movt	r0, #:upper16:.LC15
 314 009a FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 12


 240:.\console.c   **** 		break;
 315              		.loc 1 240 0
 316 009e 22E0     		b	.L15
 317              	.L23:
 241:.\console.c   **** 		case CLUSM_PATH_EXECUTION:
 242:.\console.c   **** 			printf("(CLUSM_PATH_EXECUTION)");
 318              		.loc 1 242 0
 319 00a0 40F20000 		movw	r0, #:lower16:.LC16
 320 00a4 C0F20000 		movt	r0, #:upper16:.LC16
 321 00a8 FFF7FEFF 		bl	printf
 243:.\console.c   **** 		break;		
 322              		.loc 1 243 0
 323 00ac 1BE0     		b	.L15
 324              	.L24:
 244:.\console.c   **** 		case CLUSM_LINE_EXECUTED:
 245:.\console.c   **** 			printf("(CLUSM_LINE_EXECUTED)");
 325              		.loc 1 245 0
 326 00ae 40F20000 		movw	r0, #:lower16:.LC17
 327 00b2 C0F20000 		movt	r0, #:upper16:.LC17
 328 00b6 FFF7FEFF 		bl	printf
 246:.\console.c   **** 		break;		
 329              		.loc 1 246 0
 330 00ba 14E0     		b	.L15
 331              	.L25:
 247:.\console.c   **** 		case CLUSM_STOP:
 248:.\console.c   **** 			printf("(CLUSM_STOP)");
 332              		.loc 1 248 0
 333 00bc 40F20000 		movw	r0, #:lower16:.LC18
 334 00c0 C0F20000 		movt	r0, #:upper16:.LC18
 335 00c4 FFF7FEFF 		bl	printf
 249:.\console.c   **** 		break;	
 336              		.loc 1 249 0
 337 00c8 0DE0     		b	.L15
 338              	.L26:
 250:.\console.c   **** 		case CLUSM_END:
 251:.\console.c   **** 			printf("(CLUSM_END)");
 339              		.loc 1 251 0
 340 00ca 40F20000 		movw	r0, #:lower16:.LC19
 341 00ce C0F20000 		movt	r0, #:upper16:.LC19
 342 00d2 FFF7FEFF 		bl	printf
 252:.\console.c   **** 		break;			
 343              		.loc 1 252 0
 344 00d6 06E0     		b	.L15
 345              	.L16:
 253:.\console.c   **** 		default:
 254:.\console.c   **** 			printf("(*err)");
 346              		.loc 1 254 0
 347 00d8 40F20000 		movw	r0, #:lower16:.LC9
 348 00dc C0F20000 		movt	r0, #:upper16:.LC9
 349 00e0 FFF7FEFF 		bl	printf
 255:.\console.c   **** 		break;
 350              		.loc 1 255 0
 351 00e4 00BF     		nop
 352              	.L15:
 256:.\console.c   **** 	}
 257:.\console.c   **** }
 353              		.loc 1 257 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 13


 354 00e6 07F10807 		add	r7, r7, #8
 355 00ea BD46     		mov	sp, r7
 356 00ec 80BD     		pop	{r7, pc}
 357              		.cfi_endproc
 358              	.LFE57:
 359              		.size	ShowCLUSM, .-ShowCLUSM
 360 00ee 00BF     		.section	.rodata
 361              		.align	2
 362              	.LC20:
 363 0180 5374616E 		.ascii	"Stanley Kubrick\000"
 363      6C657920 
 363      4B756272 
 363      69636B00 
 364              		.align	2
 365              	.LC21:
 366 0190 416C6672 		.ascii	"Alfred Hitchcock\000"
 366      65642048 
 366      69746368 
 366      636F636B 
 366      00
 367 01a1 000000   		.align	2
 368              	.LC22:
 369 01a4 42726961 		.ascii	"Brian De Palma\000"
 369      6E204465 
 369      2050616C 
 369      6D6100
 370 01b3 00       		.align	2
 371              	.LC23:
 372 01b4 43686172 		.ascii	"Charlie Chaplin\000"
 372      6C696520 
 372      43686170 
 372      6C696E00 
 373              		.align	2
 374              	.LC24:
 375 01c4 44617669 		.ascii	"David Linch\000"
 375      64204C69 
 375      6E636800 
 376              		.align	2
 377              	.LC25:
 378 01d0 4672616E 		.ascii	"Francis Ford Coppola\000"
 378      63697320 
 378      466F7264 
 378      20436F70 
 378      706F6C61 
 379 01e5 000000   		.align	2
 380              	.LC26:
 381 01e8 4D617274 		.ascii	"Martin Scorsese\000"
 381      696E2053 
 381      636F7273 
 381      65736500 
 382              		.align	2
 383              	.LC27:
 384 01f8 5175656E 		.ascii	"Quentin Tarantino\000"
 384      74696E20 
 384      54617261 
 384      6E74696E 
 384      6F00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 14


 385 020a 0000     		.align	2
 386              	.LC28:
 387 020c 5269646C 		.ascii	"Ridley Scott\000"
 387      65792053 
 387      636F7474 
 387      00
 388 0219 000000   		.align	2
 389              	.LC29:
 390 021c 53657267 		.ascii	"Sergio Leone\000"
 390      696F204C 
 390      656F6E65 
 390      00
 391 0229 000000   		.align	2
 392              	.LC30:
 393 022c 53746576 		.ascii	"Steven Spielberg\000"
 393      656E2053 
 393      7069656C 
 393      62657267 
 393      00
 394 023d 000000   		.align	2
 395              	.LC31:
 396 0240 54696D20 		.ascii	"Tim Burton\000"
 396      42757274 
 396      6F6E00
 397 024b 00       		.align	2
 398              	.LC32:
 399 024c 57657320 		.ascii	"Wes Craven\000"
 399      43726176 
 399      656E00
 400 0257 00       		.align	2
 401              	.LC33:
 402 0258 46656465 		.ascii	"Federico Fellini\000"
 402      7269636F 
 402      2046656C 
 402      6C696E69 
 402      00
 403 0269 000000   		.align	2
 404              	.LC34:
 405 026c 43687269 		.ascii	"Christopher Nolan\000"
 405      73746F70 
 405      68657220 
 405      4E6F6C61 
 405      6E00
 406 027e 0000     		.align	2
 407              	.LC35:
 408 0280 47756C6C 		.ascii	"Gullermo Del Toro\000"
 408      65726D6F 
 408      2044656C 
 408      20546F72 
 408      6F00
 409 0292 0000     		.align	2
 410              	.LC36:
 411 0294 47656F72 		.ascii	"George Lucas\000"
 411      6765204C 
 411      75636173 
 411      00
 412 02a1 000000   		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 15


 413              	.LC37:
 414 02a4 4A2E4A2E 		.ascii	"J.J. Abrams\000"
 414      20416272 
 414      616D7300 
 415              		.align	2
 416              	.LC38:
 417 02b0 596F7500 		.ascii	"You\000"
 418              		.section	.text.ShowParamsDirector,"ax",%progbits
 419              		.align	2
 420              		.global	ShowParamsDirector
 421              		.thumb
 422              		.thumb_func
 423              		.type	ShowParamsDirector, %function
 424              	ShowParamsDirector:
 425              	.LFB58:
 258:.\console.c   **** 
 259:.\console.c   **** 
 260:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 261:.\console.c   **** // Show Parameters Auxiliary Functions
 262:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 263:.\console.c   **** void ShowParamsDirector(void)
 264:.\console.c   **** {	
 426              		.loc 1 264 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430 0000 80B5     		push	{r7, lr}
 431              	.LCFI6:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 00AF     		add	r7, sp, #0
 436              	.LCFI7:
 437              		.cfi_def_cfa_register 7
 265:.\console.c   **** 	switch (gobee_param.director)
 438              		.loc 1 265 0
 439 0004 40F20003 		movw	r3, #:lower16:gobee_param
 440 0008 C0F20003 		movt	r3, #:upper16:gobee_param
 441 000c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 442 000e 122B     		cmp	r3, #18
 443 0010 00F2A880 		bhi	.L30
 444 0014 01A2     		adr	r2, .L49
 445 0016 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 446 001a 00BF     		.align	2
 447              	.L49:
 448 001c 69000000 		.word	.L31+1
 449 0020 77000000 		.word	.L32+1
 450 0024 85000000 		.word	.L33+1
 451 0028 93000000 		.word	.L34+1
 452 002c A1000000 		.word	.L35+1
 453 0030 AF000000 		.word	.L36+1
 454 0034 BD000000 		.word	.L37+1
 455 0038 CB000000 		.word	.L38+1
 456 003c D9000000 		.word	.L39+1
 457 0040 E7000000 		.word	.L40+1
 458 0044 F5000000 		.word	.L41+1
 459 0048 03010000 		.word	.L42+1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 16


 460 004c 11010000 		.word	.L43+1
 461 0050 1F010000 		.word	.L44+1
 462 0054 65010000 		.word	.L30+1
 463 0058 2D010000 		.word	.L45+1
 464 005c 3B010000 		.word	.L46+1
 465 0060 49010000 		.word	.L47+1
 466 0064 57010000 		.word	.L48+1
 467              	.L31:
 266:.\console.c   **** 	{
 267:.\console.c   **** 		case STANLEY:
 268:.\console.c   **** 			printf("Stanley Kubrick");
 468              		.loc 1 268 0
 469 0068 40F20000 		movw	r0, #:lower16:.LC20
 470 006c C0F20000 		movt	r0, #:upper16:.LC20
 471 0070 FFF7FEFF 		bl	printf
 269:.\console.c   **** 			break;	
 472              		.loc 1 269 0
 473 0074 7DE0     		b	.L29
 474              	.L32:
 270:.\console.c   **** 		case ALFRED:
 271:.\console.c   **** 			printf("Alfred Hitchcock");
 475              		.loc 1 271 0
 476 0076 40F20000 		movw	r0, #:lower16:.LC21
 477 007a C0F20000 		movt	r0, #:upper16:.LC21
 478 007e FFF7FEFF 		bl	printf
 272:.\console.c   **** 			break;
 479              		.loc 1 272 0
 480 0082 76E0     		b	.L29
 481              	.L33:
 273:.\console.c   **** 		case DE_PALMA:
 274:.\console.c   **** 			printf("Brian De Palma");
 482              		.loc 1 274 0
 483 0084 40F20000 		movw	r0, #:lower16:.LC22
 484 0088 C0F20000 		movt	r0, #:upper16:.LC22
 485 008c FFF7FEFF 		bl	printf
 275:.\console.c   **** 			break;	
 486              		.loc 1 275 0
 487 0090 6FE0     		b	.L29
 488              	.L34:
 276:.\console.c   **** 		case CHARLIE:
 277:.\console.c   **** 			printf("Charlie Chaplin");
 489              		.loc 1 277 0
 490 0092 40F20000 		movw	r0, #:lower16:.LC23
 491 0096 C0F20000 		movt	r0, #:upper16:.LC23
 492 009a FFF7FEFF 		bl	printf
 278:.\console.c   **** 			break;	
 493              		.loc 1 278 0
 494 009e 68E0     		b	.L29
 495              	.L35:
 279:.\console.c   **** 		case LINCH:
 280:.\console.c   **** 			printf("David Linch");
 496              		.loc 1 280 0
 497 00a0 40F20000 		movw	r0, #:lower16:.LC24
 498 00a4 C0F20000 		movt	r0, #:upper16:.LC24
 499 00a8 FFF7FEFF 		bl	printf
 281:.\console.c   **** 			break;
 500              		.loc 1 281 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 17


 501 00ac 61E0     		b	.L29
 502              	.L36:
 282:.\console.c   **** 		case COPPOLA:
 283:.\console.c   **** 			printf("Francis Ford Coppola");
 503              		.loc 1 283 0
 504 00ae 40F20000 		movw	r0, #:lower16:.LC25
 505 00b2 C0F20000 		movt	r0, #:upper16:.LC25
 506 00b6 FFF7FEFF 		bl	printf
 284:.\console.c   **** 			break;
 507              		.loc 1 284 0
 508 00ba 5AE0     		b	.L29
 509              	.L37:
 285:.\console.c   **** 		case MARTIN:
 286:.\console.c   **** 			printf("Martin Scorsese");
 510              		.loc 1 286 0
 511 00bc 40F20000 		movw	r0, #:lower16:.LC26
 512 00c0 C0F20000 		movt	r0, #:upper16:.LC26
 513 00c4 FFF7FEFF 		bl	printf
 287:.\console.c   **** 			break;	
 514              		.loc 1 287 0
 515 00c8 53E0     		b	.L29
 516              	.L38:
 288:.\console.c   **** 		case QUENTIN:
 289:.\console.c   **** 			printf("Quentin Tarantino");
 517              		.loc 1 289 0
 518 00ca 40F20000 		movw	r0, #:lower16:.LC27
 519 00ce C0F20000 		movt	r0, #:upper16:.LC27
 520 00d2 FFF7FEFF 		bl	printf
 290:.\console.c   **** 			break;
 521              		.loc 1 290 0
 522 00d6 4CE0     		b	.L29
 523              	.L39:
 291:.\console.c   **** 		case RIDLEY:
 292:.\console.c   **** 			printf("Ridley Scott");
 524              		.loc 1 292 0
 525 00d8 40F20000 		movw	r0, #:lower16:.LC28
 526 00dc C0F20000 		movt	r0, #:upper16:.LC28
 527 00e0 FFF7FEFF 		bl	printf
 293:.\console.c   **** 			break;
 528              		.loc 1 293 0
 529 00e4 45E0     		b	.L29
 530              	.L40:
 294:.\console.c   **** 		case SERGIO:
 295:.\console.c   **** 			printf("Sergio Leone");
 531              		.loc 1 295 0
 532 00e6 40F20000 		movw	r0, #:lower16:.LC29
 533 00ea C0F20000 		movt	r0, #:upper16:.LC29
 534 00ee FFF7FEFF 		bl	printf
 296:.\console.c   **** 			break;
 535              		.loc 1 296 0
 536 00f2 3EE0     		b	.L29
 537              	.L41:
 297:.\console.c   **** 		case STEVEN:
 298:.\console.c   **** 			printf("Steven Spielberg");
 538              		.loc 1 298 0
 539 00f4 40F20000 		movw	r0, #:lower16:.LC30
 540 00f8 C0F20000 		movt	r0, #:upper16:.LC30
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 18


 541 00fc FFF7FEFF 		bl	printf
 299:.\console.c   **** 			break;
 542              		.loc 1 299 0
 543 0100 37E0     		b	.L29
 544              	.L42:
 300:.\console.c   **** 		case TIM:
 301:.\console.c   **** 			printf("Tim Burton");
 545              		.loc 1 301 0
 546 0102 40F20000 		movw	r0, #:lower16:.LC31
 547 0106 C0F20000 		movt	r0, #:upper16:.LC31
 548 010a FFF7FEFF 		bl	printf
 302:.\console.c   **** 			break;
 549              		.loc 1 302 0
 550 010e 30E0     		b	.L29
 551              	.L43:
 303:.\console.c   **** 		case WES:
 304:.\console.c   **** 			printf("Wes Craven");
 552              		.loc 1 304 0
 553 0110 40F20000 		movw	r0, #:lower16:.LC32
 554 0114 C0F20000 		movt	r0, #:upper16:.LC32
 555 0118 FFF7FEFF 		bl	printf
 305:.\console.c   **** 			break;
 556              		.loc 1 305 0
 557 011c 29E0     		b	.L29
 558              	.L44:
 306:.\console.c   **** 		case FEDERICO:
 307:.\console.c   **** 			printf("Federico Fellini");
 559              		.loc 1 307 0
 560 011e 40F20000 		movw	r0, #:lower16:.LC33
 561 0122 C0F20000 		movt	r0, #:upper16:.LC33
 562 0126 FFF7FEFF 		bl	printf
 308:.\console.c   **** 			break;
 563              		.loc 1 308 0
 564 012a 22E0     		b	.L29
 565              	.L45:
 309:.\console.c   **** 		case CRISTOPHER:
 310:.\console.c   **** 			printf("Christopher Nolan");
 566              		.loc 1 310 0
 567 012c 40F20000 		movw	r0, #:lower16:.LC34
 568 0130 C0F20000 		movt	r0, #:upper16:.LC34
 569 0134 FFF7FEFF 		bl	printf
 311:.\console.c   **** 			break;
 570              		.loc 1 311 0
 571 0138 1BE0     		b	.L29
 572              	.L46:
 312:.\console.c   **** 		case GUILLERMO:
 313:.\console.c   **** 			printf("Gullermo Del Toro");
 573              		.loc 1 313 0
 574 013a 40F20000 		movw	r0, #:lower16:.LC35
 575 013e C0F20000 		movt	r0, #:upper16:.LC35
 576 0142 FFF7FEFF 		bl	printf
 314:.\console.c   **** 			break;	
 577              		.loc 1 314 0
 578 0146 14E0     		b	.L29
 579              	.L47:
 315:.\console.c   **** 		case GEORGE:
 316:.\console.c   **** 			printf("George Lucas");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 19


 580              		.loc 1 316 0
 581 0148 40F20000 		movw	r0, #:lower16:.LC36
 582 014c C0F20000 		movt	r0, #:upper16:.LC36
 583 0150 FFF7FEFF 		bl	printf
 317:.\console.c   **** 			break;	
 584              		.loc 1 317 0
 585 0154 0DE0     		b	.L29
 586              	.L48:
 318:.\console.c   **** 		case JJ:
 319:.\console.c   **** 			printf("J.J. Abrams");
 587              		.loc 1 319 0
 588 0156 40F20000 		movw	r0, #:lower16:.LC37
 589 015a C0F20000 		movt	r0, #:upper16:.LC37
 590 015e FFF7FEFF 		bl	printf
 320:.\console.c   **** 			break;			
 591              		.loc 1 320 0
 592 0162 06E0     		b	.L29
 593              	.L30:
 321:.\console.c   **** 		default:
 322:.\console.c   **** 			printf("You");
 594              		.loc 1 322 0
 595 0164 40F20000 		movw	r0, #:lower16:.LC38
 596 0168 C0F20000 		movt	r0, #:upper16:.LC38
 597 016c FFF7FEFF 		bl	printf
 323:.\console.c   **** 			break;
 598              		.loc 1 323 0
 599 0170 00BF     		nop
 600              	.L29:
 324:.\console.c   **** 	}		
 325:.\console.c   **** }
 601              		.loc 1 325 0
 602 0172 80BD     		pop	{r7, pc}
 603              		.cfi_endproc
 604              	.LFE58:
 605              		.size	ShowParamsDirector, .-ShowParamsDirector
 606              		.section	.rodata
 607              		.align	2
 608              	.LC39:
 609 02b4 52656D6F 		.ascii	"Remote Control\000"
 609      74652043 
 609      6F6E7472 
 609      6F6C00
 610 02c3 00       		.align	2
 611              	.LC40:
 612 02c4 44697265 		.ascii	"Director AI\000"
 612      63746F72 
 612      20414900 
 613              		.align	2
 614              	.LC41:
 615 02d0 2A206D6F 		.ascii	"* mode err!\000"
 615      64652065 
 615      72722100 
 616              		.align	2
 617              	.LC42:
 618 02dc 0D00     		.ascii	"\015\000"
 619              		.section	.text.ShowParamsMode,"ax",%progbits
 620              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 20


 621              		.global	ShowParamsMode
 622              		.thumb
 623              		.thumb_func
 624              		.type	ShowParamsMode, %function
 625              	ShowParamsMode:
 626              	.LFB59:
 326:.\console.c   **** 
 327:.\console.c   **** 
 328:.\console.c   **** void ShowParamsMode(void)
 329:.\console.c   **** {	switch (gobee_param.mode)
 627              		.loc 1 329 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 0000 80B5     		push	{r7, lr}
 632              	.LCFI8:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 7, -8
 635              		.cfi_offset 14, -4
 636 0002 00AF     		add	r7, sp, #0
 637              	.LCFI9:
 638              		.cfi_def_cfa_register 7
 639              		.loc 1 329 0
 640 0004 40F20003 		movw	r3, #:lower16:gobee_param
 641 0008 C0F20003 		movt	r3, #:upper16:gobee_param
 642 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 643 000e 002B     		cmp	r3, #0
 644 0010 02D0     		beq	.L53
 645 0012 012B     		cmp	r3, #1
 646 0014 07D0     		beq	.L54
 647 0016 0DE0     		b	.L56
 648              	.L53:
 330:.\console.c   **** 	{
 331:.\console.c   **** 		case REMOTECONTROL_MODE:
 332:.\console.c   **** 			printf("Remote Control");
 649              		.loc 1 332 0
 650 0018 40F20000 		movw	r0, #:lower16:.LC39
 651 001c C0F20000 		movt	r0, #:upper16:.LC39
 652 0020 FFF7FEFF 		bl	printf
 333:.\console.c   **** 			break;	
 653              		.loc 1 333 0
 654 0024 0DE0     		b	.L55
 655              	.L54:
 334:.\console.c   **** 		case DIRECTOR_MODE:
 335:.\console.c   **** 			printf("Director AI");
 656              		.loc 1 335 0
 657 0026 40F20000 		movw	r0, #:lower16:.LC40
 658 002a C0F20000 		movt	r0, #:upper16:.LC40
 659 002e FFF7FEFF 		bl	printf
 336:.\console.c   **** 			break;
 660              		.loc 1 336 0
 661 0032 06E0     		b	.L55
 662              	.L56:
 337:.\console.c   **** 		default:
 338:.\console.c   **** 			printf("* mode err!");
 663              		.loc 1 338 0
 664 0034 40F20000 		movw	r0, #:lower16:.LC41
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 21


 665 0038 C0F20000 		movt	r0, #:upper16:.LC41
 666 003c FFF7FEFF 		bl	printf
 339:.\console.c   **** 			break;
 667              		.loc 1 339 0
 668 0040 00BF     		nop
 669              	.L55:
 340:.\console.c   **** 	}		
 341:.\console.c   **** 	printf("\r\n");
 670              		.loc 1 341 0
 671 0042 40F20000 		movw	r0, #:lower16:.LC42
 672 0046 C0F20000 		movt	r0, #:upper16:.LC42
 673 004a FFF7FEFF 		bl	puts
 342:.\console.c   **** }
 674              		.loc 1 342 0
 675 004e 80BD     		pop	{r7, pc}
 676              		.cfi_endproc
 677              	.LFE59:
 678              		.size	ShowParamsMode, .-ShowParamsMode
 679              		.section	.rodata
 680 02de 0000     		.align	2
 681              	.LC43:
 682 02e0 2028303A 		.ascii	" (0:off)\000"
 682      6F666629 
 682      00
 683 02e9 000000   		.align	2
 684              	.LC44:
 685 02ec 2028313A 		.ascii	" (1:sine)\000"
 685      73696E65 
 685      2900
 686 02f6 0000     		.align	2
 687              	.LC45:
 688 02f8 2028323A 		.ascii	" (2:triangle)\000"
 688      74726961 
 688      6E676C65 
 688      2900
 689 0306 0000     		.align	2
 690              	.LC46:
 691 0308 2028333A 		.ascii	" (3:square)\000"
 691      73717561 
 691      72652900 
 692              		.align	2
 693              	.LC47:
 694 0314 20282169 		.ascii	" (!internal error)\000"
 694      6E746572 
 694      6E616C20 
 694      6572726F 
 694      722900
 695              		.section	.text.ShowParamsAstim,"ax",%progbits
 696              		.align	2
 697              		.global	ShowParamsAstim
 698              		.thumb
 699              		.thumb_func
 700              		.type	ShowParamsAstim, %function
 701              	ShowParamsAstim:
 702              	.LFB60:
 343:.\console.c   **** 
 344:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 22


 345:.\console.c   **** void ShowParamsAstim(struct MOTOR_AXIS *paxis)
 346:.\console.c   **** {
 703              		.loc 1 346 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 8
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707 0000 80B5     		push	{r7, lr}
 708              	.LCFI10:
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 82B0     		sub	sp, sp, #8
 713              	.LCFI11:
 714              		.cfi_def_cfa_offset 16
 715 0004 00AF     		add	r7, sp, #0
 716              	.LCFI12:
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 347:.\console.c   **** 	if ((*paxis).vparam.astim_type == NO_ASTIM)
 719              		.loc 1 347 0
 720 0008 7B68     		ldr	r3, [r7, #4]
 721 000a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 722 000c 002B     		cmp	r3, #0
 723 000e 06D1     		bne	.L58
 348:.\console.c   **** 	{
 349:.\console.c   **** 		printf(" (0:off)");
 724              		.loc 1 349 0
 725 0010 40F20000 		movw	r0, #:lower16:.LC43
 726 0014 C0F20000 		movt	r0, #:upper16:.LC43
 727 0018 FFF7FEFF 		bl	printf
 728 001c 26E0     		b	.L59
 729              	.L58:
 350:.\console.c   **** 	}
 351:.\console.c   **** 	else if ((*paxis).vparam.astim_type == SINE_ASTIM)
 730              		.loc 1 351 0
 731 001e 7B68     		ldr	r3, [r7, #4]
 732 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 733 0022 012B     		cmp	r3, #1
 734 0024 06D1     		bne	.L60
 352:.\console.c   **** 	{
 353:.\console.c   **** 		printf(" (1:sine)");
 735              		.loc 1 353 0
 736 0026 40F20000 		movw	r0, #:lower16:.LC44
 737 002a C0F20000 		movt	r0, #:upper16:.LC44
 738 002e FFF7FEFF 		bl	printf
 739 0032 1BE0     		b	.L59
 740              	.L60:
 354:.\console.c   **** 	}				
 355:.\console.c   **** 	else if ((*paxis).vparam.astim_type == TRIANGLE_ASTIM)
 741              		.loc 1 355 0
 742 0034 7B68     		ldr	r3, [r7, #4]
 743 0036 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 744 0038 022B     		cmp	r3, #2
 745 003a 06D1     		bne	.L61
 356:.\console.c   **** 	{
 357:.\console.c   **** 		printf(" (2:triangle)");
 746              		.loc 1 357 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 23


 747 003c 40F20000 		movw	r0, #:lower16:.LC45
 748 0040 C0F20000 		movt	r0, #:upper16:.LC45
 749 0044 FFF7FEFF 		bl	printf
 750 0048 10E0     		b	.L59
 751              	.L61:
 358:.\console.c   **** 	}
 359:.\console.c   **** 	else if ((*paxis).vparam.astim_type == SQUARE_ASTIM)
 752              		.loc 1 359 0
 753 004a 7B68     		ldr	r3, [r7, #4]
 754 004c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 755 004e 032B     		cmp	r3, #3
 756 0050 06D1     		bne	.L62
 360:.\console.c   **** 	{
 361:.\console.c   **** 		printf(" (3:square)");
 757              		.loc 1 361 0
 758 0052 40F20000 		movw	r0, #:lower16:.LC46
 759 0056 C0F20000 		movt	r0, #:upper16:.LC46
 760 005a FFF7FEFF 		bl	printf
 761 005e 05E0     		b	.L59
 762              	.L62:
 362:.\console.c   **** 	}					
 363:.\console.c   **** 	else
 364:.\console.c   **** 	{
 365:.\console.c   **** 		printf(" (!internal error)");
 763              		.loc 1 365 0
 764 0060 40F20000 		movw	r0, #:lower16:.LC47
 765 0064 C0F20000 		movt	r0, #:upper16:.LC47
 766 0068 FFF7FEFF 		bl	printf
 767              	.L59:
 366:.\console.c   **** 	}				
 367:.\console.c   **** 	printf("\r\n");
 768              		.loc 1 367 0
 769 006c 40F20000 		movw	r0, #:lower16:.LC42
 770 0070 C0F20000 		movt	r0, #:upper16:.LC42
 771 0074 FFF7FEFF 		bl	puts
 368:.\console.c   **** }
 772              		.loc 1 368 0
 773 0078 07F10807 		add	r7, r7, #8
 774 007c BD46     		mov	sp, r7
 775 007e 80BD     		pop	{r7, pc}
 776              		.cfi_endproc
 777              	.LFE60:
 778              		.size	ShowParamsAstim, .-ShowParamsAstim
 779              		.global	__aeabi_f2d
 780              		.section	.rodata
 781 0327 00       		.align	2
 782              	.LC48:
 783 0328 25346620 		.ascii	"%4f \000"
 783      00
 784              		.global	__aeabi_fdiv
 785 032d 000000   		.align	2
 786              	.LC49:
 787 0330 20203156 		.ascii	"  1V=%4.1f [step]\000"
 787      3D25342E 
 787      3166205B 
 787      73746570 
 787      5D00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 24


 788              		.global	__aeabi_ddiv
 789              		.global	__aeabi_d2f
 790 0342 0000     		.align	2
 791              	.LC50:
 792 0344 20202849 		.ascii	"  (I/O_EQV=f(Kopf)=%1.6f\015\012\000"
 792      2F4F5F45 
 792      51563D66 
 792      284B6F70 
 792      66293D25 
 793              		.section	.text.ShowParamsGainAnaout,"ax",%progbits
 794              		.align	2
 795              		.global	ShowParamsGainAnaout
 796              		.thumb
 797              		.thumb_func
 798              		.type	ShowParamsGainAnaout, %function
 799              	ShowParamsGainAnaout:
 800              	.LFB61:
 369:.\console.c   **** 
 370:.\console.c   **** void ShowParamsGainAnaout(struct MOTOR_AXIS *paxis)
 371:.\console.c   **** {	
 801              		.loc 1 371 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 8
 804              		@ frame_needed = 1, uses_anonymous_args = 0
 805 0000 80B5     		push	{r7, lr}
 806              	.LCFI13:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 82B0     		sub	sp, sp, #8
 811              	.LCFI14:
 812              		.cfi_def_cfa_offset 16
 813 0004 00AF     		add	r7, sp, #0
 814              	.LCFI15:
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
 372:.\console.c   **** 	printf("%4f ",(float)((*paxis).param.Gain_ANAOUT.fnum));
 817              		.loc 1 372 0
 818 0008 7B68     		ldr	r3, [r7, #4]
 819 000a 9B6A     		ldr	r3, [r3, #40]	@ float
 820 000c 1846     		mov	r0, r3
 821 000e FFF7FEFF 		bl	__aeabi_f2d
 822 0012 0246     		mov	r2, r0
 823 0014 0B46     		mov	r3, r1
 824 0016 40F20000 		movw	r0, #:lower16:.LC48
 825 001a C0F20000 		movt	r0, #:upper16:.LC48
 826 001e FFF7FEFF 		bl	printf
 373:.\console.c   **** 	/********************************************************************************/
 374:.\console.c   **** 	/* Again (I/O_EQV) = DAC_Resolution/ADC_Resolution * VMAX_ADC/VMAX_DAC * 1/Kopf	*/
 375:.\console.c   **** 	/* Again (I/O_EQV) =            255/4096           *       5V/4V       * 1/Kopf	*/
 376:.\console.c   **** 	/* Again (I/O_EQV) = 0.077819824 / Kopf											*/
 377:.\console.c   **** 	/********************************************************************************/
 378:.\console.c   **** 	/* 1V Output --> [step] * AGAIN = 255/4 --> [step] = 255/4 * 1/AGAIN			*/
 379:.\console.c   **** 	/********************************************************************************/
 380:.\console.c   **** 	printf("  1V=%4.1f [step]",(float)(63.75/((*paxis).param.Gain_ANAOUT.fnum)));
 827              		.loc 1 380 0
 828 0022 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 25


 829 0024 9B6A     		ldr	r3, [r3, #40]	@ float
 830 0026 4FF00000 		mov	r0, #0
 831 002a C4F27F20 		movt	r0, 17023
 832 002e 1946     		mov	r1, r3
 833 0030 FFF7FEFF 		bl	__aeabi_fdiv
 834 0034 0346     		mov	r3, r0
 835 0036 1846     		mov	r0, r3
 836 0038 FFF7FEFF 		bl	__aeabi_f2d
 837 003c 0246     		mov	r2, r0
 838 003e 0B46     		mov	r3, r1
 839 0040 40F20000 		movw	r0, #:lower16:.LC49
 840 0044 C0F20000 		movt	r0, #:upper16:.LC49
 841 0048 FFF7FEFF 		bl	printf
 381:.\console.c   **** 	printf("  (I/O_EQV=f(Kopf)=%1.6f\r\n",(float)(0.077819824/(*paxis).param.Kopf.fnum));
 842              		.loc 1 381 0
 843 004c 7B68     		ldr	r3, [r7, #4]
 844 004e 5B6A     		ldr	r3, [r3, #36]	@ float
 845 0050 1846     		mov	r0, r3
 846 0052 FFF7FEFF 		bl	__aeabi_f2d
 847 0056 0246     		mov	r2, r0
 848 0058 0B46     		mov	r3, r1
 849 005a 0DA1     		adr	r1, .L64
 850 005c D1E90001 		ldrd	r0, [r1]
 851 0060 FFF7FEFF 		bl	__aeabi_ddiv
 852 0064 0246     		mov	r2, r0
 853 0066 0B46     		mov	r3, r1
 854 0068 1046     		mov	r0, r2
 855 006a 1946     		mov	r1, r3
 856 006c FFF7FEFF 		bl	__aeabi_d2f
 857 0070 0346     		mov	r3, r0
 858 0072 1846     		mov	r0, r3
 859 0074 FFF7FEFF 		bl	__aeabi_f2d
 860 0078 0246     		mov	r2, r0
 861 007a 0B46     		mov	r3, r1
 862 007c 40F20000 		movw	r0, #:lower16:.LC50
 863 0080 C0F20000 		movt	r0, #:upper16:.LC50
 864 0084 FFF7FEFF 		bl	printf
 382:.\console.c   **** }
 865              		.loc 1 382 0
 866 0088 07F10807 		add	r7, r7, #8
 867 008c BD46     		mov	sp, r7
 868 008e 80BD     		pop	{r7, pc}
 869              	.L65:
 870              		.align	3
 871              	.L64:
 872 0090 597B0FFF 		.word	-15762599
 873 0094 FFEBB33F 		.word	1068755967
 874              		.cfi_endproc
 875              	.LFE61:
 876              		.size	ShowParamsGainAnaout, .-ShowParamsGainAnaout
 877              		.section	.rodata
 878 035f 00       		.align	2
 879              	.LC51:
 880 0360 50414E20 		.ascii	"PAN (volatile)\000"
 880      28766F6C 
 880      6174696C 
 880      652900
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 26


 881 036f 00       		.align	2
 882              	.LC52:
 883 0370 54494C54 		.ascii	"TILT (default at poweron)\000"
 883      20286465 
 883      6661756C 
 883      74206174 
 883      20706F77 
 884 038a 0000     		.align	2
 885              	.LC53:
 886 038c 494E5445 		.ascii	"INTERNAL FIRMWARE ERROR!\000"
 886      524E414C 
 886      20464952 
 886      4D574152 
 886      45204552 
 887              		.section	.text.ShowParamsAnaoutSelectedAxis,"ax",%progbits
 888              		.align	2
 889              		.global	ShowParamsAnaoutSelectedAxis
 890              		.thumb
 891              		.thumb_func
 892              		.type	ShowParamsAnaoutSelectedAxis, %function
 893              	ShowParamsAnaoutSelectedAxis:
 894              	.LFB62:
 383:.\console.c   **** 
 384:.\console.c   **** void ShowParamsAnaoutSelectedAxis(struct MOTOR_AXIS *paxis)
 385:.\console.c   **** {
 895              		.loc 1 385 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 8
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 80B5     		push	{r7, lr}
 900              	.LCFI16:
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 7, -8
 903              		.cfi_offset 14, -4
 904 0002 82B0     		sub	sp, sp, #8
 905              	.LCFI17:
 906              		.cfi_def_cfa_offset 16
 907 0004 00AF     		add	r7, sp, #0
 908              	.LCFI18:
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 386:.\console.c   **** 	if (paxis == &pan_axis)
 911              		.loc 1 386 0
 912 0008 7A68     		ldr	r2, [r7, #4]
 913 000a 40F20003 		movw	r3, #:lower16:pan_axis
 914 000e C0F20003 		movt	r3, #:upper16:pan_axis
 915 0012 9A42     		cmp	r2, r3
 916 0014 06D1     		bne	.L67
 387:.\console.c   **** 	{
 388:.\console.c   **** 		printf("PAN (volatile)");
 917              		.loc 1 388 0
 918 0016 40F20000 		movw	r0, #:lower16:.LC51
 919 001a C0F20000 		movt	r0, #:upper16:.LC51
 920 001e FFF7FEFF 		bl	printf
 921 0022 13E0     		b	.L66
 922              	.L67:
 389:.\console.c   **** 	}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 27


 390:.\console.c   **** 	else if (paxis == &tilt_axis)
 923              		.loc 1 390 0
 924 0024 7A68     		ldr	r2, [r7, #4]
 925 0026 40F20003 		movw	r3, #:lower16:tilt_axis
 926 002a C0F20003 		movt	r3, #:upper16:tilt_axis
 927 002e 9A42     		cmp	r2, r3
 928 0030 06D1     		bne	.L69
 391:.\console.c   **** 	{
 392:.\console.c   **** 		printf("TILT (default at poweron)");
 929              		.loc 1 392 0
 930 0032 40F20000 		movw	r0, #:lower16:.LC52
 931 0036 C0F20000 		movt	r0, #:upper16:.LC52
 932 003a FFF7FEFF 		bl	printf
 933 003e 05E0     		b	.L66
 934              	.L69:
 393:.\console.c   **** 	}
 394:.\console.c   **** //	else if (paxis == &roll_axis)
 395:.\console.c   **** //	{
 396:.\console.c   **** //		printf("ROLL (volatile)");
 397:.\console.c   **** //	}
 398:.\console.c   **** 	else
 399:.\console.c   **** 	{
 400:.\console.c   **** 		printf("INTERNAL FIRMWARE ERROR!");
 935              		.loc 1 400 0
 936 0040 40F20000 		movw	r0, #:lower16:.LC53
 937 0044 C0F20000 		movt	r0, #:upper16:.LC53
 938 0048 FFF7FEFF 		bl	printf
 939              	.L66:
 401:.\console.c   **** 	}	
 402:.\console.c   **** 
 403:.\console.c   **** }
 940              		.loc 1 403 0
 941 004c 07F10807 		add	r7, r7, #8
 942 0050 BD46     		mov	sp, r7
 943 0052 80BD     		pop	{r7, pc}
 944              		.cfi_endproc
 945              	.LFE62:
 946              		.size	ShowParamsAnaoutSelectedAxis, .-ShowParamsAnaoutSelectedAxis
 947              		.section	.rodata
 948 03a5 000000   		.align	2
 949              	.LC54:
 950 03a8 25312E36 		.ascii	"%1.6f (Tau=%1.6f [msec])\000"
 950      66202854 
 950      61753D25 
 950      312E3666 
 950      205B6D73 
 951              		.section	.text.ShowParamsKiPan,"ax",%progbits
 952              		.align	2
 953              		.global	ShowParamsKiPan
 954              		.thumb
 955              		.thumb_func
 956              		.type	ShowParamsKiPan, %function
 957              	ShowParamsKiPan:
 958              	.LFB63:
 404:.\console.c   **** 
 405:.\console.c   **** void ShowParamsKiPan(void)
 406:.\console.c   **** {
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 28


 959              		.loc 1 406 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963 0000 B0B5     		push	{r4, r5, r7, lr}
 964              	.LCFI19:
 965              		.cfi_def_cfa_offset 16
 966              		.cfi_offset 4, -16
 967              		.cfi_offset 5, -12
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0002 82B0     		sub	sp, sp, #8
 971              	.LCFI20:
 972              		.cfi_def_cfa_offset 24
 973 0004 02AF     		add	r7, sp, #8
 974              	.LCFI21:
 975              		.cfi_def_cfa 7, 16
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 408:.\console.c   **** 		   (float)(pan_axis.param.Kif.fnum),(float)convKiTi(pan_axis.param.Kpf.fnum, pan_axis.param.Kif.f
 976              		.loc 1 408 0
 977 0006 40F20003 		movw	r3, #:lower16:pan_axis
 978 000a C0F20003 		movt	r3, #:upper16:pan_axis
 979 000e DB69     		ldr	r3, [r3, #28]	@ float
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 980              		.loc 1 407 0
 981 0010 1846     		mov	r0, r3
 982 0012 FFF7FEFF 		bl	__aeabi_f2d
 983 0016 0446     		mov	r4, r0
 984 0018 0D46     		mov	r5, r1
 985              		.loc 1 408 0
 986 001a 40F20003 		movw	r3, #:lower16:pan_axis
 987 001e C0F20003 		movt	r3, #:upper16:pan_axis
 988 0022 5969     		ldr	r1, [r3, #20]	@ float
 989 0024 40F20003 		movw	r3, #:lower16:pan_axis
 990 0028 C0F20003 		movt	r3, #:upper16:pan_axis
 991 002c DA69     		ldr	r2, [r3, #28]	@ float
 992 002e 40F20003 		movw	r3, #:lower16:fsampling
 993 0032 C0F20003 		movt	r3, #:upper16:fsampling
 994 0036 1B68     		ldr	r3, [r3, #0]	@ float
 995 0038 0846     		mov	r0, r1
 996 003a 1146     		mov	r1, r2
 997 003c 1A46     		mov	r2, r3
 998 003e FFF7FEFF 		bl	convKiTi
 999 0042 0346     		mov	r3, r0
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1000              		.loc 1 407 0
 1001 0044 1846     		mov	r0, r3
 1002 0046 FFF7FEFF 		bl	__aeabi_f2d
 1003 004a 0246     		mov	r2, r0
 1004 004c 0B46     		mov	r3, r1
 1005 004e CDE90023 		strd	r2, [sp]
 1006 0052 40F20000 		movw	r0, #:lower16:.LC54
 1007 0056 C0F20000 		movt	r0, #:upper16:.LC54
 1008 005a 2246     		mov	r2, r4
 1009 005c 2B46     		mov	r3, r5
 1010 005e FFF7FEFF 		bl	printf
 409:.\console.c   **** }
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 29


 1011              		.loc 1 409 0
 1012 0062 BD46     		mov	sp, r7
 1013 0064 B0BD     		pop	{r4, r5, r7, pc}
 1014              		.cfi_endproc
 1015              	.LFE63:
 1016              		.size	ShowParamsKiPan, .-ShowParamsKiPan
 1017 0066 00BF     		.section	.text.ShowParamsKiTilt,"ax",%progbits
 1018              		.align	2
 1019              		.global	ShowParamsKiTilt
 1020              		.thumb
 1021              		.thumb_func
 1022              		.type	ShowParamsKiTilt, %function
 1023              	ShowParamsKiTilt:
 1024              	.LFB64:
 410:.\console.c   **** 
 411:.\console.c   **** void ShowParamsKiTilt(void)
 412:.\console.c   **** {
 1025              		.loc 1 412 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 0000 B0B5     		push	{r4, r5, r7, lr}
 1030              	.LCFI22:
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 4, -16
 1033              		.cfi_offset 5, -12
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 82B0     		sub	sp, sp, #8
 1037              	.LCFI23:
 1038              		.cfi_def_cfa_offset 24
 1039 0004 02AF     		add	r7, sp, #8
 1040              	.LCFI24:
 1041              		.cfi_def_cfa 7, 16
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 414:.\console.c   **** 		   (float)(tilt_axis.param.Kif.fnum),(float)convKiTi(tilt_axis.param.Kpf.fnum, tilt_axis.param.Ki
 1042              		.loc 1 414 0
 1043 0006 40F20003 		movw	r3, #:lower16:tilt_axis
 1044 000a C0F20003 		movt	r3, #:upper16:tilt_axis
 1045 000e DB69     		ldr	r3, [r3, #28]	@ float
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1046              		.loc 1 413 0
 1047 0010 1846     		mov	r0, r3
 1048 0012 FFF7FEFF 		bl	__aeabi_f2d
 1049 0016 0446     		mov	r4, r0
 1050 0018 0D46     		mov	r5, r1
 1051              		.loc 1 414 0
 1052 001a 40F20003 		movw	r3, #:lower16:tilt_axis
 1053 001e C0F20003 		movt	r3, #:upper16:tilt_axis
 1054 0022 5969     		ldr	r1, [r3, #20]	@ float
 1055 0024 40F20003 		movw	r3, #:lower16:tilt_axis
 1056 0028 C0F20003 		movt	r3, #:upper16:tilt_axis
 1057 002c DA69     		ldr	r2, [r3, #28]	@ float
 1058 002e 40F20003 		movw	r3, #:lower16:fsampling
 1059 0032 C0F20003 		movt	r3, #:upper16:fsampling
 1060 0036 1B68     		ldr	r3, [r3, #0]	@ float
 1061 0038 0846     		mov	r0, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 30


 1062 003a 1146     		mov	r1, r2
 1063 003c 1A46     		mov	r2, r3
 1064 003e FFF7FEFF 		bl	convKiTi
 1065 0042 0346     		mov	r3, r0
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1066              		.loc 1 413 0
 1067 0044 1846     		mov	r0, r3
 1068 0046 FFF7FEFF 		bl	__aeabi_f2d
 1069 004a 0246     		mov	r2, r0
 1070 004c 0B46     		mov	r3, r1
 1071 004e CDE90023 		strd	r2, [sp]
 1072 0052 40F20000 		movw	r0, #:lower16:.LC54
 1073 0056 C0F20000 		movt	r0, #:upper16:.LC54
 1074 005a 2246     		mov	r2, r4
 1075 005c 2B46     		mov	r3, r5
 1076 005e FFF7FEFF 		bl	printf
 415:.\console.c   **** }
 1077              		.loc 1 415 0
 1078 0062 BD46     		mov	sp, r7
 1079 0064 B0BD     		pop	{r4, r5, r7, pc}
 1080              		.cfi_endproc
 1081              	.LFE64:
 1082              		.size	ShowParamsKiTilt, .-ShowParamsKiTilt
 1083 0066 00BF     		.section	.rodata
 1084 03c1 000000   		.align	2
 1085              	.LC55:
 1086 03c4 2531753A 		.ascii	"%1u:\000"
 1086      00
 1087 03c9 000000   		.align	2
 1088              	.LC56:
 1089 03cc 4759524F 		.ascii	"GYRO RATE\000"
 1089      20524154 
 1089      4500
 1090 03d6 0000     		.align	2
 1091              	.LC57:
 1092 03d8 534C4156 		.ascii	"SLAVE ENCODER POSITION\000"
 1092      4520454E 
 1092      434F4445 
 1092      5220504F 
 1092      53495449 
 1093 03ef 00       		.align	2
 1094              	.LC58:
 1095 03f0 534C4156 		.ascii	"SLAVE ENCODER VELOCITY\000"
 1095      4520454E 
 1095      434F4445 
 1095      52205645 
 1095      4C4F4349 
 1096 0407 00       		.align	2
 1097              	.LC59:
 1098 0408 41535449 		.ascii	"ASTIM INPUT\000"
 1098      4D20494E 
 1098      50555400 
 1099              		.align	2
 1100              	.LC60:
 1101 0414 6572726F 		.ascii	"error(t)\000"
 1101      72287429 
 1101      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 31


 1102 041d 000000   		.align	2
 1103              	.LC61:
 1104 0420 64286572 		.ascii	"d(error(t))/dt\000"
 1104      726F7228 
 1104      7429292F 
 1104      647400
 1105 042f 00       		.align	2
 1106              	.LC62:
 1107 0430 696E7465 		.ascii	"integral(error(t)*dt)\000"
 1107      6772616C 
 1107      28657272 
 1107      6F722874 
 1107      292A6474 
 1108 0446 0000     		.align	2
 1109              	.LC63:
 1110 0448 4B69202A 		.ascii	"Ki * integral(e(t)) (fixed 4Vpp Output at PWM MAX)\000"
 1110      20696E74 
 1110      65677261 
 1110      6C286528 
 1110      74292920 
 1111 047b 00       		.align	2
 1112              	.LC64:
 1113 047c 63762874 		.ascii	"cv(t) (fixed 4Vpp Output at PWM MAX)\000"
 1113      29202866 
 1113      69786564 
 1113      20345670 
 1113      70204F75 
 1114 04a1 000000   		.align	2
 1115              	.LC65:
 1116 04a4 494E5445 		.ascii	"INTERNAL FW ERROR!   \000"
 1116      524E414C 
 1116      20465720 
 1116      4552524F 
 1116      52212020 
 1117              		.section	.text.ShowParamsColor,"ax",%progbits
 1118              		.align	2
 1119              		.global	ShowParamsColor
 1120              		.thumb
 1121              		.thumb_func
 1122              		.type	ShowParamsColor, %function
 1123              	ShowParamsColor:
 1124              	.LFB65:
 416:.\console.c   **** 
 417:.\console.c   **** void ShowParamsColor(struct MOTOR_AXIS *paxis)
 418:.\console.c   **** {	
 1125              		.loc 1 418 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 8
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0000 80B5     		push	{r7, lr}
 1130              	.LCFI25:
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 82B0     		sub	sp, sp, #8
 1135              	.LCFI26:
 1136              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 32


 1137 0004 00AF     		add	r7, sp, #0
 1138              	.LCFI27:
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
 419:.\console.c   **** 	printf("%1u:",(uint16)((*paxis).param.color));
 1141              		.loc 1 419 0
 1142 0008 7B68     		ldr	r3, [r7, #4]
 1143 000a 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1144 000e 40F20000 		movw	r0, #:lower16:.LC55
 1145 0012 C0F20000 		movt	r0, #:upper16:.LC55
 1146 0016 1946     		mov	r1, r3
 1147 0018 FFF7FEFF 		bl	printf
 420:.\console.c   **** 	
 421:.\console.c   **** 	if ((*paxis).param.color == GYRO_RATE)
 1148              		.loc 1 421 0
 1149 001c 7B68     		ldr	r3, [r7, #4]
 1150 001e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1151 0022 002B     		cmp	r3, #0
 1152 0024 06D1     		bne	.L73
 422:.\console.c   **** 	{
 423:.\console.c   **** 		printf("GYRO RATE");
 1153              		.loc 1 423 0
 1154 0026 40F20000 		movw	r0, #:lower16:.LC56
 1155 002a C0F20000 		movt	r0, #:upper16:.LC56
 1156 002e FFF7FEFF 		bl	printf
 1157 0032 71E0     		b	.L72
 1158              	.L73:
 424:.\console.c   **** 	}
 425:.\console.c   **** 	else if ((*paxis).param.color == SLAVE_ENC_POS)
 1159              		.loc 1 425 0
 1160 0034 7B68     		ldr	r3, [r7, #4]
 1161 0036 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1162 003a 012B     		cmp	r3, #1
 1163 003c 06D1     		bne	.L75
 426:.\console.c   **** 	{
 427:.\console.c   **** 		printf("SLAVE ENCODER POSITION");
 1164              		.loc 1 427 0
 1165 003e 40F20000 		movw	r0, #:lower16:.LC57
 1166 0042 C0F20000 		movt	r0, #:upper16:.LC57
 1167 0046 FFF7FEFF 		bl	printf
 1168 004a 65E0     		b	.L72
 1169              	.L75:
 428:.\console.c   **** 	}
 429:.\console.c   **** 	else if ((*paxis).param.color == SLAVE_ENC_VEL)
 1170              		.loc 1 429 0
 1171 004c 7B68     		ldr	r3, [r7, #4]
 1172 004e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1173 0052 022B     		cmp	r3, #2
 1174 0054 06D1     		bne	.L76
 430:.\console.c   **** 	{
 431:.\console.c   **** 		printf("SLAVE ENCODER VELOCITY");
 1175              		.loc 1 431 0
 1176 0056 40F20000 		movw	r0, #:lower16:.LC58
 1177 005a C0F20000 		movt	r0, #:upper16:.LC58
 1178 005e FFF7FEFF 		bl	printf
 1179 0062 59E0     		b	.L72
 1180              	.L76:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 33


 432:.\console.c   **** 	}	
 433:.\console.c   **** 	else if ((*paxis).param.color == ASTIM_IN)
 1181              		.loc 1 433 0
 1182 0064 7B68     		ldr	r3, [r7, #4]
 1183 0066 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1184 006a 032B     		cmp	r3, #3
 1185 006c 06D1     		bne	.L77
 434:.\console.c   **** 	{
 435:.\console.c   **** 		printf("ASTIM INPUT");
 1186              		.loc 1 435 0
 1187 006e 40F20000 		movw	r0, #:lower16:.LC59
 1188 0072 C0F20000 		movt	r0, #:upper16:.LC59
 1189 0076 FFF7FEFF 		bl	printf
 1190 007a 4DE0     		b	.L72
 1191              	.L77:
 436:.\console.c   **** 	}	
 437:.\console.c   **** 	else if ((*paxis).param.color == CTRL_ERROR)
 1192              		.loc 1 437 0
 1193 007c 7B68     		ldr	r3, [r7, #4]
 1194 007e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1195 0082 042B     		cmp	r3, #4
 1196 0084 06D1     		bne	.L78
 438:.\console.c   **** 	{
 439:.\console.c   **** 		printf("error(t)");
 1197              		.loc 1 439 0
 1198 0086 40F20000 		movw	r0, #:lower16:.LC60
 1199 008a C0F20000 		movt	r0, #:upper16:.LC60
 1200 008e FFF7FEFF 		bl	printf
 1201 0092 41E0     		b	.L72
 1202              	.L78:
 440:.\console.c   **** 	}	
 441:.\console.c   **** 	else if ((*paxis).param.color == CTRL_DERROR)
 1203              		.loc 1 441 0
 1204 0094 7B68     		ldr	r3, [r7, #4]
 1205 0096 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1206 009a 052B     		cmp	r3, #5
 1207 009c 06D1     		bne	.L79
 442:.\console.c   **** 	{
 443:.\console.c   **** 		printf("d(error(t))/dt");
 1208              		.loc 1 443 0
 1209 009e 40F20000 		movw	r0, #:lower16:.LC61
 1210 00a2 C0F20000 		movt	r0, #:upper16:.LC61
 1211 00a6 FFF7FEFF 		bl	printf
 1212 00aa 35E0     		b	.L72
 1213              	.L79:
 444:.\console.c   **** 	}
 445:.\console.c   **** 	else if ((*paxis).param.color == CTRL_IERROR)
 1214              		.loc 1 445 0
 1215 00ac 7B68     		ldr	r3, [r7, #4]
 1216 00ae 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1217 00b2 062B     		cmp	r3, #6
 1218 00b4 06D1     		bne	.L80
 446:.\console.c   **** 	{
 447:.\console.c   **** 		printf("integral(error(t)*dt)");
 1219              		.loc 1 447 0
 1220 00b6 40F20000 		movw	r0, #:lower16:.LC62
 1221 00ba C0F20000 		movt	r0, #:upper16:.LC62
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 34


 1222 00be FFF7FEFF 		bl	printf
 1223 00c2 29E0     		b	.L72
 1224              	.L80:
 448:.\console.c   **** 	}
 449:.\console.c   **** 	else if ((*paxis).param.color == CTRL_AZIERROR)
 1225              		.loc 1 449 0
 1226 00c4 7B68     		ldr	r3, [r7, #4]
 1227 00c6 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1228 00ca 072B     		cmp	r3, #7
 1229 00cc 06D1     		bne	.L81
 450:.\console.c   **** 	{
 451:.\console.c   **** 		printf("integral(error(t)*dt)");
 1230              		.loc 1 451 0
 1231 00ce 40F20000 		movw	r0, #:lower16:.LC62
 1232 00d2 C0F20000 		movt	r0, #:upper16:.LC62
 1233 00d6 FFF7FEFF 		bl	printf
 1234 00da 1DE0     		b	.L72
 1235              	.L81:
 452:.\console.c   **** 	}
 453:.\console.c   **** 	else if ((*paxis).param.color == CTRL_AZIERROR)
 1236              		.loc 1 453 0
 1237 00dc 7B68     		ldr	r3, [r7, #4]
 1238 00de 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1239 00e2 072B     		cmp	r3, #7
 1240 00e4 06D1     		bne	.L82
 454:.\console.c   **** 	{
 455:.\console.c   **** 		printf("Ki * integral(e(t)) (fixed 4Vpp Output at PWM MAX)");
 1241              		.loc 1 455 0
 1242 00e6 40F20000 		movw	r0, #:lower16:.LC63
 1243 00ea C0F20000 		movt	r0, #:upper16:.LC63
 1244 00ee FFF7FEFF 		bl	printf
 1245 00f2 11E0     		b	.L72
 1246              	.L82:
 456:.\console.c   **** 	}		
 457:.\console.c   **** 	else if ((*paxis).param.color == CTRL_CV)
 1247              		.loc 1 457 0
 1248 00f4 7B68     		ldr	r3, [r7, #4]
 1249 00f6 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1250 00fa 082B     		cmp	r3, #8
 1251 00fc 06D1     		bne	.L83
 458:.\console.c   **** 	{
 459:.\console.c   **** 		printf("cv(t) (fixed 4Vpp Output at PWM MAX)");
 1252              		.loc 1 459 0
 1253 00fe 40F20000 		movw	r0, #:lower16:.LC64
 1254 0102 C0F20000 		movt	r0, #:upper16:.LC64
 1255 0106 FFF7FEFF 		bl	printf
 1256 010a 05E0     		b	.L72
 1257              	.L83:
 460:.\console.c   **** 	}
 461:.\console.c   **** 	else
 462:.\console.c   **** 	{
 463:.\console.c   **** 		printf("INTERNAL FW ERROR!   ");
 1258              		.loc 1 463 0
 1259 010c 40F20000 		movw	r0, #:lower16:.LC65
 1260 0110 C0F20000 		movt	r0, #:upper16:.LC65
 1261 0114 FFF7FEFF 		bl	printf
 1262              	.L72:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 35


 464:.\console.c   **** 	}	
 465:.\console.c   **** }
 1263              		.loc 1 465 0
 1264 0118 07F10807 		add	r7, r7, #8
 1265 011c BD46     		mov	sp, r7
 1266 011e 80BD     		pop	{r7, pc}
 1267              		.cfi_endproc
 1268              	.LFE65:
 1269              		.size	ShowParamsColor, .-ShowParamsColor
 1270              		.section	.rodata
 1271 04ba 0000     		.align	2
 1272              	.LC66:
 1273 04bc 28424554 		.ascii	"(BETWEEN)  \000"
 1273      5745454E 
 1273      29202000 
 1274              		.align	2
 1275              	.LC67:
 1276 04c8 28504F53 		.ascii	"(POS    )  \000"
 1276      20202020 
 1276      29202000 
 1277              		.align	2
 1278              	.LC68:
 1279 04d4 284E4547 		.ascii	"(NEG    )  \000"
 1279      20202020 
 1279      29202000 
 1280              		.align	2
 1281              	.LC69:
 1282 04e0 28494E54 		.ascii	"(INT ERR) \000"
 1282      20455252 
 1282      292000
 1283              		.section	.text.ShowLimits,"ax",%progbits
 1284              		.align	2
 1285              		.global	ShowLimits
 1286              		.thumb
 1287              		.thumb_func
 1288              		.type	ShowLimits, %function
 1289              	ShowLimits:
 1290              	.LFB66:
 466:.\console.c   **** 
 467:.\console.c   **** void ShowLimits(struct MOTOR_AXIS *paxis)
 468:.\console.c   **** {
 1291              		.loc 1 468 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 8
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 80B5     		push	{r7, lr}
 1296              	.LCFI28:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 82B0     		sub	sp, sp, #8
 1301              	.LCFI29:
 1302              		.cfi_def_cfa_offset 16
 1303 0004 00AF     		add	r7, sp, #0
 1304              	.LCFI30:
 1305              		.cfi_def_cfa_register 7
 1306 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 36


 469:.\console.c   **** 	if ((*paxis).lc.status == COARSE_BETWEEN_LIMITS_OK)
 1307              		.loc 1 469 0
 1308 0008 7B68     		ldr	r3, [r7, #4]
 1309 000a 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1310 000e 002B     		cmp	r3, #0
 1311 0010 06D1     		bne	.L85
 470:.\console.c   **** 	{
 471:.\console.c   **** 		printf("(BETWEEN)  ");
 1312              		.loc 1 471 0
 1313 0012 40F20000 		movw	r0, #:lower16:.LC66
 1314 0016 C0F20000 		movt	r0, #:upper16:.LC66
 1315 001a FFF7FEFF 		bl	printf
 1316 001e 1DE0     		b	.L84
 1317              	.L85:
 472:.\console.c   **** 	}
 473:.\console.c   **** 	else if ((*paxis).lc.status == POSITIVE_LIMIT_REACHED)
 1318              		.loc 1 473 0
 1319 0020 7B68     		ldr	r3, [r7, #4]
 1320 0022 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1321 0026 022B     		cmp	r3, #2
 1322 0028 06D1     		bne	.L87
 474:.\console.c   **** 	{
 475:.\console.c   **** 		printf("(POS    )  ");
 1323              		.loc 1 475 0
 1324 002a 40F20000 		movw	r0, #:lower16:.LC67
 1325 002e C0F20000 		movt	r0, #:upper16:.LC67
 1326 0032 FFF7FEFF 		bl	printf
 1327 0036 11E0     		b	.L84
 1328              	.L87:
 476:.\console.c   **** 	}
 477:.\console.c   **** 	else if ((*paxis).lc.status == NEGATIVE_LIMIT_REACHED)
 1329              		.loc 1 477 0
 1330 0038 7B68     		ldr	r3, [r7, #4]
 1331 003a 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1332 003e 012B     		cmp	r3, #1
 1333 0040 06D1     		bne	.L88
 478:.\console.c   **** 	{
 479:.\console.c   **** 		printf("(NEG    )  ");
 1334              		.loc 1 479 0
 1335 0042 40F20000 		movw	r0, #:lower16:.LC68
 1336 0046 C0F20000 		movt	r0, #:upper16:.LC68
 1337 004a FFF7FEFF 		bl	printf
 1338 004e 05E0     		b	.L84
 1339              	.L88:
 480:.\console.c   **** 	}
 481:.\console.c   **** 	else
 482:.\console.c   **** 	{
 483:.\console.c   **** 		printf("(INT ERR) ");
 1340              		.loc 1 483 0
 1341 0050 40F20000 		movw	r0, #:lower16:.LC69
 1342 0054 C0F20000 		movt	r0, #:upper16:.LC69
 1343 0058 FFF7FEFF 		bl	printf
 1344              	.L84:
 484:.\console.c   **** 	}	
 485:.\console.c   **** }
 1345              		.loc 1 485 0
 1346 005c 07F10807 		add	r7, r7, #8
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 37


 1347 0060 BD46     		mov	sp, r7
 1348 0062 80BD     		pop	{r7, pc}
 1349              		.cfi_endproc
 1350              	.LFE66:
 1351              		.size	ShowLimits, .-ShowLimits
 1352              		.section	.text.ReadUSBbuffer,"ax",%progbits
 1353              		.align	2
 1354              		.global	ReadUSBbuffer
 1355              		.thumb
 1356              		.thumb_func
 1357              		.type	ReadUSBbuffer, %function
 1358              	ReadUSBbuffer:
 1359              	.LFB67:
 486:.\console.c   **** 
 487:.\console.c   **** // ****************************************************************
 488:.\console.c   **** // *** BUFFERIZER (pass 1 of 3)								    ***
 489:.\console.c   **** // ****************************************************************
 490:.\console.c   **** // *** Legge l'UART USB e popola il buffer userInputBuffer      ***
 491:.\console.c   **** // ****************************************************************
 492:.\console.c   **** 
 493:.\console.c   **** uint8 ReadUSBbuffer(bit echo, bit timeout)
 494:.\console.c   **** {
 1360              		.loc 1 494 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 24
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364 0000 80B5     		push	{r7, lr}
 1365              	.LCFI31:
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 7, -8
 1368              		.cfi_offset 14, -4
 1369 0002 86B0     		sub	sp, sp, #24
 1370              	.LCFI32:
 1371              		.cfi_def_cfa_offset 32
 1372 0004 00AF     		add	r7, sp, #0
 1373              	.LCFI33:
 1374              		.cfi_def_cfa_register 7
 1375 0006 0246     		mov	r2, r0
 1376 0008 0B46     		mov	r3, r1
 1377 000a FA71     		strb	r2, [r7, #7]
 1378 000c BB71     		strb	r3, [r7, #6]
 495:.\console.c   **** 	uint8 index = 0;
 1379              		.loc 1 495 0
 1380 000e 4FF00003 		mov	r3, #0
 1381 0012 FB75     		strb	r3, [r7, #23]
 496:.\console.c   **** 	uint16 ticks = 0;
 1382              		.loc 1 496 0
 1383 0014 4FF00003 		mov	r3, #0
 1384 0018 BB82     		strh	r3, [r7, #20]	@ movhi
 497:.\console.c   **** 	char charin;
 498:.\console.c   **** 	
 499:.\console.c   **** 	clear_string(userInputBuffer);
 1385              		.loc 1 499 0
 1386 001a 40F20000 		movw	r0, #:lower16:userInputBuffer
 1387 001e C0F20000 		movt	r0, #:upper16:userInputBuffer
 1388 0022 FFF7FEFF 		bl	clear_string
 500:.\console.c   **** 	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 38


 501:.\console.c   **** 	while ((index < sizeof(userInputBuffer)-1)
 1389              		.loc 1 501 0
 1390 0026 37E0     		b	.L90
 1391              	.L96:
 502:.\console.c   **** 			&& ((charin=UART_USB_GetChar()) != '\r')
 503:.\console.c   **** 			&& (ticks < TIMEOUT_TICKS) 
 504:.\console.c   **** 			&& (USB_Check() == USB_INSERTED))
 505:.\console.c   **** 	{
 506:.\console.c   **** 		if ((charin != 0) && (charin != '\n'))
 1392              		.loc 1 506 0
 1393 0028 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1394 002a 002B     		cmp	r3, #0
 1395 002c 2DD0     		beq	.L91
 1396              		.loc 1 506 0 is_stmt 0 discriminator 1
 1397 002e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1398 0030 0A2B     		cmp	r3, #10
 1399 0032 2AD0     		beq	.L91
 507:.\console.c   **** 		{
 508:.\console.c   **** 			userInputBuffer[index] = tolower((int)charin);
 1400              		.loc 1 508 0 is_stmt 1
 1401 0034 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1402              	.LBB2:
 1403 0036 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1404 0038 FB60     		str	r3, [r7, #12]
 1405 003a 40F20003 		movw	r3, #:lower16:__ctype_ptr__
 1406 003e C0F20003 		movt	r3, #:upper16:__ctype_ptr__
 1407 0042 1968     		ldr	r1, [r3, #0]
 1408 0044 FB68     		ldr	r3, [r7, #12]
 1409 0046 03F10103 		add	r3, r3, #1
 1410 004a CB18     		adds	r3, r1, r3
 1411 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1412 004e 03F00303 		and	r3, r3, #3
 1413 0052 012B     		cmp	r3, #1
 1414 0054 03D1     		bne	.L92
 1415              		.loc 1 508 0 is_stmt 0 discriminator 1
 1416 0056 FB68     		ldr	r3, [r7, #12]
 1417 0058 03F12003 		add	r3, r3, #32
 1418 005c 00E0     		b	.L93
 1419              	.L92:
 1420              		.loc 1 508 0 discriminator 2
 1421 005e FB68     		ldr	r3, [r7, #12]
 1422              	.L93:
 1423              	.LBE2:
 1424              		.loc 1 508 0 discriminator 3
 1425 0060 D9B2     		uxtb	r1, r3
 1426 0062 40F20003 		movw	r3, #:lower16:userInputBuffer
 1427 0066 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1428 006a 9954     		strb	r1, [r3, r2]
 509:.\console.c   **** 			index++;
 1429              		.loc 1 509 0 is_stmt 1 discriminator 3
 1430 006c FB7D     		ldrb	r3, [r7, #23]
 1431 006e 03F10103 		add	r3, r3, #1
 1432 0072 FB75     		strb	r3, [r7, #23]
 510:.\console.c   **** 			if (echo == 1)
 1433              		.loc 1 510 0 discriminator 3
 1434 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1435 0076 012B     		cmp	r3, #1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 39


 1436 0078 03D1     		bne	.L94
 511:.\console.c   **** 			{
 512:.\console.c   **** 				printf("%c", charin);
 1437              		.loc 1 512 0
 1438 007a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1439 007c 1846     		mov	r0, r3
 1440 007e FFF7FEFF 		bl	putchar
 1441              	.L94:
 513:.\console.c   **** 			}
 514:.\console.c   **** 			ticks = 0;
 1442              		.loc 1 514 0
 1443 0082 4FF00003 		mov	r3, #0
 1444 0086 BB82     		strh	r3, [r7, #20]	@ movhi
 1445 0088 06E0     		b	.L90
 1446              	.L91:
 515:.\console.c   **** 		}
 516:.\console.c   **** 		else
 517:.\console.c   **** 		{
 518:.\console.c   **** 			if (timeout == 1)
 1447              		.loc 1 518 0
 1448 008a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1449 008c 012B     		cmp	r3, #1
 1450 008e 03D1     		bne	.L90
 519:.\console.c   **** 			{
 520:.\console.c   **** 				ticks++;
 1451              		.loc 1 520 0
 1452 0090 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1453 0092 03F10103 		add	r3, r3, #1
 1454 0096 BB82     		strh	r3, [r7, #20]	@ movhi
 1455              	.L90:
 501:.\console.c   **** 	while ((index < sizeof(userInputBuffer)-1)
 1456              		.loc 1 501 0 discriminator 1
 1457 0098 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1458 009a 262B     		cmp	r3, #38
 1459 009c 10D8     		bhi	.L95
 502:.\console.c   **** 			&& ((charin=UART_USB_GetChar()) != '\r')
 1460              		.loc 1 502 0
 1461 009e FFF7FEFF 		bl	UART_USB_GetChar
 1462 00a2 0346     		mov	r3, r0
 1463 00a4 FB74     		strb	r3, [r7, #19]
 1464 00a6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1465 00a8 0D2B     		cmp	r3, #13
 1466 00aa 09D0     		beq	.L95
 503:.\console.c   **** 			&& (ticks < TIMEOUT_TICKS) 
 1467              		.loc 1 503 0
 1468 00ac BA8A     		ldrh	r2, [r7, #20]
 1469 00ae 4CF24F33 		movw	r3, #49999
 1470 00b2 9A42     		cmp	r2, r3
 1471 00b4 04D8     		bhi	.L95
 504:.\console.c   **** 			&& (USB_Check() == USB_INSERTED))
 1472              		.loc 1 504 0
 1473 00b6 FFF7FEFF 		bl	USB_Check
 1474 00ba 0346     		mov	r3, r0
 1475 00bc 012B     		cmp	r3, #1
 1476 00be B3D0     		beq	.L96
 1477              	.L95:
 521:.\console.c   **** 			}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 40


 522:.\console.c   **** 		}
 523:.\console.c   **** 	}
 524:.\console.c   **** 	userInputBuffer[index] = '\0';
 1478              		.loc 1 524 0
 1479 00c0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1480 00c2 40F20003 		movw	r3, #:lower16:userInputBuffer
 1481 00c6 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1482 00ca 4FF00001 		mov	r1, #0
 1483 00ce 9954     		strb	r1, [r3, r2]
 525:.\console.c   **** 	
 526:.\console.c   **** 	if (index >= sizeof(userInputBuffer)-1)
 1484              		.loc 1 526 0
 1485 00d0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1486 00d2 262B     		cmp	r3, #38
 1487 00d4 02D9     		bls	.L97
 527:.\console.c   **** 	{
 528:.\console.c   **** 		return READ_BUFF_OVERFLOW;
 1488              		.loc 1 528 0
 1489 00d6 4FF00203 		mov	r3, #2
 1490 00da 09E0     		b	.L98
 1491              	.L97:
 529:.\console.c   **** 	}
 530:.\console.c   **** 	else
 531:.\console.c   **** 	{
 532:.\console.c   **** 		if (ticks >= TIMEOUT_TICKS)
 1492              		.loc 1 532 0
 1493 00dc BA8A     		ldrh	r2, [r7, #20]
 1494 00de 4CF24F33 		movw	r3, #49999
 1495 00e2 9A42     		cmp	r2, r3
 1496 00e4 02D9     		bls	.L99
 533:.\console.c   **** 		{
 534:.\console.c   **** 			return READ_TIMEOUT;
 1497              		.loc 1 534 0
 1498 00e6 4FF00103 		mov	r3, #1
 1499 00ea 01E0     		b	.L98
 1500              	.L99:
 535:.\console.c   **** 		}
 536:.\console.c   **** 		else
 537:.\console.c   **** 		{
 538:.\console.c   **** 			return READ_OK;
 1501              		.loc 1 538 0
 1502 00ec 4FF00003 		mov	r3, #0
 1503              	.L98:
 539:.\console.c   **** 		}
 540:.\console.c   **** 	}
 541:.\console.c   **** }	
 1504              		.loc 1 541 0
 1505 00f0 1846     		mov	r0, r3
 1506 00f2 07F11807 		add	r7, r7, #24
 1507 00f6 BD46     		mov	sp, r7
 1508 00f8 80BD     		pop	{r7, pc}
 1509              		.cfi_endproc
 1510              	.LFE67:
 1511              		.size	ReadUSBbuffer, .-ReadUSBbuffer
 1512 00fa 00BF     		.section	.rodata
 1513 04eb 00       		.align	2
 1514              	.LC70:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 41


 1515 04ec 2000     		.ascii	" \000"
 1516 04ee 0000     		.align	2
 1517              	.LC71:
 1518 04f0 62756666 		.ascii	"buff=\000"
 1518      3D00
 1519 04f6 0000     		.align	2
 1520              	.LC72:
 1521 04f8 5B625D00 		.ascii	"[b]\000"
 1522              		.align	2
 1523              	.LC73:
 1524 04fc 5B645D00 		.ascii	"[d]\000"
 1525              		.align	2
 1526              	.LC74:
 1527 0500 20746B31 		.ascii	" tk1=\000"
 1527      3D00
 1528 0506 0000     		.align	2
 1529              	.LC75:
 1530 0508 20746B32 		.ascii	" tk2=\000"
 1530      3D00
 1531 050e 0000     		.align	2
 1532              	.LC76:
 1533 0510 20746B33 		.ascii	" tk3=\000"
 1533      3D00
 1534 0516 0000     		.align	2
 1535              	.LC77:
 1536 0518 20746B34 		.ascii	" tk4=\000"
 1536      3D00
 1537              		.section	.text.scanner2,"ax",%progbits
 1538              		.align	2
 1539              		.global	scanner2
 1540              		.thumb
 1541              		.thumb_func
 1542              		.type	scanner2, %function
 1543              	scanner2:
 1544              	.LFB68:
 542:.\console.c   **** 
 543:.\console.c   **** // ************************************************************************
 544:.\console.c   **** // *** SCANNERIZER (pass 2 of 3)									    ***
 545:.\console.c   **** // ************************************************************************
 546:.\console.c   **** // *** Estrae quattro sottostinghe dallo Standard Input (USB)
 547:.\console.c   **** // *** e le associa ai token di actual_command:
 548:.\console.c   **** // *** actual_command.action    <-- primo token
 549:.\console.c   **** // *** actual_command.parameter <-- secondo token 
 550:.\console.c   **** // *** actual_command.number1   <-- terzo token
 551:.\console.c   **** // *** actual_command.number2   <-- quarto token
 552:.\console.c   **** // *** restituisce:
 553:.\console.c   **** // *** 0: SCAN_OK
 554:.\console.c   **** // *** 1: SCANNING ERROR (tokens > 4)
 555:.\console.c   **** // ************************************************************************
 556:.\console.c   **** 
 557:.\console.c   **** uint8 scanner2(bit verbose)
 558:.\console.c   **** {
 1545              		.loc 1 558 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 64
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 42


 1550              	.LCFI34:
 1551              		.cfi_def_cfa_offset 8
 1552              		.cfi_offset 7, -8
 1553              		.cfi_offset 14, -4
 1554 0002 90B0     		sub	sp, sp, #64
 1555              	.LCFI35:
 1556              		.cfi_def_cfa_offset 72
 1557 0004 00AF     		add	r7, sp, #0
 1558              	.LCFI36:
 1559              		.cfi_def_cfa_register 7
 1560 0006 0346     		mov	r3, r0
 1561 0008 FB71     		strb	r3, [r7, #7]
 559:.\console.c   **** 	uint8 rdstat=0;
 1562              		.loc 1 559 0
 1563 000a 4FF00003 		mov	r3, #0
 1564 000e 87F83730 		strb	r3, [r7, #55]
 560:.\console.c   **** 	uint8 uidx=0, uidy=0;	
 1565              		.loc 1 560 0
 1566 0012 4FF00003 		mov	r3, #0
 1567 0016 87F83F30 		strb	r3, [r7, #63]
 1568 001a 4FF00003 		mov	r3, #0
 1569 001e 87F83E30 		strb	r3, [r7, #62]
 561:.\console.c   **** 	char localBuffer[40];
 562:.\console.c   **** 	char* p;
 563:.\console.c   **** 
 564:.\console.c   **** 	clear_string(actual_cmd.action);
 1570              		.loc 1 564 0
 1571 0022 40F20000 		movw	r0, #:lower16:actual_cmd
 1572 0026 C0F20000 		movt	r0, #:upper16:actual_cmd
 1573 002a FFF7FEFF 		bl	clear_string
 565:.\console.c   **** 	clear_string(actual_cmd.parameter);	
 1574              		.loc 1 565 0
 1575 002e B248     		ldr	r0, .L124
 1576 0030 FFF7FEFF 		bl	clear_string
 566:.\console.c   **** 	clear_string(actual_cmd.number1);	
 1577              		.loc 1 566 0
 1578 0034 B148     		ldr	r0, .L124+4
 1579 0036 FFF7FEFF 		bl	clear_string
 567:.\console.c   **** 	clear_string(actual_cmd.number2);	
 1580              		.loc 1 567 0
 1581 003a B148     		ldr	r0, .L124+8
 1582 003c FFF7FEFF 		bl	clear_string
 568:.\console.c   **** 
 569:.\console.c   **** 	/* Reads from USB buffer (standard input) */
 570:.\console.c   **** 	rdstat=ReadUSBbuffer(ECHO_ON, TIMEOUT_OFF);
 1583              		.loc 1 570 0
 1584 0040 4FF00100 		mov	r0, #1
 1585 0044 4FF00001 		mov	r1, #0
 1586 0048 FFF7FEFF 		bl	ReadUSBbuffer
 1587 004c 0346     		mov	r3, r0
 1588 004e 87F83730 		strb	r3, [r7, #55]
 571:.\console.c   **** 	
 572:.\console.c   **** 	/* Extract 4 Tokens */
 573:.\console.c   **** 	if (rdstat == READ_OK)
 1589              		.loc 1 573 0
 1590 0052 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1591 0056 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 43


 1592 0058 40F0BB80 		bne	.L101
 574:.\console.c   **** 	{
 575:.\console.c   **** 		clear_string(localBuffer);
 1593              		.loc 1 575 0
 1594 005c 07F10C03 		add	r3, r7, #12
 1595 0060 1846     		mov	r0, r3
 1596 0062 FFF7FEFF 		bl	clear_string
 576:.\console.c   **** 		//strcpy(localBuffer, userInputBuffer);
 577:.\console.c   **** 
 578:.\console.c   **** 		/*** strcopy with BACKSPACE control	***/
 579:.\console.c   **** 		uidx = 0;												// reset user  buffer pointer
 1597              		.loc 1 579 0
 1598 0066 4FF00003 		mov	r3, #0
 1599 006a 87F83F30 		strb	r3, [r7, #63]
 580:.\console.c   **** 		uidy = 0;									 			// reset local buffer pointer
 1600              		.loc 1 580 0
 1601 006e 4FF00003 		mov	r3, #0
 1602 0072 87F83E30 		strb	r3, [r7, #62]
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1603              		.loc 1 581 0
 1604 0076 36E0     		b	.L102
 1605              	.L105:
 582:.\console.c   **** 		{
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 584:.\console.c   **** 			{
 585:.\console.c   **** 				uidx = uidx + 1;								//		points to the next char
 1606              		.loc 1 585 0
 1607 0078 97F83F30 		ldrb	r3, [r7, #63]
 1608 007c 03F10103 		add	r3, r3, #1
 1609 0080 87F83F30 		strb	r3, [r7, #63]
 586:.\console.c   **** 
 587:.\console.c   **** 				if (uidy>0)										//		if there are characters to cancel
 1610              		.loc 1 587 0
 1611 0084 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1612 0088 002B     		cmp	r3, #0
 1613 008a 05D0     		beq	.L103
 588:.\console.c   **** 				{												//
 589:.\console.c   **** 					uidy = uidy - 1;							//			cancel the previous copied characters
 1614              		.loc 1 589 0
 1615 008c 97F83E30 		ldrb	r3, [r7, #62]
 1616 0090 03F1FF33 		add	r3, r3, #-1
 1617 0094 87F83E30 		strb	r3, [r7, #62]
 1618              	.L103:
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 1619              		.loc 1 583 0 discriminator 1
 1620 0098 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1621 009c 272B     		cmp	r3, #39
 1622 009e 08D8     		bhi	.L104
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 1623              		.loc 1 583 0 is_stmt 0 discriminator 2
 1624 00a0 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1625 00a4 40F20003 		movw	r3, #:lower16:userInputBuffer
 1626 00a8 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1627 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1628 00ae 082B     		cmp	r3, #8
 1629 00b0 E2D0     		beq	.L105
 1630              	.L104:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 44


 590:.\console.c   **** 				}												//		
 591:.\console.c   **** 			}
 592:.\console.c   **** 			localBuffer[uidy] = userInputBuffer[uidx];			//	copy one character from user to local buffer
 1631              		.loc 1 592 0 is_stmt 1
 1632 00b2 97F83E10 		ldrb	r1, [r7, #62]	@ zero_extendqisi2
 1633 00b6 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1634 00ba 40F20003 		movw	r3, #:lower16:userInputBuffer
 1635 00be C0F20003 		movt	r3, #:upper16:userInputBuffer
 1636 00c2 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 1637 00c4 07F14000 		add	r0, r7, #64
 1638 00c8 4318     		adds	r3, r0, r1
 1639 00ca 03F8342C 		strb	r2, [r3, #-52]
 593:.\console.c   **** 			uidx++;												//	increments user  buffer pointer
 1640              		.loc 1 593 0
 1641 00ce 97F83F30 		ldrb	r3, [r7, #63]
 1642 00d2 03F10103 		add	r3, r3, #1
 1643 00d6 87F83F30 		strb	r3, [r7, #63]
 594:.\console.c   **** 			uidy++;												//	increments local buffer pointer
 1644              		.loc 1 594 0
 1645 00da 97F83E30 		ldrb	r3, [r7, #62]
 1646 00de 03F10103 		add	r3, r3, #1
 1647 00e2 87F83E30 		strb	r3, [r7, #62]
 1648              	.L102:
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1649              		.loc 1 581 0 discriminator 1
 1650 00e6 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1651 00ea 272B     		cmp	r3, #39
 1652 00ec 08D8     		bhi	.L106
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1653              		.loc 1 581 0 is_stmt 0 discriminator 2
 1654 00ee 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1655 00f2 40F20003 		movw	r3, #:lower16:userInputBuffer
 1656 00f6 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1657 00fa 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1658 00fc 002B     		cmp	r3, #0
 1659 00fe CBD1     		bne	.L103
 1660              	.L106:
 595:.\console.c   **** 		}
 596:.\console.c   **** 		localBuffer[uidy] = '\0';								//terminate the local buffer string
 1661              		.loc 1 596 0 is_stmt 1
 1662 0100 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1663 0104 07F14002 		add	r2, r7, #64
 1664 0108 D318     		adds	r3, r2, r3
 1665 010a 4FF00002 		mov	r2, #0
 1666 010e 03F8342C 		strb	r2, [r3, #-52]
 597:.\console.c   **** 		/*** strcopy with BACKSPACE control END ***/
 598:.\console.c   **** 		
 599:.\console.c   **** 		p = strtok(localBuffer, " ");
 1667              		.loc 1 599 0
 1668 0112 07F10C03 		add	r3, r7, #12
 1669 0116 1846     		mov	r0, r3
 1670 0118 40F20001 		movw	r1, #:lower16:.LC70
 1671 011c C0F20001 		movt	r1, #:upper16:.LC70
 1672 0120 FFF7FEFF 		bl	strtok
 1673 0124 B863     		str	r0, [r7, #56]
 600:.\console.c   **** 
 601:.\console.c   **** 		if (p != NULL)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 45


 1674              		.loc 1 601 0
 1675 0126 BB6B     		ldr	r3, [r7, #56]
 1676 0128 002B     		cmp	r3, #0
 1677 012a 10D0     		beq	.L108
 602:.\console.c   **** 		{
 603:.\console.c   **** 			strcpy(actual_cmd.action, p);	
 1678              		.loc 1 603 0
 1679 012c 40F20000 		movw	r0, #:lower16:actual_cmd
 1680 0130 C0F20000 		movt	r0, #:upper16:actual_cmd
 1681 0134 B96B     		ldr	r1, [r7, #56]
 1682 0136 FFF7FEFF 		bl	strcpy
 604:.\console.c   **** 			p = strtok(NULL, " ");
 1683              		.loc 1 604 0
 1684 013a 4FF00000 		mov	r0, #0
 1685 013e 40F20001 		movw	r1, #:lower16:.LC70
 1686 0142 C0F20001 		movt	r1, #:upper16:.LC70
 1687 0146 FFF7FEFF 		bl	strtok
 1688 014a B863     		str	r0, [r7, #56]
 1689 014c 05E0     		b	.L109
 1690              	.L108:
 605:.\console.c   **** 		}
 606:.\console.c   **** 		else
 607:.\console.c   **** 		{
 608:.\console.c   **** 			clear_string(actual_cmd.action);
 1691              		.loc 1 608 0
 1692 014e 40F20000 		movw	r0, #:lower16:actual_cmd
 1693 0152 C0F20000 		movt	r0, #:upper16:actual_cmd
 1694 0156 FFF7FEFF 		bl	clear_string
 1695              	.L109:
 609:.\console.c   **** 		}
 610:.\console.c   **** 
 611:.\console.c   **** 		if (p != NULL)
 1696              		.loc 1 611 0
 1697 015a BB6B     		ldr	r3, [r7, #56]
 1698 015c 002B     		cmp	r3, #0
 1699 015e 0DD0     		beq	.L110
 612:.\console.c   **** 		{
 613:.\console.c   **** 			strcpy(actual_cmd.parameter, p);	
 1700              		.loc 1 613 0
 1701 0160 6548     		ldr	r0, .L124
 1702 0162 B96B     		ldr	r1, [r7, #56]
 1703 0164 FFF7FEFF 		bl	strcpy
 614:.\console.c   **** 			p = strtok(NULL, " ");
 1704              		.loc 1 614 0
 1705 0168 4FF00000 		mov	r0, #0
 1706 016c 40F20001 		movw	r1, #:lower16:.LC70
 1707 0170 C0F20001 		movt	r1, #:upper16:.LC70
 1708 0174 FFF7FEFF 		bl	strtok
 1709 0178 B863     		str	r0, [r7, #56]
 1710 017a 02E0     		b	.L111
 1711              	.L110:
 615:.\console.c   **** 		}
 616:.\console.c   **** 		else
 617:.\console.c   **** 		{
 618:.\console.c   **** 			clear_string(actual_cmd.parameter);
 1712              		.loc 1 618 0
 1713 017c 5E48     		ldr	r0, .L124
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 46


 1714 017e FFF7FEFF 		bl	clear_string
 1715              	.L111:
 619:.\console.c   **** 		}
 620:.\console.c   **** 		
 621:.\console.c   **** 		if (p != NULL)
 1716              		.loc 1 621 0
 1717 0182 BB6B     		ldr	r3, [r7, #56]
 1718 0184 002B     		cmp	r3, #0
 1719 0186 0DD0     		beq	.L112
 622:.\console.c   **** 		{
 623:.\console.c   **** 			strcpy(actual_cmd.number1, p);	
 1720              		.loc 1 623 0
 1721 0188 5C48     		ldr	r0, .L124+4
 1722 018a B96B     		ldr	r1, [r7, #56]
 1723 018c FFF7FEFF 		bl	strcpy
 624:.\console.c   **** 			p = strtok(NULL, " ");
 1724              		.loc 1 624 0
 1725 0190 4FF00000 		mov	r0, #0
 1726 0194 40F20001 		movw	r1, #:lower16:.LC70
 1727 0198 C0F20001 		movt	r1, #:upper16:.LC70
 1728 019c FFF7FEFF 		bl	strtok
 1729 01a0 B863     		str	r0, [r7, #56]
 1730 01a2 02E0     		b	.L113
 1731              	.L112:
 625:.\console.c   **** 		}
 626:.\console.c   **** 		else
 627:.\console.c   **** 		{
 628:.\console.c   **** 			clear_string(actual_cmd.number1);
 1732              		.loc 1 628 0
 1733 01a4 5548     		ldr	r0, .L124+4
 1734 01a6 FFF7FEFF 		bl	clear_string
 1735              	.L113:
 629:.\console.c   **** 		}
 630:.\console.c   **** 
 631:.\console.c   **** 		if (p != NULL)
 1736              		.loc 1 631 0
 1737 01aa BB6B     		ldr	r3, [r7, #56]
 1738 01ac 002B     		cmp	r3, #0
 1739 01ae 0DD0     		beq	.L114
 632:.\console.c   **** 		{
 633:.\console.c   **** 			strcpy(actual_cmd.number2, p);	
 1740              		.loc 1 633 0
 1741 01b0 5348     		ldr	r0, .L124+8
 1742 01b2 B96B     		ldr	r1, [r7, #56]
 1743 01b4 FFF7FEFF 		bl	strcpy
 634:.\console.c   **** 			p = strtok(NULL, " ");
 1744              		.loc 1 634 0
 1745 01b8 4FF00000 		mov	r0, #0
 1746 01bc 40F20001 		movw	r1, #:lower16:.LC70
 1747 01c0 C0F20001 		movt	r1, #:upper16:.LC70
 1748 01c4 FFF7FEFF 		bl	strtok
 1749 01c8 B863     		str	r0, [r7, #56]
 1750 01ca 02E0     		b	.L101
 1751              	.L114:
 635:.\console.c   **** 		}
 636:.\console.c   **** 		else
 637:.\console.c   **** 		{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 47


 638:.\console.c   **** 			clear_string(actual_cmd.number2);
 1752              		.loc 1 638 0
 1753 01cc 4C48     		ldr	r0, .L124+8
 1754 01ce FFF7FEFF 		bl	clear_string
 1755              	.L101:
 639:.\console.c   **** 		}
 640:.\console.c   **** 	
 641:.\console.c   **** 	}
 642:.\console.c   **** 
 643:.\console.c   **** 	if (verbose == VERBOSE_ON)
 1756              		.loc 1 643 0
 1757 01d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1758 01d4 012B     		cmp	r3, #1
 1759 01d6 7BD1     		bne	.L115
 644:.\console.c   **** 	{
 645:.\console.c   **** 		printf("\r\n");
 1760              		.loc 1 645 0
 1761 01d8 40F20000 		movw	r0, #:lower16:.LC42
 1762 01dc C0F20000 		movt	r0, #:upper16:.LC42
 1763 01e0 FFF7FEFF 		bl	puts
 646:.\console.c   **** 		printf("buff=");
 1764              		.loc 1 646 0
 1765 01e4 40F20000 		movw	r0, #:lower16:.LC71
 1766 01e8 C0F20000 		movt	r0, #:upper16:.LC71
 1767 01ec FFF7FEFF 		bl	printf
 647:.\console.c   **** 		//prints user input buffer until string termination
 648:.\console.c   **** 		uidx=0;
 1768              		.loc 1 648 0
 1769 01f0 4FF00003 		mov	r3, #0
 1770 01f4 87F83F30 		strb	r3, [r7, #63]
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1771              		.loc 1 649 0
 1772 01f8 2FE0     		b	.L116
 1773              	.L121:
 650:.\console.c   **** 		{
 651:.\console.c   **** 			if (userInputBuffer[uidx] == 8)			// ASCII BACKSPACE   = 8 (\b, ^H)
 1774              		.loc 1 651 0
 1775 01fa 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1776 01fe 40F20003 		movw	r3, #:lower16:userInputBuffer
 1777 0202 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1778 0206 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1779 0208 082B     		cmp	r3, #8
 1780 020a 06D1     		bne	.L117
 652:.\console.c   **** 			{
 653:.\console.c   **** 				printf("[b]");
 1781              		.loc 1 653 0
 1782 020c 40F20000 		movw	r0, #:lower16:.LC72
 1783 0210 C0F20000 		movt	r0, #:upper16:.LC72
 1784 0214 FFF7FEFF 		bl	printf
 1785 0218 19E0     		b	.L118
 1786              	.L117:
 654:.\console.c   **** 			}
 655:.\console.c   **** 			else if (userInputBuffer[uidx] == 127)	// ASCII DELETE7CANC = 127 (^?)
 1787              		.loc 1 655 0
 1788 021a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1789 021e 40F20003 		movw	r3, #:lower16:userInputBuffer
 1790 0222 C0F20003 		movt	r3, #:upper16:userInputBuffer
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 48


 1791 0226 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1792 0228 7F2B     		cmp	r3, #127
 1793 022a 06D1     		bne	.L119
 656:.\console.c   **** 			{
 657:.\console.c   **** 				printf("[d]");
 1794              		.loc 1 657 0
 1795 022c 40F20000 		movw	r0, #:lower16:.LC73
 1796 0230 C0F20000 		movt	r0, #:upper16:.LC73
 1797 0234 FFF7FEFF 		bl	printf
 1798 0238 09E0     		b	.L118
 1799              	.L119:
 658:.\console.c   **** 			}			
 659:.\console.c   **** 			else
 660:.\console.c   **** 			{
 661:.\console.c   **** 				printf ("%c", userInputBuffer[uidx]);
 1800              		.loc 1 661 0
 1801 023a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1802 023e 40F20003 		movw	r3, #:lower16:userInputBuffer
 1803 0242 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1804 0246 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1805 0248 1846     		mov	r0, r3
 1806 024a FFF7FEFF 		bl	putchar
 1807              	.L118:
 662:.\console.c   **** 			}
 663:.\console.c   **** 			uidx++;
 1808              		.loc 1 663 0
 1809 024e 97F83F30 		ldrb	r3, [r7, #63]
 1810 0252 03F10103 		add	r3, r3, #1
 1811 0256 87F83F30 		strb	r3, [r7, #63]
 1812              	.L116:
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1813              		.loc 1 649 0 discriminator 1
 1814 025a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1815 025e 272B     		cmp	r3, #39
 1816 0260 08D8     		bhi	.L120
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1817              		.loc 1 649 0 is_stmt 0 discriminator 2
 1818 0262 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1819 0266 40F20003 		movw	r3, #:lower16:userInputBuffer
 1820 026a C0F20003 		movt	r3, #:upper16:userInputBuffer
 1821 026e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1822 0270 002B     		cmp	r3, #0
 1823 0272 C2D1     		bne	.L121
 1824              	.L120:
 664:.\console.c   **** 		}
 665:.\console.c   **** //		printf(userInputBuffer);
 666:.\console.c   **** 		
 667:.\console.c   **** 		printf(" tk1=");
 1825              		.loc 1 667 0 is_stmt 1
 1826 0274 40F20000 		movw	r0, #:lower16:.LC74
 1827 0278 C0F20000 		movt	r0, #:upper16:.LC74
 1828 027c FFF7FEFF 		bl	printf
 668:.\console.c   **** 		printf(actual_cmd.action);
 1829              		.loc 1 668 0
 1830 0280 40F20000 		movw	r0, #:lower16:actual_cmd
 1831 0284 C0F20000 		movt	r0, #:upper16:actual_cmd
 1832 0288 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 49


 669:.\console.c   **** 		printf(" tk2=");
 1833              		.loc 1 669 0
 1834 028c 40F20000 		movw	r0, #:lower16:.LC75
 1835 0290 C0F20000 		movt	r0, #:upper16:.LC75
 1836 0294 FFF7FEFF 		bl	printf
 670:.\console.c   **** 		printf(actual_cmd.parameter);
 1837              		.loc 1 670 0
 1838 0298 1748     		ldr	r0, .L124
 1839 029a FFF7FEFF 		bl	printf
 671:.\console.c   **** 		printf(" tk3=");
 1840              		.loc 1 671 0
 1841 029e 40F20000 		movw	r0, #:lower16:.LC76
 1842 02a2 C0F20000 		movt	r0, #:upper16:.LC76
 1843 02a6 FFF7FEFF 		bl	printf
 672:.\console.c   **** 		printf(actual_cmd.number1);
 1844              		.loc 1 672 0
 1845 02aa 1448     		ldr	r0, .L124+4
 1846 02ac FFF7FEFF 		bl	printf
 673:.\console.c   **** 		printf(" tk4=");		
 1847              		.loc 1 673 0
 1848 02b0 40F20000 		movw	r0, #:lower16:.LC77
 1849 02b4 C0F20000 		movt	r0, #:upper16:.LC77
 1850 02b8 FFF7FEFF 		bl	printf
 674:.\console.c   **** 		printf(actual_cmd.number2);
 1851              		.loc 1 674 0
 1852 02bc 1048     		ldr	r0, .L124+8
 1853 02be FFF7FEFF 		bl	printf
 675:.\console.c   **** 		printf("\r\n");		
 1854              		.loc 1 675 0
 1855 02c2 40F20000 		movw	r0, #:lower16:.LC42
 1856 02c6 C0F20000 		movt	r0, #:upper16:.LC42
 1857 02ca FFF7FEFF 		bl	puts
 1858 02ce 0BE0     		b	.L122
 1859              	.L115:
 676:.\console.c   **** 	}
 677:.\console.c   **** 	else
 678:.\console.c   **** 	{
 679:.\console.c   **** 		printf("\r\n");	
 1860              		.loc 1 679 0
 1861 02d0 40F20000 		movw	r0, #:lower16:.LC42
 1862 02d4 C0F20000 		movt	r0, #:upper16:.LC42
 1863 02d8 FFF7FEFF 		bl	puts
 680:.\console.c   **** 		printf("\r\n");
 1864              		.loc 1 680 0
 1865 02dc 40F20000 		movw	r0, #:lower16:.LC42
 1866 02e0 C0F20000 		movt	r0, #:upper16:.LC42
 1867 02e4 FFF7FEFF 		bl	puts
 1868              	.L122:
 681:.\console.c   **** 	}
 682:.\console.c   **** 	
 683:.\console.c   **** 	return 0;	//SCAN_OK//	
 1869              		.loc 1 683 0
 1870 02e8 4FF00003 		mov	r3, #0
 684:.\console.c   **** }
 1871              		.loc 1 684 0
 1872 02ec 1846     		mov	r0, r3
 1873 02ee 07F14007 		add	r7, r7, #64
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 50


 1874 02f2 BD46     		mov	sp, r7
 1875 02f4 80BD     		pop	{r7, pc}
 1876              	.L125:
 1877 02f6 00BF     		.align	2
 1878              	.L124:
 1879 02f8 0F000000 		.word	actual_cmd+15
 1880 02fc 1E000000 		.word	actual_cmd+30
 1881 0300 28000000 		.word	actual_cmd+40
 1882              		.cfi_endproc
 1883              	.LFE68:
 1884              		.size	scanner2, .-scanner2
 1885              		.section	.rodata
 1886 051e 0000     		.align	2
 1887              	.LC78:
 1888 0520 626F6F74 		.ascii	"boot\000"
 1888      00
 1889 0525 000000   		.align	2
 1890              	.LC79:
 1891 0528 0D0A4172 		.ascii	"\015\012Are you sure to start Bootload [Y/N]?\000"
 1891      6520796F 
 1891      75207375 
 1891      72652074 
 1891      6F207374 
 1892              		.align	2
 1893              	.LC80:
 1894 0550 0D0A2121 		.ascii	"\015\012!!!Wait for Bootloading (power off to stop "
 1894      21576169 
 1894      7420666F 
 1894      7220426F 
 1894      6F746C6F 
 1895 057d 626F6F74 		.ascii	"bootloading process)\015\000"
 1895      6C6F6164 
 1895      696E6720 
 1895      70726F63 
 1895      65737329 
 1896 0593 00       		.align	2
 1897              	.LC81:
 1898 0594 0D0A426F 		.ascii	"\015\012Bootloading aborted!\000"
 1898      6F746C6F 
 1898      6164696E 
 1898      67206162 
 1898      6F727465 
 1899 05ab 00       		.align	2
 1900              	.LC82:
 1901 05ac 23455252 		.ascii	"#ERROR1: Too much parameters!\000"
 1901      4F52313A 
 1901      20546F6F 
 1901      206D7563 
 1901      68207061 
 1902 05ca 0000     		.align	2
 1903              	.LC83:
 1904 05cc 707000   		.ascii	"pp\000"
 1905 05cf 00       		.align	2
 1906              	.LC84:
 1907 05d0 2A414E41 		.ascii	"*ANAPOS ZERO +20!\015\000"
 1907      504F5320 
 1907      5A45524F 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 51


 1907      202B3230 
 1907      210D00
 1908 05e3 00       		.align	2
 1909              	.LC85:
 1910 05e4 2A657272 		.ascii	"*err\000"
 1910      00
 1911 05e9 000000   		.align	2
 1912              	.LC86:
 1913 05ec 70707000 		.ascii	"ppp\000"
 1914              		.align	2
 1915              	.LC87:
 1916 05f0 2A414E41 		.ascii	"*ANAPOS ZERO +100!\015\000"
 1916      504F5320 
 1916      5A45524F 
 1916      202B3130 
 1916      30210D00 
 1917              		.align	2
 1918              	.LC88:
 1919 0604 6D6D00   		.ascii	"mm\000"
 1920 0607 00       		.align	2
 1921              	.LC89:
 1922 0608 2A414E41 		.ascii	"*ANAPOS ZERO -20!\015\000"
 1922      504F5320 
 1922      5A45524F 
 1922      202D3230 
 1922      210D00
 1923 061b 00       		.align	2
 1924              	.LC90:
 1925 061c 6D6D6D00 		.ascii	"mmm\000"
 1926              		.align	2
 1927              	.LC91:
 1928 0620 2A414E41 		.ascii	"*ANAPOS ZERO -100!\015\000"
 1928      504F5320 
 1928      5A45524F 
 1928      202D3130 
 1928      30210D00 
 1929              		.align	2
 1930              	.LC92:
 1931 0634 7462757A 		.ascii	"tbuz\000"
 1931      00
 1932 0639 000000   		.align	2
 1933              	.LC93:
 1934 063c 42757A7A 		.ascii	"Buzzer testing!\015\000"
 1934      65722074 
 1934      65737469 
 1934      6E67210D 
 1934      00
 1935 064d 000000   		.align	2
 1936              	.LC94:
 1937 0650 746C6F72 		.ascii	"tlora\000"
 1937      6100
 1938 0656 0000     		.align	2
 1939              	.LC95:
 1940 0658 54657374 		.ascii	"Test LoRa started!\015\000"
 1940      204C6F52 
 1940      61207374 
 1940      61727465 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 52


 1940      64210D00 
 1941              		.align	2
 1942              	.LC96:
 1943 066c 6D797465 		.ascii	"mytest\000"
 1943      737400
 1944 0673 00       		.align	2
 1945              	.LC97:
 1946 0674 4D792074 		.ascii	"My test!\015\000"
 1946      65737421 
 1946      0D00
 1947 067e 0000     		.align	2
 1948              	.LC98:
 1949 0680 73746F70 		.ascii	"stopmapsm\000"
 1949      6D617073 
 1949      6D00
 1950 068a 0000     		.align	2
 1951              	.LC99:
 1952 068c 73746F70 		.ascii	"stopsm\000"
 1952      736D00
 1953 0693 00       		.align	2
 1954              	.LC100:
 1955 0694 4D415050 		.ascii	"MAPPING STATE MACHINE Stopped!\015\000"
 1955      494E4720 
 1955      53544154 
 1955      45204D41 
 1955      4348494E 
 1956              		.align	2
 1957              	.LC101:
 1958 06b4 6465656E 		.ascii	"deenergize\000"
 1958      65726769 
 1958      7A6500
 1959 06bf 00       		.align	2
 1960              	.LC102:
 1961 06c0 6465656E 		.ascii	"deen\000"
 1961      00
 1962 06c5 000000   		.align	2
 1963              	.LC103:
 1964 06c8 4D6F746F 		.ascii	"Motors DEENERGIZED & Driver Sleeped!\015\000"
 1964      72732044 
 1964      45454E45 
 1964      5247495A 
 1964      45442026 
 1965 06ee 0000     		.align	2
 1966              	.LC104:
 1967 06f0 656E6572 		.ascii	"energize\000"
 1967      67697A65 
 1967      00
 1968 06f9 000000   		.align	2
 1969              	.LC105:
 1970 06fc 656E00   		.ascii	"en\000"
 1971 06ff 00       		.align	2
 1972              	.LC106:
 1973 0700 4D6F746F 		.ascii	"Motors ENERGIZED!\015\000"
 1973      72732045 
 1973      4E455247 
 1973      495A4544 
 1973      210D00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 53


 1974 0713 00       		.align	2
 1975              	.LC107:
 1976 0714 766A6F79 		.ascii	"vjoyp\000"
 1976      7000
 1977 071a 0000     		.align	2
 1978              	.LC108:
 1979 071c 766A7000 		.ascii	"vjp\000"
 1980              		.align	2
 1981              	.LC109:
 1982 0720 50414E3A 		.ascii	"PAN: enc(t)=%+ld [step]\000"
 1982      20656E63 
 1982      2874293D 
 1982      252B6C64 
 1982      205B7374 
 1983              		.global	__aeabi_f2iz
 1984              		.align	2
 1985              	.LC110:
 1986 0738 20202061 		.ascii	"   abs_pos(t)=%+ld [step] \000"
 1986      62735F70 
 1986      6F732874 
 1986      293D252B 
 1986      6C64205B 
 1987              		.global	__aeabi_fmul
 1988 0753 00       		.align	2
 1989              	.LC111:
 1990 0754 20202076 		.ascii	"   vjoy(t)=%4.0f [step/sec]\000"
 1990      6A6F7928 
 1990      74293D25 
 1990      342E3066 
 1990      205B7374 
 1991              		.align	2
 1992              	.LC112:
 1993 0770 20282534 		.ascii	" (%4.3f [deg/sec])\000"
 1993      2E336620 
 1993      5B646567 
 1993      2F736563 
 1993      5D2900
 1994              		.global	__aeabi_fadd
 1995              		.global	__aeabi_fsub
 1996 0783 00       		.align	2
 1997              	.LC113:
 1998 0784 766A6F79 		.ascii	"vjoyt\000"
 1998      7400
 1999 078a 0000     		.align	2
 2000              	.LC114:
 2001 078c 766A7400 		.ascii	"vjt\000"
 2002              		.align	2
 2003              	.LC115:
 2004 0790 54494C54 		.ascii	"TILT: enc(t)=%+ld [step]\000"
 2004      3A20656E 
 2004      63287429 
 2004      3D252B6C 
 2004      64205B73 
 2005 07a9 000000   		.align	2
 2006              	.LC116:
 2007 07ac 766A6F79 		.ascii	"vjoy\000"
 2007      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 54


 2008 07b1 000000   		.align	2
 2009              	.LC117:
 2010 07b4 766A00   		.ascii	"vj\000"
 2011 07b7 00       		.align	2
 2012              	.LC118:
 2013 07b8 50414E3A 		.ascii	"PAN: \000"
 2013      2000
 2014 07be 0000     		.align	2
 2015              	.LC119:
 2016 07c0 766A6F79 		.ascii	"vjoy(t)=%4.0f [step/sec]\000"
 2016      2874293D 
 2016      25342E30 
 2016      66205B73 
 2016      7465702F 
 2017 07d9 000000   		.align	2
 2018              	.LC120:
 2019 07dc 20282535 		.ascii	" (%5.4f [A])\000"
 2019      2E346620 
 2019      5B415D29 
 2019      00
 2020 07e9 000000   		.align	2
 2021              	.LC121:
 2022 07ec 20202020 		.ascii	"    TILT: \000"
 2022      54494C54 
 2022      3A2000
 2023              		.global	__aeabi_fcmplt
 2024              		.global	__aeabi_fcmpgt
 2025 07f7 00       		.align	2
 2026              	.LC122:
 2027 07f8 7600     		.ascii	"v\000"
 2028 07fa 0000     		.align	2
 2029              	.LC123:
 2030 07fc 76657273 		.ascii	"version\000"
 2030      696F6E00 
 2031              		.align	2
 2032              	.LC124:
 2033 0804 476F4265 		.ascii	"GoBee Director FW V.0.0B-T34 24/01/19 C3.0\015\000"
 2033      65204469 
 2033      72656374 
 2033      6F722046 
 2033      5720562E 
 2034              		.align	2
 2035              	.LC125:
 2036 0830 28632920 		.ascii	"(c) 2017-2019 Gobee Srl (www.gobee.it)\015\000"
 2036      32303137 
 2036      2D323031 
 2036      3920476F 
 2036      62656520 
 2037              		.align	2
 2038              	.LC126:
 2039 0858 46572061 		.ascii	"FW and HW Designed by Graziano G. Ravizza\015\000"
 2039      6E642048 
 2039      57204465 
 2039      7369676E 
 2039      65642062 
 2040 0883 00       		.align	2
 2041              	.LC127:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 55


 2042 0884 4D454348 		.ascii	"MECHA     Designed by Cy.Pag. Team and Davide Danie"
 2042      41202020 
 2042      20204465 
 2042      7369676E 
 2042      65642062 
 2043 08b7 6C6C690D 		.ascii	"lli\015\000"
 2043      00
 2044              		.align	2
 2045              	.LC128:
 2046 08bc 434C5573 		.ascii	"CLUs      Designed by Gabriele Pisaneschi and Grazi"
 2046      20202020 
 2046      20204465 
 2046      7369676E 
 2046      65642062 
 2047 08ef 616E6F20 		.ascii	"ano G. Ravizza\015\000"
 2047      472E2052 
 2047      6176697A 
 2047      7A610D00 
 2048 08ff 00       		.align	2
 2049              	.LC129:
 2050 0900 20202020 		.ascii	"          Special Thanks to Fabio Allegreni, Claudi"
 2050      20202020 
 2050      20205370 
 2050      65636961 
 2050      6C205468 
 2051 0933 6F205061 		.ascii	"o Palumbo and all Cy.Pag. Team!\015\000"
 2051      6C756D62 
 2051      6F20616E 
 2051      6420616C 
 2051      6C204379 
 2052              		.align	2
 2053              	.LC130:
 2054 0954 70726F6D 		.ascii	"prompt\000"
 2054      707400
 2055 095b 00       		.align	2
 2056              	.LC131:
 2057 095c 50726F6D 		.ascii	"Prompt Flags:\015\000"
 2057      70742046 
 2057      6C616773 
 2057      3A0D00
 2058 096b 00       		.align	2
 2059              	.LC132:
 2060 096c 20205B46 		.ascii	"  [F]                  --> GoBee FAULT\015\000"
 2060      5D202020 
 2060      20202020 
 2060      20202020 
 2060      20202020 
 2061              		.align	2
 2062              	.LC133:
 2063 0994 20205B46 		.ascii	"  [FBK=AGYRO_VEL]      --> Analog Gyroscope Feedbac"
 2063      424B3D41 
 2063      4759524F 
 2063      5F56454C 
 2063      5D202020 
 2064 09c7 6B202856 		.ascii	"k (Velocity - Direct LOS)\015\000"
 2064      656C6F63 
 2064      69747920 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 56


 2064      2D204469 
 2064      72656374 
 2065 09e2 0000     		.align	2
 2066              	.LC134:
 2067 09e4 20205B46 		.ascii	"  [FBK=ENC_POS]        --> Digital Encoder Feedback"
 2067      424B3D45 
 2067      4E435F50 
 2067      4F535D20 
 2067      20202020 
 2068 0a17 2028506F 		.ascii	" (Position - Test Only)\015\000"
 2068      73697469 
 2068      6F6E202D 
 2068      20546573 
 2068      74204F6E 
 2069              		.align	2
 2070              	.LC135:
 2071 0a30 20205B46 		.ascii	"  [FBK=OPEN]           --> No Feedback (Open Loop)\015"
 2071      424B3D4F 
 2071      50454E5D 
 2071      20202020 
 2071      20202020 
 2072 0a63 00       		.ascii	"\000"
 2073              		.align	2
 2074              	.LC136:
 2075 0a64 3F00     		.ascii	"?\000"
 2076 0a66 0000     		.align	2
 2077              	.LC137:
 2078 0a68 6800     		.ascii	"h\000"
 2079 0a6a 0000     		.align	2
 2080              	.LC138:
 2081 0a6c 68656C70 		.ascii	"help\000"
 2081      00
 2082 0a71 000000   		.align	2
 2083              	.LC139:
 2084 0a74 476F4265 		.ascii	"GoBee Director Console Commands:\015\000"
 2084      65204469 
 2084      72656374 
 2084      6F722043 
 2084      6F6E736F 
 2085 0a96 0000     		.align	2
 2086              	.LC140:
 2087 0a98 3D3D3D3D 		.ascii	"=================================================\015"
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2088 0aca 00       		.ascii	"\000"
 2089 0acb 00       		.align	2
 2090              	.LC141:
 2091 0acc 53484F57 		.ascii	"SHOW,S: shows parameters and realtime values\015\000"
 2091      2C533A20 
 2091      73686F77 
 2091      73207061 
 2091      72616D65 
 2092 0afa 0000     		.align	2
 2093              	.LC142:
 2094 0afc 5345543A 		.ascii	"SET:  set GoBee parameters\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 57


 2094      20207365 
 2094      7420476F 
 2094      42656520 
 2094      70617261 
 2095              		.align	2
 2096              	.LC143:
 2097 0b18 50524F4D 		.ascii	"PROMPT: shows prompt flags\015\000"
 2097      50543A20 
 2097      73686F77 
 2097      73207072 
 2097      6F6D7074 
 2098              		.align	2
 2099              	.LC144:
 2100 0b34 424F4F54 		.ascii	"BOOT: starts FW Bootloading\015\000"
 2100      3A207374 
 2100      61727473 
 2100      20465720 
 2100      426F6F74 
 2101 0b51 000000   		.align	2
 2102              	.LC145:
 2103 0b54 56455253 		.ascii	"VERSION,V: displays firmware version\015\000"
 2103      494F4E2C 
 2103      563A2064 
 2103      6973706C 
 2103      61797320 
 2104 0b7a 0000     		.align	2
 2105              	.LC146:
 2106 0b7c 48454C50 		.ascii	"HELP Q: helps Q table codes\015\000"
 2106      20513A20 
 2106      68656C70 
 2106      73205120 
 2106      7461626C 
 2107 0b99 000000   		.align	2
 2108              	.LC147:
 2109 0b9c 48454C50 		.ascii	"HELP,H,?: this help\015\000"
 2109      2C482C3F 
 2109      3A207468 
 2109      69732068 
 2109      656C700D 
 2110 0bb1 000000   		.align	2
 2111              	.LC148:
 2112 0bb4 20202874 		.ascii	"  (type HELP <command> for detailed descriptions)\015"
 2112      79706520 
 2112      48454C50 
 2112      203C636F 
 2112      6D6D616E 
 2113 0be6 00       		.ascii	"\000"
 2114 0be7 00       		.align	2
 2115              	.LC149:
 2116 0be8 2D204D6F 		.ascii	"- Motor Control CMDs               -\015\000"
 2116      746F7220 
 2116      436F6E74 
 2116      726F6C20 
 2116      434D4473 
 2117 0c0e 0000     		.align	2
 2118              	.LC150:
 2119 0c10 2D2D2D2D 		.ascii	"------------------------------------\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 58


 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2120 0c36 0000     		.align	2
 2121              	.LC151:
 2122 0c38 2020454E 		.ascii	"  EN[ERGIZE]             (Energize motor)\015\000"
 2122      5B455247 
 2122      495A455D 
 2122      20202020 
 2122      20202020 
 2123 0c63 00       		.align	2
 2124              	.LC152:
 2125 0c64 20204445 		.ascii	"  DEEN[ERGIZE]           (Deenergize motor)\015\000"
 2125      454E5B45 
 2125      5247495A 
 2125      455D2020 
 2125      20202020 
 2126 0c91 000000   		.align	2
 2127              	.LC153:
 2128 0c94 2D204D6F 		.ascii	"- Mover CMDs                       -\015\000"
 2128      76657220 
 2128      434D4473 
 2128      20202020 
 2128      20202020 
 2129 0cba 0000     		.align	2
 2130              	.LC154:
 2131 0cbc 20204D4F 		.ascii	"  MOVP[ATH]     <n>      (Start Mover on Path 0..15"
 2131      56505B41 
 2131      54485D20 
 2131      20202020 
 2131      3C6E3E20 
 2132 0cef 290D00   		.ascii	")\015\000"
 2133 0cf2 0000     		.align	2
 2134              	.LC155:
 2135 0cf4 2020474F 		.ascii	"  GOTOH[OME]             (Start Mover to Goto Home)"
 2135      544F485B 
 2135      4F4D455D 
 2135      20202020 
 2135      20202020 
 2136 0d27 0D00     		.ascii	"\015\000"
 2137 0d29 000000   		.align	2
 2138              	.LC156:
 2139 0d2c 2020475B 		.ascii	"  G[OTOQ]       <n> <t>  (Start Mover to Goto Q num"
 2139      4F544F51 
 2139      5D202020 
 2139      20202020 
 2139      3C6E3E20 
 2140 0d5f 62657220 		.ascii	"ber <n> in time <t> sec)\015\000"
 2140      3C6E3E20 
 2140      696E2074 
 2140      696D6520 
 2140      3C743E20 
 2141 0d79 000000   		.align	2
 2142              	.LC157:
 2143 0d7c 2D205379 		.ascii	"- System TEST CMDs                 -\015\000"
 2143      7374656D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 59


 2143      20544553 
 2143      5420434D 
 2143      44732020 
 2144 0da2 0000     		.align	2
 2145              	.LC158:
 2146 0da4 20205442 		.ascii	"  TBUZ                   (Tests Buzzer)\015\000"
 2146      555A2020 
 2146      20202020 
 2146      20202020 
 2146      20202020 
 2147 0dcd 000000   		.align	2
 2148              	.LC159:
 2149 0dd0 2020544C 		.ascii	"  TLORA                  (Test LoRa HW)\015\000"
 2149      4F524120 
 2149      20202020 
 2149      20202020 
 2149      20202020 
 2150 0df9 000000   		.align	2
 2151              	.LC160:
 2152 0dfc 20205354 		.ascii	"  STOP[MAP]SM            (Stops the MAPPING STATE M"
 2152      4F505B4D 
 2152      41505D53 
 2152      4D202020 
 2152      20202020 
 2153 0e2f 41434849 		.ascii	"ACHINE (energize to restart))\015\000"
 2153      4E452028 
 2153      656E6572 
 2153      67697A65 
 2153      20746F20 
 2154 0e4e 0000     		.align	2
 2155              	.LC161:
 2156 0e50 2020564A 		.ascii	"  VJ[OY]P                (Pan  Virtual Joystick a=c"
 2156      5B4F595D 
 2156      50202020 
 2156      20202020 
 2156      20202020 
 2157 0e83 7720643D 		.ascii	"w d=ccw s=stop)\015\000"
 2157      63637720 
 2157      733D7374 
 2157      6F70290D 
 2157      00
 2158              		.align	2
 2159              	.LC162:
 2160 0e94 2020564A 		.ascii	"  VJ[OY]T                (Tilt Virtual Joystick w=c"
 2160      5B4F595D 
 2160      54202020 
 2160      20202020 
 2160      20202020 
 2161 0ec7 77207A3D 		.ascii	"w z=ccw s=stop)\015\000"
 2161      63637720 
 2161      733D7374 
 2161      6F70290D 
 2161      00
 2162              		.align	2
 2163              	.LC163:
 2164 0ed8 2020564A 		.ascii	"  VJ[OY]                 (Pan+Tilt Virtual Joystick"
 2164      5B4F595D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 60


 2164      20202020 
 2164      20202020 
 2164      20202020 
 2165 0f0b 290D00   		.ascii	")\015\000"
 2166 0f0e 0000     		.align	2
 2167              	.LC164:
 2168 0f10 2D20434C 		.ascii	"- CLU CMDs                         -\015\000"
 2168      5520434D 
 2168      44732020 
 2168      20202020 
 2168      20202020 
 2169 0f36 0000     		.align	2
 2170              	.LC165:
 2171 0f38 2020434C 		.ascii	"  CLUEXEC <clu_num>      (Start CLU   0 <= clu_num "
 2171      55455845 
 2171      43203C63 
 2171      6C755F6E 
 2171      756D3E20 
 2172 0f6b 3C3D2034 		.ascii	"<= 49)\015\000"
 2172      39290D00 
 2173 0f73 00       		.align	2
 2174              	.LC166:
 2175 0f74 2020434C 		.ascii	"  CLUSEQ  <pause>        (Start CLU sequence with <"
 2175      55534551 
 2175      20203C70 
 2175      61757365 
 2175      3E202020 
 2176 0fa7 70617573 		.ascii	"pause> msec)\015\000"
 2176      653E206D 
 2176      73656329 
 2176      0D00
 2177 0fb5 000000   		.align	2
 2178              	.LC167:
 2179 0fb8 73657400 		.ascii	"set\000"
 2180              		.align	2
 2181              	.LC168:
 2182 0fbc 53796E74 		.ascii	"Syntax:\015\000"
 2182      61783A0D 
 2182      00
 2183 0fc5 000000   		.align	2
 2184              	.LC169:
 2185 0fc8 20205345 		.ascii	"  SET POL[ARITY]P   <polarity> (Sets Pan  Motor Pol"
 2185      5420504F 
 2185      4C5B4152 
 2185      4954595D 
 2185      50202020 
 2186 0ffb 61726974 		.ascii	"arity)\015\000"
 2186      79290D00 
 2187 1003 00       		.align	2
 2188              	.LC170:
 2189 1004 20205345 		.ascii	"  SET POL[ARITY]T   <polarity> (Sets Tilt Motor Pol"
 2189      5420504F 
 2189      4C5B4152 
 2189      4954595D 
 2189      54202020 
 2190 1037 61726974 		.ascii	"arity)\015\000"
 2190      79290D00 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 61


 2191 103f 00       		.align	2
 2192              	.LC171:
 2193 1040 20205345 		.ascii	"  SET KPP           <kpvalue>  (Sets Pan  Motor PID"
 2193      54204B50 
 2193      50202020 
 2193      20202020 
 2193      20202020 
 2194 1073 204B7029 		.ascii	" Kp)\015\000"
 2194      0D00
 2195 1079 000000   		.align	2
 2196              	.LC172:
 2197 107c 20205345 		.ascii	"  SET KPT           <kpvalue>  (Sets Tilt Motor PID"
 2197      54204B50 
 2197      54202020 
 2197      20202020 
 2197      20202020 
 2198 10af 204B7029 		.ascii	" Kp)\015\000"
 2198      0D00
 2199 10b5 000000   		.align	2
 2200              	.LC173:
 2201 10b8 20205345 		.ascii	"  SET KDP           <kdvalue>  (Sets Pan  Motor PID"
 2201      54204B44 
 2201      50202020 
 2201      20202020 
 2201      20202020 
 2202 10eb 204B6429 		.ascii	" Kd)\015\000"
 2202      0D00
 2203 10f1 000000   		.align	2
 2204              	.LC174:
 2205 10f4 20205345 		.ascii	"  SET KDT           <kdvalue>  (Sets Tilt Motor PID"
 2205      54204B44 
 2205      54202020 
 2205      20202020 
 2205      20202020 
 2206 1127 204B6429 		.ascii	" Kd)\015\000"
 2206      0D00
 2207 112d 000000   		.align	2
 2208              	.LC175:
 2209 1130 20205345 		.ascii	"  SET KIP           <kivalue>  (Sets Pan  Motor PID"
 2209      54204B49 
 2209      50202020 
 2209      20202020 
 2209      20202020 
 2210 1163 204B6929 		.ascii	" Ki)\015\000"
 2210      0D00
 2211 1169 000000   		.align	2
 2212              	.LC176:
 2213 116c 20205345 		.ascii	"  SET KIT           <kivalue>  (Sets Tilt Motor PID"
 2213      54204B49 
 2213      54202020 
 2213      20202020 
 2213      20202020 
 2214 119f 204B6929 		.ascii	" Ki)\015\000"
 2214      0D00
 2215 11a5 000000   		.align	2
 2216              	.LC177:
 2217 11a8 20205345 		.ascii	"  SET KSIP          <ksivalue> (Sets Pan  Motor PID"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 62


 2217      54204B53 
 2217      49502020 
 2217      20202020 
 2217      20202020 
 2218 11db 204B7369 		.ascii	" Ksi)\015\000"
 2218      290D00
 2219 11e2 0000     		.align	2
 2220              	.LC178:
 2221 11e4 20205345 		.ascii	"  SET KSIT          <ksivalue> (Sets Tilt Motor PID"
 2221      54204B53 
 2221      49542020 
 2221      20202020 
 2221      20202020 
 2222 1217 204B7369 		.ascii	" Ksi)\015\000"
 2222      290D00
 2223 121e 0000     		.align	2
 2224              	.LC179:
 2225 1220 20205345 		.ascii	"  SET L[IMIT]CP     <onoff>    (Sets Pan  Motor Lim"
 2225      54204C5B 
 2225      494D4954 
 2225      5D435020 
 2225      20202020 
 2226 1253 69742043 		.ascii	"it Control)\015\000"
 2226      6F6E7472 
 2226      6F6C290D 
 2226      00
 2227              		.align	2
 2228              	.LC180:
 2229 1260 20205345 		.ascii	"  SET L[IMIT]CT     <onoff>    (Sets Tilt Motor Lim"
 2229      54204C5B 
 2229      494D4954 
 2229      5D435420 
 2229      20202020 
 2230 1293 69742043 		.ascii	"it Control)\015\000"
 2230      6F6E7472 
 2230      6F6C290D 
 2230      00
 2231              		.align	2
 2232              	.LC181:
 2233 12a0 20205345 		.ascii	"  SET INV[ABS]P     <onoff>    (Pan  Absolute Senso"
 2233      5420494E 
 2233      565B4142 
 2233      535D5020 
 2233      20202020 
 2234 12d3 7220496E 		.ascii	"r Invertion)\015\000"
 2234      76657274 
 2234      696F6E29 
 2234      0D00
 2235 12e1 000000   		.align	2
 2236              	.LC182:
 2237 12e4 20205345 		.ascii	"  SET RATIO[ABS]P   <ratio>    (Pan  Absolute Senso"
 2237      54205241 
 2237      54494F5B 
 2237      4142535D 
 2237      50202020 
 2238 1317 72206F76 		.ascii	"r over Encoder Ratio)\015\000"
 2238      65722045 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 63


 2238      6E636F64 
 2238      65722052 
 2238      6174696F 
 2239 132e 0000     		.align	2
 2240              	.LC183:
 2241 1330 20205345 		.ascii	"  SET Z[EROABS]P               (Pan  Absolute Senso"
 2241      54205A5B 
 2241      45524F41 
 2241      42535D50 
 2241      20202020 
 2242 1363 72205A65 		.ascii	"r Zero calc procedure)\015\000"
 2242      726F2063 
 2242      616C6320 
 2242      70726F63 
 2242      65647572 
 2243 137b 00       		.align	2
 2244              	.LC184:
 2245 137c 20205345 		.ascii	"  SET L[IMIT]MINP              (Pan  Absolute Senso"
 2245      54204C5B 
 2245      494D4954 
 2245      5D4D494E 
 2245      50202020 
 2246 13af 72204C69 		.ascii	"r Limit MIN calc procedure)\015\000"
 2246      6D697420 
 2246      4D494E20 
 2246      63616C63 
 2246      2070726F 
 2247              		.align	2
 2248              	.LC185:
 2249 13cc 20205345 		.ascii	"  SET L[IMIT]MAXP              (Pan  Absolute Senso"
 2249      54204C5B 
 2249      494D4954 
 2249      5D4D4158 
 2249      50202020 
 2250 13ff 72204C69 		.ascii	"r Limit MAX calc procedure)\015\000"
 2250      6D697420 
 2250      4D415820 
 2250      63616C63 
 2250      2070726F 
 2251              		.align	2
 2252              	.LC186:
 2253 141c 20205345 		.ascii	"  SET L[IMIT]HYSTP  <hyst>     (Pan  Absolute Senso"
 2253      54204C5B 
 2253      494D4954 
 2253      5D485953 
 2253      54502020 
 2254 144f 72204C69 		.ascii	"r Limit Hysteresis)\015\000"
 2254      6D697420 
 2254      48797374 
 2254      65726573 
 2254      6973290D 
 2255              		.align	2
 2256              	.LC187:
 2257 1464 20205345 		.ascii	"  SET INV[ABS]T     <onoff>    (Tilt Absolute Senso"
 2257      5420494E 
 2257      565B4142 
 2257      535D5420 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 64


 2257      20202020 
 2258 1497 7220496E 		.ascii	"r Invertion)\015\000"
 2258      76657274 
 2258      696F6E29 
 2258      0D00
 2259 14a5 000000   		.align	2
 2260              	.LC188:
 2261 14a8 20205345 		.ascii	"  SET RATIO[ABS]T   <ratio>    (Tilt Absolute Senso"
 2261      54205241 
 2261      54494F5B 
 2261      4142535D 
 2261      54202020 
 2262 14db 72206F76 		.ascii	"r over Encoder Ratio)\015\000"
 2262      65722045 
 2262      6E636F64 
 2262      65722052 
 2262      6174696F 
 2263 14f2 0000     		.align	2
 2264              	.LC189:
 2265 14f4 20205345 		.ascii	"  SET Z[EROABS]T               (Tilt Absolute Senso"
 2265      54205A5B 
 2265      45524F41 
 2265      42535D54 
 2265      20202020 
 2266 1527 72205A65 		.ascii	"r Zero calc procedure)\015\000"
 2266      726F2063 
 2266      616C6320 
 2266      70726F63 
 2266      65647572 
 2267 153f 00       		.align	2
 2268              	.LC190:
 2269 1540 20205345 		.ascii	"  SET L[IMIT]MINT              (Tilt Absolute Senso"
 2269      54204C5B 
 2269      494D4954 
 2269      5D4D494E 
 2269      54202020 
 2270 1573 72204C69 		.ascii	"r Limit MIN calc procedure)\015\000"
 2270      6D697420 
 2270      4D494E20 
 2270      63616C63 
 2270      2070726F 
 2271              		.align	2
 2272              	.LC191:
 2273 1590 20205345 		.ascii	"  SET L[IMIT]MAXT              (Tilt Absolute Senso"
 2273      54204C5B 
 2273      494D4954 
 2273      5D4D4158 
 2273      54202020 
 2274 15c3 72204C69 		.ascii	"r Limit MAX calc procedure)\015\000"
 2274      6D697420 
 2274      4D415820 
 2274      63616C63 
 2274      2070726F 
 2275              		.align	2
 2276              	.LC192:
 2277 15e0 20205345 		.ascii	"  SET L[IMIT]HYSTT  <hyst>     (Tilt Absolute Senso"
 2277      54204C5B 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 65


 2277      494D4954 
 2277      5D485953 
 2277      54542020 
 2278 1613 72204C69 		.ascii	"r Limit Hysteresis)\015\000"
 2278      6D697420 
 2278      48797374 
 2278      65726573 
 2278      6973290D 
 2279              		.align	2
 2280              	.LC193:
 2281 1628 20205345 		.ascii	"  SET Q|SHOT        <qn> <qm>  (Axis positions Q(SH"
 2281      5420517C 
 2281      53484F54 
 2281      20202020 
 2281      20202020 
 2282 165b 4F542920 		.ascii	"OT) number <qn>  into memory <qm>)\015\000"
 2282      6E756D62 
 2282      6572203C 
 2282      716E3E20 
 2282      20696E74 
 2283 167f 00       		.align	2
 2284              	.LC194:
 2285 1680 20205345 		.ascii	"  SET A[NAOUT]AXIS  <axis>     (Analog Output Axis "
 2285      5420415B 
 2285      4E414F55 
 2285      545D4158 
 2285      49532020 
 2286 16b3 53656C65 		.ascii	"Select)\015\000"
 2286      6374290D 
 2286      00
 2287              		.align	2
 2288              	.LC195:
 2289 16bc 20205345 		.ascii	"  SET AS[TIM]TYPE   <astype>   (Motors Autostimolus"
 2289      54204153 
 2289      5B54494D 
 2289      5D545950 
 2289      45202020 
 2290 16ef 20547970 		.ascii	" Type: VOLATILE!)\015\000"
 2290      653A2056 
 2290      4F4C4154 
 2290      494C4521 
 2290      290D00
 2291 1702 0000     		.align	2
 2292              	.LC196:
 2293 1704 20205345 		.ascii	"  SET ASTIMP        <onoff>    (Pan  Motor Autostim"
 2293      54204153 
 2293      54494D50 
 2293      20202020 
 2293      20202020 
 2294 1737 6F6C6F75 		.ascii	"olous on-off: VOLATILE!)\015\000"
 2294      73206F6E 
 2294      2D6F6666 
 2294      3A20564F 
 2294      4C415449 
 2295 1751 000000   		.align	2
 2296              	.LC197:
 2297 1754 20205345 		.ascii	"  SET KOPFP         <kofvalue> (Pan  Motor Autostim"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 66


 2297      54204B4F 
 2297      50465020 
 2297      20202020 
 2297      20202020 
 2298 1787 6F6C7573 		.ascii	"olus Input Gain)\015\000"
 2298      20496E70 
 2298      75742047 
 2298      61696E29 
 2298      0D00
 2299 1799 000000   		.align	2
 2300              	.LC198:
 2301 179c 20205345 		.ascii	"  SET AGAINP        <anagain>  (Pan  Motor Analog O"
 2301      54204147 
 2301      41494E50 
 2301      20202020 
 2301      20202020 
 2302 17cf 75747075 		.ascii	"utput Gain)\015\000"
 2302      74204761 
 2302      696E290D 
 2302      00
 2303              		.align	2
 2304              	.LC199:
 2305 17dc 20205345 		.ascii	"  SET COLORP        <color>    (Pan  Motor Analog O"
 2305      5420434F 
 2305      4C4F5250 
 2305      20202020 
 2305      20202020 
 2306 180f 75747075 		.ascii	"utput Mux)\015\000"
 2306      74204D75 
 2306      78290D00 
 2307 181b 00       		.align	2
 2308              	.LC200:
 2309 181c 20205345 		.ascii	"  SET ASTIMT        <onoff>    (Tilt Motor Autostim"
 2309      54204153 
 2309      54494D54 
 2309      20202020 
 2309      20202020 
 2310 184f 6F6C6F75 		.ascii	"olous on-off: VOLATILE!)\015\000"
 2310      73206F6E 
 2310      2D6F6666 
 2310      3A20564F 
 2310      4C415449 
 2311 1869 000000   		.align	2
 2312              	.LC201:
 2313 186c 20205345 		.ascii	"  SET KOPFT         <kofvalue> (Tilt Motor Autostim"
 2313      54204B4F 
 2313      50465420 
 2313      20202020 
 2313      20202020 
 2314 189f 6F6C7573 		.ascii	"olus Input Gain)\015\000"
 2314      20496E70 
 2314      75742047 
 2314      61696E29 
 2314      0D00
 2315 18b1 000000   		.align	2
 2316              	.LC202:
 2317 18b4 20205345 		.ascii	"  SET AGAINT        <anagain>  (Tilt Motor Analog O"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 67


 2317      54204147 
 2317      41494E54 
 2317      20202020 
 2317      20202020 
 2318 18e7 75747075 		.ascii	"utput Gain)\015\000"
 2318      74204761 
 2318      696E290D 
 2318      00
 2319              		.align	2
 2320              	.LC203:
 2321 18f4 20205345 		.ascii	"  SET COLORT        <color>    (Tilt Motor Analog O"
 2321      5420434F 
 2321      4C4F5254 
 2321      20202020 
 2321      20202020 
 2322 1927 75747075 		.ascii	"utput Mux)\015\000"
 2322      74204D75 
 2322      78290D00 
 2323 1933 00       		.align	2
 2324              	.LC204:
 2325 1934 20205345 		.ascii	"  SET GAMMA         <avalue>   (IMU Euler Angles Lo"
 2325      54204741 
 2325      4D4D4120 
 2325      20202020 
 2325      20202020 
 2326 1967 77205061 		.ascii	"w Pass Filter)\015\000"
 2326      73732046 
 2326      696C7465 
 2326      72290D00 
 2327 1977 00       		.align	2
 2328              	.LC205:
 2329 1978 20205345 		.ascii	"  SET IMU[INV]Y[AW] <onoff>    (IMU Yaw   Euler Ang"
 2329      5420494D 
 2329      555B494E 
 2329      565D595B 
 2329      41575D20 
 2330 19ab 6C652049 		.ascii	"le Invertion)\015\000"
 2330      6E766572 
 2330      74696F6E 
 2330      290D00
 2331 19ba 0000     		.align	2
 2332              	.LC206:
 2333 19bc 20205345 		.ascii	"  SET IMU[INV]P[ITCH]<onoff>   (IMU Pitch Euler Ang"
 2333      5420494D 
 2333      555B494E 
 2333      565D505B 
 2333      49544348 
 2334 19ef 6C652049 		.ascii	"le Invertion)\015\000"
 2334      6E766572 
 2334      74696F6E 
 2334      290D00
 2335 19fe 0000     		.align	2
 2336              	.LC207:
 2337 1a00 20205345 		.ascii	"  SET IMU[INV]R[OLL] <onoff>   (IMU Roll  Euler Ang"
 2337      5420494D 
 2337      555B494E 
 2337      565D525B 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 68


 2337      4F4C4C5D 
 2338 1a33 6C652049 		.ascii	"le Invertion)\015\000"
 2338      6E766572 
 2338      74696F6E 
 2338      290D00
 2339 1a42 0000     		.align	2
 2340              	.LC208:
 2341 1a44 20205345 		.ascii	"  SET PREX[CHANGE]  <onoff>    (IMU Pitch-Roll Eule"
 2341      54205052 
 2341      45585B43 
 2341      48414E47 
 2341      455D2020 
 2342 1a77 7220416E 		.ascii	"r Angle Exchange)\015\000"
 2342      676C6520 
 2342      45786368 
 2342      616E6765 
 2342      290D00
 2343 1a8a 0000     		.align	2
 2344              	.LC209:
 2345 1a8c 20205345 		.ascii	"  SET BETA          <avalue>   (Analog Acceleromete"
 2345      54204245 
 2345      54412020 
 2345      20202020 
 2345      20202020 
 2346 1abf 72204C6F 		.ascii	"r Low Pass Filter)\015\000"
 2346      77205061 
 2346      73732046 
 2346      696C7465 
 2346      72290D00 
 2347 1ad3 00       		.align	2
 2348              	.LC210:
 2349 1ad4 20205345 		.ascii	"  SET AACXOF[FSET]  <offset>   (Analog Acceleromete"
 2349      54204141 
 2349      43584F46 
 2349      5B465345 
 2349      545D2020 
 2350 1b07 72204178 		.ascii	"r Axis X ADC Offset)\015\000"
 2350      69732058 
 2350      20414443 
 2350      204F6666 
 2350      73657429 
 2351 1b1d 000000   		.align	2
 2352              	.LC211:
 2353 1b20 20205345 		.ascii	"  SET AACYOF[FSET]  <offset>   (Analog Acceleromete"
 2353      54204141 
 2353      43594F46 
 2353      5B465345 
 2353      545D2020 
 2354 1b53 72204178 		.ascii	"r Axis Y ADC Offset)\015\000"
 2354      69732059 
 2354      20414443 
 2354      204F6666 
 2354      73657429 
 2355 1b69 000000   		.align	2
 2356              	.LC212:
 2357 1b6c 20205345 		.ascii	"  SET AACZOF[FSET]  <offset>   (Analog Acceleromete"
 2357      54204141 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 69


 2357      435A4F46 
 2357      5B465345 
 2357      545D2020 
 2358 1b9f 72204178 		.ascii	"r Axis Z ADC Offset)\015\000"
 2358      6973205A 
 2358      20414443 
 2358      204F6666 
 2358      73657429 
 2359 1bb5 000000   		.align	2
 2360              	.LC213:
 2361 1bb8 20205345 		.ascii	"  SET JUMPTH        <avalue>   (EVENT PARAMETER: Ju"
 2361      54204A55 
 2361      4D505448 
 2361      20202020 
 2361      20202020 
 2362 1beb 6D702047 		.ascii	"mp G Threshold)\015\000"
 2362      20546872 
 2362      6573686F 
 2362      6C64290D 
 2362      00
 2363              		.align	2
 2364              	.LC214:
 2365 1bfc 20205345 		.ascii	"  SET ACCTH         <avalue>   (EVENT PARAMETER: Ac"
 2365      54204143 
 2365      43544820 
 2365      20202020 
 2365      20202020 
 2366 1c2f 63656C65 		.ascii	"celeration G Threshold)\015\000"
 2366      72617469 
 2366      6F6E2047 
 2366      20546872 
 2366      6573686F 
 2367              		.align	2
 2368              	.LC215:
 2369 1c48 20205345 		.ascii	"  SET DIR[ECTOR]    <director> (Director Style)\015"
 2369      54204449 
 2369      525B4543 
 2369      544F525D 
 2369      20202020 
 2370 1c78 00       		.ascii	"\000"
 2371 1c79 000000   		.align	2
 2372              	.LC216:
 2373 1c7c 20205345 		.ascii	"  SET MODE          <mode>     (Machine Mode)\015\000"
 2373      54204D4F 
 2373      44452020 
 2373      20202020 
 2373      20202020 
 2374 1cab 00       		.align	2
 2375              	.LC217:
 2376 1cac 20203C70 		.ascii	"  <polarity>   = 0..1 [true | invert]\015\000"
 2376      6F6C6172 
 2376      6974793E 
 2376      2020203D 
 2376      20302E2E 
 2377 1cd3 00       		.align	2
 2378              	.LC218:
 2379 1cd4 20203C6B 		.ascii	"  <kpvalue>    = 0..100     (float n.m)\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 70


 2379      7076616C 
 2379      75653E20 
 2379      2020203D 
 2379      20302E2E 
 2380 1cfd 000000   		.align	2
 2381              	.LC219:
 2382 1d00 20203C6B 		.ascii	"  <kdvalue>    = 0..1000    (float n.m)\015\000"
 2382      6476616C 
 2382      75653E20 
 2382      2020203D 
 2382      20302E2E 
 2383 1d29 000000   		.align	2
 2384              	.LC220:
 2385 1d2c 20203C6B 		.ascii	"  <kivalue>    = 0..100     (float n.m)\015\000"
 2385      6976616C 
 2385      75653E20 
 2385      2020203D 
 2385      20302E2E 
 2386 1d55 000000   		.align	2
 2387              	.LC221:
 2388 1d58 20203C6B 		.ascii	"  <ksivalue>   = 0..1000000 (float n.m)\015\000"
 2388      73697661 
 2388      6C75653E 
 2388      2020203D 
 2388      20302E2E 
 2389 1d81 000000   		.align	2
 2390              	.LC222:
 2391 1d84 20203C64 		.ascii	"  <dbvalue>    = 0..1000    (float n.m)\015\000"
 2391      6276616C 
 2391      75653E20 
 2391      2020203D 
 2391      20302E2E 
 2392 1dad 000000   		.align	2
 2393              	.LC223:
 2394 1db0 20203C6B 		.ascii	"  <kofvalue>   = 0..10      (float n.m)\015\000"
 2394      6F667661 
 2394      6C75653E 
 2394      2020203D 
 2394      20302E2E 
 2395 1dd9 000000   		.align	2
 2396              	.LC224:
 2397 1ddc 20203C61 		.ascii	"  <anagain>    = -1000..1000  (float n.m)\015\000"
 2397      6E616761 
 2397      696E3E20 
 2397      2020203D 
 2397      202D3130 
 2398 1e07 00       		.align	2
 2399              	.LC225:
 2400 1e08 20203C61 		.ascii	"  <astype>     = 0(no astim), 1(sine), 2(triangle),"
 2400      73747970 
 2400      653E2020 
 2400      2020203D 
 2400      2030286E 
 2401 1e3b 20332873 		.ascii	" 3(square)\015\000"
 2401      71756172 
 2401      65290D00 
 2402 1e47 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 71


 2403              	.LC226:
 2404 1e48 20203C63 		.ascii	"  <color>      = 0(gyro rate), 1(enc pos), 2(enc ve"
 2404      6F6C6F72 
 2404      3E202020 
 2404      2020203D 
 2404      20302867 
 2405 1e7b 6C292C20 		.ascii	"l), 3(astim), 4(e(t)), 5(d_e(t)/dt),\015\000"
 2405      33286173 
 2405      74696D29 
 2405      2C203428 
 2405      65287429 
 2406 1ea1 000000   		.align	2
 2407              	.LC227:
 2408 1ea4 20202020 		.ascii	"                 6(int_e(t)), 7(Ki*int_e(t)), 8(cv("
 2408      20202020 
 2408      20202020 
 2408      20202020 
 2408      20362869 
 2409 1ed7 7429290D 		.ascii	"t))\015\000"
 2409      00
 2410              		.align	2
 2411              	.LC228:
 2412 1edc 20203C61 		.ascii	"  <axis>       = [PAN | TILT]\015\000"
 2412      7869733E 
 2412      20202020 
 2412      2020203D 
 2412      205B5041 
 2413 1efb 00       		.align	2
 2414              	.LC229:
 2415 1efc 20203C61 		.ascii	"  <avalue>     = 0 .. 1 (float n.m)\015\000"
 2415      76616C75 
 2415      653E2020 
 2415      2020203D 
 2415      2030202E 
 2416 1f21 000000   		.align	2
 2417              	.LC230:
 2418 1f24 20203C6F 		.ascii	"  <onoff>      = 0 .. 1 [off | on]\015\000"
 2418      6E6F6666 
 2418      3E202020 
 2418      2020203D 
 2418      2030202E 
 2419              		.align	2
 2420              	.LC231:
 2421 1f48 20203C6D 		.ascii	"  <mode>       = 0(REMOTE CONTROL), 1(DIRECTOR)\015"
 2421      6F64653E 
 2421      20202020 
 2421      2020203D 
 2421      20302852 
 2422 1f78 00       		.ascii	"\000"
 2423 1f79 000000   		.align	2
 2424              	.LC232:
 2425 1f7c 20203C71 		.ascii	"  <qn>         = 0..99\015\000"
 2425      6E3E2020 
 2425      20202020 
 2425      2020203D 
 2425      20302E2E 
 2426              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 72


 2427              	.LC233:
 2428 1f94 20203C71 		.ascii	"  <qm>         = 0..32 (\"clear\" or \"c\" to clear"
 2428      6D3E2020 
 2428      20202020 
 2428      2020203D 
 2428      20302E2E 
 2429 1fc3 2051206D 		.ascii	" Q memory)\015\000"
 2429      656D6F72 
 2429      79290D00 
 2430 1fcf 00       		.align	2
 2431              	.LC234:
 2432 1fd0 20203C64 		.ascii	"  <director>   = 0(Kubrick), 1(Hitchcock), 2(De Pal"
 2432      69726563 
 2432      746F723E 
 2432      2020203D 
 2432      2030284B 
 2433 2003 6D61292C 		.ascii	"ma), 3(Chaplin), 4(Linch), 5(Coppola)\015\000"
 2433      20332843 
 2433      6861706C 
 2433      696E292C 
 2433      2034284C 
 2434 202a 0000     		.align	2
 2435              	.LC235:
 2436 202c 20202020 		.ascii	"                 6(Scorsese), 7(Tarantino), 8(Scott"
 2436      20202020 
 2436      20202020 
 2436      20202020 
 2436      20362853 
 2437 205f 292C2039 		.ascii	"), 9(Leone), 10(Spielberg), 11(Burton)\015\000"
 2437      284C656F 
 2437      6E65292C 
 2437      20313028 
 2437      53706965 
 2438 2087 00       		.align	2
 2439              	.LC236:
 2440 2088 20202020 		.ascii	"                 12(Craven), 13(Fellini), 14(Ford),"
 2440      20202020 
 2440      20202020 
 2440      20202020 
 2440      20313228 
 2441 20bb 20313528 		.ascii	" 15(Nolan), 16(Del Toro), 17(Lucas), 18(Abrams)\015"
 2441      4E6F6C61 
 2441      6E292C20 
 2441      31362844 
 2441      656C2054 
 2442 20eb 00       		.ascii	"\000"
 2443              		.align	2
 2444              	.LC237:
 2445 20ec 73686F77 		.ascii	"show\000"
 2445      00
 2446 20f1 000000   		.align	2
 2447              	.LC238:
 2448 20f4 20205348 		.ascii	"  SHOW [P | PARAMS]      (All GoBee Parameters)\015"
 2448      4F57205B 
 2448      50207C20 
 2448      50415241 
 2448      4D535D20 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 73


 2449 2124 00       		.ascii	"\000"
 2450 2125 000000   		.align	2
 2451              	.LC239:
 2452 2128 20204641 		.ascii	"  FAULT[S]               (System Faults or Warnings"
 2452      554C545B 
 2452      535D2020 
 2452      20202020 
 2452      20202020 
 2453 215b 290D00   		.ascii	")\015\000"
 2454 215e 0000     		.align	2
 2455              	.LC240:
 2456 2160 20205348 		.ascii	"  SHOW BUT[TON]          (SW1 pushbutton state) \015"
 2456      4F572042 
 2456      55545B54 
 2456      4F4E5D20 
 2456      20202020 
 2457 2191 00       		.ascii	"\000"
 2458 2192 0000     		.align	2
 2459              	.LC241:
 2460 2194 20205348 		.ascii	"  SHOW ANA[LOGS]         (Analog Inputs as sampled "
 2460      4F572041 
 2460      4E415B4C 
 2460      4F47535D 
 2460      20202020 
 2461 21c7 62792041 		.ascii	"by ADC)\015\000"
 2461      4443290D 
 2461      00
 2462              		.align	2
 2463              	.LC242:
 2464 21d0 20205348 		.ascii	"  SHOW A[NALOG]ACC       (Bike Frame Analog Acceler"
 2464      4F572041 
 2464      5B4E414C 
 2464      4F475D41 
 2464      43432020 
 2465 2203 6F6D6574 		.ascii	"ometer Values)\015\000"
 2465      65722056 
 2465      616C7565 
 2465      73290D00 
 2466 2213 00       		.align	2
 2467              	.LC243:
 2468 2214 20205348 		.ascii	"  SHOW BIKE[ANGLES]      (BIKE Frame Euler Angles)\015"
 2468      4F572042 
 2468      494B455B 
 2468      414E474C 
 2468      45535D20 
 2469 2247 00       		.ascii	"\000"
 2470              		.align	2
 2471              	.LC244:
 2472 2248 20205348 		.ascii	"  SHOW S[YS]DYN          (Real Time System Dynamic "
 2472      4F572053 
 2472      5B59535D 
 2472      44594E20 
 2472      20202020 
 2473 227b 5363616C 		.ascii	"Scalar Value)\015\000"
 2473      61722056 
 2473      616C7565 
 2473      290D00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 74


 2474 228a 0000     		.align	2
 2475              	.LC245:
 2476 228c 20205348 		.ascii	"  SHOW POS[ITION]        (Real Time relative and ab"
 2476      4F572050 
 2476      4F535B49 
 2476      54494F4E 
 2476      5D202020 
 2477 22bf 736F6C75 		.ascii	"solute position Values)\015\000"
 2477      74652070 
 2477      6F736974 
 2477      696F6E20 
 2477      56616C75 
 2478              		.align	2
 2479              	.LC246:
 2480 22d8 20205348 		.ascii	"  SHOW ENCF[BK]          (Real Time Feedback Encode"
 2480      4F572045 
 2480      4E43465B 
 2480      424B5D20 
 2480      20202020 
 2481 230b 7273290D 		.ascii	"rs)\015\000"
 2481      00
 2482              		.align	2
 2483              	.LC247:
 2484 2310 20205348 		.ascii	"  SHOW P[AN]LIM[ITS]     (Real Time Pan  Limits Ela"
 2484      4F572050 
 2484      5B414E5D 
 2484      4C494D5B 
 2484      4954535D 
 2485 2343 626F7261 		.ascii	"boration)\015\000"
 2485      74696F6E 
 2485      290D00
 2486 234e 0000     		.align	2
 2487              	.LC248:
 2488 2350 20205348 		.ascii	"  SHOW T[ILT]LIM[ITS]    (Real Time Tilt Limits Ela"
 2488      4F572054 
 2488      5B494C54 
 2488      5D4C494D 
 2488      5B495453 
 2489 2383 626F7261 		.ascii	"boration)\015\000"
 2489      74696F6E 
 2489      290D00
 2490 238e 0000     		.align	2
 2491              	.LC249:
 2492 2390 20205348 		.ascii	"  SHOW RATIO[ABS]P       (Pan  Encoder-Absolute Sen"
 2492      4F572052 
 2492      4154494F 
 2492      5B414253 
 2492      5D502020 
 2493 23c3 736F7220 		.ascii	"sor ratio r=reset; s=set; e=save)\015\000"
 2493      72617469 
 2493      6F20723D 
 2493      72657365 
 2493      743B2073 
 2494 23e6 0000     		.align	2
 2495              	.LC250:
 2496 23e8 20205348 		.ascii	"  SHOW RATIO[ABS]T       (Tilt Encoder-Absolute Sen"
 2496      4F572052 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 75


 2496      4154494F 
 2496      5B414253 
 2496      5D542020 
 2497 241b 736F7220 		.ascii	"sor ratio r=reset; s=set; e=save)\015\000"
 2497      72617469 
 2497      6F20723D 
 2497      72657365 
 2497      743B2073 
 2498 243e 0000     		.align	2
 2499              	.LC251:
 2500 2440 20205348 		.ascii	"  SHOW PABS[STATS]       (Pan  Absolute Sensor Stat"
 2500      4F572050 
 2500      4142535B 
 2500      53544154 
 2500      535D2020 
 2501 2473 69737469 		.ascii	"istics results)\015\000"
 2501      63732072 
 2501      6573756C 
 2501      7473290D 
 2501      00
 2502              		.align	2
 2503              	.LC252:
 2504 2484 20205348 		.ascii	"  SHOW TABS[STATS]       (Tilt Absolute Sensor Stat"
 2504      4F572054 
 2504      4142535B 
 2504      53544154 
 2504      535D2020 
 2505 24b7 69737469 		.ascii	"istics results)\015\000"
 2505      63732072 
 2505      6573756C 
 2505      7473290D 
 2505      00
 2506              		.align	2
 2507              	.LC253:
 2508 24c8 20205348 		.ascii	"  SHOW MOT[ORSTATUS]     (Motor Status - Current OK"
 2508      4F57204D 
 2508      4F545B4F 
 2508      52535441 
 2508      5455535D 
 2509 24fb 206F7220 		.ascii	" or PEAK)\015\000"
 2509      5045414B 
 2509      290D00
 2510 2506 0000     		.align	2
 2511              	.LC254:
 2512 2508 20205348 		.ascii	"  SHOW CURRENT|I         (Motor Currents [mA])\015\000"
 2512      4F572043 
 2512      55525245 
 2512      4E547C49 
 2512      20202020 
 2513              		.align	2
 2514              	.LC255:
 2515 2538 20205348 		.ascii	"  SHOW PMT[ORQUE]        (Real Time Pan  Motor  Tor"
 2515      4F572050 
 2515      4D545B4F 
 2515      52515545 
 2515      5D202020 
 2516 256b 71756520 		.ascii	"que Statistics)\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 76


 2516      53746174 
 2516      69737469 
 2516      6373290D 
 2516      00
 2517              		.align	2
 2518              	.LC256:
 2519 257c 20205348 		.ascii	"  SHOW POT[ORQUE]        (Real Time Pan  Output Tor"
 2519      4F572050 
 2519      4F545B4F 
 2519      52515545 
 2519      5D202020 
 2520 25af 71756520 		.ascii	"que Statistics)\015\000"
 2520      53746174 
 2520      69737469 
 2520      6373290D 
 2520      00
 2521              		.align	2
 2522              	.LC257:
 2523 25c0 20205348 		.ascii	"  SHOW PMP[OWER]         (Real Time Pan  Motor  Ero"
 2523      4F572050 
 2523      4D505B4F 
 2523      5745525D 
 2523      20202020 
 2524 25f3 67617465 		.ascii	"gated Power Statistics)\015\000"
 2524      6420506F 
 2524      77657220 
 2524      53746174 
 2524      69737469 
 2525              		.align	2
 2526              	.LC258:
 2527 260c 20205348 		.ascii	"  SHOW TMT[ORQUE]        (Real Time Tilt Motor  Tor"
 2527      4F572054 
 2527      4D545B4F 
 2527      52515545 
 2527      5D202020 
 2528 263f 71756520 		.ascii	"que Statistics)\015\000"
 2528      53746174 
 2528      69737469 
 2528      6373290D 
 2528      00
 2529              		.align	2
 2530              	.LC259:
 2531 2650 20205348 		.ascii	"  SHOW TOT[ORQUE]        (Real Time Tilt Output Tor"
 2531      4F572054 
 2531      4F545B4F 
 2531      52515545 
 2531      5D202020 
 2532 2683 71756520 		.ascii	"que Statistics)\015\000"
 2532      53746174 
 2532      69737469 
 2532      6373290D 
 2532      00
 2533              		.align	2
 2534              	.LC260:
 2535 2694 20205348 		.ascii	"  SHOW TMP[OWER]         (Real Time Tilt Motor  Ero"
 2535      4F572054 
 2535      4D505B4F 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 77


 2535      5745525D 
 2535      20202020 
 2536 26c7 67617465 		.ascii	"gated Power Statistics)\015\000"
 2536      6420506F 
 2536      77657220 
 2536      53746174 
 2536      69737469 
 2537              		.align	2
 2538              	.LC261:
 2539 26e0 20205348 		.ascii	"  SHOW VCC               (Input Power Voltage)\015\000"
 2539      4F572056 
 2539      43432020 
 2539      20202020 
 2539      20202020 
 2540              		.align	2
 2541              	.LC262:
 2542 2710 20205348 		.ascii	"  SHOW [CONTROL|CTRL]    (Real Time Control Loop Va"
 2542      4F57205B 
 2542      434F4E54 
 2542      524F4C7C 
 2542      4354524C 
 2543 2743 6C756573 		.ascii	"lues)\015\000"
 2543      290D00
 2544 274a 0000     		.align	2
 2545              	.LC263:
 2546 274c 20205348 		.ascii	"  SHOW ASTIM             (Real Time Autostimolus Va"
 2546      4F572041 
 2546      5354494D 
 2546      20202020 
 2546      20202020 
 2547 277f 6C756573 		.ascii	"lues)\015\000"
 2547      290D00
 2548 2786 0000     		.align	2
 2549              	.LC264:
 2550 2788 20205348 		.ascii	"  SHOW PA[TH]  <n>       (Path Trapezoid Values [n="
 2550      4F572050 
 2550      415B5448 
 2550      5D20203C 
 2550      6E3E2020 
 2551 27bb 302E2E31 		.ascii	"0..15])\015\000"
 2551      355D290D 
 2551      00
 2552              		.align	2
 2553              	.LC265:
 2554 27c4 20205348 		.ascii	"  SHOW MOV[ER] <n>       (Rendering Values of Path "
 2554      4F57204D 
 2554      4F565B45 
 2554      525D203C 
 2554      6E3E2020 
 2555 27f7 6E205B6E 		.ascii	"n [n=0..15])\015\000"
 2555      3D302E2E 
 2555      31355D29 
 2555      0D00
 2556 2805 000000   		.align	2
 2557              	.LC266:
 2558 2808 20205348 		.ascii	"  SHOW MOVERS            (Real time Pan and Tilt Mo"
 2558      4F57204D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 78


 2558      4F564552 
 2558      53202020 
 2558      20202020 
 2559 283b 76657273 		.ascii	"vers Values)\015\000"
 2559      2056616C 
 2559      75657329 
 2559      0D00
 2560 2849 000000   		.align	2
 2561              	.LC267:
 2562 284c 20205348 		.ascii	"  SHOW CLU     <clu_num> (CLU GML definition [clu_n"
 2562      4F572043 
 2562      4C552020 
 2562      2020203C 
 2562      636C755F 
 2563 287f 756D3D30 		.ascii	"um=0..49])\015\000"
 2563      2E2E3439 
 2563      5D290D00 
 2564 288b 00       		.align	2
 2565              	.LC268:
 2566 288c 20205348 		.ascii	"  SHOW Q|SHOT  <n>       (Axis positions Q(SHOT) nu"
 2566      4F572051 
 2566      7C53484F 
 2566      5420203C 
 2566      6E3E2020 
 2567 28bf 6D626572 		.ascii	"mber <n> or <all>)\015\000"
 2567      203C6E3E 
 2567      206F7220 
 2567      3C616C6C 
 2567      3E290D00 
 2568 28d3 00       		.align	2
 2569              	.LC269:
 2570 28d4 20205348 		.ascii	"  SHOW CLUSM             (CLU Execution State Machi"
 2570      4F572043 
 2570      4C55534D 
 2570      20202020 
 2570      20202020 
 2571 2907 6E65290D 		.ascii	"ne)\015\000"
 2571      00
 2572              		.align	2
 2573              	.LC270:
 2574 290c 20205348 		.ascii	"  SHOW [EVENTS|MAPSM]    (Events & Director's Mappi"
 2574      4F57205B 
 2574      4556454E 
 2574      54537C4D 
 2574      4150534D 
 2575 293f 6E672053 		.ascii	"ng State Machine)\015\000"
 2575      74617465 
 2575      204D6163 
 2575      68696E65 
 2575      290D00
 2576 2952 0000     		.align	2
 2577              	.LC271:
 2578 2954 20202870 		.ascii	"  (press anykey to stop flushing)\015\000"
 2578      72657373 
 2578      20616E79 
 2578      6B657920 
 2578      746F2073 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 79


 2579 2977 00       		.align	2
 2580              	.LC272:
 2581 2978 7100     		.ascii	"q\000"
 2582 297a 0000     		.align	2
 2583              	.LC273:
 2584 297c 51202873 		.ascii	"Q (shot) Table\015\000"
 2584      686F7429 
 2584      20546162 
 2584      6C650D00 
 2585              		.align	2
 2586              	.LC274:
 2587 298c 2D2D2D2D 		.ascii	"--------------\015\000"
 2587      2D2D2D2D 
 2587      2D2D2D2D 
 2587      2D2D0D00 
 2588              		.align	2
 2589              	.LC275:
 2590 299c 5130303A 		.ascii	"Q00: origin\015\000"
 2590      206F7269 
 2590      67696E0D 
 2590      00
 2591 29a9 000000   		.align	2
 2592              	.LC276:
 2593 29ac 5131313A 		.ascii	"Q11: face\015\000"
 2593      20666163 
 2593      650D00
 2594 29b7 00       		.align	2
 2595              	.LC277:
 2596 29b8 5131333A 		.ascii	"Q13: legs\015\000"
 2596      206C6567 
 2596      730D00
 2597 29c3 00       		.align	2
 2598              	.LC278:
 2599 29c4 5131343A 		.ascii	"Q14: hand dx\015\000"
 2599      2068616E 
 2599      64206478 
 2599      0D00
 2600 29d2 0000     		.align	2
 2601              	.LC279:
 2602 29d4 5131353A 		.ascii	"Q15: hand sx\015\000"
 2602      2068616E 
 2602      64207378 
 2602      0D00
 2603 29e2 0000     		.align	2
 2604              	.LC280:
 2605 29e4 5131363A 		.ascii	"Q16: pedal dx\015\000"
 2605      20706564 
 2605      616C2064 
 2605      780D00
 2606 29f3 00       		.align	2
 2607              	.LC281:
 2608 29f4 5131373A 		.ascii	"Q17: pedal sx\015\000"
 2608      20706564 
 2608      616C2073 
 2608      780D00
 2609 2a03 00       		.align	2
 2610              	.LC282:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 80


 2611 2a04 5132313A 		.ascii	"Q21: wheel\015\000"
 2611      20776865 
 2611      656C0D00 
 2612              		.align	2
 2613              	.LC283:
 2614 2a10 5133313A 		.ascii	"Q31: road\015\000"
 2614      20726F61 
 2614      640D00
 2615 2a1b 00       		.align	2
 2616              	.LC284:
 2617 2a1c 5133333A 		.ascii	"Q33: road side dx\015\000"
 2617      20726F61 
 2617      64207369 
 2617      64652064 
 2617      780D00
 2618 2a2f 00       		.align	2
 2619              	.LC285:
 2620 2a30 5133343A 		.ascii	"Q34: road side sx\015\000"
 2620      20726F61 
 2620      64207369 
 2620      64652073 
 2620      780D00
 2621 2a43 00       		.align	2
 2622              	.LC286:
 2623 2a44 5134303A 		.ascii	"Q40: panorama front\015\000"
 2623      2070616E 
 2623      6F72616D 
 2623      61206672 
 2623      6F6E740D 
 2624 2a59 000000   		.align	2
 2625              	.LC287:
 2626 2a5c 5134313A 		.ascii	"Q41: panorama dx\015\000"
 2626      2070616E 
 2626      6F72616D 
 2626      61206478 
 2626      0D00
 2627 2a6e 0000     		.align	2
 2628              	.LC288:
 2629 2a70 5134323A 		.ascii	"Q42: panorama sx\015\000"
 2629      2070616E 
 2629      6F72616D 
 2629      61207378 
 2629      0D00
 2630 2a82 0000     		.align	2
 2631              	.LC289:
 2632 2a84 5134333A 		.ascii	"Q43: panorama dx rear\015\000"
 2632      2070616E 
 2632      6F72616D 
 2632      61206478 
 2632      20726561 
 2633 2a9b 00       		.align	2
 2634              	.LC290:
 2635 2a9c 5134343A 		.ascii	"Q44: panorama sx rear\015\000"
 2635      2070616E 
 2635      6F72616D 
 2635      61207378 
 2635      20726561 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 81


 2636 2ab3 00       		.align	2
 2637              	.LC291:
 2638 2ab4 5135313A 		.ascii	"Q51: sky\015\000"
 2638      20736B79 
 2638      0D00
 2639 2abe 0000     		.align	2
 2640              	.LC292:
 2641 2ac0 5135323A 		.ascii	"Q52: sky sx\015\000"
 2641      20736B79 
 2641      2073780D 
 2641      00
 2642 2acd 000000   		.align	2
 2643              	.LC293:
 2644 2ad0 5135333A 		.ascii	"Q53: sky dx\015\000"
 2644      20736B79 
 2644      2064780D 
 2644      00
 2645 2add 000000   		.align	2
 2646              	.LC294:
 2647 2ae0 74657374 		.ascii	"testdac\000"
 2647      64616300 
 2648              		.align	2
 2649              	.LC295:
 2650 2ae8 54455354 		.ascii	"TESTDAC: tests STEER DAC OUTPUT\015\000"
 2650      4441433A 
 2650      20746573 
 2650      74732053 
 2650      54454552 
 2651 2b09 000000   		.align	2
 2652              	.LC296:
 2653 2b0c 20205445 		.ascii	"  TESTDAC\015\000"
 2653      53544441 
 2653      430D00
 2654 2b17 00       		.align	2
 2655              	.LC297:
 2656 2b18 20205052 		.ascii	"  PROMPT\015\000"
 2656      4F4D5054 
 2656      0D00
 2657 2b22 0000     		.align	2
 2658              	.LC298:
 2659 2b24 20205645 		.ascii	"  VERSION\015\000"
 2659      5253494F 
 2659      4E0D00
 2660 2b2f 00       		.align	2
 2661              	.LC299:
 2662 2b30 2020560D 		.ascii	"  V\015\000"
 2662      00
 2663 2b35 000000   		.align	2
 2664              	.LC300:
 2665 2b38 23455252 		.ascii	"#ERROR3: Bad parameter(s)!\000"
 2665      4F52333A 
 2665      20426164 
 2665      20706172 
 2665      616D6574 
 2666 2b53 00       		.align	2
 2667              	.LC301:
 2668 2b54 7300     		.ascii	"s\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 82


 2669 2b56 0000     		.align	2
 2670              	.LC302:
 2671 2b58 636F6E74 		.ascii	"control\000"
 2671      726F6C00 
 2672              		.align	2
 2673              	.LC303:
 2674 2b60 6374726C 		.ascii	"ctrl\000"
 2674      00
 2675 2b65 000000   		.align	2
 2676              	.LC304:
 2677 2b68 1B5B324A 		.ascii	"\033[2J\000"
 2677      00
 2678 2b6d 000000   		.align	2
 2679              	.LC305:
 2680 2b70 1B5B4800 		.ascii	"\033[H\000"
 2681              		.align	2
 2682              	.LC306:
 2683 2b74 2D2D2D2D 		.ascii	"---------------------------------\015\000"
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2684 2b97 00       		.align	2
 2685              	.LC307:
 2686 2b98 2D2D2D20 		.ascii	"--- GoBee Director RT CONTROL ---\015\000"
 2686      476F4265 
 2686      65204469 
 2686      72656374 
 2686      6F722052 
 2687 2bbb 00       		.align	2
 2688              	.LC308:
 2689 2bbc 61786973 		.ascii	"axis_res(P)=%+1.3f [step/2PI]\000"
 2689      5F726573 
 2689      2850293D 
 2689      252B312E 
 2689      3366205B 
 2690 2bda 0000     		.align	2
 2691              	.LC309:
 2692 2bdc 61786973 		.ascii	"axis_res(T)=%+1.3f [step/2PI]\000"
 2692      5F726573 
 2692      2854293D 
 2692      252B312E 
 2692      3366205B 
 2693              		.global	__aeabi_i2f
 2694 2bfa 0000     		.align	2
 2695              	.LC310:
 2696 2bfc 616E676C 		.ascii	"angle(P)=%+1.4f [deg]\000"
 2696      65285029 
 2696      3D252B31 
 2696      2E346620 
 2696      5B646567 
 2697 2c12 0000     		.align	2
 2698              	.LC311:
 2699 2c14 616E676C 		.ascii	"angle(T)=%+1.4f [deg]\000"
 2699      65285429 
 2699      3D252B31 
 2699      2E346620 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 83


 2699      5B646567 
 2700 2c2a 0000     		.align	2
 2701              	.LC312:
 2702 2c2c 66626B28 		.ascii	"fbk(P)=%+1.4f [step]\000"
 2702      50293D25 
 2702      2B312E34 
 2702      66205B73 
 2702      7465705D 
 2703 2c41 000000   		.align	2
 2704              	.LC313:
 2705 2c44 66626B28 		.ascii	"fbk(T)=%+1.4f [step]\000"
 2705      54293D25 
 2705      2B312E34 
 2705      66205B73 
 2705      7465705D 
 2706 2c59 000000   		.align	2
 2707              	.LC314:
 2708 2c5c 6D617374 		.ascii	"mast_enc(P)=%+1.4f [step]\000"
 2708      5F656E63 
 2708      2850293D 
 2708      252B312E 
 2708      3466205B 
 2709 2c76 0000     		.align	2
 2710              	.LC315:
 2711 2c78 6D617374 		.ascii	"mast_enc(T)=%+1.4f [step]\000"
 2711      5F656E63 
 2711      2854293D 
 2711      252B312E 
 2711      3466205B 
 2712 2c92 0000     		.align	2
 2713              	.LC316:
 2714 2c94 6D617374 		.ascii	"mast_joy(P)=%+1.4f [step]\000"
 2714      5F6A6F79 
 2714      2850293D 
 2714      252B312E 
 2714      3466205B 
 2715 2cae 0000     		.align	2
 2716              	.LC317:
 2717 2cb0 6D617374 		.ascii	"mast_joy(T)=%+1.4f [step]\000"
 2717      5F6A6F79 
 2717      2854293D 
 2717      252B312E 
 2717      3466205B 
 2718 2cca 0000     		.align	2
 2719              	.LC318:
 2720 2ccc 65727228 		.ascii	"err(P)=%+1.4f\000"
 2720      50293D25 
 2720      2B312E34 
 2720      6600
 2721 2cda 0000     		.align	2
 2722              	.LC319:
 2723 2cdc 65727228 		.ascii	"err(T)=%+1.4f\000"
 2723      54293D25 
 2723      2B312E34 
 2723      6600
 2724 2cea 0000     		.align	2
 2725              	.LC320:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 84


 2726 2cec 64657272 		.ascii	"derr(P)=%+1.4f\000"
 2726      2850293D 
 2726      252B312E 
 2726      346600
 2727 2cfb 00       		.align	2
 2728              	.LC321:
 2729 2cfc 64657272 		.ascii	"derr(T)=%+1.4f\000"
 2729      2854293D 
 2729      252B312E 
 2729      346600
 2730 2d0b 00       		.align	2
 2731              	.LC322:
 2732 2d0c 69657272 		.ascii	"ierr(P)=%+1.4f\000"
 2732      2850293D 
 2732      252B312E 
 2732      346600
 2733 2d1b 00       		.align	2
 2734              	.LC323:
 2735 2d1c 69657272 		.ascii	"ierr(T)=%+1.4f\000"
 2735      2854293D 
 2735      252B312E 
 2735      346600
 2736 2d2b 00       		.align	2
 2737              	.LC324:
 2738 2d2c 63762850 		.ascii	"cv(P)=%+1.4f\000"
 2738      293D252B 
 2738      312E3466 
 2738      00
 2739 2d39 000000   		.align	2
 2740              	.LC325:
 2741 2d3c 63762854 		.ascii	"cv(T)=%+1.4f\000"
 2741      293D252B 
 2741      312E3466 
 2741      00
 2742 2d49 000000   		.align	2
 2743              	.LC326:
 2744 2d4c 70776D5F 		.ascii	"pwm_var(P)= %4i\000"
 2744      76617228 
 2744      50293D20 
 2744      25346900 
 2745              		.align	2
 2746              	.LC327:
 2747 2d5c 70776D5F 		.ascii	"pwm_var(T)= %4i\000"
 2747      76617228 
 2747      54293D20 
 2747      25346900 
 2748              		.align	2
 2749              	.LC328:
 2750 2d6c 50414E20 		.ascii	"PAN  TORQUE:\000"
 2750      20544F52 
 2750      5155453A 
 2750      00
 2751 2d79 000000   		.align	2
 2752              	.LC329:
 2753 2d7c 54494C54 		.ascii	"TILT TORQUE:\000"
 2753      20544F52 
 2753      5155453A 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 85


 2753      00
 2754 2d89 000000   		.align	2
 2755              	.LC330:
 2756 2d8c 4D414348 		.ascii	"MACHINE\015\000"
 2756      494E450D 
 2756      00
 2757 2d95 000000   		.align	2
 2758              	.LC331:
 2759 2d98 2D2D2D2D 		.ascii	"-------\015\000"
 2759      2D2D2D0D 
 2759      00
 2760 2da1 000000   		.align	2
 2761              	.LC332:
 2762 2da4 506F7765 		.ascii	"Power Status =\000"
 2762      72205374 
 2762      61747573 
 2762      203D00
 2763 2db3 00       		.align	2
 2764              	.LC333:
 2765 2db4 20476C6F 		.ascii	" Global DEENERGIZED\015\000"
 2765      62616C20 
 2765      4445454E 
 2765      45524749 
 2765      5A45440D 
 2766 2dc9 000000   		.align	2
 2767              	.LC334:
 2768 2dcc 20476C6F 		.ascii	" Global ENERGIZED!\015\000"
 2768      62616C20 
 2768      454E4552 
 2768      47495A45 
 2768      44210D00 
 2769              		.align	2
 2770              	.LC335:
 2771 2de0 2044414E 		.ascii	" DANGER!!! INTERNAL FIRMWARE FAULT\015\000"
 2771      47455221 
 2771      21212049 
 2771      4E544552 
 2771      4E414C20 
 2772              		.align	2
 2773              	.LC336:
 2774 2e04 6374726C 		.ascii	"ctrl isr counters START=%5i STOP=%5i  \015\012\000"
 2774      20697372 
 2774      20636F75 
 2774      6E746572 
 2774      73205354 
 2775 2e2d 000000   		.align	2
 2776              	.LC337:
 2777 2e30 616E616C 		.ascii	"analogs\000"
 2777      6F677300 
 2778              		.align	2
 2779              	.LC338:
 2780 2e38 616E6100 		.ascii	"ana\000"
 2781              		.align	2
 2782              	.LC339:
 2783 2e3c 495F503D 		.ascii	"I_P=%5d\000"
 2783      25356400 
 2784              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 86


 2785              	.LC340:
 2786 2e44 20495F54 		.ascii	" I_T=%5d\000"
 2786      3D253564 
 2786      00
 2787 2e4d 000000   		.align	2
 2788              	.LC341:
 2789 2e50 20566363 		.ascii	" Vcc=%5d\000"
 2789      3D253564 
 2789      00
 2790 2e59 000000   		.align	2
 2791              	.LC342:
 2792 2e5c 2041783D 		.ascii	" Ax=%5d\000"
 2792      25356400 
 2793              		.align	2
 2794              	.LC343:
 2795 2e64 2041793D 		.ascii	" Ay=%5d\000"
 2795      25356400 
 2796              		.align	2
 2797              	.LC344:
 2798 2e6c 20417A3D 		.ascii	" Az=%5d\000"
 2798      25356400 
 2799              		.align	2
 2800              	.LC345:
 2801 2e74 20414253 		.ascii	" ABS_P=%5d\000"
 2801      5F503D25 
 2801      356400
 2802 2e7f 00       		.align	2
 2803              	.LC346:
 2804 2e80 20414253 		.ascii	" ABS_T=%5d\000"
 2804      5F543D25 
 2804      356400
 2805 2e8b 00       		.align	2
 2806              	.LC347:
 2807 2e8c 20617374 		.ascii	" astim=%5d\000"
 2807      696D3D25 
 2807      356400
 2808 2e97 00       		.align	2
 2809              	.LC348:
 2810 2e98 76636300 		.ascii	"vcc\000"
 2811              		.global	__aeabi_dmul
 2812              		.align	2
 2813              	.LC349:
 2814 2e9c 56434320 		.ascii	"VCC = %3.1f [V]\015\012\000"
 2814      3D202533 
 2814      2E316620 
 2814      5B565D0D 
 2814      0A00
 2815 2eae 0000     		.align	2
 2816              	.LC350:
 2817 2eb0 63757272 		.ascii	"current\000"
 2817      656E7400 
 2818              		.align	2
 2819              	.LC351:
 2820 2eb8 6900     		.ascii	"i\000"
 2821 2eba 0000     		.align	2
 2822              	.LC352:
 2823 2ebc 69287429 		.ascii	"i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 87


 2823      5F50414E 
 2823      203D2025 
 2823      352E3466 
 2823      205B415D 
 2824              		.align	2
 2825              	.LC353:
 2826 2ee8 20202020 		.ascii	"     Drive Status=%2u \000"
 2826      20447269 
 2826      76652053 
 2826      74617475 
 2826      733D2532 
 2827 2eff 00       		.align	2
 2828              	.LC354:
 2829 2f00 28692874 		.ascii	"(i(t)_PAN PEAK!) \000"
 2829      295F5041 
 2829      4E205045 
 2829      414B2129 
 2829      2000
 2830 2f12 0000     		.align	2
 2831              	.LC355:
 2832 2f14 28692874 		.ascii	"(i(t)_PAN OK!)  \000"
 2832      295F5041 
 2832      4E204F4B 
 2832      21292020 
 2832      00
 2833 2f25 000000   		.align	2
 2834              	.LC356:
 2835 2f28 28692874 		.ascii	"(i(t)_TILT PEAK!)\000"
 2835      295F5449 
 2835      4C542050 
 2835      45414B21 
 2835      2900
 2836 2f3a 0000     		.align	2
 2837              	.LC357:
 2838 2f3c 28692874 		.ascii	"(i(t)_TILT OK!)\000"
 2838      295F5449 
 2838      4C54204F 
 2838      4B212900 
 2839              		.align	2
 2840              	.LC358:
 2841 2f4c 706D746F 		.ascii	"pmtorque\000"
 2841      72717565 
 2841      00
 2842 2f55 000000   		.align	2
 2843              	.LC359:
 2844 2f58 706D7400 		.ascii	"pmt\000"
 2845              		.align	2
 2846              	.LC360:
 2847 2f5c 0D0A4178 		.ascii	"\015\012Axis=Pan\015\012\015\000"
 2847      69733D50 
 2847      616E0D0A 
 2847      0D00
 2848 2f6a 0000     		.align	2
 2849              	.LC361:
 2850 2f6c 695F743D 		.ascii	"i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_ma"
 2850      25332E33 
 2850      665B415D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 88


 2850      20286E6C 
 2850      3D25332E 
 2851 2f9f 783D2533 		.ascii	"x=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_med=%3.2f[A]  TM"
 2851      2E32665B 
 2851      415D2020 
 2851      544D4F54 
 2851      5F6D6178 
 2852 2fd2 4F545F6D 		.ascii	"OT_med=%3.2f[mNm]\015\012\000"
 2852      65643D25 
 2852      332E3266 
 2852      5B6D4E6D 
 2852      5D0D0A00 
 2853 2fe6 0000     		.align	2
 2854              	.LC362:
 2855 2fe8 0D0A4261 		.ascii	"\015\012Battery Capacity Used=%3.2f [mAh]  Percenta"
 2855      74746572 
 2855      79204361 
 2855      70616369 
 2855      74792055 
 2856 3015 67652831 		.ascii	"ge(1000mAh)=%3.2f [%%]\015\012\000"
 2856      3030306D 
 2856      4168293D 
 2856      25332E32 
 2856      66205B25 
 2857 302e 0000     		.align	2
 2858              	.LC363:
 2859 3030 746D746F 		.ascii	"tmtorque\000"
 2859      72717565 
 2859      00
 2860 3039 000000   		.align	2
 2861              	.LC364:
 2862 303c 746D7400 		.ascii	"tmt\000"
 2863              		.align	2
 2864              	.LC365:
 2865 3040 0D0A4178 		.ascii	"\015\012Axis=Tilt\015\012\015\000"
 2865      69733D54 
 2865      696C740D 
 2865      0A0D00
 2866 304f 00       		.align	2
 2867              	.LC366:
 2868 3050 706F746F 		.ascii	"potorque\000"
 2868      72717565 
 2868      00
 2869 3059 000000   		.align	2
 2870              	.LC367:
 2871 305c 706F7400 		.ascii	"pot\000"
 2872              		.align	2
 2873              	.LC368:
 2874 3060 695F743D 		.ascii	"i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_ma"
 2874      25332E33 
 2874      665B415D 
 2874      20286E6C 
 2874      3D25332E 
 2875 3093 783D2533 		.ascii	"x=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_med=%3.2f[A]  TO"
 2875      2E32665B 
 2875      415D2020 
 2875      544F5554 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 89


 2875      5F6D6178 
 2876 30c6 55545F6D 		.ascii	"UT_med=%3.2f[mNm]\015\012\000"
 2876      65643D25 
 2876      332E3266 
 2876      5B6D4E6D 
 2876      5D0D0A00 
 2877 30da 0000     		.align	2
 2878              	.LC369:
 2879 30dc 746F746F 		.ascii	"totorque\000"
 2879      72717565 
 2879      00
 2880 30e5 000000   		.align	2
 2881              	.LC370:
 2882 30e8 746F7400 		.ascii	"tot\000"
 2883              		.align	2
 2884              	.LC371:
 2885 30ec 706D706F 		.ascii	"pmpower\000"
 2885      77657200 
 2886              		.align	2
 2887              	.LC372:
 2888 30f4 706D7000 		.ascii	"pmp\000"
 2889              		.align	2
 2890              	.LC373:
 2891 30f8 54287429 		.ascii	"T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p"
 2891      3D25332E 
 2891      31665B6D 
 2891      4E6D5D20 
 2891      20762874 
 2892 312b 2874293D 		.ascii	"(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed=%3.1f[mW]\015\012"
 2892      25332E31 
 2892      665B6D57 
 2892      5D202070 
 2892      6D61783D 
 2893 315a 00       		.ascii	"\000"
 2894 315b 00       		.align	2
 2895              	.LC374:
 2896 315c 746D706F 		.ascii	"tmpower\000"
 2896      77657200 
 2897              		.align	2
 2898              	.LC375:
 2899 3164 746D7000 		.ascii	"tmp\000"
 2900              		.align	2
 2901              	.LC376:
 2902 3168 70616273 		.ascii	"pabsstats\000"
 2902      73746174 
 2902      7300
 2903 3172 0000     		.align	2
 2904              	.LC377:
 2905 3174 70616273 		.ascii	"pabs\000"
 2905      00
 2906 3179 000000   		.align	2
 2907              	.LC378:
 2908 317c 50414E20 		.ascii	"PAN Absolute Sensor:\000"
 2908      4162736F 
 2908      6C757465 
 2908      2053656E 
 2908      736F723A 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 90


 2909 3191 000000   		.align	2
 2910              	.LC379:
 2911 3194 206D6561 		.ascii	" mean=%+1.1f [raw]\000"
 2911      6E3D252B 
 2911      312E3166 
 2911      205B7261 
 2911      775D00
 2912 31a7 00       		.align	2
 2913              	.LC380:
 2914 31a8 206D6178 		.ascii	" max=%+1.1f [raw]\000"
 2914      3D252B31 
 2914      2E316620 
 2914      5B726177 
 2914      5D00
 2915 31ba 0000     		.align	2
 2916              	.LC381:
 2917 31bc 206D696E 		.ascii	" min=%+1.1f [raw]\000"
 2917      3D252B31 
 2917      2E316620 
 2917      5B726177 
 2917      5D00
 2918 31ce 0000     		.align	2
 2919              	.LC382:
 2920 31d0 2072616E 		.ascii	" range=%+1.1f [raw]\000"
 2920      67653D25 
 2920      2B312E31 
 2920      66205B72 
 2920      61775D00 
 2921              		.align	2
 2922              	.LC383:
 2923 31e4 74616273 		.ascii	"tabsstats\000"
 2923      73746174 
 2923      7300
 2924 31ee 0000     		.align	2
 2925              	.LC384:
 2926 31f0 74616273 		.ascii	"tabs\000"
 2926      00
 2927 31f5 000000   		.align	2
 2928              	.LC385:
 2929 31f8 54494C54 		.ascii	"TILT Absolute Sensor:\000"
 2929      20416273 
 2929      6F6C7574 
 2929      65205365 
 2929      6E736F72 
 2930 320e 0000     		.align	2
 2931              	.LC386:
 2932 3210 61737469 		.ascii	"astim\000"
 2932      6D00
 2933 3216 0000     		.align	2
 2934              	.LC387:
 2935 3218 41535449 		.ascii	"ASTIM(ADC_INPUT) =%+5d [lsb]\000"
 2935      4D284144 
 2935      435F494E 
 2935      50555429 
 2935      203D252B 
 2936 3235 000000   		.align	2
 2937              	.LC388:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 91


 2938 3238 20202041 		.ascii	"   ASTIM(P)=%+5.1f [step]\000"
 2938      5354494D 
 2938      2850293D 
 2938      252B352E 
 2938      3166205B 
 2939 3252 0000     		.align	2
 2940              	.LC389:
 2941 3254 20202041 		.ascii	"   ASTIM(T)=%+5.1f [step]\015\012\000"
 2941      5354494D 
 2941      2854293D 
 2941      252B352E 
 2941      3166205B 
 2942              		.align	2
 2943              	.LC390:
 2944 3270 62696B65 		.ascii	"bikeangles\000"
 2944      616E676C 
 2944      657300
 2945 327b 00       		.align	2
 2946              	.LC391:
 2947 327c 62696B65 		.ascii	"bike\000"
 2947      00
 2948 3281 000000   		.align	2
 2949              	.LC392:
 2950 3284 42494B45 		.ascii	"BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt)"
 2950      2045554C 
 2950      4552204C 
 2950      50462041 
 2950      4E474C45 
 2951 32b7 3A25362E 		.ascii	":%6.3f | ROLL(roll):%6.3f |\015\012\000"
 2951      3366207C 
 2951      20524F4C 
 2951      4C28726F 
 2951      6C6C293A 
 2952 32d5 000000   		.align	2
 2953              	.LC393:
 2954 32d8 616E616C 		.ascii	"analogacc\000"
 2954      6F676163 
 2954      6300
 2955 32e2 0000     		.align	2
 2956              	.LC394:
 2957 32e4 61616363 		.ascii	"aacc\000"
 2957      00
 2958 32e9 000000   		.align	2
 2959              	.LC395:
 2960 32ec 783D252B 		.ascii	"x=%+1.4f[g] (%5i)\000"
 2960      312E3466 
 2960      5B675D20 
 2960      28253569 
 2960      2900
 2961 32fe 0000     		.align	2
 2962              	.LC396:
 2963 3300 20793D25 		.ascii	" y=%+1.4f[g] (%5i)\000"
 2963      2B312E34 
 2963      665B675D 
 2963      20282535 
 2963      692900
 2964 3313 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 92


 2965              	.LC397:
 2966 3314 207A3D25 		.ascii	" z=%+1.4f[g] (%5i)\000"
 2966      2B312E34 
 2966      665B675D 
 2966      20282535 
 2966      692900
 2967 3327 00       		.align	2
 2968              	.LC398:
 2969 3328 206D6F64 		.ascii	" modulo=%+1.4f[g]\000"
 2969      756C6F3D 
 2969      252B312E 
 2969      34665B67 
 2969      5D00
 2970 333a 0000     		.align	2
 2971              	.LC399:
 2972 333c 20736479 		.ascii	" sdyn=%+1.4f[g^2]\000"
 2972      6E3D252B 
 2972      312E3466 
 2972      5B675E32 
 2972      5D00
 2973 334e 0000     		.align	2
 2974              	.LC400:
 2975 3350 6576656E 		.ascii	"events\000"
 2975      747300
 2976 3357 00       		.align	2
 2977              	.LC401:
 2978 3358 6576656E 		.ascii	"event\000"
 2978      7400
 2979 335e 0000     		.align	2
 2980              	.LC402:
 2981 3360 6D617073 		.ascii	"mapsm\000"
 2981      6D00
 2982 3366 0000     		.align	2
 2983              	.LC403:
 2984 3368 4576656E 		.ascii	"Events\000"
 2984      747300
 2985 336f 00       		.align	2
 2986              	.LC404:
 2987 3370 206F6E5F 		.ascii	" on_origin_ticks=%ld\000"
 2987      6F726967 
 2987      696E5F74 
 2987      69636B73 
 2987      3D256C64 
 2988 3385 000000   		.align	2
 2989              	.LC405:
 2990 3388 20616E67 		.ascii	" angle_tilt=%2i\000"
 2990      6C655F74 
 2990      696C743D 
 2990      25326900 
 2991              		.align	2
 2992              	.LC406:
 2993 3398 20766962 		.ascii	" vibration=%2i\000"
 2993      72617469 
 2993      6F6E3D25 
 2993      326900
 2994 33a7 00       		.align	2
 2995              	.LC407:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 93


 2996 33a8 206A756D 		.ascii	" jump=%2i\000"
 2996      703D2532 
 2996      6900
 2997 33b2 0000     		.align	2
 2998              	.LC408:
 2999 33b4 20736D3D 		.ascii	" sm=%3i \000"
 2999      25336920 
 2999      00
 3000 33bd 000000   		.align	2
 3001              	.LC409:
 3002 33c0 636C7573 		.ascii	"clusm\000"
 3002      6D00
 3003 33c6 0000     		.align	2
 3004              	.LC410:
 3005 33c8 434C5520 		.ascii	"CLU SM: \000"
 3005      534D3A20 
 3005      00
 3006 33d1 000000   		.align	2
 3007              	.LC411:
 3008 33d4 206E756D 		.ascii	" number=%3i\000"
 3008      6265723D 
 3008      25336900 
 3009              		.align	2
 3010              	.LC412:
 3011 33e0 206C696E 		.ascii	" line=%3i\000"
 3011      653D2533 
 3011      6900
 3012 33ea 0000     		.align	2
 3013              	.LC413:
 3014 33ec 20706175 		.ascii	" pauseticks=%3i\000"
 3014      73657469 
 3014      636B733D 
 3014      25336900 
 3015              		.align	2
 3016              	.LC414:
 3017 33fc 20737461 		.ascii	" status=%3i \000"
 3017      7475733D 
 3017      25336920 
 3017      00
 3018 3409 000000   		.align	2
 3019              	.LC415:
 3020 340c 62757474 		.ascii	"buttons\000"
 3020      6F6E7300 
 3021              		.align	2
 3022              	.LC416:
 3023 3414 62757400 		.ascii	"but\000"
 3024              		.align	2
 3025              	.LC417:
 3026 3418 42555454 		.ascii	"BUTTONS = %3i\000"
 3026      4F4E5320 
 3026      3D202533 
 3026      6900
 3027 3426 0000     		.align	2
 3028              	.LC418:
 3029 3428 20284F4E 		.ascii	" (ON)\000"
 3029      2900
 3030 342e 0000     		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 94


 3031              	.LC419:
 3032 3430 20284357 		.ascii	" (CW)\000"
 3032      2900
 3033 3436 0000     		.align	2
 3034              	.LC420:
 3035 3438 20284343 		.ascii	" (CCW)\000"
 3035      572900
 3036 343f 00       		.align	2
 3037              	.LC421:
 3038 3440 73797364 		.ascii	"sysdyn\000"
 3038      796E00
 3039 3447 00       		.align	2
 3040              	.LC422:
 3041 3448 7364796E 		.ascii	"sdyn\000"
 3041      00
 3042 344d 000000   		.align	2
 3043              	.LC423:
 3044 3450 53797374 		.ascii	"System Dynamic Scalar=%1.8f  [xacc_ADC^2+yacc_ADC^2"
 3044      656D2044 
 3044      796E616D 
 3044      69632053 
 3044      63616C61 
 3045 3483 2D283167 		.ascii	"-(1g_ADC)^2]\000"
 3045      5F414443 
 3045      295E325D 
 3045      00
 3046              		.align	2
 3047              	.LC424:
 3048 3490 706F7369 		.ascii	"position\000"
 3048      74696F6E 
 3048      00
 3049 3499 000000   		.align	2
 3050              	.LC425:
 3051 349c 706F7300 		.ascii	"pos\000"
 3052              		.align	2
 3053              	.LC426:
 3054 34a0 20616273 		.ascii	" abs_pos(t)=%+ld [step]\000"
 3054      5F706F73 
 3054      2874293D 
 3054      252B6C64 
 3054      205B7374 
 3055              		.align	2
 3056              	.LC427:
 3057 34b8 2028252B 		.ascii	" (%+3.2f [rad])\000"
 3057      332E3266 
 3057      205B7261 
 3057      645D2900 
 3058              		.align	2
 3059              	.LC428:
 3060 34c8 20202020 		.ascii	"    TILT: enc(t)=%+ld [step]\000"
 3060      54494C54 
 3060      3A20656E 
 3060      63287429 
 3060      3D252B6C 
 3061 34e5 000000   		.align	2
 3062              	.LC429:
 3063 34e8 656E6366 		.ascii	"encfbk\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 95


 3063      626B00
 3064 34ef 00       		.align	2
 3065              	.LC430:
 3066 34f0 656E6366 		.ascii	"encf\000"
 3066      00
 3067 34f5 000000   		.align	2
 3068              	.LC431:
 3069 34f8 44414E47 		.ascii	"DANGER!!! THIS COMMAND DISABLES MOTOR CONTROL AND M"
 3069      45522121 
 3069      21205448 
 3069      49532043 
 3069      4F4D4D41 
 3070 352b 41592050 		.ascii	"AY PRODUCE LARGE MOVEMENTS!!!\015\000"
 3070      524F4455 
 3070      4345204C 
 3070      41524745 
 3070      204D4F56 
 3071 354a 0000     		.align	2
 3072              	.LC432:
 3073 354c 41726520 		.ascii	"Are you sure to show feedback encoders [Y/N]?\000"
 3073      796F7520 
 3073      73757265 
 3073      20746F20 
 3073      73686F77 
 3074 357a 0000     		.align	2
 3075              	.LC433:
 3076 357c 50414E5F 		.ascii	"PAN_FBK=%8ld\000"
 3076      46424B3D 
 3076      25386C64 
 3076      00
 3077 3589 000000   		.align	2
 3078              	.LC434:
 3079 358c 20205449 		.ascii	"  TILT_FBK=%8ld\015\012\000"
 3079      4C545F46 
 3079      424B3D25 
 3079      386C640D 
 3079      0A00
 3080 359e 0000     		.align	2
 3081              	.LC435:
 3082 35a0 6D6F746F 		.ascii	"motorstatus\000"
 3082      72737461 
 3082      74757300 
 3083              		.align	2
 3084              	.LC436:
 3085 35ac 6D6F7400 		.ascii	"mot\000"
 3086              		.align	2
 3087              	.LC437:
 3088 35b0 4D6F746F 		.ascii	"Motor Status=%2u \000"
 3088      72205374 
 3088      61747573 
 3088      3D253275 
 3088      2000
 3089 35c2 0000     		.align	2
 3090              	.LC438:
 3091 35c4 50414E20 		.ascii	"PAN CURRENT PEAK!) \000"
 3091      43555252 
 3091      454E5420 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 96


 3091      5045414B 
 3091      21292000 
 3092              		.align	2
 3093              	.LC439:
 3094 35d8 2850414E 		.ascii	"(PAN CURRENT OK!)  \000"
 3094      20435552 
 3094      52454E54 
 3094      204F4B21 
 3094      29202000 
 3095              		.align	2
 3096              	.LC440:
 3097 35ec 2854494C 		.ascii	"(TILT CURRENT PEAK!)\000"
 3097      54204355 
 3097      5252454E 
 3097      54205045 
 3097      414B2129 
 3098 3601 000000   		.align	2
 3099              	.LC441:
 3100 3604 2854494C 		.ascii	"(TILT CURRENT OK!)\000"
 3100      54204355 
 3100      5252454E 
 3100      54204F4B 
 3100      212900
 3101 3617 00       		.align	2
 3102              	.LC442:
 3103 3618 73686F74 		.ascii	"shot\000"
 3103      00
 3104 361d 000000   		.align	2
 3105              	.LC443:
 3106 3620 616C6C00 		.ascii	"all\000"
 3107              		.align	2
 3108              	.LC444:
 3109 3624 514D656D 		.ascii	"QMemory%02d NOT ALLOCATED!\015\012\000"
 3109      6F727925 
 3109      30326420 
 3109      4E4F5420 
 3109      414C4C4F 
 3110 3641 000000   		.align	2
 3111              	.LC445:
 3112 3644 514D656D 		.ascii	"QMemory%02d allocated to Q%02d\015\012\000"
 3112      6F727925 
 3112      30326420 
 3112      616C6C6F 
 3112      63617465 
 3113 3665 000000   		.align	2
 3114              	.LC446:
 3115 3668 51253032 		.ascii	"Q%02d PAN  ABS position=%+8ld [step]  default_param"
 3115      64205041 
 3115      4E202041 
 3115      42532070 
 3115      6F736974 
 3116 369b 3D252B38 		.ascii	"=%+8ld [step]  adjust_param=%+8ld [step]\015\012\000"
 3116      6C64205B 
 3116      73746570 
 3116      5D202061 
 3116      646A7573 
 3117 36c6 0000     		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 97


 3118              	.LC447:
 3119 36c8 51253032 		.ascii	"Q%02d TILT ABS position=%+8ld [step]  default_param"
 3119      64205449 
 3119      4C542041 
 3119      42532070 
 3119      6F736974 
 3120 36fb 3D252B38 		.ascii	"=%+8ld [step]  adjust_param=%+8ld [step]\015\012\000"
 3120      6C64205B 
 3120      73746570 
 3120      5D202061 
 3120      646A7573 
 3121 3726 0000     		.align	2
 3122              	.LC448:
 3123 3728 0D0A2851 		.ascii	"\015\012(Q%02d is allocated in Q memory number %02d"
 3123      25303264 
 3123      20697320 
 3123      616C6C6F 
 3123      63617465 
 3124 3755 290D0A00 		.ascii	")\015\012\000"
 3125 3759 000000   		.align	2
 3126              	.LC449:
 3127 375c 0D0A5125 		.ascii	"\015\012Q%02d is not allocated!\015\012\000"
 3127      30326420 
 3127      6973206E 
 3127      6F742061 
 3127      6C6C6F63 
 3128              		.align	2
 3129              	.LC450:
 3130 3778 23455252 		.ascii	"#ERROR5: Number not allowed!\000"
 3130      4F52353A 
 3130      204E756D 
 3130      62657220 
 3130      6E6F7420 
 3131 3795 000000   		.align	2
 3132              	.LC451:
 3133 3798 636C7500 		.ascii	"clu\000"
 3134              		.align	2
 3135              	.LC452:
 3136 379c 70616E6C 		.ascii	"panlimits\000"
 3136      696D6974 
 3136      7300
 3137 37a6 0000     		.align	2
 3138              	.LC453:
 3139 37a8 706C696D 		.ascii	"plim\000"
 3139      00
 3140 37ad 000000   		.align	2
 3141              	.LC454:
 3142 37b0 50414E20 		.ascii	"PAN LIMIT=%2u \000"
 3142      4C494D49 
 3142      543D2532 
 3142      752000
 3143 37bf 00       		.align	2
 3144              	.LC455:
 3145 37c0 74696C74 		.ascii	"tiltlimits\000"
 3145      6C696D69 
 3145      747300
 3146 37cb 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 98


 3147              	.LC456:
 3148 37cc 746C696D 		.ascii	"tlim\000"
 3148      00
 3149 37d1 000000   		.align	2
 3150              	.LC457:
 3151 37d4 54494C54 		.ascii	"TILT LIMIT=%2u \000"
 3151      204C494D 
 3151      49543D25 
 3151      32752000 
 3152              		.align	2
 3153              	.LC458:
 3154 37e4 72617469 		.ascii	"ratioabsp\000"
 3154      6F616273 
 3154      7000
 3155 37ee 0000     		.align	2
 3156              	.LC459:
 3157 37f0 72617469 		.ascii	"ratiop\000"
 3157      6F7000
 3158 37f7 00       		.align	2
 3159              	.LC460:
 3160 37f8 41726520 		.ascii	"Are you sure to show absolute sensor ratios [Y/N]?\000"
 3160      796F7520 
 3160      73757265 
 3160      20746F20 
 3160      73686F77 
 3161 382b 00       		.align	2
 3162              	.LC461:
 3163 382c 50414E3A 		.ascii	"PAN: ABS_SENSOR=%5i[lsb]\000"
 3163      20414253 
 3163      5F53454E 
 3163      534F523D 
 3163      2535695B 
 3164 3845 000000   		.align	2
 3165              	.LC462:
 3166 3848 20454E43 		.ascii	" ENC=%9li[step]\000"
 3166      3D25396C 
 3166      695B7374 
 3166      65705D00 
 3167              		.align	2
 3168              	.LC463:
 3169 3858 20524154 		.ascii	" RATIO=%1.4f[step/lsb]\000"
 3169      494F3D25 
 3169      312E3466 
 3169      5B737465 
 3169      702F6C73 
 3170 386f 00       		.align	2
 3171              	.LC464:
 3172 3870 0D0A2A21 		.ascii	"\015\012*!point 0 sampling\015\012\015\000"
 3172      706F696E 
 3172      74203020 
 3172      73616D70 
 3172      6C696E67 
 3173              		.align	2
 3174              	.LC465:
 3175 3888 0D0A2A21 		.ascii	"\015\012*!enc over abs ratio sampled\015\012\015\000"
 3175      656E6320 
 3175      6F766572 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 99


 3175      20616273 
 3175      20726174 
 3176 38aa 0000     		.align	2
 3177              	.LC466:
 3178 38ac 0D0A2A21 		.ascii	"\015\012*!Absolute Sensor ratio PAN eeprom saved\015"
 3178      4162736F 
 3178      6C757465 
 3178      2053656E 
 3178      736F7220 
 3179 38d7 0A0D00   		.ascii	"\012\015\000"
 3180 38da 0000     		.align	2
 3181              	.LC467:
 3182 38dc 72617469 		.ascii	"ratioabst\000"
 3182      6F616273 
 3182      7400
 3183 38e6 0000     		.align	2
 3184              	.LC468:
 3185 38e8 72617469 		.ascii	"ratiot\000"
 3185      6F7400
 3186 38ef 00       		.align	2
 3187              	.LC469:
 3188 38f0 54494C54 		.ascii	"TILT: ABS_SENSOR=%5i[lsb]\000"
 3188      3A204142 
 3188      535F5345 
 3188      4E534F52 
 3188      3D253569 
 3189 390a 0000     		.align	2
 3190              	.LC470:
 3191 390c 0D0A2A21 		.ascii	"\015\012*!Absolute Sensor ratio TILT eeprom saved\015"
 3191      4162736F 
 3191      6C757465 
 3191      2053656E 
 3191      736F7220 
 3192 3938 0A0D00   		.ascii	"\012\015\000"
 3193 393b 00       		.align	2
 3194              	.LC471:
 3195 393c 6661756C 		.ascii	"faults\000"
 3195      747300
 3196 3943 00       		.align	2
 3197              	.LC472:
 3198 3944 6661756C 		.ascii	"fault\000"
 3198      7400
 3199 394a 0000     		.align	2
 3200              	.LC473:
 3201 394c 4E4F4E45 		.ascii	"NONE: ALL OK!\015\000"
 3201      3A20414C 
 3201      4C204F4B 
 3201      210D00
 3202 395b 00       		.align	2
 3203              	.LC474:
 3204 395c 40464155 		.ascii	"@FAULT#01: PAN  AXIS HAS PROBLEMS!\015\000"
 3204      4C542330 
 3204      313A2050 
 3204      414E2020 
 3204      41584953 
 3205              		.align	2
 3206              	.LC475:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 100


 3207 3980 40464155 		.ascii	"@FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!\015"
 3207      4C542331 
 3207      303A2046 
 3207      45454442 
 3207      41434B20 
 3208 39b1 00       		.ascii	"\000"
 3209 39b2 0000     		.align	2
 3210              	.LC476:
 3211 39b4 40464155 		.ascii	"@FAULT#02: TILT AXIS HAS PROBLEMS!\015\000"
 3211      4C542330 
 3211      323A2054 
 3211      494C5420 
 3211      41584953 
 3212              		.align	2
 3213              	.LC477:
 3214 39d8 70617261 		.ascii	"params\000"
 3214      6D7300
 3215 39df 00       		.align	2
 3216              	.LC478:
 3217 39e0 7000     		.ascii	"p\000"
 3218 39e2 0000     		.align	2
 3219              	.LC479:
 3220 39e4 476F4265 		.ascii	"GoBee DIRECTOR\015\000"
 3220      65204449 
 3220      52454354 
 3220      4F520D00 
 3221              		.align	2
 3222              	.LC480:
 3223 39f4 3D3D3D3D 		.ascii	"==============\015\000"
 3223      3D3D3D3D 
 3223      3D3D3D3D 
 3223      3D3D0D00 
 3224              		.align	2
 3225              	.LC481:
 3226 3a04 476F6265 		.ascii	"Gobee Mode                   =%2u: \000"
 3226      65204D6F 
 3226      64652020 
 3226      20202020 
 3226      20202020 
 3227              		.align	2
 3228              	.LC482:
 3229 3a28 476F6265 		.ascii	"Gobee Selected Director      =%2u: \000"
 3229      65205365 
 3229      6C656374 
 3229      65642044 
 3229      69726563 
 3230              		.align	2
 3231              	.LC483:
 3232 3a4c 476F4265 		.ascii	"GoBee PARAMETER LIST\015\000"
 3232      65205041 
 3232      52414D45 
 3232      54455220 
 3232      4C495354 
 3233 3a62 0000     		.align	2
 3234              	.LC484:
 3235 3a64 3D3D3D3D 		.ascii	"====================\015\000"
 3235      3D3D3D3D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 101


 3235      3D3D3D3D 
 3235      3D3D3D3D 
 3235      3D3D3D3D 
 3236 3a7a 0000     		.align	2
 3237              	.LC485:
 3238 3a7c 50616E20 		.ascii	"Pan  Axis Resolution         = \000"
 3238      20417869 
 3238      73205265 
 3238      736F6C75 
 3238      74696F6E 
 3239              		.align	2
 3240              	.LC486:
 3241 3a9c 25382E31 		.ascii	"%8.1f [step/2PI]\000"
 3241      66205B73 
 3241      7465702F 
 3241      3250495D 
 3241      00
 3242 3aad 000000   		.align	2
 3243              	.LC487:
 3244 3ab0 54696C74 		.ascii	"Tilt Axis Resolution         = \000"
 3244      20417869 
 3244      73205265 
 3244      736F6C75 
 3244      74696F6E 
 3245              		.align	2
 3246              	.LC488:
 3247 3ad0 4D6F746F 		.ascii	"Motor Control\015\000"
 3247      7220436F 
 3247      6E74726F 
 3247      6C0D00
 3248 3adf 00       		.align	2
 3249              	.LC489:
 3250 3ae0 3D3D3D3D 		.ascii	"=============\015\000"
 3250      3D3D3D3D 
 3250      3D3D3D3D 
 3250      3D0D00
 3251 3aef 00       		.align	2
 3252              	.LC490:
 3253 3af0 50616E20 		.ascii	"Pan  Motor Polarity          = \000"
 3253      204D6F74 
 3253      6F722050 
 3253      6F6C6172 
 3253      69747920 
 3254              		.align	2
 3255              	.LC491:
 3256 3b10 25317520 		.ascii	"%1u (0=true, 1=invert)\000"
 3256      28303D74 
 3256      7275652C 
 3256      20313D69 
 3256      6E766572 
 3257 3b27 00       		.align	2
 3258              	.LC492:
 3259 3b28 50616E20 		.ascii	"Pan  Motor Kp                = \000"
 3259      204D6F74 
 3259      6F72204B 
 3259      70202020 
 3259      20202020 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 102


 3260              		.align	2
 3261              	.LC493:
 3262 3b48 25386600 		.ascii	"%8f\000"
 3263              		.align	2
 3264              	.LC494:
 3265 3b4c 50616E20 		.ascii	"Pan  Motor Kd                = \000"
 3265      204D6F74 
 3265      6F72204B 
 3265      64202020 
 3265      20202020 
 3266              		.align	2
 3267              	.LC495:
 3268 3b6c 50616E20 		.ascii	"Pan  Motor Ki                = \000"
 3268      204D6F74 
 3268      6F72204B 
 3268      69202020 
 3268      20202020 
 3269              		.align	2
 3270              	.LC496:
 3271 3b8c 50616E20 		.ascii	"Pan  Motor Ksi               = \000"
 3271      204D6F74 
 3271      6F72204B 
 3271      73692020 
 3271      20202020 
 3272              		.align	2
 3273              	.LC497:
 3274 3bac 25386620 		.ascii	"%8f (max AZI=%8f)\000"
 3274      286D6178 
 3274      20415A49 
 3274      3D253866 
 3274      2900
 3275 3bbe 0000     		.align	2
 3276              	.LC498:
 3277 3bc0 50616E20 		.ascii	"Pan Limit Control            = \000"
 3277      4C696D69 
 3277      7420436F 
 3277      6E74726F 
 3277      6C202020 
 3278              		.align	2
 3279              	.LC499:
 3280 3be0 25317520 		.ascii	"%1u (0=disabled, 1=enabled)\000"
 3280      28303D64 
 3280      69736162 
 3280      6C65642C 
 3280      20313D65 
 3281              		.align	2
 3282              	.LC500:
 3283 3bfc 54696C74 		.ascii	"Tilt Motor Polarity          = \000"
 3283      204D6F74 
 3283      6F722050 
 3283      6F6C6172 
 3283      69747920 
 3284              		.align	2
 3285              	.LC501:
 3286 3c1c 54696C74 		.ascii	"Tilt Motor Kp                = \000"
 3286      204D6F74 
 3286      6F72204B 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 103


 3286      70202020 
 3286      20202020 
 3287              		.align	2
 3288              	.LC502:
 3289 3c3c 54696C74 		.ascii	"Tilt Motor Kd                = \000"
 3289      204D6F74 
 3289      6F72204B 
 3289      64202020 
 3289      20202020 
 3290              		.align	2
 3291              	.LC503:
 3292 3c5c 54696C74 		.ascii	"Tilt Motor Ki                = \000"
 3292      204D6F74 
 3292      6F72204B 
 3292      69202020 
 3292      20202020 
 3293              		.align	2
 3294              	.LC504:
 3295 3c7c 54696C74 		.ascii	"Tilt Motor Ksi               = \000"
 3295      204D6F74 
 3295      6F72204B 
 3295      73692020 
 3295      20202020 
 3296              		.align	2
 3297              	.LC505:
 3298 3c9c 54696C74 		.ascii	"Tilt Limit Control           = \000"
 3298      204C696D 
 3298      69742043 
 3298      6F6E7472 
 3298      6F6C2020 
 3299              		.align	2
 3300              	.LC506:
 3301 3cbc 4162736F 		.ascii	"Absolute Sensors\015\000"
 3301      6C757465 
 3301      2053656E 
 3301      736F7273 
 3301      0D00
 3302 3cce 0000     		.align	2
 3303              	.LC507:
 3304 3cd0 3D3D3D3D 		.ascii	"================\015\000"
 3304      3D3D3D3D 
 3304      3D3D3D3D 
 3304      3D3D3D3D 
 3304      0D00
 3305 3ce2 0000     		.align	2
 3306              	.LC508:
 3307 3ce4 50616E20 		.ascii	"Pan  Absolute sensor HOME    = \000"
 3307      20416273 
 3307      6F6C7574 
 3307      65207365 
 3307      6E736F72 
 3308              		.align	2
 3309              	.LC509:
 3310 3d04 25366920 		.ascii	"%6i [ADC raw]    (invertion=%1d)\000"
 3310      5B414443 
 3310      20726177 
 3310      5D202020 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 104


 3310      2028696E 
 3311 3d25 000000   		.align	2
 3312              	.LC510:
 3313 3d28 50616E20 		.ascii	"Pan  Absolute sensor LimitMAX= \000"
 3313      20416273 
 3313      6F6C7574 
 3313      65207365 
 3313      6E736F72 
 3314              		.align	2
 3315              	.LC511:
 3316 3d48 25366920 		.ascii	"%6i [ADC raw]\000"
 3316      5B414443 
 3316      20726177 
 3316      5D00
 3317 3d56 0000     		.align	2
 3318              	.LC512:
 3319 3d58 50616E20 		.ascii	"Pan  Absolute sensor Limitmin= \000"
 3319      20416273 
 3319      6F6C7574 
 3319      65207365 
 3319      6E736F72 
 3320              		.align	2
 3321              	.LC513:
 3322 3d78 50616E20 		.ascii	"Pan  Absolute sensor Hyster. = \000"
 3322      20416273 
 3322      6F6C7574 
 3322      65207365 
 3322      6E736F72 
 3323              		.align	2
 3324              	.LC514:
 3325 3d98 50616E20 		.ascii	"Pan  Absolute sensor Ratio   = \000"
 3325      20416273 
 3325      6F6C7574 
 3325      65207365 
 3325      6E736F72 
 3326              		.align	2
 3327              	.LC515:
 3328 3db8 25332E33 		.ascii	"%3.3f [step/lsb]\000"
 3328      66205B73 
 3328      7465702F 
 3328      6C73625D 
 3328      00
 3329 3dc9 000000   		.align	2
 3330              	.LC516:
 3331 3dcc 54696C74 		.ascii	"Tilt Absolute sensor HOME    = \000"
 3331      20416273 
 3331      6F6C7574 
 3331      65207365 
 3331      6E736F72 
 3332              		.align	2
 3333              	.LC517:
 3334 3dec 54696C74 		.ascii	"Tilt Absolute sensor LimitMAX= \000"
 3334      20416273 
 3334      6F6C7574 
 3334      65207365 
 3334      6E736F72 
 3335              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 105


 3336              	.LC518:
 3337 3e0c 54696C74 		.ascii	"Tilt Absolute sensor Limitmin= \000"
 3337      20416273 
 3337      6F6C7574 
 3337      65207365 
 3337      6E736F72 
 3338              		.align	2
 3339              	.LC519:
 3340 3e2c 54696C74 		.ascii	"Tilt Absolute sensor Hyster. = \000"
 3340      20416273 
 3340      6F6C7574 
 3340      65207365 
 3340      6E736F72 
 3341              		.align	2
 3342              	.LC520:
 3343 3e4c 54696C74 		.ascii	"Tilt Absolute sensor Ratio   = \000"
 3343      20416273 
 3343      6F6C7574 
 3343      65207365 
 3343      6E736F72 
 3344              		.align	2
 3345              	.LC521:
 3346 3e6c 4D6F746F 		.ascii	"Motor Tuning\015\000"
 3346      72205475 
 3346      6E696E67 
 3346      0D00
 3347 3e7a 0000     		.align	2
 3348              	.LC522:
 3349 3e7c 3D3D3D3D 		.ascii	"============\015\000"
 3349      3D3D3D3D 
 3349      3D3D3D3D 
 3349      0D00
 3350 3e8a 0000     		.align	2
 3351              	.LC523:
 3352 3e8c 50616E20 		.ascii	"Pan  Motor Kopf              = \000"
 3352      204D6F74 
 3352      6F72204B 
 3352      6F706620 
 3352      20202020 
 3353              		.align	2
 3354              	.LC524:
 3355 3eac 20202041 		.ascii	"   AstimEN=%1u \000"
 3355      7374696D 
 3355      454E3D25 
 3355      31752000 
 3356              		.align	2
 3357              	.LC525:
 3358 3ebc 50616E20 		.ascii	"Pan  Anaout GAIN             = \000"
 3358      20416E61 
 3358      6F757420 
 3358      4741494E 
 3358      20202020 
 3359              		.align	2
 3360              	.LC526:
 3361 3edc 50616E20 		.ascii	"Pan  AnaOut Signal (color)   = \000"
 3361      20416E61 
 3361      4F757420 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 106


 3361      5369676E 
 3361      616C2028 
 3362              		.align	2
 3363              	.LC527:
 3364 3efc 54696C74 		.ascii	"Tilt Motor Kopf              = \000"
 3364      204D6F74 
 3364      6F72204B 
 3364      6F706620 
 3364      20202020 
 3365              		.align	2
 3366              	.LC528:
 3367 3f1c 54696C74 		.ascii	"Tilt Anaout GAIN             = \000"
 3367      20416E61 
 3367      6F757420 
 3367      4741494E 
 3367      20202020 
 3368              		.align	2
 3369              	.LC529:
 3370 3f3c 54696C74 		.ascii	"Tilt AnaOut Signal (color)   = \000"
 3370      20416E61 
 3370      4F757420 
 3370      5369676E 
 3370      616C2028 
 3371              		.align	2
 3372              	.LC530:
 3373 3f5c 416E616F 		.ascii	"Anaout Selected Axis         = \000"
 3373      75742053 
 3373      656C6563 
 3373      74656420 
 3373      41786973 
 3374              		.align	2
 3375              	.LC531:
 3376 3f7c 41636365 		.ascii	"Accelerometer (100Hz)\015\000"
 3376      6C65726F 
 3376      6D657465 
 3376      72202831 
 3376      3030487A 
 3377 3f93 00       		.align	2
 3378              	.LC532:
 3379 3f94 3D3D3D3D 		.ascii	"=====================\015\000"
 3379      3D3D3D3D 
 3379      3D3D3D3D 
 3379      3D3D3D3D 
 3379      3D3D3D3D 
 3380 3fab 00       		.align	2
 3381              	.LC533:
 3382 3fac 62657461 		.ascii	"beta  (accelerometer LPF)    = \000"
 3382      20202861 
 3382      6363656C 
 3382      65726F6D 
 3382      65746572 
 3383              		.align	2
 3384              	.LC534:
 3385 3fcc 25386620 		.ascii	"%8f (tau=%1.4f [msec])\000"
 3385      28746175 
 3385      3D25312E 
 3385      3466205B 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 107


 3385      6D736563 
 3386 3fe3 00       		.align	2
 3387              	.LC535:
 3388 3fe4 20286663 		.ascii	" (fc=%1.4f [Hz])\015\012\000"
 3388      3D25312E 
 3388      3466205B 
 3388      487A5D29 
 3388      0D0A00
 3389 3ff7 00       		.align	2
 3390              	.LC536:
 3391 3ff8 416E616C 		.ascii	"Analog Accel. X ADC Offset   = \000"
 3391      6F672041 
 3391      6363656C 
 3391      2E205820 
 3391      41444320 
 3392              		.align	2
 3393              	.LC537:
 3394 4018 25346420 		.ascii	"%4d [lsb]\000"
 3394      5B6C7362 
 3394      5D00
 3395 4022 0000     		.align	2
 3396              	.LC538:
 3397 4024 416E616C 		.ascii	"Analog Accel. Y ADC Offset   = \000"
 3397      6F672041 
 3397      6363656C 
 3397      2E205920 
 3397      41444320 
 3398              		.align	2
 3399              	.LC539:
 3400 4044 416E616C 		.ascii	"Analog Accel. Z ADC Offset   = \000"
 3400      6F672041 
 3400      6363656C 
 3400      2E205A20 
 3400      41444320 
 3401              		.align	2
 3402              	.LC540:
 3403 4064 42696B65 		.ascii	"Bike Frame IMU (1.5kHz)\015\000"
 3403      20467261 
 3403      6D652049 
 3403      4D552028 
 3403      312E356B 
 3404 407d 000000   		.align	2
 3405              	.LC541:
 3406 4080 3D3D3D3D 		.ascii	"=======================\015\000"
 3406      3D3D3D3D 
 3406      3D3D3D3D 
 3406      3D3D3D3D 
 3406      3D3D3D3D 
 3407 4099 000000   		.align	2
 3408              	.LC542:
 3409 409c 67616D6D 		.ascii	"gamma  (IMU LPF)             = \000"
 3409      61202028 
 3409      494D5520 
 3409      4C504629 
 3409      20202020 
 3410              		.align	2
 3411              	.LC543:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 108


 3412 40bc 494D5520 		.ascii	"IMU Yaw angle invertion      = \000"
 3412      59617720 
 3412      616E676C 
 3412      6520696E 
 3412      76657274 
 3413              		.align	2
 3414              	.LC544:
 3415 40dc 494D5520 		.ascii	"IMU Pitch angle invertion    = \000"
 3415      50697463 
 3415      6820616E 
 3415      676C6520 
 3415      696E7665 
 3416              		.align	2
 3417              	.LC545:
 3418 40fc 494D5520 		.ascii	"IMU Roll angle invertion     = \000"
 3418      526F6C6C 
 3418      20616E67 
 3418      6C652069 
 3418      6E766572 
 3419              		.align	2
 3420              	.LC546:
 3421 411c 494D5520 		.ascii	"IMU Pith and Roll exchange   = \000"
 3421      50697468 
 3421      20616E64 
 3421      20526F6C 
 3421      6C206578 
 3422              		.align	2
 3423              	.LC547:
 3424 413c 25317520 		.ascii	"%1u (0=true, 1=exchanged)\000"
 3424      28303D74 
 3424      7275652C 
 3424      20313D65 
 3424      78636861 
 3425 4156 0000     		.align	2
 3426              	.LC548:
 3427 4158 4576656E 		.ascii	"Events Parameters\015\000"
 3427      74732050 
 3427      6172616D 
 3427      65746572 
 3427      730D00
 3428 416b 00       		.align	2
 3429              	.LC549:
 3430 416c 3D3D3D3D 		.ascii	"=================\015\000"
 3430      3D3D3D3D 
 3430      3D3D3D3D 
 3430      3D3D3D3D 
 3430      3D0D00
 3431 417f 00       		.align	2
 3432              	.LC550:
 3433 4180 4A756D70 		.ascii	"Jump G Threshold             = \000"
 3433      20472054 
 3433      68726573 
 3433      686F6C64 
 3433      20202020 
 3434              		.align	2
 3435              	.LC551:
 3436 41a0 25386620 		.ascii	"%8f [g]\015\012\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 109


 3436      5B675D0D 
 3436      0A00
 3437 41aa 0000     		.align	2
 3438              	.LC552:
 3439 41ac 41636365 		.ascii	"Acceleration G Threshold     = \000"
 3439      6C657261 
 3439      74696F6E 
 3439      20472054 
 3439      68726573 
 3440              		.align	2
 3441              	.LC553:
 3442 41cc 636C7565 		.ascii	"cluexec\000"
 3442      78656300 
 3443              		.align	2
 3444              	.LC554:
 3445 41d4 434C5520 		.ascii	"CLU %2i START!\015\012\000"
 3445      25326920 
 3445      53544152 
 3445      54210D0A 
 3445      00
 3446 41e5 000000   		.align	2
 3447              	.LC555:
 3448 41e8 0D0A434C 		.ascii	"\015\012CLU %2i END!\015\012\000"
 3448      55202532 
 3448      6920454E 
 3448      44210D0A 
 3448      00
 3449 41f9 000000   		.align	2
 3450              	.LC556:
 3451 41fc 434C5520 		.ascii	"CLU not started: selected CLU is empty!\015\000"
 3451      6E6F7420 
 3451      73746172 
 3451      7465643A 
 3451      2073656C 
 3452 4225 000000   		.align	2
 3453              	.LC557:
 3454 4228 434C5520 		.ascii	"CLU not started: energize the Gobee before!\015\000"
 3454      6E6F7420 
 3454      73746172 
 3454      7465643A 
 3454      20656E65 
 3455 4255 000000   		.align	2
 3456              	.LC558:
 3457 4258 636C7573 		.ascii	"cluseq\000"
 3457      657100
 3458 425f 00       		.align	2
 3459              	.LC559:
 3460 4260 0D0A5573 		.ascii	"\015\012User Abort!\015\000"
 3460      65722041 
 3460      626F7274 
 3460      210D00
 3461 426f 00       		.align	2
 3462              	.LC560:
 3463 4270 0D0A434C 		.ascii	"\015\012CLU SEQUENCE END!\015\000"
 3463      55205345 
 3463      5155454E 
 3463      43452045 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 110


 3463      4E44210D 
 3464 4285 000000   		.align	2
 3465              	.LC561:
 3466 4288 434C5553 		.ascii	"CLUSEQ not started: energize the Gobee before!\015\000"
 3466      4551206E 
 3466      6F742073 
 3466      74617274 
 3466      65643A20 
 3467              		.align	2
 3468              	.LC562:
 3469 42b8 676F746F 		.ascii	"gotohome\000"
 3469      686F6D65 
 3469      00
 3470 42c1 000000   		.align	2
 3471              	.LC563:
 3472 42c4 676F746F 		.ascii	"gotoh\000"
 3472      6800
 3473 42ca 0000     		.align	2
 3474              	.LC564:
 3475 42cc 476F746F 		.ascii	"Goto Home Mover START!\015\000"
 3475      20486F6D 
 3475      65204D6F 
 3475      76657220 
 3475      53544152 
 3476              		.align	2
 3477              	.LC565:
 3478 42e4 0D0A476F 		.ascii	"\015\012Goto Home Mover END!\015\000"
 3478      746F2048 
 3478      6F6D6520 
 3478      4D6F7665 
 3478      7220454E 
 3479              		.align	2
 3480              	.LC566:
 3481 42fc 476F746F 		.ascii	"Goto Home Mover Not Started: energize the Gobee bef"
 3481      20486F6D 
 3481      65204D6F 
 3481      76657220 
 3481      4E6F7420 
 3482 432f 6F726521 		.ascii	"ore!\015\000"
 3482      0D00
 3483 4335 000000   		.align	2
 3484              	.LC567:
 3485 4338 676F746F 		.ascii	"gotoq\000"
 3485      7100
 3486 433e 0000     		.align	2
 3487              	.LC568:
 3488 4340 6700     		.ascii	"g\000"
 3489              		.global	__aeabi_fcmpge
 3490              		.global	__aeabi_fcmple
 3491              		.global	__aeabi_fcmpeq
 3492 4342 0000     		.align	2
 3493              	.LC569:
 3494 4344 476F746F 		.ascii	"Goto Q Mover START!\015\000"
 3494      2051204D 
 3494      6F766572 
 3494      20535441 
 3494      5254210D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 111


 3495 4359 000000   		.align	2
 3496              	.LC570:
 3497 435c 0D0A476F 		.ascii	"\015\012Goto Q Mover END!\015\000"
 3497      746F2051 
 3497      204D6F76 
 3497      65722045 
 3497      4E44210D 
 3498 4371 000000   		.align	2
 3499              	.LC571:
 3500 4374 476F746F 		.ascii	"Goto Q Mover Not Started: QMemory %02d NOT ALLOCATE"
 3500      2051204D 
 3500      6F766572 
 3500      204E6F74 
 3500      20537461 
 3501 43a7 44210D0A 		.ascii	"D!\015\012\000"
 3501      00
 3502              		.align	2
 3503              	.LC572:
 3504 43ac 476F746F 		.ascii	"Goto Q Mover Not Started: energize the Gobee before"
 3504      2051204D 
 3504      6F766572 
 3504      204E6F74 
 3504      20537461 
 3505 43df 210D00   		.ascii	"!\015\000"
 3506 43e2 0000     		.align	2
 3507              	.LC573:
 3508 43e4 476F746F 		.ascii	"Goto Q Mover Not Started: Q maximum is 99!\015\000"
 3508      2051204D 
 3508      6F766572 
 3508      204E6F74 
 3508      20537461 
 3509              		.align	2
 3510              	.LC574:
 3511 4410 23455252 		.ascii	"#ERROR2: More parameters needed!\000"
 3511      4F52323A 
 3511      204D6F72 
 3511      65207061 
 3511      72616D65 
 3512 4431 000000   		.align	2
 3513              	.LC575:
 3514 4434 64697265 		.ascii	"director\000"
 3514      63746F72 
 3514      00
 3515 443d 000000   		.align	2
 3516              	.LC576:
 3517 4440 64697200 		.ascii	"dir\000"
 3518              		.align	2
 3519              	.LC577:
 3520 4444 2A20476F 		.ascii	"* Gobee Director Number setted to %2u: \000"
 3520      62656520 
 3520      44697265 
 3520      63746F72 
 3520      204E756D 
 3521              		.align	2
 3522              	.LC578:
 3523 446c 6D6F6465 		.ascii	"mode\000"
 3523      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 112


 3524 4471 000000   		.align	2
 3525              	.LC579:
 3526 4474 2A20476F 		.ascii	"* Gobee machine mode setted to %2u\000"
 3526      62656520 
 3526      6D616368 
 3526      696E6520 
 3526      6D6F6465 
 3527 4497 00       		.align	2
 3528              	.LC580:
 3529 4498 706F6C61 		.ascii	"polarityp\000"
 3529      72697479 
 3529      7000
 3530 44a2 0000     		.align	2
 3531              	.LC581:
 3532 44a4 706F6C70 		.ascii	"polp\000"
 3532      00
 3533 44a9 000000   		.align	2
 3534              	.LC582:
 3535 44ac 2A205061 		.ascii	"* Pan Motor Polarity setted to %2u\000"
 3535      6E204D6F 
 3535      746F7220 
 3535      506F6C61 
 3535      72697479 
 3536 44cf 00       		.align	2
 3537              	.LC583:
 3538 44d0 706F6C61 		.ascii	"polarityt\000"
 3538      72697479 
 3538      7400
 3539 44da 0000     		.align	2
 3540              	.LC584:
 3541 44dc 706F6C74 		.ascii	"polt\000"
 3541      00
 3542 44e1 000000   		.align	2
 3543              	.LC585:
 3544 44e4 2A205469 		.ascii	"* Tilt Motor Polarity setted to %2u\000"
 3544      6C74204D 
 3544      6F746F72 
 3544      20506F6C 
 3544      61726974 
 3545              		.align	2
 3546              	.LC586:
 3547 4508 6C696D69 		.ascii	"limitcp\000"
 3547      74637000 
 3548              		.align	2
 3549              	.LC587:
 3550 4510 6C637000 		.ascii	"lcp\000"
 3551              		.align	2
 3552              	.LC588:
 3553 4514 2A205061 		.ascii	"* Pan Motor Limit Control setted to %2u\000"
 3553      6E204D6F 
 3553      746F7220 
 3553      4C696D69 
 3553      7420436F 
 3554              		.align	2
 3555              	.LC589:
 3556 453c 696E7661 		.ascii	"invabsp\000"
 3556      62737000 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 113


 3557              		.align	2
 3558              	.LC590:
 3559 4544 696E7670 		.ascii	"invp\000"
 3559      00
 3560 4549 000000   		.align	2
 3561              	.LC591:
 3562 454c 2A205061 		.ascii	"* Pan Absolute Sensor Invertion setted to %2u\015\012"
 3562      6E204162 
 3562      736F6C75 
 3562      74652053 
 3562      656E736F 
 3563 457b 00       		.ascii	"\000"
 3564              		.align	2
 3565              	.LC592:
 3566 457c 7A65726F 		.ascii	"zeroabsp\000"
 3566      61627370 
 3566      00
 3567 4585 000000   		.align	2
 3568              	.LC593:
 3569 4588 7A7000   		.ascii	"zp\000"
 3570 458b 00       		.align	2
 3571              	.LC594:
 3572 458c 2A205761 		.ascii	"* Warning! Put PAN Axis to zero (HOME) position and"
 3572      726E696E 
 3572      67212050 
 3572      75742050 
 3572      414E2041 
 3573 45bf 20707265 		.ascii	" press y!\000"
 3573      73732079 
 3573      2100
 3574 45c9 000000   		.align	2
 3575              	.LC595:
 3576 45cc 0D0A2A20 		.ascii	"\015\012* Statistics start!\015\000"
 3576      53746174 
 3576      69737469 
 3576      63732073 
 3576      74617274 
 3577 45e3 00       		.align	2
 3578              	.LC596:
 3579 45e4 2A205374 		.ascii	"* Statistics stop!\015\000"
 3579      61746973 
 3579      74696373 
 3579      2073746F 
 3579      70210D00 
 3580              		.align	2
 3581              	.LC597:
 3582 45f8 2A205061 		.ascii	"* Pan Absolute Sensor ZERO POSITION (HOME) setted t"
 3582      6E204162 
 3582      736F6C75 
 3582      74652053 
 3582      656E736F 
 3583 462b 6F20252B 		.ascii	"o %+6d [adc raw]\015\012\000"
 3583      3664205B 
 3583      61646320 
 3583      7261775D 
 3583      0D0A00
 3584 463e 0000     		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 114


 3585              	.LC598:
 3586 4640 0D0A2A20 		.ascii	"\015\012* Pan Absolute Sensor position not sampled!"
 3586      50616E20 
 3586      4162736F 
 3586      6C757465 
 3586      2053656E 
 3587 466d 0D00     		.ascii	"\015\000"
 3588 466f 00       		.align	2
 3589              	.LC599:
 3590 4670 6C696D69 		.ascii	"limitminp\000"
 3590      746D696E 
 3590      7000
 3591 467a 0000     		.align	2
 3592              	.LC600:
 3593 467c 6C6D696E 		.ascii	"lminp\000"
 3593      7000
 3594 4682 0000     		.align	2
 3595              	.LC601:
 3596 4684 2A205761 		.ascii	"* Warning! Put PAN Axis to limit MIN position and p"
 3596      726E696E 
 3596      67212050 
 3596      75742050 
 3596      414E2041 
 3597 46b7 72657373 		.ascii	"ress y!\000"
 3597      20792100 
 3598 46bf 00       		.align	2
 3599              	.LC602:
 3600 46c0 2A205061 		.ascii	"* Pan Absolute Sensor Limit MIN setted to %+6d [adc"
 3600      6E204162 
 3600      736F6C75 
 3600      74652053 
 3600      656E736F 
 3601 46f3 20726177 		.ascii	" raw]\015\012\000"
 3601      5D0D0A00 
 3602 46fb 00       		.align	2
 3603              	.LC603:
 3604 46fc 6C696D69 		.ascii	"limitmaxp\000"
 3604      746D6178 
 3604      7000
 3605 4706 0000     		.align	2
 3606              	.LC604:
 3607 4708 6C6D6178 		.ascii	"lmaxp\000"
 3607      7000
 3608 470e 0000     		.align	2
 3609              	.LC605:
 3610 4710 2A205761 		.ascii	"* Warning! Put PAN Axis to limit MAX position and p"
 3610      726E696E 
 3610      67212050 
 3610      75742050 
 3610      414E2041 
 3611 4743 72657373 		.ascii	"ress y!\000"
 3611      20792100 
 3612 474b 00       		.align	2
 3613              	.LC606:
 3614 474c 2A205061 		.ascii	"* Pan Absolute Sensor Limit MAX setted to %+6d [adc"
 3614      6E204162 
 3614      736F6C75 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 115


 3614      74652053 
 3614      656E736F 
 3615 477f 20726177 		.ascii	" raw]\015\012\000"
 3615      5D0D0A00 
 3616 4787 00       		.align	2
 3617              	.LC607:
 3618 4788 6C696D69 		.ascii	"limithystp\000"
 3618      74687973 
 3618      747000
 3619 4793 00       		.align	2
 3620              	.LC608:
 3621 4794 6C687973 		.ascii	"lhystp\000"
 3621      747000
 3622 479b 00       		.align	2
 3623              	.LC609:
 3624 479c 2A205061 		.ascii	"* Pan Absolute Sensor Limit Hysteresis setted to %+"
 3624      6E204162 
 3624      736F6C75 
 3624      74652053 
 3624      656E736F 
 3625 47cf 3664205B 		.ascii	"6d [adc raw]\015\012\000"
 3625      61646320 
 3625      7261775D 
 3625      0D0A00
 3626 47de 0000     		.align	2
 3627              	.LC610:
 3628 47e0 2A205061 		.ascii	"* Pan Encoder over Absolute Sensor ratio setted to "
 3628      6E20456E 
 3628      636F6465 
 3628      72206F76 
 3628      65722041 
 3629 4813 252B322E 		.ascii	"%+2.6f [adc raw/step]\015\012\000"
 3629      3666205B 
 3629      61646320 
 3629      7261772F 
 3629      73746570 
 3630 482b 00       		.align	2
 3631              	.LC611:
 3632 482c 6C696D69 		.ascii	"limitct\000"
 3632      74637400 
 3633              		.align	2
 3634              	.LC612:
 3635 4834 6C637400 		.ascii	"lct\000"
 3636              		.align	2
 3637              	.LC613:
 3638 4838 2A205469 		.ascii	"* Tilt Motor Limit Control setted to %2u\000"
 3638      6C74204D 
 3638      6F746F72 
 3638      204C696D 
 3638      69742043 
 3639 4861 000000   		.align	2
 3640              	.LC614:
 3641 4864 696E7661 		.ascii	"invabst\000"
 3641      62737400 
 3642              		.align	2
 3643              	.LC615:
 3644 486c 696E7674 		.ascii	"invt\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 116


 3644      00
 3645 4871 000000   		.align	2
 3646              	.LC616:
 3647 4874 2A205469 		.ascii	"* Tilt Absolute Sensor Invertion setted to %2u\015\012"
 3647      6C742041 
 3647      62736F6C 
 3647      75746520 
 3647      53656E73 
 3648 48a4 00       		.ascii	"\000"
 3649 48a5 000000   		.align	2
 3650              	.LC617:
 3651 48a8 7A65726F 		.ascii	"zeroabst\000"
 3651      61627374 
 3651      00
 3652 48b1 000000   		.align	2
 3653              	.LC618:
 3654 48b4 7A7400   		.ascii	"zt\000"
 3655 48b7 00       		.align	2
 3656              	.LC619:
 3657 48b8 2A205761 		.ascii	"* Warning! Put TILT Axis to zero (HOME) position an"
 3657      726E696E 
 3657      67212050 
 3657      75742054 
 3657      494C5420 
 3658 48eb 64207072 		.ascii	"d press y!\000"
 3658      65737320 
 3658      792100
 3659 48f6 0000     		.align	2
 3660              	.LC620:
 3661 48f8 2A205469 		.ascii	"* Tilt Absolute Sensor ZERO POSITION (HOME) setted "
 3661      6C742041 
 3661      62736F6C 
 3661      75746520 
 3661      53656E73 
 3662 492b 746F2025 		.ascii	"to %+6d [adc raw]\015\012\000"
 3662      2B366420 
 3662      5B616463 
 3662      20726177 
 3662      5D0D0A00 
 3663 493f 00       		.align	2
 3664              	.LC621:
 3665 4940 0D0A2A20 		.ascii	"\015\012* Tilt Absolute Sensor position not sampled"
 3665      54696C74 
 3665      20416273 
 3665      6F6C7574 
 3665      65205365 
 3666 496d 210D00   		.ascii	"!\015\000"
 3667              		.align	2
 3668              	.LC622:
 3669 4970 6C696D69 		.ascii	"limitmint\000"
 3669      746D696E 
 3669      7400
 3670 497a 0000     		.align	2
 3671              	.LC623:
 3672 497c 6C6D696E 		.ascii	"lmint\000"
 3672      7400
 3673 4982 0000     		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 117


 3674              	.LC624:
 3675 4984 2A205761 		.ascii	"* Warning! Put TILT Axis to limit MIN position and "
 3675      726E696E 
 3675      67212050 
 3675      75742054 
 3675      494C5420 
 3676 49b7 70726573 		.ascii	"press y!\000"
 3676      73207921 
 3676      00
 3677              		.align	2
 3678              	.LC625:
 3679 49c0 2A205469 		.ascii	"* Tilt Absolute Sensor Limit MIN setted to %+6d [ad"
 3679      6C742041 
 3679      62736F6C 
 3679      75746520 
 3679      53656E73 
 3680 49f3 63207261 		.ascii	"c raw]\015\012\000"
 3680      775D0D0A 
 3680      00
 3681              		.align	2
 3682              	.LC626:
 3683 49fc 6C696D69 		.ascii	"limitmaxt\000"
 3683      746D6178 
 3683      7400
 3684 4a06 0000     		.align	2
 3685              	.LC627:
 3686 4a08 6C6D6178 		.ascii	"lmaxt\000"
 3686      7400
 3687 4a0e 0000     		.align	2
 3688              	.LC628:
 3689 4a10 2A205761 		.ascii	"* Warning! Put TILT Axis to limit MAX position and "
 3689      726E696E 
 3689      67212050 
 3689      75742054 
 3689      494C5420 
 3690 4a43 70726573 		.ascii	"press y!\000"
 3690      73207921 
 3690      00
 3691              		.align	2
 3692              	.LC629:
 3693 4a4c 2A205469 		.ascii	"* Tilt Absolute Sensor Limit MAX setted to %+6d [ad"
 3693      6C742041 
 3693      62736F6C 
 3693      75746520 
 3693      53656E73 
 3694 4a7f 63207261 		.ascii	"c raw]\015\012\000"
 3694      775D0D0A 
 3694      00
 3695              		.align	2
 3696              	.LC630:
 3697 4a88 6C696D69 		.ascii	"limithystt\000"
 3697      74687973 
 3697      747400
 3698 4a93 00       		.align	2
 3699              	.LC631:
 3700 4a94 6C687973 		.ascii	"lhystt\000"
 3700      747400
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 118


 3701 4a9b 00       		.align	2
 3702              	.LC632:
 3703 4a9c 2A205469 		.ascii	"* Tilt Absolute Sensor Limit Hysteresis setted to %"
 3703      6C742041 
 3703      62736F6C 
 3703      75746520 
 3703      53656E73 
 3704 4acf 2B366420 		.ascii	"+6d [adc raw]\015\012\000"
 3704      5B616463 
 3704      20726177 
 3704      5D0D0A00 
 3705 4adf 00       		.align	2
 3706              	.LC633:
 3707 4ae0 2A205469 		.ascii	"* Tilt Encoder over Absolute Sensor ratio setted to"
 3707      6C742045 
 3707      6E636F64 
 3707      6572206F 
 3707      76657220 
 3708 4b13 20252B32 		.ascii	" %+2.6f [adc raw/step]\015\012\000"
 3708      2E366620 
 3708      5B616463 
 3708      20726177 
 3708      2F737465 
 3709              		.align	2
 3710              	.LC634:
 3711 4b2c 696D7569 		.ascii	"imuinvyaw\000"
 3711      6E767961 
 3711      7700
 3712 4b36 0000     		.align	2
 3713              	.LC635:
 3714 4b38 696D7579 		.ascii	"imuy\000"
 3714      00
 3715 4b3d 000000   		.align	2
 3716              	.LC636:
 3717 4b40 2A20496E 		.ascii	"* Invertion Yaw setted to %1u\015\012\000"
 3717      76657274 
 3717      696F6E20 
 3717      59617720 
 3717      73657474 
 3718              		.align	2
 3719              	.LC637:
 3720 4b60 696D7569 		.ascii	"imuinvpitch\000"
 3720      6E767069 
 3720      74636800 
 3721              		.align	2
 3722              	.LC638:
 3723 4b6c 696D7570 		.ascii	"imup\000"
 3723      00
 3724 4b71 000000   		.align	2
 3725              	.LC639:
 3726 4b74 2A20496E 		.ascii	"* Invertion Pitch setted to %1u\015\012\000"
 3726      76657274 
 3726      696F6E20 
 3726      50697463 
 3726      68207365 
 3727 4b96 0000     		.align	2
 3728              	.LC640:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 119


 3729 4b98 696D7569 		.ascii	"imuinvroll\000"
 3729      6E76726F 
 3729      6C6C00
 3730 4ba3 00       		.align	2
 3731              	.LC641:
 3732 4ba4 696D7572 		.ascii	"imur\000"
 3732      00
 3733 4ba9 000000   		.align	2
 3734              	.LC642:
 3735 4bac 2A20496E 		.ascii	"* Invertion Roll setted to %1u\015\012\000"
 3735      76657274 
 3735      696F6E20 
 3735      526F6C6C 
 3735      20736574 
 3736 4bcd 000000   		.align	2
 3737              	.LC643:
 3738 4bd0 70726578 		.ascii	"prexchange\000"
 3738      6368616E 
 3738      676500
 3739 4bdb 00       		.align	2
 3740              	.LC644:
 3741 4bdc 70726578 		.ascii	"prex\000"
 3741      00
 3742 4be1 000000   		.align	2
 3743              	.LC645:
 3744 4be4 2A204578 		.ascii	"* Exchange Pitch Roll setted to %1u\015\012\000"
 3744      6368616E 
 3744      67652050 
 3744      69746368 
 3744      20526F6C 
 3745 4c0a 0000     		.align	2
 3746              	.LC646:
 3747 4c0c 636C6561 		.ascii	"clear\000"
 3747      7200
 3748 4c12 0000     		.align	2
 3749              	.LC647:
 3750 4c14 6300     		.ascii	"c\000"
 3751 4c16 0000     		.align	2
 3752              	.LC648:
 3753 4c18 0D0A2A20 		.ascii	"\015\012* Q%02d element (shot) Cleared!\015\012\000"
 3753      51253032 
 3753      6420656C 
 3753      656D656E 
 3753      74202873 
 3754              		.align	2
 3755              	.LC649:
 3756 4c3c 23455252 		.ascii	"#ERROR7: EEPROM row out of bounds!\000"
 3756      4F52373A 
 3756      20454550 
 3756      524F4D20 
 3756      726F7720 
 3757 4c5f 00       		.align	2
 3758              	.LC650:
 3759 4c60 0D0A2A20 		.ascii	"\015\012* Nothing to clear: Q element is not alloca"
 3759      4E6F7468 
 3759      696E6720 
 3759      746F2063 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 120


 3759      6C656172 
 3760 4c8d 74656421 		.ascii	"ted!\015\000"
 3760      0D00
 3761 4c93 00       		.align	2
 3762              	.LC651:
 3763 4c94 2A205761 		.ascii	"* Warning! Put All Axes to desired position and pre"
 3763      726E696E 
 3763      67212050 
 3763      75742041 
 3763      6C6C2041 
 3764 4cc7 73732079 		.ascii	"ss y!\000"
 3764      2100
 3765 4ccd 000000   		.align	2
 3766              	.LC652:
 3767 4cd0 0D0A2A20 		.ascii	"\015\012* Q%02d element (shot) ABS position setted "
 3767      51253032 
 3767      6420656C 
 3767      656D656E 
 3767      74202873 
 3768 4cfd 746F3A20 		.ascii	"to: pan=%+ld [step]   tilt=%+ld [step] and saved to"
 3768      70616E3D 
 3768      252B6C64 
 3768      205B7374 
 3768      65705D20 
 3769 4d30 204D656D 		.ascii	" Memory%2d\015\012\000"
 3769      6F727925 
 3769      32640D0A 
 3769      00
 3770 4d3d 000000   		.align	2
 3771              	.LC653:
 3772 4d40 0D0A2A20 		.ascii	"\015\012* Q element (shot) position not sampled!\015"
 3772      5120656C 
 3772      656D656E 
 3772      74202873 
 3772      686F7429 
 3773 4d6b 00       		.ascii	"\000"
 3774              		.align	2
 3775              	.LC654:
 3776 4d6c 6B707000 		.ascii	"kpp\000"
 3777              		.align	2
 3778              	.LC655:
 3779 4d70 2A205061 		.ascii	"* Pan Motor Kp setted to %1.4f\000"
 3779      6E204D6F 
 3779      746F7220 
 3779      4B702073 
 3779      65747465 
 3780 4d8f 00       		.align	2
 3781              	.LC656:
 3782 4d90 6B707400 		.ascii	"kpt\000"
 3783              		.align	2
 3784              	.LC657:
 3785 4d94 2A205469 		.ascii	"* Tilt Motor Kp setted to %1.4f\000"
 3785      6C74204D 
 3785      6F746F72 
 3785      204B7020 
 3785      73657474 
 3786              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 121


 3787              	.LC658:
 3788 4db4 6B647000 		.ascii	"kdp\000"
 3789              		.align	2
 3790              	.LC659:
 3791 4db8 2A205061 		.ascii	"* Pan Motor Kd setted to %1.4f\000"
 3791      6E204D6F 
 3791      746F7220 
 3791      4B642073 
 3791      65747465 
 3792 4dd7 00       		.align	2
 3793              	.LC660:
 3794 4dd8 6B647400 		.ascii	"kdt\000"
 3795              		.align	2
 3796              	.LC661:
 3797 4ddc 2A205469 		.ascii	"* Tilt Motor Kd setted to %1.4f\000"
 3797      6C74204D 
 3797      6F746F72 
 3797      204B6420 
 3797      73657474 
 3798              		.align	2
 3799              	.LC662:
 3800 4dfc 6B697000 		.ascii	"kip\000"
 3801              		.align	2
 3802              	.LC663:
 3803 4e00 2A205061 		.ascii	"* Pan Motor Ki setted to %1.4f\000"
 3803      6E204D6F 
 3803      746F7220 
 3803      4B692073 
 3803      65747465 
 3804 4e1f 00       		.align	2
 3805              	.LC664:
 3806 4e20 6B697400 		.ascii	"kit\000"
 3807              		.align	2
 3808              	.LC665:
 3809 4e24 2A205469 		.ascii	"* Tilt Motor Ki setted to %1.4f\000"
 3809      6C74204D 
 3809      6F746F72 
 3809      204B6920 
 3809      73657474 
 3810              		.align	2
 3811              	.LC666:
 3812 4e44 6B736970 		.ascii	"ksip\000"
 3812      00
 3813 4e49 000000   		.align	2
 3814              	.LC667:
 3815 4e4c 2A205061 		.ascii	"* Pan Motor Ksi setted to %1.4f\000"
 3815      6E204D6F 
 3815      746F7220 
 3815      4B736920 
 3815      73657474 
 3816              		.align	2
 3817              	.LC668:
 3818 4e6c 6B736974 		.ascii	"ksit\000"
 3818      00
 3819 4e71 000000   		.align	2
 3820              	.LC669:
 3821 4e74 2A205469 		.ascii	"* Tilt Motor Ksi setted to %1.4f\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 122


 3821      6C74204D 
 3821      6F746F72 
 3821      204B7369 
 3821      20736574 
 3822 4e95 000000   		.align	2
 3823              	.LC670:
 3824 4e98 616E616F 		.ascii	"anaoutaxis\000"
 3824      75746178 
 3824      697300
 3825 4ea3 00       		.align	2
 3826              	.LC671:
 3827 4ea4 61617869 		.ascii	"aaxis\000"
 3827      7300
 3828 4eaa 0000     		.align	2
 3829              	.LC672:
 3830 4eac 70616E00 		.ascii	"pan\000"
 3831              		.align	2
 3832              	.LC673:
 3833 4eb0 74696C74 		.ascii	"tilt\000"
 3833      00
 3834 4eb5 000000   		.align	2
 3835              	.LC674:
 3836 4eb8 2A20416E 		.ascii	"* Anaout Axis setted to PAN\015\000"
 3836      616F7574 
 3836      20417869 
 3836      73207365 
 3836      74746564 
 3837 4ed5 000000   		.align	2
 3838              	.LC675:
 3839 4ed8 2A20414E 		.ascii	"* ANAPOS ZERO!\015\000"
 3839      41504F53 
 3839      205A4552 
 3839      4F210D00 
 3840              		.align	2
 3841              	.LC676:
 3842 4ee8 2A20416E 		.ascii	"* Anaout Axis setted to TILT\015\000"
 3842      616F7574 
 3842      20417869 
 3842      73207365 
 3842      74746564 
 3843 4f06 0000     		.align	2
 3844              	.LC677:
 3845 4f08 23455252 		.ascii	"#ERROR6: Axis may be [pan,tilt]!\000"
 3845      4F52363A 
 3845      20417869 
 3845      73206D61 
 3845      79206265 
 3846 4f29 000000   		.align	2
 3847              	.LC678:
 3848 4f2c 636F6C6F 		.ascii	"colorp\000"
 3848      727000
 3849 4f33 00       		.align	2
 3850              	.LC679:
 3851 4f34 2A205061 		.ascii	"* Pan Motor Analog Output Color setted to \000"
 3851      6E204D6F 
 3851      746F7220 
 3851      416E616C 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 123


 3851      6F67204F 
 3852 4f5f 00       		.align	2
 3853              	.LC680:
 3854 4f60 636F6C6F 		.ascii	"colort\000"
 3854      727400
 3855 4f67 00       		.align	2
 3856              	.LC681:
 3857 4f68 2A205469 		.ascii	"* Tilt Motor Analog Output Color setted to \000"
 3857      6C74204D 
 3857      6F746F72 
 3857      20416E61 
 3857      6C6F6720 
 3858              		.align	2
 3859              	.LC682:
 3860 4f94 6B6F7066 		.ascii	"kopfp\000"
 3860      7000
 3861 4f9a 0000     		.align	2
 3862              	.LC683:
 3863 4f9c 2A205061 		.ascii	"* Pan Motor Kopf setted to %1.4f\000"
 3863      6E204D6F 
 3863      746F7220 
 3863      4B6F7066 
 3863      20736574 
 3864 4fbd 000000   		.align	2
 3865              	.LC684:
 3866 4fc0 6B6F7066 		.ascii	"kopft\000"
 3866      7400
 3867 4fc6 0000     		.align	2
 3868              	.LC685:
 3869 4fc8 2A205469 		.ascii	"* Tilt Motor Kopf setted to %1.4f\000"
 3869      6C74204D 
 3869      6F746F72 
 3869      204B6F70 
 3869      66207365 
 3870 4fea 0000     		.align	2
 3871              	.LC686:
 3872 4fec 61676169 		.ascii	"againp\000"
 3872      6E7000
 3873 4ff3 00       		.align	2
 3874              	.LC687:
 3875 4ff4 2A205061 		.ascii	"* Pan Motor Analog Output Gain setted to %1.4f\000"
 3875      6E204D6F 
 3875      746F7220 
 3875      416E616C 
 3875      6F67204F 
 3876 5023 00       		.align	2
 3877              	.LC688:
 3878 5024 61676169 		.ascii	"againt\000"
 3878      6E7400
 3879 502b 00       		.align	2
 3880              	.LC689:
 3881 502c 2A205469 		.ascii	"* Tilt Motor Analog Output Gain setted to %1.4f\000"
 3881      6C74204D 
 3881      6F746F72 
 3881      20416E61 
 3881      6C6F6720 
 3882              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 124


 3883              	.LC690:
 3884 505c 61616378 		.ascii	"aacxoffset\000"
 3884      6F666673 
 3884      657400
 3885 5067 00       		.align	2
 3886              	.LC691:
 3887 5068 61616378 		.ascii	"aacxof\000"
 3887      6F6600
 3888 506f 00       		.align	2
 3889              	.LC692:
 3890 5070 2A20416E 		.ascii	"* Analog Accel. X Axis ADC Offset setted to %4i\000"
 3890      616C6F67 
 3890      20416363 
 3890      656C2E20 
 3890      58204178 
 3891              		.align	2
 3892              	.LC693:
 3893 50a0 61616379 		.ascii	"aacyoffset\000"
 3893      6F666673 
 3893      657400
 3894 50ab 00       		.align	2
 3895              	.LC694:
 3896 50ac 61616379 		.ascii	"aacyof\000"
 3896      6F6600
 3897 50b3 00       		.align	2
 3898              	.LC695:
 3899 50b4 2A20416E 		.ascii	"* Analog Accel. Y Axis ADC Offset setted to %4i\000"
 3899      616C6F67 
 3899      20416363 
 3899      656C2E20 
 3899      59204178 
 3900              		.align	2
 3901              	.LC696:
 3902 50e4 6161637A 		.ascii	"aaczoffset\000"
 3902      6F666673 
 3902      657400
 3903 50ef 00       		.align	2
 3904              	.LC697:
 3905 50f0 6161637A 		.ascii	"aaczof\000"
 3905      6F6600
 3906 50f7 00       		.align	2
 3907              	.LC698:
 3908 50f8 2A20416E 		.ascii	"* Analog Accel. Z Axis ADC Offset setted to %4i\000"
 3908      616C6F67 
 3908      20416363 
 3908      656C2E20 
 3908      5A204178 
 3909              		.align	2
 3910              	.LC699:
 3911 5128 62657461 		.ascii	"beta\000"
 3911      00
 3912 512d 000000   		.align	2
 3913              	.LC700:
 3914 5130 2A206265 		.ascii	"* beta (accelerometer LPF) setted to %+1.9f\000"
 3914      74612028 
 3914      61636365 
 3914      6C65726F 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 125


 3914      6D657465 
 3915              		.align	2
 3916              	.LC701:
 3917 515c 67616D6D 		.ascii	"gamma\000"
 3917      6100
 3918 5162 0000     		.align	2
 3919              	.LC702:
 3920 5164 2A206761 		.ascii	"* gamma (IMU LPF) setted to %+1.9f\000"
 3920      6D6D6120 
 3920      28494D55 
 3920      204C5046 
 3920      29207365 
 3921 5187 00       		.align	2
 3922              	.LC703:
 3923 5188 6A756D70 		.ascii	"jumpth\000"
 3923      746800
 3924 518f 00       		.align	2
 3925              	.LC704:
 3926 5190 2A204A75 		.ascii	"* Jump G Threshold setted to %+1.4f[g]\000"
 3926      6D702047 
 3926      20546872 
 3926      6573686F 
 3926      6C642073 
 3927 51b7 00       		.align	2
 3928              	.LC705:
 3929 51b8 61636374 		.ascii	"accth\000"
 3929      6800
 3930 51be 0000     		.align	2
 3931              	.LC706:
 3932 51c0 2A204163 		.ascii	"* Acceleration G Threshold setted to %+1.4f[g]\000"
 3932      63656C65 
 3932      72617469 
 3932      6F6E2047 
 3932      20546872 
 3933 51ef 00       		.align	2
 3934              	.LC707:
 3935 51f0 61737479 		.ascii	"astype\000"
 3935      706500
 3936 51f7 00       		.align	2
 3937              	.LC708:
 3938 51f8 61737469 		.ascii	"astimtype\000"
 3938      6D747970 
 3938      6500
 3939 5202 0000     		.align	2
 3940              	.LC709:
 3941 5204 2A205061 		.ascii	"* Pan  Astim Type setted to %1u\015\012\000"
 3941      6E202041 
 3941      7374696D 
 3941      20547970 
 3941      65207365 
 3942 5226 0000     		.align	2
 3943              	.LC710:
 3944 5228 2A205469 		.ascii	"* Tilt Astim Type setted to %1u\015\012\000"
 3944      6C742041 
 3944      7374696D 
 3944      20547970 
 3944      65207365 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 126


 3945 524a 0000     		.align	2
 3946              	.LC711:
 3947 524c 53696E65 		.ascii	"Sine Wave Astim Started!\015\000"
 3947      20576176 
 3947      65204173 
 3947      74696D20 
 3947      53746172 
 3948 5266 0000     		.align	2
 3949              	.LC712:
 3950 5268 54726961 		.ascii	"Triangle Wave Astim Started!\015\000"
 3950      6E676C65 
 3950      20576176 
 3950      65204173 
 3950      74696D20 
 3951 5286 0000     		.align	2
 3952              	.LC713:
 3953 5288 53717561 		.ascii	"Square Wave Astim Started!\015\000"
 3953      72652057 
 3953      61766520 
 3953      41737469 
 3953      6D205374 
 3954              		.align	2
 3955              	.LC714:
 3956 52a4 57617665 		.ascii	"Wave Astim Stopped!\015\000"
 3956      20417374 
 3956      696D2053 
 3956      746F7070 
 3956      6564210D 
 3957 52b9 000000   		.align	2
 3958              	.LC715:
 3959 52bc 61737469 		.ascii	"astimp\000"
 3959      6D7000
 3960 52c3 00       		.align	2
 3961              	.LC716:
 3962 52c4 44414E47 		.ascii	"DANGER!!! THIS COMMAND MAY PRODUCE LARGE MOVEMENTS!"
 3962      45522121 
 3962      21205448 
 3962      49532043 
 3962      4F4D4D41 
 3963 52f7 21210D00 		.ascii	"!!\015\000"
 3964 52fb 00       		.align	2
 3965              	.LC717:
 3966 52fc 41726520 		.ascii	"Are you sure to apply auto-stimulus [Y/N]?\000"
 3966      796F7520 
 3966      73757265 
 3966      20746F20 
 3966      6170706C 
 3967 5327 00       		.align	2
 3968              	.LC718:
 3969 5328 2A205061 		.ascii	"* Pan Astim Enable setted to %1u\015\012\000"
 3969      6E204173 
 3969      74696D20 
 3969      456E6162 
 3969      6C652073 
 3970 534b 00       		.align	2
 3971              	.LC719:
 3972 534c 61737469 		.ascii	"astimt\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 127


 3972      6D7400
 3973 5353 00       		.align	2
 3974              	.LC720:
 3975 5354 2A205469 		.ascii	"* Tilt Astim Enable setted to %1u\015\012\000"
 3975      6C742041 
 3975      7374696D 
 3975      20456E61 
 3975      626C6520 
 3976              		.align	2
 3977              	.LC721:
 3978 5378 23455252 		.ascii	"#ERROR4: Bad command!\000"
 3978      4F52343A 
 3978      20426164 
 3978      20636F6D 
 3978      6D616E64 
 3979 538e 0000     		.section	.text.parser,"ax",%progbits
 3980              		.align	2
 3981              		.global	parser
 3982              		.thumb
 3983              		.thumb_func
 3984              		.type	parser, %function
 3985              	parser:
 3986              	.LFB69:
 685:.\console.c   **** 
 686:.\console.c   **** 
 687:.\console.c   **** 
 688:.\console.c   **** 
 689:.\console.c   **** // ************************************************************************
 690:.\console.c   **** // *** PARSERIZER (pass 3 of 3)										    ***
 691:.\console.c   **** // ************************************************************************
 692:.\console.c   **** uint8 parser()
 693:.\console.c   **** {
 3987              		.loc 1 693 0
 3988              		.cfi_startproc
 3989              		@ args = 0, pretend = 0, frame = 280
 3990              		@ frame_needed = 1, uses_anonymous_args = 0
 3991 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3992              	.LCFI37:
 3993              		.cfi_def_cfa_offset 36
 3994              		.cfi_offset 4, -36
 3995              		.cfi_offset 5, -32
 3996              		.cfi_offset 6, -28
 3997              		.cfi_offset 7, -24
 3998              		.cfi_offset 8, -20
 3999              		.cfi_offset 9, -16
 4000              		.cfi_offset 10, -12
 4001              		.cfi_offset 11, -8
 4002              		.cfi_offset 14, -4
 4003 0004 D3B0     		sub	sp, sp, #332
 4004              	.LCFI38:
 4005              		.cfi_def_cfa_offset 368
 4006 0006 0CAF     		add	r7, sp, #48
 4007              	.LCFI39:
 4008              		.cfi_def_cfa 7, 320
 694:.\console.c   **** 	uint8 scanstat __attribute__ ((unused));
 695:.\console.c   **** 	
 696:.\console.c   **** 	uint8 director;			/* Director local								*/
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 128


 697:.\console.c   **** 	uint8 mode_loc;			/* Machine mode local							*/
 698:.\console.c   **** 	float beta=0;			/* beta local									*/	
 4009              		.loc 1 698 0
 4010 0008 4FF00003 		mov	r3, #0
 4011 000c C7F8F830 		str	r3, [r7, #248]	@ float
 699:.\console.c   **** 	float gamma=0;			/* gamma local									*/
 4012              		.loc 1 699 0
 4013 0010 4FF00003 		mov	r3, #0
 4014 0014 C7F8F430 		str	r3, [r7, #244]	@ float
 700:.\console.c   **** 	uint8 polarity=0;		/* Motor Polarity local							*/
 4015              		.loc 1 700 0
 4016 0018 4FF00003 		mov	r3, #0
 4017 001c 87F8F330 		strb	r3, [r7, #243]
 701:.\console.c   **** 	uint8 invertion=0;		/* IMU Invertion local							*/
 4018              		.loc 1 701 0
 4019 0020 4FF00003 		mov	r3, #0
 4020 0024 87F8F230 		strb	r3, [r7, #242]
 702:.\console.c   **** 	uint8 exchange=0;		/* IMU Exchange local							*/
 4021              		.loc 1 702 0
 4022 0028 4FF00003 		mov	r3, #0
 4023 002c 87F8F130 		strb	r3, [r7, #241]
 703:.\console.c   **** 	int16 offset=0;			/* generic int16 Offset							*/
 4024              		.loc 1 703 0
 4025 0030 4FF00003 		mov	r3, #0
 4026 0034 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 704:.\console.c   **** 	
 705:.\console.c   **** 	float Kp;				/* Kp local										*/
 706:.\console.c   **** 	float Kd;				/* Kd local										*/	
 707:.\console.c   **** 	float Ki;				/* Ki local										*/
 708:.\console.c   **** 	float Ksi;				/* Ksi local									*/	
 709:.\console.c   **** 	uint8 limit_control;	/* Limit Control local							*/
 710:.\console.c   **** 	uint8 raw_invertion;	/* raw invertion local							*/
 711:.\console.c   **** 	uint16 raw_limit_hyst; 	/* raw limit hysteresis local 					*/
 712:.\console.c   **** 	float step_abs_ratio;	/* encoder step/absolute sensor ratio local		*/
 713:.\console.c   **** 	float Kopf;				/* Kopf local									*/	
 714:.\console.c   **** 	float anaout_gain;		/* Analog Output Gain local						*/
 715:.\console.c   **** 	uint8 color;			/* color local									*/
 716:.\console.c   **** 	uint8 astim_type=0;		/* astim type loc								*/
 4027              		.loc 1 716 0
 4028 0038 4FF00003 		mov	r3, #0
 4029 003c 87F8ED30 		strb	r3, [r7, #237]
 717:.\console.c   **** 	uint8 astim_enable=0;	/* astim enable loc 							*/
 4030              		.loc 1 717 0
 4031 0040 4FF00003 		mov	r3, #0
 4032 0044 87F8EC30 		strb	r3, [r7, #236]
 718:.\console.c   **** 	uint8 path_n=0;			/* path number local							*/
 4033              		.loc 1 718 0
 4034 0048 4FF00003 		mov	r3, #0
 4035 004c 87F8EB30 		strb	r3, [r7, #235]
 719:.\console.c   **** 	uint8 clu_number=0;		/* clu number local								*/
 4036              		.loc 1 719 0
 4037 0050 4FF00003 		mov	r3, #0
 4038 0054 87F8EA30 		strb	r3, [r7, #234]
 720:.\console.c   **** 	uint8 clu_pause=0;		/* clu pause local								*/	
 4039              		.loc 1 720 0
 4040 0058 4FF00003 		mov	r3, #0
 4041 005c 87F8E930 		strb	r3, [r7, #233]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 129


 721:.\console.c   **** 	uint16 memory_number=0;	/* memory number local							*/
 4042              		.loc 1 721 0
 4043 0060 4FF00003 		mov	r3, #0
 4044 0064 A7F8E630 		strh	r3, [r7, #230]	@ movhi
 722:.\console.c   **** 	uint8 q_number=0;		/* q number local								*/	
 4045              		.loc 1 722 0
 4046 0068 4FF00003 		mov	r3, #0
 4047 006c 87F8E530 		strb	r3, [r7, #229]
 723:.\console.c   **** 	float time_loc=0;		/* time float local								*/
 4048              		.loc 1 723 0
 4049 0070 4FF00003 		mov	r3, #0
 4050 0074 C7F81431 		str	r3, [r7, #276]	@ float
 724:.\console.c   **** 	float jump_g_th=0;		/* jump G threshold local						*/
 4051              		.loc 1 724 0
 4052 0078 4FF00003 		mov	r3, #0
 4053 007c C7F8E030 		str	r3, [r7, #224]	@ float
 725:.\console.c   **** 	float acc_g_th=0;		/* acceleration G threshold local				*/
 4054              		.loc 1 725 0
 4055 0080 4FF00003 		mov	r3, #0
 4056 0084 C7F8DC30 		str	r3, [r7, #220]	@ float
 726:.\console.c   **** 	
 727:.\console.c   **** 
 728:.\console.c   **** 	uint8 dummy __attribute__ ((unused));
 729:.\console.c   **** 	uint8 idx=0;
 4057              		.loc 1 729 0
 4058 0088 4FF00003 		mov	r3, #0
 4059 008c 87F81331 		strb	r3, [r7, #275]
 730:.\console.c   **** 	uint8 get_key=0;
 4060              		.loc 1 730 0
 4061 0090 4FF00003 		mov	r3, #0
 4062 0094 87F81231 		strb	r3, [r7, #274]
 731:.\console.c   **** 
 732:.\console.c   **** 	
 733:.\console.c   **** 	/* Scanner */
 734:.\console.c   **** 	scanstat = scanner2(VERBOSE_OFF);
 4063              		.loc 1 734 0
 4064 0098 4FF00000 		mov	r0, #0
 4065 009c FFF7FEFF 		bl	scanner2
 4066 00a0 0346     		mov	r3, r0
 4067 00a2 87F8DB30 		strb	r3, [r7, #219]
 735:.\console.c   **** 
 736:.\console.c   **** 	
 737:.\console.c   **** 	//=====================================================================//
 738:.\console.c   **** 	//=== COMMANDS PARSING 												===//
 739:.\console.c   **** 	//=====================================================================//
 740:.\console.c   **** 
 741:.\console.c   **** 	/* CMD 'BOOT' */	
 742:.\console.c   **** 	if (strcmp(actual_cmd.action, "boot") == 0)
 4068              		.loc 1 742 0
 4069 00a6 40F20000 		movw	r0, #:lower16:actual_cmd
 4070 00aa C0F20000 		movt	r0, #:upper16:actual_cmd
 4071 00ae 40F20001 		movw	r1, #:lower16:.LC78
 4072 00b2 C0F20001 		movt	r1, #:upper16:.LC78
 4073 00b6 FFF7FEFF 		bl	strcmp
 4074 00ba 0346     		mov	r3, r0
 4075 00bc 002B     		cmp	r3, #0
 4076 00be 2CD1     		bne	.L127
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 130


 743:.\console.c   **** 	{
 744:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4077              		.loc 1 744 0
 4078 00c0 DC4B     		ldr	r3, .L706
 4079 00c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4080 00c4 002B     		cmp	r3, #0
 4081 00c6 20D1     		bne	.L128
 745:.\console.c   **** 		{
 746:.\console.c   **** 			printf("\r\nAre you sure to start Bootload [Y/N]?");		
 4082              		.loc 1 746 0
 4083 00c8 40F20000 		movw	r0, #:lower16:.LC79
 4084 00cc C0F20000 		movt	r0, #:upper16:.LC79
 4085 00d0 FFF7FEFF 		bl	printf
 747:.\console.c   **** 			if (ButtonYNChoice(ECHO_OFF) == _YES)
 4086              		.loc 1 747 0
 4087 00d4 4FF00000 		mov	r0, #0
 4088 00d8 FFF7FEFF 		bl	ButtonYNChoice
 4089 00dc 0346     		mov	r3, r0
 4090 00de 012B     		cmp	r3, #1
 4091 00e0 0BD1     		bne	.L129
 748:.\console.c   **** 			{
 749:.\console.c   **** 				printf("\r\n!!!Wait for Bootloading (power off to stop bootloading process)\r\n");
 4092              		.loc 1 749 0
 4093 00e2 40F20000 		movw	r0, #:lower16:.LC80
 4094 00e6 C0F20000 		movt	r0, #:upper16:.LC80
 4095 00ea FFF7FEFF 		bl	puts
 750:.\console.c   **** 				CyDelay(100);
 4096              		.loc 1 750 0
 4097 00ee 4FF06400 		mov	r0, #100
 4098 00f2 FFF7FEFF 		bl	CyDelay
 751:.\console.c   **** 				/* This API will pass the program control to the Bootloader portion of the flash.
 752:.\console.c   **** 			   	It will also cause the Bootloader to wait indefinitely for the host to start communication *
 753:.\console.c   **** 				//Bootloadable_Load();
 754:.\console.c   **** 			}
 755:.\console.c   **** 			else
 756:.\console.c   **** 			{
 757:.\console.c   **** 				printf("\r\nBootloading aborted!");
 758:.\console.c   **** 			}
 759:.\console.c   **** 		}
 760:.\console.c   **** 		else
 761:.\console.c   **** 		{
 762:.\console.c   **** 			printf(STR_ERROR1);
 763:.\console.c   **** 		}
 764:.\console.c   **** 	goto exitpars;
 4099              		.loc 1 764 0
 4100 00f6 06F0DBBE 		b	.L131
 4101              	.L129:
 757:.\console.c   **** 				printf("\r\nBootloading aborted!");
 4102              		.loc 1 757 0
 4103 00fa 40F20000 		movw	r0, #:lower16:.LC81
 4104 00fe C0F20000 		movt	r0, #:upper16:.LC81
 4105 0102 FFF7FEFF 		bl	printf
 4106              		.loc 1 764 0
 4107 0106 06F0D3BE 		b	.L131
 4108              	.L128:
 762:.\console.c   **** 			printf(STR_ERROR1);
 4109              		.loc 1 762 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 131


 4110 010a 40F20000 		movw	r0, #:lower16:.LC82
 4111 010e C0F20000 		movt	r0, #:upper16:.LC82
 4112 0112 FFF7FEFF 		bl	printf
 4113              		.loc 1 764 0
 4114 0116 06F0CBBE 		b	.L131
 4115              	.L127:
 765:.\console.c   **** 	}
 766:.\console.c   **** 	/* END CMD BOOT */
 767:.\console.c   **** 
 768:.\console.c   **** 	
 769:.\console.c   **** 	/* CMD ANAPOS +20 */
 770:.\console.c   **** 	if (strcmp(actual_cmd.action, "pp") == 0)
 4116              		.loc 1 770 0
 4117 011a 40F20000 		movw	r0, #:lower16:actual_cmd
 4118 011e C0F20000 		movt	r0, #:upper16:actual_cmd
 4119 0122 40F20001 		movw	r1, #:lower16:.LC83
 4120 0126 C0F20001 		movt	r1, #:upper16:.LC83
 4121 012a FFF7FEFF 		bl	strcmp
 4122 012e 0346     		mov	r3, r0
 4123 0130 002B     		cmp	r3, #0
 4124 0132 23D1     		bne	.L132
 771:.\console.c   **** 	{
 772:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4125              		.loc 1 772 0
 4126 0134 BF4B     		ldr	r3, .L706
 4127 0136 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4128 0138 002B     		cmp	r3, #0
 4129 013a 17D1     		bne	.L133
 773:.\console.c   **** 		{
 774:.\console.c   **** 			printf ("*ANAPOS ZERO +20!\r\n");
 4130              		.loc 1 774 0
 4131 013c 40F20000 		movw	r0, #:lower16:.LC84
 4132 0140 C0F20000 		movt	r0, #:upper16:.LC84
 4133 0144 FFF7FEFF 		bl	puts
 775:.\console.c   **** 			anapos_offset = anapos_offset + 20;
 4134              		.loc 1 775 0
 4135 0148 40F20003 		movw	r3, #:lower16:anapos_offset
 4136 014c C0F20003 		movt	r3, #:upper16:anapos_offset
 4137 0150 1B68     		ldr	r3, [r3, #0]
 4138 0152 03F11402 		add	r2, r3, #20
 4139 0156 40F20003 		movw	r3, #:lower16:anapos_offset
 4140 015a C0F20003 		movt	r3, #:upper16:anapos_offset
 4141 015e 1A60     		str	r2, [r3, #0]
 776:.\console.c   **** 			CyDelay(100);
 4142              		.loc 1 776 0
 4143 0160 4FF06400 		mov	r0, #100
 4144 0164 FFF7FEFF 		bl	CyDelay
 777:.\console.c   **** 		}
 778:.\console.c   **** 		else
 779:.\console.c   **** 		{
 780:.\console.c   **** 			printf ("*err\n");
 781:.\console.c   **** 		}
 782:.\console.c   **** 	goto exitpars;
 4145              		.loc 1 782 0
 4146 0168 06F0A2BE 		b	.L131
 4147              	.L133:
 780:.\console.c   **** 			printf ("*err\n");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 132


 4148              		.loc 1 780 0
 4149 016c 40F20000 		movw	r0, #:lower16:.LC85
 4150 0170 C0F20000 		movt	r0, #:upper16:.LC85
 4151 0174 FFF7FEFF 		bl	puts
 4152              		.loc 1 782 0
 4153 0178 06F09ABE 		b	.L131
 4154              	.L132:
 783:.\console.c   **** 	}
 784:.\console.c   **** 	/* END ANAPOS +20 */
 785:.\console.c   **** 
 786:.\console.c   **** 
 787:.\console.c   **** 	/* CMD ANAPOS +100 */
 788:.\console.c   **** 	if (strcmp(actual_cmd.action, "ppp") == 0)
 4155              		.loc 1 788 0
 4156 017c 40F20000 		movw	r0, #:lower16:actual_cmd
 4157 0180 C0F20000 		movt	r0, #:upper16:actual_cmd
 4158 0184 40F20001 		movw	r1, #:lower16:.LC86
 4159 0188 C0F20001 		movt	r1, #:upper16:.LC86
 4160 018c FFF7FEFF 		bl	strcmp
 4161 0190 0346     		mov	r3, r0
 4162 0192 002B     		cmp	r3, #0
 4163 0194 23D1     		bne	.L135
 789:.\console.c   **** 	{
 790:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4164              		.loc 1 790 0
 4165 0196 A74B     		ldr	r3, .L706
 4166 0198 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4167 019a 002B     		cmp	r3, #0
 4168 019c 17D1     		bne	.L136
 791:.\console.c   **** 		{
 792:.\console.c   **** 			printf ("*ANAPOS ZERO +100!\r\n");
 4169              		.loc 1 792 0
 4170 019e 40F20000 		movw	r0, #:lower16:.LC87
 4171 01a2 C0F20000 		movt	r0, #:upper16:.LC87
 4172 01a6 FFF7FEFF 		bl	puts
 793:.\console.c   **** 			anapos_offset = anapos_offset + 100;
 4173              		.loc 1 793 0
 4174 01aa 40F20003 		movw	r3, #:lower16:anapos_offset
 4175 01ae C0F20003 		movt	r3, #:upper16:anapos_offset
 4176 01b2 1B68     		ldr	r3, [r3, #0]
 4177 01b4 03F16402 		add	r2, r3, #100
 4178 01b8 40F20003 		movw	r3, #:lower16:anapos_offset
 4179 01bc C0F20003 		movt	r3, #:upper16:anapos_offset
 4180 01c0 1A60     		str	r2, [r3, #0]
 794:.\console.c   **** 			CyDelay(100);
 4181              		.loc 1 794 0
 4182 01c2 4FF06400 		mov	r0, #100
 4183 01c6 FFF7FEFF 		bl	CyDelay
 795:.\console.c   **** 		}
 796:.\console.c   **** 		else
 797:.\console.c   **** 		{
 798:.\console.c   **** 			printf ("*err\n");
 799:.\console.c   **** 		}
 800:.\console.c   **** 	goto exitpars;
 4184              		.loc 1 800 0
 4185 01ca 06F071BE 		b	.L131
 4186              	.L136:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 133


 798:.\console.c   **** 			printf ("*err\n");
 4187              		.loc 1 798 0
 4188 01ce 40F20000 		movw	r0, #:lower16:.LC85
 4189 01d2 C0F20000 		movt	r0, #:upper16:.LC85
 4190 01d6 FFF7FEFF 		bl	puts
 4191              		.loc 1 800 0
 4192 01da 06F069BE 		b	.L131
 4193              	.L135:
 801:.\console.c   **** 	}
 802:.\console.c   **** 	/* END ANAPOS +100 */
 803:.\console.c   **** 
 804:.\console.c   **** 
 805:.\console.c   **** 	/* CMD ANAPOS -20 */
 806:.\console.c   **** 	if (strcmp(actual_cmd.action, "mm") == 0)
 4194              		.loc 1 806 0
 4195 01de 40F20000 		movw	r0, #:lower16:actual_cmd
 4196 01e2 C0F20000 		movt	r0, #:upper16:actual_cmd
 4197 01e6 40F20001 		movw	r1, #:lower16:.LC88
 4198 01ea C0F20001 		movt	r1, #:upper16:.LC88
 4199 01ee FFF7FEFF 		bl	strcmp
 4200 01f2 0346     		mov	r3, r0
 4201 01f4 002B     		cmp	r3, #0
 4202 01f6 23D1     		bne	.L138
 807:.\console.c   **** 	{
 808:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4203              		.loc 1 808 0
 4204 01f8 8E4B     		ldr	r3, .L706
 4205 01fa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4206 01fc 002B     		cmp	r3, #0
 4207 01fe 17D1     		bne	.L139
 809:.\console.c   **** 		{
 810:.\console.c   **** 			printf ("*ANAPOS ZERO -20!\r\n");
 4208              		.loc 1 810 0
 4209 0200 40F20000 		movw	r0, #:lower16:.LC89
 4210 0204 C0F20000 		movt	r0, #:upper16:.LC89
 4211 0208 FFF7FEFF 		bl	puts
 811:.\console.c   **** 			anapos_offset = anapos_offset - 20;
 4212              		.loc 1 811 0
 4213 020c 40F20003 		movw	r3, #:lower16:anapos_offset
 4214 0210 C0F20003 		movt	r3, #:upper16:anapos_offset
 4215 0214 1B68     		ldr	r3, [r3, #0]
 4216 0216 A3F11402 		sub	r2, r3, #20
 4217 021a 40F20003 		movw	r3, #:lower16:anapos_offset
 4218 021e C0F20003 		movt	r3, #:upper16:anapos_offset
 4219 0222 1A60     		str	r2, [r3, #0]
 812:.\console.c   **** 			CyDelay(100);
 4220              		.loc 1 812 0
 4221 0224 4FF06400 		mov	r0, #100
 4222 0228 FFF7FEFF 		bl	CyDelay
 813:.\console.c   **** 		}
 814:.\console.c   **** 		else
 815:.\console.c   **** 		{
 816:.\console.c   **** 			printf ("*err\n");
 817:.\console.c   **** 		}
 818:.\console.c   **** 	goto exitpars;
 4223              		.loc 1 818 0
 4224 022c 06F040BE 		b	.L131
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 134


 4225              	.L139:
 816:.\console.c   **** 			printf ("*err\n");
 4226              		.loc 1 816 0
 4227 0230 40F20000 		movw	r0, #:lower16:.LC85
 4228 0234 C0F20000 		movt	r0, #:upper16:.LC85
 4229 0238 FFF7FEFF 		bl	puts
 4230              		.loc 1 818 0
 4231 023c 06F038BE 		b	.L131
 4232              	.L138:
 819:.\console.c   **** 	}
 820:.\console.c   **** 	/* END ANAPOS -20 */
 821:.\console.c   **** 
 822:.\console.c   **** 
 823:.\console.c   **** 	/* CMD ANAPOS -100 */
 824:.\console.c   **** 	if (strcmp(actual_cmd.action, "mmm") == 0)
 4233              		.loc 1 824 0
 4234 0240 40F20000 		movw	r0, #:lower16:actual_cmd
 4235 0244 C0F20000 		movt	r0, #:upper16:actual_cmd
 4236 0248 40F20001 		movw	r1, #:lower16:.LC90
 4237 024c C0F20001 		movt	r1, #:upper16:.LC90
 4238 0250 FFF7FEFF 		bl	strcmp
 4239 0254 0346     		mov	r3, r0
 4240 0256 002B     		cmp	r3, #0
 4241 0258 23D1     		bne	.L141
 825:.\console.c   **** 	{
 826:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4242              		.loc 1 826 0
 4243 025a 764B     		ldr	r3, .L706
 4244 025c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4245 025e 002B     		cmp	r3, #0
 4246 0260 17D1     		bne	.L142
 827:.\console.c   **** 		{
 828:.\console.c   **** 			printf ("*ANAPOS ZERO -100!\r\n");
 4247              		.loc 1 828 0
 4248 0262 40F20000 		movw	r0, #:lower16:.LC91
 4249 0266 C0F20000 		movt	r0, #:upper16:.LC91
 4250 026a FFF7FEFF 		bl	puts
 829:.\console.c   **** 			anapos_offset = anapos_offset - 100;
 4251              		.loc 1 829 0
 4252 026e 40F20003 		movw	r3, #:lower16:anapos_offset
 4253 0272 C0F20003 		movt	r3, #:upper16:anapos_offset
 4254 0276 1B68     		ldr	r3, [r3, #0]
 4255 0278 A3F16402 		sub	r2, r3, #100
 4256 027c 40F20003 		movw	r3, #:lower16:anapos_offset
 4257 0280 C0F20003 		movt	r3, #:upper16:anapos_offset
 4258 0284 1A60     		str	r2, [r3, #0]
 830:.\console.c   **** 			CyDelay(100);
 4259              		.loc 1 830 0
 4260 0286 4FF06400 		mov	r0, #100
 4261 028a FFF7FEFF 		bl	CyDelay
 831:.\console.c   **** 		}
 832:.\console.c   **** 		else
 833:.\console.c   **** 		{
 834:.\console.c   **** 			printf ("*err\n");
 835:.\console.c   **** 		}
 836:.\console.c   **** 	goto exitpars;
 4262              		.loc 1 836 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 135


 4263 028e 06F00FBE 		b	.L131
 4264              	.L142:
 834:.\console.c   **** 			printf ("*err\n");
 4265              		.loc 1 834 0
 4266 0292 40F20000 		movw	r0, #:lower16:.LC85
 4267 0296 C0F20000 		movt	r0, #:upper16:.LC85
 4268 029a FFF7FEFF 		bl	puts
 4269              		.loc 1 836 0
 4270 029e 06F007BE 		b	.L131
 4271              	.L141:
 837:.\console.c   **** 	}
 838:.\console.c   **** 	/* END ANAPOS -100 */	
 839:.\console.c   **** 	
 840:.\console.c   **** 	
 841:.\console.c   **** 	/* CMD TEST BUZZER */
 842:.\console.c   **** 	if (strcmp(actual_cmd.action, "tbuz") == 0)
 4272              		.loc 1 842 0
 4273 02a2 40F20000 		movw	r0, #:lower16:actual_cmd
 4274 02a6 C0F20000 		movt	r0, #:upper16:actual_cmd
 4275 02aa 40F20001 		movw	r1, #:lower16:.LC92
 4276 02ae C0F20001 		movt	r1, #:upper16:.LC92
 4277 02b2 FFF7FEFF 		bl	strcmp
 4278 02b6 0346     		mov	r3, r0
 4279 02b8 002B     		cmp	r3, #0
 4280 02ba 26D1     		bne	.L144
 843:.\console.c   **** 	{
 844:.\console.c   **** 		printf("Buzzer testing!\r\n");
 4281              		.loc 1 844 0
 4282 02bc 40F20000 		movw	r0, #:lower16:.LC93
 4283 02c0 C0F20000 		movt	r0, #:upper16:.LC93
 4284 02c4 FFF7FEFF 		bl	puts
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4285              		.loc 1 845 0
 4286 02c8 4FF00003 		mov	r3, #0
 4287 02cc 87F81331 		strb	r3, [r7, #275]
 4288 02d0 15E0     		b	.L145
 4289              	.L146:
 846:.\console.c   ****  		{			
 847:.\console.c   **** 			Control_Reg_BUZ_Write(BUZZER_ON);	/* buzzer on			*/
 4290              		.loc 1 847 0 discriminator 2
 4291 02d2 4FF00100 		mov	r0, #1
 4292 02d6 FFF7FEFF 		bl	Control_Reg_BUZ_Write
 848:.\console.c   **** 			CyDelay(250);						/* 250msec sec delay	*/
 4293              		.loc 1 848 0 discriminator 2
 4294 02da 4FF0FA00 		mov	r0, #250
 4295 02de FFF7FEFF 		bl	CyDelay
 849:.\console.c   **** 			Control_Reg_BUZ_Write(BUZZER_OFF);	/* buzzer off			*/
 4296              		.loc 1 849 0 discriminator 2
 4297 02e2 4FF00000 		mov	r0, #0
 4298 02e6 FFF7FEFF 		bl	Control_Reg_BUZ_Write
 850:.\console.c   **** 			CyDelay(125);						/* 125msec sec delay	*/			
 4299              		.loc 1 850 0 discriminator 2
 4300 02ea 4FF07D00 		mov	r0, #125
 4301 02ee FFF7FEFF 		bl	CyDelay
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4302              		.loc 1 845 0 discriminator 2
 4303 02f2 97F81331 		ldrb	r3, [r7, #275]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 136


 4304 02f6 03F10103 		add	r3, r3, #1
 4305 02fa 87F81331 		strb	r3, [r7, #275]
 4306              	.L145:
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4307              		.loc 1 845 0 is_stmt 0 discriminator 1
 4308 02fe 97F81331 		ldrb	r3, [r7, #275]	@ zero_extendqisi2
 4309 0302 022B     		cmp	r3, #2
 4310 0304 E5D9     		bls	.L146
 851:.\console.c   **** 		}
 852:.\console.c   **** 	
 853:.\console.c   **** 		goto exitpars;
 4311              		.loc 1 853 0 is_stmt 1
 4312 0306 06F0D3BD 		b	.L131
 4313              	.L144:
 854:.\console.c   **** 	}
 855:.\console.c   **** 	/* END CMD TEST BUZZER */	
 856:.\console.c   **** 	
 857:.\console.c   **** 	
 858:.\console.c   **** 	/* HIDDEN CMD TEST LORA */	
 859:.\console.c   **** 	if (strcmp(actual_cmd.action, "tlora") == 0)
 4314              		.loc 1 859 0
 4315 030a 40F20000 		movw	r0, #:lower16:actual_cmd
 4316 030e C0F20000 		movt	r0, #:upper16:actual_cmd
 4317 0312 40F20001 		movw	r1, #:lower16:.LC94
 4318 0316 C0F20001 		movt	r1, #:upper16:.LC94
 4319 031a FFF7FEFF 		bl	strcmp
 4320 031e 0346     		mov	r3, r0
 4321 0320 002B     		cmp	r3, #0
 4322 0322 1BD1     		bne	.L147
 860:.\console.c   **** 	{
 861:.\console.c   **** 		printf("Test LoRa started!\r\n");
 4323              		.loc 1 861 0
 4324 0324 40F20000 		movw	r0, #:lower16:.LC95
 4325 0328 C0F20000 		movt	r0, #:upper16:.LC95
 4326 032c FFF7FEFF 		bl	puts
 862:.\console.c   **** 			
 863:.\console.c   **** 		sendLoRaATcmd(CMD_AT);					/* Send AT Command */
 4327              		.loc 1 863 0
 4328 0330 40F20000 		movw	r0, #:lower16:CMD_AT
 4329 0334 C0F20000 		movt	r0, #:upper16:CMD_AT
 4330 0338 FFF7FEFF 		bl	sendLoRaATcmd
 864:.\console.c   **** 		
 865:.\console.c   **** 		CyDelay(500);							/* delay waiting XTR-8LR100 chars */
 4331              		.loc 1 865 0
 4332 033c 4FF4FA70 		mov	r0, #500
 4333 0340 FFF7FEFF 		bl	CyDelay
 866:.\console.c   **** 						
 867:.\console.c   **** 		sendLoRaATcmd(CMD_AT_SHOWVERSION);		/* Send SHOW VERSION Command */
 4334              		.loc 1 867 0
 4335 0344 40F20000 		movw	r0, #:lower16:CMD_AT_SHOWVERSION
 4336 0348 C0F20000 		movt	r0, #:upper16:CMD_AT_SHOWVERSION
 4337 034c FFF7FEFF 		bl	sendLoRaATcmd
 868:.\console.c   **** 		
 869:.\console.c   **** 		CyDelay(500);							/* delay waiting XTR-8LR100 chars */
 4338              		.loc 1 869 0
 4339 0350 4FF4FA70 		mov	r0, #500
 4340 0354 FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 137


 870:.\console.c   **** 		
 871:.\console.c   **** 		goto exitpars;
 4341              		.loc 1 871 0
 4342 0358 06F0AABD 		b	.L131
 4343              	.L147:
 872:.\console.c   **** 	}
 873:.\console.c   **** 	/* END HIDDEN CMD TEST LORA */ 	
 874:.\console.c   **** 	
 875:.\console.c   **** 	
 876:.\console.c   **** //	/* HIDDEN CMD TEST LORA 2 (PINS) */	
 877:.\console.c   **** //	if (strcmp(actual_cmd.action, "tlora2") == 0)
 878:.\console.c   **** //	{
 879:.\console.c   **** //		printf("Test LoRa 2 (pins) started!\r\n");
 880:.\console.c   **** //			
 881:.\console.c   **** //		while (AnyButtonPressed() == NO_PRESSED)
 882:.\console.c   **** //		{	
 883:.\console.c   **** //			printf("RESET=L\r\n");
 884:.\console.c   **** //			Control_Reg_LORA_RESET_Write(0x00);		/* SET_A = L 		*/						
 885:.\console.c   **** //			CyDelay(100);						/* 0.5 sec delay 	*/
 886:.\console.c   **** //			printf("RESET=H\r\n");
 887:.\console.c   **** //			Control_Reg_LORA_RESET_Write(0xFF);		/* SET_A = L 		*/						
 888:.\console.c   **** //			CyDelay(100);						/* 0.5 sec delay 	*/			
 889:.\console.c   **** //		}
 890:.\console.c   **** //		
 891:.\console.c   **** //		Control_Reg_LORA_Write(0xFF);		/* SET_A = H */
 892:.\console.c   **** //		Control_Reg_LORA_RESET_Write(0xFF);	/* RESET = H */
 893:.\console.c   **** //		
 894:.\console.c   **** //		goto exitpars;
 895:.\console.c   **** //	}
 896:.\console.c   **** //	/* END HIDDEN CMD TEST LORA 2 (PINS) */ 	
 897:.\console.c   **** 	
 898:.\console.c   **** 	
 899:.\console.c   **** 	/* CMD MYTEST */
 900:.\console.c   **** 	if (strcmp(actual_cmd.action, "mytest") == 0)
 4344              		.loc 1 900 0
 4345 035c 40F20000 		movw	r0, #:lower16:actual_cmd
 4346 0360 C0F20000 		movt	r0, #:upper16:actual_cmd
 4347 0364 40F20001 		movw	r1, #:lower16:.LC96
 4348 0368 C0F20001 		movt	r1, #:upper16:.LC96
 4349 036c FFF7FEFF 		bl	strcmp
 4350 0370 0346     		mov	r3, r0
 4351 0372 002B     		cmp	r3, #0
 4352 0374 2DD1     		bne	.L148
 901:.\console.c   **** 	{
 902:.\console.c   **** 		printf("My test!\r\n");
 4353              		.loc 1 902 0
 4354 0376 40F20000 		movw	r0, #:lower16:.LC97
 4355 037a C0F20000 		movt	r0, #:upper16:.LC97
 4356 037e FFF7FEFF 		bl	puts
 903:.\console.c   **** 		while (AnyButtonPressed() == NO_PRESSED)
 4357              		.loc 1 903 0
 4358 0382 1FE0     		b	.L149
 4359              	.L150:
 904:.\console.c   **** 		{
 905:.\console.c   **** #if MEASURE_MYTEST
 906:.\console.c   **** 	Control_Reg_LED_Write(0x01);
 4360              		.loc 1 906 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 138


 4361 0384 4FF00100 		mov	r0, #1
 4362 0388 FFF7FEFF 		bl	Control_Reg_LED_Write
 907:.\console.c   **** #endif					
 908:.\console.c   **** 			InitPanGotoQPath(11, 0.2);				/* initialize the Pan Goto Q Path					*/
 4363              		.loc 1 908 0
 4364 038c 4FF00B00 		mov	r0, #11
 4365 0390 4CF6CD41 		movw	r1, #52429
 4366 0394 C3F64C61 		movt	r1, 15948
 4367 0398 FFF7FEFF 		bl	InitPanGotoQPath
 909:.\console.c   **** 			InitTiltGotoQPath(11, 0.2);				/* initialize the Tilt Goto Q Path					*/			
 4368              		.loc 1 909 0
 4369 039c 4FF00B00 		mov	r0, #11
 4370 03a0 4CF6CD41 		movw	r1, #52429
 4371 03a4 C3F64C61 		movt	r1, 15948
 4372 03a8 FFF7FEFF 		bl	InitTiltGotoQPath
 910:.\console.c   **** 			CalculatePanGotoQPath();				/* Calculate the  Pan Goto Q Path 					*/
 4373              		.loc 1 910 0
 4374 03ac FFF7FEFF 		bl	CalculatePanGotoQPath
 911:.\console.c   **** 			CalculateTiltGotoQPath();				/* Calculate the  Tilt Goto Q Path 					*/						
 4375              		.loc 1 911 0
 4376 03b0 FFF7FEFF 		bl	CalculateTiltGotoQPath
 912:.\console.c   **** #if MEASURE_MYTEST
 913:.\console.c   **** 	Control_Reg_LED_Write(0x00);
 4377              		.loc 1 913 0
 4378 03b4 4FF00000 		mov	r0, #0
 4379 03b8 FFF7FEFF 		bl	Control_Reg_LED_Write
 914:.\console.c   **** #endif					
 915:.\console.c   **** 			CyDelayUs(500);
 4380              		.loc 1 915 0
 4381 03bc 4FF4FA70 		mov	r0, #500
 4382 03c0 FFF7FEFF 		bl	CyDelayUs
 4383              	.L149:
 903:.\console.c   **** 		while (AnyButtonPressed() == NO_PRESSED)
 4384              		.loc 1 903 0 discriminator 1
 4385 03c4 FFF7FEFF 		bl	AnyButtonPressed
 4386 03c8 0346     		mov	r3, r0
 4387 03ca 002B     		cmp	r3, #0
 4388 03cc DAD0     		beq	.L150
 916:.\console.c   **** 		}
 917:.\console.c   **** 				
 918:.\console.c   **** 		goto exitpars;
 4389              		.loc 1 918 0
 4390 03ce 06F06FBD 		b	.L131
 4391              	.L148:
 919:.\console.c   **** 	}
 920:.\console.c   **** 	/* END CMD MYTEST */
 921:.\console.c   **** 	
 922:.\console.c   **** 	
 923:.\console.c   **** #if ITG_3701_ENABLED	
 924:.\console.c   **** 	/* CMD TEST INVENSENSE ITG3701 */
 925:.\console.c   **** 	if ((strcmp(actual_cmd.action, "titg3701") == 0) ||
 926:.\console.c   **** 	   (strcmp(actual_cmd.action, "t3701") == 0))
 927:.\console.c   **** 	{
 928:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 929:.\console.c   **** 		{
 930:.\console.c   **** 			printf("Invensense ITG-3701 testing!\r\n");
 931:.\console.c   **** 			ITG3701_test();
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 139


 932:.\console.c   **** 		}
 933:.\console.c   **** 		else
 934:.\console.c   **** 		{
 935:.\console.c   **** 			printf ("*err\n");
 936:.\console.c   **** 		}
 937:.\console.c   **** 	goto exitpars;
 938:.\console.c   **** 	}
 939:.\console.c   **** 	/* END CMD TEST INVENSENSE ITG3701 */	
 940:.\console.c   **** #endif
 941:.\console.c   **** 
 942:.\console.c   **** 	
 943:.\console.c   **** 	/* CMD STOP MAPPING STATE MACHINE */
 944:.\console.c   **** 	if ((strcmp(actual_cmd.action, "stopmapsm") == 0) ||
 4392              		.loc 1 944 0
 4393 03d2 40F20000 		movw	r0, #:lower16:actual_cmd
 4394 03d6 C0F20000 		movt	r0, #:upper16:actual_cmd
 4395 03da 40F20001 		movw	r1, #:lower16:.LC98
 4396 03de C0F20001 		movt	r1, #:upper16:.LC98
 4397 03e2 FFF7FEFF 		bl	strcmp
 4398 03e6 0346     		mov	r3, r0
 4399 03e8 002B     		cmp	r3, #0
 4400 03ea 0CD0     		beq	.L151
 945:.\console.c   **** 	   (strcmp(actual_cmd.action, "stopsm") == 0))
 4401              		.loc 1 945 0 discriminator 1
 4402 03ec 40F20000 		movw	r0, #:lower16:actual_cmd
 4403 03f0 C0F20000 		movt	r0, #:upper16:actual_cmd
 4404 03f4 40F20001 		movw	r1, #:lower16:.LC99
 4405 03f8 C0F20001 		movt	r1, #:upper16:.LC99
 4406 03fc FFF7FEFF 		bl	strcmp
 4407 0400 0346     		mov	r3, r0
 944:.\console.c   **** 	if ((strcmp(actual_cmd.action, "stopmapsm") == 0) ||
 4408              		.loc 1 944 0 discriminator 1
 4409 0402 002B     		cmp	r3, #0
 4410 0404 18D1     		bne	.L152
 4411              	.L151:
 946:.\console.c   **** 	{
 947:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4412              		.loc 1 947 0
 4413 0406 0B4B     		ldr	r3, .L706
 4414 0408 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4415 040a 002B     		cmp	r3, #0
 4416 040c 09D1     		bne	.L153
 948:.\console.c   **** 		{
 949:.\console.c   **** 			printf("MAPPING STATE MACHINE Stopped!\r\n");
 4417              		.loc 1 949 0
 4418 040e 40F20000 		movw	r0, #:lower16:.LC100
 4419 0412 C0F20000 		movt	r0, #:upper16:.LC100
 4420 0416 FFF7FEFF 		bl	puts
 950:.\console.c   **** 			
 951:.\console.c   **** 			/* Mapping State Machine Initialization */
 952:.\console.c   **** 			MappingStateMachineInit();
 4421              		.loc 1 952 0
 4422 041a FFF7FEFF 		bl	MappingStateMachineInit
 953:.\console.c   **** 		}
 954:.\console.c   **** 		else
 955:.\console.c   **** 		{
 956:.\console.c   **** 			printf ("*err\n");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 140


 957:.\console.c   **** 		}
 958:.\console.c   **** 	goto exitpars;
 4423              		.loc 1 958 0
 4424 041e 06F047BD 		b	.L131
 4425              	.L153:
 956:.\console.c   **** 			printf ("*err\n");
 4426              		.loc 1 956 0
 4427 0422 40F20000 		movw	r0, #:lower16:.LC85
 4428 0426 C0F20000 		movt	r0, #:upper16:.LC85
 4429 042a FFF7FEFF 		bl	puts
 4430              		.loc 1 958 0
 4431 042e 06F03FBD 		b	.L131
 4432              	.L707:
 4433 0432 00BF     		.align	2
 4434              	.L706:
 4435 0434 0F000000 		.word	actual_cmd+15
 4436              	.L152:
 959:.\console.c   **** 	}
 960:.\console.c   **** 	/* END CMD STOP MAPPING STATE MACHINE */
 961:.\console.c   **** 
 962:.\console.c   **** 	
 963:.\console.c   **** 	/* CMD DEENERGIZE */
 964:.\console.c   **** 	if ((strcmp(actual_cmd.action, "deenergize") == 0) ||
 4437              		.loc 1 964 0
 4438 0438 40F20000 		movw	r0, #:lower16:actual_cmd
 4439 043c C0F20000 		movt	r0, #:upper16:actual_cmd
 4440 0440 40F20001 		movw	r1, #:lower16:.LC101
 4441 0444 C0F20001 		movt	r1, #:upper16:.LC101
 4442 0448 FFF7FEFF 		bl	strcmp
 4443 044c 0346     		mov	r3, r0
 4444 044e 002B     		cmp	r3, #0
 4445 0450 0CD0     		beq	.L155
 965:.\console.c   **** 	   (strcmp(actual_cmd.action, "deen") == 0))
 4446              		.loc 1 965 0 discriminator 1
 4447 0452 40F20000 		movw	r0, #:lower16:actual_cmd
 4448 0456 C0F20000 		movt	r0, #:upper16:actual_cmd
 4449 045a 40F20001 		movw	r1, #:lower16:.LC102
 4450 045e C0F20001 		movt	r1, #:upper16:.LC102
 4451 0462 FFF7FEFF 		bl	strcmp
 4452 0466 0346     		mov	r3, r0
 964:.\console.c   **** 	if ((strcmp(actual_cmd.action, "deenergize") == 0) ||
 4453              		.loc 1 964 0 discriminator 1
 4454 0468 002B     		cmp	r3, #0
 4455 046a 4BD1     		bne	.L156
 4456              	.L155:
 966:.\console.c   **** 	{
 967:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4457              		.loc 1 967 0
 4458 046c CE4B     		ldr	r3, .L708
 4459 046e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4460 0470 002B     		cmp	r3, #0
 4461 0472 3FD1     		bne	.L157
 968:.\console.c   **** 		{
 969:.\console.c   **** 			printf("Motors DEENERGIZED & Driver Sleeped!\r\n");
 4462              		.loc 1 969 0
 4463 0474 40F20000 		movw	r0, #:lower16:.LC103
 4464 0478 C0F20000 		movt	r0, #:upper16:.LC103
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 141


 4465 047c FFF7FEFF 		bl	puts
 970:.\console.c   **** 			machine_state = GOBEE_DEENERGIZED;
 4466              		.loc 1 970 0
 4467 0480 40F20003 		movw	r3, #:lower16:machine_state
 4468 0484 C0F20003 		movt	r3, #:upper16:machine_state
 4469 0488 4FF00602 		mov	r2, #6
 4470 048c 1A70     		strb	r2, [r3, #0]
 971:.\console.c   **** 			
 972:.\console.c   **** 			/* Mapping State Machine Initialization & STOP */
 973:.\console.c   **** 			MappingStateMachineInit();
 4471              		.loc 1 973 0
 4472 048e FFF7FEFF 		bl	MappingStateMachineInit
 974:.\console.c   **** 			
 975:.\console.c   **** 			/* CLU State Machine STOP */
 976:.\console.c   **** 			clu_sm.status = CLUSM_END;
 4473              		.loc 1 976 0
 4474 0492 40F20003 		movw	r3, #:lower16:clu_sm
 4475 0496 C0F20003 		movt	r3, #:upper16:clu_sm
 4476 049a 4FF00C02 		mov	r2, #12
 4477 049e 1A70     		strb	r2, [r3, #0]
 977:.\console.c   **** 			
 978:.\console.c   **** 			/* Movers STOP */
 979:.\console.c   **** 			mover_pan.status = MOVER_ENDED;
 4478              		.loc 1 979 0
 4479 04a0 40F20003 		movw	r3, #:lower16:mover_pan
 4480 04a4 C0F20003 		movt	r3, #:upper16:mover_pan
 4481 04a8 4FF00202 		mov	r2, #2
 4482 04ac 1A70     		strb	r2, [r3, #0]
 980:.\console.c   **** 			mover_pan.steps_to_move = 0;
 4483              		.loc 1 980 0
 4484 04ae 40F20003 		movw	r3, #:lower16:mover_pan
 4485 04b2 C0F20003 		movt	r3, #:upper16:mover_pan
 4486 04b6 4FF00002 		mov	r2, #0
 4487 04ba 1A62     		str	r2, [r3, #32]
 981:.\console.c   **** 			mover_tilt.status = MOVER_ENDED;
 4488              		.loc 1 981 0
 4489 04bc 40F20003 		movw	r3, #:lower16:mover_tilt
 4490 04c0 C0F20003 		movt	r3, #:upper16:mover_tilt
 4491 04c4 4FF00202 		mov	r2, #2
 4492 04c8 1A70     		strb	r2, [r3, #0]
 982:.\console.c   **** 			mover_tilt.steps_to_move = 0;			
 4493              		.loc 1 982 0
 4494 04ca 40F20003 		movw	r3, #:lower16:mover_tilt
 4495 04ce C0F20003 		movt	r3, #:upper16:mover_tilt
 4496 04d2 4FF00002 		mov	r2, #0
 4497 04d6 1A62     		str	r2, [r3, #32]
 983:.\console.c   **** 			
 984:.\console.c   **** 			/* Sleep the Machine*/
 985:.\console.c   **** 			motor_sleep(&pan_axis);
 4498              		.loc 1 985 0
 4499 04d8 40F20000 		movw	r0, #:lower16:pan_axis
 4500 04dc C0F20000 		movt	r0, #:upper16:pan_axis
 4501 04e0 FFF7FEFF 		bl	motor_sleep
 986:.\console.c   **** 			motor_sleep(&tilt_axis);				
 4502              		.loc 1 986 0
 4503 04e4 40F20000 		movw	r0, #:lower16:tilt_axis
 4504 04e8 C0F20000 		movt	r0, #:upper16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 142


 4505 04ec FFF7FEFF 		bl	motor_sleep
 987:.\console.c   **** 		}
 988:.\console.c   **** 		else
 989:.\console.c   **** 		{
 990:.\console.c   **** 			printf ("*err\n");
 991:.\console.c   **** 		}
 992:.\console.c   **** 	goto exitpars;
 4506              		.loc 1 992 0
 4507 04f0 06F0DEBC 		b	.L131
 4508              	.L157:
 990:.\console.c   **** 			printf ("*err\n");
 4509              		.loc 1 990 0
 4510 04f4 40F20000 		movw	r0, #:lower16:.LC85
 4511 04f8 C0F20000 		movt	r0, #:upper16:.LC85
 4512 04fc FFF7FEFF 		bl	puts
 4513              		.loc 1 992 0
 4514 0500 06F0D6BC 		b	.L131
 4515              	.L156:
 993:.\console.c   **** 	}
 994:.\console.c   **** 	/* END CMD DEENERGIZE */	
 995:.\console.c   **** 
 996:.\console.c   **** 	
 997:.\console.c   **** 	/* CMD ENERGIZE */
 998:.\console.c   **** 	if ((strcmp(actual_cmd.action, "energize") == 0) ||
 4516              		.loc 1 998 0
 4517 0504 40F20000 		movw	r0, #:lower16:actual_cmd
 4518 0508 C0F20000 		movt	r0, #:upper16:actual_cmd
 4519 050c 40F20001 		movw	r1, #:lower16:.LC104
 4520 0510 C0F20001 		movt	r1, #:upper16:.LC104
 4521 0514 FFF7FEFF 		bl	strcmp
 4522 0518 0346     		mov	r3, r0
 4523 051a 002B     		cmp	r3, #0
 4524 051c 0CD0     		beq	.L159
 999:.\console.c   **** 	   (strcmp(actual_cmd.action, "en") == 0))
 4525              		.loc 1 999 0 discriminator 1
 4526 051e 40F20000 		movw	r0, #:lower16:actual_cmd
 4527 0522 C0F20000 		movt	r0, #:upper16:actual_cmd
 4528 0526 40F20001 		movw	r1, #:lower16:.LC105
 4529 052a C0F20001 		movt	r1, #:upper16:.LC105
 4530 052e FFF7FEFF 		bl	strcmp
 4531 0532 0346     		mov	r3, r0
 998:.\console.c   **** 	if ((strcmp(actual_cmd.action, "energize") == 0) ||
 4532              		.loc 1 998 0 discriminator 1
 4533 0534 002B     		cmp	r3, #0
 4534 0536 3AD1     		bne	.L160
 4535              	.L159:
1000:.\console.c   **** 	{
1001:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4536              		.loc 1 1001 0
 4537 0538 9B4B     		ldr	r3, .L708
 4538 053a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4539 053c 002B     		cmp	r3, #0
 4540 053e 2ED1     		bne	.L161
1002:.\console.c   **** 		{
1003:.\console.c   **** 			printf("Motors ENERGIZED!\r\n");
 4541              		.loc 1 1003 0
 4542 0540 40F20000 		movw	r0, #:lower16:.LC106
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 143


 4543 0544 C0F20000 		movt	r0, #:upper16:.LC106
 4544 0548 FFF7FEFF 		bl	puts
1004:.\console.c   **** //			printf("CLU state machine init!\r\n");
1005:.\console.c   **** //			printf("Mapping state machine start!\r\n");			
1006:.\console.c   **** 			
1007:.\console.c   **** 			motor_init(&pan_axis);						/* Initialize Pan Axis  */
 4545              		.loc 1 1007 0
 4546 054c 40F20000 		movw	r0, #:lower16:pan_axis
 4547 0550 C0F20000 		movt	r0, #:upper16:pan_axis
 4548 0554 FFF7FEFF 		bl	motor_init
1008:.\console.c   **** 			motor_init(&tilt_axis);						/* Initialize Tilt Axis */			
 4549              		.loc 1 1008 0
 4550 0558 40F20000 		movw	r0, #:lower16:tilt_axis
 4551 055c C0F20000 		movt	r0, #:upper16:tilt_axis
 4552 0560 FFF7FEFF 		bl	motor_init
1009:.\console.c   **** 			
1010:.\console.c   **** #if PAN_PSEUDOABS
1011:.\console.c   **** #else
1012:.\console.c   **** 			QuadDec_PAN_Start();						/* Reset PAN Feedback Encoder Counter	*/
 4553              		.loc 1 1012 0
 4554 0564 FFF7FEFF 		bl	QuadDec_PAN_Start
1013:.\console.c   **** 			QuadDec_TILT_Start();						/* Reset TILT Feedback Encoder Counter	*/
 4555              		.loc 1 1013 0
 4556 0568 FFF7FEFF 		bl	QuadDec_TILT_Start
1014:.\console.c   **** #endif
1015:.\console.c   **** 
1016:.\console.c   **** //			/* CLU state machine Init */
1017:.\console.c   **** //			clu_sm_init();
1018:.\console.c   **** //
1019:.\console.c   **** //			/* Mapping State Machine START */
1020:.\console.c   **** //			MappingStateMachineStart();
1021:.\console.c   **** 			
1022:.\console.c   **** 			CyDelay(100);
 4557              		.loc 1 1022 0
 4558 056c 4FF06400 		mov	r0, #100
 4559 0570 FFF7FEFF 		bl	CyDelay
1023:.\console.c   **** 			machine_state = GOBEE_ENERGIZED;			
 4560              		.loc 1 1023 0
 4561 0574 40F20003 		movw	r3, #:lower16:machine_state
 4562 0578 C0F20003 		movt	r3, #:upper16:machine_state
 4563 057c 4FF00502 		mov	r2, #5
 4564 0580 1A70     		strb	r2, [r3, #0]
1024:.\console.c   **** 			motor_energize(&pan_axis);
 4565              		.loc 1 1024 0
 4566 0582 40F20000 		movw	r0, #:lower16:pan_axis
 4567 0586 C0F20000 		movt	r0, #:upper16:pan_axis
 4568 058a FFF7FEFF 		bl	motor_energize
1025:.\console.c   **** 			motor_energize(&tilt_axis);			
 4569              		.loc 1 1025 0
 4570 058e 40F20000 		movw	r0, #:lower16:tilt_axis
 4571 0592 C0F20000 		movt	r0, #:upper16:tilt_axis
 4572 0596 FFF7FEFF 		bl	motor_energize
1026:.\console.c   **** 		}
1027:.\console.c   **** 		else
1028:.\console.c   **** 		{
1029:.\console.c   **** 			printf ("*err\n");
1030:.\console.c   **** 		}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 144


1031:.\console.c   **** 	goto exitpars;
 4573              		.loc 1 1031 0
 4574 059a 06F089BC 		b	.L131
 4575              	.L161:
1029:.\console.c   **** 			printf ("*err\n");
 4576              		.loc 1 1029 0
 4577 059e 40F20000 		movw	r0, #:lower16:.LC85
 4578 05a2 C0F20000 		movt	r0, #:upper16:.LC85
 4579 05a6 FFF7FEFF 		bl	puts
 4580              		.loc 1 1031 0
 4581 05aa 06F081BC 		b	.L131
 4582              	.L160:
1032:.\console.c   **** 	}
1033:.\console.c   **** 	/* END CMD ENERGIZE */	
1034:.\console.c   **** 
1035:.\console.c   **** 	
1036:.\console.c   **** 	/* CMD VIRTUAL PAN JOYSTICK */
1037:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyp") == 0) ||
 4583              		.loc 1 1037 0
 4584 05ae 40F20000 		movw	r0, #:lower16:actual_cmd
 4585 05b2 C0F20000 		movt	r0, #:upper16:actual_cmd
 4586 05b6 40F20001 		movw	r1, #:lower16:.LC107
 4587 05ba C0F20001 		movt	r1, #:upper16:.LC107
 4588 05be FFF7FEFF 		bl	strcmp
 4589 05c2 0346     		mov	r3, r0
 4590 05c4 002B     		cmp	r3, #0
 4591 05c6 0DD0     		beq	.L163
1038:.\console.c   **** 		(strcmp(actual_cmd.action, "vjp") == 0))
 4592              		.loc 1 1038 0 discriminator 1
 4593 05c8 40F20000 		movw	r0, #:lower16:actual_cmd
 4594 05cc C0F20000 		movt	r0, #:upper16:actual_cmd
 4595 05d0 40F20001 		movw	r1, #:lower16:.LC108
 4596 05d4 C0F20001 		movt	r1, #:upper16:.LC108
 4597 05d8 FFF7FEFF 		bl	strcmp
 4598 05dc 0346     		mov	r3, r0
1037:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyp") == 0) ||
 4599              		.loc 1 1037 0 discriminator 1
 4600 05de 002B     		cmp	r3, #0
 4601 05e0 40F0BD80 		bne	.L164
 4602              	.L163:
 4603              	.LBB3:
1039:.\console.c   **** 	{
1040:.\console.c   **** 		float pan_joy_delta = 0;
 4604              		.loc 1 1040 0
 4605 05e4 4FF00003 		mov	r3, #0
 4606 05e8 C7F80C31 		str	r3, [r7, #268]	@ float
1041:.\console.c   **** 		
1042:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 4607              		.loc 1 1042 0
 4608 05ec 4FF00003 		mov	r3, #0
 4609 05f0 87F81231 		strb	r3, [r7, #274]
1043:.\console.c   **** 		while (get_key == 0)						
 4610              		.loc 1 1043 0
 4611 05f4 A5E0     		b	.L165
 4612              	.L172:
1044:.\console.c   **** 		{	
1045:.\console.c   **** 			printf("PAN: enc(t)=%+ld [step]", (int32)pan_axis.mc.slave_enc.position);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 145


 4613              		.loc 1 1045 0
 4614 05f6 40F20003 		movw	r3, #:lower16:pan_axis
 4615 05fa C0F20003 		movt	r3, #:upper16:pan_axis
 4616 05fe 5B6C     		ldr	r3, [r3, #68]
 4617 0600 40F20000 		movw	r0, #:lower16:.LC109
 4618 0604 C0F20000 		movt	r0, #:upper16:.LC109
 4619 0608 1946     		mov	r1, r3
 4620 060a FFF7FEFF 		bl	printf
1046:.\console.c   **** 			printf("   abs_pos(t)=%+ld [step] ", (int32)pan_absolute_sensor.position);	
 4621              		.loc 1 1046 0
 4622 060e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 4623 0612 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 4624 0616 5B68     		ldr	r3, [r3, #4]	@ float
 4625 0618 1846     		mov	r0, r3
 4626 061a FFF7FEFF 		bl	__aeabi_f2iz
 4627 061e 0346     		mov	r3, r0
 4628 0620 40F20000 		movw	r0, #:lower16:.LC110
 4629 0624 C0F20000 		movt	r0, #:upper16:.LC110
 4630 0628 1946     		mov	r1, r3
 4631 062a FFF7FEFF 		bl	printf
1047:.\console.c   **** 			ShowLimits(&pan_axis);
 4632              		.loc 1 1047 0
 4633 062e 40F20000 		movw	r0, #:lower16:pan_axis
 4634 0632 C0F20000 		movt	r0, #:upper16:pan_axis
 4635 0636 FFF7FEFF 		bl	ShowLimits
1048:.\console.c   **** 			printf("   vjoy(t)=%4.0f [step/sec]", (float)pan_joy_delta * SAMPLING_FREQ);
 4636              		.loc 1 1048 0
 4637 063a D7F80C01 		ldr	r0, [r7, #268]	@ float
 4638 063e 4FF40041 		mov	r1, #32768
 4639 0642 C4F2BB41 		movt	r1, 17595
 4640 0646 FFF7FEFF 		bl	__aeabi_fmul
 4641 064a 0346     		mov	r3, r0
 4642 064c 1846     		mov	r0, r3
 4643 064e FFF7FEFF 		bl	__aeabi_f2d
 4644 0652 0246     		mov	r2, r0
 4645 0654 0B46     		mov	r3, r1
 4646 0656 40F20000 		movw	r0, #:lower16:.LC111
 4647 065a C0F20000 		movt	r0, #:upper16:.LC111
 4648 065e FFF7FEFF 		bl	printf
1049:.\console.c   **** 			printf(" (%4.3f [deg/sec])", (float)(pan_joy_delta * SAMPLING_FREQ) / pan_axis.param.resolution.
 4649              		.loc 1 1049 0
 4650 0662 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4651 0666 4FF40041 		mov	r1, #32768
 4652 066a C4F2BB41 		movt	r1, 17595
 4653 066e FFF7FEFF 		bl	__aeabi_fmul
 4654 0672 0346     		mov	r3, r0
 4655 0674 1A46     		mov	r2, r3
 4656 0676 40F20003 		movw	r3, #:lower16:pan_axis
 4657 067a C0F20003 		movt	r3, #:upper16:pan_axis
 4658 067e DB68     		ldr	r3, [r3, #12]	@ float
 4659 0680 1046     		mov	r0, r2
 4660 0682 1946     		mov	r1, r3
 4661 0684 FFF7FEFF 		bl	__aeabi_fdiv
 4662 0688 0346     		mov	r3, r0
 4663 068a 1846     		mov	r0, r3
 4664 068c FFF7FEFF 		bl	__aeabi_f2d
 4665 0690 0246     		mov	r2, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 146


 4666 0692 0B46     		mov	r3, r1
 4667 0694 40F20000 		movw	r0, #:lower16:.LC112
 4668 0698 C0F20000 		movt	r0, #:upper16:.LC112
 4669 069c FFF7FEFF 		bl	printf
1050:.\console.c   **** 			printf("\r\n");
 4670              		.loc 1 1050 0
 4671 06a0 40F20000 		movw	r0, #:lower16:.LC42
 4672 06a4 C0F20000 		movt	r0, #:upper16:.LC42
 4673 06a8 FFF7FEFF 		bl	puts
1051:.\console.c   **** 			
1052:.\console.c   **** 			/* internal one-key getchar */
1053:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 4674              		.loc 1 1053 0
 4675 06ac FFF7FEFF 		bl	UART_USB_GetChar
 4676 06b0 0346     		mov	r3, r0
 4677 06b2 87F81231 		strb	r3, [r7, #274]
1054:.\console.c   **** 			
1055:.\console.c   **** 			if 	((get_key == 'a') || (get_key == 'A'))
 4678              		.loc 1 1055 0
 4679 06b6 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4680 06ba 612B     		cmp	r3, #97
 4681 06bc 03D0     		beq	.L166
 4682              		.loc 1 1055 0 is_stmt 0 discriminator 1
 4683 06be 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4684 06c2 412B     		cmp	r3, #65
 4685 06c4 0DD1     		bne	.L167
 4686              	.L166:
1056:.\console.c   **** 			{	
1057:.\console.c   **** 				pan_joy_delta = pan_joy_delta + VJOYSTICK_SPEED;
 4687              		.loc 1 1057 0 is_stmt 1
 4688 06c6 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4689 06ca 4FF07E51 		mov	r1, #1065353216
 4690 06ce FFF7FEFF 		bl	__aeabi_fadd
 4691 06d2 0346     		mov	r3, r0
 4692 06d4 C7F80C31 		str	r3, [r7, #268]	@ float
1058:.\console.c   **** 				get_key = 0; //stay in while loop
 4693              		.loc 1 1058 0
 4694 06d8 4FF00003 		mov	r3, #0
 4695 06dc 87F81231 		strb	r3, [r7, #274]
 4696 06e0 25E0     		b	.L168
 4697              	.L167:
1059:.\console.c   **** 			}
1060:.\console.c   **** 			else if 	((get_key == 'd') || (get_key == 'D'))
 4698              		.loc 1 1060 0
 4699 06e2 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4700 06e6 642B     		cmp	r3, #100
 4701 06e8 03D0     		beq	.L169
 4702              		.loc 1 1060 0 is_stmt 0 discriminator 1
 4703 06ea 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4704 06ee 442B     		cmp	r3, #68
 4705 06f0 0DD1     		bne	.L170
 4706              	.L169:
1061:.\console.c   **** 			{	
1062:.\console.c   **** 				pan_joy_delta = pan_joy_delta - VJOYSTICK_SPEED;
 4707              		.loc 1 1062 0 is_stmt 1
 4708 06f2 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4709 06f6 4FF07E51 		mov	r1, #1065353216
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 147


 4710 06fa FFF7FEFF 		bl	__aeabi_fsub
 4711 06fe 0346     		mov	r3, r0
 4712 0700 C7F80C31 		str	r3, [r7, #268]	@ float
1063:.\console.c   **** 				get_key = 0; //stay in while loop
 4713              		.loc 1 1063 0
 4714 0704 4FF00003 		mov	r3, #0
 4715 0708 87F81231 		strb	r3, [r7, #274]
 4716 070c 0FE0     		b	.L168
 4717              	.L170:
1064:.\console.c   **** 			}
1065:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 4718              		.loc 1 1065 0
 4719 070e 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4720 0712 732B     		cmp	r3, #115
 4721 0714 03D0     		beq	.L171
 4722              		.loc 1 1065 0 is_stmt 0 discriminator 1
 4723 0716 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4724 071a 532B     		cmp	r3, #83
 4725 071c 07D1     		bne	.L168
 4726              	.L171:
1066:.\console.c   **** 			{	
1067:.\console.c   **** 				pan_joy_delta  = 0;
 4727              		.loc 1 1067 0 is_stmt 1
 4728 071e 4FF00003 		mov	r3, #0
 4729 0722 C7F80C31 		str	r3, [r7, #268]	@ float
1068:.\console.c   **** 				get_key = 0; //stay in while loop
 4730              		.loc 1 1068 0
 4731 0726 4FF00003 		mov	r3, #0
 4732 072a 87F81231 		strb	r3, [r7, #274]
 4733              	.L168:
1069:.\console.c   **** 			}
1070:.\console.c   **** 			
1071:.\console.c   **** 			pan_axis.mc.master_joy_sample_delta = (int32)pan_joy_delta;	//Make Pan Virtual Joystick
 4734              		.loc 1 1071 0
 4735 072e D7F80C01 		ldr	r0, [r7, #268]	@ float
 4736 0732 FFF7FEFF 		bl	__aeabi_f2iz
 4737 0736 0246     		mov	r2, r0
 4738 0738 40F20003 		movw	r3, #:lower16:pan_axis
 4739 073c C0F20003 		movt	r3, #:upper16:pan_axis
 4740 0740 1A64     		str	r2, [r3, #64]
 4741              	.L165:
1043:.\console.c   **** 		while (get_key == 0)						
 4742              		.loc 1 1043 0 discriminator 1
 4743 0742 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4744 0746 002B     		cmp	r3, #0
 4745 0748 3FF455AF 		beq	.L172
1072:.\console.c   **** 		}
1073:.\console.c   **** 
1074:.\console.c   **** 		pan_axis.mc.master_joy_sample_delta = 0;							//stop Pan Virtual Joystick
 4746              		.loc 1 1074 0
 4747 074c 40F20003 		movw	r3, #:lower16:pan_axis
 4748 0750 C0F20003 		movt	r3, #:upper16:pan_axis
 4749 0754 4FF00002 		mov	r2, #0
 4750 0758 1A64     		str	r2, [r3, #64]
1075:.\console.c   **** 	
1076:.\console.c   **** 		goto exitpars;
 4751              		.loc 1 1076 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 148


 4752 075a 06F0A9BB 		b	.L131
 4753              	.L164:
 4754              	.LBE3:
1077:.\console.c   **** 	}
1078:.\console.c   **** 	/* END CMD VIRTUAL PAN JOYSTICK */
1079:.\console.c   **** 
1080:.\console.c   **** 	
1081:.\console.c   **** 	/* CMD VIRTUAL TILT JOYSTICK */
1082:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyt") == 0) ||
 4755              		.loc 1 1082 0
 4756 075e 40F20000 		movw	r0, #:lower16:actual_cmd
 4757 0762 C0F20000 		movt	r0, #:upper16:actual_cmd
 4758 0766 40F20001 		movw	r1, #:lower16:.LC113
 4759 076a C0F20001 		movt	r1, #:upper16:.LC113
 4760 076e FFF7FEFF 		bl	strcmp
 4761 0772 0346     		mov	r3, r0
 4762 0774 002B     		cmp	r3, #0
 4763 0776 0DD0     		beq	.L173
1083:.\console.c   **** 		(strcmp(actual_cmd.action, "vjt") == 0))
 4764              		.loc 1 1083 0 discriminator 1
 4765 0778 40F20000 		movw	r0, #:lower16:actual_cmd
 4766 077c C0F20000 		movt	r0, #:upper16:actual_cmd
 4767 0780 40F20001 		movw	r1, #:lower16:.LC114
 4768 0784 C0F20001 		movt	r1, #:upper16:.LC114
 4769 0788 FFF7FEFF 		bl	strcmp
 4770 078c 0346     		mov	r3, r0
1082:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyt") == 0) ||
 4771              		.loc 1 1082 0 discriminator 1
 4772 078e 002B     		cmp	r3, #0
 4773 0790 40F0C880 		bne	.L174
 4774              	.L173:
 4775              	.LBB4:
1084:.\console.c   **** 	{
1085:.\console.c   **** 		float tilt_joy_delta = 0;
 4776              		.loc 1 1085 0
 4777 0794 4FF00003 		mov	r3, #0
 4778 0798 C7F80831 		str	r3, [r7, #264]	@ float
1086:.\console.c   **** 		
1087:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 4779              		.loc 1 1087 0
 4780 079c 4FF00003 		mov	r3, #0
 4781 07a0 87F81231 		strb	r3, [r7, #274]
1088:.\console.c   **** 		while (get_key == 0)						
 4782              		.loc 1 1088 0
 4783 07a4 B0E0     		b	.L175
 4784              	.L709:
 4785 07a6 00BF     		.align	2
 4786              	.L708:
 4787 07a8 0F000000 		.word	actual_cmd+15
 4788              	.L182:
1089:.\console.c   **** 		{	
1090:.\console.c   **** 			printf("TILT: enc(t)=%+ld [step]", (int32)tilt_axis.mc.slave_enc.position);
 4789              		.loc 1 1090 0
 4790 07ac 40F20003 		movw	r3, #:lower16:tilt_axis
 4791 07b0 C0F20003 		movt	r3, #:upper16:tilt_axis
 4792 07b4 5B6C     		ldr	r3, [r3, #68]
 4793 07b6 40F20000 		movw	r0, #:lower16:.LC115
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 149


 4794 07ba C0F20000 		movt	r0, #:upper16:.LC115
 4795 07be 1946     		mov	r1, r3
 4796 07c0 FFF7FEFF 		bl	printf
1091:.\console.c   **** 			printf("   abs_pos(t)=%+ld [step] ", (int32)tilt_absolute_sensor.position);	
 4797              		.loc 1 1091 0
 4798 07c4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 4799 07c8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 4800 07cc 5B68     		ldr	r3, [r3, #4]	@ float
 4801 07ce 1846     		mov	r0, r3
 4802 07d0 FFF7FEFF 		bl	__aeabi_f2iz
 4803 07d4 0346     		mov	r3, r0
 4804 07d6 40F20000 		movw	r0, #:lower16:.LC110
 4805 07da C0F20000 		movt	r0, #:upper16:.LC110
 4806 07de 1946     		mov	r1, r3
 4807 07e0 FFF7FEFF 		bl	printf
1092:.\console.c   **** 			ShowLimits(&tilt_axis);
 4808              		.loc 1 1092 0
 4809 07e4 40F20000 		movw	r0, #:lower16:tilt_axis
 4810 07e8 C0F20000 		movt	r0, #:upper16:tilt_axis
 4811 07ec FFF7FEFF 		bl	ShowLimits
1093:.\console.c   **** 			printf("   vjoy(t)=%4.0f [step/sec]", (float)tilt_joy_delta * SAMPLING_FREQ);
 4812              		.loc 1 1093 0
 4813 07f0 D7F80801 		ldr	r0, [r7, #264]	@ float
 4814 07f4 4FF40041 		mov	r1, #32768
 4815 07f8 C4F2BB41 		movt	r1, 17595
 4816 07fc FFF7FEFF 		bl	__aeabi_fmul
 4817 0800 0346     		mov	r3, r0
 4818 0802 1846     		mov	r0, r3
 4819 0804 FFF7FEFF 		bl	__aeabi_f2d
 4820 0808 0246     		mov	r2, r0
 4821 080a 0B46     		mov	r3, r1
 4822 080c 40F20000 		movw	r0, #:lower16:.LC111
 4823 0810 C0F20000 		movt	r0, #:upper16:.LC111
 4824 0814 FFF7FEFF 		bl	printf
1094:.\console.c   **** 			printf(" (%4.3f [deg/sec])", (float)(tilt_joy_delta * SAMPLING_FREQ * 360) / tilt_axis.param.res
 4825              		.loc 1 1094 0
 4826 0818 D7F80801 		ldr	r0, [r7, #264]	@ float
 4827 081c 4FF40041 		mov	r1, #32768
 4828 0820 C4F2BB41 		movt	r1, 17595
 4829 0824 FFF7FEFF 		bl	__aeabi_fmul
 4830 0828 0346     		mov	r3, r0
 4831 082a 1846     		mov	r0, r3
 4832 082c 4FF00001 		mov	r1, #0
 4833 0830 C4F2B431 		movt	r1, 17332
 4834 0834 FFF7FEFF 		bl	__aeabi_fmul
 4835 0838 0346     		mov	r3, r0
 4836 083a 1A46     		mov	r2, r3
 4837 083c 40F20003 		movw	r3, #:lower16:tilt_axis
 4838 0840 C0F20003 		movt	r3, #:upper16:tilt_axis
 4839 0844 DB68     		ldr	r3, [r3, #12]	@ float
 4840 0846 1046     		mov	r0, r2
 4841 0848 1946     		mov	r1, r3
 4842 084a FFF7FEFF 		bl	__aeabi_fdiv
 4843 084e 0346     		mov	r3, r0
 4844 0850 1846     		mov	r0, r3
 4845 0852 FFF7FEFF 		bl	__aeabi_f2d
 4846 0856 0246     		mov	r2, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 150


 4847 0858 0B46     		mov	r3, r1
 4848 085a 40F20000 		movw	r0, #:lower16:.LC112
 4849 085e C0F20000 		movt	r0, #:upper16:.LC112
 4850 0862 FFF7FEFF 		bl	printf
1095:.\console.c   **** 			printf("\r\n");
 4851              		.loc 1 1095 0
 4852 0866 40F20000 		movw	r0, #:lower16:.LC42
 4853 086a C0F20000 		movt	r0, #:upper16:.LC42
 4854 086e FFF7FEFF 		bl	puts
1096:.\console.c   **** 			
1097:.\console.c   **** 			/* internal one-key getchar */
1098:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 4855              		.loc 1 1098 0
 4856 0872 FFF7FEFF 		bl	UART_USB_GetChar
 4857 0876 0346     		mov	r3, r0
 4858 0878 87F81231 		strb	r3, [r7, #274]
1099:.\console.c   **** 			
1100:.\console.c   **** 			if 	((get_key == 'w') || (get_key == 'W'))
 4859              		.loc 1 1100 0
 4860 087c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4861 0880 772B     		cmp	r3, #119
 4862 0882 03D0     		beq	.L176
 4863              		.loc 1 1100 0 is_stmt 0 discriminator 1
 4864 0884 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4865 0888 572B     		cmp	r3, #87
 4866 088a 0DD1     		bne	.L177
 4867              	.L176:
1101:.\console.c   **** 			{	
1102:.\console.c   **** 				tilt_joy_delta = tilt_joy_delta + VJOYSTICK_SPEED;
 4868              		.loc 1 1102 0 is_stmt 1
 4869 088c D7F80801 		ldr	r0, [r7, #264]	@ float
 4870 0890 4FF07E51 		mov	r1, #1065353216
 4871 0894 FFF7FEFF 		bl	__aeabi_fadd
 4872 0898 0346     		mov	r3, r0
 4873 089a C7F80831 		str	r3, [r7, #264]	@ float
1103:.\console.c   **** 				get_key = 0; //stay in while loop
 4874              		.loc 1 1103 0
 4875 089e 4FF00003 		mov	r3, #0
 4876 08a2 87F81231 		strb	r3, [r7, #274]
 4877 08a6 25E0     		b	.L178
 4878              	.L177:
1104:.\console.c   **** 			}
1105:.\console.c   **** 			else if 	((get_key == 'z') || (get_key == 'Z'))
 4879              		.loc 1 1105 0
 4880 08a8 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4881 08ac 7A2B     		cmp	r3, #122
 4882 08ae 03D0     		beq	.L179
 4883              		.loc 1 1105 0 is_stmt 0 discriminator 1
 4884 08b0 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4885 08b4 5A2B     		cmp	r3, #90
 4886 08b6 0DD1     		bne	.L180
 4887              	.L179:
1106:.\console.c   **** 			{	
1107:.\console.c   **** 				tilt_joy_delta = tilt_joy_delta - VJOYSTICK_SPEED;
 4888              		.loc 1 1107 0 is_stmt 1
 4889 08b8 D7F80801 		ldr	r0, [r7, #264]	@ float
 4890 08bc 4FF07E51 		mov	r1, #1065353216
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 151


 4891 08c0 FFF7FEFF 		bl	__aeabi_fsub
 4892 08c4 0346     		mov	r3, r0
 4893 08c6 C7F80831 		str	r3, [r7, #264]	@ float
1108:.\console.c   **** 				get_key = 0; //stay in while loop
 4894              		.loc 1 1108 0
 4895 08ca 4FF00003 		mov	r3, #0
 4896 08ce 87F81231 		strb	r3, [r7, #274]
 4897 08d2 0FE0     		b	.L178
 4898              	.L180:
1109:.\console.c   **** 			}
1110:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 4899              		.loc 1 1110 0
 4900 08d4 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4901 08d8 732B     		cmp	r3, #115
 4902 08da 03D0     		beq	.L181
 4903              		.loc 1 1110 0 is_stmt 0 discriminator 1
 4904 08dc 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4905 08e0 532B     		cmp	r3, #83
 4906 08e2 07D1     		bne	.L178
 4907              	.L181:
1111:.\console.c   **** 			{	
1112:.\console.c   **** 				tilt_joy_delta  = 0;
 4908              		.loc 1 1112 0 is_stmt 1
 4909 08e4 4FF00003 		mov	r3, #0
 4910 08e8 C7F80831 		str	r3, [r7, #264]	@ float
1113:.\console.c   **** 				get_key = 0; //stay in while loop
 4911              		.loc 1 1113 0
 4912 08ec 4FF00003 		mov	r3, #0
 4913 08f0 87F81231 		strb	r3, [r7, #274]
 4914              	.L178:
1114:.\console.c   **** 			}
1115:.\console.c   **** 			
1116:.\console.c   **** 			tilt_axis.mc.master_joy_sample_delta = (int32)tilt_joy_delta;	//Make Tilt Virtual Joystick
 4915              		.loc 1 1116 0
 4916 08f4 D7F80801 		ldr	r0, [r7, #264]	@ float
 4917 08f8 FFF7FEFF 		bl	__aeabi_f2iz
 4918 08fc 0246     		mov	r2, r0
 4919 08fe 40F20003 		movw	r3, #:lower16:tilt_axis
 4920 0902 C0F20003 		movt	r3, #:upper16:tilt_axis
 4921 0906 1A64     		str	r2, [r3, #64]
 4922              	.L175:
1088:.\console.c   **** 		while (get_key == 0)						
 4923              		.loc 1 1088 0 discriminator 1
 4924 0908 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4925 090c 002B     		cmp	r3, #0
 4926 090e 3FF44DAF 		beq	.L182
1117:.\console.c   **** 		}
1118:.\console.c   **** 
1119:.\console.c   **** 		tilt_axis.mc.master_joy_sample_delta = 0;							//stop Tilt Virtual Joystick
 4927              		.loc 1 1119 0
 4928 0912 40F20003 		movw	r3, #:lower16:tilt_axis
 4929 0916 C0F20003 		movt	r3, #:upper16:tilt_axis
 4930 091a 4FF00002 		mov	r2, #0
 4931 091e 1A64     		str	r2, [r3, #64]
1120:.\console.c   **** 	
1121:.\console.c   **** 		goto exitpars;
 4932              		.loc 1 1121 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 152


 4933 0920 06F0C6BA 		b	.L131
 4934              	.L174:
 4935              	.LBE4:
1122:.\console.c   **** 	}
1123:.\console.c   **** 	/* END CMD VIRTUAL TILT JOYSTICK */
1124:.\console.c   **** 	
1125:.\console.c   **** 	
1126:.\console.c   **** 	/* CMD VIRTUAL PAN + TILT JOYSTICK */
1127:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoy") == 0) ||
 4936              		.loc 1 1127 0
 4937 0924 40F20000 		movw	r0, #:lower16:actual_cmd
 4938 0928 C0F20000 		movt	r0, #:upper16:actual_cmd
 4939 092c 40F20001 		movw	r1, #:lower16:.LC116
 4940 0930 C0F20001 		movt	r1, #:upper16:.LC116
 4941 0934 FFF7FEFF 		bl	strcmp
 4942 0938 0346     		mov	r3, r0
 4943 093a 002B     		cmp	r3, #0
 4944 093c 0DD0     		beq	.L183
1128:.\console.c   **** 		(strcmp(actual_cmd.action, "vj") == 0))
 4945              		.loc 1 1128 0 discriminator 1
 4946 093e 40F20000 		movw	r0, #:lower16:actual_cmd
 4947 0942 C0F20000 		movt	r0, #:upper16:actual_cmd
 4948 0946 40F20001 		movw	r1, #:lower16:.LC117
 4949 094a C0F20001 		movt	r1, #:upper16:.LC117
 4950 094e FFF7FEFF 		bl	strcmp
 4951 0952 0346     		mov	r3, r0
1127:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoy") == 0) ||
 4952              		.loc 1 1127 0 discriminator 1
 4953 0954 002B     		cmp	r3, #0
 4954 0956 40F03981 		bne	.L184
 4955              	.L183:
 4956              	.LBB5:
1129:.\console.c   **** 	{
1130:.\console.c   **** 		float pan_joy_delta = 0;		
 4957              		.loc 1 1130 0
 4958 095a 4FF00003 		mov	r3, #0
 4959 095e C7F80431 		str	r3, [r7, #260]	@ float
1131:.\console.c   **** 		float tilt_joy_delta = 0;
 4960              		.loc 1 1131 0
 4961 0962 4FF00003 		mov	r3, #0
 4962 0966 C7F80031 		str	r3, [r7, #256]	@ float
1132:.\console.c   **** 		
1133:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 4963              		.loc 1 1133 0
 4964 096a 4FF00003 		mov	r3, #0
 4965 096e 87F81231 		strb	r3, [r7, #274]
1134:.\console.c   **** 		while (get_key == 0)						
 4966              		.loc 1 1134 0
 4967 0972 16E1     		b	.L185
 4968              	.L204:
1135:.\console.c   **** 		{						
1136:.\console.c   **** 			printf("PAN: ");
 4969              		.loc 1 1136 0
 4970 0974 40F20000 		movw	r0, #:lower16:.LC118
 4971 0978 C0F20000 		movt	r0, #:upper16:.LC118
 4972 097c FFF7FEFF 		bl	printf
1137:.\console.c   **** 			ShowLimits(&pan_axis);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 153


 4973              		.loc 1 1137 0
 4974 0980 40F20000 		movw	r0, #:lower16:pan_axis
 4975 0984 C0F20000 		movt	r0, #:upper16:pan_axis
 4976 0988 FFF7FEFF 		bl	ShowLimits
1138:.\console.c   **** 			printf("vjoy(t)=%4.0f [step/sec]", (float)pan_joy_delta * SAMPLING_FREQ);
 4977              		.loc 1 1138 0
 4978 098c D7F80401 		ldr	r0, [r7, #260]	@ float
 4979 0990 4FF40041 		mov	r1, #32768
 4980 0994 C4F2BB41 		movt	r1, 17595
 4981 0998 FFF7FEFF 		bl	__aeabi_fmul
 4982 099c 0346     		mov	r3, r0
 4983 099e 1846     		mov	r0, r3
 4984 09a0 FFF7FEFF 		bl	__aeabi_f2d
 4985 09a4 0246     		mov	r2, r0
 4986 09a6 0B46     		mov	r3, r1
 4987 09a8 40F20000 		movw	r0, #:lower16:.LC119
 4988 09ac C0F20000 		movt	r0, #:upper16:.LC119
 4989 09b0 FFF7FEFF 		bl	printf
1139:.\console.c   **** 			printf(" (%5.4f [A])", (float)pan_axis.mc.current);	
 4990              		.loc 1 1139 0
 4991 09b4 40F20003 		movw	r3, #:lower16:pan_axis
 4992 09b8 C0F20003 		movt	r3, #:upper16:pan_axis
 4993 09bc 9B6F     		ldr	r3, [r3, #120]	@ float
 4994 09be 1846     		mov	r0, r3
 4995 09c0 FFF7FEFF 		bl	__aeabi_f2d
 4996 09c4 0246     		mov	r2, r0
 4997 09c6 0B46     		mov	r3, r1
 4998 09c8 40F20000 		movw	r0, #:lower16:.LC120
 4999 09cc C0F20000 		movt	r0, #:upper16:.LC120
 5000 09d0 FFF7FEFF 		bl	printf
1140:.\console.c   **** 			
1141:.\console.c   **** 			printf("    TILT: ");
 5001              		.loc 1 1141 0
 5002 09d4 40F20000 		movw	r0, #:lower16:.LC121
 5003 09d8 C0F20000 		movt	r0, #:upper16:.LC121
 5004 09dc FFF7FEFF 		bl	printf
1142:.\console.c   **** 			ShowLimits(&tilt_axis);
 5005              		.loc 1 1142 0
 5006 09e0 40F20000 		movw	r0, #:lower16:tilt_axis
 5007 09e4 C0F20000 		movt	r0, #:upper16:tilt_axis
 5008 09e8 FFF7FEFF 		bl	ShowLimits
1143:.\console.c   **** 			printf("vjoy(t)=%4.0f [step/sec]", (float)tilt_joy_delta * SAMPLING_FREQ);
 5009              		.loc 1 1143 0
 5010 09ec D7F80001 		ldr	r0, [r7, #256]	@ float
 5011 09f0 4FF40041 		mov	r1, #32768
 5012 09f4 C4F2BB41 		movt	r1, 17595
 5013 09f8 FFF7FEFF 		bl	__aeabi_fmul
 5014 09fc 0346     		mov	r3, r0
 5015 09fe 1846     		mov	r0, r3
 5016 0a00 FFF7FEFF 		bl	__aeabi_f2d
 5017 0a04 0246     		mov	r2, r0
 5018 0a06 0B46     		mov	r3, r1
 5019 0a08 40F20000 		movw	r0, #:lower16:.LC119
 5020 0a0c C0F20000 		movt	r0, #:upper16:.LC119
 5021 0a10 FFF7FEFF 		bl	printf
1144:.\console.c   **** 			printf(" (%5.4f [A])", (float)tilt_axis.mc.current);			
 5022              		.loc 1 1144 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 154


 5023 0a14 40F20003 		movw	r3, #:lower16:tilt_axis
 5024 0a18 C0F20003 		movt	r3, #:upper16:tilt_axis
 5025 0a1c 9B6F     		ldr	r3, [r3, #120]	@ float
 5026 0a1e 1846     		mov	r0, r3
 5027 0a20 FFF7FEFF 		bl	__aeabi_f2d
 5028 0a24 0246     		mov	r2, r0
 5029 0a26 0B46     		mov	r3, r1
 5030 0a28 40F20000 		movw	r0, #:lower16:.LC120
 5031 0a2c C0F20000 		movt	r0, #:upper16:.LC120
 5032 0a30 FFF7FEFF 		bl	printf
1145:.\console.c   **** 			printf("\r\n");
 5033              		.loc 1 1145 0
 5034 0a34 40F20000 		movw	r0, #:lower16:.LC42
 5035 0a38 C0F20000 		movt	r0, #:upper16:.LC42
 5036 0a3c FFF7FEFF 		bl	puts
1146:.\console.c   **** 			
1147:.\console.c   **** 			/* internal one-key getchar */
1148:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 5037              		.loc 1 1148 0
 5038 0a40 FFF7FEFF 		bl	UART_USB_GetChar
 5039 0a44 0346     		mov	r3, r0
 5040 0a46 87F81231 		strb	r3, [r7, #274]
1149:.\console.c   **** 			
1150:.\console.c   **** 			if 	((get_key == 'a') || (get_key == 'A'))
 5041              		.loc 1 1150 0
 5042 0a4a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5043 0a4e 612B     		cmp	r3, #97
 5044 0a50 03D0     		beq	.L186
 5045              		.loc 1 1150 0 is_stmt 0 discriminator 1
 5046 0a52 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5047 0a56 412B     		cmp	r3, #65
 5048 0a58 18D1     		bne	.L187
 5049              	.L186:
1151:.\console.c   **** 			{	
1152:.\console.c   **** 				//risoluzione encoder = 4096 step/giro
1153:.\console.c   **** 				//1330rpm/V  (a vuoto) --> 9310rpm su 7V --> 155 giri/sec * 4096 step/giro --> 635562 step/sec 
1154:.\console.c   **** 				//però sembrano troppi quindi metto 30 (30*1500=45000)
1155:.\console.c   **** 				if (pan_joy_delta < 100)
 5050              		.loc 1 1155 0 is_stmt 1
 5051 0a5a D7F80401 		ldr	r0, [r7, #260]	@ float
 5052 0a5e 4FF00001 		mov	r1, #0
 5053 0a62 C4F2C821 		movt	r1, 17096
 5054 0a66 FFF7FEFF 		bl	__aeabi_fcmplt
 5055 0a6a 0346     		mov	r3, r0
 5056 0a6c 002B     		cmp	r3, #0
 5057 0a6e 08D0     		beq	.L188
 5058              	.L640:
1156:.\console.c   **** 				{
1157:.\console.c   **** 					pan_joy_delta = pan_joy_delta + VJOYSTICK_SPEED;
 5059              		.loc 1 1157 0
 5060 0a70 D7F80401 		ldr	r0, [r7, #260]	@ float
 5061 0a74 4FF07E51 		mov	r1, #1065353216
 5062 0a78 FFF7FEFF 		bl	__aeabi_fadd
 5063 0a7c 0346     		mov	r3, r0
 5064 0a7e C7F80431 		str	r3, [r7, #260]	@ float
 5065              	.L188:
1158:.\console.c   **** 				}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 155


1159:.\console.c   **** 				get_key = 0; //stay in while loop
 5066              		.loc 1 1159 0
 5067 0a82 4FF00003 		mov	r3, #0
 5068 0a86 87F81231 		strb	r3, [r7, #274]
 5069 0a8a 76E0     		b	.L190
 5070              	.L187:
1160:.\console.c   **** 			}
1161:.\console.c   **** 			else if 	((get_key == 'd') || (get_key == 'D'))
 5071              		.loc 1 1161 0
 5072 0a8c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5073 0a90 642B     		cmp	r3, #100
 5074 0a92 03D0     		beq	.L191
 5075              		.loc 1 1161 0 is_stmt 0 discriminator 1
 5076 0a94 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5077 0a98 442B     		cmp	r3, #68
 5078 0a9a 18D1     		bne	.L192
 5079              	.L191:
1162:.\console.c   **** 			{	
1163:.\console.c   **** 				if (pan_joy_delta > -100)
 5080              		.loc 1 1163 0 is_stmt 1
 5081 0a9c D7F80401 		ldr	r0, [r7, #260]	@ float
 5082 0aa0 4FF00001 		mov	r1, #0
 5083 0aa4 CCF2C821 		movt	r1, 49864
 5084 0aa8 FFF7FEFF 		bl	__aeabi_fcmpgt
 5085 0aac 0346     		mov	r3, r0
 5086 0aae 002B     		cmp	r3, #0
 5087 0ab0 08D0     		beq	.L193
 5088              	.L641:
1164:.\console.c   **** 				{
1165:.\console.c   **** 					pan_joy_delta = pan_joy_delta - VJOYSTICK_SPEED;
 5089              		.loc 1 1165 0
 5090 0ab2 D7F80401 		ldr	r0, [r7, #260]	@ float
 5091 0ab6 4FF07E51 		mov	r1, #1065353216
 5092 0aba FFF7FEFF 		bl	__aeabi_fsub
 5093 0abe 0346     		mov	r3, r0
 5094 0ac0 C7F80431 		str	r3, [r7, #260]	@ float
 5095              	.L193:
1166:.\console.c   **** 				}
1167:.\console.c   **** 				get_key = 0; //stay in while loop
 5096              		.loc 1 1167 0
 5097 0ac4 4FF00003 		mov	r3, #0
 5098 0ac8 87F81231 		strb	r3, [r7, #274]
 5099 0acc 55E0     		b	.L190
 5100              	.L192:
1168:.\console.c   **** 			}			
1169:.\console.c   **** 			else if 	((get_key == 'w') || (get_key == 'W'))
 5101              		.loc 1 1169 0
 5102 0ace 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5103 0ad2 772B     		cmp	r3, #119
 5104 0ad4 03D0     		beq	.L195
 5105              		.loc 1 1169 0 is_stmt 0 discriminator 1
 5106 0ad6 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5107 0ada 572B     		cmp	r3, #87
 5108 0adc 18D1     		bne	.L196
 5109              	.L195:
1170:.\console.c   **** 			{	
1171:.\console.c   **** 				if (tilt_joy_delta < 100)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 156


 5110              		.loc 1 1171 0 is_stmt 1
 5111 0ade D7F80001 		ldr	r0, [r7, #256]	@ float
 5112 0ae2 4FF00001 		mov	r1, #0
 5113 0ae6 C4F2C821 		movt	r1, 17096
 5114 0aea FFF7FEFF 		bl	__aeabi_fcmplt
 5115 0aee 0346     		mov	r3, r0
 5116 0af0 002B     		cmp	r3, #0
 5117 0af2 08D0     		beq	.L197
 5118              	.L642:
1172:.\console.c   **** 				{				
1173:.\console.c   **** 					tilt_joy_delta = tilt_joy_delta + VJOYSTICK_SPEED;
 5119              		.loc 1 1173 0
 5120 0af4 D7F80001 		ldr	r0, [r7, #256]	@ float
 5121 0af8 4FF07E51 		mov	r1, #1065353216
 5122 0afc FFF7FEFF 		bl	__aeabi_fadd
 5123 0b00 0346     		mov	r3, r0
 5124 0b02 C7F80031 		str	r3, [r7, #256]	@ float
 5125              	.L197:
1174:.\console.c   **** 				}
1175:.\console.c   **** 				get_key = 0; //stay in while loop
 5126              		.loc 1 1175 0
 5127 0b06 4FF00003 		mov	r3, #0
 5128 0b0a 87F81231 		strb	r3, [r7, #274]
 5129 0b0e 34E0     		b	.L190
 5130              	.L196:
1176:.\console.c   **** 			}
1177:.\console.c   **** 			else if 	((get_key == 'z') || (get_key == 'Z'))
 5131              		.loc 1 1177 0
 5132 0b10 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5133 0b14 7A2B     		cmp	r3, #122
 5134 0b16 03D0     		beq	.L199
 5135              		.loc 1 1177 0 is_stmt 0 discriminator 1
 5136 0b18 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5137 0b1c 5A2B     		cmp	r3, #90
 5138 0b1e 18D1     		bne	.L200
 5139              	.L199:
1178:.\console.c   **** 			{	
1179:.\console.c   **** 				if (tilt_joy_delta > -100)
 5140              		.loc 1 1179 0 is_stmt 1
 5141 0b20 D7F80001 		ldr	r0, [r7, #256]	@ float
 5142 0b24 4FF00001 		mov	r1, #0
 5143 0b28 CCF2C821 		movt	r1, 49864
 5144 0b2c FFF7FEFF 		bl	__aeabi_fcmpgt
 5145 0b30 0346     		mov	r3, r0
 5146 0b32 002B     		cmp	r3, #0
 5147 0b34 08D0     		beq	.L201
 5148              	.L643:
1180:.\console.c   **** 				{					
1181:.\console.c   **** 					tilt_joy_delta = tilt_joy_delta - VJOYSTICK_SPEED;
 5149              		.loc 1 1181 0
 5150 0b36 D7F80001 		ldr	r0, [r7, #256]	@ float
 5151 0b3a 4FF07E51 		mov	r1, #1065353216
 5152 0b3e FFF7FEFF 		bl	__aeabi_fsub
 5153 0b42 0346     		mov	r3, r0
 5154 0b44 C7F80031 		str	r3, [r7, #256]	@ float
 5155              	.L201:
1182:.\console.c   **** 				}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 157


1183:.\console.c   **** 				get_key = 0; //stay in while loop
 5156              		.loc 1 1183 0
 5157 0b48 4FF00003 		mov	r3, #0
 5158 0b4c 87F81231 		strb	r3, [r7, #274]
 5159 0b50 13E0     		b	.L190
 5160              	.L200:
1184:.\console.c   **** 			}
1185:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 5161              		.loc 1 1185 0
 5162 0b52 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5163 0b56 732B     		cmp	r3, #115
 5164 0b58 03D0     		beq	.L203
 5165              		.loc 1 1185 0 is_stmt 0 discriminator 1
 5166 0b5a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5167 0b5e 532B     		cmp	r3, #83
 5168 0b60 0BD1     		bne	.L190
 5169              	.L203:
1186:.\console.c   **** 			{	
1187:.\console.c   **** 				pan_joy_delta   = 0;
 5170              		.loc 1 1187 0 is_stmt 1
 5171 0b62 4FF00003 		mov	r3, #0
 5172 0b66 C7F80431 		str	r3, [r7, #260]	@ float
1188:.\console.c   **** 				tilt_joy_delta  = 0;
 5173              		.loc 1 1188 0
 5174 0b6a 4FF00003 		mov	r3, #0
 5175 0b6e C7F80031 		str	r3, [r7, #256]	@ float
1189:.\console.c   **** 				get_key = 0; //stay in while loop
 5176              		.loc 1 1189 0
 5177 0b72 4FF00003 		mov	r3, #0
 5178 0b76 87F81231 		strb	r3, [r7, #274]
 5179              	.L190:
1190:.\console.c   **** 			}
1191:.\console.c   **** 			
1192:.\console.c   **** 			pan_axis.mc.master_joy_sample_delta  = (int32)pan_joy_delta;	//Make Pan  Virtual Joystick			
 5180              		.loc 1 1192 0
 5181 0b7a D7F80401 		ldr	r0, [r7, #260]	@ float
 5182 0b7e FFF7FEFF 		bl	__aeabi_f2iz
 5183 0b82 0246     		mov	r2, r0
 5184 0b84 40F20003 		movw	r3, #:lower16:pan_axis
 5185 0b88 C0F20003 		movt	r3, #:upper16:pan_axis
 5186 0b8c 1A64     		str	r2, [r3, #64]
1193:.\console.c   **** 			tilt_axis.mc.master_joy_sample_delta = (int32)tilt_joy_delta;	//Make Tilt Virtual Joystick
 5187              		.loc 1 1193 0
 5188 0b8e D7F80001 		ldr	r0, [r7, #256]	@ float
 5189 0b92 FFF7FEFF 		bl	__aeabi_f2iz
 5190 0b96 0246     		mov	r2, r0
 5191 0b98 40F20003 		movw	r3, #:lower16:tilt_axis
 5192 0b9c C0F20003 		movt	r3, #:upper16:tilt_axis
 5193 0ba0 1A64     		str	r2, [r3, #64]
 5194              	.L185:
1134:.\console.c   **** 		while (get_key == 0)						
 5195              		.loc 1 1134 0 discriminator 1
 5196 0ba2 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5197 0ba6 002B     		cmp	r3, #0
 5198 0ba8 3FF4E4AE 		beq	.L204
1194:.\console.c   **** 		}
1195:.\console.c   **** 		
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 158


1196:.\console.c   **** 		pan_axis.mc.master_joy_sample_delta  = 0;							//stop Pan  Virtual Joystick
 5199              		.loc 1 1196 0
 5200 0bac 40F20003 		movw	r3, #:lower16:pan_axis
 5201 0bb0 C0F20003 		movt	r3, #:upper16:pan_axis
 5202 0bb4 4FF00002 		mov	r2, #0
 5203 0bb8 1A64     		str	r2, [r3, #64]
1197:.\console.c   **** 		tilt_axis.mc.master_joy_sample_delta = 0;							//stop Tilt Virtual Joystick
 5204              		.loc 1 1197 0
 5205 0bba 40F20003 		movw	r3, #:lower16:tilt_axis
 5206 0bbe C0F20003 		movt	r3, #:upper16:tilt_axis
 5207 0bc2 4FF00002 		mov	r2, #0
 5208 0bc6 1A64     		str	r2, [r3, #64]
1198:.\console.c   **** 	
1199:.\console.c   **** 		goto exitpars;
 5209              		.loc 1 1199 0
 5210 0bc8 06F072B9 		b	.L131
 5211              	.L184:
 5212              	.LBE5:
1200:.\console.c   **** 	}
1201:.\console.c   **** 	/* END CMD VIRTUAL PAN+TILT JOYSTICK */	
1202:.\console.c   **** 
1203:.\console.c   **** 	
1204:.\console.c   **** 	/* NOP CMD */	
1205:.\console.c   **** 	if (strlen(actual_cmd.action) == 0)
 5213              		.loc 1 1205 0
 5214 0bcc 40F20003 		movw	r3, #:lower16:actual_cmd
 5215 0bd0 C0F20003 		movt	r3, #:upper16:actual_cmd
 5216 0bd4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5217 0bd6 002B     		cmp	r3, #0
 5218 0bd8 06F05D81 		beq	.L685
 5219              	.L205:
1206:.\console.c   **** 	{
1207:.\console.c   **** 	goto exitpars;
1208:.\console.c   **** 	}
1209:.\console.c   **** 	/* END NOP CMD */
1210:.\console.c   **** 
1211:.\console.c   **** 	
1212:.\console.c   **** 	/* CMD 'VERSION' (alias V) */	
1213:.\console.c   **** 	if (((strcmp(actual_cmd.action, "v") == 0)
 5220              		.loc 1 1213 0
 5221 0bdc 40F20000 		movw	r0, #:lower16:actual_cmd
 5222 0be0 C0F20000 		movt	r0, #:upper16:actual_cmd
 5223 0be4 40F20001 		movw	r1, #:lower16:.LC122
 5224 0be8 C0F20001 		movt	r1, #:upper16:.LC122
 5225 0bec FFF7FEFF 		bl	strcmp
 5226 0bf0 0346     		mov	r3, r0
 5227 0bf2 002B     		cmp	r3, #0
 5228 0bf4 0CD0     		beq	.L206
1214:.\console.c   **** 		|| (strcmp(actual_cmd.action, "version") == 0)))
 5229              		.loc 1 1214 0
 5230 0bf6 40F20000 		movw	r0, #:lower16:actual_cmd
 5231 0bfa C0F20000 		movt	r0, #:upper16:actual_cmd
 5232 0bfe 40F20001 		movw	r1, #:lower16:.LC123
 5233 0c02 C0F20001 		movt	r1, #:upper16:.LC123
 5234 0c06 FFF7FEFF 		bl	strcmp
 5235 0c0a 0346     		mov	r3, r0
 5236 0c0c 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 159


 5237 0c0e 31D1     		bne	.L207
 5238              	.L206:
1215:.\console.c   **** 	{
1216:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 5239              		.loc 1 1216 0
 5240 0c10 B84B     		ldr	r3, .L710
 5241 0c12 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5242 0c14 002B     		cmp	r3, #0
 5243 0c16 25D1     		bne	.L208
1217:.\console.c   **** 		{
1218:.\console.c   **** 			printf(STR_FW_VERS);
 5244              		.loc 1 1218 0
 5245 0c18 40F20000 		movw	r0, #:lower16:.LC124
 5246 0c1c C0F20000 		movt	r0, #:upper16:.LC124
 5247 0c20 FFF7FEFF 		bl	puts
1219:.\console.c   **** 			printf(STR_COPY);
 5248              		.loc 1 1219 0
 5249 0c24 40F20000 		movw	r0, #:lower16:.LC125
 5250 0c28 C0F20000 		movt	r0, #:upper16:.LC125
 5251 0c2c FFF7FEFF 		bl	puts
1220:.\console.c   **** 			printf(STR_AUTHOR1);
 5252              		.loc 1 1220 0
 5253 0c30 40F20000 		movw	r0, #:lower16:.LC126
 5254 0c34 C0F20000 		movt	r0, #:upper16:.LC126
 5255 0c38 FFF7FEFF 		bl	puts
1221:.\console.c   **** 			printf(STR_AUTHOR2);
 5256              		.loc 1 1221 0
 5257 0c3c 40F20000 		movw	r0, #:lower16:.LC127
 5258 0c40 C0F20000 		movt	r0, #:upper16:.LC127
 5259 0c44 FFF7FEFF 		bl	puts
1222:.\console.c   **** 			printf(STR_AUTHOR3);
 5260              		.loc 1 1222 0
 5261 0c48 40F20000 		movw	r0, #:lower16:.LC128
 5262 0c4c C0F20000 		movt	r0, #:upper16:.LC128
 5263 0c50 FFF7FEFF 		bl	puts
1223:.\console.c   **** 			printf(STR_AUTHOR4);			
 5264              		.loc 1 1223 0
 5265 0c54 40F20000 		movw	r0, #:lower16:.LC129
 5266 0c58 C0F20000 		movt	r0, #:upper16:.LC129
 5267 0c5c FFF7FEFF 		bl	puts
1224:.\console.c   **** 		}
1225:.\console.c   **** 		else
1226:.\console.c   **** 		{
1227:.\console.c   **** 			printf(STR_ERROR1);
1228:.\console.c   **** 		}
1229:.\console.c   **** 	goto exitpars;
 5268              		.loc 1 1229 0
 5269 0c60 06F026B9 		b	.L131
 5270              	.L208:
1227:.\console.c   **** 			printf(STR_ERROR1);
 5271              		.loc 1 1227 0
 5272 0c64 40F20000 		movw	r0, #:lower16:.LC82
 5273 0c68 C0F20000 		movt	r0, #:upper16:.LC82
 5274 0c6c FFF7FEFF 		bl	printf
 5275              		.loc 1 1229 0
 5276 0c70 06F01EB9 		b	.L131
 5277              	.L207:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 160


1230:.\console.c   **** 	}
1231:.\console.c   **** 	/* END CMD VERSION */ 
1232:.\console.c   **** 
1233:.\console.c   **** 
1234:.\console.c   **** 	/* CMD 'PROMPT' */	
1235:.\console.c   **** 	if (strcmp(actual_cmd.action, "prompt") == 0)
 5278              		.loc 1 1235 0
 5279 0c74 40F20000 		movw	r0, #:lower16:actual_cmd
 5280 0c78 C0F20000 		movt	r0, #:upper16:actual_cmd
 5281 0c7c 40F20001 		movw	r1, #:lower16:.LC130
 5282 0c80 C0F20001 		movt	r1, #:upper16:.LC130
 5283 0c84 FFF7FEFF 		bl	strcmp
 5284 0c88 0346     		mov	r3, r0
 5285 0c8a 002B     		cmp	r3, #0
 5286 0c8c 2BD1     		bne	.L210
1236:.\console.c   **** 	{
1237:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 5287              		.loc 1 1237 0
 5288 0c8e 994B     		ldr	r3, .L710
 5289 0c90 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5290 0c92 002B     		cmp	r3, #0
 5291 0c94 1FD1     		bne	.L211
1238:.\console.c   **** 		{
1239:.\console.c   **** 			printf(STR_PROMPT0);
 5292              		.loc 1 1239 0
 5293 0c96 40F20000 		movw	r0, #:lower16:.LC131
 5294 0c9a C0F20000 		movt	r0, #:upper16:.LC131
 5295 0c9e FFF7FEFF 		bl	puts
1240:.\console.c   **** 			printf(STR_PROMPT1);
 5296              		.loc 1 1240 0
 5297 0ca2 40F20000 		movw	r0, #:lower16:.LC132
 5298 0ca6 C0F20000 		movt	r0, #:upper16:.LC132
 5299 0caa FFF7FEFF 		bl	puts
1241:.\console.c   **** 			printf(STR_PROMPT2);
 5300              		.loc 1 1241 0
 5301 0cae 40F20000 		movw	r0, #:lower16:.LC133
 5302 0cb2 C0F20000 		movt	r0, #:upper16:.LC133
 5303 0cb6 FFF7FEFF 		bl	puts
1242:.\console.c   **** 			printf(STR_PROMPT3);
 5304              		.loc 1 1242 0
 5305 0cba 40F20000 		movw	r0, #:lower16:.LC134
 5306 0cbe C0F20000 		movt	r0, #:upper16:.LC134
 5307 0cc2 FFF7FEFF 		bl	puts
1243:.\console.c   **** 			printf(STR_PROMPT4);			
 5308              		.loc 1 1243 0
 5309 0cc6 40F20000 		movw	r0, #:lower16:.LC135
 5310 0cca C0F20000 		movt	r0, #:upper16:.LC135
 5311 0cce FFF7FEFF 		bl	puts
1244:.\console.c   **** 		}
1245:.\console.c   **** 		else
1246:.\console.c   **** 		{
1247:.\console.c   **** 			printf(STR_ERROR1);
1248:.\console.c   **** 		}
1249:.\console.c   **** 	goto exitpars;
 5312              		.loc 1 1249 0
 5313 0cd2 06F0EDB8 		b	.L131
 5314              	.L211:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 161


1247:.\console.c   **** 			printf(STR_ERROR1);
 5315              		.loc 1 1247 0
 5316 0cd6 40F20000 		movw	r0, #:lower16:.LC82
 5317 0cda C0F20000 		movt	r0, #:upper16:.LC82
 5318 0cde FFF7FEFF 		bl	printf
 5319              		.loc 1 1249 0
 5320 0ce2 06F0E5B8 		b	.L131
 5321              	.L210:
1250:.\console.c   **** 	}
1251:.\console.c   **** 	/* END CMD PROMPT */ 
1252:.\console.c   **** 
1253:.\console.c   **** 		
1254:.\console.c   **** 	
1255:.\console.c   **** 		/* CMD 'HELP' (alias ?) */
1256:.\console.c   **** 		if ((strcmp(actual_cmd.action, "?") == 0)
 5322              		.loc 1 1256 0
 5323 0ce6 40F20000 		movw	r0, #:lower16:actual_cmd
 5324 0cea C0F20000 		movt	r0, #:upper16:actual_cmd
 5325 0cee 40F20001 		movw	r1, #:lower16:.LC136
 5326 0cf2 C0F20001 		movt	r1, #:upper16:.LC136
 5327 0cf6 FFF7FEFF 		bl	strcmp
 5328 0cfa 0346     		mov	r3, r0
 5329 0cfc 002B     		cmp	r3, #0
 5330 0cfe 1AD0     		beq	.L213
1257:.\console.c   **** 			||(strcmp(actual_cmd.action, "h") == 0)
 5331              		.loc 1 1257 0
 5332 0d00 40F20000 		movw	r0, #:lower16:actual_cmd
 5333 0d04 C0F20000 		movt	r0, #:upper16:actual_cmd
 5334 0d08 40F20001 		movw	r1, #:lower16:.LC137
 5335 0d0c C0F20001 		movt	r1, #:upper16:.LC137
 5336 0d10 FFF7FEFF 		bl	strcmp
 5337 0d14 0346     		mov	r3, r0
 5338 0d16 002B     		cmp	r3, #0
 5339 0d18 0DD0     		beq	.L213
1258:.\console.c   **** 			||(strcmp(actual_cmd.action, "help") == 0))
 5340              		.loc 1 1258 0
 5341 0d1a 40F20000 		movw	r0, #:lower16:actual_cmd
 5342 0d1e C0F20000 		movt	r0, #:upper16:actual_cmd
 5343 0d22 40F20001 		movw	r1, #:lower16:.LC138
 5344 0d26 C0F20001 		movt	r1, #:upper16:.LC138
 5345 0d2a FFF7FEFF 		bl	strcmp
 5346 0d2e 0346     		mov	r3, r0
 5347 0d30 002B     		cmp	r3, #0
 5348 0d32 40F07F84 		bne	.L214
 5349              	.L213:
1259:.\console.c   **** 		{
1260:.\console.c   **** 			if (strlen(actual_cmd.parameter) == 0)
 5350              		.loc 1 1260 0
 5351 0d36 6F4B     		ldr	r3, .L710
 5352 0d38 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5353 0d3a 002B     		cmp	r3, #0
 5354 0d3c 40F0DC80 		bne	.L215
1261:.\console.c   **** 			{
1262:.\console.c   **** 				// HELP "standard" command list
1263:.\console.c   **** 				printf(STR_HELP_PRES1);
 5355              		.loc 1 1263 0
 5356 0d40 40F20000 		movw	r0, #:lower16:.LC139
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 162


 5357 0d44 C0F20000 		movt	r0, #:upper16:.LC139
 5358 0d48 FFF7FEFF 		bl	puts
1264:.\console.c   **** 				printf(STR_HELP_PRES4);
 5359              		.loc 1 1264 0
 5360 0d4c 40F20000 		movw	r0, #:lower16:.LC140
 5361 0d50 C0F20000 		movt	r0, #:upper16:.LC140
 5362 0d54 FFF7FEFF 		bl	puts
1265:.\console.c   **** 				printf(STR_HELP_SHOW1);
 5363              		.loc 1 1265 0
 5364 0d58 40F20000 		movw	r0, #:lower16:.LC141
 5365 0d5c C0F20000 		movt	r0, #:upper16:.LC141
 5366 0d60 FFF7FEFF 		bl	puts
1266:.\console.c   **** 				printf(STR_HELP_SETT1);
 5367              		.loc 1 1266 0
 5368 0d64 40F20000 		movw	r0, #:lower16:.LC142
 5369 0d68 C0F20000 		movt	r0, #:upper16:.LC142
 5370 0d6c FFF7FEFF 		bl	puts
1267:.\console.c   **** 				printf(STR_HELP_PROM1);
 5371              		.loc 1 1267 0
 5372 0d70 40F20000 		movw	r0, #:lower16:.LC143
 5373 0d74 C0F20000 		movt	r0, #:upper16:.LC143
 5374 0d78 FFF7FEFF 		bl	puts
1268:.\console.c   **** 				printf(STR_HELP_BOOT1);				
 5375              		.loc 1 1268 0
 5376 0d7c 40F20000 		movw	r0, #:lower16:.LC144
 5377 0d80 C0F20000 		movt	r0, #:upper16:.LC144
 5378 0d84 FFF7FEFF 		bl	puts
1269:.\console.c   **** 				printf(STR_HELP_VERS1);
 5379              		.loc 1 1269 0
 5380 0d88 40F20000 		movw	r0, #:lower16:.LC145
 5381 0d8c C0F20000 		movt	r0, #:upper16:.LC145
 5382 0d90 FFF7FEFF 		bl	puts
1270:.\console.c   **** 				printf(STR_HELP_HELP0);				
 5383              		.loc 1 1270 0
 5384 0d94 40F20000 		movw	r0, #:lower16:.LC146
 5385 0d98 C0F20000 		movt	r0, #:upper16:.LC146
 5386 0d9c FFF7FEFF 		bl	puts
1271:.\console.c   **** 				printf(STR_HELP_HELP1);						
 5387              		.loc 1 1271 0
 5388 0da0 40F20000 		movw	r0, #:lower16:.LC147
 5389 0da4 C0F20000 		movt	r0, #:upper16:.LC147
 5390 0da8 FFF7FEFF 		bl	puts
1272:.\console.c   **** 				printf(STR_HELP_PRES2);
 5391              		.loc 1 1272 0
 5392 0dac 40F20000 		movw	r0, #:lower16:.LC148
 5393 0db0 C0F20000 		movt	r0, #:upper16:.LC148
 5394 0db4 FFF7FEFF 		bl	puts
1273:.\console.c   **** 				printf("\r\n");		
 5395              		.loc 1 1273 0
 5396 0db8 40F20000 		movw	r0, #:lower16:.LC42
 5397 0dbc C0F20000 		movt	r0, #:upper16:.LC42
 5398 0dc0 FFF7FEFF 		bl	puts
1274:.\console.c   **** 				
1275:.\console.c   **** 				/* Motor Control Command List */
1276:.\console.c   **** 				printf(STR_HELP_PRES5);
 5399              		.loc 1 1276 0
 5400 0dc4 40F20000 		movw	r0, #:lower16:.LC149
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 163


 5401 0dc8 C0F20000 		movt	r0, #:upper16:.LC149
 5402 0dcc FFF7FEFF 		bl	puts
1277:.\console.c   **** 				printf(STR_HELP_PRES6);
 5403              		.loc 1 1277 0
 5404 0dd0 40F20000 		movw	r0, #:lower16:.LC150
 5405 0dd4 C0F20000 		movt	r0, #:upper16:.LC150
 5406 0dd8 FFF7FEFF 		bl	puts
1278:.\console.c   **** 				printf(STR_HELP_ENERG);
 5407              		.loc 1 1278 0
 5408 0ddc 40F20000 		movw	r0, #:lower16:.LC151
 5409 0de0 C0F20000 		movt	r0, #:upper16:.LC151
 5410 0de4 FFF7FEFF 		bl	puts
1279:.\console.c   **** 				printf(STR_HELP_DEENE);				
 5411              		.loc 1 1279 0
 5412 0de8 40F20000 		movw	r0, #:lower16:.LC152
 5413 0dec C0F20000 		movt	r0, #:upper16:.LC152
 5414 0df0 FFF7FEFF 		bl	puts
1280:.\console.c   **** 				printf("\r\n");	
 5415              		.loc 1 1280 0
 5416 0df4 40F20000 		movw	r0, #:lower16:.LC42
 5417 0df8 C0F20000 		movt	r0, #:upper16:.LC42
 5418 0dfc FFF7FEFF 		bl	puts
1281:.\console.c   **** 
1282:.\console.c   **** 				/* Mover Command List		 */
1283:.\console.c   **** 				printf(STR_HELP_MOV01);
 5419              		.loc 1 1283 0
 5420 0e00 40F20000 		movw	r0, #:lower16:.LC153
 5421 0e04 C0F20000 		movt	r0, #:upper16:.LC153
 5422 0e08 FFF7FEFF 		bl	puts
1284:.\console.c   **** 				printf(STR_HELP_MOV02);
 5423              		.loc 1 1284 0
 5424 0e0c 40F20000 		movw	r0, #:lower16:.LC150
 5425 0e10 C0F20000 		movt	r0, #:upper16:.LC150
 5426 0e14 FFF7FEFF 		bl	puts
1285:.\console.c   **** 				printf(STR_HELP_MOV03);
 5427              		.loc 1 1285 0
 5428 0e18 40F20000 		movw	r0, #:lower16:.LC154
 5429 0e1c C0F20000 		movt	r0, #:upper16:.LC154
 5430 0e20 FFF7FEFF 		bl	puts
1286:.\console.c   **** 				printf(STR_HELP_MOV04);
 5431              		.loc 1 1286 0
 5432 0e24 40F20000 		movw	r0, #:lower16:.LC155
 5433 0e28 C0F20000 		movt	r0, #:upper16:.LC155
 5434 0e2c FFF7FEFF 		bl	puts
1287:.\console.c   **** 				printf(STR_HELP_MOV05);				
 5435              		.loc 1 1287 0
 5436 0e30 40F20000 		movw	r0, #:lower16:.LC156
 5437 0e34 C0F20000 		movt	r0, #:upper16:.LC156
 5438 0e38 FFF7FEFF 		bl	puts
1288:.\console.c   **** 				printf("\r\n");					
 5439              		.loc 1 1288 0
 5440 0e3c 40F20000 		movw	r0, #:lower16:.LC42
 5441 0e40 C0F20000 		movt	r0, #:upper16:.LC42
 5442 0e44 FFF7FEFF 		bl	puts
1289:.\console.c   **** 				
1290:.\console.c   **** 				/* System Test Command List  */
1291:.\console.c   **** 				printf(STR_HELP_PRES7);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 164


 5443              		.loc 1 1291 0
 5444 0e48 40F20000 		movw	r0, #:lower16:.LC157
 5445 0e4c C0F20000 		movt	r0, #:upper16:.LC157
 5446 0e50 FFF7FEFF 		bl	puts
1292:.\console.c   **** 				printf(STR_HELP_PRES8);	
 5447              		.loc 1 1292 0
 5448 0e54 40F20000 		movw	r0, #:lower16:.LC150
 5449 0e58 C0F20000 		movt	r0, #:upper16:.LC150
 5450 0e5c FFF7FEFF 		bl	puts
1293:.\console.c   **** 				printf(STR_HELP_TBUZZ);	
 5451              		.loc 1 1293 0
 5452 0e60 40F20000 		movw	r0, #:lower16:.LC158
 5453 0e64 C0F20000 		movt	r0, #:upper16:.LC158
 5454 0e68 FFF7FEFF 		bl	puts
1294:.\console.c   **** 				printf(STR_HELP_TLORA);
 5455              		.loc 1 1294 0
 5456 0e6c 40F20000 		movw	r0, #:lower16:.LC159
 5457 0e70 C0F20000 		movt	r0, #:upper16:.LC159
 5458 0e74 FFF7FEFF 		bl	puts
1295:.\console.c   **** #if ITG_3701_ENABLED				
1296:.\console.c   **** 				printf(STR_HELP_TINV);
1297:.\console.c   **** #endif
1298:.\console.c   **** 				printf(STR_HELP_STSM);
 5459              		.loc 1 1298 0
 5460 0e78 40F20000 		movw	r0, #:lower16:.LC160
 5461 0e7c C0F20000 		movt	r0, #:upper16:.LC160
 5462 0e80 FFF7FEFF 		bl	puts
1299:.\console.c   **** 				printf(STR_HELP_DMAP);
 5463              		.loc 1 1299 0
 5464 0e84 40F20000 		movw	r0, #:lower16:.LC161
 5465 0e88 C0F20000 		movt	r0, #:upper16:.LC161
 5466 0e8c FFF7FEFF 		bl	puts
1300:.\console.c   **** 				printf(STR_HELP_DMAT);
 5467              		.loc 1 1300 0
 5468 0e90 40F20000 		movw	r0, #:lower16:.LC162
 5469 0e94 C0F20000 		movt	r0, #:upper16:.LC162
 5470 0e98 FFF7FEFF 		bl	puts
1301:.\console.c   **** 				printf(STR_HELP_DMPT);				
 5471              		.loc 1 1301 0
 5472 0e9c 40F20000 		movw	r0, #:lower16:.LC163
 5473 0ea0 C0F20000 		movt	r0, #:upper16:.LC163
 5474 0ea4 FFF7FEFF 		bl	puts
1302:.\console.c   **** 				printf("\r\n");	
 5475              		.loc 1 1302 0
 5476 0ea8 40F20000 		movw	r0, #:lower16:.LC42
 5477 0eac C0F20000 		movt	r0, #:upper16:.LC42
 5478 0eb0 FFF7FEFF 		bl	puts
1303:.\console.c   **** 				
1304:.\console.c   **** 				/* Mean Values & Statistics Measurments Command List */
1305:.\console.c   **** 				printf(STR_HELP_PRES9);
 5479              		.loc 1 1305 0
 5480 0eb4 40F20000 		movw	r0, #:lower16:.LC164
 5481 0eb8 C0F20000 		movt	r0, #:upper16:.LC164
 5482 0ebc FFF7FEFF 		bl	puts
1306:.\console.c   **** 				printf(STR_HELP_PRESA);
 5483              		.loc 1 1306 0
 5484 0ec0 40F20000 		movw	r0, #:lower16:.LC150
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 165


 5485 0ec4 C0F20000 		movt	r0, #:upper16:.LC150
 5486 0ec8 FFF7FEFF 		bl	puts
1307:.\console.c   **** 				printf(STR_HELP_AGSTA);
 5487              		.loc 1 1307 0
 5488 0ecc 40F20000 		movw	r0, #:lower16:.LC165
 5489 0ed0 C0F20000 		movt	r0, #:upper16:.LC165
 5490 0ed4 FFF7FEFF 		bl	puts
1308:.\console.c   **** 				printf(STR_HELP_AGSTO);				
 5491              		.loc 1 1308 0
 5492 0ed8 40F20000 		movw	r0, #:lower16:.LC166
 5493 0edc C0F20000 		movt	r0, #:upper16:.LC166
 5494 0ee0 FFF7FEFF 		bl	puts
1309:.\console.c   **** 				printf("\r\n");				
 5495              		.loc 1 1309 0
 5496 0ee4 40F20000 		movw	r0, #:lower16:.LC42
 5497 0ee8 C0F20000 		movt	r0, #:upper16:.LC42
 5498 0eec FFF7FEFF 		bl	puts
1310:.\console.c   **** 				
1311:.\console.c   **** //				/* DAS Command List */
1312:.\console.c   **** //				printf(STR_HELP_DAS01);
1313:.\console.c   **** //				printf(STR_HELP_DAS02);
1314:.\console.c   **** //				printf(STR_HELP_DAS03);				
1315:.\console.c   **** //				printf(STR_HELP_DAS04);
1316:.\console.c   **** //				printf(STR_HELP_DAS05);
1317:.\console.c   **** //				printf(STR_HELP_DAS06);
1318:.\console.c   **** //				printf(STR_HELP_DAS07);
1319:.\console.c   **** //				printf(STR_HELP_DAS08);
1320:.\console.c   **** //				printf(STR_HELP_DAS09);
1321:.\console.c   **** //				printf(STR_HELP_DAS0A);				
1322:.\console.c   **** 			}
1323:.\console.c   **** 			else
1324:.\console.c   **** 			{
1325:.\console.c   **** 				// SET command details
1326:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "set") == 0)
1327:.\console.c   **** 				{
1328:.\console.c   **** 					printf(STR_HELP_SETT1);
1329:.\console.c   **** 					printf(STR_HELP_SYNTX);			
1330:.\console.c   **** 					printf(STR_HELP_SETT2);
1331:.\console.c   **** 					printf(STR_HELP_SETT2T);					
1332:.\console.c   **** 					printf(STR_HELP_SETT3);
1333:.\console.c   **** 					printf(STR_HELP_SETT3T);					
1334:.\console.c   **** 					printf(STR_HELP_SETT4);
1335:.\console.c   **** 					printf(STR_HELP_SETT4T);					
1336:.\console.c   **** 					printf(STR_HELP_SETT5);
1337:.\console.c   **** 					printf(STR_HELP_SETT5T);					
1338:.\console.c   **** 					printf(STR_HELP_SETT6);
1339:.\console.c   **** 					printf(STR_HELP_SETT6T);
1340:.\console.c   **** 					printf(STR_HELP_SETT6U);
1341:.\console.c   **** 					printf(STR_HELP_SETT6V);					
1342:.\console.c   **** 					printf(STR_HELP_SET61);
1343:.\console.c   **** 					printf(STR_HELP_SET62);
1344:.\console.c   **** 					printf(STR_HELP_SET63);
1345:.\console.c   **** 					printf(STR_HELP_SET64);
1346:.\console.c   **** 					printf(STR_HELP_SET65);
1347:.\console.c   **** 					printf(STR_HELP_SET66);	
1348:.\console.c   **** 					printf(STR_HELP_SET67);
1349:.\console.c   **** 					printf(STR_HELP_SET68);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 166


1350:.\console.c   **** 					printf(STR_HELP_SET69);
1351:.\console.c   **** 					printf(STR_HELP_SET70);					
1352:.\console.c   **** 					printf(STR_HELP_SET71);
1353:.\console.c   **** 					printf(STR_HELP_SET72);
1354:.\console.c   **** 					printf(STR_HELP_SET73);					
1355:.\console.c   **** 					
1356:.\console.c   **** 					printf(STR_HELP_SET80);
1357:.\console.c   **** 					printf(STR_HELP_SET81);	
1358:.\console.c   **** 					printf(STR_HELP_SET82);
1359:.\console.c   **** 					printf(STR_HELP_SET83);
1360:.\console.c   **** 					printf(STR_HELP_SET84);
1361:.\console.c   **** 					printf(STR_HELP_SET85);
1362:.\console.c   **** 					printf(STR_HELP_SET86);
1363:.\console.c   **** 					printf(STR_HELP_SET87);					
1364:.\console.c   **** 					printf(STR_HELP_SET88);
1365:.\console.c   **** 					printf(STR_HELP_SET89);		
1366:.\console.c   **** 					
1367:.\console.c   **** 					printf(STR_HELP_SETTC);					
1368:.\console.c   **** 					printf(STR_HELP_SETC1);	
1369:.\console.c   **** 					printf(STR_HELP_SETC2);	
1370:.\console.c   **** 					printf(STR_HELP_SETC3);	
1371:.\console.c   **** 					printf(STR_HELP_SETC4);	
1372:.\console.c   **** 					printf(STR_HELP_SETC5);	
1373:.\console.c   **** 					
1374:.\console.c   **** 					printf(STR_HELP_SETTF);
1375:.\console.c   **** 					printf(STR_HELP_SETTG);
1376:.\console.c   **** 					printf(STR_HELP_SETTH);
1377:.\console.c   **** 					printf(STR_HELP_SETTI);
1378:.\console.c   **** 					printf(STR_HELP_SETI1);					
1379:.\console.c   **** 					printf(STR_HELP_SETTJ);
1380:.\console.c   **** 					printf(STR_HELP_SETTK);
1381:.\console.c   **** 					
1382:.\console.c   **** 					printf("\r\n");		
1383:.\console.c   **** 					printf(STR_HELP_polar); 
1384:.\console.c   **** 					printf(STR_HELP_kpval);
1385:.\console.c   **** 					printf(STR_HELP_kdval);
1386:.\console.c   **** 					printf(STR_HELP_kival);					
1387:.\console.c   **** 					printf(STR_HELP_ksivl);
1388:.\console.c   **** 					printf(STR_HELP_dbval);					
1389:.\console.c   **** 					printf(STR_HELP_kofvl);	
1390:.\console.c   **** 					printf(STR_HELP_again);
1391:.\console.c   **** 					printf(STR_HELP_astyp);					
1392:.\console.c   **** 					printf(STR_HELP_color);
1393:.\console.c   **** 					printf(STR_HELP_colo1);
1394:.\console.c   **** 					printf(STR_HELP_axis);					
1395:.\console.c   **** 					printf(STR_HELP_avalu);					
1396:.\console.c   **** 					printf(STR_HELP_onoff);
1397:.\console.c   **** 					printf(STR_HELP_mode);
1398:.\console.c   **** 					printf(STR_HELP_qn);
1399:.\console.c   **** 					printf(STR_HELP_qm);
1400:.\console.c   **** 					printf(STR_HELP_dir);					
1401:.\console.c   **** 					printf(STR_HELP_dir1);
1402:.\console.c   **** 					printf(STR_HELP_dir2);					
1403:.\console.c   **** 					
1404:.\console.c   **** 					goto exitpars;
1405:.\console.c   **** 				}
1406:.\console.c   **** 	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 167


1407:.\console.c   **** 	
1408:.\console.c   **** 				// HELP SHOW command details
1409:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "show") == 0)
1410:.\console.c   **** 				{
1411:.\console.c   **** 					printf(STR_HELP_SHOW1);
1412:.\console.c   **** 					printf(STR_HELP_SYNTX);
1413:.\console.c   **** 					printf(STR_HELP_SHOW2);
1414:.\console.c   **** 					printf(STR_HELP_SHO21);					
1415:.\console.c   **** 					printf(STR_HELP_SHOW3);					
1416:.\console.c   **** 					printf(STR_HELP_SHOW4);
1417:.\console.c   **** 					//printf(STR_HELP_SHOW5);						
1418:.\console.c   **** 					printf(STR_HELP_SHOW6);
1419:.\console.c   **** #if IMU_UM7_ENABLED
1420:.\console.c   **** 					printf(STR_HELP_SHW70);					
1421:.\console.c   **** 					printf(STR_HELP_SHW71);					
1422:.\console.c   **** 					printf(STR_HELP_SHW72);
1423:.\console.c   **** #endif					
1424:.\console.c   **** 					printf(STR_HELP_SHW73);
1425:.\console.c   **** 
1426:.\console.c   **** 					printf(STR_HELP_SHOW8);
1427:.\console.c   **** 					printf(STR_HELP_SHOW9);
1428:.\console.c   **** 					printf(STR_HELP_SHW90);					
1429:.\console.c   **** 					printf(STR_HELP_SHW91);
1430:.\console.c   **** 					printf(STR_HELP_SHW92);
1431:.\console.c   **** 					printf(STR_HELP_SHW93);
1432:.\console.c   **** 					printf(STR_HELP_SHW94);
1433:.\console.c   **** 					printf(STR_HELP_SHW95);
1434:.\console.c   **** 					printf(STR_HELP_SHW96);					
1435:.\console.c   **** 					printf(STR_HELP_SHOWA);
1436:.\console.c   **** 					printf(STR_HELP_SHWA1);
1437:.\console.c   **** 					printf(STR_HELP_SHWA2);	
1438:.\console.c   **** 					printf(STR_HELP_SHWA3);
1439:.\console.c   **** 					printf(STR_HELP_SHWA4);	
1440:.\console.c   **** 					printf(STR_HELP_SHWA5);	
1441:.\console.c   **** 					printf(STR_HELP_SHWA6);						
1442:.\console.c   **** 					printf(STR_HELP_SHWA7);						
1443:.\console.c   **** 					printf(STR_HELP_SHOWB);
1444:.\console.c   **** 					printf(STR_HELP_SHOWC);
1445:.\console.c   **** 					printf(STR_HELP_SHOWD);	
1446:.\console.c   **** 					printf(STR_HELP_SHOWE);
1447:.\console.c   **** 					printf(STR_HELP_SHOWF);	
1448:.\console.c   **** 					printf(STR_HELP_SHOF1);
1449:.\console.c   **** 					printf(STR_HELP_SHOF2);
1450:.\console.c   **** 					printf(STR_HELP_SHOF3);					
1451:.\console.c   **** 					printf(STR_HELP_SHOWG);
1452:.\console.c   **** 					printf(STR_HELP_SHOWH);					
1453:.\console.c   **** 					printf(STR_HELP_SHOWZ);
1454:.\console.c   **** 					goto exitpars;
1455:.\console.c   **** 				}
1456:.\console.c   **** 	
1457:.\console.c   **** 				
1458:.\console.c   **** 				// HELP GOTOQ command details
1459:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "q") == 0)
1460:.\console.c   **** 				{					
1461:.\console.c   **** 					//Qtable
1462:.\console.c   **** 					printf(STR_QTAB0);
1463:.\console.c   **** 					printf(STR_QTAB1);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 168


1464:.\console.c   **** 					printf(STR_Q000);
1465:.\console.c   **** 					printf(STR_Q011);					
1466:.\console.c   **** 					printf(STR_Q013);					
1467:.\console.c   **** 					printf(STR_Q014);			
1468:.\console.c   **** 					printf(STR_Q015);					
1469:.\console.c   **** 					printf(STR_Q016);					
1470:.\console.c   **** 					printf(STR_Q017);
1471:.\console.c   **** 					printf(STR_Q021);
1472:.\console.c   **** 					printf(STR_Q031);
1473:.\console.c   **** 					printf(STR_Q033);
1474:.\console.c   **** 					printf(STR_Q034);
1475:.\console.c   **** 					printf(STR_Q040);					
1476:.\console.c   **** 					printf(STR_Q041);					
1477:.\console.c   **** 					printf(STR_Q042);
1478:.\console.c   **** 					printf(STR_Q043);
1479:.\console.c   **** 					printf(STR_Q044);					
1480:.\console.c   **** 					printf(STR_Q051);
1481:.\console.c   **** 					printf(STR_Q052);
1482:.\console.c   **** 					printf(STR_Q053);					
1483:.\console.c   **** 					
1484:.\console.c   **** 					goto exitpars;
1485:.\console.c   **** 				}			
1486:.\console.c   **** 				
1487:.\console.c   **** 				
1488:.\console.c   **** 				// HELP TESTDAC command details
1489:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "testdac") == 0)
1490:.\console.c   **** 				{
1491:.\console.c   **** 					printf(STR_HELP_TDAC1);
1492:.\console.c   **** 					printf(STR_HELP_SYNTX);
1493:.\console.c   **** 					printf(STR_HELP_TDAC2);
1494:.\console.c   **** 					goto exitpars;
1495:.\console.c   **** 				}			
1496:.\console.c   **** 
1497:.\console.c   **** 
1498:.\console.c   **** 				// HELP PROMPT command details
1499:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "prompt") == 0)
1500:.\console.c   **** 				{
1501:.\console.c   **** 					printf(STR_HELP_PROM1);
1502:.\console.c   **** 					printf(STR_HELP_SYNTX);
1503:.\console.c   **** 					printf(STR_HELP_PROM2);
1504:.\console.c   **** 					goto exitpars;
1505:.\console.c   **** 				}			
1506:.\console.c   **** 				
1507:.\console.c   **** 				
1508:.\console.c   **** 				// HELP VERSION command details
1509:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "version") == 0)
1510:.\console.c   **** 				||(strcmp(actual_cmd.parameter, "v") == 0))
1511:.\console.c   **** 				{
1512:.\console.c   **** 					printf(STR_HELP_VERS1);
1513:.\console.c   **** 					printf(STR_HELP_SYNTX);
1514:.\console.c   **** 					printf(STR_HELP_VERS2);
1515:.\console.c   **** 					printf(STR_HELP_VERS3);				
1516:.\console.c   **** 					goto exitpars;
1517:.\console.c   **** 				}
1518:.\console.c   **** 				printf(STR_ERROR3);	/* Bad Parameter(s) */
1519:.\console.c   **** 				goto exitpars;
1520:.\console.c   **** 			}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 169


1521:.\console.c   **** 		goto exitpars;		
 5499              		.loc 1 1521 0
 5500 0ef0 05F0DEBF 		b	.L131
 5501              	.L711:
 5502              		.align	2
 5503              	.L710:
 5504 0ef4 0F000000 		.word	actual_cmd+15
 5505              	.L215:
1326:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "set") == 0)
 5506              		.loc 1 1326 0
 5507 0ef8 DB48     		ldr	r0, .L712
 5508 0efa 40F20001 		movw	r1, #:lower16:.LC167
 5509 0efe C0F20001 		movt	r1, #:upper16:.LC167
 5510 0f02 FFF7FEFF 		bl	strcmp
 5511 0f06 0346     		mov	r3, r0
 5512 0f08 002B     		cmp	r3, #0
 5513 0f0a 40F0AF81 		bne	.L216
1328:.\console.c   **** 					printf(STR_HELP_SETT1);
 5514              		.loc 1 1328 0
 5515 0f0e 40F20000 		movw	r0, #:lower16:.LC142
 5516 0f12 C0F20000 		movt	r0, #:upper16:.LC142
 5517 0f16 FFF7FEFF 		bl	puts
1329:.\console.c   **** 					printf(STR_HELP_SYNTX);			
 5518              		.loc 1 1329 0
 5519 0f1a 40F20000 		movw	r0, #:lower16:.LC168
 5520 0f1e C0F20000 		movt	r0, #:upper16:.LC168
 5521 0f22 FFF7FEFF 		bl	puts
1330:.\console.c   **** 					printf(STR_HELP_SETT2);
 5522              		.loc 1 1330 0
 5523 0f26 40F20000 		movw	r0, #:lower16:.LC169
 5524 0f2a C0F20000 		movt	r0, #:upper16:.LC169
 5525 0f2e FFF7FEFF 		bl	puts
1331:.\console.c   **** 					printf(STR_HELP_SETT2T);					
 5526              		.loc 1 1331 0
 5527 0f32 40F20000 		movw	r0, #:lower16:.LC170
 5528 0f36 C0F20000 		movt	r0, #:upper16:.LC170
 5529 0f3a FFF7FEFF 		bl	puts
1332:.\console.c   **** 					printf(STR_HELP_SETT3);
 5530              		.loc 1 1332 0
 5531 0f3e 40F20000 		movw	r0, #:lower16:.LC171
 5532 0f42 C0F20000 		movt	r0, #:upper16:.LC171
 5533 0f46 FFF7FEFF 		bl	puts
1333:.\console.c   **** 					printf(STR_HELP_SETT3T);					
 5534              		.loc 1 1333 0
 5535 0f4a 40F20000 		movw	r0, #:lower16:.LC172
 5536 0f4e C0F20000 		movt	r0, #:upper16:.LC172
 5537 0f52 FFF7FEFF 		bl	puts
1334:.\console.c   **** 					printf(STR_HELP_SETT4);
 5538              		.loc 1 1334 0
 5539 0f56 40F20000 		movw	r0, #:lower16:.LC173
 5540 0f5a C0F20000 		movt	r0, #:upper16:.LC173
 5541 0f5e FFF7FEFF 		bl	puts
1335:.\console.c   **** 					printf(STR_HELP_SETT4T);					
 5542              		.loc 1 1335 0
 5543 0f62 40F20000 		movw	r0, #:lower16:.LC174
 5544 0f66 C0F20000 		movt	r0, #:upper16:.LC174
 5545 0f6a FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 170


1336:.\console.c   **** 					printf(STR_HELP_SETT5);
 5546              		.loc 1 1336 0
 5547 0f6e 40F20000 		movw	r0, #:lower16:.LC175
 5548 0f72 C0F20000 		movt	r0, #:upper16:.LC175
 5549 0f76 FFF7FEFF 		bl	puts
1337:.\console.c   **** 					printf(STR_HELP_SETT5T);					
 5550              		.loc 1 1337 0
 5551 0f7a 40F20000 		movw	r0, #:lower16:.LC176
 5552 0f7e C0F20000 		movt	r0, #:upper16:.LC176
 5553 0f82 FFF7FEFF 		bl	puts
1338:.\console.c   **** 					printf(STR_HELP_SETT6);
 5554              		.loc 1 1338 0
 5555 0f86 40F20000 		movw	r0, #:lower16:.LC177
 5556 0f8a C0F20000 		movt	r0, #:upper16:.LC177
 5557 0f8e FFF7FEFF 		bl	puts
1339:.\console.c   **** 					printf(STR_HELP_SETT6T);
 5558              		.loc 1 1339 0
 5559 0f92 40F20000 		movw	r0, #:lower16:.LC178
 5560 0f96 C0F20000 		movt	r0, #:upper16:.LC178
 5561 0f9a FFF7FEFF 		bl	puts
1340:.\console.c   **** 					printf(STR_HELP_SETT6U);
 5562              		.loc 1 1340 0
 5563 0f9e 40F20000 		movw	r0, #:lower16:.LC179
 5564 0fa2 C0F20000 		movt	r0, #:upper16:.LC179
 5565 0fa6 FFF7FEFF 		bl	puts
1341:.\console.c   **** 					printf(STR_HELP_SETT6V);					
 5566              		.loc 1 1341 0
 5567 0faa 40F20000 		movw	r0, #:lower16:.LC180
 5568 0fae C0F20000 		movt	r0, #:upper16:.LC180
 5569 0fb2 FFF7FEFF 		bl	puts
1342:.\console.c   **** 					printf(STR_HELP_SET61);
 5570              		.loc 1 1342 0
 5571 0fb6 40F20000 		movw	r0, #:lower16:.LC181
 5572 0fba C0F20000 		movt	r0, #:upper16:.LC181
 5573 0fbe FFF7FEFF 		bl	puts
1343:.\console.c   **** 					printf(STR_HELP_SET62);
 5574              		.loc 1 1343 0
 5575 0fc2 40F20000 		movw	r0, #:lower16:.LC182
 5576 0fc6 C0F20000 		movt	r0, #:upper16:.LC182
 5577 0fca FFF7FEFF 		bl	puts
1344:.\console.c   **** 					printf(STR_HELP_SET63);
 5578              		.loc 1 1344 0
 5579 0fce 40F20000 		movw	r0, #:lower16:.LC183
 5580 0fd2 C0F20000 		movt	r0, #:upper16:.LC183
 5581 0fd6 FFF7FEFF 		bl	puts
1345:.\console.c   **** 					printf(STR_HELP_SET64);
 5582              		.loc 1 1345 0
 5583 0fda 40F20000 		movw	r0, #:lower16:.LC184
 5584 0fde C0F20000 		movt	r0, #:upper16:.LC184
 5585 0fe2 FFF7FEFF 		bl	puts
1346:.\console.c   **** 					printf(STR_HELP_SET65);
 5586              		.loc 1 1346 0
 5587 0fe6 40F20000 		movw	r0, #:lower16:.LC185
 5588 0fea C0F20000 		movt	r0, #:upper16:.LC185
 5589 0fee FFF7FEFF 		bl	puts
1347:.\console.c   **** 					printf(STR_HELP_SET66);	
 5590              		.loc 1 1347 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 171


 5591 0ff2 40F20000 		movw	r0, #:lower16:.LC186
 5592 0ff6 C0F20000 		movt	r0, #:upper16:.LC186
 5593 0ffa FFF7FEFF 		bl	puts
1348:.\console.c   **** 					printf(STR_HELP_SET67);
 5594              		.loc 1 1348 0
 5595 0ffe 40F20000 		movw	r0, #:lower16:.LC187
 5596 1002 C0F20000 		movt	r0, #:upper16:.LC187
 5597 1006 FFF7FEFF 		bl	puts
1349:.\console.c   **** 					printf(STR_HELP_SET68);
 5598              		.loc 1 1349 0
 5599 100a 40F20000 		movw	r0, #:lower16:.LC188
 5600 100e C0F20000 		movt	r0, #:upper16:.LC188
 5601 1012 FFF7FEFF 		bl	puts
1350:.\console.c   **** 					printf(STR_HELP_SET69);
 5602              		.loc 1 1350 0
 5603 1016 40F20000 		movw	r0, #:lower16:.LC189
 5604 101a C0F20000 		movt	r0, #:upper16:.LC189
 5605 101e FFF7FEFF 		bl	puts
1351:.\console.c   **** 					printf(STR_HELP_SET70);					
 5606              		.loc 1 1351 0
 5607 1022 40F20000 		movw	r0, #:lower16:.LC190
 5608 1026 C0F20000 		movt	r0, #:upper16:.LC190
 5609 102a FFF7FEFF 		bl	puts
1352:.\console.c   **** 					printf(STR_HELP_SET71);
 5610              		.loc 1 1352 0
 5611 102e 40F20000 		movw	r0, #:lower16:.LC191
 5612 1032 C0F20000 		movt	r0, #:upper16:.LC191
 5613 1036 FFF7FEFF 		bl	puts
1353:.\console.c   **** 					printf(STR_HELP_SET72);
 5614              		.loc 1 1353 0
 5615 103a 40F20000 		movw	r0, #:lower16:.LC192
 5616 103e C0F20000 		movt	r0, #:upper16:.LC192
 5617 1042 FFF7FEFF 		bl	puts
1354:.\console.c   **** 					printf(STR_HELP_SET73);					
 5618              		.loc 1 1354 0
 5619 1046 40F20000 		movw	r0, #:lower16:.LC193
 5620 104a C0F20000 		movt	r0, #:upper16:.LC193
 5621 104e FFF7FEFF 		bl	puts
1356:.\console.c   **** 					printf(STR_HELP_SET80);
 5622              		.loc 1 1356 0
 5623 1052 40F20000 		movw	r0, #:lower16:.LC194
 5624 1056 C0F20000 		movt	r0, #:upper16:.LC194
 5625 105a FFF7FEFF 		bl	puts
1357:.\console.c   **** 					printf(STR_HELP_SET81);	
 5626              		.loc 1 1357 0
 5627 105e 40F20000 		movw	r0, #:lower16:.LC195
 5628 1062 C0F20000 		movt	r0, #:upper16:.LC195
 5629 1066 FFF7FEFF 		bl	puts
1358:.\console.c   **** 					printf(STR_HELP_SET82);
 5630              		.loc 1 1358 0
 5631 106a 40F20000 		movw	r0, #:lower16:.LC196
 5632 106e C0F20000 		movt	r0, #:upper16:.LC196
 5633 1072 FFF7FEFF 		bl	puts
1359:.\console.c   **** 					printf(STR_HELP_SET83);
 5634              		.loc 1 1359 0
 5635 1076 40F20000 		movw	r0, #:lower16:.LC197
 5636 107a C0F20000 		movt	r0, #:upper16:.LC197
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 172


 5637 107e FFF7FEFF 		bl	puts
1360:.\console.c   **** 					printf(STR_HELP_SET84);
 5638              		.loc 1 1360 0
 5639 1082 40F20000 		movw	r0, #:lower16:.LC198
 5640 1086 C0F20000 		movt	r0, #:upper16:.LC198
 5641 108a FFF7FEFF 		bl	puts
1361:.\console.c   **** 					printf(STR_HELP_SET85);
 5642              		.loc 1 1361 0
 5643 108e 40F20000 		movw	r0, #:lower16:.LC199
 5644 1092 C0F20000 		movt	r0, #:upper16:.LC199
 5645 1096 FFF7FEFF 		bl	puts
1362:.\console.c   **** 					printf(STR_HELP_SET86);
 5646              		.loc 1 1362 0
 5647 109a 40F20000 		movw	r0, #:lower16:.LC200
 5648 109e C0F20000 		movt	r0, #:upper16:.LC200
 5649 10a2 FFF7FEFF 		bl	puts
1363:.\console.c   **** 					printf(STR_HELP_SET87);					
 5650              		.loc 1 1363 0
 5651 10a6 40F20000 		movw	r0, #:lower16:.LC201
 5652 10aa C0F20000 		movt	r0, #:upper16:.LC201
 5653 10ae FFF7FEFF 		bl	puts
1364:.\console.c   **** 					printf(STR_HELP_SET88);
 5654              		.loc 1 1364 0
 5655 10b2 40F20000 		movw	r0, #:lower16:.LC202
 5656 10b6 C0F20000 		movt	r0, #:upper16:.LC202
 5657 10ba FFF7FEFF 		bl	puts
1365:.\console.c   **** 					printf(STR_HELP_SET89);		
 5658              		.loc 1 1365 0
 5659 10be 40F20000 		movw	r0, #:lower16:.LC203
 5660 10c2 C0F20000 		movt	r0, #:upper16:.LC203
 5661 10c6 FFF7FEFF 		bl	puts
1367:.\console.c   **** 					printf(STR_HELP_SETTC);					
 5662              		.loc 1 1367 0
 5663 10ca 40F20000 		movw	r0, #:lower16:.LC204
 5664 10ce C0F20000 		movt	r0, #:upper16:.LC204
 5665 10d2 FFF7FEFF 		bl	puts
1368:.\console.c   **** 					printf(STR_HELP_SETC1);	
 5666              		.loc 1 1368 0
 5667 10d6 40F20000 		movw	r0, #:lower16:.LC205
 5668 10da C0F20000 		movt	r0, #:upper16:.LC205
 5669 10de FFF7FEFF 		bl	puts
1369:.\console.c   **** 					printf(STR_HELP_SETC2);	
 5670              		.loc 1 1369 0
 5671 10e2 40F20000 		movw	r0, #:lower16:.LC206
 5672 10e6 C0F20000 		movt	r0, #:upper16:.LC206
 5673 10ea FFF7FEFF 		bl	puts
1370:.\console.c   **** 					printf(STR_HELP_SETC3);	
 5674              		.loc 1 1370 0
 5675 10ee 40F20000 		movw	r0, #:lower16:.LC207
 5676 10f2 C0F20000 		movt	r0, #:upper16:.LC207
 5677 10f6 FFF7FEFF 		bl	puts
1371:.\console.c   **** 					printf(STR_HELP_SETC4);	
 5678              		.loc 1 1371 0
 5679 10fa 40F20000 		movw	r0, #:lower16:.LC208
 5680 10fe C0F20000 		movt	r0, #:upper16:.LC208
 5681 1102 FFF7FEFF 		bl	puts
1372:.\console.c   **** 					printf(STR_HELP_SETC5);	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 173


 5682              		.loc 1 1372 0
 5683 1106 40F20000 		movw	r0, #:lower16:.LC209
 5684 110a C0F20000 		movt	r0, #:upper16:.LC209
 5685 110e FFF7FEFF 		bl	puts
1374:.\console.c   **** 					printf(STR_HELP_SETTF);
 5686              		.loc 1 1374 0
 5687 1112 40F20000 		movw	r0, #:lower16:.LC210
 5688 1116 C0F20000 		movt	r0, #:upper16:.LC210
 5689 111a FFF7FEFF 		bl	puts
1375:.\console.c   **** 					printf(STR_HELP_SETTG);
 5690              		.loc 1 1375 0
 5691 111e 40F20000 		movw	r0, #:lower16:.LC211
 5692 1122 C0F20000 		movt	r0, #:upper16:.LC211
 5693 1126 FFF7FEFF 		bl	puts
1376:.\console.c   **** 					printf(STR_HELP_SETTH);
 5694              		.loc 1 1376 0
 5695 112a 40F20000 		movw	r0, #:lower16:.LC212
 5696 112e C0F20000 		movt	r0, #:upper16:.LC212
 5697 1132 FFF7FEFF 		bl	puts
1377:.\console.c   **** 					printf(STR_HELP_SETTI);
 5698              		.loc 1 1377 0
 5699 1136 40F20000 		movw	r0, #:lower16:.LC213
 5700 113a C0F20000 		movt	r0, #:upper16:.LC213
 5701 113e FFF7FEFF 		bl	puts
1378:.\console.c   **** 					printf(STR_HELP_SETI1);					
 5702              		.loc 1 1378 0
 5703 1142 40F20000 		movw	r0, #:lower16:.LC214
 5704 1146 C0F20000 		movt	r0, #:upper16:.LC214
 5705 114a FFF7FEFF 		bl	puts
1379:.\console.c   **** 					printf(STR_HELP_SETTJ);
 5706              		.loc 1 1379 0
 5707 114e 40F20000 		movw	r0, #:lower16:.LC215
 5708 1152 C0F20000 		movt	r0, #:upper16:.LC215
 5709 1156 FFF7FEFF 		bl	puts
1380:.\console.c   **** 					printf(STR_HELP_SETTK);
 5710              		.loc 1 1380 0
 5711 115a 40F20000 		movw	r0, #:lower16:.LC216
 5712 115e C0F20000 		movt	r0, #:upper16:.LC216
 5713 1162 FFF7FEFF 		bl	puts
1382:.\console.c   **** 					printf("\r\n");		
 5714              		.loc 1 1382 0
 5715 1166 40F20000 		movw	r0, #:lower16:.LC42
 5716 116a C0F20000 		movt	r0, #:upper16:.LC42
 5717 116e FFF7FEFF 		bl	puts
1383:.\console.c   **** 					printf(STR_HELP_polar); 
 5718              		.loc 1 1383 0
 5719 1172 40F20000 		movw	r0, #:lower16:.LC217
 5720 1176 C0F20000 		movt	r0, #:upper16:.LC217
 5721 117a FFF7FEFF 		bl	puts
1384:.\console.c   **** 					printf(STR_HELP_kpval);
 5722              		.loc 1 1384 0
 5723 117e 40F20000 		movw	r0, #:lower16:.LC218
 5724 1182 C0F20000 		movt	r0, #:upper16:.LC218
 5725 1186 FFF7FEFF 		bl	puts
1385:.\console.c   **** 					printf(STR_HELP_kdval);
 5726              		.loc 1 1385 0
 5727 118a 40F20000 		movw	r0, #:lower16:.LC219
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 174


 5728 118e C0F20000 		movt	r0, #:upper16:.LC219
 5729 1192 FFF7FEFF 		bl	puts
1386:.\console.c   **** 					printf(STR_HELP_kival);					
 5730              		.loc 1 1386 0
 5731 1196 40F20000 		movw	r0, #:lower16:.LC220
 5732 119a C0F20000 		movt	r0, #:upper16:.LC220
 5733 119e FFF7FEFF 		bl	puts
1387:.\console.c   **** 					printf(STR_HELP_ksivl);
 5734              		.loc 1 1387 0
 5735 11a2 40F20000 		movw	r0, #:lower16:.LC221
 5736 11a6 C0F20000 		movt	r0, #:upper16:.LC221
 5737 11aa FFF7FEFF 		bl	puts
1388:.\console.c   **** 					printf(STR_HELP_dbval);					
 5738              		.loc 1 1388 0
 5739 11ae 40F20000 		movw	r0, #:lower16:.LC222
 5740 11b2 C0F20000 		movt	r0, #:upper16:.LC222
 5741 11b6 FFF7FEFF 		bl	puts
1389:.\console.c   **** 					printf(STR_HELP_kofvl);	
 5742              		.loc 1 1389 0
 5743 11ba 40F20000 		movw	r0, #:lower16:.LC223
 5744 11be C0F20000 		movt	r0, #:upper16:.LC223
 5745 11c2 FFF7FEFF 		bl	puts
1390:.\console.c   **** 					printf(STR_HELP_again);
 5746              		.loc 1 1390 0
 5747 11c6 40F20000 		movw	r0, #:lower16:.LC224
 5748 11ca C0F20000 		movt	r0, #:upper16:.LC224
 5749 11ce FFF7FEFF 		bl	puts
1391:.\console.c   **** 					printf(STR_HELP_astyp);					
 5750              		.loc 1 1391 0
 5751 11d2 40F20000 		movw	r0, #:lower16:.LC225
 5752 11d6 C0F20000 		movt	r0, #:upper16:.LC225
 5753 11da FFF7FEFF 		bl	puts
1392:.\console.c   **** 					printf(STR_HELP_color);
 5754              		.loc 1 1392 0
 5755 11de 40F20000 		movw	r0, #:lower16:.LC226
 5756 11e2 C0F20000 		movt	r0, #:upper16:.LC226
 5757 11e6 FFF7FEFF 		bl	puts
1393:.\console.c   **** 					printf(STR_HELP_colo1);
 5758              		.loc 1 1393 0
 5759 11ea 40F20000 		movw	r0, #:lower16:.LC227
 5760 11ee C0F20000 		movt	r0, #:upper16:.LC227
 5761 11f2 FFF7FEFF 		bl	puts
1394:.\console.c   **** 					printf(STR_HELP_axis);					
 5762              		.loc 1 1394 0
 5763 11f6 40F20000 		movw	r0, #:lower16:.LC228
 5764 11fa C0F20000 		movt	r0, #:upper16:.LC228
 5765 11fe FFF7FEFF 		bl	puts
1395:.\console.c   **** 					printf(STR_HELP_avalu);					
 5766              		.loc 1 1395 0
 5767 1202 40F20000 		movw	r0, #:lower16:.LC229
 5768 1206 C0F20000 		movt	r0, #:upper16:.LC229
 5769 120a FFF7FEFF 		bl	puts
1396:.\console.c   **** 					printf(STR_HELP_onoff);
 5770              		.loc 1 1396 0
 5771 120e 40F20000 		movw	r0, #:lower16:.LC230
 5772 1212 C0F20000 		movt	r0, #:upper16:.LC230
 5773 1216 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 175


1397:.\console.c   **** 					printf(STR_HELP_mode);
 5774              		.loc 1 1397 0
 5775 121a 40F20000 		movw	r0, #:lower16:.LC231
 5776 121e C0F20000 		movt	r0, #:upper16:.LC231
 5777 1222 FFF7FEFF 		bl	puts
1398:.\console.c   **** 					printf(STR_HELP_qn);
 5778              		.loc 1 1398 0
 5779 1226 40F20000 		movw	r0, #:lower16:.LC232
 5780 122a C0F20000 		movt	r0, #:upper16:.LC232
 5781 122e FFF7FEFF 		bl	puts
1399:.\console.c   **** 					printf(STR_HELP_qm);
 5782              		.loc 1 1399 0
 5783 1232 40F20000 		movw	r0, #:lower16:.LC233
 5784 1236 C0F20000 		movt	r0, #:upper16:.LC233
 5785 123a FFF7FEFF 		bl	puts
1400:.\console.c   **** 					printf(STR_HELP_dir);					
 5786              		.loc 1 1400 0
 5787 123e 40F20000 		movw	r0, #:lower16:.LC234
 5788 1242 C0F20000 		movt	r0, #:upper16:.LC234
 5789 1246 FFF7FEFF 		bl	puts
1401:.\console.c   **** 					printf(STR_HELP_dir1);
 5790              		.loc 1 1401 0
 5791 124a 40F20000 		movw	r0, #:lower16:.LC235
 5792 124e C0F20000 		movt	r0, #:upper16:.LC235
 5793 1252 FFF7FEFF 		bl	puts
1402:.\console.c   **** 					printf(STR_HELP_dir2);					
 5794              		.loc 1 1402 0
 5795 1256 40F20000 		movw	r0, #:lower16:.LC236
 5796 125a C0F20000 		movt	r0, #:upper16:.LC236
 5797 125e FFF7FEFF 		bl	puts
1404:.\console.c   **** 					goto exitpars;
 5798              		.loc 1 1404 0
 5799 1262 05F025BE 		b	.L131
 5800              	.L713:
 5801 1266 00BF     		.align	2
 5802              	.L712:
 5803 1268 0F000000 		.word	actual_cmd+15
 5804              	.L216:
1409:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "show") == 0)
 5805              		.loc 1 1409 0
 5806 126c F048     		ldr	r0, .L714
 5807 126e 40F20001 		movw	r1, #:lower16:.LC237
 5808 1272 C0F20001 		movt	r1, #:upper16:.LC237
 5809 1276 FFF7FEFF 		bl	strcmp
 5810 127a 0346     		mov	r3, r0
 5811 127c 002B     		cmp	r3, #0
 5812 127e 40F0DA80 		bne	.L217
1411:.\console.c   **** 					printf(STR_HELP_SHOW1);
 5813              		.loc 1 1411 0
 5814 1282 40F20000 		movw	r0, #:lower16:.LC141
 5815 1286 C0F20000 		movt	r0, #:upper16:.LC141
 5816 128a FFF7FEFF 		bl	puts
1412:.\console.c   **** 					printf(STR_HELP_SYNTX);
 5817              		.loc 1 1412 0
 5818 128e 40F20000 		movw	r0, #:lower16:.LC168
 5819 1292 C0F20000 		movt	r0, #:upper16:.LC168
 5820 1296 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 176


1413:.\console.c   **** 					printf(STR_HELP_SHOW2);
 5821              		.loc 1 1413 0
 5822 129a 40F20000 		movw	r0, #:lower16:.LC238
 5823 129e C0F20000 		movt	r0, #:upper16:.LC238
 5824 12a2 FFF7FEFF 		bl	puts
1414:.\console.c   **** 					printf(STR_HELP_SHO21);					
 5825              		.loc 1 1414 0
 5826 12a6 40F20000 		movw	r0, #:lower16:.LC239
 5827 12aa C0F20000 		movt	r0, #:upper16:.LC239
 5828 12ae FFF7FEFF 		bl	puts
1415:.\console.c   **** 					printf(STR_HELP_SHOW3);					
 5829              		.loc 1 1415 0
 5830 12b2 40F20000 		movw	r0, #:lower16:.LC240
 5831 12b6 C0F20000 		movt	r0, #:upper16:.LC240
 5832 12ba FFF7FEFF 		bl	puts
1416:.\console.c   **** 					printf(STR_HELP_SHOW4);
 5833              		.loc 1 1416 0
 5834 12be 40F20000 		movw	r0, #:lower16:.LC241
 5835 12c2 C0F20000 		movt	r0, #:upper16:.LC241
 5836 12c6 FFF7FEFF 		bl	puts
1418:.\console.c   **** 					printf(STR_HELP_SHOW6);
 5837              		.loc 1 1418 0
 5838 12ca 40F20000 		movw	r0, #:lower16:.LC242
 5839 12ce C0F20000 		movt	r0, #:upper16:.LC242
 5840 12d2 FFF7FEFF 		bl	puts
1424:.\console.c   **** 					printf(STR_HELP_SHW73);
 5841              		.loc 1 1424 0
 5842 12d6 40F20000 		movw	r0, #:lower16:.LC243
 5843 12da C0F20000 		movt	r0, #:upper16:.LC243
 5844 12de FFF7FEFF 		bl	puts
1426:.\console.c   **** 					printf(STR_HELP_SHOW8);
 5845              		.loc 1 1426 0
 5846 12e2 40F20000 		movw	r0, #:lower16:.LC244
 5847 12e6 C0F20000 		movt	r0, #:upper16:.LC244
 5848 12ea FFF7FEFF 		bl	puts
1427:.\console.c   **** 					printf(STR_HELP_SHOW9);
 5849              		.loc 1 1427 0
 5850 12ee 40F20000 		movw	r0, #:lower16:.LC245
 5851 12f2 C0F20000 		movt	r0, #:upper16:.LC245
 5852 12f6 FFF7FEFF 		bl	puts
1428:.\console.c   **** 					printf(STR_HELP_SHW90);					
 5853              		.loc 1 1428 0
 5854 12fa 40F20000 		movw	r0, #:lower16:.LC246
 5855 12fe C0F20000 		movt	r0, #:upper16:.LC246
 5856 1302 FFF7FEFF 		bl	puts
1429:.\console.c   **** 					printf(STR_HELP_SHW91);
 5857              		.loc 1 1429 0
 5858 1306 40F20000 		movw	r0, #:lower16:.LC247
 5859 130a C0F20000 		movt	r0, #:upper16:.LC247
 5860 130e FFF7FEFF 		bl	puts
1430:.\console.c   **** 					printf(STR_HELP_SHW92);
 5861              		.loc 1 1430 0
 5862 1312 40F20000 		movw	r0, #:lower16:.LC248
 5863 1316 C0F20000 		movt	r0, #:upper16:.LC248
 5864 131a FFF7FEFF 		bl	puts
1431:.\console.c   **** 					printf(STR_HELP_SHW93);
 5865              		.loc 1 1431 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 177


 5866 131e 40F20000 		movw	r0, #:lower16:.LC249
 5867 1322 C0F20000 		movt	r0, #:upper16:.LC249
 5868 1326 FFF7FEFF 		bl	puts
1432:.\console.c   **** 					printf(STR_HELP_SHW94);
 5869              		.loc 1 1432 0
 5870 132a 40F20000 		movw	r0, #:lower16:.LC250
 5871 132e C0F20000 		movt	r0, #:upper16:.LC250
 5872 1332 FFF7FEFF 		bl	puts
1433:.\console.c   **** 					printf(STR_HELP_SHW95);
 5873              		.loc 1 1433 0
 5874 1336 40F20000 		movw	r0, #:lower16:.LC251
 5875 133a C0F20000 		movt	r0, #:upper16:.LC251
 5876 133e FFF7FEFF 		bl	puts
1434:.\console.c   **** 					printf(STR_HELP_SHW96);					
 5877              		.loc 1 1434 0
 5878 1342 40F20000 		movw	r0, #:lower16:.LC252
 5879 1346 C0F20000 		movt	r0, #:upper16:.LC252
 5880 134a FFF7FEFF 		bl	puts
1435:.\console.c   **** 					printf(STR_HELP_SHOWA);
 5881              		.loc 1 1435 0
 5882 134e 40F20000 		movw	r0, #:lower16:.LC253
 5883 1352 C0F20000 		movt	r0, #:upper16:.LC253
 5884 1356 FFF7FEFF 		bl	puts
1436:.\console.c   **** 					printf(STR_HELP_SHWA1);
 5885              		.loc 1 1436 0
 5886 135a 40F20000 		movw	r0, #:lower16:.LC254
 5887 135e C0F20000 		movt	r0, #:upper16:.LC254
 5888 1362 FFF7FEFF 		bl	puts
1437:.\console.c   **** 					printf(STR_HELP_SHWA2);	
 5889              		.loc 1 1437 0
 5890 1366 40F20000 		movw	r0, #:lower16:.LC255
 5891 136a C0F20000 		movt	r0, #:upper16:.LC255
 5892 136e FFF7FEFF 		bl	puts
1438:.\console.c   **** 					printf(STR_HELP_SHWA3);
 5893              		.loc 1 1438 0
 5894 1372 40F20000 		movw	r0, #:lower16:.LC256
 5895 1376 C0F20000 		movt	r0, #:upper16:.LC256
 5896 137a FFF7FEFF 		bl	puts
1439:.\console.c   **** 					printf(STR_HELP_SHWA4);	
 5897              		.loc 1 1439 0
 5898 137e 40F20000 		movw	r0, #:lower16:.LC257
 5899 1382 C0F20000 		movt	r0, #:upper16:.LC257
 5900 1386 FFF7FEFF 		bl	puts
1440:.\console.c   **** 					printf(STR_HELP_SHWA5);	
 5901              		.loc 1 1440 0
 5902 138a 40F20000 		movw	r0, #:lower16:.LC258
 5903 138e C0F20000 		movt	r0, #:upper16:.LC258
 5904 1392 FFF7FEFF 		bl	puts
1441:.\console.c   **** 					printf(STR_HELP_SHWA6);						
 5905              		.loc 1 1441 0
 5906 1396 40F20000 		movw	r0, #:lower16:.LC259
 5907 139a C0F20000 		movt	r0, #:upper16:.LC259
 5908 139e FFF7FEFF 		bl	puts
1442:.\console.c   **** 					printf(STR_HELP_SHWA7);						
 5909              		.loc 1 1442 0
 5910 13a2 40F20000 		movw	r0, #:lower16:.LC260
 5911 13a6 C0F20000 		movt	r0, #:upper16:.LC260
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 178


 5912 13aa FFF7FEFF 		bl	puts
1443:.\console.c   **** 					printf(STR_HELP_SHOWB);
 5913              		.loc 1 1443 0
 5914 13ae 40F20000 		movw	r0, #:lower16:.LC261
 5915 13b2 C0F20000 		movt	r0, #:upper16:.LC261
 5916 13b6 FFF7FEFF 		bl	puts
1444:.\console.c   **** 					printf(STR_HELP_SHOWC);
 5917              		.loc 1 1444 0
 5918 13ba 40F20000 		movw	r0, #:lower16:.LC262
 5919 13be C0F20000 		movt	r0, #:upper16:.LC262
 5920 13c2 FFF7FEFF 		bl	puts
1445:.\console.c   **** 					printf(STR_HELP_SHOWD);	
 5921              		.loc 1 1445 0
 5922 13c6 40F20000 		movw	r0, #:lower16:.LC263
 5923 13ca C0F20000 		movt	r0, #:upper16:.LC263
 5924 13ce FFF7FEFF 		bl	puts
1446:.\console.c   **** 					printf(STR_HELP_SHOWE);
 5925              		.loc 1 1446 0
 5926 13d2 40F20000 		movw	r0, #:lower16:.LC264
 5927 13d6 C0F20000 		movt	r0, #:upper16:.LC264
 5928 13da FFF7FEFF 		bl	puts
1447:.\console.c   **** 					printf(STR_HELP_SHOWF);	
 5929              		.loc 1 1447 0
 5930 13de 40F20000 		movw	r0, #:lower16:.LC265
 5931 13e2 C0F20000 		movt	r0, #:upper16:.LC265
 5932 13e6 FFF7FEFF 		bl	puts
1448:.\console.c   **** 					printf(STR_HELP_SHOF1);
 5933              		.loc 1 1448 0
 5934 13ea 40F20000 		movw	r0, #:lower16:.LC266
 5935 13ee C0F20000 		movt	r0, #:upper16:.LC266
 5936 13f2 FFF7FEFF 		bl	puts
1449:.\console.c   **** 					printf(STR_HELP_SHOF2);
 5937              		.loc 1 1449 0
 5938 13f6 40F20000 		movw	r0, #:lower16:.LC267
 5939 13fa C0F20000 		movt	r0, #:upper16:.LC267
 5940 13fe FFF7FEFF 		bl	puts
1450:.\console.c   **** 					printf(STR_HELP_SHOF3);					
 5941              		.loc 1 1450 0
 5942 1402 40F20000 		movw	r0, #:lower16:.LC268
 5943 1406 C0F20000 		movt	r0, #:upper16:.LC268
 5944 140a FFF7FEFF 		bl	puts
1451:.\console.c   **** 					printf(STR_HELP_SHOWG);
 5945              		.loc 1 1451 0
 5946 140e 40F20000 		movw	r0, #:lower16:.LC269
 5947 1412 C0F20000 		movt	r0, #:upper16:.LC269
 5948 1416 FFF7FEFF 		bl	puts
1452:.\console.c   **** 					printf(STR_HELP_SHOWH);					
 5949              		.loc 1 1452 0
 5950 141a 40F20000 		movw	r0, #:lower16:.LC270
 5951 141e C0F20000 		movt	r0, #:upper16:.LC270
 5952 1422 FFF7FEFF 		bl	puts
1453:.\console.c   **** 					printf(STR_HELP_SHOWZ);
 5953              		.loc 1 1453 0
 5954 1426 40F20000 		movw	r0, #:lower16:.LC271
 5955 142a C0F20000 		movt	r0, #:upper16:.LC271
 5956 142e FFF7FEFF 		bl	puts
1454:.\console.c   **** 					goto exitpars;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 179


 5957              		.loc 1 1454 0
 5958 1432 05F03DBD 		b	.L131
 5959              	.L217:
1459:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "q") == 0)
 5960              		.loc 1 1459 0
 5961 1436 7E48     		ldr	r0, .L714
 5962 1438 40F20001 		movw	r1, #:lower16:.LC272
 5963 143c C0F20001 		movt	r1, #:upper16:.LC272
 5964 1440 FFF7FEFF 		bl	strcmp
 5965 1444 0346     		mov	r3, r0
 5966 1446 002B     		cmp	r3, #0
 5967 1448 7FD1     		bne	.L218
1462:.\console.c   **** 					printf(STR_QTAB0);
 5968              		.loc 1 1462 0
 5969 144a 40F20000 		movw	r0, #:lower16:.LC273
 5970 144e C0F20000 		movt	r0, #:upper16:.LC273
 5971 1452 FFF7FEFF 		bl	puts
1463:.\console.c   **** 					printf(STR_QTAB1);
 5972              		.loc 1 1463 0
 5973 1456 40F20000 		movw	r0, #:lower16:.LC274
 5974 145a C0F20000 		movt	r0, #:upper16:.LC274
 5975 145e FFF7FEFF 		bl	puts
1464:.\console.c   **** 					printf(STR_Q000);
 5976              		.loc 1 1464 0
 5977 1462 40F20000 		movw	r0, #:lower16:.LC275
 5978 1466 C0F20000 		movt	r0, #:upper16:.LC275
 5979 146a FFF7FEFF 		bl	puts
1465:.\console.c   **** 					printf(STR_Q011);					
 5980              		.loc 1 1465 0
 5981 146e 40F20000 		movw	r0, #:lower16:.LC276
 5982 1472 C0F20000 		movt	r0, #:upper16:.LC276
 5983 1476 FFF7FEFF 		bl	puts
1466:.\console.c   **** 					printf(STR_Q013);					
 5984              		.loc 1 1466 0
 5985 147a 40F20000 		movw	r0, #:lower16:.LC277
 5986 147e C0F20000 		movt	r0, #:upper16:.LC277
 5987 1482 FFF7FEFF 		bl	puts
1467:.\console.c   **** 					printf(STR_Q014);			
 5988              		.loc 1 1467 0
 5989 1486 40F20000 		movw	r0, #:lower16:.LC278
 5990 148a C0F20000 		movt	r0, #:upper16:.LC278
 5991 148e FFF7FEFF 		bl	puts
1468:.\console.c   **** 					printf(STR_Q015);					
 5992              		.loc 1 1468 0
 5993 1492 40F20000 		movw	r0, #:lower16:.LC279
 5994 1496 C0F20000 		movt	r0, #:upper16:.LC279
 5995 149a FFF7FEFF 		bl	puts
1469:.\console.c   **** 					printf(STR_Q016);					
 5996              		.loc 1 1469 0
 5997 149e 40F20000 		movw	r0, #:lower16:.LC280
 5998 14a2 C0F20000 		movt	r0, #:upper16:.LC280
 5999 14a6 FFF7FEFF 		bl	puts
1470:.\console.c   **** 					printf(STR_Q017);
 6000              		.loc 1 1470 0
 6001 14aa 40F20000 		movw	r0, #:lower16:.LC281
 6002 14ae C0F20000 		movt	r0, #:upper16:.LC281
 6003 14b2 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 180


1471:.\console.c   **** 					printf(STR_Q021);
 6004              		.loc 1 1471 0
 6005 14b6 40F20000 		movw	r0, #:lower16:.LC282
 6006 14ba C0F20000 		movt	r0, #:upper16:.LC282
 6007 14be FFF7FEFF 		bl	puts
1472:.\console.c   **** 					printf(STR_Q031);
 6008              		.loc 1 1472 0
 6009 14c2 40F20000 		movw	r0, #:lower16:.LC283
 6010 14c6 C0F20000 		movt	r0, #:upper16:.LC283
 6011 14ca FFF7FEFF 		bl	puts
1473:.\console.c   **** 					printf(STR_Q033);
 6012              		.loc 1 1473 0
 6013 14ce 40F20000 		movw	r0, #:lower16:.LC284
 6014 14d2 C0F20000 		movt	r0, #:upper16:.LC284
 6015 14d6 FFF7FEFF 		bl	puts
1474:.\console.c   **** 					printf(STR_Q034);
 6016              		.loc 1 1474 0
 6017 14da 40F20000 		movw	r0, #:lower16:.LC285
 6018 14de C0F20000 		movt	r0, #:upper16:.LC285
 6019 14e2 FFF7FEFF 		bl	puts
1475:.\console.c   **** 					printf(STR_Q040);					
 6020              		.loc 1 1475 0
 6021 14e6 40F20000 		movw	r0, #:lower16:.LC286
 6022 14ea C0F20000 		movt	r0, #:upper16:.LC286
 6023 14ee FFF7FEFF 		bl	puts
1476:.\console.c   **** 					printf(STR_Q041);					
 6024              		.loc 1 1476 0
 6025 14f2 40F20000 		movw	r0, #:lower16:.LC287
 6026 14f6 C0F20000 		movt	r0, #:upper16:.LC287
 6027 14fa FFF7FEFF 		bl	puts
1477:.\console.c   **** 					printf(STR_Q042);
 6028              		.loc 1 1477 0
 6029 14fe 40F20000 		movw	r0, #:lower16:.LC288
 6030 1502 C0F20000 		movt	r0, #:upper16:.LC288
 6031 1506 FFF7FEFF 		bl	puts
1478:.\console.c   **** 					printf(STR_Q043);
 6032              		.loc 1 1478 0
 6033 150a 40F20000 		movw	r0, #:lower16:.LC289
 6034 150e C0F20000 		movt	r0, #:upper16:.LC289
 6035 1512 FFF7FEFF 		bl	puts
1479:.\console.c   **** 					printf(STR_Q044);					
 6036              		.loc 1 1479 0
 6037 1516 40F20000 		movw	r0, #:lower16:.LC290
 6038 151a C0F20000 		movt	r0, #:upper16:.LC290
 6039 151e FFF7FEFF 		bl	puts
1480:.\console.c   **** 					printf(STR_Q051);
 6040              		.loc 1 1480 0
 6041 1522 40F20000 		movw	r0, #:lower16:.LC291
 6042 1526 C0F20000 		movt	r0, #:upper16:.LC291
 6043 152a FFF7FEFF 		bl	puts
1481:.\console.c   **** 					printf(STR_Q052);
 6044              		.loc 1 1481 0
 6045 152e 40F20000 		movw	r0, #:lower16:.LC292
 6046 1532 C0F20000 		movt	r0, #:upper16:.LC292
 6047 1536 FFF7FEFF 		bl	puts
1482:.\console.c   **** 					printf(STR_Q053);					
 6048              		.loc 1 1482 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 181


 6049 153a 40F20000 		movw	r0, #:lower16:.LC293
 6050 153e C0F20000 		movt	r0, #:upper16:.LC293
 6051 1542 FFF7FEFF 		bl	puts
1484:.\console.c   **** 					goto exitpars;
 6052              		.loc 1 1484 0
 6053 1546 05F0B3BC 		b	.L131
 6054              	.L218:
1489:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "testdac") == 0)
 6055              		.loc 1 1489 0
 6056 154a 3948     		ldr	r0, .L714
 6057 154c 40F20001 		movw	r1, #:lower16:.LC294
 6058 1550 C0F20001 		movt	r1, #:upper16:.LC294
 6059 1554 FFF7FEFF 		bl	strcmp
 6060 1558 0346     		mov	r3, r0
 6061 155a 002B     		cmp	r3, #0
 6062 155c 13D1     		bne	.L219
1491:.\console.c   **** 					printf(STR_HELP_TDAC1);
 6063              		.loc 1 1491 0
 6064 155e 40F20000 		movw	r0, #:lower16:.LC295
 6065 1562 C0F20000 		movt	r0, #:upper16:.LC295
 6066 1566 FFF7FEFF 		bl	puts
1492:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6067              		.loc 1 1492 0
 6068 156a 40F20000 		movw	r0, #:lower16:.LC168
 6069 156e C0F20000 		movt	r0, #:upper16:.LC168
 6070 1572 FFF7FEFF 		bl	puts
1493:.\console.c   **** 					printf(STR_HELP_TDAC2);
 6071              		.loc 1 1493 0
 6072 1576 40F20000 		movw	r0, #:lower16:.LC296
 6073 157a C0F20000 		movt	r0, #:upper16:.LC296
 6074 157e FFF7FEFF 		bl	puts
1494:.\console.c   **** 					goto exitpars;
 6075              		.loc 1 1494 0
 6076 1582 05F095BC 		b	.L131
 6077              	.L219:
1499:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "prompt") == 0)
 6078              		.loc 1 1499 0
 6079 1586 2A48     		ldr	r0, .L714
 6080 1588 40F20001 		movw	r1, #:lower16:.LC130
 6081 158c C0F20001 		movt	r1, #:upper16:.LC130
 6082 1590 FFF7FEFF 		bl	strcmp
 6083 1594 0346     		mov	r3, r0
 6084 1596 002B     		cmp	r3, #0
 6085 1598 13D1     		bne	.L220
1501:.\console.c   **** 					printf(STR_HELP_PROM1);
 6086              		.loc 1 1501 0
 6087 159a 40F20000 		movw	r0, #:lower16:.LC143
 6088 159e C0F20000 		movt	r0, #:upper16:.LC143
 6089 15a2 FFF7FEFF 		bl	puts
1502:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6090              		.loc 1 1502 0
 6091 15a6 40F20000 		movw	r0, #:lower16:.LC168
 6092 15aa C0F20000 		movt	r0, #:upper16:.LC168
 6093 15ae FFF7FEFF 		bl	puts
1503:.\console.c   **** 					printf(STR_HELP_PROM2);
 6094              		.loc 1 1503 0
 6095 15b2 40F20000 		movw	r0, #:lower16:.LC297
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 182


 6096 15b6 C0F20000 		movt	r0, #:upper16:.LC297
 6097 15ba FFF7FEFF 		bl	puts
1504:.\console.c   **** 					goto exitpars;
 6098              		.loc 1 1504 0
 6099 15be 05F077BC 		b	.L131
 6100              	.L220:
1509:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "version") == 0)
 6101              		.loc 1 1509 0
 6102 15c2 1B48     		ldr	r0, .L714
 6103 15c4 40F20001 		movw	r1, #:lower16:.LC123
 6104 15c8 C0F20001 		movt	r1, #:upper16:.LC123
 6105 15cc FFF7FEFF 		bl	strcmp
 6106 15d0 0346     		mov	r3, r0
 6107 15d2 002B     		cmp	r3, #0
 6108 15d4 09D0     		beq	.L221
1510:.\console.c   **** 				||(strcmp(actual_cmd.parameter, "v") == 0))
 6109              		.loc 1 1510 0
 6110 15d6 1648     		ldr	r0, .L714
 6111 15d8 40F20001 		movw	r1, #:lower16:.LC122
 6112 15dc C0F20001 		movt	r1, #:upper16:.LC122
 6113 15e0 FFF7FEFF 		bl	strcmp
 6114 15e4 0346     		mov	r3, r0
 6115 15e6 002B     		cmp	r3, #0
 6116 15e8 19D1     		bne	.L222
 6117              	.L221:
1512:.\console.c   **** 					printf(STR_HELP_VERS1);
 6118              		.loc 1 1512 0
 6119 15ea 40F20000 		movw	r0, #:lower16:.LC145
 6120 15ee C0F20000 		movt	r0, #:upper16:.LC145
 6121 15f2 FFF7FEFF 		bl	puts
1513:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6122              		.loc 1 1513 0
 6123 15f6 40F20000 		movw	r0, #:lower16:.LC168
 6124 15fa C0F20000 		movt	r0, #:upper16:.LC168
 6125 15fe FFF7FEFF 		bl	puts
1514:.\console.c   **** 					printf(STR_HELP_VERS2);
 6126              		.loc 1 1514 0
 6127 1602 40F20000 		movw	r0, #:lower16:.LC298
 6128 1606 C0F20000 		movt	r0, #:upper16:.LC298
 6129 160a FFF7FEFF 		bl	puts
1515:.\console.c   **** 					printf(STR_HELP_VERS3);				
 6130              		.loc 1 1515 0
 6131 160e 40F20000 		movw	r0, #:lower16:.LC299
 6132 1612 C0F20000 		movt	r0, #:upper16:.LC299
 6133 1616 FFF7FEFF 		bl	puts
1516:.\console.c   **** 					goto exitpars;
 6134              		.loc 1 1516 0
 6135 161a 05F049BC 		b	.L131
 6136              	.L222:
1518:.\console.c   **** 				printf(STR_ERROR3);	/* Bad Parameter(s) */
 6137              		.loc 1 1518 0
 6138 161e 40F20000 		movw	r0, #:lower16:.LC300
 6139 1622 C0F20000 		movt	r0, #:upper16:.LC300
 6140 1626 FFF7FEFF 		bl	printf
1519:.\console.c   **** 				goto exitpars;
 6141              		.loc 1 1519 0
 6142 162a 05F041BC 		b	.L131
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 183


 6143              	.L715:
 6144 162e 00BF     		.align	2
 6145              	.L714:
 6146 1630 0F000000 		.word	actual_cmd+15
 6147              	.L214:
1522:.\console.c   **** 		}
1523:.\console.c   **** 		/* END CMD HELP */
1524:.\console.c   **** 	
1525:.\console.c   **** 	
1526:.\console.c   **** 		/* CMD SHOW */
1527:.\console.c   **** 		if ((strcmp(actual_cmd.action, "show") == 0) ||
 6148              		.loc 1 1527 0
 6149 1634 40F20000 		movw	r0, #:lower16:actual_cmd
 6150 1638 C0F20000 		movt	r0, #:upper16:actual_cmd
 6151 163c 40F20001 		movw	r1, #:lower16:.LC237
 6152 1640 C0F20001 		movt	r1, #:upper16:.LC237
 6153 1644 FFF7FEFF 		bl	strcmp
 6154 1648 0346     		mov	r3, r0
 6155 164a 002B     		cmp	r3, #0
 6156 164c 0DD0     		beq	.L223
1528:.\console.c   **** 		   (strcmp(actual_cmd.action, "s") == 0))
 6157              		.loc 1 1528 0 discriminator 1
 6158 164e 40F20000 		movw	r0, #:lower16:actual_cmd
 6159 1652 C0F20000 		movt	r0, #:upper16:actual_cmd
 6160 1656 40F20001 		movw	r1, #:lower16:.LC301
 6161 165a C0F20001 		movt	r1, #:upper16:.LC301
 6162 165e FFF7FEFF 		bl	strcmp
 6163 1662 0346     		mov	r3, r0
1527:.\console.c   **** 		if ((strcmp(actual_cmd.action, "show") == 0) ||
 6164              		.loc 1 1527 0 discriminator 1
 6165 1664 002B     		cmp	r3, #0
 6166 1666 42F09A87 		bne	.L224
 6167              	.L223:
1529:.\console.c   **** 		{
1530:.\console.c   **** 			// SHOW CONTROL
1531:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "control") == 0)	
 6168              		.loc 1 1531 0
 6169 166a 1048     		ldr	r0, .L716
 6170 166c 40F20001 		movw	r1, #:lower16:.LC302
 6171 1670 C0F20001 		movt	r1, #:upper16:.LC302
 6172 1674 FFF7FEFF 		bl	strcmp
 6173 1678 0346     		mov	r3, r0
 6174 167a 002B     		cmp	r3, #0
 6175 167c 0ED0     		beq	.L225
1532:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ctrl") == 0) 
 6176              		.loc 1 1532 0
 6177 167e 0B48     		ldr	r0, .L716
 6178 1680 40F20001 		movw	r1, #:lower16:.LC303
 6179 1684 C0F20001 		movt	r1, #:upper16:.LC303
 6180 1688 FFF7FEFF 		bl	strcmp
 6181 168c 0346     		mov	r3, r0
 6182 168e 002B     		cmp	r3, #0
 6183 1690 04D0     		beq	.L225
1533:.\console.c   **** 			|| (strlen(actual_cmd.parameter) == 0))
 6184              		.loc 1 1533 0
 6185 1692 064B     		ldr	r3, .L716
 6186 1694 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 184


 6187 1696 002B     		cmp	r3, #0
 6188 1698 40F0D382 		bne	.L226
 6189              	.L225:
1534:.\console.c   **** 			{
1535:.\console.c   **** 				printf("\x1B[2J");			/* Erase Screen (ESC=\x1B) 	*/
 6190              		.loc 1 1535 0
 6191 169c 40F20000 		movw	r0, #:lower16:.LC304
 6192 16a0 C0F20000 		movt	r0, #:upper16:.LC304
 6193 16a4 FFF7FEFF 		bl	printf
1536:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6194              		.loc 1 1536 0
 6195 16a8 BDE2     		b	.L227
 6196              	.L717:
 6197 16aa 00BF     		.align	2
 6198              	.L716:
 6199 16ac 0F000000 		.word	actual_cmd+15
 6200              	.L231:
1537:.\console.c   **** 				{
1538:.\console.c   **** 					printf("\x1B[H");		/* Cursor Home (ESC=\x1B)	*/
 6201              		.loc 1 1538 0
 6202 16b0 40F20000 		movw	r0, #:lower16:.LC305
 6203 16b4 C0F20000 		movt	r0, #:upper16:.LC305
 6204 16b8 FFF7FEFF 		bl	printf
1539:.\console.c   **** 					printf("---------------------------------\r\n");
 6205              		.loc 1 1539 0
 6206 16bc 40F20000 		movw	r0, #:lower16:.LC306
 6207 16c0 C0F20000 		movt	r0, #:upper16:.LC306
 6208 16c4 FFF7FEFF 		bl	puts
1540:.\console.c   **** 					printf("--- GoBee Director RT CONTROL ---\r\n");
 6209              		.loc 1 1540 0
 6210 16c8 40F20000 		movw	r0, #:lower16:.LC307
 6211 16cc C0F20000 		movt	r0, #:upper16:.LC307
 6212 16d0 FFF7FEFF 		bl	puts
1541:.\console.c   **** 					printf("---------------------------------\r\n");
 6213              		.loc 1 1541 0
 6214 16d4 40F20000 		movw	r0, #:lower16:.LC306
 6215 16d8 C0F20000 		movt	r0, #:upper16:.LC306
 6216 16dc FFF7FEFF 		bl	puts
1542:.\console.c   **** 					printf("\r\n");
 6217              		.loc 1 1542 0
 6218 16e0 40F20000 		movw	r0, #:lower16:.LC42
 6219 16e4 C0F20000 		movt	r0, #:upper16:.LC42
 6220 16e8 FFF7FEFF 		bl	puts
1543:.\console.c   **** 									
1544:.\console.c   **** //					printf("agyro rate=%1.4f", (float)agyro.rate);
1545:.\console.c   **** //					printf_spc(7);
1546:.\console.c   **** //					printf("  lpf(rate)=%1.4f [deg/s]", (float)agyro.rate_lowpass);
1547:.\console.c   **** //					printf_spc(7);
1548:.\console.c   **** //					printf("  angle=%1.4f [deg]", (float)agyro.angle);
1549:.\console.c   **** //					printf_spc(7);							
1550:.\console.c   **** //					printf("\r\n");	
1551:.\console.c   **** //					printf("\r\n");	
1552:.\console.c   **** 
1553:.\console.c   **** //					printf("fbk enc rate=%1.4f [deg/s]", (float)pan_feedback_encoder.angular_velocity);
1554:.\console.c   **** //					printf_spc(7);
1555:.\console.c   **** //					printf("  angle=%1.4f [deg]", (float)pan_feedback_encoder.angle);	
1556:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 185


1557:.\console.c   **** 					printf("axis_res(P)=%+1.3f [step/2PI]", (float)pan_axis.param.resolution.fnum);
 6221              		.loc 1 1557 0
 6222 16ec 40F20003 		movw	r3, #:lower16:pan_axis
 6223 16f0 C0F20003 		movt	r3, #:upper16:pan_axis
 6224 16f4 DB68     		ldr	r3, [r3, #12]	@ float
 6225 16f6 1846     		mov	r0, r3
 6226 16f8 FFF7FEFF 		bl	__aeabi_f2d
 6227 16fc 0246     		mov	r2, r0
 6228 16fe 0B46     		mov	r3, r1
 6229 1700 40F20000 		movw	r0, #:lower16:.LC308
 6230 1704 C0F20000 		movt	r0, #:upper16:.LC308
 6231 1708 FFF7FEFF 		bl	printf
1558:.\console.c   **** 					printf_spc(1);					
 6232              		.loc 1 1558 0
 6233 170c 4FF00100 		mov	r0, #1
 6234 1710 FFF7FEFF 		bl	printf_spc
1559:.\console.c   **** 					printf("axis_res(T)=%+1.3f [step/2PI]", (float)tilt_axis.param.resolution.fnum);
 6235              		.loc 1 1559 0
 6236 1714 40F20003 		movw	r3, #:lower16:tilt_axis
 6237 1718 C0F20003 		movt	r3, #:upper16:tilt_axis
 6238 171c DB68     		ldr	r3, [r3, #12]	@ float
 6239 171e 1846     		mov	r0, r3
 6240 1720 FFF7FEFF 		bl	__aeabi_f2d
 6241 1724 0246     		mov	r2, r0
 6242 1726 0B46     		mov	r3, r1
 6243 1728 40F20000 		movw	r0, #:lower16:.LC309
 6244 172c C0F20000 		movt	r0, #:upper16:.LC309
 6245 1730 FFF7FEFF 		bl	printf
1560:.\console.c   **** 					printf("\r\n");							
 6246              		.loc 1 1560 0
 6247 1734 40F20000 		movw	r0, #:lower16:.LC42
 6248 1738 C0F20000 		movt	r0, #:upper16:.LC42
 6249 173c FFF7FEFF 		bl	puts
1561:.\console.c   **** 					
1562:.\console.c   **** 					printf("angle(P)=%+1.4f [deg]", (float)pan_axis.mc.slave_enc.position * 360/pan_axis.param.res
 6250              		.loc 1 1562 0
 6251 1740 40F20003 		movw	r3, #:lower16:pan_axis
 6252 1744 C0F20003 		movt	r3, #:upper16:pan_axis
 6253 1748 5B6C     		ldr	r3, [r3, #68]
 6254 174a 1846     		mov	r0, r3
 6255 174c FFF7FEFF 		bl	__aeabi_i2f
 6256 1750 0346     		mov	r3, r0
 6257 1752 1846     		mov	r0, r3
 6258 1754 4FF00001 		mov	r1, #0
 6259 1758 C4F2B431 		movt	r1, 17332
 6260 175c FFF7FEFF 		bl	__aeabi_fmul
 6261 1760 0346     		mov	r3, r0
 6262 1762 1A46     		mov	r2, r3
 6263 1764 40F20003 		movw	r3, #:lower16:pan_axis
 6264 1768 C0F20003 		movt	r3, #:upper16:pan_axis
 6265 176c DB68     		ldr	r3, [r3, #12]	@ float
 6266 176e 1046     		mov	r0, r2
 6267 1770 1946     		mov	r1, r3
 6268 1772 FFF7FEFF 		bl	__aeabi_fdiv
 6269 1776 0346     		mov	r3, r0
 6270 1778 1846     		mov	r0, r3
 6271 177a FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 186


 6272 177e 0246     		mov	r2, r0
 6273 1780 0B46     		mov	r3, r1
 6274 1782 40F20000 		movw	r0, #:lower16:.LC310
 6275 1786 C0F20000 		movt	r0, #:upper16:.LC310
 6276 178a FFF7FEFF 		bl	printf
1563:.\console.c   **** 					printf_spc(13);					
 6277              		.loc 1 1563 0
 6278 178e 4FF00D00 		mov	r0, #13
 6279 1792 FFF7FEFF 		bl	printf_spc
1564:.\console.c   **** 					printf("angle(T)=%+1.4f [deg]", (float)tilt_axis.mc.slave_enc.position * 360/tilt_axis.param.r
 6280              		.loc 1 1564 0
 6281 1796 40F20003 		movw	r3, #:lower16:tilt_axis
 6282 179a C0F20003 		movt	r3, #:upper16:tilt_axis
 6283 179e 5B6C     		ldr	r3, [r3, #68]
 6284 17a0 1846     		mov	r0, r3
 6285 17a2 FFF7FEFF 		bl	__aeabi_i2f
 6286 17a6 0346     		mov	r3, r0
 6287 17a8 1846     		mov	r0, r3
 6288 17aa 4FF00001 		mov	r1, #0
 6289 17ae C4F2B431 		movt	r1, 17332
 6290 17b2 FFF7FEFF 		bl	__aeabi_fmul
 6291 17b6 0346     		mov	r3, r0
 6292 17b8 1A46     		mov	r2, r3
 6293 17ba 40F20003 		movw	r3, #:lower16:tilt_axis
 6294 17be C0F20003 		movt	r3, #:upper16:tilt_axis
 6295 17c2 DB68     		ldr	r3, [r3, #12]	@ float
 6296 17c4 1046     		mov	r0, r2
 6297 17c6 1946     		mov	r1, r3
 6298 17c8 FFF7FEFF 		bl	__aeabi_fdiv
 6299 17cc 0346     		mov	r3, r0
 6300 17ce 1846     		mov	r0, r3
 6301 17d0 FFF7FEFF 		bl	__aeabi_f2d
 6302 17d4 0246     		mov	r2, r0
 6303 17d6 0B46     		mov	r3, r1
 6304 17d8 40F20000 		movw	r0, #:lower16:.LC311
 6305 17dc C0F20000 		movt	r0, #:upper16:.LC311
 6306 17e0 FFF7FEFF 		bl	printf
1565:.\console.c   **** 					printf("\r\n");						
 6307              		.loc 1 1565 0
 6308 17e4 40F20000 		movw	r0, #:lower16:.LC42
 6309 17e8 C0F20000 		movt	r0, #:upper16:.LC42
 6310 17ec FFF7FEFF 		bl	puts
1566:.\console.c   **** 					printf("\r\n");		
 6311              		.loc 1 1566 0
 6312 17f0 40F20000 		movw	r0, #:lower16:.LC42
 6313 17f4 C0F20000 		movt	r0, #:upper16:.LC42
 6314 17f8 FFF7FEFF 		bl	puts
1567:.\console.c   **** 					
1568:.\console.c   **** 					printf("fbk(P)=%+1.4f [step]", (float)pan_axis.mc.slave_enc.position);
 6315              		.loc 1 1568 0
 6316 17fc 40F20003 		movw	r3, #:lower16:pan_axis
 6317 1800 C0F20003 		movt	r3, #:upper16:pan_axis
 6318 1804 5B6C     		ldr	r3, [r3, #68]
 6319 1806 1846     		mov	r0, r3
 6320 1808 FFF7FEFF 		bl	__aeabi_i2f
 6321 180c 0346     		mov	r3, r0
 6322 180e 1846     		mov	r0, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 187


 6323 1810 FFF7FEFF 		bl	__aeabi_f2d
 6324 1814 0246     		mov	r2, r0
 6325 1816 0B46     		mov	r3, r1
 6326 1818 40F20000 		movw	r0, #:lower16:.LC312
 6327 181c C0F20000 		movt	r0, #:upper16:.LC312
 6328 1820 FFF7FEFF 		bl	printf
1569:.\console.c   **** 					printf_spc(14);					
 6329              		.loc 1 1569 0
 6330 1824 4FF00E00 		mov	r0, #14
 6331 1828 FFF7FEFF 		bl	printf_spc
1570:.\console.c   **** 					printf("fbk(T)=%+1.4f [step]", (float)tilt_axis.mc.slave_enc.position);
 6332              		.loc 1 1570 0
 6333 182c 40F20003 		movw	r3, #:lower16:tilt_axis
 6334 1830 C0F20003 		movt	r3, #:upper16:tilt_axis
 6335 1834 5B6C     		ldr	r3, [r3, #68]
 6336 1836 1846     		mov	r0, r3
 6337 1838 FFF7FEFF 		bl	__aeabi_i2f
 6338 183c 0346     		mov	r3, r0
 6339 183e 1846     		mov	r0, r3
 6340 1840 FFF7FEFF 		bl	__aeabi_f2d
 6341 1844 0246     		mov	r2, r0
 6342 1846 0B46     		mov	r3, r1
 6343 1848 40F20000 		movw	r0, #:lower16:.LC313
 6344 184c C0F20000 		movt	r0, #:upper16:.LC313
 6345 1850 FFF7FEFF 		bl	printf
1571:.\console.c   **** 					printf("\r\n");						
 6346              		.loc 1 1571 0
 6347 1854 40F20000 		movw	r0, #:lower16:.LC42
 6348 1858 C0F20000 		movt	r0, #:upper16:.LC42
 6349 185c FFF7FEFF 		bl	puts
1572:.\console.c   **** 
1573:.\console.c   **** 					printf("mast_enc(P)=%+1.4f [step]", (float)pan_axis.mc.master_enc_position);
 6350              		.loc 1 1573 0
 6351 1860 40F20003 		movw	r3, #:lower16:pan_axis
 6352 1864 C0F20003 		movt	r3, #:upper16:pan_axis
 6353 1868 5B6B     		ldr	r3, [r3, #52]
 6354 186a 1846     		mov	r0, r3
 6355 186c FFF7FEFF 		bl	__aeabi_i2f
 6356 1870 0346     		mov	r3, r0
 6357 1872 1846     		mov	r0, r3
 6358 1874 FFF7FEFF 		bl	__aeabi_f2d
 6359 1878 0246     		mov	r2, r0
 6360 187a 0B46     		mov	r3, r1
 6361 187c 40F20000 		movw	r0, #:lower16:.LC314
 6362 1880 C0F20000 		movt	r0, #:upper16:.LC314
 6363 1884 FFF7FEFF 		bl	printf
1574:.\console.c   **** 					printf_spc(9);					
 6364              		.loc 1 1574 0
 6365 1888 4FF00900 		mov	r0, #9
 6366 188c FFF7FEFF 		bl	printf_spc
1575:.\console.c   **** 					printf("mast_enc(T)=%+1.4f [step]", (float)tilt_axis.mc.master_enc_position);
 6367              		.loc 1 1575 0
 6368 1890 40F20003 		movw	r3, #:lower16:tilt_axis
 6369 1894 C0F20003 		movt	r3, #:upper16:tilt_axis
 6370 1898 5B6B     		ldr	r3, [r3, #52]
 6371 189a 1846     		mov	r0, r3
 6372 189c FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 188


 6373 18a0 0346     		mov	r3, r0
 6374 18a2 1846     		mov	r0, r3
 6375 18a4 FFF7FEFF 		bl	__aeabi_f2d
 6376 18a8 0246     		mov	r2, r0
 6377 18aa 0B46     		mov	r3, r1
 6378 18ac 40F20000 		movw	r0, #:lower16:.LC315
 6379 18b0 C0F20000 		movt	r0, #:upper16:.LC315
 6380 18b4 FFF7FEFF 		bl	printf
1576:.\console.c   **** 					printf("\r\n");
 6381              		.loc 1 1576 0
 6382 18b8 40F20000 		movw	r0, #:lower16:.LC42
 6383 18bc C0F20000 		movt	r0, #:upper16:.LC42
 6384 18c0 FFF7FEFF 		bl	puts
1577:.\console.c   **** 					
1578:.\console.c   **** 					printf("mast_joy(P)=%+1.4f [step]", (float)pan_axis.mc.master_joy_position);
 6385              		.loc 1 1578 0
 6386 18c4 40F20003 		movw	r3, #:lower16:pan_axis
 6387 18c8 C0F20003 		movt	r3, #:upper16:pan_axis
 6388 18cc DB6B     		ldr	r3, [r3, #60]
 6389 18ce 1846     		mov	r0, r3
 6390 18d0 FFF7FEFF 		bl	__aeabi_i2f
 6391 18d4 0346     		mov	r3, r0
 6392 18d6 1846     		mov	r0, r3
 6393 18d8 FFF7FEFF 		bl	__aeabi_f2d
 6394 18dc 0246     		mov	r2, r0
 6395 18de 0B46     		mov	r3, r1
 6396 18e0 40F20000 		movw	r0, #:lower16:.LC316
 6397 18e4 C0F20000 		movt	r0, #:upper16:.LC316
 6398 18e8 FFF7FEFF 		bl	printf
1579:.\console.c   **** 					printf_spc(9);					
 6399              		.loc 1 1579 0
 6400 18ec 4FF00900 		mov	r0, #9
 6401 18f0 FFF7FEFF 		bl	printf_spc
1580:.\console.c   **** 					printf("mast_joy(T)=%+1.4f [step]", (float)tilt_axis.mc.master_joy_position);					
 6402              		.loc 1 1580 0
 6403 18f4 40F20003 		movw	r3, #:lower16:tilt_axis
 6404 18f8 C0F20003 		movt	r3, #:upper16:tilt_axis
 6405 18fc DB6B     		ldr	r3, [r3, #60]
 6406 18fe 1846     		mov	r0, r3
 6407 1900 FFF7FEFF 		bl	__aeabi_i2f
 6408 1904 0346     		mov	r3, r0
 6409 1906 1846     		mov	r0, r3
 6410 1908 FFF7FEFF 		bl	__aeabi_f2d
 6411 190c 0246     		mov	r2, r0
 6412 190e 0B46     		mov	r3, r1
 6413 1910 40F20000 		movw	r0, #:lower16:.LC317
 6414 1914 C0F20000 		movt	r0, #:upper16:.LC317
 6415 1918 FFF7FEFF 		bl	printf
1581:.\console.c   **** 					
1582:.\console.c   **** 					printf("\r\n");
 6416              		.loc 1 1582 0
 6417 191c 40F20000 		movw	r0, #:lower16:.LC42
 6418 1920 C0F20000 		movt	r0, #:upper16:.LC42
 6419 1924 FFF7FEFF 		bl	puts
1583:.\console.c   **** 					printf("\r\n");
 6420              		.loc 1 1583 0
 6421 1928 40F20000 		movw	r0, #:lower16:.LC42
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 189


 6422 192c C0F20000 		movt	r0, #:upper16:.LC42
 6423 1930 FFF7FEFF 		bl	puts
1584:.\console.c   **** 					
1585:.\console.c   **** 					printf("err(P)=%+1.4f", (float)pan_axis.mc.error);
 6424              		.loc 1 1585 0
 6425 1934 40F20003 		movw	r3, #:lower16:pan_axis
 6426 1938 C0F20003 		movt	r3, #:upper16:pan_axis
 6427 193c 9B6D     		ldr	r3, [r3, #88]	@ float
 6428 193e 1846     		mov	r0, r3
 6429 1940 FFF7FEFF 		bl	__aeabi_f2d
 6430 1944 0246     		mov	r2, r0
 6431 1946 0B46     		mov	r3, r1
 6432 1948 40F20000 		movw	r0, #:lower16:.LC318
 6433 194c C0F20000 		movt	r0, #:upper16:.LC318
 6434 1950 FFF7FEFF 		bl	printf
1586:.\console.c   **** 					printf_spc(21);					
 6435              		.loc 1 1586 0
 6436 1954 4FF01500 		mov	r0, #21
 6437 1958 FFF7FEFF 		bl	printf_spc
1587:.\console.c   **** 					printf("err(T)=%+1.4f", (float)tilt_axis.mc.error);
 6438              		.loc 1 1587 0
 6439 195c 40F20003 		movw	r3, #:lower16:tilt_axis
 6440 1960 C0F20003 		movt	r3, #:upper16:tilt_axis
 6441 1964 9B6D     		ldr	r3, [r3, #88]	@ float
 6442 1966 1846     		mov	r0, r3
 6443 1968 FFF7FEFF 		bl	__aeabi_f2d
 6444 196c 0246     		mov	r2, r0
 6445 196e 0B46     		mov	r3, r1
 6446 1970 40F20000 		movw	r0, #:lower16:.LC319
 6447 1974 C0F20000 		movt	r0, #:upper16:.LC319
 6448 1978 FFF7FEFF 		bl	printf
1588:.\console.c   **** 					printf("\r\n");	
 6449              		.loc 1 1588 0
 6450 197c 40F20000 		movw	r0, #:lower16:.LC42
 6451 1980 C0F20000 		movt	r0, #:upper16:.LC42
 6452 1984 FFF7FEFF 		bl	puts
1589:.\console.c   **** 					
1590:.\console.c   **** 					printf("derr(P)=%+1.4f", (float)pan_axis.mc.derror);
 6453              		.loc 1 1590 0
 6454 1988 40F20003 		movw	r3, #:lower16:pan_axis
 6455 198c C0F20003 		movt	r3, #:upper16:pan_axis
 6456 1990 5B6E     		ldr	r3, [r3, #100]	@ float
 6457 1992 1846     		mov	r0, r3
 6458 1994 FFF7FEFF 		bl	__aeabi_f2d
 6459 1998 0246     		mov	r2, r0
 6460 199a 0B46     		mov	r3, r1
 6461 199c 40F20000 		movw	r0, #:lower16:.LC320
 6462 19a0 C0F20000 		movt	r0, #:upper16:.LC320
 6463 19a4 FFF7FEFF 		bl	printf
1591:.\console.c   **** 					printf_spc(20);
 6464              		.loc 1 1591 0
 6465 19a8 4FF01400 		mov	r0, #20
 6466 19ac FFF7FEFF 		bl	printf_spc
1592:.\console.c   **** 					printf("derr(T)=%+1.4f", (float)tilt_axis.mc.derror);
 6467              		.loc 1 1592 0
 6468 19b0 40F20003 		movw	r3, #:lower16:tilt_axis
 6469 19b4 C0F20003 		movt	r3, #:upper16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 190


 6470 19b8 5B6E     		ldr	r3, [r3, #100]	@ float
 6471 19ba 1846     		mov	r0, r3
 6472 19bc FFF7FEFF 		bl	__aeabi_f2d
 6473 19c0 0246     		mov	r2, r0
 6474 19c2 0B46     		mov	r3, r1
 6475 19c4 40F20000 		movw	r0, #:lower16:.LC321
 6476 19c8 C0F20000 		movt	r0, #:upper16:.LC321
 6477 19cc FFF7FEFF 		bl	printf
1593:.\console.c   **** 					printf("\r\n");	
 6478              		.loc 1 1593 0
 6479 19d0 40F20000 		movw	r0, #:lower16:.LC42
 6480 19d4 C0F20000 		movt	r0, #:upper16:.LC42
 6481 19d8 FFF7FEFF 		bl	puts
1594:.\console.c   **** 
1595:.\console.c   **** 					printf("ierr(P)=%+1.4f", (float)pan_axis.mc.ierror);
 6482              		.loc 1 1595 0
 6483 19dc 40F20003 		movw	r3, #:lower16:pan_axis
 6484 19e0 C0F20003 		movt	r3, #:upper16:pan_axis
 6485 19e4 1B6E     		ldr	r3, [r3, #96]	@ float
 6486 19e6 1846     		mov	r0, r3
 6487 19e8 FFF7FEFF 		bl	__aeabi_f2d
 6488 19ec 0246     		mov	r2, r0
 6489 19ee 0B46     		mov	r3, r1
 6490 19f0 40F20000 		movw	r0, #:lower16:.LC322
 6491 19f4 C0F20000 		movt	r0, #:upper16:.LC322
 6492 19f8 FFF7FEFF 		bl	printf
1596:.\console.c   **** 					printf_spc(20);
 6493              		.loc 1 1596 0
 6494 19fc 4FF01400 		mov	r0, #20
 6495 1a00 FFF7FEFF 		bl	printf_spc
1597:.\console.c   **** 					printf("ierr(T)=%+1.4f", (float)tilt_axis.mc.ierror);
 6496              		.loc 1 1597 0
 6497 1a04 40F20003 		movw	r3, #:lower16:tilt_axis
 6498 1a08 C0F20003 		movt	r3, #:upper16:tilt_axis
 6499 1a0c 1B6E     		ldr	r3, [r3, #96]	@ float
 6500 1a0e 1846     		mov	r0, r3
 6501 1a10 FFF7FEFF 		bl	__aeabi_f2d
 6502 1a14 0246     		mov	r2, r0
 6503 1a16 0B46     		mov	r3, r1
 6504 1a18 40F20000 		movw	r0, #:lower16:.LC323
 6505 1a1c C0F20000 		movt	r0, #:upper16:.LC323
 6506 1a20 FFF7FEFF 		bl	printf
1598:.\console.c   **** 					printf("\r\n");	
 6507              		.loc 1 1598 0
 6508 1a24 40F20000 		movw	r0, #:lower16:.LC42
 6509 1a28 C0F20000 		movt	r0, #:upper16:.LC42
 6510 1a2c FFF7FEFF 		bl	puts
1599:.\console.c   **** 					
1600:.\console.c   **** 					printf("cv(P)=%+1.4f", (float)pan_axis.mc.ctrl_var);
 6511              		.loc 1 1600 0
 6512 1a30 40F20003 		movw	r3, #:lower16:pan_axis
 6513 1a34 C0F20003 		movt	r3, #:upper16:pan_axis
 6514 1a38 1B6F     		ldr	r3, [r3, #112]	@ float
 6515 1a3a 1846     		mov	r0, r3
 6516 1a3c FFF7FEFF 		bl	__aeabi_f2d
 6517 1a40 0246     		mov	r2, r0
 6518 1a42 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 191


 6519 1a44 40F20000 		movw	r0, #:lower16:.LC324
 6520 1a48 C0F20000 		movt	r0, #:upper16:.LC324
 6521 1a4c FFF7FEFF 		bl	printf
1601:.\console.c   **** 					printf_spc(22);
 6522              		.loc 1 1601 0
 6523 1a50 4FF01600 		mov	r0, #22
 6524 1a54 FFF7FEFF 		bl	printf_spc
1602:.\console.c   **** 					printf("cv(T)=%+1.4f", (float)tilt_axis.mc.ctrl_var);
 6525              		.loc 1 1602 0
 6526 1a58 40F20003 		movw	r3, #:lower16:tilt_axis
 6527 1a5c C0F20003 		movt	r3, #:upper16:tilt_axis
 6528 1a60 1B6F     		ldr	r3, [r3, #112]	@ float
 6529 1a62 1846     		mov	r0, r3
 6530 1a64 FFF7FEFF 		bl	__aeabi_f2d
 6531 1a68 0246     		mov	r2, r0
 6532 1a6a 0B46     		mov	r3, r1
 6533 1a6c 40F20000 		movw	r0, #:lower16:.LC325
 6534 1a70 C0F20000 		movt	r0, #:upper16:.LC325
 6535 1a74 FFF7FEFF 		bl	printf
1603:.\console.c   **** 					printf("\r\n");	
 6536              		.loc 1 1603 0
 6537 1a78 40F20000 		movw	r0, #:lower16:.LC42
 6538 1a7c C0F20000 		movt	r0, #:upper16:.LC42
 6539 1a80 FFF7FEFF 		bl	puts
1604:.\console.c   **** 					
1605:.\console.c   **** 					printf("pwm_var(P)= %4i", (uint16)pan_axis.mc.pwm_var);
 6540              		.loc 1 1605 0
 6541 1a84 40F20003 		movw	r3, #:lower16:pan_axis
 6542 1a88 C0F20003 		movt	r3, #:upper16:pan_axis
 6543 1a8c B3F87430 		ldrh	r3, [r3, #116]
 6544 1a90 9BB2     		uxth	r3, r3
 6545 1a92 40F20000 		movw	r0, #:lower16:.LC326
 6546 1a96 C0F20000 		movt	r0, #:upper16:.LC326
 6547 1a9a 1946     		mov	r1, r3
 6548 1a9c FFF7FEFF 		bl	printf
1606:.\console.c   **** 					printf_spc(19);
 6549              		.loc 1 1606 0
 6550 1aa0 4FF01300 		mov	r0, #19
 6551 1aa4 FFF7FEFF 		bl	printf_spc
1607:.\console.c   **** 					printf("pwm_var(T)= %4i", (uint16)tilt_axis.mc.pwm_var);
 6552              		.loc 1 1607 0
 6553 1aa8 40F20003 		movw	r3, #:lower16:tilt_axis
 6554 1aac C0F20003 		movt	r3, #:upper16:tilt_axis
 6555 1ab0 B3F87430 		ldrh	r3, [r3, #116]
 6556 1ab4 9BB2     		uxth	r3, r3
 6557 1ab6 40F20000 		movw	r0, #:lower16:.LC327
 6558 1aba C0F20000 		movt	r0, #:upper16:.LC327
 6559 1abe 1946     		mov	r1, r3
 6560 1ac0 FFF7FEFF 		bl	printf
1608:.\console.c   **** 					printf("\r\n");					
 6561              		.loc 1 1608 0
 6562 1ac4 40F20000 		movw	r0, #:lower16:.LC42
 6563 1ac8 C0F20000 		movt	r0, #:upper16:.LC42
 6564 1acc FFF7FEFF 		bl	puts
1609:.\console.c   **** 
1610:.\console.c   **** 					strcpy(slegenda,"PAN  TORQUE:"); 
 6565              		.loc 1 1610 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 192


 6566 1ad0 40F20002 		movw	r2, #:lower16:slegenda
 6567 1ad4 C0F20002 		movt	r2, #:upper16:slegenda
 6568 1ad8 40F20003 		movw	r3, #:lower16:.LC328
 6569 1adc C0F20003 		movt	r3, #:upper16:.LC328
 6570 1ae0 1446     		mov	r4, r2
 6571 1ae2 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 6572 1ae4 07C4     		stmia	r4!, {r0, r1, r2}
 6573 1ae6 2370     		strb	r3, [r4, #0]
1611:.\console.c   **** 					print_hystogram_border(50, &slegenda[0]);    
 6574              		.loc 1 1611 0
 6575 1ae8 4FF03200 		mov	r0, #50
 6576 1aec 40F20001 		movw	r1, #:lower16:slegenda
 6577 1af0 C0F20001 		movt	r1, #:upper16:slegenda
 6578 1af4 FFF7FEFF 		bl	print_hystogram_border
1612:.\console.c   **** 					print_abs_linear_hystogram((int16)pan_axis.mc.ctrl_var, MOTOR_PWM_PERIOD_HALF, 50, &slegenda[0
 6579              		.loc 1 1612 0
 6580 1af8 40F20003 		movw	r3, #:lower16:pan_axis
 6581 1afc C0F20003 		movt	r3, #:upper16:pan_axis
 6582 1b00 1B6F     		ldr	r3, [r3, #112]	@ float
 6583 1b02 1846     		mov	r0, r3
 6584 1b04 FFF7FEFF 		bl	__aeabi_f2iz
 6585 1b08 0346     		mov	r3, r0
 6586 1b0a 9BB2     		uxth	r3, r3
 6587 1b0c 1BB2     		sxth	r3, r3
 6588 1b0e 1846     		mov	r0, r3
 6589 1b10 4FF40071 		mov	r1, #512
 6590 1b14 4FF03202 		mov	r2, #50
 6591 1b18 40F20003 		movw	r3, #:lower16:slegenda
 6592 1b1c C0F20003 		movt	r3, #:upper16:slegenda
 6593 1b20 FFF7FEFF 		bl	print_abs_linear_hystogram
1613:.\console.c   **** //					print_hystogram_border(50, &slegenda[0]);					
1614:.\console.c   **** //					printf("\r\n");
1615:.\console.c   **** 					
1616:.\console.c   **** 					strcpy(slegenda,"TILT TORQUE:"); 
 6594              		.loc 1 1616 0
 6595 1b24 40F20002 		movw	r2, #:lower16:slegenda
 6596 1b28 C0F20002 		movt	r2, #:upper16:slegenda
 6597 1b2c 40F20003 		movw	r3, #:lower16:.LC329
 6598 1b30 C0F20003 		movt	r3, #:upper16:.LC329
 6599 1b34 1446     		mov	r4, r2
 6600 1b36 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 6601 1b38 07C4     		stmia	r4!, {r0, r1, r2}
 6602 1b3a 2370     		strb	r3, [r4, #0]
1617:.\console.c   **** 					print_abs_linear_hystogram((int16)tilt_axis.mc.ctrl_var, MOTOR_PWM_PERIOD_HALF, 50, &slegenda[
 6603              		.loc 1 1617 0
 6604 1b3c 40F20003 		movw	r3, #:lower16:tilt_axis
 6605 1b40 C0F20003 		movt	r3, #:upper16:tilt_axis
 6606 1b44 1B6F     		ldr	r3, [r3, #112]	@ float
 6607 1b46 1846     		mov	r0, r3
 6608 1b48 FFF7FEFF 		bl	__aeabi_f2iz
 6609 1b4c 0346     		mov	r3, r0
 6610 1b4e 9BB2     		uxth	r3, r3
 6611 1b50 1BB2     		sxth	r3, r3
 6612 1b52 1846     		mov	r0, r3
 6613 1b54 4FF40071 		mov	r1, #512
 6614 1b58 4FF03202 		mov	r2, #50
 6615 1b5c 40F20003 		movw	r3, #:lower16:slegenda
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 193


 6616 1b60 C0F20003 		movt	r3, #:upper16:slegenda
 6617 1b64 FFF7FEFF 		bl	print_abs_linear_hystogram
1618:.\console.c   **** 					print_hystogram_border(50, &slegenda[0]); 		
 6618              		.loc 1 1618 0
 6619 1b68 4FF03200 		mov	r0, #50
 6620 1b6c 40F20001 		movw	r1, #:lower16:slegenda
 6621 1b70 C0F20001 		movt	r1, #:upper16:slegenda
 6622 1b74 FFF7FEFF 		bl	print_hystogram_border
1619:.\console.c   **** 					
1620:.\console.c   **** 					printf("\r\n");
 6623              		.loc 1 1620 0
 6624 1b78 40F20000 		movw	r0, #:lower16:.LC42
 6625 1b7c C0F20000 		movt	r0, #:upper16:.LC42
 6626 1b80 FFF7FEFF 		bl	puts
1621:.\console.c   **** 					printf("MACHINE\r\n");
 6627              		.loc 1 1621 0
 6628 1b84 40F20000 		movw	r0, #:lower16:.LC330
 6629 1b88 C0F20000 		movt	r0, #:upper16:.LC330
 6630 1b8c FFF7FEFF 		bl	puts
1622:.\console.c   **** 					printf("-------\r\n");					
 6631              		.loc 1 1622 0
 6632 1b90 40F20000 		movw	r0, #:lower16:.LC331
 6633 1b94 C0F20000 		movt	r0, #:upper16:.LC331
 6634 1b98 FFF7FEFF 		bl	puts
1623:.\console.c   **** 					printf("Power Status =");
 6635              		.loc 1 1623 0
 6636 1b9c 40F20000 		movw	r0, #:lower16:.LC332
 6637 1ba0 C0F20000 		movt	r0, #:upper16:.LC332
 6638 1ba4 FFF7FEFF 		bl	printf
1624:.\console.c   **** 					if (machine_state == GOBEE_DEENERGIZED)
 6639              		.loc 1 1624 0
 6640 1ba8 40F20003 		movw	r3, #:lower16:machine_state
 6641 1bac C0F20003 		movt	r3, #:upper16:machine_state
 6642 1bb0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6643 1bb2 062B     		cmp	r3, #6
 6644 1bb4 06D1     		bne	.L228
1625:.\console.c   **** 					{
1626:.\console.c   **** 						printf(" Global DEENERGIZED\r\n");	/* Motor Control Power Global Deenergized */				
 6645              		.loc 1 1626 0
 6646 1bb6 40F20000 		movw	r0, #:lower16:.LC333
 6647 1bba C0F20000 		movt	r0, #:upper16:.LC333
 6648 1bbe FFF7FEFF 		bl	puts
 6649 1bc2 13E0     		b	.L229
 6650              	.L228:
1627:.\console.c   **** 					}		
1628:.\console.c   **** 					else if (machine_state == GOBEE_ENERGIZED)
 6651              		.loc 1 1628 0
 6652 1bc4 40F20003 		movw	r3, #:lower16:machine_state
 6653 1bc8 C0F20003 		movt	r3, #:upper16:machine_state
 6654 1bcc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6655 1bce 052B     		cmp	r3, #5
 6656 1bd0 06D1     		bne	.L230
1629:.\console.c   **** 					{
1630:.\console.c   **** 						printf(" Global ENERGIZED!\r\n");	/* Motor Control Power Global Energized */		
 6657              		.loc 1 1630 0
 6658 1bd2 40F20000 		movw	r0, #:lower16:.LC334
 6659 1bd6 C0F20000 		movt	r0, #:upper16:.LC334
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 194


 6660 1bda FFF7FEFF 		bl	puts
 6661 1bde 05E0     		b	.L229
 6662              	.L230:
1631:.\console.c   **** 					}			
1632:.\console.c   **** 					else
1633:.\console.c   **** 					{
1634:.\console.c   **** 						printf(" DANGER!!! INTERNAL FIRMWARE FAULT\r\n");	/* Firmware Fault */		
 6663              		.loc 1 1634 0
 6664 1be0 40F20000 		movw	r0, #:lower16:.LC335
 6665 1be4 C0F20000 		movt	r0, #:upper16:.LC335
 6666 1be8 FFF7FEFF 		bl	puts
 6667              	.L229:
1635:.\console.c   **** 					}	
1636:.\console.c   **** 					printf("ctrl isr counters START=%5i STOP=%5i  \r\n", (uint16)isr_START_check_counter,(uint16)i
 6668              		.loc 1 1636 0
 6669 1bec 40F20003 		movw	r3, #:lower16:isr_START_check_counter
 6670 1bf0 C0F20003 		movt	r3, #:upper16:isr_START_check_counter
 6671 1bf4 1B88     		ldrh	r3, [r3, #0]
 6672 1bf6 1A46     		mov	r2, r3
 6673 1bf8 40F20003 		movw	r3, #:lower16:isr_STOP_check_counter
 6674 1bfc C0F20003 		movt	r3, #:upper16:isr_STOP_check_counter
 6675 1c00 1B88     		ldrh	r3, [r3, #0]
 6676 1c02 40F20000 		movw	r0, #:lower16:.LC336
 6677 1c06 C0F20000 		movt	r0, #:upper16:.LC336
 6678 1c0a 1146     		mov	r1, r2
 6679 1c0c 1A46     		mov	r2, r3
 6680 1c0e FFF7FEFF 		bl	printf
1637:.\console.c   **** 	
1638:.\console.c   **** 					printf("\r\n");						
 6681              		.loc 1 1638 0
 6682 1c12 40F20000 		movw	r0, #:lower16:.LC42
 6683 1c16 C0F20000 		movt	r0, #:upper16:.LC42
 6684 1c1a FFF7FEFF 		bl	puts
1639:.\console.c   **** 					CyDelay(50);
 6685              		.loc 1 1639 0
 6686 1c1e 4FF03200 		mov	r0, #50
 6687 1c22 FFF7FEFF 		bl	CyDelay
 6688              	.L227:
1536:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6689              		.loc 1 1536 0 discriminator 1
 6690 1c26 FFF7FEFF 		bl	AnyButtonPressed
 6691 1c2a 0346     		mov	r3, r0
 6692 1c2c 002B     		cmp	r3, #0
 6693 1c2e 3FF43FAD 		beq	.L231
1640:.\console.c   **** 				}
1641:.\console.c   **** 				printf("\r\n");	
 6694              		.loc 1 1641 0
 6695 1c32 40F20000 		movw	r0, #:lower16:.LC42
 6696 1c36 C0F20000 		movt	r0, #:upper16:.LC42
 6697 1c3a FFF7FEFF 		bl	puts
1642:.\console.c   **** 				goto exitpars;	
 6698              		.loc 1 1642 0
 6699 1c3e 05F037B9 		b	.L131
 6700              	.L226:
1643:.\console.c   **** 			}
1644:.\console.c   **** 			// SHOW CONTROL END
1645:.\console.c   **** 			
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 195


1646:.\console.c   **** 			
1647:.\console.c   **** 			// SHOW ANALOG INPUTS
1648:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "analogs") == 0)	
 6701              		.loc 1 1648 0
 6702 1c42 C548     		ldr	r0, .L718+8
 6703 1c44 40F20001 		movw	r1, #:lower16:.LC337
 6704 1c48 C0F20001 		movt	r1, #:upper16:.LC337
 6705 1c4c FFF7FEFF 		bl	strcmp
 6706 1c50 0346     		mov	r3, r0
 6707 1c52 002B     		cmp	r3, #0
 6708 1c54 00F08C80 		beq	.L686
1649:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ana") == 0))
 6709              		.loc 1 1649 0
 6710 1c58 BF48     		ldr	r0, .L718+8
 6711 1c5a 40F20001 		movw	r1, #:lower16:.LC338
 6712 1c5e C0F20001 		movt	r1, #:upper16:.LC338
 6713 1c62 FFF7FEFF 		bl	strcmp
 6714 1c66 0346     		mov	r3, r0
 6715 1c68 002B     		cmp	r3, #0
 6716 1c6a 40F08A80 		bne	.L233
1650:.\console.c   **** 			{
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6717              		.loc 1 1651 0
 6718 1c6e 7FE0     		b	.L686
 6719              	.L235:
1652:.\console.c   **** 				{			
1653:.\console.c   **** 					printf("I_P=%5d",     (int16)AdcValue[SENSE_IPAN]);
 6720              		.loc 1 1653 0
 6721 1c70 40F20003 		movw	r3, #:lower16:AdcValue
 6722 1c74 C0F20003 		movt	r3, #:upper16:AdcValue
 6723 1c78 1B88     		ldrh	r3, [r3, #0]
 6724 1c7a 1BB2     		sxth	r3, r3
 6725 1c7c 40F20000 		movw	r0, #:lower16:.LC339
 6726 1c80 C0F20000 		movt	r0, #:upper16:.LC339
 6727 1c84 1946     		mov	r1, r3
 6728 1c86 FFF7FEFF 		bl	printf
1654:.\console.c   **** 					printf(" I_T=%5d", (int16)AdcValue[SENSE_ITILT]);					
 6729              		.loc 1 1654 0
 6730 1c8a 40F20003 		movw	r3, #:lower16:AdcValue
 6731 1c8e C0F20003 		movt	r3, #:upper16:AdcValue
 6732 1c92 5B88     		ldrh	r3, [r3, #2]
 6733 1c94 1BB2     		sxth	r3, r3
 6734 1c96 40F20000 		movw	r0, #:lower16:.LC340
 6735 1c9a C0F20000 		movt	r0, #:upper16:.LC340
 6736 1c9e 1946     		mov	r1, r3
 6737 1ca0 FFF7FEFF 		bl	printf
1655:.\console.c   **** 					printf(" Vcc=%5d",    (int16)AdcValue[SENSE_VCC]);
 6738              		.loc 1 1655 0
 6739 1ca4 40F20003 		movw	r3, #:lower16:AdcValue
 6740 1ca8 C0F20003 		movt	r3, #:upper16:AdcValue
 6741 1cac 9B88     		ldrh	r3, [r3, #4]
 6742 1cae 1BB2     		sxth	r3, r3
 6743 1cb0 40F20000 		movw	r0, #:lower16:.LC341
 6744 1cb4 C0F20000 		movt	r0, #:upper16:.LC341
 6745 1cb8 1946     		mov	r1, r3
 6746 1cba FFF7FEFF 		bl	printf
1656:.\console.c   **** 					printf(" Ax=%5d",     (int16)AdcValue[ADXL_X]);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 196


 6747              		.loc 1 1656 0
 6748 1cbe 40F20003 		movw	r3, #:lower16:AdcValue
 6749 1cc2 C0F20003 		movt	r3, #:upper16:AdcValue
 6750 1cc6 DB88     		ldrh	r3, [r3, #6]
 6751 1cc8 1BB2     		sxth	r3, r3
 6752 1cca 40F20000 		movw	r0, #:lower16:.LC342
 6753 1cce C0F20000 		movt	r0, #:upper16:.LC342
 6754 1cd2 1946     		mov	r1, r3
 6755 1cd4 FFF7FEFF 		bl	printf
1657:.\console.c   **** 					printf(" Ay=%5d",     (int16)AdcValue[ADXL_Y]);
 6756              		.loc 1 1657 0
 6757 1cd8 40F20003 		movw	r3, #:lower16:AdcValue
 6758 1cdc C0F20003 		movt	r3, #:upper16:AdcValue
 6759 1ce0 1B89     		ldrh	r3, [r3, #8]
 6760 1ce2 1BB2     		sxth	r3, r3
 6761 1ce4 40F20000 		movw	r0, #:lower16:.LC343
 6762 1ce8 C0F20000 		movt	r0, #:upper16:.LC343
 6763 1cec 1946     		mov	r1, r3
 6764 1cee FFF7FEFF 		bl	printf
1658:.\console.c   **** 					printf(" Az=%5d",     (int16)AdcValue[ADXL_Z]);
 6765              		.loc 1 1658 0
 6766 1cf2 40F20003 		movw	r3, #:lower16:AdcValue
 6767 1cf6 C0F20003 		movt	r3, #:upper16:AdcValue
 6768 1cfa 5B89     		ldrh	r3, [r3, #10]
 6769 1cfc 1BB2     		sxth	r3, r3
 6770 1cfe 40F20000 		movw	r0, #:lower16:.LC344
 6771 1d02 C0F20000 		movt	r0, #:upper16:.LC344
 6772 1d06 1946     		mov	r1, r3
 6773 1d08 FFF7FEFF 		bl	printf
1659:.\console.c   **** 					printf(" ABS_P=%5d",     (int16)AdcValue[HOME_PAN_ABSV]);
 6774              		.loc 1 1659 0
 6775 1d0c 40F20003 		movw	r3, #:lower16:AdcValue
 6776 1d10 C0F20003 		movt	r3, #:upper16:AdcValue
 6777 1d14 9B89     		ldrh	r3, [r3, #12]
 6778 1d16 1BB2     		sxth	r3, r3
 6779 1d18 40F20000 		movw	r0, #:lower16:.LC345
 6780 1d1c C0F20000 		movt	r0, #:upper16:.LC345
 6781 1d20 1946     		mov	r1, r3
 6782 1d22 FFF7FEFF 		bl	printf
1660:.\console.c   **** 					printf(" ABS_T=%5d",     (int16)AdcValue[HOME_TILT_ABSV]);
 6783              		.loc 1 1660 0
 6784 1d26 40F20003 		movw	r3, #:lower16:AdcValue
 6785 1d2a C0F20003 		movt	r3, #:upper16:AdcValue
 6786 1d2e DB89     		ldrh	r3, [r3, #14]
 6787 1d30 1BB2     		sxth	r3, r3
 6788 1d32 40F20000 		movw	r0, #:lower16:.LC346
 6789 1d36 C0F20000 		movt	r0, #:upper16:.LC346
 6790 1d3a 1946     		mov	r1, r3
 6791 1d3c FFF7FEFF 		bl	printf
1661:.\console.c   **** 					printf(" astim=%5d",     (int16)AdcValue[CTRL_IN_ASTIM]);
 6792              		.loc 1 1661 0
 6793 1d40 40F20003 		movw	r3, #:lower16:AdcValue
 6794 1d44 C0F20003 		movt	r3, #:upper16:AdcValue
 6795 1d48 1B8A     		ldrh	r3, [r3, #16]
 6796 1d4a 1BB2     		sxth	r3, r3
 6797 1d4c 40F20000 		movw	r0, #:lower16:.LC347
 6798 1d50 C0F20000 		movt	r0, #:upper16:.LC347
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 197


 6799 1d54 1946     		mov	r1, r3
 6800 1d56 FFF7FEFF 		bl	printf
1662:.\console.c   **** 					
1663:.\console.c   **** 					printf("\r\n");	
 6801              		.loc 1 1663 0
 6802 1d5a 40F20000 		movw	r0, #:lower16:.LC42
 6803 1d5e C0F20000 		movt	r0, #:upper16:.LC42
 6804 1d62 FFF7FEFF 		bl	puts
1664:.\console.c   **** 					CyDelay(50);
 6805              		.loc 1 1664 0
 6806 1d66 4FF03200 		mov	r0, #50
 6807 1d6a FFF7FEFF 		bl	CyDelay
 6808 1d6e 00E0     		b	.L234
 6809              	.L686:
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6810              		.loc 1 1651 0
 6811 1d70 00BF     		nop
 6812              	.L234:
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6813              		.loc 1 1651 0 is_stmt 0 discriminator 1
 6814 1d72 FFF7FEFF 		bl	AnyButtonPressed
 6815 1d76 0346     		mov	r3, r0
 6816 1d78 002B     		cmp	r3, #0
 6817 1d7a 3FF479AF 		beq	.L235
1665:.\console.c   **** 				}
1666:.\console.c   **** 				goto exitpars;	
 6818              		.loc 1 1666 0 is_stmt 1
 6819 1d7e 05F097B8 		b	.L131
 6820              	.L233:
1667:.\console.c   **** 			}
1668:.\console.c   **** 			// END SHOW ANALOG INPUTS
1669:.\console.c   **** 
1670:.\console.c   **** 			
1671:.\console.c   **** 			// SHOW VCC
1672:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "vcc") == 0)	
 6821              		.loc 1 1672 0
 6822 1d82 7548     		ldr	r0, .L718+8
 6823 1d84 40F20001 		movw	r1, #:lower16:.LC348
 6824 1d88 C0F20001 		movt	r1, #:upper16:.LC348
 6825 1d8c FFF7FEFF 		bl	strcmp
 6826 1d90 0346     		mov	r3, r0
 6827 1d92 002B     		cmp	r3, #0
 6828 1d94 35D1     		bne	.L236
1673:.\console.c   **** 			{
1674:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6829              		.loc 1 1674 0
 6830 1d96 2DE0     		b	.L237
 6831              	.L238:
1675:.\console.c   **** 				{
1676:.\console.c   **** 					// ADC_Count = VCC[V] * 5k/55k * (1+100/1000) * ADC_MAX_UNSGN/5  (14 bit resolution)
1677:.\console.c   **** 					// VCC[V] = ADC_Count * 50/ADC_MAX_UNSGN
1678:.\console.c   **** 					printf("VCC = %3.1f [V]\r\n", (float)AdcValue[SENSE_VCC]*5.0/ADC_MAX_COUNTS);
 6832              		.loc 1 1678 0
 6833 1d98 40F20003 		movw	r3, #:lower16:AdcValue
 6834 1d9c C0F20003 		movt	r3, #:upper16:AdcValue
 6835 1da0 9B88     		ldrh	r3, [r3, #4]
 6836 1da2 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 198


 6837 1da4 1846     		mov	r0, r3
 6838 1da6 FFF7FEFF 		bl	__aeabi_i2f
 6839 1daa 0346     		mov	r3, r0
 6840 1dac 1846     		mov	r0, r3
 6841 1dae FFF7FEFF 		bl	__aeabi_f2d
 6842 1db2 0246     		mov	r2, r0
 6843 1db4 0B46     		mov	r3, r1
 6844 1db6 1046     		mov	r0, r2
 6845 1db8 1946     		mov	r1, r3
 6846 1dba 4FF00002 		mov	r2, #0
 6847 1dbe 4FF00003 		mov	r3, #0
 6848 1dc2 C4F21403 		movt	r3, 16404
 6849 1dc6 FFF7FEFF 		bl	__aeabi_dmul
 6850 1dca 0246     		mov	r2, r0
 6851 1dcc 0B46     		mov	r3, r1
 6852 1dce 1046     		mov	r0, r2
 6853 1dd0 1946     		mov	r1, r3
 6854 1dd2 5FA3     		adr	r3, .L718
 6855 1dd4 D3E90023 		ldrd	r2, [r3]
 6856 1dd8 FFF7FEFF 		bl	__aeabi_ddiv
 6857 1ddc 0246     		mov	r2, r0
 6858 1dde 0B46     		mov	r3, r1
 6859 1de0 40F20000 		movw	r0, #:lower16:.LC349
 6860 1de4 C0F20000 		movt	r0, #:upper16:.LC349
 6861 1de8 FFF7FEFF 		bl	printf
1679:.\console.c   **** 					CyDelay(100);
 6862              		.loc 1 1679 0
 6863 1dec 4FF06400 		mov	r0, #100
 6864 1df0 FFF7FEFF 		bl	CyDelay
 6865              	.L237:
1674:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6866              		.loc 1 1674 0 discriminator 1
 6867 1df4 FFF7FEFF 		bl	AnyButtonPressed
 6868 1df8 0346     		mov	r3, r0
 6869 1dfa 002B     		cmp	r3, #0
 6870 1dfc CCD0     		beq	.L238
1680:.\console.c   **** 				}
1681:.\console.c   **** 				goto exitpars;	
 6871              		.loc 1 1681 0
 6872 1dfe 05F057B8 		b	.L131
 6873              	.L236:
1682:.\console.c   **** 			}
1683:.\console.c   **** 			// END SHOW VCC
1684:.\console.c   **** 			
1685:.\console.c   **** 			// SHOW CURRENT
1686:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "current") == 0) ||
 6874              		.loc 1 1686 0
 6875 1e02 5548     		ldr	r0, .L718+8
 6876 1e04 40F20001 		movw	r1, #:lower16:.LC350
 6877 1e08 C0F20001 		movt	r1, #:upper16:.LC350
 6878 1e0c FFF7FEFF 		bl	strcmp
 6879 1e10 0346     		mov	r3, r0
 6880 1e12 002B     		cmp	r3, #0
 6881 1e14 65D0     		beq	.L687
1687:.\console.c   **** 				(strcmp(actual_cmd.parameter, "i") == 0))
 6882              		.loc 1 1687 0 discriminator 1
 6883 1e16 5048     		ldr	r0, .L718+8
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 199


 6884 1e18 40F20001 		movw	r1, #:lower16:.LC351
 6885 1e1c C0F20001 		movt	r1, #:upper16:.LC351
 6886 1e20 FFF7FEFF 		bl	strcmp
 6887 1e24 0346     		mov	r3, r0
1686:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "current") == 0) ||
 6888              		.loc 1 1686 0 discriminator 1
 6889 1e26 002B     		cmp	r3, #0
 6890 1e28 63D1     		bne	.L240
1688:.\console.c   **** 			{
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6891              		.loc 1 1689 0
 6892 1e2a 5AE0     		b	.L687
 6893              	.L246:
1690:.\console.c   **** 				{					
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
1692:.\console.c   **** 							(float)pan_axis.mc.current,
 6894              		.loc 1 1692 0
 6895 1e2c 40F20003 		movw	r3, #:lower16:pan_axis
 6896 1e30 C0F20003 		movt	r3, #:upper16:pan_axis
 6897 1e34 9B6F     		ldr	r3, [r3, #120]	@ float
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
 6898              		.loc 1 1691 0
 6899 1e36 1846     		mov	r0, r3
 6900 1e38 FFF7FEFF 		bl	__aeabi_f2d
 6901 1e3c 0446     		mov	r4, r0
 6902 1e3e 0D46     		mov	r5, r1
1693:.\console.c   **** 							(float)tilt_axis.mc.current);
 6903              		.loc 1 1693 0
 6904 1e40 40F20003 		movw	r3, #:lower16:tilt_axis
 6905 1e44 C0F20003 		movt	r3, #:upper16:tilt_axis
 6906 1e48 9B6F     		ldr	r3, [r3, #120]	@ float
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
 6907              		.loc 1 1691 0
 6908 1e4a 1846     		mov	r0, r3
 6909 1e4c FFF7FEFF 		bl	__aeabi_f2d
 6910 1e50 0246     		mov	r2, r0
 6911 1e52 0B46     		mov	r3, r1
 6912 1e54 CDE90023 		strd	r2, [sp]
 6913 1e58 40F20000 		movw	r0, #:lower16:.LC352
 6914 1e5c C0F20000 		movt	r0, #:upper16:.LC352
 6915 1e60 2246     		mov	r2, r4
 6916 1e62 2B46     		mov	r3, r5
 6917 1e64 FFF7FEFF 		bl	printf
1694:.\console.c   **** 					
1695:.\console.c   **** 					printf("     Drive Status=%2u ", (int16)Status_Reg_MOTORS_Read());
 6918              		.loc 1 1695 0
 6919 1e68 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 6920 1e6c 0346     		mov	r3, r0
 6921 1e6e 40F20000 		movw	r0, #:lower16:.LC353
 6922 1e72 C0F20000 		movt	r0, #:upper16:.LC353
 6923 1e76 1946     		mov	r1, r3
 6924 1e78 FFF7FEFF 		bl	printf
1696:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_PAN_MOT_FL) == 0)
 6925              		.loc 1 1696 0
 6926 1e7c FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 6927 1e80 0346     		mov	r3, r0
 6928 1e82 03F00103 		and	r3, r3, #1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 200


 6929 1e86 002B     		cmp	r3, #0
 6930 1e88 06D1     		bne	.L242
1697:.\console.c   **** 					{
1698:.\console.c   **** 						printf("(i(t)_PAN PEAK!) ");	
 6931              		.loc 1 1698 0
 6932 1e8a 40F20000 		movw	r0, #:lower16:.LC354
 6933 1e8e C0F20000 		movt	r0, #:upper16:.LC354
 6934 1e92 FFF7FEFF 		bl	printf
 6935 1e96 05E0     		b	.L243
 6936              	.L242:
1699:.\console.c   **** 					}
1700:.\console.c   **** 					else
1701:.\console.c   **** 					{
1702:.\console.c   **** 						printf("(i(t)_PAN OK!)  ");						
 6937              		.loc 1 1702 0
 6938 1e98 40F20000 		movw	r0, #:lower16:.LC355
 6939 1e9c C0F20000 		movt	r0, #:upper16:.LC355
 6940 1ea0 FFF7FEFF 		bl	printf
 6941              	.L243:
1703:.\console.c   **** 					}
1704:.\console.c   **** 					
1705:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_TILT_MOT_FL) == 0)
 6942              		.loc 1 1705 0
 6943 1ea4 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 6944 1ea8 0346     		mov	r3, r0
 6945 1eaa 03F00203 		and	r3, r3, #2
 6946 1eae 002B     		cmp	r3, #0
 6947 1eb0 06D1     		bne	.L244
1706:.\console.c   **** 					{
1707:.\console.c   **** 						printf("(i(t)_TILT PEAK!)");	
 6948              		.loc 1 1707 0
 6949 1eb2 40F20000 		movw	r0, #:lower16:.LC356
 6950 1eb6 C0F20000 		movt	r0, #:upper16:.LC356
 6951 1eba FFF7FEFF 		bl	printf
 6952 1ebe 05E0     		b	.L245
 6953              	.L244:
1708:.\console.c   **** 					}
1709:.\console.c   **** 					else
1710:.\console.c   **** 					{
1711:.\console.c   **** 						printf("(i(t)_TILT OK!)");						
 6954              		.loc 1 1711 0
 6955 1ec0 40F20000 		movw	r0, #:lower16:.LC357
 6956 1ec4 C0F20000 		movt	r0, #:upper16:.LC357
 6957 1ec8 FFF7FEFF 		bl	printf
 6958              	.L245:
1712:.\console.c   **** 					}	
1713:.\console.c   **** 					CyDelay(100);
 6959              		.loc 1 1713 0
 6960 1ecc 4FF06400 		mov	r0, #100
 6961 1ed0 FFF7FEFF 		bl	CyDelay
1714:.\console.c   **** 					printf("\r\n");
 6962              		.loc 1 1714 0
 6963 1ed4 40F20000 		movw	r0, #:lower16:.LC42
 6964 1ed8 C0F20000 		movt	r0, #:upper16:.LC42
 6965 1edc FFF7FEFF 		bl	puts
 6966 1ee0 00E0     		b	.L241
 6967              	.L687:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 201


1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6968              		.loc 1 1689 0
 6969 1ee2 00BF     		nop
 6970              	.L241:
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6971              		.loc 1 1689 0 is_stmt 0 discriminator 1
 6972 1ee4 FFF7FEFF 		bl	AnyButtonPressed
 6973 1ee8 0346     		mov	r3, r0
 6974 1eea 002B     		cmp	r3, #0
 6975 1eec 9ED0     		beq	.L246
1715:.\console.c   **** 				}
1716:.\console.c   **** 				goto exitpars;	
 6976              		.loc 1 1716 0 is_stmt 1
 6977 1eee 04F0DFBF 		b	.L131
 6978              	.L240:
1717:.\console.c   **** 			}
1718:.\console.c   **** 			// END SHOW CURRENT
1719:.\console.c   **** 
1720:.\console.c   **** 			
1721:.\console.c   **** 			// SHOW PAN MOTOR TORQUE STATISTICS
1722:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmtorque") == 0) ||
 6979              		.loc 1 1722 0
 6980 1ef2 1948     		ldr	r0, .L718+8
 6981 1ef4 40F20001 		movw	r1, #:lower16:.LC358
 6982 1ef8 C0F20001 		movt	r1, #:upper16:.LC358
 6983 1efc FFF7FEFF 		bl	strcmp
 6984 1f00 0346     		mov	r3, r0
 6985 1f02 002B     		cmp	r3, #0
 6986 1f04 0AD0     		beq	.L247
1723:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pmt") == 0))
 6987              		.loc 1 1723 0 discriminator 1
 6988 1f06 1448     		ldr	r0, .L718+8
 6989 1f08 40F20001 		movw	r1, #:lower16:.LC359
 6990 1f0c C0F20001 		movt	r1, #:upper16:.LC359
 6991 1f10 FFF7FEFF 		bl	strcmp
 6992 1f14 0346     		mov	r3, r0
1722:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmtorque") == 0) ||
 6993              		.loc 1 1722 0 discriminator 1
 6994 1f16 002B     		cmp	r3, #0
 6995 1f18 40F0CB80 		bne	.L248
 6996              	.L247:
1724:.\console.c   **** 			{
1725:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 6997              		.loc 1 1725 0
 6998 1f1c FFF7FEFF 		bl	isr_TORQUESTAT_Start
1726:.\console.c   **** 				
1727:.\console.c   **** 				current_statistics_start(&pan_current_stat);		/* start Pan current  statistics			*/
 6999              		.loc 1 1727 0
 7000 1f20 40F20000 		movw	r0, #:lower16:pan_current_stat
 7001 1f24 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7002 1f28 FFF7FEFF 		bl	current_statistics_start
1728:.\console.c   **** 				Battery_Energy_Integral_Reset(&pan_torque_stat);	/* Battery Energy Integral Reset 			*/
 7003              		.loc 1 1728 0
 7004 1f2c 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7005 1f30 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7006 1f34 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1729:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 202


1730:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7007              		.loc 1 1730 0
 7008 1f38 40F20000 		movw	r0, #:lower16:.LC360
 7009 1f3c C0F20000 		movt	r0, #:upper16:.LC360
 7010 1f40 FFF7FEFF 		bl	puts
1731:.\console.c   **** 				CyDelay(500);
 7011              		.loc 1 1731 0
 7012 1f44 4FF4FA70 		mov	r0, #500
 7013 1f48 FFF7FEFF 		bl	CyDelay
1732:.\console.c   **** 				
1733:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7014              		.loc 1 1733 0
 7015 1f4c 74E0     		b	.L249
 7016              	.L719:
 7017 1f4e 00BF     		.align	3
 7018              	.L718:
 7019 1f50 00000000 		.word	0
 7020 1f54 00FEAF40 		.word	1085275648
 7021 1f58 0F000000 		.word	actual_cmd+15
 7022              	.L250:
1734:.\console.c   **** 				{
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
1736:.\console.c   **** 							(float)i_t(&pan_torque_stat),
 7023              		.loc 1 1736 0
 7024 1f5c 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7025 1f60 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7026 1f64 FFF7FEFF 		bl	i_t
 7027 1f68 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7028              		.loc 1 1735 0
 7029 1f6a 1846     		mov	r0, r3
 7030 1f6c FFF7FEFF 		bl	__aeabi_f2d
 7031 1f70 0446     		mov	r4, r0
 7032 1f72 0D46     		mov	r5, r1
1737:.\console.c   **** 							(float)i_noload(),
 7033              		.loc 1 1737 0
 7034 1f74 FFF7FEFF 		bl	i_noload
 7035 1f78 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7036              		.loc 1 1735 0
 7037 1f7a 1846     		mov	r0, r3
 7038 1f7c FFF7FEFF 		bl	__aeabi_f2d
 7039 1f80 C7E90401 		strd	r0, [r7, #16]
1738:.\console.c   **** 							(float)TMOT_t(&pan_torque_stat),							
 7040              		.loc 1 1738 0
 7041 1f84 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7042 1f88 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7043 1f8c FFF7FEFF 		bl	TMOT_t
 7044 1f90 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7045              		.loc 1 1735 0
 7046 1f92 1846     		mov	r0, r3
 7047 1f94 FFF7FEFF 		bl	__aeabi_f2d
 7048 1f98 C7E90201 		strd	r0, [r7, #8]
1739:.\console.c   **** 							(float)i_max(&pan_current_stat),
 7049              		.loc 1 1739 0
 7050 1f9c 40F20000 		movw	r0, #:lower16:pan_current_stat
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 203


 7051 1fa0 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7052 1fa4 FFF7FEFF 		bl	i_max
 7053 1fa8 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7054              		.loc 1 1735 0
 7055 1faa 1846     		mov	r0, r3
 7056 1fac FFF7FEFF 		bl	__aeabi_f2d
 7057 1fb0 C7E90001 		strd	r0, [r7]
1740:.\console.c   **** 							(float)TMOT_max(&pan_current_stat),
 7058              		.loc 1 1740 0
 7059 1fb4 40F20000 		movw	r0, #:lower16:pan_current_stat
 7060 1fb8 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7061 1fbc FFF7FEFF 		bl	TMOT_max
 7062 1fc0 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7063              		.loc 1 1735 0
 7064 1fc2 1846     		mov	r0, r3
 7065 1fc4 FFF7FEFF 		bl	__aeabi_f2d
 7066 1fc8 8246     		mov	sl, r0
 7067 1fca 8B46     		mov	fp, r1
1741:.\console.c   **** 							(float)i_mean(&pan_current_stat),
 7068              		.loc 1 1741 0
 7069 1fcc 40F20000 		movw	r0, #:lower16:pan_current_stat
 7070 1fd0 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7071 1fd4 FFF7FEFF 		bl	i_mean
 7072 1fd8 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7073              		.loc 1 1735 0
 7074 1fda 1846     		mov	r0, r3
 7075 1fdc FFF7FEFF 		bl	__aeabi_f2d
 7076 1fe0 8046     		mov	r8, r0
 7077 1fe2 8946     		mov	r9, r1
1742:.\console.c   **** 							(float)TMOT_mean(&pan_current_stat));
 7078              		.loc 1 1742 0
 7079 1fe4 40F20000 		movw	r0, #:lower16:pan_current_stat
 7080 1fe8 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7081 1fec FFF7FEFF 		bl	TMOT_mean
 7082 1ff0 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7083              		.loc 1 1735 0
 7084 1ff2 1846     		mov	r0, r3
 7085 1ff4 FFF7FEFF 		bl	__aeabi_f2d
 7086 1ff8 0246     		mov	r2, r0
 7087 1ffa 0B46     		mov	r3, r1
 7088 1ffc D7E90401 		ldrd	r0, [r7, #16]
 7089 2000 CDE90001 		strd	r0, [sp]
 7090 2004 D7E90201 		ldrd	r0, [r7, #8]
 7091 2008 CDE90201 		strd	r0, [sp, #8]
 7092 200c D7E90001 		ldrd	r0, [r7]
 7093 2010 CDE90401 		strd	r0, [sp, #16]
 7094 2014 CDE906AB 		strd	sl, [sp, #24]
 7095 2018 CDE90889 		strd	r8, [sp, #32]
 7096 201c CDE90A23 		strd	r2, [sp, #40]
 7097 2020 40F20000 		movw	r0, #:lower16:.LC361
 7098 2024 C0F20000 		movt	r0, #:upper16:.LC361
 7099 2028 2246     		mov	r2, r4
 7100 202a 2B46     		mov	r3, r5
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 204


 7101 202c FFF7FEFF 		bl	printf
1743:.\console.c   **** 					
1744:.\console.c   **** 					CyDelay(30);
 7102              		.loc 1 1744 0
 7103 2030 4FF01E00 		mov	r0, #30
 7104 2034 FFF7FEFF 		bl	CyDelay
 7105              	.L249:
1733:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7106              		.loc 1 1733 0 discriminator 1
 7107 2038 FFF7FEFF 		bl	AnyButtonPressed
 7108 203c 0346     		mov	r3, r0
 7109 203e 002B     		cmp	r3, #0
 7110 2040 8CD0     		beq	.L250
1745:.\console.c   **** 				}
1746:.\console.c   **** 				current_statistics_stop(&pan_current_stat);		/* stop Pan current  statistics			*/
 7111              		.loc 1 1746 0
 7112 2042 40F20000 		movw	r0, #:lower16:pan_current_stat
 7113 2046 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7114 204a FFF7FEFF 		bl	current_statistics_stop
1747:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr			*/
 7115              		.loc 1 1747 0
 7116 204e FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1748:.\console.c   **** 				
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1750:.\console.c   **** 					(float)Battery_Energy(&pan_torque_stat, &pan_current_stat),
 7117              		.loc 1 1750 0
 7118 2052 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7119 2056 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7120 205a 40F20001 		movw	r1, #:lower16:pan_current_stat
 7121 205e C0F20001 		movt	r1, #:upper16:pan_current_stat
 7122 2062 FFF7FEFF 		bl	Battery_Energy
 7123 2066 0346     		mov	r3, r0
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7124              		.loc 1 1749 0
 7125 2068 1846     		mov	r0, r3
 7126 206a FFF7FEFF 		bl	__aeabi_f2d
 7127 206e 0446     		mov	r4, r0
 7128 2070 0D46     		mov	r5, r1
1751:.\console.c   **** 					(float)Battery_Energy_Meter(&pan_torque_stat, &pan_current_stat, 1000));
 7129              		.loc 1 1751 0
 7130 2072 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7131 2076 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7132 207a 40F20001 		movw	r1, #:lower16:pan_current_stat
 7133 207e C0F20001 		movt	r1, #:upper16:pan_current_stat
 7134 2082 4FF00002 		mov	r2, #0
 7135 2086 C4F27A42 		movt	r2, 17530
 7136 208a FFF7FEFF 		bl	Battery_Energy_Meter
 7137 208e 0346     		mov	r3, r0
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7138              		.loc 1 1749 0
 7139 2090 1846     		mov	r0, r3
 7140 2092 FFF7FEFF 		bl	__aeabi_f2d
 7141 2096 0246     		mov	r2, r0
 7142 2098 0B46     		mov	r3, r1
 7143 209a CDE90023 		strd	r2, [sp]
 7144 209e 40F20000 		movw	r0, #:lower16:.LC362
 7145 20a2 C0F20000 		movt	r0, #:upper16:.LC362
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 205


 7146 20a6 2246     		mov	r2, r4
 7147 20a8 2B46     		mov	r3, r5
 7148 20aa FFF7FEFF 		bl	printf
1752:.\console.c   **** 				
1753:.\console.c   **** 				goto exitpars;	
 7149              		.loc 1 1753 0
 7150 20ae 04F0FFBE 		b	.L131
 7151              	.L248:
1754:.\console.c   **** 			}
1755:.\console.c   **** 			// END SHOW PAN MOTOR TORQUE STATISTICS
1756:.\console.c   **** 			
1757:.\console.c   **** 			
1758:.\console.c   **** 			// SHOW TILT MOTOR TORQUE STATISTICS
1759:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmtorque") == 0) ||
 7152              		.loc 1 1759 0
 7153 20b2 8348     		ldr	r0, .L720
 7154 20b4 40F20001 		movw	r1, #:lower16:.LC363
 7155 20b8 C0F20001 		movt	r1, #:upper16:.LC363
 7156 20bc FFF7FEFF 		bl	strcmp
 7157 20c0 0346     		mov	r3, r0
 7158 20c2 002B     		cmp	r3, #0
 7159 20c4 0AD0     		beq	.L251
1760:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tmt") == 0))
 7160              		.loc 1 1760 0 discriminator 1
 7161 20c6 7E48     		ldr	r0, .L720
 7162 20c8 40F20001 		movw	r1, #:lower16:.LC364
 7163 20cc C0F20001 		movt	r1, #:upper16:.LC364
 7164 20d0 FFF7FEFF 		bl	strcmp
 7165 20d4 0346     		mov	r3, r0
1759:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmtorque") == 0) ||
 7166              		.loc 1 1759 0 discriminator 1
 7167 20d6 002B     		cmp	r3, #0
 7168 20d8 40F0C480 		bne	.L252
 7169              	.L251:
1761:.\console.c   **** 			{
1762:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7170              		.loc 1 1762 0
 7171 20dc FFF7FEFF 		bl	isr_TORQUESTAT_Start
1763:.\console.c   **** 				
1764:.\console.c   **** 				current_statistics_start(&tilt_current_stat);		/* start Tilt current  statistics			*/
 7172              		.loc 1 1764 0
 7173 20e0 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7174 20e4 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7175 20e8 FFF7FEFF 		bl	current_statistics_start
1765:.\console.c   **** 				Battery_Energy_Integral_Reset(&tilt_torque_stat);	/* Battery Energy Integral Reset 			*/
 7176              		.loc 1 1765 0
 7177 20ec 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7178 20f0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7179 20f4 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1766:.\console.c   **** 				
1767:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7180              		.loc 1 1767 0
 7181 20f8 40F20000 		movw	r0, #:lower16:.LC365
 7182 20fc C0F20000 		movt	r0, #:upper16:.LC365
 7183 2100 FFF7FEFF 		bl	puts
1768:.\console.c   **** 				CyDelay(500);
 7184              		.loc 1 1768 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 206


 7185 2104 4FF4FA70 		mov	r0, #500
 7186 2108 FFF7FEFF 		bl	CyDelay
1769:.\console.c   **** 				
1770:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7187              		.loc 1 1770 0
 7188 210c 6DE0     		b	.L253
 7189              	.L254:
1771:.\console.c   **** 				{
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
1773:.\console.c   **** 							(float)i_t(&tilt_torque_stat),
 7190              		.loc 1 1773 0
 7191 210e 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7192 2112 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7193 2116 FFF7FEFF 		bl	i_t
 7194 211a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7195              		.loc 1 1772 0
 7196 211c 1846     		mov	r0, r3
 7197 211e FFF7FEFF 		bl	__aeabi_f2d
 7198 2122 0446     		mov	r4, r0
 7199 2124 0D46     		mov	r5, r1
1774:.\console.c   **** 							(float)i_noload(),							
 7200              		.loc 1 1774 0
 7201 2126 FFF7FEFF 		bl	i_noload
 7202 212a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7203              		.loc 1 1772 0
 7204 212c 1846     		mov	r0, r3
 7205 212e FFF7FEFF 		bl	__aeabi_f2d
 7206 2132 C7E90A01 		strd	r0, [r7, #40]
1775:.\console.c   **** 							(float)TMOT_t(&tilt_torque_stat),							
 7207              		.loc 1 1775 0
 7208 2136 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7209 213a C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7210 213e FFF7FEFF 		bl	TMOT_t
 7211 2142 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7212              		.loc 1 1772 0
 7213 2144 1846     		mov	r0, r3
 7214 2146 FFF7FEFF 		bl	__aeabi_f2d
 7215 214a C7E90801 		strd	r0, [r7, #32]
1776:.\console.c   **** 							(float)i_max(&tilt_current_stat),
 7216              		.loc 1 1776 0
 7217 214e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7218 2152 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7219 2156 FFF7FEFF 		bl	i_max
 7220 215a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7221              		.loc 1 1772 0
 7222 215c 1846     		mov	r0, r3
 7223 215e FFF7FEFF 		bl	__aeabi_f2d
 7224 2162 C7E90601 		strd	r0, [r7, #24]
1777:.\console.c   **** 							(float)TMOT_max(&tilt_current_stat),
 7225              		.loc 1 1777 0
 7226 2166 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7227 216a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7228 216e FFF7FEFF 		bl	TMOT_max
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 207


 7229 2172 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7230              		.loc 1 1772 0
 7231 2174 1846     		mov	r0, r3
 7232 2176 FFF7FEFF 		bl	__aeabi_f2d
 7233 217a 8246     		mov	sl, r0
 7234 217c 8B46     		mov	fp, r1
1778:.\console.c   **** 							(float)i_mean(&tilt_current_stat),
 7235              		.loc 1 1778 0
 7236 217e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7237 2182 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7238 2186 FFF7FEFF 		bl	i_mean
 7239 218a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7240              		.loc 1 1772 0
 7241 218c 1846     		mov	r0, r3
 7242 218e FFF7FEFF 		bl	__aeabi_f2d
 7243 2192 8046     		mov	r8, r0
 7244 2194 8946     		mov	r9, r1
1779:.\console.c   **** 							(float)TMOT_mean(&tilt_current_stat));
 7245              		.loc 1 1779 0
 7246 2196 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7247 219a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7248 219e FFF7FEFF 		bl	TMOT_mean
 7249 21a2 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7250              		.loc 1 1772 0
 7251 21a4 1846     		mov	r0, r3
 7252 21a6 FFF7FEFF 		bl	__aeabi_f2d
 7253 21aa 0246     		mov	r2, r0
 7254 21ac 0B46     		mov	r3, r1
 7255 21ae D7E90A01 		ldrd	r0, [r7, #40]
 7256 21b2 CDE90001 		strd	r0, [sp]
 7257 21b6 D7E90801 		ldrd	r0, [r7, #32]
 7258 21ba CDE90201 		strd	r0, [sp, #8]
 7259 21be D7E90601 		ldrd	r0, [r7, #24]
 7260 21c2 CDE90401 		strd	r0, [sp, #16]
 7261 21c6 CDE906AB 		strd	sl, [sp, #24]
 7262 21ca CDE90889 		strd	r8, [sp, #32]
 7263 21ce CDE90A23 		strd	r2, [sp, #40]
 7264 21d2 40F20000 		movw	r0, #:lower16:.LC361
 7265 21d6 C0F20000 		movt	r0, #:upper16:.LC361
 7266 21da 2246     		mov	r2, r4
 7267 21dc 2B46     		mov	r3, r5
 7268 21de FFF7FEFF 		bl	printf
1780:.\console.c   **** 					
1781:.\console.c   **** 					CyDelay(30);
 7269              		.loc 1 1781 0
 7270 21e2 4FF01E00 		mov	r0, #30
 7271 21e6 FFF7FEFF 		bl	CyDelay
 7272              	.L253:
1770:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7273              		.loc 1 1770 0 discriminator 1
 7274 21ea FFF7FEFF 		bl	AnyButtonPressed
 7275 21ee 0346     		mov	r3, r0
 7276 21f0 002B     		cmp	r3, #0
 7277 21f2 8CD0     		beq	.L254
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 208


1782:.\console.c   **** 				}
1783:.\console.c   **** 				current_statistics_stop(&tilt_current_stat);	/* stop Tilt current  statistics			*/				
 7278              		.loc 1 1783 0
 7279 21f4 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7280 21f8 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7281 21fc FFF7FEFF 		bl	current_statistics_stop
1784:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr				*/
 7282              		.loc 1 1784 0
 7283 2200 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1785:.\console.c   **** 				
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1787:.\console.c   **** 					(float)Battery_Energy(&tilt_torque_stat, &tilt_current_stat),
 7284              		.loc 1 1787 0
 7285 2204 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7286 2208 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7287 220c 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7288 2210 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7289 2214 FFF7FEFF 		bl	Battery_Energy
 7290 2218 0346     		mov	r3, r0
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7291              		.loc 1 1786 0
 7292 221a 1846     		mov	r0, r3
 7293 221c FFF7FEFF 		bl	__aeabi_f2d
 7294 2220 0446     		mov	r4, r0
 7295 2222 0D46     		mov	r5, r1
1788:.\console.c   **** 					(float)Battery_Energy_Meter(&tilt_torque_stat, &tilt_current_stat, 1000));
 7296              		.loc 1 1788 0
 7297 2224 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7298 2228 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7299 222c 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7300 2230 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7301 2234 4FF00002 		mov	r2, #0
 7302 2238 C4F27A42 		movt	r2, 17530
 7303 223c FFF7FEFF 		bl	Battery_Energy_Meter
 7304 2240 0346     		mov	r3, r0
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7305              		.loc 1 1786 0
 7306 2242 1846     		mov	r0, r3
 7307 2244 FFF7FEFF 		bl	__aeabi_f2d
 7308 2248 0246     		mov	r2, r0
 7309 224a 0B46     		mov	r3, r1
 7310 224c CDE90023 		strd	r2, [sp]
 7311 2250 40F20000 		movw	r0, #:lower16:.LC362
 7312 2254 C0F20000 		movt	r0, #:upper16:.LC362
 7313 2258 2246     		mov	r2, r4
 7314 225a 2B46     		mov	r3, r5
 7315 225c FFF7FEFF 		bl	printf
1789:.\console.c   **** 				
1790:.\console.c   **** 				goto exitpars;	
 7316              		.loc 1 1790 0
 7317 2260 04F026BE 		b	.L131
 7318              	.L252:
1791:.\console.c   **** 			}
1792:.\console.c   **** 			// END SHOW TILT MOTOR TORQUE STATISTICS
1793:.\console.c   **** 			
1794:.\console.c   **** 			
1795:.\console.c   **** 			// SHOW PAN OUTPUT TORQUE STATISTICS
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 209


1796:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "potorque") == 0) ||
 7319              		.loc 1 1796 0
 7320 2264 1648     		ldr	r0, .L720
 7321 2266 40F20001 		movw	r1, #:lower16:.LC366
 7322 226a C0F20001 		movt	r1, #:upper16:.LC366
 7323 226e FFF7FEFF 		bl	strcmp
 7324 2272 0346     		mov	r3, r0
 7325 2274 002B     		cmp	r3, #0
 7326 2276 0AD0     		beq	.L255
1797:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pot") == 0))
 7327              		.loc 1 1797 0 discriminator 1
 7328 2278 1148     		ldr	r0, .L720
 7329 227a 40F20001 		movw	r1, #:lower16:.LC367
 7330 227e C0F20001 		movt	r1, #:upper16:.LC367
 7331 2282 FFF7FEFF 		bl	strcmp
 7332 2286 0346     		mov	r3, r0
1796:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "potorque") == 0) ||
 7333              		.loc 1 1796 0 discriminator 1
 7334 2288 002B     		cmp	r3, #0
 7335 228a 40F0D280 		bne	.L256
 7336              	.L255:
1798:.\console.c   **** 			{
1799:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7337              		.loc 1 1799 0
 7338 228e FFF7FEFF 		bl	isr_TORQUESTAT_Start
1800:.\console.c   **** 				
1801:.\console.c   **** 				current_statistics_start(&pan_current_stat);		/* start Pan current  statistics			*/
 7339              		.loc 1 1801 0
 7340 2292 40F20000 		movw	r0, #:lower16:pan_current_stat
 7341 2296 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7342 229a FFF7FEFF 		bl	current_statistics_start
1802:.\console.c   **** 				Battery_Energy_Integral_Reset(&pan_torque_stat);	/* Battery Energy Integral Reset 			*/
 7343              		.loc 1 1802 0
 7344 229e 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7345 22a2 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7346 22a6 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1803:.\console.c   **** 				
1804:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7347              		.loc 1 1804 0
 7348 22aa 40F20000 		movw	r0, #:lower16:.LC360
 7349 22ae C0F20000 		movt	r0, #:upper16:.LC360
 7350 22b2 FFF7FEFF 		bl	puts
1805:.\console.c   **** 				CyDelay(500);
 7351              		.loc 1 1805 0
 7352 22b6 4FF4FA70 		mov	r0, #500
 7353 22ba FFF7FEFF 		bl	CyDelay
1806:.\console.c   **** 				
1807:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7354              		.loc 1 1807 0
 7355 22be 7BE0     		b	.L257
 7356              	.L721:
 7357              		.align	2
 7358              	.L720:
 7359 22c0 0F000000 		.word	actual_cmd+15
 7360              	.L258:
1808:.\console.c   **** 				{
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 210


1810:.\console.c   **** 							(float)i_t(&pan_torque_stat),
 7361              		.loc 1 1810 0
 7362 22c4 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7363 22c8 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7364 22cc FFF7FEFF 		bl	i_t
 7365 22d0 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7366              		.loc 1 1809 0
 7367 22d2 1846     		mov	r0, r3
 7368 22d4 FFF7FEFF 		bl	__aeabi_f2d
 7369 22d8 0446     		mov	r4, r0
 7370 22da 0D46     		mov	r5, r1
1811:.\console.c   **** 							(float)i_noload(),
 7371              		.loc 1 1811 0
 7372 22dc FFF7FEFF 		bl	i_noload
 7373 22e0 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7374              		.loc 1 1809 0
 7375 22e2 1846     		mov	r0, r3
 7376 22e4 FFF7FEFF 		bl	__aeabi_f2d
 7377 22e8 C7E91001 		strd	r0, [r7, #64]
1812:.\console.c   **** 							(float)TOUT_t(&pan_torque_stat, N_pan),							
 7378              		.loc 1 1812 0
 7379 22ec 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7380 22f0 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7381 22f4 4FF00001 		mov	r1, #0
 7382 22f8 C4F27821 		movt	r1, 17016
 7383 22fc FFF7FEFF 		bl	TOUT_t
 7384 2300 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7385              		.loc 1 1809 0
 7386 2302 1846     		mov	r0, r3
 7387 2304 FFF7FEFF 		bl	__aeabi_f2d
 7388 2308 C7E90E01 		strd	r0, [r7, #56]
1813:.\console.c   **** 							(float)i_max(&pan_current_stat),
 7389              		.loc 1 1813 0
 7390 230c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7391 2310 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7392 2314 FFF7FEFF 		bl	i_max
 7393 2318 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7394              		.loc 1 1809 0
 7395 231a 1846     		mov	r0, r3
 7396 231c FFF7FEFF 		bl	__aeabi_f2d
 7397 2320 C7E90C01 		strd	r0, [r7, #48]
1814:.\console.c   **** 							(float)TOUT_max(&pan_current_stat, N_pan),
 7398              		.loc 1 1814 0
 7399 2324 40F20000 		movw	r0, #:lower16:pan_current_stat
 7400 2328 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7401 232c 4FF00001 		mov	r1, #0
 7402 2330 C4F27821 		movt	r1, 17016
 7403 2334 FFF7FEFF 		bl	TOUT_max
 7404 2338 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7405              		.loc 1 1809 0
 7406 233a 1846     		mov	r0, r3
 7407 233c FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 211


 7408 2340 8246     		mov	sl, r0
 7409 2342 8B46     		mov	fp, r1
1815:.\console.c   **** 							(float)i_mean(&pan_current_stat),
 7410              		.loc 1 1815 0
 7411 2344 40F20000 		movw	r0, #:lower16:pan_current_stat
 7412 2348 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7413 234c FFF7FEFF 		bl	i_mean
 7414 2350 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7415              		.loc 1 1809 0
 7416 2352 1846     		mov	r0, r3
 7417 2354 FFF7FEFF 		bl	__aeabi_f2d
 7418 2358 8046     		mov	r8, r0
 7419 235a 8946     		mov	r9, r1
1816:.\console.c   **** 							(float)TOUT_mean(&pan_current_stat, N_pan));
 7420              		.loc 1 1816 0
 7421 235c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7422 2360 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7423 2364 4FF00001 		mov	r1, #0
 7424 2368 C4F27821 		movt	r1, 17016
 7425 236c FFF7FEFF 		bl	TOUT_mean
 7426 2370 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7427              		.loc 1 1809 0
 7428 2372 1846     		mov	r0, r3
 7429 2374 FFF7FEFF 		bl	__aeabi_f2d
 7430 2378 0246     		mov	r2, r0
 7431 237a 0B46     		mov	r3, r1
 7432 237c D7E91001 		ldrd	r0, [r7, #64]
 7433 2380 CDE90001 		strd	r0, [sp]
 7434 2384 D7E90E01 		ldrd	r0, [r7, #56]
 7435 2388 CDE90201 		strd	r0, [sp, #8]
 7436 238c D7E90C01 		ldrd	r0, [r7, #48]
 7437 2390 CDE90401 		strd	r0, [sp, #16]
 7438 2394 CDE906AB 		strd	sl, [sp, #24]
 7439 2398 CDE90889 		strd	r8, [sp, #32]
 7440 239c CDE90A23 		strd	r2, [sp, #40]
 7441 23a0 40F20000 		movw	r0, #:lower16:.LC368
 7442 23a4 C0F20000 		movt	r0, #:upper16:.LC368
 7443 23a8 2246     		mov	r2, r4
 7444 23aa 2B46     		mov	r3, r5
 7445 23ac FFF7FEFF 		bl	printf
1817:.\console.c   **** 					
1818:.\console.c   **** 					CyDelay(30);
 7446              		.loc 1 1818 0
 7447 23b0 4FF01E00 		mov	r0, #30
 7448 23b4 FFF7FEFF 		bl	CyDelay
 7449              	.L257:
1807:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7450              		.loc 1 1807 0 discriminator 1
 7451 23b8 FFF7FEFF 		bl	AnyButtonPressed
 7452 23bc 0346     		mov	r3, r0
 7453 23be 002B     		cmp	r3, #0
 7454 23c0 80D0     		beq	.L258
1819:.\console.c   **** 				}
1820:.\console.c   **** 				current_statistics_stop(&pan_current_stat);			/* stop Pan current  statistics			*/				
 7455              		.loc 1 1820 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 212


 7456 23c2 40F20000 		movw	r0, #:lower16:pan_current_stat
 7457 23c6 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7458 23ca FFF7FEFF 		bl	current_statistics_stop
1821:.\console.c   **** 				isr_TORQUESTAT_Stop();								/* stop torque statistics isr			*/
 7459              		.loc 1 1821 0
 7460 23ce FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1822:.\console.c   **** 				
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1824:.\console.c   **** 					(float)Battery_Energy(&pan_torque_stat, &pan_current_stat),
 7461              		.loc 1 1824 0
 7462 23d2 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7463 23d6 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7464 23da 40F20001 		movw	r1, #:lower16:pan_current_stat
 7465 23de C0F20001 		movt	r1, #:upper16:pan_current_stat
 7466 23e2 FFF7FEFF 		bl	Battery_Energy
 7467 23e6 0346     		mov	r3, r0
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7468              		.loc 1 1823 0
 7469 23e8 1846     		mov	r0, r3
 7470 23ea FFF7FEFF 		bl	__aeabi_f2d
 7471 23ee 0446     		mov	r4, r0
 7472 23f0 0D46     		mov	r5, r1
1825:.\console.c   **** 					(float)Battery_Energy_Meter(&pan_torque_stat, &pan_current_stat, 1000));
 7473              		.loc 1 1825 0
 7474 23f2 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7475 23f6 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7476 23fa 40F20001 		movw	r1, #:lower16:pan_current_stat
 7477 23fe C0F20001 		movt	r1, #:upper16:pan_current_stat
 7478 2402 4FF00002 		mov	r2, #0
 7479 2406 C4F27A42 		movt	r2, 17530
 7480 240a FFF7FEFF 		bl	Battery_Energy_Meter
 7481 240e 0346     		mov	r3, r0
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7482              		.loc 1 1823 0
 7483 2410 1846     		mov	r0, r3
 7484 2412 FFF7FEFF 		bl	__aeabi_f2d
 7485 2416 0246     		mov	r2, r0
 7486 2418 0B46     		mov	r3, r1
 7487 241a CDE90023 		strd	r2, [sp]
 7488 241e 40F20000 		movw	r0, #:lower16:.LC362
 7489 2422 C0F20000 		movt	r0, #:upper16:.LC362
 7490 2426 2246     		mov	r2, r4
 7491 2428 2B46     		mov	r3, r5
 7492 242a FFF7FEFF 		bl	printf
1826:.\console.c   **** 				
1827:.\console.c   **** 				goto exitpars;	
 7493              		.loc 1 1827 0
 7494 242e 04F03FBD 		b	.L131
 7495              	.L256:
1828:.\console.c   **** 			}
1829:.\console.c   **** 			// END SHOW PAN OUTPUT TORQUE STATISTICS
1830:.\console.c   **** 			
1831:.\console.c   **** 			
1832:.\console.c   **** 			// SHOW TILT OUTPUT TORQUE STATISTICS
1833:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "totorque") == 0) ||
 7496              		.loc 1 1833 0
 7497 2432 C848     		ldr	r0, .L722
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 213


 7498 2434 40F20001 		movw	r1, #:lower16:.LC369
 7499 2438 C0F20001 		movt	r1, #:upper16:.LC369
 7500 243c FFF7FEFF 		bl	strcmp
 7501 2440 0346     		mov	r3, r0
 7502 2442 002B     		cmp	r3, #0
 7503 2444 0AD0     		beq	.L259
1834:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tot") == 0))
 7504              		.loc 1 1834 0 discriminator 1
 7505 2446 C348     		ldr	r0, .L722
 7506 2448 40F20001 		movw	r1, #:lower16:.LC370
 7507 244c C0F20001 		movt	r1, #:upper16:.LC370
 7508 2450 FFF7FEFF 		bl	strcmp
 7509 2454 0346     		mov	r3, r0
1833:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "totorque") == 0) ||
 7510              		.loc 1 1833 0 discriminator 1
 7511 2456 002B     		cmp	r3, #0
 7512 2458 40F0D080 		bne	.L260
 7513              	.L259:
1835:.\console.c   **** 			{
1836:.\console.c   **** 				isr_TORQUESTAT_Start();							/* start torque statistics isr	 			*/
 7514              		.loc 1 1836 0
 7515 245c FFF7FEFF 		bl	isr_TORQUESTAT_Start
1837:.\console.c   **** 				
1838:.\console.c   **** 				current_statistics_start(&tilt_current_stat);	/* start Tilt current  statistics			*/
 7516              		.loc 1 1838 0
 7517 2460 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7518 2464 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7519 2468 FFF7FEFF 		bl	current_statistics_start
1839:.\console.c   **** 				Battery_Energy_Integral_Reset(&tilt_torque_stat);	/* Battery Energy Integral Reset 			*/
 7520              		.loc 1 1839 0
 7521 246c 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7522 2470 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7523 2474 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1840:.\console.c   **** 				
1841:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7524              		.loc 1 1841 0
 7525 2478 40F20000 		movw	r0, #:lower16:.LC365
 7526 247c C0F20000 		movt	r0, #:upper16:.LC365
 7527 2480 FFF7FEFF 		bl	puts
1842:.\console.c   **** 				CyDelay(500);
 7528              		.loc 1 1842 0
 7529 2484 4FF4FA70 		mov	r0, #500
 7530 2488 FFF7FEFF 		bl	CyDelay
1843:.\console.c   **** 				
1844:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7531              		.loc 1 1844 0
 7532 248c 79E0     		b	.L261
 7533              	.L262:
1845:.\console.c   **** 				{
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
1847:.\console.c   **** 							(float)i_t(&tilt_torque_stat),
 7534              		.loc 1 1847 0
 7535 248e 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7536 2492 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7537 2496 FFF7FEFF 		bl	i_t
 7538 249a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 214


 7539              		.loc 1 1846 0
 7540 249c 1846     		mov	r0, r3
 7541 249e FFF7FEFF 		bl	__aeabi_f2d
 7542 24a2 0446     		mov	r4, r0
 7543 24a4 0D46     		mov	r5, r1
1848:.\console.c   **** 							(float)i_noload(),							
 7544              		.loc 1 1848 0
 7545 24a6 FFF7FEFF 		bl	i_noload
 7546 24aa 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7547              		.loc 1 1846 0
 7548 24ac 1846     		mov	r0, r3
 7549 24ae FFF7FEFF 		bl	__aeabi_f2d
 7550 24b2 C7E91601 		strd	r0, [r7, #88]
1849:.\console.c   **** 							(float)TOUT_t(&tilt_torque_stat, N_tilt),							
 7551              		.loc 1 1849 0
 7552 24b6 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7553 24ba C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7554 24be 4FF00001 		mov	r1, #0
 7555 24c2 C4F22C31 		movt	r1, 17196
 7556 24c6 FFF7FEFF 		bl	TOUT_t
 7557 24ca 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7558              		.loc 1 1846 0
 7559 24cc 1846     		mov	r0, r3
 7560 24ce FFF7FEFF 		bl	__aeabi_f2d
 7561 24d2 C7E91401 		strd	r0, [r7, #80]
1850:.\console.c   **** 							(float)i_max(&tilt_current_stat),
 7562              		.loc 1 1850 0
 7563 24d6 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7564 24da C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7565 24de FFF7FEFF 		bl	i_max
 7566 24e2 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7567              		.loc 1 1846 0
 7568 24e4 1846     		mov	r0, r3
 7569 24e6 FFF7FEFF 		bl	__aeabi_f2d
 7570 24ea C7E91201 		strd	r0, [r7, #72]
1851:.\console.c   **** 							(float)TOUT_max(&tilt_current_stat, N_tilt),
 7571              		.loc 1 1851 0
 7572 24ee 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7573 24f2 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7574 24f6 4FF00001 		mov	r1, #0
 7575 24fa C4F22C31 		movt	r1, 17196
 7576 24fe FFF7FEFF 		bl	TOUT_max
 7577 2502 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7578              		.loc 1 1846 0
 7579 2504 1846     		mov	r0, r3
 7580 2506 FFF7FEFF 		bl	__aeabi_f2d
 7581 250a 8246     		mov	sl, r0
 7582 250c 8B46     		mov	fp, r1
1852:.\console.c   **** 							(float)i_mean(&tilt_current_stat),
 7583              		.loc 1 1852 0
 7584 250e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7585 2512 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7586 2516 FFF7FEFF 		bl	i_mean
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 215


 7587 251a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7588              		.loc 1 1846 0
 7589 251c 1846     		mov	r0, r3
 7590 251e FFF7FEFF 		bl	__aeabi_f2d
 7591 2522 8046     		mov	r8, r0
 7592 2524 8946     		mov	r9, r1
1853:.\console.c   **** 							(float)TOUT_mean(&tilt_current_stat, N_tilt));					
 7593              		.loc 1 1853 0
 7594 2526 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7595 252a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7596 252e 4FF00001 		mov	r1, #0
 7597 2532 C4F22C31 		movt	r1, 17196
 7598 2536 FFF7FEFF 		bl	TOUT_mean
 7599 253a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7600              		.loc 1 1846 0
 7601 253c 1846     		mov	r0, r3
 7602 253e FFF7FEFF 		bl	__aeabi_f2d
 7603 2542 0246     		mov	r2, r0
 7604 2544 0B46     		mov	r3, r1
 7605 2546 D7E91601 		ldrd	r0, [r7, #88]
 7606 254a CDE90001 		strd	r0, [sp]
 7607 254e D7E91401 		ldrd	r0, [r7, #80]
 7608 2552 CDE90201 		strd	r0, [sp, #8]
 7609 2556 D7E91201 		ldrd	r0, [r7, #72]
 7610 255a CDE90401 		strd	r0, [sp, #16]
 7611 255e CDE906AB 		strd	sl, [sp, #24]
 7612 2562 CDE90889 		strd	r8, [sp, #32]
 7613 2566 CDE90A23 		strd	r2, [sp, #40]
 7614 256a 40F20000 		movw	r0, #:lower16:.LC368
 7615 256e C0F20000 		movt	r0, #:upper16:.LC368
 7616 2572 2246     		mov	r2, r4
 7617 2574 2B46     		mov	r3, r5
 7618 2576 FFF7FEFF 		bl	printf
1854:.\console.c   **** 					
1855:.\console.c   **** 					CyDelay(30);
 7619              		.loc 1 1855 0
 7620 257a 4FF01E00 		mov	r0, #30
 7621 257e FFF7FEFF 		bl	CyDelay
 7622              	.L261:
1844:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7623              		.loc 1 1844 0 discriminator 1
 7624 2582 FFF7FEFF 		bl	AnyButtonPressed
 7625 2586 0346     		mov	r3, r0
 7626 2588 002B     		cmp	r3, #0
 7627 258a 80D0     		beq	.L262
1856:.\console.c   **** 				}
1857:.\console.c   **** 				current_statistics_stop(&tilt_current_stat);	/* stop Tilt current  statistics			*/				
 7628              		.loc 1 1857 0
 7629 258c 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7630 2590 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7631 2594 FFF7FEFF 		bl	current_statistics_stop
1858:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr				*/
 7632              		.loc 1 1858 0
 7633 2598 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1859:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 216


1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1861:.\console.c   **** 					(float)Battery_Energy(&tilt_torque_stat, &tilt_current_stat),
 7634              		.loc 1 1861 0
 7635 259c 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7636 25a0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7637 25a4 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7638 25a8 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7639 25ac FFF7FEFF 		bl	Battery_Energy
 7640 25b0 0346     		mov	r3, r0
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7641              		.loc 1 1860 0
 7642 25b2 1846     		mov	r0, r3
 7643 25b4 FFF7FEFF 		bl	__aeabi_f2d
 7644 25b8 0446     		mov	r4, r0
 7645 25ba 0D46     		mov	r5, r1
1862:.\console.c   **** 					(float)Battery_Energy_Meter(&tilt_torque_stat, &tilt_current_stat, 1000));
 7646              		.loc 1 1862 0
 7647 25bc 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7648 25c0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7649 25c4 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7650 25c8 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7651 25cc 4FF00002 		mov	r2, #0
 7652 25d0 C4F27A42 		movt	r2, 17530
 7653 25d4 FFF7FEFF 		bl	Battery_Energy_Meter
 7654 25d8 0346     		mov	r3, r0
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7655              		.loc 1 1860 0
 7656 25da 1846     		mov	r0, r3
 7657 25dc FFF7FEFF 		bl	__aeabi_f2d
 7658 25e0 0246     		mov	r2, r0
 7659 25e2 0B46     		mov	r3, r1
 7660 25e4 CDE90023 		strd	r2, [sp]
 7661 25e8 40F20000 		movw	r0, #:lower16:.LC362
 7662 25ec C0F20000 		movt	r0, #:upper16:.LC362
 7663 25f0 2246     		mov	r2, r4
 7664 25f2 2B46     		mov	r3, r5
 7665 25f4 FFF7FEFF 		bl	printf
1863:.\console.c   **** 				
1864:.\console.c   **** 				goto exitpars;	
 7666              		.loc 1 1864 0
 7667 25f8 04F05ABC 		b	.L131
 7668              	.L260:
1865:.\console.c   **** 			}
1866:.\console.c   **** 			// END SHOW TILT OUTPUT TORQUE STATISTICS			
1867:.\console.c   **** 	
1868:.\console.c   **** 
1869:.\console.c   **** 			// SHOW PAN MOTOR EROGATED POWER STATISTICS
1870:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmpower") == 0) ||
 7669              		.loc 1 1870 0
 7670 25fc 5548     		ldr	r0, .L722
 7671 25fe 40F20001 		movw	r1, #:lower16:.LC371
 7672 2602 C0F20001 		movt	r1, #:upper16:.LC371
 7673 2606 FFF7FEFF 		bl	strcmp
 7674 260a 0346     		mov	r3, r0
 7675 260c 002B     		cmp	r3, #0
 7676 260e 0AD0     		beq	.L263
1871:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pmp") == 0))
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 217


 7677              		.loc 1 1871 0 discriminator 1
 7678 2610 5048     		ldr	r0, .L722
 7679 2612 40F20001 		movw	r1, #:lower16:.LC372
 7680 2616 C0F20001 		movt	r1, #:upper16:.LC372
 7681 261a FFF7FEFF 		bl	strcmp
 7682 261e 0346     		mov	r3, r0
1870:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmpower") == 0) ||
 7683              		.loc 1 1870 0 discriminator 1
 7684 2620 002B     		cmp	r3, #0
 7685 2622 40F09980 		bne	.L264
 7686              	.L263:
1872:.\console.c   **** 			{
1873:.\console.c   **** 				isr_TORQUESTAT_Start();									/* start torque statistics isr	 						*/
 7687              		.loc 1 1873 0
 7688 2626 FFF7FEFF 		bl	isr_TORQUESTAT_Start
1874:.\console.c   **** 	
1875:.\console.c   **** 				motor_abs_velocity_sampling_init(&pan_torque_stat);		/* initialize Pan Motor abs(Angular Veloci
 7689              		.loc 1 1875 0
 7690 262a 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7691 262e C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7692 2632 FFF7FEFF 		bl	motor_abs_velocity_sampling_init
1876:.\console.c   **** 				qpower_statistics_start(&pan_qpower_stat);				/* start quasi-power Statistics							*/
 7693              		.loc 1 1876 0
 7694 2636 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7695 263a C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7696 263e FFF7FEFF 		bl	qpower_statistics_start
1877:.\console.c   **** 				
1878:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7697              		.loc 1 1878 0
 7698 2642 40F20000 		movw	r0, #:lower16:.LC360
 7699 2646 C0F20000 		movt	r0, #:upper16:.LC360
 7700 264a FFF7FEFF 		bl	puts
1879:.\console.c   **** 				CyDelay(500);
 7701              		.loc 1 1879 0
 7702 264e 4FF4FA70 		mov	r0, #500
 7703 2652 FFF7FEFF 		bl	CyDelay
1880:.\console.c   **** 				
1881:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7704              		.loc 1 1881 0
 7705 2656 6DE0     		b	.L265
 7706              	.L266:
 7707              	.LBB6:
1882:.\console.c   **** 				{
1883:.\console.c   **** 					//simultaneous sampling
1884:.\console.c   **** 					float my_torque = TMOT_t(&pan_torque_stat);
 7708              		.loc 1 1884 0
 7709 2658 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7710 265c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7711 2660 FFF7FEFF 		bl	TMOT_t
 7712 2664 C7F89400 		str	r0, [r7, #148]	@ float
1885:.\console.c   **** 					float my_omega  = omega_t(&pan_torque_stat);
 7713              		.loc 1 1885 0
 7714 2668 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7715 266c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7716 2670 FFF7FEFF 		bl	omega_t
 7717 2674 C7F89000 		str	r0, [r7, #144]	@ float
1886:.\console.c   **** 					float my_rpm    = rpm_t(&pan_torque_stat);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 218


 7718              		.loc 1 1886 0
 7719 2678 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7720 267c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7721 2680 FFF7FEFF 		bl	rpm_t
 7722 2684 C7F88C00 		str	r0, [r7, #140]	@ float
1887:.\console.c   **** 					float my_pm_t   = PMOTE_t(&pan_torque_stat);
 7723              		.loc 1 1887 0
 7724 2688 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7725 268c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7726 2690 FFF7FEFF 		bl	PMOTE_t
 7727 2694 C7F88800 		str	r0, [r7, #136]	@ float
1888:.\console.c   **** 					float my_pm_max = PMOTE_max(&pan_qpower_stat);
 7728              		.loc 1 1888 0
 7729 2698 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7730 269c C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7731 26a0 FFF7FEFF 		bl	PMOTE_max
 7732 26a4 C7F88400 		str	r0, [r7, #132]	@ float
1889:.\console.c   **** 					float my_pm_med = PMOTE_mean(&pan_qpower_stat);
 7733              		.loc 1 1889 0
 7734 26a8 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7735 26ac C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7736 26b0 FFF7FEFF 		bl	PMOTE_mean
 7737 26b4 C7F88000 		str	r0, [r7, #128]	@ float
1890:.\console.c   **** 					
1891:.\console.c   **** 					printf("T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed
 7738              		.loc 1 1891 0
 7739 26b8 D7F89400 		ldr	r0, [r7, #148]	@ float
 7740 26bc FFF7FEFF 		bl	__aeabi_f2d
 7741 26c0 0446     		mov	r4, r0
 7742 26c2 0D46     		mov	r5, r1
 7743 26c4 D7F89000 		ldr	r0, [r7, #144]	@ float
 7744 26c8 FFF7FEFF 		bl	__aeabi_f2d
 7745 26cc C7E91A01 		strd	r0, [r7, #104]
 7746 26d0 D7F88C00 		ldr	r0, [r7, #140]	@ float
 7747 26d4 FFF7FEFF 		bl	__aeabi_f2d
 7748 26d8 C7E91801 		strd	r0, [r7, #96]
 7749 26dc D7F88800 		ldr	r0, [r7, #136]	@ float
 7750 26e0 FFF7FEFF 		bl	__aeabi_f2d
 7751 26e4 8246     		mov	sl, r0
 7752 26e6 8B46     		mov	fp, r1
 7753 26e8 D7F88400 		ldr	r0, [r7, #132]	@ float
 7754 26ec FFF7FEFF 		bl	__aeabi_f2d
 7755 26f0 8046     		mov	r8, r0
 7756 26f2 8946     		mov	r9, r1
 7757 26f4 D7F88000 		ldr	r0, [r7, #128]	@ float
 7758 26f8 FFF7FEFF 		bl	__aeabi_f2d
 7759 26fc 0246     		mov	r2, r0
 7760 26fe 0B46     		mov	r3, r1
 7761 2700 D7E91A01 		ldrd	r0, [r7, #104]
 7762 2704 CDE90001 		strd	r0, [sp]
 7763 2708 D7E91801 		ldrd	r0, [r7, #96]
 7764 270c CDE90201 		strd	r0, [sp, #8]
 7765 2710 CDE904AB 		strd	sl, [sp, #16]
 7766 2714 CDE90689 		strd	r8, [sp, #24]
 7767 2718 CDE90823 		strd	r2, [sp, #32]
 7768 271c 40F20000 		movw	r0, #:lower16:.LC373
 7769 2720 C0F20000 		movt	r0, #:upper16:.LC373
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 219


 7770 2724 2246     		mov	r2, r4
 7771 2726 2B46     		mov	r3, r5
 7772 2728 FFF7FEFF 		bl	printf
1892:.\console.c   **** 							(float)my_torque,
1893:.\console.c   **** 							(float)my_omega,
1894:.\console.c   **** 							(float)my_rpm,							
1895:.\console.c   **** 							(float)my_pm_t,
1896:.\console.c   **** 							(float)my_pm_max,
1897:.\console.c   **** 							(float)my_pm_med);
1898:.\console.c   **** 					
1899:.\console.c   **** 					CyDelay(30);
 7773              		.loc 1 1899 0
 7774 272c 4FF01E00 		mov	r0, #30
 7775 2730 FFF7FEFF 		bl	CyDelay
 7776              	.L265:
 7777              	.LBE6:
1881:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7778              		.loc 1 1881 0 discriminator 1
 7779 2734 FFF7FEFF 		bl	AnyButtonPressed
 7780 2738 0346     		mov	r3, r0
 7781 273a 002B     		cmp	r3, #0
 7782 273c 8CD0     		beq	.L266
1900:.\console.c   **** 				}
1901:.\console.c   **** 				qpower_statistics_stop(&pan_qpower_stat);				/* stop quasi-power Statistics	   						*/				
 7783              		.loc 1 1901 0
 7784 273e 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7785 2742 C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7786 2746 FFF7FEFF 		bl	qpower_statistics_stop
1902:.\console.c   **** 				isr_TORQUESTAT_Stop();									/* stop torque statistics isr							*/
 7787              		.loc 1 1902 0
 7788 274a FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1903:.\console.c   **** 								
1904:.\console.c   **** 				goto exitpars;	
 7789              		.loc 1 1904 0
 7790 274e 04F0AFBB 		b	.L131
 7791              	.L723:
 7792 2752 00BF     		.align	2
 7793              	.L722:
 7794 2754 0F000000 		.word	actual_cmd+15
 7795              	.L264:
1905:.\console.c   **** 			}
1906:.\console.c   **** 			// END SHOW PAN MOTOR EROGATED POWER STATISTICS			
1907:.\console.c   **** 		
1908:.\console.c   **** 			
1909:.\console.c   **** 			// SHOW TILT MOTOR EROGATED POWER STATISTICS
1910:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmpower") == 0) ||
 7796              		.loc 1 1910 0
 7797 2758 BC48     		ldr	r0, .L724
 7798 275a 40F20001 		movw	r1, #:lower16:.LC374
 7799 275e C0F20001 		movt	r1, #:upper16:.LC374
 7800 2762 FFF7FEFF 		bl	strcmp
 7801 2766 0346     		mov	r3, r0
 7802 2768 002B     		cmp	r3, #0
 7803 276a 0AD0     		beq	.L267
1911:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tmp") == 0))
 7804              		.loc 1 1911 0 discriminator 1
 7805 276c B748     		ldr	r0, .L724
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 220


 7806 276e 40F20001 		movw	r1, #:lower16:.LC375
 7807 2772 C0F20001 		movt	r1, #:upper16:.LC375
 7808 2776 FFF7FEFF 		bl	strcmp
 7809 277a 0346     		mov	r3, r0
1910:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmpower") == 0) ||
 7810              		.loc 1 1910 0 discriminator 1
 7811 277c 002B     		cmp	r3, #0
 7812 277e 40F09680 		bne	.L268
 7813              	.L267:
1912:.\console.c   **** 			{
1913:.\console.c   **** 				isr_TORQUESTAT_Start();									/* start torque statistics isr	 						*/
 7814              		.loc 1 1913 0
 7815 2782 FFF7FEFF 		bl	isr_TORQUESTAT_Start
1914:.\console.c   **** 	
1915:.\console.c   **** 				motor_abs_velocity_sampling_init(&tilt_torque_stat);	/* Initialize Tilt Motor abs(Angular Veloc
 7816              		.loc 1 1915 0
 7817 2786 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7818 278a C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7819 278e FFF7FEFF 		bl	motor_abs_velocity_sampling_init
1916:.\console.c   **** 				qpower_statistics_start(&tilt_qpower_stat);				/* initialize quasi-power Statistics					*/
 7820              		.loc 1 1916 0
 7821 2792 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7822 2796 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7823 279a FFF7FEFF 		bl	qpower_statistics_start
1917:.\console.c   **** 				
1918:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7824              		.loc 1 1918 0
 7825 279e 40F20000 		movw	r0, #:lower16:.LC365
 7826 27a2 C0F20000 		movt	r0, #:upper16:.LC365
 7827 27a6 FFF7FEFF 		bl	puts
1919:.\console.c   **** 				CyDelay(500);
 7828              		.loc 1 1919 0
 7829 27aa 4FF4FA70 		mov	r0, #500
 7830 27ae FFF7FEFF 		bl	CyDelay
1920:.\console.c   **** 				
1921:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7831              		.loc 1 1921 0
 7832 27b2 6DE0     		b	.L269
 7833              	.L270:
 7834              	.LBB7:
1922:.\console.c   **** 				{
1923:.\console.c   **** 					//simultaneous sampling
1924:.\console.c   **** 					float my_torque = TMOT_t(&tilt_torque_stat);
 7835              		.loc 1 1924 0
 7836 27b4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7837 27b8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7838 27bc FFF7FEFF 		bl	TMOT_t
 7839 27c0 C7F8AC00 		str	r0, [r7, #172]	@ float
1925:.\console.c   **** 					float my_omega  = omega_t(&tilt_torque_stat);
 7840              		.loc 1 1925 0
 7841 27c4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7842 27c8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7843 27cc FFF7FEFF 		bl	omega_t
 7844 27d0 C7F8A800 		str	r0, [r7, #168]	@ float
1926:.\console.c   **** 					float my_rpm    = rpm_t(&tilt_torque_stat);
 7845              		.loc 1 1926 0
 7846 27d4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 221


 7847 27d8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7848 27dc FFF7FEFF 		bl	rpm_t
 7849 27e0 C7F8A400 		str	r0, [r7, #164]	@ float
1927:.\console.c   **** 					float my_pm_t   = PMOTE_t(&tilt_torque_stat);
 7850              		.loc 1 1927 0
 7851 27e4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7852 27e8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7853 27ec FFF7FEFF 		bl	PMOTE_t
 7854 27f0 C7F8A000 		str	r0, [r7, #160]	@ float
1928:.\console.c   **** 					float my_pm_max = PMOTE_max(&tilt_qpower_stat);
 7855              		.loc 1 1928 0
 7856 27f4 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7857 27f8 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7858 27fc FFF7FEFF 		bl	PMOTE_max
 7859 2800 C7F89C00 		str	r0, [r7, #156]	@ float
1929:.\console.c   **** 					float my_pm_med = PMOTE_mean(&tilt_qpower_stat);
 7860              		.loc 1 1929 0
 7861 2804 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7862 2808 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7863 280c FFF7FEFF 		bl	PMOTE_mean
 7864 2810 C7F89800 		str	r0, [r7, #152]	@ float
1930:.\console.c   **** 					
1931:.\console.c   **** 					printf("T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed
 7865              		.loc 1 1931 0
 7866 2814 D7F8AC00 		ldr	r0, [r7, #172]	@ float
 7867 2818 FFF7FEFF 		bl	__aeabi_f2d
 7868 281c 0446     		mov	r4, r0
 7869 281e 0D46     		mov	r5, r1
 7870 2820 D7F8A800 		ldr	r0, [r7, #168]	@ float
 7871 2824 FFF7FEFF 		bl	__aeabi_f2d
 7872 2828 C7E91E01 		strd	r0, [r7, #120]
 7873 282c D7F8A400 		ldr	r0, [r7, #164]	@ float
 7874 2830 FFF7FEFF 		bl	__aeabi_f2d
 7875 2834 C7E91C01 		strd	r0, [r7, #112]
 7876 2838 D7F8A000 		ldr	r0, [r7, #160]	@ float
 7877 283c FFF7FEFF 		bl	__aeabi_f2d
 7878 2840 8246     		mov	sl, r0
 7879 2842 8B46     		mov	fp, r1
 7880 2844 D7F89C00 		ldr	r0, [r7, #156]	@ float
 7881 2848 FFF7FEFF 		bl	__aeabi_f2d
 7882 284c 8046     		mov	r8, r0
 7883 284e 8946     		mov	r9, r1
 7884 2850 D7F89800 		ldr	r0, [r7, #152]	@ float
 7885 2854 FFF7FEFF 		bl	__aeabi_f2d
 7886 2858 0246     		mov	r2, r0
 7887 285a 0B46     		mov	r3, r1
 7888 285c D7E91E01 		ldrd	r0, [r7, #120]
 7889 2860 CDE90001 		strd	r0, [sp]
 7890 2864 D7E91C01 		ldrd	r0, [r7, #112]
 7891 2868 CDE90201 		strd	r0, [sp, #8]
 7892 286c CDE904AB 		strd	sl, [sp, #16]
 7893 2870 CDE90689 		strd	r8, [sp, #24]
 7894 2874 CDE90823 		strd	r2, [sp, #32]
 7895 2878 40F20000 		movw	r0, #:lower16:.LC373
 7896 287c C0F20000 		movt	r0, #:upper16:.LC373
 7897 2880 2246     		mov	r2, r4
 7898 2882 2B46     		mov	r3, r5
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 222


 7899 2884 FFF7FEFF 		bl	printf
1932:.\console.c   **** 							(float)my_torque,
1933:.\console.c   **** 							(float)my_omega,
1934:.\console.c   **** 							(float)my_rpm,							
1935:.\console.c   **** 							(float)my_pm_t,
1936:.\console.c   **** 							(float)my_pm_max,
1937:.\console.c   **** 							(float)my_pm_med);
1938:.\console.c   **** 					
1939:.\console.c   **** 					CyDelay(30);
 7900              		.loc 1 1939 0
 7901 2888 4FF01E00 		mov	r0, #30
 7902 288c FFF7FEFF 		bl	CyDelay
 7903              	.L269:
 7904              	.LBE7:
1921:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7905              		.loc 1 1921 0 discriminator 1
 7906 2890 FFF7FEFF 		bl	AnyButtonPressed
 7907 2894 0346     		mov	r3, r0
 7908 2896 002B     		cmp	r3, #0
 7909 2898 8CD0     		beq	.L270
1940:.\console.c   **** 				}
1941:.\console.c   **** 				qpower_statistics_stop(&tilt_qpower_stat);	/* stops quasi-power Statistics							*/				
 7910              		.loc 1 1941 0
 7911 289a 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7912 289e C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7913 28a2 FFF7FEFF 		bl	qpower_statistics_stop
1942:.\console.c   **** 				isr_TORQUESTAT_Stop();						/* stop torque statistics isr							*/
 7914              		.loc 1 1942 0
 7915 28a6 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1943:.\console.c   **** 				
1944:.\console.c   **** 				goto exitpars;	
 7916              		.loc 1 1944 0
 7917 28aa 04F001BB 		b	.L131
 7918              	.L268:
1945:.\console.c   **** 			}
1946:.\console.c   **** 			// END SHOW TILT MOTOR EROGATED POWER STATISTICS				
1947:.\console.c   **** 			
1948:.\console.c   **** 			
1949:.\console.c   **** 			// SHOW PAN ABSOLUTE SENSOR STATS
1950:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pabsstats") == 0)	
 7919              		.loc 1 1950 0
 7920 28ae 6748     		ldr	r0, .L724
 7921 28b0 40F20001 		movw	r1, #:lower16:.LC376
 7922 28b4 C0F20001 		movt	r1, #:upper16:.LC376
 7923 28b8 FFF7FEFF 		bl	strcmp
 7924 28bc 0346     		mov	r3, r0
 7925 28be 002B     		cmp	r3, #0
 7926 28c0 09D0     		beq	.L271
1951:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "pabs") == 0))
 7927              		.loc 1 1951 0
 7928 28c2 6248     		ldr	r0, .L724
 7929 28c4 40F20001 		movw	r1, #:lower16:.LC377
 7930 28c8 C0F20001 		movt	r1, #:upper16:.LC377
 7931 28cc FFF7FEFF 		bl	strcmp
 7932 28d0 0346     		mov	r3, r0
 7933 28d2 002B     		cmp	r3, #0
 7934 28d4 4DD1     		bne	.L272
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 223


 7935              	.L271:
1952:.\console.c   **** 			{			
1953:.\console.c   **** 				printf("PAN Absolute Sensor:");					
 7936              		.loc 1 1953 0
 7937 28d6 40F20000 		movw	r0, #:lower16:.LC378
 7938 28da C0F20000 		movt	r0, #:upper16:.LC378
 7939 28de FFF7FEFF 		bl	printf
1954:.\console.c   **** 				printf(" mean=%+1.1f [raw]", (float) pan_absolute_sensor_stat.mean);
 7940              		.loc 1 1954 0
 7941 28e2 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7942 28e6 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7943 28ea 5B68     		ldr	r3, [r3, #4]	@ float
 7944 28ec 1846     		mov	r0, r3
 7945 28ee FFF7FEFF 		bl	__aeabi_f2d
 7946 28f2 0246     		mov	r2, r0
 7947 28f4 0B46     		mov	r3, r1
 7948 28f6 40F20000 		movw	r0, #:lower16:.LC379
 7949 28fa C0F20000 		movt	r0, #:upper16:.LC379
 7950 28fe FFF7FEFF 		bl	printf
1955:.\console.c   **** 				printf(" max=%+1.1f [raw]", (float) pan_absolute_sensor_stat.max);
 7951              		.loc 1 1955 0
 7952 2902 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7953 2906 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7954 290a 1B69     		ldr	r3, [r3, #16]	@ float
 7955 290c 1846     		mov	r0, r3
 7956 290e FFF7FEFF 		bl	__aeabi_f2d
 7957 2912 0246     		mov	r2, r0
 7958 2914 0B46     		mov	r3, r1
 7959 2916 40F20000 		movw	r0, #:lower16:.LC380
 7960 291a C0F20000 		movt	r0, #:upper16:.LC380
 7961 291e FFF7FEFF 		bl	printf
1956:.\console.c   **** 				printf(" min=%+1.1f [raw]", (float) pan_absolute_sensor_stat.min);					
 7962              		.loc 1 1956 0
 7963 2922 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7964 2926 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7965 292a DB68     		ldr	r3, [r3, #12]	@ float
 7966 292c 1846     		mov	r0, r3
 7967 292e FFF7FEFF 		bl	__aeabi_f2d
 7968 2932 0246     		mov	r2, r0
 7969 2934 0B46     		mov	r3, r1
 7970 2936 40F20000 		movw	r0, #:lower16:.LC381
 7971 293a C0F20000 		movt	r0, #:upper16:.LC381
 7972 293e FFF7FEFF 		bl	printf
1957:.\console.c   **** 				printf(" range=%+1.1f [raw]", (float) pan_absolute_sensor_stat.range);						
 7973              		.loc 1 1957 0
 7974 2942 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7975 2946 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7976 294a 5B69     		ldr	r3, [r3, #20]	@ float
 7977 294c 1846     		mov	r0, r3
 7978 294e FFF7FEFF 		bl	__aeabi_f2d
 7979 2952 0246     		mov	r2, r0
 7980 2954 0B46     		mov	r3, r1
 7981 2956 40F20000 		movw	r0, #:lower16:.LC382
 7982 295a C0F20000 		movt	r0, #:upper16:.LC382
 7983 295e FFF7FEFF 		bl	printf
1958:.\console.c   **** 					
1959:.\console.c   **** 				printf("\r\n");	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 224


 7984              		.loc 1 1959 0
 7985 2962 40F20000 		movw	r0, #:lower16:.LC42
 7986 2966 C0F20000 		movt	r0, #:upper16:.LC42
 7987 296a FFF7FEFF 		bl	puts
1960:.\console.c   **** 
1961:.\console.c   **** 				goto exitpars;	
 7988              		.loc 1 1961 0
 7989 296e 04F09FBA 		b	.L131
 7990              	.L272:
1962:.\console.c   **** 			}
1963:.\console.c   **** 			// SHOW PAN ABSOLUTE SENSOR STATS END	
1964:.\console.c   **** 			
1965:.\console.c   **** 			
1966:.\console.c   **** 			// SHOW TILT ABSOLUTE SENSOR STATS
1967:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tabsstats") == 0)	
 7991              		.loc 1 1967 0
 7992 2972 3648     		ldr	r0, .L724
 7993 2974 40F20001 		movw	r1, #:lower16:.LC383
 7994 2978 C0F20001 		movt	r1, #:upper16:.LC383
 7995 297c FFF7FEFF 		bl	strcmp
 7996 2980 0346     		mov	r3, r0
 7997 2982 002B     		cmp	r3, #0
 7998 2984 09D0     		beq	.L273
1968:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "tabs") == 0))
 7999              		.loc 1 1968 0
 8000 2986 3148     		ldr	r0, .L724
 8001 2988 40F20001 		movw	r1, #:lower16:.LC384
 8002 298c C0F20001 		movt	r1, #:upper16:.LC384
 8003 2990 FFF7FEFF 		bl	strcmp
 8004 2994 0346     		mov	r3, r0
 8005 2996 002B     		cmp	r3, #0
 8006 2998 4DD1     		bne	.L274
 8007              	.L273:
1969:.\console.c   **** 			{			
1970:.\console.c   **** 				printf("TILT Absolute Sensor:");					
 8008              		.loc 1 1970 0
 8009 299a 40F20000 		movw	r0, #:lower16:.LC385
 8010 299e C0F20000 		movt	r0, #:upper16:.LC385
 8011 29a2 FFF7FEFF 		bl	printf
1971:.\console.c   **** 				printf(" mean=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.mean);
 8012              		.loc 1 1971 0
 8013 29a6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8014 29aa C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8015 29ae 5B68     		ldr	r3, [r3, #4]	@ float
 8016 29b0 1846     		mov	r0, r3
 8017 29b2 FFF7FEFF 		bl	__aeabi_f2d
 8018 29b6 0246     		mov	r2, r0
 8019 29b8 0B46     		mov	r3, r1
 8020 29ba 40F20000 		movw	r0, #:lower16:.LC379
 8021 29be C0F20000 		movt	r0, #:upper16:.LC379
 8022 29c2 FFF7FEFF 		bl	printf
1972:.\console.c   **** 				printf(" max=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.max);
 8023              		.loc 1 1972 0
 8024 29c6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8025 29ca C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8026 29ce 1B69     		ldr	r3, [r3, #16]	@ float
 8027 29d0 1846     		mov	r0, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 225


 8028 29d2 FFF7FEFF 		bl	__aeabi_f2d
 8029 29d6 0246     		mov	r2, r0
 8030 29d8 0B46     		mov	r3, r1
 8031 29da 40F20000 		movw	r0, #:lower16:.LC380
 8032 29de C0F20000 		movt	r0, #:upper16:.LC380
 8033 29e2 FFF7FEFF 		bl	printf
1973:.\console.c   **** 				printf(" min=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.min);					
 8034              		.loc 1 1973 0
 8035 29e6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8036 29ea C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8037 29ee DB68     		ldr	r3, [r3, #12]	@ float
 8038 29f0 1846     		mov	r0, r3
 8039 29f2 FFF7FEFF 		bl	__aeabi_f2d
 8040 29f6 0246     		mov	r2, r0
 8041 29f8 0B46     		mov	r3, r1
 8042 29fa 40F20000 		movw	r0, #:lower16:.LC381
 8043 29fe C0F20000 		movt	r0, #:upper16:.LC381
 8044 2a02 FFF7FEFF 		bl	printf
1974:.\console.c   **** 				printf(" range=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.range);						
 8045              		.loc 1 1974 0
 8046 2a06 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8047 2a0a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8048 2a0e 5B69     		ldr	r3, [r3, #20]	@ float
 8049 2a10 1846     		mov	r0, r3
 8050 2a12 FFF7FEFF 		bl	__aeabi_f2d
 8051 2a16 0246     		mov	r2, r0
 8052 2a18 0B46     		mov	r3, r1
 8053 2a1a 40F20000 		movw	r0, #:lower16:.LC382
 8054 2a1e C0F20000 		movt	r0, #:upper16:.LC382
 8055 2a22 FFF7FEFF 		bl	printf
1975:.\console.c   **** 					
1976:.\console.c   **** 				printf("\r\n");	
 8056              		.loc 1 1976 0
 8057 2a26 40F20000 		movw	r0, #:lower16:.LC42
 8058 2a2a C0F20000 		movt	r0, #:upper16:.LC42
 8059 2a2e FFF7FEFF 		bl	puts
1977:.\console.c   **** 
1978:.\console.c   **** 				goto exitpars;	
 8060              		.loc 1 1978 0
 8061 2a32 04F03DBA 		b	.L131
 8062              	.L274:
1979:.\console.c   **** 			}
1980:.\console.c   **** 			// SHOW TILT ABSOLUTE SENSOR STATS END	
1981:.\console.c   **** 
1982:.\console.c   **** 			
1983:.\console.c   **** 			// SHOW ASTIM
1984:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "astim") == 0)	
 8063              		.loc 1 1984 0
 8064 2a36 0548     		ldr	r0, .L724
 8065 2a38 40F20001 		movw	r1, #:lower16:.LC386
 8066 2a3c C0F20001 		movt	r1, #:upper16:.LC386
 8067 2a40 FFF7FEFF 		bl	strcmp
 8068 2a44 0346     		mov	r3, r0
 8069 2a46 002B     		cmp	r3, #0
 8070 2a48 3AD1     		bne	.L275
1985:.\console.c   **** 			{
1986:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 226


 8071              		.loc 1 1986 0
 8072 2a4a 32E0     		b	.L276
 8073              	.L725:
 8074              		.align	2
 8075              	.L724:
 8076 2a4c 0F000000 		.word	actual_cmd+15
 8077              	.L277:
1987:.\console.c   **** 				{					
1988:.\console.c   **** 					printf("ASTIM(ADC_INPUT) =%+5d [lsb]", (int16)AdcValue[CTRL_IN_ASTIM]);					
 8078              		.loc 1 1988 0
 8079 2a50 40F20003 		movw	r3, #:lower16:AdcValue
 8080 2a54 C0F20003 		movt	r3, #:upper16:AdcValue
 8081 2a58 1B8A     		ldrh	r3, [r3, #16]
 8082 2a5a 1BB2     		sxth	r3, r3
 8083 2a5c 40F20000 		movw	r0, #:lower16:.LC387
 8084 2a60 C0F20000 		movt	r0, #:upper16:.LC387
 8085 2a64 1946     		mov	r1, r3
 8086 2a66 FFF7FEFF 		bl	printf
1989:.\console.c   **** 					printf("   ASTIM(P)=%+5.1f [step]", (float)pan_axis.mc.Float_ASTIM);
 8087              		.loc 1 1989 0
 8088 2a6a 40F20003 		movw	r3, #:lower16:pan_axis
 8089 2a6e C0F20003 		movt	r3, #:upper16:pan_axis
 8090 2a72 DB6F     		ldr	r3, [r3, #124]	@ float
 8091 2a74 1846     		mov	r0, r3
 8092 2a76 FFF7FEFF 		bl	__aeabi_f2d
 8093 2a7a 0246     		mov	r2, r0
 8094 2a7c 0B46     		mov	r3, r1
 8095 2a7e 40F20000 		movw	r0, #:lower16:.LC388
 8096 2a82 C0F20000 		movt	r0, #:upper16:.LC388
 8097 2a86 FFF7FEFF 		bl	printf
1990:.\console.c   **** 					printf("   ASTIM(T)=%+5.1f [step]\r\n", (float)tilt_axis.mc.Float_ASTIM);
 8098              		.loc 1 1990 0
 8099 2a8a 40F20003 		movw	r3, #:lower16:tilt_axis
 8100 2a8e C0F20003 		movt	r3, #:upper16:tilt_axis
 8101 2a92 DB6F     		ldr	r3, [r3, #124]	@ float
 8102 2a94 1846     		mov	r0, r3
 8103 2a96 FFF7FEFF 		bl	__aeabi_f2d
 8104 2a9a 0246     		mov	r2, r0
 8105 2a9c 0B46     		mov	r3, r1
 8106 2a9e 40F20000 		movw	r0, #:lower16:.LC389
 8107 2aa2 C0F20000 		movt	r0, #:upper16:.LC389
 8108 2aa6 FFF7FEFF 		bl	printf
1991:.\console.c   **** 					CyDelay(10);
 8109              		.loc 1 1991 0
 8110 2aaa 4FF00A00 		mov	r0, #10
 8111 2aae FFF7FEFF 		bl	CyDelay
 8112              	.L276:
1986:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8113              		.loc 1 1986 0 discriminator 1
 8114 2ab2 FFF7FEFF 		bl	AnyButtonPressed
 8115 2ab6 0346     		mov	r3, r0
 8116 2ab8 002B     		cmp	r3, #0
 8117 2aba C9D0     		beq	.L277
1992:.\console.c   **** 				}
1993:.\console.c   **** 				goto exitpars;	
 8118              		.loc 1 1993 0
 8119 2abc 04F0F8B9 		b	.L131
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 227


 8120              	.L275:
1994:.\console.c   **** 			}
1995:.\console.c   **** 			// END SHOW astim			
1996:.\console.c   **** 			
1997:.\console.c   **** 			
1998:.\console.c   **** #if ITG_3701_ENABLED			
1999:.\console.c   **** 			// SHOW ITG-3701 DIGITAL GYRO
2000:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "itg3701") == 0)	
2001:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "3701") == 0))
2002:.\console.c   **** 			{
2003:.\console.c   **** 				// Verify HW connection
2004:.\console.c   **** 				dummy = ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_WHO_AM_I);  // Read WHO_AM_I register for ITG
2005:.\console.c   **** 			  	printf("ITG3701 gyro; I AM 0x%02X (should be 0x68)\r\n",(uint16)dummy);
2006:.\console.c   **** 				CyDelay(1);
2007:.\console.c   **** 				
2008:.\console.c   **** //				// Initialize ITG-3701 gyro
2009:.\console.c   **** //				initITG3701();
2010:.\console.c   **** 
2011:.\console.c   **** //			    // Calibrate gyro loading biases in bias registers
2012:.\console.c   **** //			    gyrocalITG3701(gyroBias);
2013:.\console.c   **** 
2014:.\console.c   **** //				// get sensor resolutions, only need to do this once (calculates gRes)
2015:.\console.c   **** //			   	getGres();	
2016:.\console.c   **** 			   	printf("ITG3701 gyro sensitivity is %1.4f LSB/dps\r\n", (float)1.0/(gRes));	
2017:.\console.c   **** 				
2018:.\console.c   **** 				// verify and print sensor resolution HW register
2019:.\console.c   **** 				dummy = ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_GYRO_CONFIG); // Read ITG3701_GYRO_CONFIG reg
2020:.\console.c   **** 				printf("ITG3701_GYRO_CONFIG = 0x%02X\r\n\r\n",(uint16)dummy);
2021:.\console.c   **** 				
2022:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2023:.\console.c   **** 				{
2024:.\console.c   **** 					if (ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_INT_STATUS) & 0x01)  // check if new gyro data i
2025:.\console.c   **** 					{
2026:.\console.c   **** 						readGyroData(gyroCount);  // Read the x/y/z adc values
2027:.\console.c   **** 
2028:.\console.c   **** 					    // Calculate the gyro value into actual degrees per second
2029:.\console.c   **** 					    gx = (float)gyroCount[0]*gRes - gyroBias[0];  // get actual gyro value, this depends on sc
2030:.\console.c   **** 					    gy = (float)gyroCount[1]*gRes - gyroBias[1];  
2031:.\console.c   **** 					    gz = (float)gyroCount[2]*gRes - gyroBias[2]; 
2032:.\console.c   **** 					}
2033:.\console.c   **** 					printf("gx=%1.4f gy=%1.4f gz=%1.4f\r\n",(float)gx, (float)gy, (float)gz);
2034:.\console.c   **** 					CyDelay(50);
2035:.\console.c   **** 				}
2036:.\console.c   **** 				goto exitpars;	
2037:.\console.c   **** 			}
2038:.\console.c   **** 			// SHOW ITG-3701 DIGITAL GYRO END			
2039:.\console.c   **** #endif
2040:.\console.c   **** 
2041:.\console.c   **** #if IMU_UM7_ENABLED
2042:.\console.c   **** 			// SHOW IMU CHR-UM7-LT CH ROBOTICS (rgatti code)
2043:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuum7") == 0)	
2044:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imu") == 0))
2045:.\console.c   **** 			{
2046:.\console.c   **** 				//IMU_UM7_PACKETIZER_Debug(true);
2047:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2048:.\console.c   **** 				{	
2049:.\console.c   **** 					print_euler_angles(&euler_angles);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 228


2050:.\console.c   **** 					
2051:.\console.c   **** //					if(IMU_UM7_Error())
2052:.\console.c   **** //					{
2053:.\console.c   **** 						printf(" Serial errors=%d", IMU_UM7_serial_errors_count);
2054:.\console.c   **** //					}
2055:.\console.c   **** 					
2056:.\console.c   **** 					printf("\r\n");	
2057:.\console.c   **** 					CyDelay(50);
2058:.\console.c   **** 				}
2059:.\console.c   **** 				goto exitpars;	
2060:.\console.c   **** 			}
2061:.\console.c   **** 			// SHOW IMU CHR-UM7-LT CH ROBOTICS (rgatti code) END
2062:.\console.c   **** 			
2063:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SETTINGS (rgatti code)
2064:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuset") == 0)	
2065:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imusettings") == 0))
2066:.\console.c   **** 			{	
2067:.\console.c   **** //				isr_CTRL_Stop();				/* Stop Control ISR						 	 	 */
2068:.\console.c   **** //				CyDelay(10);	
2069:.\console.c   **** 				
2070:.\console.c   **** 				IMU_UM7_Stop();					/* Stop CH ROBOTICS UM7-LT IMU (rgatti code) 	 */				
2071:.\console.c   **** 				IMU_UM7_UART_ClearRxBuffer();	/* Clear IMU-UM7 Psoc HW Component RX Buffer	 */				
2072:.\console.c   **** 				IMU_UM7_InitAndStart();			/* Re-Start CH ROBOTICS UM7-LT IMU (rgatti code) */	
2073:.\console.c   **** 				CyDelay(10);					
2074:.\console.c   **** 				IMU_UM7_PrintSettings();
2075:.\console.c   **** 				
2076:.\console.c   **** 				printf("\r\nERRORS:");
2077:.\console.c   **** 				printf("\r\n  Serial errors=%d", IMU_UM7_serial_errors_count);
2078:.\console.c   **** 				
2079:.\console.c   **** 				printf("\r\n");	
2080:.\console.c   **** 				CyDelay(50);
2081:.\console.c   **** 			
2082:.\console.c   **** 				IMU_UM7_Stop();					/* Stop CH ROBOTICS UM7-LT IMU (rgatti code) 	*/
2083:.\console.c   **** 				IMU_UM7_UART_ClearRxBuffer();	/* Clear IMU-UM7 Psoc HW Component RX Buffer	*/				
2084:.\console.c   **** 				IMU_UM7_InitAndStart();			/* Re-Start CH ROBOTICS UM7-LT IMU (rgatti code)*/
2085:.\console.c   **** 				
2086:.\console.c   **** //				CyDelay(10);				
2087:.\console.c   **** //				isr_CTRL_Start();				/* Re-Start Control ISR				 	 	 	*/
2088:.\console.c   **** 					
2089:.\console.c   **** 				goto exitpars;	
2090:.\console.c   **** 			}
2091:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SETTINGS (rgatti code) END	
2092:.\console.c   **** 			
2093:.\console.c   **** 			
2094:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SERIAL ERRORS (rgatti code)
2095:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuerr") == 0)	
2096:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imuerrors") == 0))
2097:.\console.c   **** 			{	
2098:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2099:.\console.c   **** 				{					
2100:.\console.c   **** 					printf("\r\nIMU UM7-LT Serial errors=%d", IMU_UM7_serial_errors_count);
2101:.\console.c   **** 					CyDelay(50);
2102:.\console.c   **** 				}
2103:.\console.c   **** 				printf("\r\n");	
2104:.\console.c   **** 
2105:.\console.c   **** 				goto exitpars;	
2106:.\console.c   **** 			}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 229


2107:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SERIAL ERRORS (rgatti code) END				
2108:.\console.c   **** #endif			
2109:.\console.c   **** 
2110:.\console.c   **** 			// SHOW BIKE EULER ANGLES
2111:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "bikeangles") == 0)	
 8121              		.loc 1 2111 0
 8122 2ac0 B348     		ldr	r0, .L726
 8123 2ac2 40F20001 		movw	r1, #:lower16:.LC390
 8124 2ac6 C0F20001 		movt	r1, #:upper16:.LC390
 8125 2aca FFF7FEFF 		bl	strcmp
 8126 2ace 0346     		mov	r3, r0
 8127 2ad0 002B     		cmp	r3, #0
 8128 2ad2 39D0     		beq	.L688
2112:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "bike") == 0))
 8129              		.loc 1 2112 0
 8130 2ad4 AE48     		ldr	r0, .L726
 8131 2ad6 40F20001 		movw	r1, #:lower16:.LC391
 8132 2ada C0F20001 		movt	r1, #:upper16:.LC391
 8133 2ade FFF7FEFF 		bl	strcmp
 8134 2ae2 0346     		mov	r3, r0
 8135 2ae4 002B     		cmp	r3, #0
 8136 2ae6 37D1     		bne	.L279
2113:.\console.c   **** 			{
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8137              		.loc 1 2114 0
 8138 2ae8 2EE0     		b	.L688
 8139              	.L281:
2115:.\console.c   **** 				{	
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
2117:.\console.c   **** 							(float)IMU_sensor.bike_yaw_lpf,
 8140              		.loc 1 2117 0
 8141 2aea 40F20003 		movw	r3, #:lower16:IMU_sensor
 8142 2aee C0F20003 		movt	r3, #:upper16:IMU_sensor
 8143 2af2 DB68     		ldr	r3, [r3, #12]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8144              		.loc 1 2116 0
 8145 2af4 1846     		mov	r0, r3
 8146 2af6 FFF7FEFF 		bl	__aeabi_f2d
 8147 2afa 0446     		mov	r4, r0
 8148 2afc 0D46     		mov	r5, r1
2118:.\console.c   **** 							(float)IMU_sensor.bike_pitch_lpf,
 8149              		.loc 1 2118 0
 8150 2afe 40F20003 		movw	r3, #:lower16:IMU_sensor
 8151 2b02 C0F20003 		movt	r3, #:upper16:IMU_sensor
 8152 2b06 1B69     		ldr	r3, [r3, #16]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8153              		.loc 1 2116 0
 8154 2b08 1846     		mov	r0, r3
 8155 2b0a FFF7FEFF 		bl	__aeabi_f2d
 8156 2b0e 8046     		mov	r8, r0
 8157 2b10 8946     		mov	r9, r1
2119:.\console.c   **** 							(float)IMU_sensor.bike_roll_lpf);
 8158              		.loc 1 2119 0
 8159 2b12 40F20003 		movw	r3, #:lower16:IMU_sensor
 8160 2b16 C0F20003 		movt	r3, #:upper16:IMU_sensor
 8161 2b1a 5B69     		ldr	r3, [r3, #20]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 230


 8162              		.loc 1 2116 0
 8163 2b1c 1846     		mov	r0, r3
 8164 2b1e FFF7FEFF 		bl	__aeabi_f2d
 8165 2b22 0246     		mov	r2, r0
 8166 2b24 0B46     		mov	r3, r1
 8167 2b26 CDE90089 		strd	r8, [sp]
 8168 2b2a CDE90223 		strd	r2, [sp, #8]
 8169 2b2e 40F20000 		movw	r0, #:lower16:.LC392
 8170 2b32 C0F20000 		movt	r0, #:upper16:.LC392
 8171 2b36 2246     		mov	r2, r4
 8172 2b38 2B46     		mov	r3, r5
 8173 2b3a FFF7FEFF 		bl	printf
2120:.\console.c   **** 					CyDelay(50);
 8174              		.loc 1 2120 0
 8175 2b3e 4FF03200 		mov	r0, #50
 8176 2b42 FFF7FEFF 		bl	CyDelay
 8177 2b46 00E0     		b	.L280
 8178              	.L688:
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8179              		.loc 1 2114 0
 8180 2b48 00BF     		nop
 8181              	.L280:
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8182              		.loc 1 2114 0 is_stmt 0 discriminator 1
 8183 2b4a FFF7FEFF 		bl	AnyButtonPressed
 8184 2b4e 0346     		mov	r3, r0
 8185 2b50 002B     		cmp	r3, #0
 8186 2b52 CAD0     		beq	.L281
2121:.\console.c   **** 				}
2122:.\console.c   **** 				goto exitpars;	
 8187              		.loc 1 2122 0 is_stmt 1
 8188 2b54 04F0ACB9 		b	.L131
 8189              	.L279:
2123:.\console.c   **** 			}
2124:.\console.c   **** 			// BIKE EULER ANGLES END			
2125:.\console.c   **** 
2126:.\console.c   **** 			
2127:.\console.c   **** 			// SHOW ANALOG 3D ACCELEROMETER
2128:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "analogacc") == 0)	
 8190              		.loc 1 2128 0
 8191 2b58 8D48     		ldr	r0, .L726
 8192 2b5a 40F20001 		movw	r1, #:lower16:.LC393
 8193 2b5e C0F20001 		movt	r1, #:upper16:.LC393
 8194 2b62 FFF7FEFF 		bl	strcmp
 8195 2b66 0346     		mov	r3, r0
 8196 2b68 002B     		cmp	r3, #0
 8197 2b6a 00F08180 		beq	.L689
2129:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "aacc") == 0))
 8198              		.loc 1 2129 0
 8199 2b6e 8848     		ldr	r0, .L726
 8200 2b70 40F20001 		movw	r1, #:lower16:.LC394
 8201 2b74 C0F20001 		movt	r1, #:upper16:.LC394
 8202 2b78 FFF7FEFF 		bl	strcmp
 8203 2b7c 0346     		mov	r3, r0
 8204 2b7e 002B     		cmp	r3, #0
 8205 2b80 7ED1     		bne	.L283
2130:.\console.c   **** 			{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 231


2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8206              		.loc 1 2131 0
 8207 2b82 75E0     		b	.L689
 8208              	.L285:
2132:.\console.c   **** 				{
2133:.\console.c   **** 					printf("x=%+1.4f[g] (%5i)", (float) aacc.x_axis.acceleration_lpf, (int16)aacc.x_axis.ADC);
 8209              		.loc 1 2133 0
 8210 2b84 40F20003 		movw	r3, #:lower16:aacc
 8211 2b88 C0F20003 		movt	r3, #:upper16:aacc
 8212 2b8c DB68     		ldr	r3, [r3, #12]	@ float
 8213 2b8e 1846     		mov	r0, r3
 8214 2b90 FFF7FEFF 		bl	__aeabi_f2d
 8215 2b94 0446     		mov	r4, r0
 8216 2b96 0D46     		mov	r5, r1
 8217 2b98 40F20003 		movw	r3, #:lower16:aacc
 8218 2b9c C0F20003 		movt	r3, #:upper16:aacc
 8219 2ba0 1B88     		ldrh	r3, [r3, #0]
 8220 2ba2 1BB2     		sxth	r3, r3
 8221 2ba4 0093     		str	r3, [sp, #0]
 8222 2ba6 40F20000 		movw	r0, #:lower16:.LC395
 8223 2baa C0F20000 		movt	r0, #:upper16:.LC395
 8224 2bae 2246     		mov	r2, r4
 8225 2bb0 2B46     		mov	r3, r5
 8226 2bb2 FFF7FEFF 		bl	printf
2134:.\console.c   **** 					printf(" y=%+1.4f[g] (%5i)", (float) aacc.y_axis.acceleration_lpf, (int16)aacc.y_axis.ADC);			
 8227              		.loc 1 2134 0
 8228 2bb6 40F20003 		movw	r3, #:lower16:aacc
 8229 2bba C0F20003 		movt	r3, #:upper16:aacc
 8230 2bbe DB69     		ldr	r3, [r3, #28]	@ float
 8231 2bc0 1846     		mov	r0, r3
 8232 2bc2 FFF7FEFF 		bl	__aeabi_f2d
 8233 2bc6 0446     		mov	r4, r0
 8234 2bc8 0D46     		mov	r5, r1
 8235 2bca 40F20003 		movw	r3, #:lower16:aacc
 8236 2bce C0F20003 		movt	r3, #:upper16:aacc
 8237 2bd2 1B8A     		ldrh	r3, [r3, #16]
 8238 2bd4 1BB2     		sxth	r3, r3
 8239 2bd6 0093     		str	r3, [sp, #0]
 8240 2bd8 40F20000 		movw	r0, #:lower16:.LC396
 8241 2bdc C0F20000 		movt	r0, #:upper16:.LC396
 8242 2be0 2246     		mov	r2, r4
 8243 2be2 2B46     		mov	r3, r5
 8244 2be4 FFF7FEFF 		bl	printf
2135:.\console.c   **** 					printf(" z=%+1.4f[g] (%5i)", (float) aacc.z_axis.acceleration_lpf, (int16)aacc.z_axis.ADC);
 8245              		.loc 1 2135 0
 8246 2be8 40F20003 		movw	r3, #:lower16:aacc
 8247 2bec C0F20003 		movt	r3, #:upper16:aacc
 8248 2bf0 DB6A     		ldr	r3, [r3, #44]	@ float
 8249 2bf2 1846     		mov	r0, r3
 8250 2bf4 FFF7FEFF 		bl	__aeabi_f2d
 8251 2bf8 0446     		mov	r4, r0
 8252 2bfa 0D46     		mov	r5, r1
 8253 2bfc 40F20003 		movw	r3, #:lower16:aacc
 8254 2c00 C0F20003 		movt	r3, #:upper16:aacc
 8255 2c04 1B8C     		ldrh	r3, [r3, #32]
 8256 2c06 1BB2     		sxth	r3, r3
 8257 2c08 0093     		str	r3, [sp, #0]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 232


 8258 2c0a 40F20000 		movw	r0, #:lower16:.LC397
 8259 2c0e C0F20000 		movt	r0, #:upper16:.LC397
 8260 2c12 2246     		mov	r2, r4
 8261 2c14 2B46     		mov	r3, r5
 8262 2c16 FFF7FEFF 		bl	printf
2136:.\console.c   **** 					printf(" modulo=%+1.4f[g]", (float) aacc.modulo);					
 8263              		.loc 1 2136 0
 8264 2c1a 40F20003 		movw	r3, #:lower16:aacc
 8265 2c1e C0F20003 		movt	r3, #:upper16:aacc
 8266 2c22 5B6B     		ldr	r3, [r3, #52]	@ float
 8267 2c24 1846     		mov	r0, r3
 8268 2c26 FFF7FEFF 		bl	__aeabi_f2d
 8269 2c2a 0246     		mov	r2, r0
 8270 2c2c 0B46     		mov	r3, r1
 8271 2c2e 40F20000 		movw	r0, #:lower16:.LC398
 8272 2c32 C0F20000 		movt	r0, #:upper16:.LC398
 8273 2c36 FFF7FEFF 		bl	printf
2137:.\console.c   **** 					printf(" sdyn=%+1.4f[g^2]", (float) aacc.system_dynamic_scalar);
 8274              		.loc 1 2137 0
 8275 2c3a 40F20003 		movw	r3, #:lower16:aacc
 8276 2c3e C0F20003 		movt	r3, #:upper16:aacc
 8277 2c42 9B6B     		ldr	r3, [r3, #56]	@ float
 8278 2c44 1846     		mov	r0, r3
 8279 2c46 FFF7FEFF 		bl	__aeabi_f2d
 8280 2c4a 0246     		mov	r2, r0
 8281 2c4c 0B46     		mov	r3, r1
 8282 2c4e 40F20000 		movw	r0, #:lower16:.LC399
 8283 2c52 C0F20000 		movt	r0, #:upper16:.LC399
 8284 2c56 FFF7FEFF 		bl	printf
2138:.\console.c   **** 
2139:.\console.c   **** 					printf("\r\n");	
 8285              		.loc 1 2139 0
 8286 2c5a 40F20000 		movw	r0, #:lower16:.LC42
 8287 2c5e C0F20000 		movt	r0, #:upper16:.LC42
 8288 2c62 FFF7FEFF 		bl	puts
2140:.\console.c   **** 					CyDelay(50);
 8289              		.loc 1 2140 0
 8290 2c66 4FF03200 		mov	r0, #50
 8291 2c6a FFF7FEFF 		bl	CyDelay
 8292 2c6e 00E0     		b	.L284
 8293              	.L689:
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8294              		.loc 1 2131 0
 8295 2c70 00BF     		nop
 8296              	.L284:
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8297              		.loc 1 2131 0 is_stmt 0 discriminator 1
 8298 2c72 FFF7FEFF 		bl	AnyButtonPressed
 8299 2c76 0346     		mov	r3, r0
 8300 2c78 002B     		cmp	r3, #0
 8301 2c7a 83D0     		beq	.L285
2141:.\console.c   **** 				}
2142:.\console.c   **** 				goto exitpars;	
 8302              		.loc 1 2142 0 is_stmt 1
 8303 2c7c 04F018B9 		b	.L131
 8304              	.L283:
2143:.\console.c   **** 			}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 233


2144:.\console.c   **** 			// SHOW ANALOG 3D ACCELEROMETER END
2145:.\console.c   **** 
2146:.\console.c   **** 			
2147:.\console.c   **** 			// SHOW ESTIMATED EVENTS
2148:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "events") == 0)	
 8305              		.loc 1 2148 0
 8306 2c80 4348     		ldr	r0, .L726
 8307 2c82 40F20001 		movw	r1, #:lower16:.LC400
 8308 2c86 C0F20001 		movt	r1, #:upper16:.LC400
 8309 2c8a FFF7FEFF 		bl	strcmp
 8310 2c8e 0346     		mov	r3, r0
 8311 2c90 002B     		cmp	r3, #0
 8312 2c92 69D0     		beq	.L690
2149:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "event") == 0)
 8313              		.loc 1 2149 0
 8314 2c94 3E48     		ldr	r0, .L726
 8315 2c96 40F20001 		movw	r1, #:lower16:.LC401
 8316 2c9a C0F20001 		movt	r1, #:upper16:.LC401
 8317 2c9e FFF7FEFF 		bl	strcmp
 8318 2ca2 0346     		mov	r3, r0
 8319 2ca4 002B     		cmp	r3, #0
 8320 2ca6 5FD0     		beq	.L690
2150:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "mapsm") == 0))			
 8321              		.loc 1 2150 0
 8322 2ca8 3948     		ldr	r0, .L726
 8323 2caa 40F20001 		movw	r1, #:lower16:.LC402
 8324 2cae C0F20001 		movt	r1, #:upper16:.LC402
 8325 2cb2 FFF7FEFF 		bl	strcmp
 8326 2cb6 0346     		mov	r3, r0
 8327 2cb8 002B     		cmp	r3, #0
 8328 2cba 5DD1     		bne	.L287
2151:.\console.c   **** 			{
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8329              		.loc 1 2152 0
 8330 2cbc 54E0     		b	.L690
 8331              	.L289:
2153:.\console.c   **** 				{
2154:.\console.c   **** 					printf("Events");
 8332              		.loc 1 2154 0
 8333 2cbe 40F20000 		movw	r0, #:lower16:.LC403
 8334 2cc2 C0F20000 		movt	r0, #:upper16:.LC403
 8335 2cc6 FFF7FEFF 		bl	printf
2155:.\console.c   **** 					printf(" on_origin_ticks=%ld", (uint32)events.timecode.on_origin_ticks);					
 8336              		.loc 1 2155 0
 8337 2cca 40F20003 		movw	r3, #:lower16:events
 8338 2cce C0F20003 		movt	r3, #:upper16:events
 8339 2cd2 DB68     		ldr	r3, [r3, #12]
 8340 2cd4 40F20000 		movw	r0, #:lower16:.LC404
 8341 2cd8 C0F20000 		movt	r0, #:upper16:.LC404
 8342 2cdc 1946     		mov	r1, r3
 8343 2cde FFF7FEFF 		bl	printf
2156:.\console.c   **** 					printf(" angle_tilt=%2i", (uint16)events.inertial.tilt_angle);
 8344              		.loc 1 2156 0
 8345 2ce2 40F20003 		movw	r3, #:lower16:events
 8346 2ce6 C0F20003 		movt	r3, #:upper16:events
 8347 2cea 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 8348 2cec 40F20000 		movw	r0, #:lower16:.LC405
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 234


 8349 2cf0 C0F20000 		movt	r0, #:upper16:.LC405
 8350 2cf4 1946     		mov	r1, r3
 8351 2cf6 FFF7FEFF 		bl	printf
2157:.\console.c   **** 					printf(" vibration=%2i", (uint16)events.inertial.vibration);	
 8352              		.loc 1 2157 0
 8353 2cfa 40F20003 		movw	r3, #:lower16:events
 8354 2cfe C0F20003 		movt	r3, #:upper16:events
 8355 2d02 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8356 2d04 40F20000 		movw	r0, #:lower16:.LC406
 8357 2d08 C0F20000 		movt	r0, #:upper16:.LC406
 8358 2d0c 1946     		mov	r1, r3
 8359 2d0e FFF7FEFF 		bl	printf
2158:.\console.c   **** 					printf(" jump=%2i", (uint16)events.inertial.jump);						
 8360              		.loc 1 2158 0
 8361 2d12 40F20003 		movw	r3, #:lower16:events
 8362 2d16 C0F20003 		movt	r3, #:upper16:events
 8363 2d1a 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 8364 2d1c 40F20000 		movw	r0, #:lower16:.LC407
 8365 2d20 C0F20000 		movt	r0, #:upper16:.LC407
 8366 2d24 1946     		mov	r1, r3
 8367 2d26 FFF7FEFF 		bl	printf
2159:.\console.c   **** 					printf(" sm=%3i ", (uint16)events.mapping_sm_status);
 8368              		.loc 1 2159 0
 8369 2d2a 40F20003 		movw	r3, #:lower16:events
 8370 2d2e C0F20003 		movt	r3, #:upper16:events
 8371 2d32 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8372 2d34 40F20000 		movw	r0, #:lower16:.LC408
 8373 2d38 C0F20000 		movt	r0, #:upper16:.LC408
 8374 2d3c 1946     		mov	r1, r3
 8375 2d3e FFF7FEFF 		bl	printf
2160:.\console.c   **** 					ShowStatusMappingSM(events.mapping_sm_status);
 8376              		.loc 1 2160 0
 8377 2d42 40F20003 		movw	r3, #:lower16:events
 8378 2d46 C0F20003 		movt	r3, #:upper16:events
 8379 2d4a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8380 2d4c 1846     		mov	r0, r3
 8381 2d4e FFF7FEFF 		bl	ShowStatusMappingSM
2161:.\console.c   **** 					printf("\r\n");	
 8382              		.loc 1 2161 0
 8383 2d52 40F20000 		movw	r0, #:lower16:.LC42
 8384 2d56 C0F20000 		movt	r0, #:upper16:.LC42
 8385 2d5a FFF7FEFF 		bl	puts
2162:.\console.c   **** 					CyDelay(50);
 8386              		.loc 1 2162 0
 8387 2d5e 4FF03200 		mov	r0, #50
 8388 2d62 FFF7FEFF 		bl	CyDelay
 8389 2d66 00E0     		b	.L288
 8390              	.L690:
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8391              		.loc 1 2152 0
 8392 2d68 00BF     		nop
 8393              	.L288:
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8394              		.loc 1 2152 0 is_stmt 0 discriminator 1
 8395 2d6a FFF7FEFF 		bl	AnyButtonPressed
 8396 2d6e 0346     		mov	r3, r0
 8397 2d70 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 235


 8398 2d72 A4D0     		beq	.L289
2163:.\console.c   **** 				}
2164:.\console.c   **** 				goto exitpars;	
 8399              		.loc 1 2164 0 is_stmt 1
 8400 2d74 04F09CB8 		b	.L131
 8401              	.L287:
2165:.\console.c   **** 			}
2166:.\console.c   **** 			// SHOW ESTIMATED EVENTS END			
2167:.\console.c   **** 
2168:.\console.c   **** 			
2169:.\console.c   **** 			// SHOW CLU STATE MACHINE
2170:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "clusm") == 0)
 8402              		.loc 1 2170 0
 8403 2d78 0548     		ldr	r0, .L726
 8404 2d7a 40F20001 		movw	r1, #:lower16:.LC409
 8405 2d7e C0F20001 		movt	r1, #:upper16:.LC409
 8406 2d82 FFF7FEFF 		bl	strcmp
 8407 2d86 0346     		mov	r3, r0
 8408 2d88 002B     		cmp	r3, #0
 8409 2d8a 52D1     		bne	.L290
2171:.\console.c   **** 			{
2172:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8410              		.loc 1 2172 0
 8411 2d8c 4AE0     		b	.L291
 8412              	.L727:
 8413 2d8e 00BF     		.align	2
 8414              	.L726:
 8415 2d90 0F000000 		.word	actual_cmd+15
 8416              	.L292:
2173:.\console.c   **** 				{
2174:.\console.c   **** 					printf("CLU SM: ");					
 8417              		.loc 1 2174 0
 8418 2d94 40F20000 		movw	r0, #:lower16:.LC410
 8419 2d98 C0F20000 		movt	r0, #:upper16:.LC410
 8420 2d9c FFF7FEFF 		bl	printf
2175:.\console.c   **** 					printf(" number=%3i", (uint16)clu_sm.clunumber);
 8421              		.loc 1 2175 0
 8422 2da0 40F20003 		movw	r3, #:lower16:clu_sm
 8423 2da4 C0F20003 		movt	r3, #:upper16:clu_sm
 8424 2da8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 8425 2daa 40F20000 		movw	r0, #:lower16:.LC411
 8426 2dae C0F20000 		movt	r0, #:upper16:.LC411
 8427 2db2 1946     		mov	r1, r3
 8428 2db4 FFF7FEFF 		bl	printf
2176:.\console.c   **** 					printf(" line=%3i", (uint16)clu_sm.cluline);
 8429              		.loc 1 2176 0
 8430 2db8 40F20003 		movw	r3, #:lower16:clu_sm
 8431 2dbc C0F20003 		movt	r3, #:upper16:clu_sm
 8432 2dc0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 8433 2dc2 40F20000 		movw	r0, #:lower16:.LC412
 8434 2dc6 C0F20000 		movt	r0, #:upper16:.LC412
 8435 2dca 1946     		mov	r1, r3
 8436 2dcc FFF7FEFF 		bl	printf
2177:.\console.c   **** 					printf(" pauseticks=%3i", (uint16)clu_sm.pauseticks);					
 8437              		.loc 1 2177 0
 8438 2dd0 40F20003 		movw	r3, #:lower16:clu_sm
 8439 2dd4 C0F20003 		movt	r3, #:upper16:clu_sm
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 236


 8440 2dd8 9B88     		ldrh	r3, [r3, #4]
 8441 2dda 40F20000 		movw	r0, #:lower16:.LC413
 8442 2dde C0F20000 		movt	r0, #:upper16:.LC413
 8443 2de2 1946     		mov	r1, r3
 8444 2de4 FFF7FEFF 		bl	printf
2178:.\console.c   **** 					printf(" status=%3i ", (uint16)clu_sm.status);	
 8445              		.loc 1 2178 0
 8446 2de8 40F20003 		movw	r3, #:lower16:clu_sm
 8447 2dec C0F20003 		movt	r3, #:upper16:clu_sm
 8448 2df0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8449 2df2 40F20000 		movw	r0, #:lower16:.LC414
 8450 2df6 C0F20000 		movt	r0, #:upper16:.LC414
 8451 2dfa 1946     		mov	r1, r3
 8452 2dfc FFF7FEFF 		bl	printf
2179:.\console.c   **** 					ShowCLUSM(clu_sm.status);					
 8453              		.loc 1 2179 0
 8454 2e00 40F20003 		movw	r3, #:lower16:clu_sm
 8455 2e04 C0F20003 		movt	r3, #:upper16:clu_sm
 8456 2e08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8457 2e0a 1846     		mov	r0, r3
 8458 2e0c FFF7FEFF 		bl	ShowCLUSM
2180:.\console.c   **** 					printf("\r\n");	
 8459              		.loc 1 2180 0
 8460 2e10 40F20000 		movw	r0, #:lower16:.LC42
 8461 2e14 C0F20000 		movt	r0, #:upper16:.LC42
 8462 2e18 FFF7FEFF 		bl	puts
2181:.\console.c   **** 					CyDelay(50);
 8463              		.loc 1 2181 0
 8464 2e1c 4FF03200 		mov	r0, #50
 8465 2e20 FFF7FEFF 		bl	CyDelay
 8466              	.L291:
2172:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8467              		.loc 1 2172 0 discriminator 1
 8468 2e24 FFF7FEFF 		bl	AnyButtonPressed
 8469 2e28 0346     		mov	r3, r0
 8470 2e2a 002B     		cmp	r3, #0
 8471 2e2c B2D0     		beq	.L292
2182:.\console.c   **** 				}
2183:.\console.c   **** 				goto exitpars;	
 8472              		.loc 1 2183 0
 8473 2e2e 04F03FB8 		b	.L131
 8474              	.L290:
2184:.\console.c   **** 			}
2185:.\console.c   **** 			// SHOW CLU STATE MACHINE END
2186:.\console.c   **** 			
2187:.\console.c   **** 			
2188:.\console.c   **** 			// SHOW BUTTONS
2189:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "buttons") == 0)	
 8475              		.loc 1 2189 0
 8476 2e32 C848     		ldr	r0, .L728
 8477 2e34 40F20001 		movw	r1, #:lower16:.LC415
 8478 2e38 C0F20001 		movt	r1, #:upper16:.LC415
 8479 2e3c FFF7FEFF 		bl	strcmp
 8480 2e40 0346     		mov	r3, r0
 8481 2e42 002B     		cmp	r3, #0
 8482 2e44 42D0     		beq	.L691
2190:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "but") == 0))
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 237


 8483              		.loc 1 2190 0
 8484 2e46 C348     		ldr	r0, .L728
 8485 2e48 40F20001 		movw	r1, #:lower16:.LC416
 8486 2e4c C0F20001 		movt	r1, #:upper16:.LC416
 8487 2e50 FFF7FEFF 		bl	strcmp
 8488 2e54 0346     		mov	r3, r0
 8489 2e56 002B     		cmp	r3, #0
 8490 2e58 40D1     		bne	.L294
2191:.\console.c   **** 			{
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8491              		.loc 1 2192 0
 8492 2e5a 37E0     		b	.L691
 8493              	.L299:
2193:.\console.c   **** 				{
2194:.\console.c   **** 					printf("BUTTONS = %3i", (uint16)Status_Reg_BUTTON_Read());
 8494              		.loc 1 2194 0
 8495 2e5c FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8496 2e60 0346     		mov	r3, r0
 8497 2e62 40F20000 		movw	r0, #:lower16:.LC417
 8498 2e66 C0F20000 		movt	r0, #:upper16:.LC417
 8499 2e6a 1946     		mov	r1, r3
 8500 2e6c FFF7FEFF 		bl	printf
2195:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_ON)
 8501              		.loc 1 2195 0
 8502 2e70 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8503 2e74 0346     		mov	r3, r0
 8504 2e76 012B     		cmp	r3, #1
 8505 2e78 06D1     		bne	.L296
2196:.\console.c   **** 					{
2197:.\console.c   **** 						printf(" (ON)");
 8506              		.loc 1 2197 0
 8507 2e7a 40F20000 		movw	r0, #:lower16:.LC418
 8508 2e7e C0F20000 		movt	r0, #:upper16:.LC418
 8509 2e82 FFF7FEFF 		bl	printf
 8510 2e86 16E0     		b	.L297
 8511              	.L296:
2198:.\console.c   **** 					}
2199:.\console.c   **** 					else
2200:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_CW)					
 8512              		.loc 1 2200 0
 8513 2e88 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8514 2e8c 0346     		mov	r3, r0
 8515 2e8e 022B     		cmp	r3, #2
 8516 2e90 06D1     		bne	.L298
2201:.\console.c   **** 					{
2202:.\console.c   **** 						printf(" (CW)");
 8517              		.loc 1 2202 0
 8518 2e92 40F20000 		movw	r0, #:lower16:.LC419
 8519 2e96 C0F20000 		movt	r0, #:upper16:.LC419
 8520 2e9a FFF7FEFF 		bl	printf
 8521 2e9e 0AE0     		b	.L297
 8522              	.L298:
2203:.\console.c   **** 					}
2204:.\console.c   **** 					else
2205:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_CCW)					
 8523              		.loc 1 2205 0
 8524 2ea0 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 238


 8525 2ea4 0346     		mov	r3, r0
 8526 2ea6 042B     		cmp	r3, #4
 8527 2ea8 05D1     		bne	.L297
2206:.\console.c   **** 					{
2207:.\console.c   **** 						printf(" (CCW)");
 8528              		.loc 1 2207 0
 8529 2eaa 40F20000 		movw	r0, #:lower16:.LC420
 8530 2eae C0F20000 		movt	r0, #:upper16:.LC420
 8531 2eb2 FFF7FEFF 		bl	printf
 8532              	.L297:
2208:.\console.c   **** 					}	
2209:.\console.c   **** 					printf("\r\n");	
 8533              		.loc 1 2209 0
 8534 2eb6 40F20000 		movw	r0, #:lower16:.LC42
 8535 2eba C0F20000 		movt	r0, #:upper16:.LC42
 8536 2ebe FFF7FEFF 		bl	puts
2210:.\console.c   **** 					CyDelay(50);
 8537              		.loc 1 2210 0
 8538 2ec2 4FF03200 		mov	r0, #50
 8539 2ec6 FFF7FEFF 		bl	CyDelay
 8540 2eca 00E0     		b	.L295
 8541              	.L691:
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8542              		.loc 1 2192 0
 8543 2ecc 00BF     		nop
 8544              	.L295:
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8545              		.loc 1 2192 0 is_stmt 0 discriminator 1
 8546 2ece FFF7FEFF 		bl	AnyButtonPressed
 8547 2ed2 0346     		mov	r3, r0
 8548 2ed4 002B     		cmp	r3, #0
 8549 2ed6 C1D0     		beq	.L299
2211:.\console.c   **** 				}
2212:.\console.c   **** 				goto exitpars;	
 8550              		.loc 1 2212 0 is_stmt 1
 8551 2ed8 03F0EABF 		b	.L131
 8552              	.L294:
2213:.\console.c   **** 			}
2214:.\console.c   **** 			// SHOW BUTTONS END
2215:.\console.c   **** 
2216:.\console.c   **** 
2217:.\console.c   **** 			// SHOW SYSDYN (SYSTEM DYNAMIC ACCELERATION SCALAR)
2218:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "sysdyn") == 0)	
 8553              		.loc 1 2218 0
 8554 2edc 9D48     		ldr	r0, .L728
 8555 2ede 40F20001 		movw	r1, #:lower16:.LC421
 8556 2ee2 C0F20001 		movt	r1, #:upper16:.LC421
 8557 2ee6 FFF7FEFF 		bl	strcmp
 8558 2eea 0346     		mov	r3, r0
 8559 2eec 002B     		cmp	r3, #0
 8560 2eee 25D0     		beq	.L692
2219:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "sdyn") == 0))
 8561              		.loc 1 2219 0
 8562 2ef0 9848     		ldr	r0, .L728
 8563 2ef2 40F20001 		movw	r1, #:lower16:.LC422
 8564 2ef6 C0F20001 		movt	r1, #:upper16:.LC422
 8565 2efa FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 239


 8566 2efe 0346     		mov	r3, r0
 8567 2f00 002B     		cmp	r3, #0
 8568 2f02 23D1     		bne	.L301
2220:.\console.c   **** 			{
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8569              		.loc 1 2221 0
 8570 2f04 1AE0     		b	.L692
 8571              	.L303:
2222:.\console.c   **** 				{
2223:.\console.c   **** 					printf("System Dynamic Scalar=%1.8f  [xacc_ADC^2+yacc_ADC^2-(1g_ADC)^2]", (float)aacc.system_d
 8572              		.loc 1 2223 0
 8573 2f06 40F20003 		movw	r3, #:lower16:aacc
 8574 2f0a C0F20003 		movt	r3, #:upper16:aacc
 8575 2f0e 9B6B     		ldr	r3, [r3, #56]	@ float
 8576 2f10 1846     		mov	r0, r3
 8577 2f12 FFF7FEFF 		bl	__aeabi_f2d
 8578 2f16 0246     		mov	r2, r0
 8579 2f18 0B46     		mov	r3, r1
 8580 2f1a 40F20000 		movw	r0, #:lower16:.LC423
 8581 2f1e C0F20000 		movt	r0, #:upper16:.LC423
 8582 2f22 FFF7FEFF 		bl	printf
2224:.\console.c   **** 					printf("\r\n");	
 8583              		.loc 1 2224 0
 8584 2f26 40F20000 		movw	r0, #:lower16:.LC42
 8585 2f2a C0F20000 		movt	r0, #:upper16:.LC42
 8586 2f2e FFF7FEFF 		bl	puts
2225:.\console.c   **** 					CyDelay(50);
 8587              		.loc 1 2225 0
 8588 2f32 4FF03200 		mov	r0, #50
 8589 2f36 FFF7FEFF 		bl	CyDelay
 8590 2f3a 00E0     		b	.L302
 8591              	.L692:
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8592              		.loc 1 2221 0
 8593 2f3c 00BF     		nop
 8594              	.L302:
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8595              		.loc 1 2221 0 is_stmt 0 discriminator 1
 8596 2f3e FFF7FEFF 		bl	AnyButtonPressed
 8597 2f42 0346     		mov	r3, r0
 8598 2f44 002B     		cmp	r3, #0
 8599 2f46 DED0     		beq	.L303
2226:.\console.c   **** 				}
2227:.\console.c   **** 				goto exitpars;	
 8600              		.loc 1 2227 0 is_stmt 1
 8601 2f48 03F0B2BF 		b	.L131
 8602              	.L301:
2228:.\console.c   **** 			}
2229:.\console.c   **** 			// END SHOW SYSDYN (SYSTEM DYNAMIC ACCELERATION SCALAR)
2230:.\console.c   **** 
2231:.\console.c   **** 			
2232:.\console.c   **** 			// SHOW RELATIVE AND ABSOLUTE POSITION
2233:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "position") == 0)	
 8603              		.loc 1 2233 0
 8604 2f4c 8148     		ldr	r0, .L728
 8605 2f4e 40F20001 		movw	r1, #:lower16:.LC424
 8606 2f52 C0F20001 		movt	r1, #:upper16:.LC424
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 240


 8607 2f56 FFF7FEFF 		bl	strcmp
 8608 2f5a 0346     		mov	r3, r0
 8609 2f5c 002B     		cmp	r3, #0
 8610 2f5e 6DD0     		beq	.L693
2234:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "pos") == 0))
 8611              		.loc 1 2234 0
 8612 2f60 7C48     		ldr	r0, .L728
 8613 2f62 40F20001 		movw	r1, #:lower16:.LC425
 8614 2f66 C0F20001 		movt	r1, #:upper16:.LC425
 8615 2f6a FFF7FEFF 		bl	strcmp
 8616 2f6e 0346     		mov	r3, r0
 8617 2f70 002B     		cmp	r3, #0
 8618 2f72 6BD1     		bne	.L305
2235:.\console.c   **** 			{
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8619              		.loc 1 2236 0
 8620 2f74 62E0     		b	.L693
 8621              	.L307:
2237:.\console.c   **** 				{
2238:.\console.c   **** 					printf("PAN: enc(t)=%+ld [step]", (int32)pan_axis.mc.slave_enc.position);
 8622              		.loc 1 2238 0
 8623 2f76 40F20003 		movw	r3, #:lower16:pan_axis
 8624 2f7a C0F20003 		movt	r3, #:upper16:pan_axis
 8625 2f7e 5B6C     		ldr	r3, [r3, #68]
 8626 2f80 40F20000 		movw	r0, #:lower16:.LC109
 8627 2f84 C0F20000 		movt	r0, #:upper16:.LC109
 8628 2f88 1946     		mov	r1, r3
 8629 2f8a FFF7FEFF 		bl	printf
2239:.\console.c   **** 					printf(" abs_pos(t)=%+ld [step]", (int32)pan_absolute_sensor.position);
 8630              		.loc 1 2239 0
 8631 2f8e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 8632 2f92 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 8633 2f96 5B68     		ldr	r3, [r3, #4]	@ float
 8634 2f98 1846     		mov	r0, r3
 8635 2f9a FFF7FEFF 		bl	__aeabi_f2iz
 8636 2f9e 0346     		mov	r3, r0
 8637 2fa0 40F20000 		movw	r0, #:lower16:.LC426
 8638 2fa4 C0F20000 		movt	r0, #:upper16:.LC426
 8639 2fa8 1946     		mov	r1, r3
 8640 2faa FFF7FEFF 		bl	printf
2240:.\console.c   **** 					printf(" (%+3.2f [rad])", (float)pan_absolute_sensor.angle_rad);
 8641              		.loc 1 2240 0
 8642 2fae 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 8643 2fb2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 8644 2fb6 1B69     		ldr	r3, [r3, #16]	@ float
 8645 2fb8 1846     		mov	r0, r3
 8646 2fba FFF7FEFF 		bl	__aeabi_f2d
 8647 2fbe 0246     		mov	r2, r0
 8648 2fc0 0B46     		mov	r3, r1
 8649 2fc2 40F20000 		movw	r0, #:lower16:.LC427
 8650 2fc6 C0F20000 		movt	r0, #:upper16:.LC427
 8651 2fca FFF7FEFF 		bl	printf
2241:.\console.c   **** 					printf("    TILT: enc(t)=%+ld [step]", (int32)tilt_axis.mc.slave_enc.position);
 8652              		.loc 1 2241 0
 8653 2fce 40F20003 		movw	r3, #:lower16:tilt_axis
 8654 2fd2 C0F20003 		movt	r3, #:upper16:tilt_axis
 8655 2fd6 5B6C     		ldr	r3, [r3, #68]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 241


 8656 2fd8 40F20000 		movw	r0, #:lower16:.LC428
 8657 2fdc C0F20000 		movt	r0, #:upper16:.LC428
 8658 2fe0 1946     		mov	r1, r3
 8659 2fe2 FFF7FEFF 		bl	printf
2242:.\console.c   **** 					printf(" abs_pos(t)=%+ld [step]", (int32)tilt_absolute_sensor.position);					
 8660              		.loc 1 2242 0
 8661 2fe6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 8662 2fea C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 8663 2fee 5B68     		ldr	r3, [r3, #4]	@ float
 8664 2ff0 1846     		mov	r0, r3
 8665 2ff2 FFF7FEFF 		bl	__aeabi_f2iz
 8666 2ff6 0346     		mov	r3, r0
 8667 2ff8 40F20000 		movw	r0, #:lower16:.LC426
 8668 2ffc C0F20000 		movt	r0, #:upper16:.LC426
 8669 3000 1946     		mov	r1, r3
 8670 3002 FFF7FEFF 		bl	printf
2243:.\console.c   **** 					printf(" (%+3.2f [rad])", (float)tilt_absolute_sensor.angle_rad);
 8671              		.loc 1 2243 0
 8672 3006 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 8673 300a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 8674 300e 1B69     		ldr	r3, [r3, #16]	@ float
 8675 3010 1846     		mov	r0, r3
 8676 3012 FFF7FEFF 		bl	__aeabi_f2d
 8677 3016 0246     		mov	r2, r0
 8678 3018 0B46     		mov	r3, r1
 8679 301a 40F20000 		movw	r0, #:lower16:.LC427
 8680 301e C0F20000 		movt	r0, #:upper16:.LC427
 8681 3022 FFF7FEFF 		bl	printf
2244:.\console.c   **** 					printf("\r\n");	
 8682              		.loc 1 2244 0
 8683 3026 40F20000 		movw	r0, #:lower16:.LC42
 8684 302a C0F20000 		movt	r0, #:upper16:.LC42
 8685 302e FFF7FEFF 		bl	puts
2245:.\console.c   **** 					CyDelay(50);
 8686              		.loc 1 2245 0
 8687 3032 4FF03200 		mov	r0, #50
 8688 3036 FFF7FEFF 		bl	CyDelay
 8689 303a 00E0     		b	.L306
 8690              	.L693:
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8691              		.loc 1 2236 0
 8692 303c 00BF     		nop
 8693              	.L306:
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8694              		.loc 1 2236 0 is_stmt 0 discriminator 1
 8695 303e FFF7FEFF 		bl	AnyButtonPressed
 8696 3042 0346     		mov	r3, r0
 8697 3044 002B     		cmp	r3, #0
 8698 3046 96D0     		beq	.L307
2246:.\console.c   **** 				}
2247:.\console.c   **** 				goto exitpars;	
 8699              		.loc 1 2247 0 is_stmt 1
 8700 3048 03F032BF 		b	.L131
 8701              	.L305:
2248:.\console.c   **** 			}
2249:.\console.c   **** 			// END SHOW RELATIVE AND ABSOLUTE POSITION
2250:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 242


2251:.\console.c   **** 			
2252:.\console.c   **** 			// SHOW ENCODERS FEEDBACK
2253:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "encfbk") == 0)	
 8702              		.loc 1 2253 0
 8703 304c 4148     		ldr	r0, .L728
 8704 304e 40F20001 		movw	r1, #:lower16:.LC429
 8705 3052 C0F20001 		movt	r1, #:upper16:.LC429
 8706 3056 FFF7FEFF 		bl	strcmp
 8707 305a 0346     		mov	r3, r0
 8708 305c 002B     		cmp	r3, #0
 8709 305e 09D0     		beq	.L308
2254:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "encf") == 0))
 8710              		.loc 1 2254 0
 8711 3060 3C48     		ldr	r0, .L728
 8712 3062 40F20001 		movw	r1, #:lower16:.LC430
 8713 3066 C0F20001 		movt	r1, #:upper16:.LC430
 8714 306a FFF7FEFF 		bl	strcmp
 8715 306e 0346     		mov	r3, r0
 8716 3070 002B     		cmp	r3, #0
 8717 3072 42D1     		bne	.L309
 8718              	.L308:
2255:.\console.c   **** 			{
2256:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 8719              		.loc 1 2256 0
 8720 3074 40F20000 		movw	r0, #:lower16:.LC431
 8721 3078 C0F20000 		movt	r0, #:upper16:.LC431
 8722 307c FFF7FEFF 		bl	puts
2257:.\console.c   **** 				printf(STR_SHOWENCFB);			//
 8723              		.loc 1 2257 0
 8724 3080 40F20000 		movw	r0, #:lower16:.LC432
 8725 3084 C0F20000 		movt	r0, #:upper16:.LC432
 8726 3088 FFF7FEFF 		bl	printf
2258:.\console.c   **** 			
2259:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 8727              		.loc 1 2259 0
 8728 308c 4FF00100 		mov	r0, #1
 8729 3090 FFF7FEFF 		bl	ButtonYNChoice
 8730 3094 0346     		mov	r3, r0
 8731 3096 012B     		cmp	r3, #1
 8732 3098 43F0FF86 		bne	.L694
2260:.\console.c   **** 				{
2261:.\console.c   **** 					isr_CTRL_Stop();				/* Stop Control ISR					*/
 8733              		.loc 1 2261 0
 8734 309c FFF7FEFF 		bl	isr_CTRL_Stop
2262:.\console.c   **** 
2263:.\console.c   **** 					PWM_MOTOR_PAN_WriteCompare(MOTOR_PWM_PERIOD_HALF);
 8735              		.loc 1 2263 0
 8736 30a0 4FF40070 		mov	r0, #512
 8737 30a4 FFF7FEFF 		bl	PWM_MOTOR_PAN_WriteCompare
2264:.\console.c   **** 					PWM_MOTOR_TILT_WriteCompare(MOTOR_PWM_PERIOD_HALF);
 8738              		.loc 1 2264 0
 8739 30a8 4FF40070 		mov	r0, #512
 8740 30ac FFF7FEFF 		bl	PWM_MOTOR_TILT_WriteCompare
2265:.\console.c   **** 					
2266:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 8741              		.loc 1 2266 0
 8742 30b0 18E0     		b	.L311
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 243


 8743              	.L313:
2267:.\console.c   **** 					{
2268:.\console.c   **** 						printf("PAN_FBK=%8ld", (int32)QuadDec_PAN_GetCounter());
 8744              		.loc 1 2268 0
 8745 30b2 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 8746 30b6 0346     		mov	r3, r0
 8747 30b8 40F20000 		movw	r0, #:lower16:.LC433
 8748 30bc C0F20000 		movt	r0, #:upper16:.LC433
 8749 30c0 1946     		mov	r1, r3
 8750 30c2 FFF7FEFF 		bl	printf
2269:.\console.c   **** 						printf("  TILT_FBK=%8ld\r\n", (int32)QuadDec_TILT_GetCounter());
 8751              		.loc 1 2269 0
 8752 30c6 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 8753 30ca 0346     		mov	r3, r0
 8754 30cc 40F20000 		movw	r0, #:lower16:.LC434
 8755 30d0 C0F20000 		movt	r0, #:upper16:.LC434
 8756 30d4 1946     		mov	r1, r3
 8757 30d6 FFF7FEFF 		bl	printf
2270:.\console.c   **** 						//printf("  ROLL_FBK=%8ld \r\n", (int32)QuadDec_ROLL_GetCounter());							
2271:.\console.c   **** 
2272:.\console.c   **** 						if (AnyButtonPressed() == PRESSED)
 8758              		.loc 1 2272 0
 8759 30da FFF7FEFF 		bl	AnyButtonPressed
 8760 30de 0346     		mov	r3, r0
 8761 30e0 012B     		cmp	r3, #1
 8762 30e2 05D0     		beq	.L695
 8763              	.L311:
2266:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 8764              		.loc 1 2266 0 discriminator 1
 8765 30e4 FFF7FEFF 		bl	AnyButtonPressed
 8766 30e8 0346     		mov	r3, r0
 8767 30ea 002B     		cmp	r3, #0
 8768 30ec E1D0     		beq	.L313
 8769 30ee 00E0     		b	.L312
 8770              	.L695:
2273:.\console.c   **** 							goto exit_showencf;
 8771              		.loc 1 2273 0
 8772 30f0 00BF     		nop
 8773              	.L312:
2274:.\console.c   **** 					}
2275:.\console.c   **** exit_showencf:					
2276:.\console.c   **** 					isr_CTRL_Start();				/* RESTART Control ISR				*/	
 8774              		.loc 1 2276 0
 8775 30f2 FFF7FEFF 		bl	isr_CTRL_Start
2277:.\console.c   **** 				}	
2278:.\console.c   **** 				
2279:.\console.c   **** 				goto exitpars;	
 8776              		.loc 1 2279 0
 8777 30f6 03F0D0BE 		b	.L694
 8778              	.L309:
2280:.\console.c   **** 			}
2281:.\console.c   **** 			// SHOW ENCODERS FEEDBACK END			
2282:.\console.c   **** 			
2283:.\console.c   **** 			
2284:.\console.c   **** 			// SHOW MOTOR STATUS
2285:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "motorstatus") == 0)	
 8779              		.loc 1 2285 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 244


 8780 30fa 1648     		ldr	r0, .L728
 8781 30fc 40F20001 		movw	r1, #:lower16:.LC435
 8782 3100 C0F20001 		movt	r1, #:upper16:.LC435
 8783 3104 FFF7FEFF 		bl	strcmp
 8784 3108 0346     		mov	r3, r0
 8785 310a 002B     		cmp	r3, #0
 8786 310c 49D0     		beq	.L696
2286:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "mot") == 0))
 8787              		.loc 1 2286 0
 8788 310e 1148     		ldr	r0, .L728
 8789 3110 40F20001 		movw	r1, #:lower16:.LC436
 8790 3114 C0F20001 		movt	r1, #:upper16:.LC436
 8791 3118 FFF7FEFF 		bl	strcmp
 8792 311c 0346     		mov	r3, r0
 8793 311e 002B     		cmp	r3, #0
 8794 3120 47D1     		bne	.L315
2287:.\console.c   **** 			{
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8795              		.loc 1 2288 0
 8796 3122 3EE0     		b	.L696
 8797              	.L321:
2289:.\console.c   **** 				{
2290:.\console.c   **** 					printf("Motor Status=%2u ", (int16)Status_Reg_MOTORS_Read());
 8798              		.loc 1 2290 0
 8799 3124 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8800 3128 0346     		mov	r3, r0
 8801 312a 40F20000 		movw	r0, #:lower16:.LC437
 8802 312e C0F20000 		movt	r0, #:upper16:.LC437
 8803 3132 1946     		mov	r1, r3
 8804 3134 FFF7FEFF 		bl	printf
2291:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_PAN_MOT_FL) == 0)
 8805              		.loc 1 2291 0
 8806 3138 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8807 313c 0346     		mov	r3, r0
 8808 313e 03F00103 		and	r3, r3, #1
 8809 3142 002B     		cmp	r3, #0
 8810 3144 08D1     		bne	.L317
2292:.\console.c   **** 					{
2293:.\console.c   **** 						printf("PAN CURRENT PEAK!) ");	
 8811              		.loc 1 2293 0
 8812 3146 40F20000 		movw	r0, #:lower16:.LC438
 8813 314a C0F20000 		movt	r0, #:upper16:.LC438
 8814 314e FFF7FEFF 		bl	printf
 8815 3152 07E0     		b	.L318
 8816              	.L729:
 8817              		.align	2
 8818              	.L728:
 8819 3154 0F000000 		.word	actual_cmd+15
 8820              	.L317:
2294:.\console.c   **** 					}
2295:.\console.c   **** 					else
2296:.\console.c   **** 					{
2297:.\console.c   **** 						printf("(PAN CURRENT OK!)  ");						
 8821              		.loc 1 2297 0
 8822 3158 40F20000 		movw	r0, #:lower16:.LC439
 8823 315c C0F20000 		movt	r0, #:upper16:.LC439
 8824 3160 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 245


 8825              	.L318:
2298:.\console.c   **** 					}
2299:.\console.c   **** 					
2300:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_TILT_MOT_FL) == 0)
 8826              		.loc 1 2300 0
 8827 3164 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8828 3168 0346     		mov	r3, r0
 8829 316a 03F00203 		and	r3, r3, #2
 8830 316e 002B     		cmp	r3, #0
 8831 3170 06D1     		bne	.L319
2301:.\console.c   **** 					{
2302:.\console.c   **** 						printf("(TILT CURRENT PEAK!)");	
 8832              		.loc 1 2302 0
 8833 3172 40F20000 		movw	r0, #:lower16:.LC440
 8834 3176 C0F20000 		movt	r0, #:upper16:.LC440
 8835 317a FFF7FEFF 		bl	printf
 8836 317e 05E0     		b	.L320
 8837              	.L319:
2303:.\console.c   **** 					}
2304:.\console.c   **** 					else
2305:.\console.c   **** 					{
2306:.\console.c   **** 						printf("(TILT CURRENT OK!)");						
 8838              		.loc 1 2306 0
 8839 3180 40F20000 		movw	r0, #:lower16:.LC441
 8840 3184 C0F20000 		movt	r0, #:upper16:.LC441
 8841 3188 FFF7FEFF 		bl	printf
 8842              	.L320:
2307:.\console.c   **** 					}					
2308:.\console.c   **** 					
2309:.\console.c   **** 					printf("\r\n");	
 8843              		.loc 1 2309 0
 8844 318c 40F20000 		movw	r0, #:lower16:.LC42
 8845 3190 C0F20000 		movt	r0, #:upper16:.LC42
 8846 3194 FFF7FEFF 		bl	puts
2310:.\console.c   **** 					CyDelay(50);
 8847              		.loc 1 2310 0
 8848 3198 4FF03200 		mov	r0, #50
 8849 319c FFF7FEFF 		bl	CyDelay
 8850 31a0 00E0     		b	.L316
 8851              	.L696:
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8852              		.loc 1 2288 0
 8853 31a2 00BF     		nop
 8854              	.L316:
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8855              		.loc 1 2288 0 is_stmt 0 discriminator 1
 8856 31a4 FFF7FEFF 		bl	AnyButtonPressed
 8857 31a8 0346     		mov	r3, r0
 8858 31aa 002B     		cmp	r3, #0
 8859 31ac BAD0     		beq	.L321
2311:.\console.c   **** 				}
2312:.\console.c   **** 				goto exitpars;	
 8860              		.loc 1 2312 0 is_stmt 1
 8861 31ae 03F07FBE 		b	.L131
 8862              	.L315:
2313:.\console.c   **** 			}
2314:.\console.c   **** 			// END SHOW MOTOR STATUS			
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 246


2315:.\console.c   **** 
2316:.\console.c   **** 			
2317:.\console.c   **** //			// SHOW HOME SENSORS
2318:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "homesens") == 0)	
2319:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "hsens") == 0))
2320:.\console.c   **** //			{
2321:.\console.c   **** //				while (AnyButtonPressed() == NO_PRESSED)
2322:.\console.c   **** //				{
2323:.\console.c   **** //					//2 --> home pan (HOME_PAN = 4)
2324:.\console.c   **** //					//3 --> home tilt (HOME_TILT = 8)
2325:.\console.c   **** //					printf("R=%0x2; ", (int16)Status_Reg_MOTORS_Read());
2326:.\console.c   **** //					if ((Status_Reg_MOTORS_Read() & SR_HOME_PAN) == SR_HOME_PAN)
2327:.\console.c   **** //					{
2328:.\console.c   **** //						printf("HOME PAN=H; ");	
2329:.\console.c   **** //					}
2330:.\console.c   **** //					else
2331:.\console.c   **** //					{
2332:.\console.c   **** //						printf("HOME PAN=L; ");						
2333:.\console.c   **** //					}
2334:.\console.c   **** //
2335:.\console.c   **** //					if ((Status_Reg_MOTORS_Read() & SR_HOME_TILT) == SR_HOME_TILT)
2336:.\console.c   **** //					{
2337:.\console.c   **** //						printf("HOME TILT=H");	
2338:.\console.c   **** //					}
2339:.\console.c   **** //					else
2340:.\console.c   **** //					{
2341:.\console.c   **** //						printf("HOME TILT=L");						
2342:.\console.c   **** //					}
2343:.\console.c   **** //					
2344:.\console.c   **** //					printf("\r\n");	
2345:.\console.c   **** //					CyDelay(50);
2346:.\console.c   **** //				}
2347:.\console.c   **** //				goto exitpars;	
2348:.\console.c   **** //			}
2349:.\console.c   **** //			// END SHOW MOTOR STATUS			
2350:.\console.c   **** 			
2351:.\console.c   **** 			
2352:.\console.c   **** 			// SHOW Q (SHOT) N
2353:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "q") == 0)	
 8863              		.loc 1 2353 0
 8864 31b2 CB48     		ldr	r0, .L730
 8865 31b4 40F20001 		movw	r1, #:lower16:.LC272
 8866 31b8 C0F20001 		movt	r1, #:upper16:.LC272
 8867 31bc FFF7FEFF 		bl	strcmp
 8868 31c0 0346     		mov	r3, r0
 8869 31c2 002B     		cmp	r3, #0
 8870 31c4 0AD0     		beq	.L322
2354:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "shot") == 0))
 8871              		.loc 1 2354 0
 8872 31c6 C648     		ldr	r0, .L730
 8873 31c8 40F20001 		movw	r1, #:lower16:.LC442
 8874 31cc C0F20001 		movt	r1, #:upper16:.LC442
 8875 31d0 FFF7FEFF 		bl	strcmp
 8876 31d4 0346     		mov	r3, r0
 8877 31d6 002B     		cmp	r3, #0
 8878 31d8 40F04381 		bne	.L323
 8879              	.L322:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 247


2355:.\console.c   **** 			{
2356:.\console.c   **** 				if (strcmp(actual_cmd.number1, "all") == 0)
 8880              		.loc 1 2356 0
 8881 31dc C148     		ldr	r0, .L730+4
 8882 31de 40F20001 		movw	r1, #:lower16:.LC443
 8883 31e2 C0F20001 		movt	r1, #:upper16:.LC443
 8884 31e6 FFF7FEFF 		bl	strcmp
 8885 31ea 0346     		mov	r3, r0
 8886 31ec 002B     		cmp	r3, #0
 8887 31ee 44D1     		bne	.L324
 8888              	.LBB8:
2357:.\console.c   **** 				{
2358:.\console.c   **** 					int8 memory_num;
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8889              		.loc 1 2359 0
 8890 31f0 4FF00003 		mov	r3, #0
 8891 31f4 87F8FF30 		strb	r3, [r7, #255]
 8892 31f8 3AE0     		b	.L325
 8893              	.L328:
2360:.\console.c   **** 					{
2361:.\console.c   **** 						if (q[memory_num].number == Q_NUMBER_UNUSED)
 8894              		.loc 1 2361 0
 8895 31fa 97F9FF10 		ldrsb	r1, [r7, #255]
 8896 31fe 40F20002 		movw	r2, #:lower16:q
 8897 3202 C0F20002 		movt	r2, #:upper16:q
 8898 3206 0B46     		mov	r3, r1
 8899 3208 4FEAC303 		lsl	r3, r3, #3
 8900 320c 5B18     		adds	r3, r3, r1
 8901 320e 4FEA8303 		lsl	r3, r3, #2
 8902 3212 D318     		adds	r3, r2, r3
 8903 3214 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8904 3216 002B     		cmp	r3, #0
 8905 3218 0AD1     		bne	.L326
2362:.\console.c   **** 						{
2363:.\console.c   **** 							printf("QMemory%02d NOT ALLOCATED!\r\n",(uint16)memory_num);
 8906              		.loc 1 2363 0
 8907 321a 97F9FF30 		ldrsb	r3, [r7, #255]
 8908 321e 9BB2     		uxth	r3, r3
 8909 3220 40F20000 		movw	r0, #:lower16:.LC444
 8910 3224 C0F20000 		movt	r0, #:upper16:.LC444
 8911 3228 1946     		mov	r1, r3
 8912 322a FFF7FEFF 		bl	printf
 8913 322e 19E0     		b	.L327
 8914              	.L326:
2364:.\console.c   **** 						}
2365:.\console.c   **** 						else
2366:.\console.c   **** 						{
2367:.\console.c   **** 							printf("QMemory%02d allocated to Q%02d\r\n",(uint16)memory_num, (uint16)q[memory_num].number
 8915              		.loc 1 2367 0
 8916 3230 97F9FF30 		ldrsb	r3, [r7, #255]
 8917 3234 9BB2     		uxth	r3, r3
 8918 3236 1C46     		mov	r4, r3
 8919 3238 97F9FF10 		ldrsb	r1, [r7, #255]
 8920 323c 40F20002 		movw	r2, #:lower16:q
 8921 3240 C0F20002 		movt	r2, #:upper16:q
 8922 3244 0B46     		mov	r3, r1
 8923 3246 4FEAC303 		lsl	r3, r3, #3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 248


 8924 324a 5B18     		adds	r3, r3, r1
 8925 324c 4FEA8303 		lsl	r3, r3, #2
 8926 3250 D318     		adds	r3, r2, r3
 8927 3252 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8928 3254 40F20000 		movw	r0, #:lower16:.LC445
 8929 3258 C0F20000 		movt	r0, #:upper16:.LC445
 8930 325c 2146     		mov	r1, r4
 8931 325e 1A46     		mov	r2, r3
 8932 3260 FFF7FEFF 		bl	printf
 8933              	.L327:
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8934              		.loc 1 2359 0
 8935 3264 97F8FF30 		ldrb	r3, [r7, #255]
 8936 3268 03F10103 		add	r3, r3, #1
 8937 326c 87F8FF30 		strb	r3, [r7, #255]
 8938              	.L325:
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8939              		.loc 1 2359 0 is_stmt 0 discriminator 1
 8940 3270 97F9FF30 		ldrsb	r3, [r7, #255]
 8941 3274 202B     		cmp	r3, #32
 8942 3276 C0DD     		ble	.L328
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8943              		.loc 1 2359 0
 8944 3278 F1E0     		b	.L329
 8945              	.L324:
 8946              	.LBE8:
2368:.\console.c   **** 						}
2369:.\console.c   **** 					}
2370:.\console.c   **** 				}
2371:.\console.c   **** 				else if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 8947              		.loc 1 2371 0 is_stmt 1
 8948 327a 9A48     		ldr	r0, .L730+4
 8949 327c FFF7FEFF 		bl	atoi
 8950 3280 0346     		mov	r3, r0
 8951 3282 87F8E530 		strb	r3, [r7, #229]
 8952 3286 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 8953 328a 002B     		cmp	r3, #0
 8954 328c 00F0DF80 		beq	.L330
2372:.\console.c   **** 				&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 8955              		.loc 1 2372 0
 8956 3290 9448     		ldr	r0, .L730+4
 8957 3292 FFF7FEFF 		bl	atoi
 8958 3296 0346     		mov	r3, r0
 8959 3298 87F8E530 		strb	r3, [r7, #229]
 8960 329c 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 8961 32a0 632B     		cmp	r3, #99
 8962 32a2 00F2D480 		bhi	.L330
2373:.\console.c   **** 				{	
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 8963              		.loc 1 2374 0
 8964 32a6 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 8965 32aa 40F20003 		movw	r3, #:lower16:q_table
 8966 32ae C0F20003 		movt	r3, #:upper16:q_table
 8967 32b2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 8968 32b4 FF2B     		cmp	r3, #255
 8969 32b6 00F0C080 		beq	.L331
2375:.\console.c   **** 					{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 249


2376:.\console.c   **** 						//PAN 
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 8970              		.loc 1 2377 0
 8971 32ba 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
2378:.\console.c   **** 							(uint16)q_number,
2379:.\console.c   **** 							(int32)q[q_table[q_number]].mc.position[PAN_AXIS],							
 8972              		.loc 1 2379 0
 8973 32be 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 8974 32c2 40F20003 		movw	r3, #:lower16:q_table
 8975 32c6 C0F20003 		movt	r3, #:upper16:q_table
 8976 32ca 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 8977 32cc 1946     		mov	r1, r3
 8978 32ce 40F20002 		movw	r2, #:lower16:q
 8979 32d2 C0F20002 		movt	r2, #:upper16:q
 8980 32d6 0B46     		mov	r3, r1
 8981 32d8 4FEAC303 		lsl	r3, r3, #3
 8982 32dc 5B18     		adds	r3, r3, r1
 8983 32de 4FEA8303 		lsl	r3, r3, #2
 8984 32e2 D318     		adds	r3, r2, r3
 8985 32e4 03F11803 		add	r3, r3, #24
 8986 32e8 1B68     		ldr	r3, [r3, #0]	@ float
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 8987              		.loc 1 2377 0
 8988 32ea 1846     		mov	r0, r3
 8989 32ec FFF7FEFF 		bl	__aeabi_f2iz
 8990 32f0 0546     		mov	r5, r0
2380:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_default[PAN_AXIS].fnum,
 8991              		.loc 1 2380 0
 8992 32f2 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 8993 32f6 40F20003 		movw	r3, #:lower16:q_table
 8994 32fa C0F20003 		movt	r3, #:upper16:q_table
 8995 32fe 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 8996 3300 1946     		mov	r1, r3
 8997 3302 40F20002 		movw	r2, #:lower16:q
 8998 3306 C0F20002 		movt	r2, #:upper16:q
 8999 330a 0B46     		mov	r3, r1
 9000 330c 4FEAC303 		lsl	r3, r3, #3
 9001 3310 5B18     		adds	r3, r3, r1
 9002 3312 4FEA8303 		lsl	r3, r3, #2
 9003 3316 D318     		adds	r3, r2, r3
 9004 3318 03F10403 		add	r3, r3, #4
 9005 331c 1B68     		ldr	r3, [r3, #0]	@ float
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9006              		.loc 1 2377 0
 9007 331e 1846     		mov	r0, r3
 9008 3320 FFF7FEFF 		bl	__aeabi_f2iz
 9009 3324 0446     		mov	r4, r0
2381:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_adjust[PAN_AXIS]);
 9010              		.loc 1 2381 0
 9011 3326 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9012 332a 40F20003 		movw	r3, #:lower16:q_table
 9013 332e C0F20003 		movt	r3, #:upper16:q_table
 9014 3332 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9015 3334 1946     		mov	r1, r3
 9016 3336 40F20002 		movw	r2, #:lower16:q
 9017 333a C0F20002 		movt	r2, #:upper16:q
 9018 333e 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 250


 9019 3340 4FEAC303 		lsl	r3, r3, #3
 9020 3344 5B18     		adds	r3, r3, r1
 9021 3346 4FEA8303 		lsl	r3, r3, #2
 9022 334a D318     		adds	r3, r2, r3
 9023 334c 03F10803 		add	r3, r3, #8
 9024 3350 1B89     		ldrh	r3, [r3, #8]
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9025              		.loc 1 2377 0
 9026 3352 1BB2     		sxth	r3, r3
 9027 3354 0093     		str	r3, [sp, #0]
 9028 3356 40F20000 		movw	r0, #:lower16:.LC446
 9029 335a C0F20000 		movt	r0, #:upper16:.LC446
 9030 335e 3146     		mov	r1, r6
 9031 3360 2A46     		mov	r2, r5
 9032 3362 2346     		mov	r3, r4
 9033 3364 FFF7FEFF 		bl	printf
2382:.\console.c   **** 						
2383:.\console.c   **** 						//TILT
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9034              		.loc 1 2384 0
 9035 3368 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
2385:.\console.c   **** 							(uint16)q_number,
2386:.\console.c   **** 							(int32)q[q_table[q_number]].mc.position[TILT_AXIS],            							
 9036              		.loc 1 2386 0
 9037 336c 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9038 3370 40F20003 		movw	r3, #:lower16:q_table
 9039 3374 C0F20003 		movt	r3, #:upper16:q_table
 9040 3378 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9041 337a 1946     		mov	r1, r3
 9042 337c 40F20002 		movw	r2, #:lower16:q
 9043 3380 C0F20002 		movt	r2, #:upper16:q
 9044 3384 0B46     		mov	r3, r1
 9045 3386 4FEAC303 		lsl	r3, r3, #3
 9046 338a 5B18     		adds	r3, r3, r1
 9047 338c 4FEA8303 		lsl	r3, r3, #2
 9048 3390 D318     		adds	r3, r2, r3
 9049 3392 03F11C03 		add	r3, r3, #28
 9050 3396 1B68     		ldr	r3, [r3, #0]	@ float
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9051              		.loc 1 2384 0
 9052 3398 1846     		mov	r0, r3
 9053 339a FFF7FEFF 		bl	__aeabi_f2iz
 9054 339e 0546     		mov	r5, r0
2387:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_default[TILT_AXIS].fnum,
 9055              		.loc 1 2387 0
 9056 33a0 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9057 33a4 40F20003 		movw	r3, #:lower16:q_table
 9058 33a8 C0F20003 		movt	r3, #:upper16:q_table
 9059 33ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9060 33ae 1946     		mov	r1, r3
 9061 33b0 40F20002 		movw	r2, #:lower16:q
 9062 33b4 C0F20002 		movt	r2, #:upper16:q
 9063 33b8 0B46     		mov	r3, r1
 9064 33ba 4FEAC303 		lsl	r3, r3, #3
 9065 33be 5B18     		adds	r3, r3, r1
 9066 33c0 4FEA8303 		lsl	r3, r3, #2
 9067 33c4 D318     		adds	r3, r2, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 251


 9068 33c6 03F10803 		add	r3, r3, #8
 9069 33ca 1B68     		ldr	r3, [r3, #0]	@ float
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9070              		.loc 1 2384 0
 9071 33cc 1846     		mov	r0, r3
 9072 33ce FFF7FEFF 		bl	__aeabi_f2iz
 9073 33d2 0446     		mov	r4, r0
2388:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_adjust[TILT_AXIS]);	
 9074              		.loc 1 2388 0
 9075 33d4 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9076 33d8 40F20003 		movw	r3, #:lower16:q_table
 9077 33dc C0F20003 		movt	r3, #:upper16:q_table
 9078 33e0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9079 33e2 1946     		mov	r1, r3
 9080 33e4 40F20002 		movw	r2, #:lower16:q
 9081 33e8 C0F20002 		movt	r2, #:upper16:q
 9082 33ec 0B46     		mov	r3, r1
 9083 33ee 4FEAC303 		lsl	r3, r3, #3
 9084 33f2 5B18     		adds	r3, r3, r1
 9085 33f4 4FEA8303 		lsl	r3, r3, #2
 9086 33f8 D318     		adds	r3, r2, r3
 9087 33fa 03F10A03 		add	r3, r3, #10
 9088 33fe 1B89     		ldrh	r3, [r3, #8]
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9089              		.loc 1 2384 0
 9090 3400 1BB2     		sxth	r3, r3
 9091 3402 0093     		str	r3, [sp, #0]
 9092 3404 40F20000 		movw	r0, #:lower16:.LC447
 9093 3408 C0F20000 		movt	r0, #:upper16:.LC447
 9094 340c 3146     		mov	r1, r6
 9095 340e 2A46     		mov	r2, r5
 9096 3410 2346     		mov	r3, r4
 9097 3412 FFF7FEFF 		bl	printf
2389:.\console.c   **** 						
2390:.\console.c   **** 						//Memory number
2391:.\console.c   **** 						printf("\r\n(Q%02d is allocated in Q memory number %02d)\r\n", (uint16)q_number, (int16)q_tab
 9098              		.loc 1 2391 0
 9099 3416 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9100 341a 97F8E510 		ldrb	r1, [r7, #229]	@ zero_extendqisi2
 9101 341e 40F20003 		movw	r3, #:lower16:q_table
 9102 3422 C0F20003 		movt	r3, #:upper16:q_table
 9103 3426 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 9104 3428 40F20000 		movw	r0, #:lower16:.LC448
 9105 342c C0F20000 		movt	r0, #:upper16:.LC448
 9106 3430 1146     		mov	r1, r2
 9107 3432 1A46     		mov	r2, r3
 9108 3434 FFF7FEFF 		bl	printf
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 9109              		.loc 1 2374 0
 9110 3438 11E0     		b	.L329
 9111              	.L331:
2392:.\console.c   **** 					}
2393:.\console.c   **** 					else
2394:.\console.c   **** 					{
2395:.\console.c   **** 						printf("\r\nQ%02d is not allocated!\r\n", (uint16)q_number);
 9112              		.loc 1 2395 0
 9113 343a 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 252


 9114 343e 40F20000 		movw	r0, #:lower16:.LC449
 9115 3442 C0F20000 		movt	r0, #:upper16:.LC449
 9116 3446 1946     		mov	r1, r3
 9117 3448 FFF7FEFF 		bl	printf
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 9118              		.loc 1 2374 0
 9119 344c 07E0     		b	.L329
 9120              	.L330:
2396:.\console.c   **** 					}
2397:.\console.c   **** 				}
2398:.\console.c   **** 				else
2399:.\console.c   **** 				{
2400:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9121              		.loc 1 2400 0
 9122 344e 40F20000 		movw	r0, #:lower16:.LC450
 9123 3452 C0F20000 		movt	r0, #:upper16:.LC450
 9124 3456 FFF7FEFF 		bl	printf
2401:.\console.c   **** 				}
2402:.\console.c   **** 				goto exitpars;	
 9125              		.loc 1 2402 0
 9126 345a 03F029BD 		b	.L131
 9127              	.L329:
 9128 345e 03F027BD 		b	.L131
 9129              	.L323:
2403:.\console.c   **** 			}
2404:.\console.c   **** 			// END SHOW Q (SHOT) N
2405:.\console.c   **** 			
2406:.\console.c   **** 			
2407:.\console.c   **** //			// SHOW PATH N
2408:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "path") == 0)	
2409:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "pa") == 0))
2410:.\console.c   **** //			{
2411:.\console.c   **** //				if (((path_n = atoi(actual_cmd.number1)) >= 0)
2412:.\console.c   **** //				&& (path_n = atoi(actual_cmd.number1)) <= 64)
2413:.\console.c   **** //				{
2414:.\console.c   **** //					for (idx=0; idx<path[path_n].param.Trapezoid_Number; idx++)
2415:.\console.c   **** //					{
2416:.\console.c   **** //						printf(" Trapezoid num =%3i\r\n", (int16)idx);	
2417:.\console.c   **** //						printf(" Acc           =%+1.2f [%%]\r\n", (float)path[path_n].trapezoid[idx].param.acc_pc.f
2418:.\console.c   **** //						printf(" Dec           =%+1.2f [%%]\r\n", (float)path[path_n].trapezoid[idx].param.dec_pc.f
2419:.\console.c   **** //						printf(" Time          =%+1.2f [sec]\r\n", (float)path[path_n].trapezoid[idx].param.time_se
2420:.\console.c   **** //						printf(" Steps         =%+1.2f [step]\r\n", (float)path[path_n].trapezoid[idx].param.steps)
2421:.\console.c   **** //						printf(" Last_flg      =%3i [1=last]\r\n", (int16)path[path_n].trapezoid[idx].param.last_fl
2422:.\console.c   **** //						printf("----------------------------\r\n");
2423:.\console.c   **** //						printf(" Ticks Initial =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.ticks_i
2424:.\console.c   **** //						printf(" Acc EndPoint  =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.acc_end
2425:.\console.c   **** //						printf(" Dec StartPoint=%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.dec_sta
2426:.\console.c   **** //						printf(" Dec EndPoint  =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.dec_end
2427:.\console.c   **** //						printf(" Ticks Final   =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.ticks_f
2428:.\console.c   **** //						printf(" Acc Ticks     =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover
2429:.\console.c   **** //						printf(" Vconst Ticks  =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover
2430:.\console.c   **** //						printf(" Dec Ticks     =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover
2431:.\console.c   **** //						printf(" V initial     =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.
2432:.\console.c   **** //						printf(" Acc slope     =%+1.8f [step/ticks^2]\r\n", (float)path[path_n].trapezoid[idx].move
2433:.\console.c   **** //						printf(" V constant    =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.
2434:.\console.c   **** //						printf(" Dec slope     =%+1.8f [step/ticks^2]\r\n", (float)path[path_n].trapezoid[idx].move
2435:.\console.c   **** //						printf(" V final       =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 253


2436:.\console.c   **** //						printf("\r\n");						
2437:.\console.c   **** //					}				
2438:.\console.c   **** //				}
2439:.\console.c   **** //				else
2440:.\console.c   **** //				{
2441:.\console.c   **** //					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2442:.\console.c   **** //				}
2443:.\console.c   **** //				goto exitpars;	
2444:.\console.c   **** //			}
2445:.\console.c   **** //			// END SHOW PATH N				
2446:.\console.c   **** 
2447:.\console.c   **** 			
2448:.\console.c   **** //			// SHOW MOVER N
2449:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "mover") == 0)	
2450:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "mov") == 0))
2451:.\console.c   **** //			{	
2452:.\console.c   **** //				if (((path_n = atoi(actual_cmd.number1)) >= 0)
2453:.\console.c   **** //				&& (path_n = atoi(actual_cmd.number1)) <= 64)
2454:.\console.c   **** //				{				
2455:.\console.c   **** //					int32 steps_loc;
2456:.\console.c   **** //					int32 steps_integral_loc=0;
2457:.\console.c   **** //					
2458:.\console.c   **** //					MoverInit();	/* Initialize the Mover */
2459:.\console.c   **** //					
2460:.\console.c   **** //					while ((mover.ticks <= path[path_n].path_ticks_MAX) &&
2461:.\console.c   **** //						  (AnyButtonPressed() == NO_PRESSED))
2462:.\console.c   **** //					{
2463:.\console.c   **** //						steps_loc = MoverGeneratedSteps(&path[path_n], mover.ticks);
2464:.\console.c   **** //						steps_integral_loc = steps_integral_loc + steps_loc;
2465:.\console.c   **** //						
2466:.\console.c   **** //						printf("Ticks=%+ld [ticks]", (int32)mover.ticks);
2467:.\console.c   **** //						printf("  Steps=%+ld [step]", (int32)steps_loc);	
2468:.\console.c   **** //						printf("  Int(Steps)=%+ld [step]", (int32)steps_integral_loc);
2469:.\console.c   **** //						printf("  Mover_status=%2i", (int16)mover.status);							
2470:.\console.c   **** //						printf("\r\n");
2471:.\console.c   **** //						
2472:.\console.c   **** //						mover.ticks++;
2473:.\console.c   **** //					}
2474:.\console.c   **** //				}
2475:.\console.c   **** //				else
2476:.\console.c   **** //				{
2477:.\console.c   **** //					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2478:.\console.c   **** //				}					
2479:.\console.c   **** //				goto exitpars;	
2480:.\console.c   **** //			}
2481:.\console.c   **** //			// END SHOW MOVER N			
2482:.\console.c   **** 
2483:.\console.c   **** 			
2484:.\console.c   **** //			// SHOW MOVERS
2485:.\console.c   **** //			if (strcmp(actual_cmd.parameter, "movers") == 0)
2486:.\console.c   **** //			{	
2487:.\console.c   **** //				if (strlen(actual_cmd.number1) == 0)
2488:.\console.c   **** //				{			
2489:.\console.c   **** //					while (AnyButtonPressed() == NO_PRESSED)
2490:.\console.c   **** //					{
2491:.\console.c   **** //						printf("Movers Ticks=%+ld, %+ld [ticks]", (int32)mover_pan.ticks, (int32)mover_tilt.ticks);
2492:.\console.c   **** ////						printf("  Steps=%+ld [step]", (int32)steps_loc);	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 254


2493:.\console.c   **** ////						printf("  Int(Steps)=%+ld [step]", (int32)steps_integral_loc);
2494:.\console.c   **** //						printf("  status=%2i, %2i", (int16)mover_pan.status, (int16)mover_tilt.status);							
2495:.\console.c   **** //						printf("\r\n");
2496:.\console.c   **** //						CyDelay(50);						
2497:.\console.c   **** //					}
2498:.\console.c   **** //				}
2499:.\console.c   **** //				else
2500:.\console.c   **** //				{
2501:.\console.c   **** //					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2502:.\console.c   **** //				}					
2503:.\console.c   **** //				goto exitpars;	
2504:.\console.c   **** //			}
2505:.\console.c   **** //			// END SHOW MOVERS		
2506:.\console.c   **** 			
2507:.\console.c   **** 			// SHOW CLU N
2508:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "clu") == 0)
 9130              		.loc 1 2508 0
 9131 3462 1F48     		ldr	r0, .L730
 9132 3464 40F20001 		movw	r1, #:lower16:.LC451
 9133 3468 C0F20001 		movt	r1, #:upper16:.LC451
 9134 346c FFF7FEFF 		bl	strcmp
 9135 3470 0346     		mov	r3, r0
 9136 3472 002B     		cmp	r3, #0
 9137 3474 1ED1     		bne	.L333
2509:.\console.c   **** 			{	
2510:.\console.c   **** 				if (((clu_number = atoi(actual_cmd.number1)) >= 0)
 9138              		.loc 1 2510 0
 9139 3476 1B48     		ldr	r0, .L730+4
 9140 3478 FFF7FEFF 		bl	atoi
 9141 347c 0346     		mov	r3, r0
 9142 347e 87F8EA30 		strb	r3, [r7, #234]
2511:.\console.c   **** 				&& (clu_number = atoi(actual_cmd.number1)) < MAX_CLU_NUMBER)
 9143              		.loc 1 2511 0
 9144 3482 1848     		ldr	r0, .L730+4
 9145 3484 FFF7FEFF 		bl	atoi
 9146 3488 0346     		mov	r3, r0
 9147 348a 87F8EA30 		strb	r3, [r7, #234]
 9148 348e 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 9149 3492 312B     		cmp	r3, #49
 9150 3494 06D8     		bhi	.L334
2512:.\console.c   **** 				{				
2513:.\console.c   **** 					PrintClu(clu_number);
 9151              		.loc 1 2513 0
 9152 3496 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 9153 349a 1846     		mov	r0, r3
 9154 349c FFF7FEFF 		bl	PrintClu
2514:.\console.c   **** 				}
2515:.\console.c   **** 				else
2516:.\console.c   **** 				{
2517:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2518:.\console.c   **** 				}					
2519:.\console.c   **** 				goto exitpars;	
 9155              		.loc 1 2519 0
 9156 34a0 03F006BD 		b	.L131
 9157              	.L334:
2517:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9158              		.loc 1 2517 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 255


 9159 34a4 40F20000 		movw	r0, #:lower16:.LC450
 9160 34a8 C0F20000 		movt	r0, #:upper16:.LC450
 9161 34ac FFF7FEFF 		bl	printf
 9162              		.loc 1 2519 0
 9163 34b0 03F0FEBC 		b	.L131
 9164              	.L333:
2520:.\console.c   **** 			}
2521:.\console.c   **** 			// END SHOW CLU N			
2522:.\console.c   **** 			
2523:.\console.c   **** 			
2524:.\console.c   **** 			// SHOW PAN LIMITS
2525:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "panlimits") == 0)	
 9165              		.loc 1 2525 0
 9166 34b4 0A48     		ldr	r0, .L730
 9167 34b6 40F20001 		movw	r1, #:lower16:.LC452
 9168 34ba C0F20001 		movt	r1, #:upper16:.LC452
 9169 34be FFF7FEFF 		bl	strcmp
 9170 34c2 0346     		mov	r3, r0
 9171 34c4 002B     		cmp	r3, #0
 9172 34c6 2DD0     		beq	.L697
2526:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "plim") == 0))
 9173              		.loc 1 2526 0
 9174 34c8 0548     		ldr	r0, .L730
 9175 34ca 40F20001 		movw	r1, #:lower16:.LC453
 9176 34ce C0F20001 		movt	r1, #:upper16:.LC453
 9177 34d2 FFF7FEFF 		bl	strcmp
 9178 34d6 0346     		mov	r3, r0
 9179 34d8 002B     		cmp	r3, #0
 9180 34da 2BD1     		bne	.L337
2527:.\console.c   **** 			{
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9181              		.loc 1 2528 0
 9182 34dc 22E0     		b	.L697
 9183              	.L731:
 9184 34de 00BF     		.align	2
 9185              	.L730:
 9186 34e0 0F000000 		.word	actual_cmd+15
 9187 34e4 1E000000 		.word	actual_cmd+30
 9188              	.L339:
2529:.\console.c   **** 				{
2530:.\console.c   **** 			        printf("PAN LIMIT=%2u ", (uint16)pan_axis.lc.status);					
 9189              		.loc 1 2530 0
 9190 34e8 40F20003 		movw	r3, #:lower16:pan_axis
 9191 34ec C0F20003 		movt	r3, #:upper16:pan_axis
 9192 34f0 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 9193 34f4 40F20000 		movw	r0, #:lower16:.LC454
 9194 34f8 C0F20000 		movt	r0, #:upper16:.LC454
 9195 34fc 1946     		mov	r1, r3
 9196 34fe FFF7FEFF 		bl	printf
2531:.\console.c   **** 					ShowLimits(&pan_axis);
 9197              		.loc 1 2531 0
 9198 3502 40F20000 		movw	r0, #:lower16:pan_axis
 9199 3506 C0F20000 		movt	r0, #:upper16:pan_axis
 9200 350a FFF7FEFF 		bl	ShowLimits
2532:.\console.c   **** 					printf("\r\n");
 9201              		.loc 1 2532 0
 9202 350e 40F20000 		movw	r0, #:lower16:.LC42
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 256


 9203 3512 C0F20000 		movt	r0, #:upper16:.LC42
 9204 3516 FFF7FEFF 		bl	puts
2533:.\console.c   **** 					
2534:.\console.c   **** 					CyDelay(50);
 9205              		.loc 1 2534 0
 9206 351a 4FF03200 		mov	r0, #50
 9207 351e FFF7FEFF 		bl	CyDelay
 9208 3522 00E0     		b	.L338
 9209              	.L697:
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9210              		.loc 1 2528 0
 9211 3524 00BF     		nop
 9212              	.L338:
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9213              		.loc 1 2528 0 is_stmt 0 discriminator 1
 9214 3526 FFF7FEFF 		bl	AnyButtonPressed
 9215 352a 0346     		mov	r3, r0
 9216 352c 002B     		cmp	r3, #0
 9217 352e DBD0     		beq	.L339
2535:.\console.c   **** 				}
2536:.\console.c   **** 				goto exitpars;	
 9218              		.loc 1 2536 0 is_stmt 1
 9219 3530 03F0BEBC 		b	.L131
 9220              	.L337:
2537:.\console.c   **** 			}
2538:.\console.c   **** 			// SHOW PAN LIMITS END			
2539:.\console.c   **** 
2540:.\console.c   **** 			
2541:.\console.c   **** 			// SHOW TILT LIMITS
2542:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tiltlimits") == 0)	
 9221              		.loc 1 2542 0
 9222 3534 C848     		ldr	r0, .L732
 9223 3536 40F20001 		movw	r1, #:lower16:.LC455
 9224 353a C0F20001 		movt	r1, #:upper16:.LC455
 9225 353e FFF7FEFF 		bl	strcmp
 9226 3542 0346     		mov	r3, r0
 9227 3544 002B     		cmp	r3, #0
 9228 3546 28D0     		beq	.L698
2543:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "tlim") == 0))
 9229              		.loc 1 2543 0
 9230 3548 C348     		ldr	r0, .L732
 9231 354a 40F20001 		movw	r1, #:lower16:.LC456
 9232 354e C0F20001 		movt	r1, #:upper16:.LC456
 9233 3552 FFF7FEFF 		bl	strcmp
 9234 3556 0346     		mov	r3, r0
 9235 3558 002B     		cmp	r3, #0
 9236 355a 26D1     		bne	.L341
2544:.\console.c   **** 			{
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9237              		.loc 1 2545 0
 9238 355c 1DE0     		b	.L698
 9239              	.L343:
2546:.\console.c   **** 				{
2547:.\console.c   **** 			        printf("TILT LIMIT=%2u ", (uint16)tilt_axis.lc.status);
 9240              		.loc 1 2547 0
 9241 355e 40F20003 		movw	r3, #:lower16:tilt_axis
 9242 3562 C0F20003 		movt	r3, #:upper16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 257


 9243 3566 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 9244 356a 40F20000 		movw	r0, #:lower16:.LC457
 9245 356e C0F20000 		movt	r0, #:upper16:.LC457
 9246 3572 1946     		mov	r1, r3
 9247 3574 FFF7FEFF 		bl	printf
2548:.\console.c   **** 					ShowLimits(&tilt_axis);		
 9248              		.loc 1 2548 0
 9249 3578 40F20000 		movw	r0, #:lower16:tilt_axis
 9250 357c C0F20000 		movt	r0, #:upper16:tilt_axis
 9251 3580 FFF7FEFF 		bl	ShowLimits
2549:.\console.c   **** 					printf("\r\n");
 9252              		.loc 1 2549 0
 9253 3584 40F20000 		movw	r0, #:lower16:.LC42
 9254 3588 C0F20000 		movt	r0, #:upper16:.LC42
 9255 358c FFF7FEFF 		bl	puts
2550:.\console.c   **** 					
2551:.\console.c   **** 					CyDelay(50);
 9256              		.loc 1 2551 0
 9257 3590 4FF03200 		mov	r0, #50
 9258 3594 FFF7FEFF 		bl	CyDelay
 9259 3598 00E0     		b	.L342
 9260              	.L698:
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9261              		.loc 1 2545 0
 9262 359a 00BF     		nop
 9263              	.L342:
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9264              		.loc 1 2545 0 is_stmt 0 discriminator 1
 9265 359c FFF7FEFF 		bl	AnyButtonPressed
 9266 35a0 0346     		mov	r3, r0
 9267 35a2 002B     		cmp	r3, #0
 9268 35a4 DBD0     		beq	.L343
2552:.\console.c   **** 				}
2553:.\console.c   **** 				goto exitpars;	
 9269              		.loc 1 2553 0 is_stmt 1
 9270 35a6 03F083BC 		b	.L131
 9271              	.L341:
2554:.\console.c   **** 			}
2555:.\console.c   **** 			// SHOW TILT LIMITS END					
2556:.\console.c   **** 			
2557:.\console.c   **** 			
2558:.\console.c   **** 			// SHOW ABS RATIO PAN
2559:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0)	
 9272              		.loc 1 2559 0
 9273 35aa AB48     		ldr	r0, .L732
 9274 35ac 40F20001 		movw	r1, #:lower16:.LC458
 9275 35b0 C0F20001 		movt	r1, #:upper16:.LC458
 9276 35b4 FFF7FEFF 		bl	strcmp
 9277 35b8 0346     		mov	r3, r0
 9278 35ba 002B     		cmp	r3, #0
 9279 35bc 0AD0     		beq	.L344
2560:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ratiop") == 0))
 9280              		.loc 1 2560 0
 9281 35be A648     		ldr	r0, .L732
 9282 35c0 40F20001 		movw	r1, #:lower16:.LC459
 9283 35c4 C0F20001 		movt	r1, #:upper16:.LC459
 9284 35c8 FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 258


 9285 35cc 0346     		mov	r3, r0
 9286 35ce 002B     		cmp	r3, #0
 9287 35d0 40F0FF80 		bne	.L345
 9288              	.L344:
2561:.\console.c   **** 			{
2562:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 9289              		.loc 1 2562 0
 9290 35d4 40F20000 		movw	r0, #:lower16:.LC431
 9291 35d8 C0F20000 		movt	r0, #:upper16:.LC431
 9292 35dc FFF7FEFF 		bl	puts
2563:.\console.c   **** 				printf(STR_SHOWENCFC);			//
 9293              		.loc 1 2563 0
 9294 35e0 40F20000 		movw	r0, #:lower16:.LC460
 9295 35e4 C0F20000 		movt	r0, #:upper16:.LC460
 9296 35e8 FFF7FEFF 		bl	printf
2564:.\console.c   **** 			
2565:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 9297              		.loc 1 2565 0
 9298 35ec 4FF00100 		mov	r0, #1
 9299 35f0 FFF7FEFF 		bl	ButtonYNChoice
 9300 35f4 0346     		mov	r3, r0
 9301 35f6 012B     		cmp	r3, #1
 9302 35f8 40F0E780 		bne	.L346
2566:.\console.c   **** 				{
2567:.\console.c   **** 					isr_CTRL_Stop();					/* Stop Control ISR			*/	
 9303              		.loc 1 2567 0
 9304 35fc FFF7FEFF 		bl	isr_CTRL_Stop
2568:.\console.c   **** 					motor_init(&pan_axis);				/* Initialize Pan Axis  	*/
 9305              		.loc 1 2568 0
 9306 3600 40F20000 		movw	r0, #:lower16:pan_axis
 9307 3604 C0F20000 		movt	r0, #:upper16:pan_axis
 9308 3608 FFF7FEFF 		bl	motor_init
2569:.\console.c   **** 					motor_init(&tilt_axis);				/* Initialize Tilt Axis 	*/
 9309              		.loc 1 2569 0
 9310 360c 40F20000 		movw	r0, #:lower16:tilt_axis
 9311 3610 C0F20000 		movt	r0, #:upper16:tilt_axis
 9312 3614 FFF7FEFF 		bl	motor_init
2570:.\console.c   **** 					
2571:.\console.c   **** 					pan_absolute_sensor.ratio_tmp = 0;	//clear temporary ratio value
 9313              		.loc 1 2571 0
 9314 3618 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9315 361c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9316 3620 4FF00002 		mov	r2, #0
 9317 3624 9A62     		str	r2, [r3, #40]	@ float
2572:.\console.c   **** 					get_key = 0;						//clear internal loop getted char
 9318              		.loc 1 2572 0
 9319 3626 4FF00003 		mov	r3, #0
 9320 362a 87F81231 		strb	r3, [r7, #274]
2573:.\console.c   **** 					
2574:.\console.c   **** 					while (get_key == 0)						
 9321              		.loc 1 2574 0
 9322 362e C7E0     		b	.L347
 9323              	.L354:
2575:.\console.c   **** 					{						
2576:.\console.c   **** 						printf("PAN: ABS_SENSOR=%5i[lsb]", (int16)AdcValue[HOME_PAN_ABSV]);
 9324              		.loc 1 2576 0
 9325 3630 40F20003 		movw	r3, #:lower16:AdcValue
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 259


 9326 3634 C0F20003 		movt	r3, #:upper16:AdcValue
 9327 3638 9B89     		ldrh	r3, [r3, #12]
 9328 363a 1BB2     		sxth	r3, r3
 9329 363c 40F20000 		movw	r0, #:lower16:.LC461
 9330 3640 C0F20000 		movt	r0, #:upper16:.LC461
 9331 3644 1946     		mov	r1, r3
 9332 3646 FFF7FEFF 		bl	printf
2577:.\console.c   **** 						printf(" ENC=%9li[step]", (int32)QuadDec_PAN_GetCounter());	
 9333              		.loc 1 2577 0
 9334 364a FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9335 364e 0346     		mov	r3, r0
 9336 3650 40F20000 		movw	r0, #:lower16:.LC462
 9337 3654 C0F20000 		movt	r0, #:upper16:.LC462
 9338 3658 1946     		mov	r1, r3
 9339 365a FFF7FEFF 		bl	printf
2578:.\console.c   **** 						printf(" RATIO=%1.4f[step/lsb]",(float)pan_absolute_sensor.ratio_tmp);
 9340              		.loc 1 2578 0
 9341 365e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9342 3662 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9343 3666 9B6A     		ldr	r3, [r3, #40]	@ float
 9344 3668 1846     		mov	r0, r3
 9345 366a FFF7FEFF 		bl	__aeabi_f2d
 9346 366e 0246     		mov	r2, r0
 9347 3670 0B46     		mov	r3, r1
 9348 3672 40F20000 		movw	r0, #:lower16:.LC463
 9349 3676 C0F20000 		movt	r0, #:upper16:.LC463
 9350 367a FFF7FEFF 		bl	printf
2579:.\console.c   **** 						printf("\r\n");
 9351              		.loc 1 2579 0
 9352 367e 40F20000 		movw	r0, #:lower16:.LC42
 9353 3682 C0F20000 		movt	r0, #:upper16:.LC42
 9354 3686 FFF7FEFF 		bl	puts
2580:.\console.c   **** 						
2581:.\console.c   **** //						/******************************************************/
2582:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2583:.\console.c   **** //						/******************************************************/
2584:.\console.c   **** //						CyWdtClear();						
2585:.\console.c   **** 					
2586:.\console.c   **** 						/* internal one-key reset & sample */
2587:.\console.c   **** 						get_key = UART_USB_GetChar();	/* get the char */
 9355              		.loc 1 2587 0
 9356 368a FFF7FEFF 		bl	UART_USB_GetChar
 9357 368e 0346     		mov	r3, r0
 9358 3690 87F81231 		strb	r3, [r7, #274]
2588:.\console.c   **** 						if 	((get_key == 'r') || (get_key == 'R'))
 9359              		.loc 1 2588 0
 9360 3694 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9361 3698 722B     		cmp	r3, #114
 9362 369a 03D0     		beq	.L348
 9363              		.loc 1 2588 0 is_stmt 0 discriminator 1
 9364 369c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9365 36a0 522B     		cmp	r3, #82
 9366 36a2 1CD1     		bne	.L349
 9367              	.L348:
2589:.\console.c   **** 						{	
2590:.\console.c   **** 							pan_absolute_sensor.slave_encoder_step_p0 = (int32)QuadDec_PAN_GetCounter();/* Encoder Point
 9368              		.loc 1 2590 0 is_stmt 1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 260


 9369 36a4 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9370 36a8 0246     		mov	r2, r0
 9371 36aa 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9372 36ae C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9373 36b2 9A61     		str	r2, [r3, #24]
2591:.\console.c   **** 							pan_absolute_sensor.raw_adc_p0            = (int32)AdcValue[HOME_PAN_ABSV];	/* ABS Sensor AD
 9374              		.loc 1 2591 0
 9375 36b4 40F20003 		movw	r3, #:lower16:AdcValue
 9376 36b8 C0F20003 		movt	r3, #:upper16:AdcValue
 9377 36bc 9B89     		ldrh	r3, [r3, #12]
 9378 36be 1AB2     		sxth	r2, r3
 9379 36c0 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9380 36c4 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9381 36c8 DA61     		str	r2, [r3, #28]
2592:.\console.c   **** 						
2593:.\console.c   **** 							printf("\r\n*!point 0 sampling\r\n\r\n");	
 9382              		.loc 1 2593 0
 9383 36ca 40F20000 		movw	r0, #:lower16:.LC464
 9384 36ce C0F20000 		movt	r0, #:upper16:.LC464
 9385 36d2 FFF7FEFF 		bl	puts
2594:.\console.c   **** 							get_key = 0; //stay in while loop
 9386              		.loc 1 2594 0
 9387 36d6 4FF00003 		mov	r3, #0
 9388 36da 87F81231 		strb	r3, [r7, #274]
 9389              	.L349:
2595:.\console.c   **** 						}
2596:.\console.c   **** 						
2597:.\console.c   **** //						/******************************************************/
2598:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2599:.\console.c   **** //						/******************************************************/
2600:.\console.c   **** //						CyWdtClear();							
2601:.\console.c   **** 						
2602:.\console.c   **** 						/* internal one-key pot ratio calc */
2603:.\console.c   **** 						if 	((get_key == 's') || (get_key == 'S'))
 9390              		.loc 1 2603 0
 9391 36de 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9392 36e2 732B     		cmp	r3, #115
 9393 36e4 03D0     		beq	.L350
 9394              		.loc 1 2603 0 is_stmt 0 discriminator 1
 9395 36e6 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9396 36ea 532B     		cmp	r3, #83
 9397 36ec 46D1     		bne	.L351
 9398              	.L350:
2604:.\console.c   **** 						{							
2605:.\console.c   **** 							pan_absolute_sensor.sample_d1 = (float)((int32)QuadDec_PAN_GetCounter() - pan_absolute_senso
 9399              		.loc 1 2605 0 is_stmt 1
 9400 36ee FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9401 36f2 0246     		mov	r2, r0
 9402 36f4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9403 36f8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9404 36fc 9B69     		ldr	r3, [r3, #24]
 9405 36fe D31A     		subs	r3, r2, r3
 9406 3700 1846     		mov	r0, r3
 9407 3702 FFF7FEFF 		bl	__aeabi_i2f
 9408 3706 0246     		mov	r2, r0
 9409 3708 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9410 370c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 261


 9411 3710 1A62     		str	r2, [r3, #32]	@ float
2606:.\console.c   **** 							pan_absolute_sensor.sample_d2 = (float)((int32)AdcValue[HOME_PAN_ABSV]  - pan_absolute_senso
 9412              		.loc 1 2606 0
 9413 3712 40F20003 		movw	r3, #:lower16:AdcValue
 9414 3716 C0F20003 		movt	r3, #:upper16:AdcValue
 9415 371a 9B89     		ldrh	r3, [r3, #12]
 9416 371c 1AB2     		sxth	r2, r3
 9417 371e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9418 3722 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9419 3726 DB69     		ldr	r3, [r3, #28]
 9420 3728 D31A     		subs	r3, r2, r3
 9421 372a 1846     		mov	r0, r3
 9422 372c FFF7FEFF 		bl	__aeabi_i2f
 9423 3730 0246     		mov	r2, r0
 9424 3732 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9425 3736 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9426 373a 5A62     		str	r2, [r3, #36]	@ float
2607:.\console.c   **** 							pan_absolute_sensor.ratio_tmp = fabs(pan_absolute_sensor.sample_d1 / pan_absolute_sensor.sam
 9427              		.loc 1 2607 0
 9428 373c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9429 3740 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9430 3744 1A6A     		ldr	r2, [r3, #32]	@ float
 9431 3746 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9432 374a C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9433 374e 5B6A     		ldr	r3, [r3, #36]	@ float
 9434 3750 1046     		mov	r0, r2
 9435 3752 1946     		mov	r1, r3
 9436 3754 FFF7FEFF 		bl	__aeabi_fdiv
 9437 3758 0346     		mov	r3, r0
 9438 375a 23F00042 		bic	r2, r3, #-2147483648
 9439 375e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9440 3762 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9441 3766 9A62     		str	r2, [r3, #40]	@ float
2608:.\console.c   **** 						
2609:.\console.c   **** 							printf("\r\n*!enc over abs ratio sampled\r\n\r\n");	
 9442              		.loc 1 2609 0
 9443 3768 40F20000 		movw	r0, #:lower16:.LC465
 9444 376c C0F20000 		movt	r0, #:upper16:.LC465
 9445 3770 FFF7FEFF 		bl	puts
2610:.\console.c   **** 							get_key = 0; //stay in while loop
 9446              		.loc 1 2610 0
 9447 3774 4FF00003 		mov	r3, #0
 9448 3778 87F81231 		strb	r3, [r7, #274]
 9449              	.L351:
2611:.\console.c   **** 						}
2612:.\console.c   **** 						
2613:.\console.c   **** //						/******************************************************/
2614:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2615:.\console.c   **** //						/******************************************************/
2616:.\console.c   **** //						CyWdtClear();	
2617:.\console.c   **** 						
2618:.\console.c   **** 						/* internal one-key pot ratio eeprom save */
2619:.\console.c   **** 						if 	((get_key == 'e') || (get_key == 'E'))
 9450              		.loc 1 2619 0
 9451 377c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9452 3780 652B     		cmp	r3, #101
 9453 3782 03D0     		beq	.L352
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 262


 9454              		.loc 1 2619 0 is_stmt 0 discriminator 1
 9455 3784 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9456 3788 452B     		cmp	r3, #69
 9457 378a 19D1     		bne	.L347
 9458              	.L352:
2620:.\console.c   **** 						{	
2621:.\console.c   **** 							/* update global parameters */
2622:.\console.c   **** 							pan_absolute_sensor.param.step_over_abs_ratio.fnum = pan_absolute_sensor.ratio_tmp;
 9459              		.loc 1 2622 0 is_stmt 1
 9460 378c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9461 3790 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9462 3794 9A6A     		ldr	r2, [r3, #40]	@ float
 9463 3796 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9464 379a C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9465 379e 9A63     		str	r2, [r3, #56]	@ float
2623:.\console.c   **** 							
2624:.\console.c   **** 							goto PsavetoEE;
 9466              		.loc 1 2624 0
 9467 37a0 00BF     		nop
 9468              	.L353:
2625:.\console.c   **** 						}						
2626:.\console.c   **** 					}
2627:.\console.c   **** 				}				
2628:.\console.c   **** 				
2629:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
2630:.\console.c   **** 		
2631:.\console.c   **** 				goto exitpars;	
2632:.\console.c   **** PsavetoEE:
2633:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/	
 9469              		.loc 1 2633 0
 9470 37a2 FFF7FEFF 		bl	isr_CTRL_Start
2634:.\console.c   **** 				
2635:.\console.c   **** 				/* Update EEPROM */
2636:.\console.c   **** 				dummy = WriteAllEEparams();
 9471              		.loc 1 2636 0
 9472 37a6 FFF7FEFF 		bl	WriteAllEEparams
 9473 37aa 0346     		mov	r3, r0
 9474 37ac 87F8D930 		strb	r3, [r7, #217]
2637:.\console.c   **** 										
2638:.\console.c   **** 				printf("\r\n*!Absolute Sensor ratio PAN eeprom saved\r\n\r\n");	
 9475              		.loc 1 2638 0
 9476 37b0 40F20000 		movw	r0, #:lower16:.LC466
 9477 37b4 C0F20000 		movt	r0, #:upper16:.LC466
 9478 37b8 FFF7FEFF 		bl	puts
2639:.\console.c   **** 				goto exitpars;				
 9479              		.loc 1 2639 0
 9480 37bc 03F078BB 		b	.L131
 9481              	.L347:
2574:.\console.c   **** 					while (get_key == 0)						
 9482              		.loc 1 2574 0 discriminator 1
 9483 37c0 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9484 37c4 002B     		cmp	r3, #0
 9485 37c6 3FF433AF 		beq	.L354
 9486              	.L346:
2629:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
 9487              		.loc 1 2629 0
 9488 37ca FFF7FEFF 		bl	isr_CTRL_Start
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 263


2631:.\console.c   **** 				goto exitpars;	
 9489              		.loc 1 2631 0
 9490 37ce 03F06FBB 		b	.L131
 9491              	.L345:
2640:.\console.c   **** 			}		
2641:.\console.c   **** 			// END SHOW ABS RATIO PAN				
2642:.\console.c   **** 			
2643:.\console.c   **** 			
2644:.\console.c   **** 			// SHOW ABS RATIO TILT
2645:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "ratioabst") == 0)	
 9492              		.loc 1 2645 0
 9493 37d2 2148     		ldr	r0, .L732
 9494 37d4 40F20001 		movw	r1, #:lower16:.LC467
 9495 37d8 C0F20001 		movt	r1, #:upper16:.LC467
 9496 37dc FFF7FEFF 		bl	strcmp
 9497 37e0 0346     		mov	r3, r0
 9498 37e2 002B     		cmp	r3, #0
 9499 37e4 0AD0     		beq	.L355
2646:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ratiot") == 0))
 9500              		.loc 1 2646 0
 9501 37e6 1C48     		ldr	r0, .L732
 9502 37e8 40F20001 		movw	r1, #:lower16:.LC468
 9503 37ec C0F20001 		movt	r1, #:upper16:.LC468
 9504 37f0 FFF7FEFF 		bl	strcmp
 9505 37f4 0346     		mov	r3, r0
 9506 37f6 002B     		cmp	r3, #0
 9507 37f8 40F00181 		bne	.L356
 9508              	.L355:
2647:.\console.c   **** 			{
2648:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 9509              		.loc 1 2648 0
 9510 37fc 40F20000 		movw	r0, #:lower16:.LC431
 9511 3800 C0F20000 		movt	r0, #:upper16:.LC431
 9512 3804 FFF7FEFF 		bl	puts
2649:.\console.c   **** 				printf(STR_SHOWENCFC);			//
 9513              		.loc 1 2649 0
 9514 3808 40F20000 		movw	r0, #:lower16:.LC460
 9515 380c C0F20000 		movt	r0, #:upper16:.LC460
 9516 3810 FFF7FEFF 		bl	printf
2650:.\console.c   **** 			
2651:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 9517              		.loc 1 2651 0
 9518 3814 4FF00100 		mov	r0, #1
 9519 3818 FFF7FEFF 		bl	ButtonYNChoice
 9520 381c 0346     		mov	r3, r0
 9521 381e 012B     		cmp	r3, #1
 9522 3820 40F0E980 		bne	.L357
2652:.\console.c   **** 				{
2653:.\console.c   **** 					isr_CTRL_Stop();					/* Stop Control ISR			*/	
 9523              		.loc 1 2653 0
 9524 3824 FFF7FEFF 		bl	isr_CTRL_Stop
2654:.\console.c   **** 					motor_init(&pan_axis);				/* Initialize Pan Axis  	*/
 9525              		.loc 1 2654 0
 9526 3828 40F20000 		movw	r0, #:lower16:pan_axis
 9527 382c C0F20000 		movt	r0, #:upper16:pan_axis
 9528 3830 FFF7FEFF 		bl	motor_init
2655:.\console.c   **** 					motor_init(&tilt_axis);				/* Initialize Tilt Axis 	*/
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 264


 9529              		.loc 1 2655 0
 9530 3834 40F20000 		movw	r0, #:lower16:tilt_axis
 9531 3838 C0F20000 		movt	r0, #:upper16:tilt_axis
 9532 383c FFF7FEFF 		bl	motor_init
2656:.\console.c   **** 					
2657:.\console.c   **** 					tilt_absolute_sensor.ratio_tmp = 0;	//clear temporary ratio value
 9533              		.loc 1 2657 0
 9534 3840 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9535 3844 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9536 3848 4FF00002 		mov	r2, #0
 9537 384c 9A62     		str	r2, [r3, #40]	@ float
2658:.\console.c   **** 					get_key = 0;						//clear internal loop getted char
 9538              		.loc 1 2658 0
 9539 384e 4FF00003 		mov	r3, #0
 9540 3852 87F81231 		strb	r3, [r7, #274]
2659:.\console.c   **** 					
2660:.\console.c   **** 					while (get_key == 0)						
 9541              		.loc 1 2660 0
 9542 3856 C9E0     		b	.L358
 9543              	.L733:
 9544              		.align	2
 9545              	.L732:
 9546 3858 0F000000 		.word	actual_cmd+15
 9547              	.L365:
2661:.\console.c   **** 					{						
2662:.\console.c   **** 						printf("TILT: ABS_SENSOR=%5i[lsb]", (int16)AdcValue[HOME_TILT_ABSV]);
 9548              		.loc 1 2662 0
 9549 385c 40F20003 		movw	r3, #:lower16:AdcValue
 9550 3860 C0F20003 		movt	r3, #:upper16:AdcValue
 9551 3864 DB89     		ldrh	r3, [r3, #14]
 9552 3866 1BB2     		sxth	r3, r3
 9553 3868 40F20000 		movw	r0, #:lower16:.LC469
 9554 386c C0F20000 		movt	r0, #:upper16:.LC469
 9555 3870 1946     		mov	r1, r3
 9556 3872 FFF7FEFF 		bl	printf
2663:.\console.c   **** 						printf(" ENC=%9li[step]", (int32)QuadDec_TILT_GetCounter());	
 9557              		.loc 1 2663 0
 9558 3876 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 9559 387a 0346     		mov	r3, r0
 9560 387c 40F20000 		movw	r0, #:lower16:.LC462
 9561 3880 C0F20000 		movt	r0, #:upper16:.LC462
 9562 3884 1946     		mov	r1, r3
 9563 3886 FFF7FEFF 		bl	printf
2664:.\console.c   **** 						printf(" RATIO=%1.4f[step/lsb]",(float)tilt_absolute_sensor.ratio_tmp);
 9564              		.loc 1 2664 0
 9565 388a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9566 388e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9567 3892 9B6A     		ldr	r3, [r3, #40]	@ float
 9568 3894 1846     		mov	r0, r3
 9569 3896 FFF7FEFF 		bl	__aeabi_f2d
 9570 389a 0246     		mov	r2, r0
 9571 389c 0B46     		mov	r3, r1
 9572 389e 40F20000 		movw	r0, #:lower16:.LC463
 9573 38a2 C0F20000 		movt	r0, #:upper16:.LC463
 9574 38a6 FFF7FEFF 		bl	printf
2665:.\console.c   **** 						printf("\r\n");
 9575              		.loc 1 2665 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 265


 9576 38aa 40F20000 		movw	r0, #:lower16:.LC42
 9577 38ae C0F20000 		movt	r0, #:upper16:.LC42
 9578 38b2 FFF7FEFF 		bl	puts
2666:.\console.c   **** 						
2667:.\console.c   **** //						/******************************************************/
2668:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2669:.\console.c   **** //						/******************************************************/
2670:.\console.c   **** //						CyWdtClear();						
2671:.\console.c   **** 					
2672:.\console.c   **** 						/* internal one-key reset & sample */
2673:.\console.c   **** 						get_key = UART_USB_GetChar();	/* get the char */
 9579              		.loc 1 2673 0
 9580 38b6 FFF7FEFF 		bl	UART_USB_GetChar
 9581 38ba 0346     		mov	r3, r0
 9582 38bc 87F81231 		strb	r3, [r7, #274]
2674:.\console.c   **** 						if 	((get_key == 'r') || (get_key == 'R'))
 9583              		.loc 1 2674 0
 9584 38c0 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9585 38c4 722B     		cmp	r3, #114
 9586 38c6 03D0     		beq	.L359
 9587              		.loc 1 2674 0 is_stmt 0 discriminator 1
 9588 38c8 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9589 38cc 522B     		cmp	r3, #82
 9590 38ce 1CD1     		bne	.L360
 9591              	.L359:
2675:.\console.c   **** 						{	
2676:.\console.c   **** 							tilt_absolute_sensor.slave_encoder_step_p0 = (int32)QuadDec_TILT_GetCounter();	/* Encoder Po
 9592              		.loc 1 2676 0 is_stmt 1
 9593 38d0 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 9594 38d4 0246     		mov	r2, r0
 9595 38d6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9596 38da C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9597 38de 9A61     		str	r2, [r3, #24]
2677:.\console.c   **** 							tilt_absolute_sensor.raw_adc_p0            = (int32)AdcValue[HOME_TILT_ABSV];	/* ABS Sensor 
 9598              		.loc 1 2677 0
 9599 38e0 40F20003 		movw	r3, #:lower16:AdcValue
 9600 38e4 C0F20003 		movt	r3, #:upper16:AdcValue
 9601 38e8 DB89     		ldrh	r3, [r3, #14]
 9602 38ea 1AB2     		sxth	r2, r3
 9603 38ec 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9604 38f0 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9605 38f4 DA61     		str	r2, [r3, #28]
2678:.\console.c   **** 						
2679:.\console.c   **** 							printf("\r\n*!point 0 sampling\r\n\r\n");	
 9606              		.loc 1 2679 0
 9607 38f6 40F20000 		movw	r0, #:lower16:.LC464
 9608 38fa C0F20000 		movt	r0, #:upper16:.LC464
 9609 38fe FFF7FEFF 		bl	puts
2680:.\console.c   **** 							get_key = 0; //stay in while loop
 9610              		.loc 1 2680 0
 9611 3902 4FF00003 		mov	r3, #0
 9612 3906 87F81231 		strb	r3, [r7, #274]
 9613              	.L360:
2681:.\console.c   **** 						}
2682:.\console.c   **** 						
2683:.\console.c   **** //						/******************************************************/
2684:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 266


2685:.\console.c   **** //						/******************************************************/
2686:.\console.c   **** //						CyWdtClear();							
2687:.\console.c   **** 						
2688:.\console.c   **** 						/* internal one-key pot ratio calc */
2689:.\console.c   **** 						if 	((get_key == 's') || (get_key == 'S'))
 9614              		.loc 1 2689 0
 9615 390a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9616 390e 732B     		cmp	r3, #115
 9617 3910 03D0     		beq	.L361
 9618              		.loc 1 2689 0 is_stmt 0 discriminator 1
 9619 3912 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9620 3916 532B     		cmp	r3, #83
 9621 3918 46D1     		bne	.L362
 9622              	.L361:
2690:.\console.c   **** 						{							
2691:.\console.c   **** 							tilt_absolute_sensor.sample_d1 = (float)((int32)QuadDec_TILT_GetCounter() - tilt_absolute_se
 9623              		.loc 1 2691 0 is_stmt 1
 9624 391a FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 9625 391e 0246     		mov	r2, r0
 9626 3920 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9627 3924 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9628 3928 9B69     		ldr	r3, [r3, #24]
 9629 392a D31A     		subs	r3, r2, r3
 9630 392c 1846     		mov	r0, r3
 9631 392e FFF7FEFF 		bl	__aeabi_i2f
 9632 3932 0246     		mov	r2, r0
 9633 3934 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9634 3938 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9635 393c 1A62     		str	r2, [r3, #32]	@ float
2692:.\console.c   **** 							tilt_absolute_sensor.sample_d2 = (float)((int32)AdcValue[HOME_TILT_ABSV]  - tilt_absolute_se
 9636              		.loc 1 2692 0
 9637 393e 40F20003 		movw	r3, #:lower16:AdcValue
 9638 3942 C0F20003 		movt	r3, #:upper16:AdcValue
 9639 3946 DB89     		ldrh	r3, [r3, #14]
 9640 3948 1AB2     		sxth	r2, r3
 9641 394a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9642 394e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9643 3952 DB69     		ldr	r3, [r3, #28]
 9644 3954 D31A     		subs	r3, r2, r3
 9645 3956 1846     		mov	r0, r3
 9646 3958 FFF7FEFF 		bl	__aeabi_i2f
 9647 395c 0246     		mov	r2, r0
 9648 395e 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9649 3962 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9650 3966 5A62     		str	r2, [r3, #36]	@ float
2693:.\console.c   **** 							tilt_absolute_sensor.ratio_tmp = fabs(tilt_absolute_sensor.sample_d1 / tilt_absolute_sensor.
 9651              		.loc 1 2693 0
 9652 3968 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9653 396c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9654 3970 1A6A     		ldr	r2, [r3, #32]	@ float
 9655 3972 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9656 3976 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9657 397a 5B6A     		ldr	r3, [r3, #36]	@ float
 9658 397c 1046     		mov	r0, r2
 9659 397e 1946     		mov	r1, r3
 9660 3980 FFF7FEFF 		bl	__aeabi_fdiv
 9661 3984 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 267


 9662 3986 23F00042 		bic	r2, r3, #-2147483648
 9663 398a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9664 398e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9665 3992 9A62     		str	r2, [r3, #40]	@ float
2694:.\console.c   **** 						
2695:.\console.c   **** 							printf("\r\n*!enc over abs ratio sampled\r\n\r\n");	
 9666              		.loc 1 2695 0
 9667 3994 40F20000 		movw	r0, #:lower16:.LC465
 9668 3998 C0F20000 		movt	r0, #:upper16:.LC465
 9669 399c FFF7FEFF 		bl	puts
2696:.\console.c   **** 							get_key = 0; //stay in while loop
 9670              		.loc 1 2696 0
 9671 39a0 4FF00003 		mov	r3, #0
 9672 39a4 87F81231 		strb	r3, [r7, #274]
 9673              	.L362:
2697:.\console.c   **** 						}
2698:.\console.c   **** 						
2699:.\console.c   **** //						/******************************************************/
2700:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2701:.\console.c   **** //						/******************************************************/
2702:.\console.c   **** //						CyWdtClear();	
2703:.\console.c   **** 						
2704:.\console.c   **** 						/* internal one-key pot ratio eeprom save */
2705:.\console.c   **** 						if 	((get_key == 'e') || (get_key == 'E'))
 9674              		.loc 1 2705 0
 9675 39a8 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9676 39ac 652B     		cmp	r3, #101
 9677 39ae 03D0     		beq	.L363
 9678              		.loc 1 2705 0 is_stmt 0 discriminator 1
 9679 39b0 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9680 39b4 452B     		cmp	r3, #69
 9681 39b6 19D1     		bne	.L358
 9682              	.L363:
2706:.\console.c   **** 						{	
2707:.\console.c   **** 							/* update global parameters */
2708:.\console.c   **** 							tilt_absolute_sensor.param.step_over_abs_ratio.fnum = tilt_absolute_sensor.ratio_tmp;
 9683              		.loc 1 2708 0 is_stmt 1
 9684 39b8 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9685 39bc C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9686 39c0 9A6A     		ldr	r2, [r3, #40]	@ float
 9687 39c2 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9688 39c6 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9689 39ca 9A63     		str	r2, [r3, #56]	@ float
2709:.\console.c   **** 							
2710:.\console.c   **** 							goto TsavetoEE;
 9690              		.loc 1 2710 0
 9691 39cc 00BF     		nop
 9692              	.L364:
2711:.\console.c   **** 						}						
2712:.\console.c   **** 					}
2713:.\console.c   **** 				}				
2714:.\console.c   **** 				
2715:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
2716:.\console.c   **** 		
2717:.\console.c   **** 				goto exitpars;	
2718:.\console.c   **** TsavetoEE:
2719:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 268


 9693              		.loc 1 2719 0
 9694 39ce FFF7FEFF 		bl	isr_CTRL_Start
2720:.\console.c   **** 				
2721:.\console.c   **** 				/* Update EEPROM */
2722:.\console.c   **** 				dummy = WriteAllEEparams();
 9695              		.loc 1 2722 0
 9696 39d2 FFF7FEFF 		bl	WriteAllEEparams
 9697 39d6 0346     		mov	r3, r0
 9698 39d8 87F8D930 		strb	r3, [r7, #217]
2723:.\console.c   **** 										
2724:.\console.c   **** 				printf("\r\n*!Absolute Sensor ratio TILT eeprom saved\r\n\r\n");	
 9699              		.loc 1 2724 0
 9700 39dc 40F20000 		movw	r0, #:lower16:.LC470
 9701 39e0 C0F20000 		movt	r0, #:upper16:.LC470
 9702 39e4 FFF7FEFF 		bl	puts
2725:.\console.c   **** 				goto exitpars;				
 9703              		.loc 1 2725 0
 9704 39e8 03F062BA 		b	.L131
 9705              	.L358:
2660:.\console.c   **** 					while (get_key == 0)						
 9706              		.loc 1 2660 0 discriminator 1
 9707 39ec 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9708 39f0 002B     		cmp	r3, #0
 9709 39f2 3FF433AF 		beq	.L365
 9710              	.L357:
2715:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
 9711              		.loc 1 2715 0
 9712 39f6 FFF7FEFF 		bl	isr_CTRL_Start
2717:.\console.c   **** 				goto exitpars;	
 9713              		.loc 1 2717 0
 9714 39fa 03F059BA 		b	.L131
 9715              	.L356:
2726:.\console.c   **** 			}		
2727:.\console.c   **** 			// END SHOW ABS RATIO TILT	
2728:.\console.c   **** 			
2729:.\console.c   **** 			
2730:.\console.c   **** 			// SHOW FAULTS
2731:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "faults") == 0)	
 9716              		.loc 1 2731 0
 9717 39fe 3148     		ldr	r0, .L734
 9718 3a00 40F20001 		movw	r1, #:lower16:.LC471
 9719 3a04 C0F20001 		movt	r1, #:upper16:.LC471
 9720 3a08 FFF7FEFF 		bl	strcmp
 9721 3a0c 0346     		mov	r3, r0
 9722 3a0e 002B     		cmp	r3, #0
 9723 3a10 09D0     		beq	.L366
2732:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "fault") == 0))	
 9724              		.loc 1 2732 0
 9725 3a12 2C48     		ldr	r0, .L734
 9726 3a14 40F20001 		movw	r1, #:lower16:.LC472
 9727 3a18 C0F20001 		movt	r1, #:upper16:.LC472
 9728 3a1c FFF7FEFF 		bl	strcmp
 9729 3a20 0346     		mov	r3, r0
 9730 3a22 002B     		cmp	r3, #0
 9731 3a24 50D1     		bne	.L367
 9732              	.L366:
2733:.\console.c   **** 			{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 269


2734:.\console.c   **** 				if (gobeeFaults.general == GEN_NOFAULTS)
 9733              		.loc 1 2734 0
 9734 3a26 40F20003 		movw	r3, #:lower16:gobeeFaults
 9735 3a2a C0F20003 		movt	r3, #:upper16:gobeeFaults
 9736 3a2e 1B88     		ldrh	r3, [r3, #0]
 9737 3a30 002B     		cmp	r3, #0
 9738 3a32 07D1     		bne	.L368
2735:.\console.c   **** 				{
2736:.\console.c   **** 					printf(STR_FULT0);   /* NONE: ALL OK! */
 9739              		.loc 1 2736 0
 9740 3a34 40F20000 		movw	r0, #:lower16:.LC473
 9741 3a38 C0F20000 		movt	r0, #:upper16:.LC473
 9742 3a3c FFF7FEFF 		bl	puts
2737:.\console.c   **** 				}
2738:.\console.c   **** 				else
2739:.\console.c   **** 				{
2740:.\console.c   **** //					if ((sysFaults.general & GEN_FUSE_FAULT) == GEN_FUSE_FAULT)
2741:.\console.c   **** //					{
2742:.\console.c   **** //						printf(STR_FULT1);   /* @FAULT: FUSE OPEN! */
2743:.\console.c   **** //					}
2744:.\console.c   **** //					else
2745:.\console.c   **** //					{
2746:.\console.c   **** //						if ((sysFaults.general & GEN_LOWVCC_FAULT) == GEN_LOWVCC_FAULT)
2747:.\console.c   **** //						{
2748:.\console.c   **** //							printf(STR_FULT2);   /* @FAULT: LOW VCC! (VCC<11V) */
2749:.\console.c   **** //						}
2750:.\console.c   **** //					}
2751:.\console.c   **** 					
2752:.\console.c   **** 					if ((gobeeFaults.general & GEN_PAN_FAULT) == GEN_PAN_FAULT)
2753:.\console.c   **** 					{
2754:.\console.c   **** 						printf(STR_FULTP);   		/* @FAULT#01: GENERAL PAN FAULT */
2755:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
2756:.\console.c   **** 						{
2757:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
2758:.\console.c   **** 						}							
2759:.\console.c   **** 					}		
2760:.\console.c   **** 					
2761:.\console.c   **** 					if ((gobeeFaults.general & GEN_TILT_FAULT) == GEN_TILT_FAULT)
2762:.\console.c   **** 					{
2763:.\console.c   **** 						printf(STR_FULTT);   		/* @FAULT#02: GENERAL TILT FAULT */
2764:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
2765:.\console.c   **** 						{
2766:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
2767:.\console.c   **** 						}							
2768:.\console.c   **** 					}					
2769:.\console.c   **** 				}
2770:.\console.c   **** 				goto exitpars;
 9743              		.loc 1 2770 0
 9744 3a40 03F02DBA 		b	.L699
 9745              	.L368:
2752:.\console.c   **** 					if ((gobeeFaults.general & GEN_PAN_FAULT) == GEN_PAN_FAULT)
 9746              		.loc 1 2752 0
 9747 3a44 40F20003 		movw	r3, #:lower16:gobeeFaults
 9748 3a48 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9749 3a4c 1B88     		ldrh	r3, [r3, #0]
 9750 3a4e 03F00803 		and	r3, r3, #8
 9751 3a52 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 270


 9752 3a54 14D0     		beq	.L370
2754:.\console.c   **** 						printf(STR_FULTP);   		/* @FAULT#01: GENERAL PAN FAULT */
 9753              		.loc 1 2754 0
 9754 3a56 40F20000 		movw	r0, #:lower16:.LC474
 9755 3a5a C0F20000 		movt	r0, #:upper16:.LC474
 9756 3a5e FFF7FEFF 		bl	puts
2755:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
 9757              		.loc 1 2755 0
 9758 3a62 40F20003 		movw	r3, #:lower16:gobeeFaults
 9759 3a66 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9760 3a6a 1B88     		ldrh	r3, [r3, #0]
 9761 3a6c 03F00203 		and	r3, r3, #2
 9762 3a70 002B     		cmp	r3, #0
 9763 3a72 05D0     		beq	.L370
2757:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
 9764              		.loc 1 2757 0
 9765 3a74 40F20000 		movw	r0, #:lower16:.LC475
 9766 3a78 C0F20000 		movt	r0, #:upper16:.LC475
 9767 3a7c FFF7FEFF 		bl	puts
 9768              	.L370:
2761:.\console.c   **** 					if ((gobeeFaults.general & GEN_TILT_FAULT) == GEN_TILT_FAULT)
 9769              		.loc 1 2761 0
 9770 3a80 40F20003 		movw	r3, #:lower16:gobeeFaults
 9771 3a84 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9772 3a88 1B88     		ldrh	r3, [r3, #0]
 9773 3a8a 03F01003 		and	r3, r3, #16
 9774 3a8e 002B     		cmp	r3, #0
 9775 3a90 03F00582 		beq	.L699
2763:.\console.c   **** 						printf(STR_FULTT);   		/* @FAULT#02: GENERAL TILT FAULT */
 9776              		.loc 1 2763 0
 9777 3a94 40F20000 		movw	r0, #:lower16:.LC476
 9778 3a98 C0F20000 		movt	r0, #:upper16:.LC476
 9779 3a9c FFF7FEFF 		bl	puts
2764:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
 9780              		.loc 1 2764 0
 9781 3aa0 40F20003 		movw	r3, #:lower16:gobeeFaults
 9782 3aa4 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9783 3aa8 1B88     		ldrh	r3, [r3, #0]
 9784 3aaa 03F00203 		and	r3, r3, #2
 9785 3aae 002B     		cmp	r3, #0
 9786 3ab0 03F0F581 		beq	.L699
2766:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
 9787              		.loc 1 2766 0
 9788 3ab4 40F20000 		movw	r0, #:lower16:.LC475
 9789 3ab8 C0F20000 		movt	r0, #:upper16:.LC475
 9790 3abc FFF7FEFF 		bl	puts
 9791              		.loc 1 2770 0
 9792 3ac0 03F0EDB9 		b	.L699
 9793              	.L735:
 9794              		.align	2
 9795              	.L734:
 9796 3ac4 0F000000 		.word	actual_cmd+15
 9797              	.L367:
2771:.\console.c   **** 			}
2772:.\console.c   **** 			
2773:.\console.c   **** 			
2774:.\console.c   **** 			// SHOW PARAMS
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 271


2775:.\console.c   **** 			if (((strcmp(actual_cmd.parameter, "params") == 0))
 9798              		.loc 1 2775 0
 9799 3ac8 0A48     		ldr	r0, .L736
 9800 3aca 40F20001 		movw	r1, #:lower16:.LC477
 9801 3ace C0F20001 		movt	r1, #:upper16:.LC477
 9802 3ad2 FFF7FEFF 		bl	strcmp
 9803 3ad6 0346     		mov	r3, r0
 9804 3ad8 002B     		cmp	r3, #0
 9805 3ada 0DD0     		beq	.L371
2776:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "p") == 0))
 9806              		.loc 1 2776 0
 9807 3adc 0548     		ldr	r0, .L736
 9808 3ade 40F20001 		movw	r1, #:lower16:.LC478
 9809 3ae2 C0F20001 		movt	r1, #:upper16:.LC478
 9810 3ae6 FFF7FEFF 		bl	strcmp
 9811 3aea 0346     		mov	r3, r0
 9812 3aec 002B     		cmp	r3, #0
 9813 3aee 43F0D881 		bne	.L700
 9814 3af2 01E0     		b	.L737
 9815              	.L738:
 9816              		.align	2
 9817              	.L736:
 9818 3af4 0F000000 		.word	actual_cmd+15
 9819              	.L737:
 9820              	.L371:
2777:.\console.c   **** 			{
2778:.\console.c   **** 				printf("GoBee DIRECTOR\r\n");
 9821              		.loc 1 2778 0
 9822 3af8 40F20000 		movw	r0, #:lower16:.LC479
 9823 3afc C0F20000 		movt	r0, #:upper16:.LC479
 9824 3b00 FFF7FEFF 		bl	puts
2779:.\console.c   **** 				printf("==============\r\n");
 9825              		.loc 1 2779 0
 9826 3b04 40F20000 		movw	r0, #:lower16:.LC480
 9827 3b08 C0F20000 		movt	r0, #:upper16:.LC480
 9828 3b0c FFF7FEFF 		bl	puts
2780:.\console.c   **** 				printf("Gobee Mode                   =%2u: ", gobee_param.mode);
 9829              		.loc 1 2780 0
 9830 3b10 40F20003 		movw	r3, #:lower16:gobee_param
 9831 3b14 C0F20003 		movt	r3, #:upper16:gobee_param
 9832 3b18 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9833 3b1a 40F20000 		movw	r0, #:lower16:.LC481
 9834 3b1e C0F20000 		movt	r0, #:upper16:.LC481
 9835 3b22 1946     		mov	r1, r3
 9836 3b24 FFF7FEFF 		bl	printf
2781:.\console.c   **** 				ShowParamsMode();				
 9837              		.loc 1 2781 0
 9838 3b28 FFF7FEFF 		bl	ShowParamsMode
2782:.\console.c   **** 				printf("Gobee Selected Director      =%2u: ", gobee_param.director);
 9839              		.loc 1 2782 0
 9840 3b2c 40F20003 		movw	r3, #:lower16:gobee_param
 9841 3b30 C0F20003 		movt	r3, #:upper16:gobee_param
 9842 3b34 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 9843 3b36 40F20000 		movw	r0, #:lower16:.LC482
 9844 3b3a C0F20000 		movt	r0, #:upper16:.LC482
 9845 3b3e 1946     		mov	r1, r3
 9846 3b40 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 272


2783:.\console.c   **** 				ShowParamsDirector();			
 9847              		.loc 1 2783 0
 9848 3b44 FFF7FEFF 		bl	ShowParamsDirector
2784:.\console.c   **** 				printf("\r\n");		
 9849              		.loc 1 2784 0
 9850 3b48 40F20000 		movw	r0, #:lower16:.LC42
 9851 3b4c C0F20000 		movt	r0, #:upper16:.LC42
 9852 3b50 FFF7FEFF 		bl	puts
2785:.\console.c   **** 				printf("\r\n");					
 9853              		.loc 1 2785 0
 9854 3b54 40F20000 		movw	r0, #:lower16:.LC42
 9855 3b58 C0F20000 		movt	r0, #:upper16:.LC42
 9856 3b5c FFF7FEFF 		bl	puts
2786:.\console.c   **** 				
2787:.\console.c   **** 				printf("GoBee PARAMETER LIST\r\n");
 9857              		.loc 1 2787 0
 9858 3b60 40F20000 		movw	r0, #:lower16:.LC483
 9859 3b64 C0F20000 		movt	r0, #:upper16:.LC483
 9860 3b68 FFF7FEFF 		bl	puts
2788:.\console.c   **** 				printf("====================\r\n");
 9861              		.loc 1 2788 0
 9862 3b6c 40F20000 		movw	r0, #:lower16:.LC484
 9863 3b70 C0F20000 		movt	r0, #:upper16:.LC484
 9864 3b74 FFF7FEFF 		bl	puts
2789:.\console.c   **** 					
2790:.\console.c   **** 				//axis main params
2791:.\console.c   **** 				printf("Pan  Axis Resolution         = ");
 9865              		.loc 1 2791 0
 9866 3b78 40F20000 		movw	r0, #:lower16:.LC485
 9867 3b7c C0F20000 		movt	r0, #:upper16:.LC485
 9868 3b80 FFF7FEFF 		bl	printf
2792:.\console.c   **** 				printf("%8.1f [step/2PI]",(float)(pan_axis.param.resolution.fnum));
 9869              		.loc 1 2792 0
 9870 3b84 40F20003 		movw	r3, #:lower16:pan_axis
 9871 3b88 C0F20003 		movt	r3, #:upper16:pan_axis
 9872 3b8c DB68     		ldr	r3, [r3, #12]	@ float
 9873 3b8e 1846     		mov	r0, r3
 9874 3b90 FFF7FEFF 		bl	__aeabi_f2d
 9875 3b94 0246     		mov	r2, r0
 9876 3b96 0B46     		mov	r3, r1
 9877 3b98 40F20000 		movw	r0, #:lower16:.LC486
 9878 3b9c C0F20000 		movt	r0, #:upper16:.LC486
 9879 3ba0 FFF7FEFF 		bl	printf
2793:.\console.c   **** 				printf("\r\n");
 9880              		.loc 1 2793 0
 9881 3ba4 40F20000 		movw	r0, #:lower16:.LC42
 9882 3ba8 C0F20000 		movt	r0, #:upper16:.LC42
 9883 3bac FFF7FEFF 		bl	puts
2794:.\console.c   **** 				
2795:.\console.c   **** 				printf("Tilt Axis Resolution         = ");
 9884              		.loc 1 2795 0
 9885 3bb0 40F20000 		movw	r0, #:lower16:.LC487
 9886 3bb4 C0F20000 		movt	r0, #:upper16:.LC487
 9887 3bb8 FFF7FEFF 		bl	printf
2796:.\console.c   **** 				printf("%8.1f [step/2PI]",(float)(tilt_axis.param.resolution.fnum));
 9888              		.loc 1 2796 0
 9889 3bbc 40F20003 		movw	r3, #:lower16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 273


 9890 3bc0 C0F20003 		movt	r3, #:upper16:tilt_axis
 9891 3bc4 DB68     		ldr	r3, [r3, #12]	@ float
 9892 3bc6 1846     		mov	r0, r3
 9893 3bc8 FFF7FEFF 		bl	__aeabi_f2d
 9894 3bcc 0246     		mov	r2, r0
 9895 3bce 0B46     		mov	r3, r1
 9896 3bd0 40F20000 		movw	r0, #:lower16:.LC486
 9897 3bd4 C0F20000 		movt	r0, #:upper16:.LC486
 9898 3bd8 FFF7FEFF 		bl	printf
2797:.\console.c   **** 				printf("\r\n");	
 9899              		.loc 1 2797 0
 9900 3bdc 40F20000 		movw	r0, #:lower16:.LC42
 9901 3be0 C0F20000 		movt	r0, #:upper16:.LC42
 9902 3be4 FFF7FEFF 		bl	puts
2798:.\console.c   **** 				printf("\r\n");
 9903              		.loc 1 2798 0
 9904 3be8 40F20000 		movw	r0, #:lower16:.LC42
 9905 3bec C0F20000 		movt	r0, #:upper16:.LC42
 9906 3bf0 FFF7FEFF 		bl	puts
2799:.\console.c   **** 				
2800:.\console.c   **** 				
2801:.\console.c   **** 				printf("Motor Control\r\n");
 9907              		.loc 1 2801 0
 9908 3bf4 40F20000 		movw	r0, #:lower16:.LC488
 9909 3bf8 C0F20000 		movt	r0, #:upper16:.LC488
 9910 3bfc FFF7FEFF 		bl	puts
2802:.\console.c   **** 				printf("=============\r\n");		
 9911              		.loc 1 2802 0
 9912 3c00 40F20000 		movw	r0, #:lower16:.LC489
 9913 3c04 C0F20000 		movt	r0, #:upper16:.LC489
 9914 3c08 FFF7FEFF 		bl	puts
2803:.\console.c   **** 				
2804:.\console.c   **** 				//pan motor main params
2805:.\console.c   **** 				printf("Pan  Motor Polarity          = ");
 9915              		.loc 1 2805 0
 9916 3c0c 40F20000 		movw	r0, #:lower16:.LC490
 9917 3c10 C0F20000 		movt	r0, #:upper16:.LC490
 9918 3c14 FFF7FEFF 		bl	printf
2806:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(pan_axis.param.polarity));
 9919              		.loc 1 2806 0
 9920 3c18 40F20003 		movw	r3, #:lower16:pan_axis
 9921 3c1c C0F20003 		movt	r3, #:upper16:pan_axis
 9922 3c20 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 9923 3c22 40F20000 		movw	r0, #:lower16:.LC491
 9924 3c26 C0F20000 		movt	r0, #:upper16:.LC491
 9925 3c2a 1946     		mov	r1, r3
 9926 3c2c FFF7FEFF 		bl	printf
2807:.\console.c   **** 				printf("\r\n");
 9927              		.loc 1 2807 0
 9928 3c30 40F20000 		movw	r0, #:lower16:.LC42
 9929 3c34 C0F20000 		movt	r0, #:upper16:.LC42
 9930 3c38 FFF7FEFF 		bl	puts
2808:.\console.c   **** 
2809:.\console.c   **** 				printf("Pan  Motor Kp                = ");
 9931              		.loc 1 2809 0
 9932 3c3c 40F20000 		movw	r0, #:lower16:.LC492
 9933 3c40 C0F20000 		movt	r0, #:upper16:.LC492
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 274


 9934 3c44 FFF7FEFF 		bl	printf
2810:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kpf.fnum));
 9935              		.loc 1 2810 0
 9936 3c48 40F20003 		movw	r3, #:lower16:pan_axis
 9937 3c4c C0F20003 		movt	r3, #:upper16:pan_axis
 9938 3c50 5B69     		ldr	r3, [r3, #20]	@ float
 9939 3c52 1846     		mov	r0, r3
 9940 3c54 FFF7FEFF 		bl	__aeabi_f2d
 9941 3c58 0246     		mov	r2, r0
 9942 3c5a 0B46     		mov	r3, r1
 9943 3c5c 40F20000 		movw	r0, #:lower16:.LC493
 9944 3c60 C0F20000 		movt	r0, #:upper16:.LC493
 9945 3c64 FFF7FEFF 		bl	printf
2811:.\console.c   **** 				printf("\r\n");
 9946              		.loc 1 2811 0
 9947 3c68 40F20000 		movw	r0, #:lower16:.LC42
 9948 3c6c C0F20000 		movt	r0, #:upper16:.LC42
 9949 3c70 FFF7FEFF 		bl	puts
2812:.\console.c   **** 
2813:.\console.c   **** 				printf("Pan  Motor Kd                = ");
 9950              		.loc 1 2813 0
 9951 3c74 40F20000 		movw	r0, #:lower16:.LC494
 9952 3c78 C0F20000 		movt	r0, #:upper16:.LC494
 9953 3c7c FFF7FEFF 		bl	printf
2814:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kdf.fnum));
 9954              		.loc 1 2814 0
 9955 3c80 40F20003 		movw	r3, #:lower16:pan_axis
 9956 3c84 C0F20003 		movt	r3, #:upper16:pan_axis
 9957 3c88 9B69     		ldr	r3, [r3, #24]	@ float
 9958 3c8a 1846     		mov	r0, r3
 9959 3c8c FFF7FEFF 		bl	__aeabi_f2d
 9960 3c90 0246     		mov	r2, r0
 9961 3c92 0B46     		mov	r3, r1
 9962 3c94 40F20000 		movw	r0, #:lower16:.LC493
 9963 3c98 C0F20000 		movt	r0, #:upper16:.LC493
 9964 3c9c FFF7FEFF 		bl	printf
2815:.\console.c   **** 				printf("\r\n");
 9965              		.loc 1 2815 0
 9966 3ca0 40F20000 		movw	r0, #:lower16:.LC42
 9967 3ca4 C0F20000 		movt	r0, #:upper16:.LC42
 9968 3ca8 FFF7FEFF 		bl	puts
2816:.\console.c   **** 
2817:.\console.c   **** 				printf("Pan  Motor Ki                = ");
 9969              		.loc 1 2817 0
 9970 3cac 40F20000 		movw	r0, #:lower16:.LC495
 9971 3cb0 C0F20000 		movt	r0, #:upper16:.LC495
 9972 3cb4 FFF7FEFF 		bl	printf
2818:.\console.c   **** 				ShowParamsKiPan();
 9973              		.loc 1 2818 0
 9974 3cb8 FFF7FEFF 		bl	ShowParamsKiPan
2819:.\console.c   **** 				printf("\r\n");
 9975              		.loc 1 2819 0
 9976 3cbc 40F20000 		movw	r0, #:lower16:.LC42
 9977 3cc0 C0F20000 		movt	r0, #:upper16:.LC42
 9978 3cc4 FFF7FEFF 		bl	puts
2820:.\console.c   **** 				
2821:.\console.c   **** 				printf("Pan  Motor Ksi               = ");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 275


 9979              		.loc 1 2821 0
 9980 3cc8 40F20000 		movw	r0, #:lower16:.LC496
 9981 3ccc C0F20000 		movt	r0, #:upper16:.LC496
 9982 3cd0 FFF7FEFF 		bl	printf
2822:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(pan_axis.param.Ksif.fnum),
 9983              		.loc 1 2822 0
 9984 3cd4 40F20003 		movw	r3, #:lower16:pan_axis
 9985 3cd8 C0F20003 		movt	r3, #:upper16:pan_axis
 9986 3cdc 1B6A     		ldr	r3, [r3, #32]	@ float
 9987 3cde 1846     		mov	r0, r3
 9988 3ce0 FFF7FEFF 		bl	__aeabi_f2d
 9989 3ce4 0446     		mov	r4, r0
 9990 3ce6 0D46     		mov	r5, r1
2823:.\console.c   **** 										   (float)(pan_axis.param.Ksif.fnum * pan_axis.param.Kif.fnum));
 9991              		.loc 1 2823 0
 9992 3ce8 40F20003 		movw	r3, #:lower16:pan_axis
 9993 3cec C0F20003 		movt	r3, #:upper16:pan_axis
 9994 3cf0 1A6A     		ldr	r2, [r3, #32]	@ float
 9995 3cf2 40F20003 		movw	r3, #:lower16:pan_axis
 9996 3cf6 C0F20003 		movt	r3, #:upper16:pan_axis
 9997 3cfa DB69     		ldr	r3, [r3, #28]	@ float
 9998 3cfc 1046     		mov	r0, r2
 9999 3cfe 1946     		mov	r1, r3
 10000 3d00 FFF7FEFF 		bl	__aeabi_fmul
 10001 3d04 0346     		mov	r3, r0
2822:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(pan_axis.param.Ksif.fnum),
 10002              		.loc 1 2822 0
 10003 3d06 1846     		mov	r0, r3
 10004 3d08 FFF7FEFF 		bl	__aeabi_f2d
 10005 3d0c 0246     		mov	r2, r0
 10006 3d0e 0B46     		mov	r3, r1
 10007 3d10 CDE90023 		strd	r2, [sp]
 10008 3d14 40F20000 		movw	r0, #:lower16:.LC497
 10009 3d18 C0F20000 		movt	r0, #:upper16:.LC497
 10010 3d1c 2246     		mov	r2, r4
 10011 3d1e 2B46     		mov	r3, r5
 10012 3d20 FFF7FEFF 		bl	printf
2824:.\console.c   **** 				printf("\r\n");	
 10013              		.loc 1 2824 0
 10014 3d24 40F20000 		movw	r0, #:lower16:.LC42
 10015 3d28 C0F20000 		movt	r0, #:upper16:.LC42
 10016 3d2c FFF7FEFF 		bl	puts
2825:.\console.c   **** 				
2826:.\console.c   **** 				printf("Pan Limit Control            = ");
 10017              		.loc 1 2826 0
 10018 3d30 40F20000 		movw	r0, #:lower16:.LC498
 10019 3d34 C0F20000 		movt	r0, #:upper16:.LC498
 10020 3d38 FFF7FEFF 		bl	printf
2827:.\console.c   **** 				printf("%1u (0=disabled, 1=enabled)",(int16)(pan_axis.param.limit_control));
 10021              		.loc 1 2827 0
 10022 3d3c 40F20003 		movw	r3, #:lower16:pan_axis
 10023 3d40 C0F20003 		movt	r3, #:upper16:pan_axis
 10024 3d44 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 10025 3d48 40F20000 		movw	r0, #:lower16:.LC499
 10026 3d4c C0F20000 		movt	r0, #:upper16:.LC499
 10027 3d50 1946     		mov	r1, r3
 10028 3d52 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 276


2828:.\console.c   **** 				printf("\r\n");				
 10029              		.loc 1 2828 0
 10030 3d56 40F20000 		movw	r0, #:lower16:.LC42
 10031 3d5a C0F20000 		movt	r0, #:upper16:.LC42
 10032 3d5e FFF7FEFF 		bl	puts
2829:.\console.c   **** 				
2830:.\console.c   **** 	
2831:.\console.c   **** 				//tilt motor main params	
2832:.\console.c   **** 				printf("Tilt Motor Polarity          = ");
 10033              		.loc 1 2832 0
 10034 3d62 40F20000 		movw	r0, #:lower16:.LC500
 10035 3d66 C0F20000 		movt	r0, #:upper16:.LC500
 10036 3d6a FFF7FEFF 		bl	printf
2833:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(tilt_axis.param.polarity));
 10037              		.loc 1 2833 0
 10038 3d6e 40F20003 		movw	r3, #:lower16:tilt_axis
 10039 3d72 C0F20003 		movt	r3, #:upper16:tilt_axis
 10040 3d76 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 10041 3d78 40F20000 		movw	r0, #:lower16:.LC491
 10042 3d7c C0F20000 		movt	r0, #:upper16:.LC491
 10043 3d80 1946     		mov	r1, r3
 10044 3d82 FFF7FEFF 		bl	printf
2834:.\console.c   **** 				printf("\r\n");
 10045              		.loc 1 2834 0
 10046 3d86 40F20000 		movw	r0, #:lower16:.LC42
 10047 3d8a C0F20000 		movt	r0, #:upper16:.LC42
 10048 3d8e FFF7FEFF 		bl	puts
2835:.\console.c   **** 
2836:.\console.c   **** 				printf("Tilt Motor Kp                = ");
 10049              		.loc 1 2836 0
 10050 3d92 40F20000 		movw	r0, #:lower16:.LC501
 10051 3d96 C0F20000 		movt	r0, #:upper16:.LC501
 10052 3d9a FFF7FEFF 		bl	printf
2837:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kpf.fnum));
 10053              		.loc 1 2837 0
 10054 3d9e 40F20003 		movw	r3, #:lower16:tilt_axis
 10055 3da2 C0F20003 		movt	r3, #:upper16:tilt_axis
 10056 3da6 5B69     		ldr	r3, [r3, #20]	@ float
 10057 3da8 1846     		mov	r0, r3
 10058 3daa FFF7FEFF 		bl	__aeabi_f2d
 10059 3dae 0246     		mov	r2, r0
 10060 3db0 0B46     		mov	r3, r1
 10061 3db2 40F20000 		movw	r0, #:lower16:.LC493
 10062 3db6 C0F20000 		movt	r0, #:upper16:.LC493
 10063 3dba FFF7FEFF 		bl	printf
2838:.\console.c   **** 				printf("\r\n");
 10064              		.loc 1 2838 0
 10065 3dbe 40F20000 		movw	r0, #:lower16:.LC42
 10066 3dc2 C0F20000 		movt	r0, #:upper16:.LC42
 10067 3dc6 FFF7FEFF 		bl	puts
2839:.\console.c   **** 
2840:.\console.c   **** 				printf("Tilt Motor Kd                = ");
 10068              		.loc 1 2840 0
 10069 3dca 40F20000 		movw	r0, #:lower16:.LC502
 10070 3dce C0F20000 		movt	r0, #:upper16:.LC502
 10071 3dd2 FFF7FEFF 		bl	printf
2841:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kdf.fnum));
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 277


 10072              		.loc 1 2841 0
 10073 3dd6 40F20003 		movw	r3, #:lower16:tilt_axis
 10074 3dda C0F20003 		movt	r3, #:upper16:tilt_axis
 10075 3dde 9B69     		ldr	r3, [r3, #24]	@ float
 10076 3de0 1846     		mov	r0, r3
 10077 3de2 FFF7FEFF 		bl	__aeabi_f2d
 10078 3de6 0246     		mov	r2, r0
 10079 3de8 0B46     		mov	r3, r1
 10080 3dea 40F20000 		movw	r0, #:lower16:.LC493
 10081 3dee C0F20000 		movt	r0, #:upper16:.LC493
 10082 3df2 FFF7FEFF 		bl	printf
2842:.\console.c   **** 				printf("\r\n");
 10083              		.loc 1 2842 0
 10084 3df6 40F20000 		movw	r0, #:lower16:.LC42
 10085 3dfa C0F20000 		movt	r0, #:upper16:.LC42
 10086 3dfe FFF7FEFF 		bl	puts
2843:.\console.c   **** 
2844:.\console.c   **** 				printf("Tilt Motor Ki                = ");
 10087              		.loc 1 2844 0
 10088 3e02 40F20000 		movw	r0, #:lower16:.LC503
 10089 3e06 C0F20000 		movt	r0, #:upper16:.LC503
 10090 3e0a FFF7FEFF 		bl	printf
2845:.\console.c   **** 				ShowParamsKiTilt();
 10091              		.loc 1 2845 0
 10092 3e0e FFF7FEFF 		bl	ShowParamsKiTilt
2846:.\console.c   **** 				printf("\r\n");
 10093              		.loc 1 2846 0
 10094 3e12 40F20000 		movw	r0, #:lower16:.LC42
 10095 3e16 C0F20000 		movt	r0, #:upper16:.LC42
 10096 3e1a FFF7FEFF 		bl	puts
2847:.\console.c   **** 				
2848:.\console.c   **** 				printf("Tilt Motor Ksi               = ");
 10097              		.loc 1 2848 0
 10098 3e1e 40F20000 		movw	r0, #:lower16:.LC504
 10099 3e22 C0F20000 		movt	r0, #:upper16:.LC504
 10100 3e26 FFF7FEFF 		bl	printf
2849:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(tilt_axis.param.Ksif.fnum),
 10101              		.loc 1 2849 0
 10102 3e2a 40F20003 		movw	r3, #:lower16:tilt_axis
 10103 3e2e C0F20003 		movt	r3, #:upper16:tilt_axis
 10104 3e32 1B6A     		ldr	r3, [r3, #32]	@ float
 10105 3e34 1846     		mov	r0, r3
 10106 3e36 FFF7FEFF 		bl	__aeabi_f2d
 10107 3e3a 0446     		mov	r4, r0
 10108 3e3c 0D46     		mov	r5, r1
2850:.\console.c   **** 										   (float)(tilt_axis.param.Ksif.fnum * tilt_axis.param.Kif.fnum));
 10109              		.loc 1 2850 0
 10110 3e3e 40F20003 		movw	r3, #:lower16:tilt_axis
 10111 3e42 C0F20003 		movt	r3, #:upper16:tilt_axis
 10112 3e46 1A6A     		ldr	r2, [r3, #32]	@ float
 10113 3e48 40F20003 		movw	r3, #:lower16:tilt_axis
 10114 3e4c C0F20003 		movt	r3, #:upper16:tilt_axis
 10115 3e50 DB69     		ldr	r3, [r3, #28]	@ float
 10116 3e52 1046     		mov	r0, r2
 10117 3e54 1946     		mov	r1, r3
 10118 3e56 FFF7FEFF 		bl	__aeabi_fmul
 10119 3e5a 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 278


2849:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(tilt_axis.param.Ksif.fnum),
 10120              		.loc 1 2849 0
 10121 3e5c 1846     		mov	r0, r3
 10122 3e5e FFF7FEFF 		bl	__aeabi_f2d
 10123 3e62 0246     		mov	r2, r0
 10124 3e64 0B46     		mov	r3, r1
 10125 3e66 CDE90023 		strd	r2, [sp]
 10126 3e6a 40F20000 		movw	r0, #:lower16:.LC497
 10127 3e6e C0F20000 		movt	r0, #:upper16:.LC497
 10128 3e72 2246     		mov	r2, r4
 10129 3e74 2B46     		mov	r3, r5
 10130 3e76 FFF7FEFF 		bl	printf
2851:.\console.c   **** 				printf("\r\n");		
 10131              		.loc 1 2851 0
 10132 3e7a 40F20000 		movw	r0, #:lower16:.LC42
 10133 3e7e C0F20000 		movt	r0, #:upper16:.LC42
 10134 3e82 FFF7FEFF 		bl	puts
2852:.\console.c   **** 				
2853:.\console.c   **** 				printf("Tilt Limit Control           = ");
 10135              		.loc 1 2853 0
 10136 3e86 40F20000 		movw	r0, #:lower16:.LC505
 10137 3e8a C0F20000 		movt	r0, #:upper16:.LC505
 10138 3e8e FFF7FEFF 		bl	printf
2854:.\console.c   **** 				printf("%1u (0=disabled, 1=enabled)",(int16)(tilt_axis.param.limit_control));
 10139              		.loc 1 2854 0
 10140 3e92 40F20003 		movw	r3, #:lower16:tilt_axis
 10141 3e96 C0F20003 		movt	r3, #:upper16:tilt_axis
 10142 3e9a 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 10143 3e9e 40F20000 		movw	r0, #:lower16:.LC499
 10144 3ea2 C0F20000 		movt	r0, #:upper16:.LC499
 10145 3ea6 1946     		mov	r1, r3
 10146 3ea8 FFF7FEFF 		bl	printf
2855:.\console.c   **** 				printf("\r\n");						
 10147              		.loc 1 2855 0
 10148 3eac 40F20000 		movw	r0, #:lower16:.LC42
 10149 3eb0 C0F20000 		movt	r0, #:upper16:.LC42
 10150 3eb4 FFF7FEFF 		bl	puts
2856:.\console.c   **** 				printf("\r\n");					
 10151              		.loc 1 2856 0
 10152 3eb8 40F20000 		movw	r0, #:lower16:.LC42
 10153 3ebc C0F20000 		movt	r0, #:upper16:.LC42
 10154 3ec0 FFF7FEFF 		bl	puts
2857:.\console.c   **** 				
2858:.\console.c   **** 				printf("Absolute Sensors\r\n");
 10155              		.loc 1 2858 0
 10156 3ec4 40F20000 		movw	r0, #:lower16:.LC506
 10157 3ec8 C0F20000 		movt	r0, #:upper16:.LC506
 10158 3ecc FFF7FEFF 		bl	puts
2859:.\console.c   **** 				printf("================\r\n");			
 10159              		.loc 1 2859 0
 10160 3ed0 40F20000 		movw	r0, #:lower16:.LC507
 10161 3ed4 C0F20000 		movt	r0, #:upper16:.LC507
 10162 3ed8 FFF7FEFF 		bl	puts
2860:.\console.c   **** 
2861:.\console.c   **** 				//pan absolute sensor main params
2862:.\console.c   **** 				printf("Pan  Absolute sensor HOME    = ");
 10163              		.loc 1 2862 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 279


 10164 3edc 40F20000 		movw	r0, #:lower16:.LC508
 10165 3ee0 C0F20000 		movt	r0, #:upper16:.LC508
 10166 3ee4 FFF7FEFF 		bl	printf
2863:.\console.c   **** 				printf("%6i [ADC raw]    (invertion=%1d)",(int16)(pan_absolute_sensor.param.raw_home), (int16)p
 10167              		.loc 1 2863 0
 10168 3ee8 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10169 3eec C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10170 3ef0 DB8D     		ldrh	r3, [r3, #46]
 10171 3ef2 1AB2     		sxth	r2, r3
 10172 3ef4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10173 3ef8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10174 3efc 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 10175 3f00 40F20000 		movw	r0, #:lower16:.LC509
 10176 3f04 C0F20000 		movt	r0, #:upper16:.LC509
 10177 3f08 1146     		mov	r1, r2
 10178 3f0a 1A46     		mov	r2, r3
 10179 3f0c FFF7FEFF 		bl	printf
2864:.\console.c   **** 				printf("\r\n");
 10180              		.loc 1 2864 0
 10181 3f10 40F20000 		movw	r0, #:lower16:.LC42
 10182 3f14 C0F20000 		movt	r0, #:upper16:.LC42
 10183 3f18 FFF7FEFF 		bl	puts
2865:.\console.c   **** 				
2866:.\console.c   **** 				printf("Pan  Absolute sensor LimitMAX= ");
 10184              		.loc 1 2866 0
 10185 3f1c 40F20000 		movw	r0, #:lower16:.LC510
 10186 3f20 C0F20000 		movt	r0, #:upper16:.LC510
 10187 3f24 FFF7FEFF 		bl	printf
2867:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_max));
 10188              		.loc 1 2867 0
 10189 3f28 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10190 3f2c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10191 3f30 1B8E     		ldrh	r3, [r3, #48]
 10192 3f32 1BB2     		sxth	r3, r3
 10193 3f34 40F20000 		movw	r0, #:lower16:.LC511
 10194 3f38 C0F20000 		movt	r0, #:upper16:.LC511
 10195 3f3c 1946     		mov	r1, r3
 10196 3f3e FFF7FEFF 		bl	printf
2868:.\console.c   **** 				printf("\r\n");
 10197              		.loc 1 2868 0
 10198 3f42 40F20000 		movw	r0, #:lower16:.LC42
 10199 3f46 C0F20000 		movt	r0, #:upper16:.LC42
 10200 3f4a FFF7FEFF 		bl	puts
2869:.\console.c   **** 				
2870:.\console.c   **** 				printf("Pan  Absolute sensor Limitmin= ");
 10201              		.loc 1 2870 0
 10202 3f4e 40F20000 		movw	r0, #:lower16:.LC512
 10203 3f52 C0F20000 		movt	r0, #:upper16:.LC512
 10204 3f56 FFF7FEFF 		bl	printf
2871:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_min));
 10205              		.loc 1 2871 0
 10206 3f5a 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10207 3f5e C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10208 3f62 5B8E     		ldrh	r3, [r3, #50]
 10209 3f64 1BB2     		sxth	r3, r3
 10210 3f66 40F20000 		movw	r0, #:lower16:.LC511
 10211 3f6a C0F20000 		movt	r0, #:upper16:.LC511
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 280


 10212 3f6e 1946     		mov	r1, r3
 10213 3f70 FFF7FEFF 		bl	printf
2872:.\console.c   **** 				printf("\r\n");				
 10214              		.loc 1 2872 0
 10215 3f74 40F20000 		movw	r0, #:lower16:.LC42
 10216 3f78 C0F20000 		movt	r0, #:upper16:.LC42
 10217 3f7c FFF7FEFF 		bl	puts
2873:.\console.c   **** 
2874:.\console.c   **** 				printf("Pan  Absolute sensor Hyster. = ");
 10218              		.loc 1 2874 0
 10219 3f80 40F20000 		movw	r0, #:lower16:.LC513
 10220 3f84 C0F20000 		movt	r0, #:upper16:.LC513
 10221 3f88 FFF7FEFF 		bl	printf
2875:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_hysteresis));
 10222              		.loc 1 2875 0
 10223 3f8c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10224 3f90 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10225 3f94 9B8E     		ldrh	r3, [r3, #52]
 10226 3f96 1BB2     		sxth	r3, r3
 10227 3f98 40F20000 		movw	r0, #:lower16:.LC511
 10228 3f9c C0F20000 		movt	r0, #:upper16:.LC511
 10229 3fa0 1946     		mov	r1, r3
 10230 3fa2 FFF7FEFF 		bl	printf
2876:.\console.c   **** 				printf("\r\n");	
 10231              		.loc 1 2876 0
 10232 3fa6 40F20000 		movw	r0, #:lower16:.LC42
 10233 3faa C0F20000 		movt	r0, #:upper16:.LC42
 10234 3fae FFF7FEFF 		bl	puts
2877:.\console.c   **** 				
2878:.\console.c   **** 				printf("Pan  Absolute sensor Ratio   = ");
 10235              		.loc 1 2878 0
 10236 3fb2 40F20000 		movw	r0, #:lower16:.LC514
 10237 3fb6 C0F20000 		movt	r0, #:upper16:.LC514
 10238 3fba FFF7FEFF 		bl	printf
2879:.\console.c   **** 				printf("%3.3f [step/lsb]",(float)(pan_absolute_sensor.param.step_over_abs_ratio.fnum));
 10239              		.loc 1 2879 0
 10240 3fbe 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10241 3fc2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10242 3fc6 9B6B     		ldr	r3, [r3, #56]	@ float
 10243 3fc8 1846     		mov	r0, r3
 10244 3fca FFF7FEFF 		bl	__aeabi_f2d
 10245 3fce 0246     		mov	r2, r0
 10246 3fd0 0B46     		mov	r3, r1
 10247 3fd2 40F20000 		movw	r0, #:lower16:.LC515
 10248 3fd6 C0F20000 		movt	r0, #:upper16:.LC515
 10249 3fda FFF7FEFF 		bl	printf
2880:.\console.c   **** 				printf("\r\n");					
 10250              		.loc 1 2880 0
 10251 3fde 40F20000 		movw	r0, #:lower16:.LC42
 10252 3fe2 C0F20000 		movt	r0, #:upper16:.LC42
 10253 3fe6 FFF7FEFF 		bl	puts
2881:.\console.c   **** 				
2882:.\console.c   **** 
2883:.\console.c   **** 				//tilt absolute sensor main params
2884:.\console.c   **** 				printf("Tilt Absolute sensor HOME    = ");
 10254              		.loc 1 2884 0
 10255 3fea 40F20000 		movw	r0, #:lower16:.LC516
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 281


 10256 3fee C0F20000 		movt	r0, #:upper16:.LC516
 10257 3ff2 FFF7FEFF 		bl	printf
2885:.\console.c   **** 				printf("%6i [ADC raw]    (invertion=%1d)",(int16)(tilt_absolute_sensor.param.raw_home), (int16)
 10258              		.loc 1 2885 0
 10259 3ff6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10260 3ffa C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10261 3ffe DB8D     		ldrh	r3, [r3, #46]
 10262 4000 1AB2     		sxth	r2, r3
 10263 4002 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10264 4006 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10265 400a 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 10266 400e 40F20000 		movw	r0, #:lower16:.LC509
 10267 4012 C0F20000 		movt	r0, #:upper16:.LC509
 10268 4016 1146     		mov	r1, r2
 10269 4018 1A46     		mov	r2, r3
 10270 401a FFF7FEFF 		bl	printf
2886:.\console.c   **** 				printf("\r\n");	
 10271              		.loc 1 2886 0
 10272 401e 40F20000 		movw	r0, #:lower16:.LC42
 10273 4022 C0F20000 		movt	r0, #:upper16:.LC42
 10274 4026 FFF7FEFF 		bl	puts
2887:.\console.c   **** 				
2888:.\console.c   **** 				printf("Tilt Absolute sensor LimitMAX= ");
 10275              		.loc 1 2888 0
 10276 402a 40F20000 		movw	r0, #:lower16:.LC517
 10277 402e C0F20000 		movt	r0, #:upper16:.LC517
 10278 4032 FFF7FEFF 		bl	printf
2889:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_max));
 10279              		.loc 1 2889 0
 10280 4036 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10281 403a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10282 403e 1B8E     		ldrh	r3, [r3, #48]
 10283 4040 1BB2     		sxth	r3, r3
 10284 4042 40F20000 		movw	r0, #:lower16:.LC511
 10285 4046 C0F20000 		movt	r0, #:upper16:.LC511
 10286 404a 1946     		mov	r1, r3
 10287 404c FFF7FEFF 		bl	printf
2890:.\console.c   **** 				printf("\r\n");
 10288              		.loc 1 2890 0
 10289 4050 40F20000 		movw	r0, #:lower16:.LC42
 10290 4054 C0F20000 		movt	r0, #:upper16:.LC42
 10291 4058 FFF7FEFF 		bl	puts
2891:.\console.c   **** 				
2892:.\console.c   **** 				printf("Tilt Absolute sensor Limitmin= ");
 10292              		.loc 1 2892 0
 10293 405c 40F20000 		movw	r0, #:lower16:.LC518
 10294 4060 C0F20000 		movt	r0, #:upper16:.LC518
 10295 4064 FFF7FEFF 		bl	printf
2893:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_min));
 10296              		.loc 1 2893 0
 10297 4068 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10298 406c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10299 4070 5B8E     		ldrh	r3, [r3, #50]
 10300 4072 1BB2     		sxth	r3, r3
 10301 4074 40F20000 		movw	r0, #:lower16:.LC511
 10302 4078 C0F20000 		movt	r0, #:upper16:.LC511
 10303 407c 1946     		mov	r1, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 282


 10304 407e FFF7FEFF 		bl	printf
2894:.\console.c   **** 				printf("\r\n");				
 10305              		.loc 1 2894 0
 10306 4082 40F20000 		movw	r0, #:lower16:.LC42
 10307 4086 C0F20000 		movt	r0, #:upper16:.LC42
 10308 408a FFF7FEFF 		bl	puts
2895:.\console.c   **** 
2896:.\console.c   **** 				printf("Tilt Absolute sensor Hyster. = ");
 10309              		.loc 1 2896 0
 10310 408e 40F20000 		movw	r0, #:lower16:.LC519
 10311 4092 C0F20000 		movt	r0, #:upper16:.LC519
 10312 4096 FFF7FEFF 		bl	printf
2897:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_hysteresis));
 10313              		.loc 1 2897 0
 10314 409a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10315 409e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10316 40a2 9B8E     		ldrh	r3, [r3, #52]
 10317 40a4 1BB2     		sxth	r3, r3
 10318 40a6 40F20000 		movw	r0, #:lower16:.LC511
 10319 40aa C0F20000 		movt	r0, #:upper16:.LC511
 10320 40ae 1946     		mov	r1, r3
 10321 40b0 FFF7FEFF 		bl	printf
2898:.\console.c   **** 				printf("\r\n");
 10322              		.loc 1 2898 0
 10323 40b4 40F20000 		movw	r0, #:lower16:.LC42
 10324 40b8 C0F20000 		movt	r0, #:upper16:.LC42
 10325 40bc FFF7FEFF 		bl	puts
2899:.\console.c   **** 				
2900:.\console.c   **** 				printf("Tilt Absolute sensor Ratio   = ");
 10326              		.loc 1 2900 0
 10327 40c0 40F20000 		movw	r0, #:lower16:.LC520
 10328 40c4 C0F20000 		movt	r0, #:upper16:.LC520
 10329 40c8 FFF7FEFF 		bl	printf
2901:.\console.c   **** 				printf("%3.3f [step/lsb]",(float)(tilt_absolute_sensor.param.step_over_abs_ratio.fnum));	
 10330              		.loc 1 2901 0
 10331 40cc 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10332 40d0 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10333 40d4 9B6B     		ldr	r3, [r3, #56]	@ float
 10334 40d6 1846     		mov	r0, r3
 10335 40d8 FFF7FEFF 		bl	__aeabi_f2d
 10336 40dc 0246     		mov	r2, r0
 10337 40de 0B46     		mov	r3, r1
 10338 40e0 40F20000 		movw	r0, #:lower16:.LC515
 10339 40e4 C0F20000 		movt	r0, #:upper16:.LC515
 10340 40e8 FFF7FEFF 		bl	printf
2902:.\console.c   **** 				printf("\r\n");					
 10341              		.loc 1 2902 0
 10342 40ec 40F20000 		movw	r0, #:lower16:.LC42
 10343 40f0 C0F20000 		movt	r0, #:upper16:.LC42
 10344 40f4 FFF7FEFF 		bl	puts
2903:.\console.c   **** 				printf("\r\n");	
 10345              		.loc 1 2903 0
 10346 40f8 40F20000 		movw	r0, #:lower16:.LC42
 10347 40fc C0F20000 		movt	r0, #:upper16:.LC42
 10348 4100 FFF7FEFF 		bl	puts
2904:.\console.c   **** 				
2905:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 283


2906:.\console.c   **** 				printf("Motor Tuning\r\n");
 10349              		.loc 1 2906 0
 10350 4104 40F20000 		movw	r0, #:lower16:.LC521
 10351 4108 C0F20000 		movt	r0, #:upper16:.LC521
 10352 410c FFF7FEFF 		bl	puts
2907:.\console.c   **** 				printf("============\r\n");					
 10353              		.loc 1 2907 0
 10354 4110 40F20000 		movw	r0, #:lower16:.LC522
 10355 4114 C0F20000 		movt	r0, #:upper16:.LC522
 10356 4118 FFF7FEFF 		bl	puts
2908:.\console.c   **** 				printf("Pan  Motor Kopf              = ");
 10357              		.loc 1 2908 0
 10358 411c 40F20000 		movw	r0, #:lower16:.LC523
 10359 4120 C0F20000 		movt	r0, #:upper16:.LC523
 10360 4124 FFF7FEFF 		bl	printf
2909:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kopf.fnum));
 10361              		.loc 1 2909 0
 10362 4128 40F20003 		movw	r3, #:lower16:pan_axis
 10363 412c C0F20003 		movt	r3, #:upper16:pan_axis
 10364 4130 5B6A     		ldr	r3, [r3, #36]	@ float
 10365 4132 1846     		mov	r0, r3
 10366 4134 FFF7FEFF 		bl	__aeabi_f2d
 10367 4138 0246     		mov	r2, r0
 10368 413a 0B46     		mov	r3, r1
 10369 413c 40F20000 		movw	r0, #:lower16:.LC493
 10370 4140 C0F20000 		movt	r0, #:upper16:.LC493
 10371 4144 FFF7FEFF 		bl	printf
2910:.\console.c   **** 				printf("   AstimEN=%1u ",(int16)(pan_axis.vparam.astim_enable));
 10372              		.loc 1 2910 0
 10373 4148 40F20003 		movw	r3, #:lower16:pan_axis
 10374 414c C0F20003 		movt	r3, #:upper16:pan_axis
 10375 4150 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10376 4152 40F20000 		movw	r0, #:lower16:.LC524
 10377 4156 C0F20000 		movt	r0, #:upper16:.LC524
 10378 415a 1946     		mov	r1, r3
 10379 415c FFF7FEFF 		bl	printf
2911:.\console.c   **** 				ShowParamsAstim(&pan_axis);
 10380              		.loc 1 2911 0
 10381 4160 40F20000 		movw	r0, #:lower16:pan_axis
 10382 4164 C0F20000 		movt	r0, #:upper16:pan_axis
 10383 4168 FFF7FEFF 		bl	ShowParamsAstim
2912:.\console.c   **** 				
2913:.\console.c   **** 				printf("Pan  Anaout GAIN             = ");
 10384              		.loc 1 2913 0
 10385 416c 40F20000 		movw	r0, #:lower16:.LC525
 10386 4170 C0F20000 		movt	r0, #:upper16:.LC525
 10387 4174 FFF7FEFF 		bl	printf
2914:.\console.c   **** 				ShowParamsGainAnaout(&pan_axis);			
 10388              		.loc 1 2914 0
 10389 4178 40F20000 		movw	r0, #:lower16:pan_axis
 10390 417c C0F20000 		movt	r0, #:upper16:pan_axis
 10391 4180 FFF7FEFF 		bl	ShowParamsGainAnaout
2915:.\console.c   **** 				
2916:.\console.c   **** 				printf("Pan  AnaOut Signal (color)   = ");
 10392              		.loc 1 2916 0
 10393 4184 40F20000 		movw	r0, #:lower16:.LC526
 10394 4188 C0F20000 		movt	r0, #:upper16:.LC526
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 284


 10395 418c FFF7FEFF 		bl	printf
2917:.\console.c   **** 				ShowParamsColor(&pan_axis);						
 10396              		.loc 1 2917 0
 10397 4190 40F20000 		movw	r0, #:lower16:pan_axis
 10398 4194 C0F20000 		movt	r0, #:upper16:pan_axis
 10399 4198 FFF7FEFF 		bl	ShowParamsColor
2918:.\console.c   **** 				printf("\r\n");				
 10400              		.loc 1 2918 0
 10401 419c 40F20000 		movw	r0, #:lower16:.LC42
 10402 41a0 C0F20000 		movt	r0, #:upper16:.LC42
 10403 41a4 FFF7FEFF 		bl	puts
2919:.\console.c   **** 
2920:.\console.c   **** 				printf("Tilt Motor Kopf              = ");
 10404              		.loc 1 2920 0
 10405 41a8 40F20000 		movw	r0, #:lower16:.LC527
 10406 41ac C0F20000 		movt	r0, #:upper16:.LC527
 10407 41b0 FFF7FEFF 		bl	printf
2921:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kopf.fnum));
 10408              		.loc 1 2921 0
 10409 41b4 40F20003 		movw	r3, #:lower16:tilt_axis
 10410 41b8 C0F20003 		movt	r3, #:upper16:tilt_axis
 10411 41bc 5B6A     		ldr	r3, [r3, #36]	@ float
 10412 41be 1846     		mov	r0, r3
 10413 41c0 FFF7FEFF 		bl	__aeabi_f2d
 10414 41c4 0246     		mov	r2, r0
 10415 41c6 0B46     		mov	r3, r1
 10416 41c8 40F20000 		movw	r0, #:lower16:.LC493
 10417 41cc C0F20000 		movt	r0, #:upper16:.LC493
 10418 41d0 FFF7FEFF 		bl	printf
2922:.\console.c   **** 				printf("   AstimEN=%1u ",(int16)(tilt_axis.vparam.astim_enable));
 10419              		.loc 1 2922 0
 10420 41d4 40F20003 		movw	r3, #:lower16:tilt_axis
 10421 41d8 C0F20003 		movt	r3, #:upper16:tilt_axis
 10422 41dc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10423 41de 40F20000 		movw	r0, #:lower16:.LC524
 10424 41e2 C0F20000 		movt	r0, #:upper16:.LC524
 10425 41e6 1946     		mov	r1, r3
 10426 41e8 FFF7FEFF 		bl	printf
2923:.\console.c   **** 				ShowParamsAstim(&pan_axis);
 10427              		.loc 1 2923 0
 10428 41ec 40F20000 		movw	r0, #:lower16:pan_axis
 10429 41f0 C0F20000 		movt	r0, #:upper16:pan_axis
 10430 41f4 FFF7FEFF 		bl	ShowParamsAstim
2924:.\console.c   **** 				
2925:.\console.c   **** 				printf("Tilt Anaout GAIN             = ");
 10431              		.loc 1 2925 0
 10432 41f8 40F20000 		movw	r0, #:lower16:.LC528
 10433 41fc C0F20000 		movt	r0, #:upper16:.LC528
 10434 4200 FFF7FEFF 		bl	printf
2926:.\console.c   **** 				ShowParamsGainAnaout(&tilt_axis);			
 10435              		.loc 1 2926 0
 10436 4204 40F20000 		movw	r0, #:lower16:tilt_axis
 10437 4208 C0F20000 		movt	r0, #:upper16:tilt_axis
 10438 420c FFF7FEFF 		bl	ShowParamsGainAnaout
2927:.\console.c   **** 				
2928:.\console.c   **** 				printf("Tilt AnaOut Signal (color)   = ");
 10439              		.loc 1 2928 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 285


 10440 4210 40F20000 		movw	r0, #:lower16:.LC529
 10441 4214 C0F20000 		movt	r0, #:upper16:.LC529
 10442 4218 FFF7FEFF 		bl	printf
2929:.\console.c   **** 				ShowParamsColor(&tilt_axis);						
 10443              		.loc 1 2929 0
 10444 421c 40F20000 		movw	r0, #:lower16:tilt_axis
 10445 4220 C0F20000 		movt	r0, #:upper16:tilt_axis
 10446 4224 FFF7FEFF 		bl	ShowParamsColor
2930:.\console.c   **** 				printf("\r\n");				
 10447              		.loc 1 2930 0
 10448 4228 40F20000 		movw	r0, #:lower16:.LC42
 10449 422c C0F20000 		movt	r0, #:upper16:.LC42
 10450 4230 FFF7FEFF 		bl	puts
2931:.\console.c   **** 				
2932:.\console.c   **** 				printf("Anaout Selected Axis         = ");
 10451              		.loc 1 2932 0
 10452 4234 40F20000 		movw	r0, #:lower16:.LC530
 10453 4238 C0F20000 		movt	r0, #:upper16:.LC530
 10454 423c FFF7FEFF 		bl	printf
2933:.\console.c   **** 				ShowParamsAnaoutSelectedAxis(Selected_ANAOUT);	
 10455              		.loc 1 2933 0
 10456 4240 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 10457 4244 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 10458 4248 1B68     		ldr	r3, [r3, #0]
 10459 424a 1846     		mov	r0, r3
 10460 424c FFF7FEFF 		bl	ShowParamsAnaoutSelectedAxis
2934:.\console.c   **** 				printf("\r\n");
 10461              		.loc 1 2934 0
 10462 4250 40F20000 		movw	r0, #:lower16:.LC42
 10463 4254 C0F20000 		movt	r0, #:upper16:.LC42
 10464 4258 FFF7FEFF 		bl	puts
2935:.\console.c   **** 				printf("\r\n");				
 10465              		.loc 1 2935 0
 10466 425c 40F20000 		movw	r0, #:lower16:.LC42
 10467 4260 C0F20000 		movt	r0, #:upper16:.LC42
 10468 4264 FFF7FEFF 		bl	puts
2936:.\console.c   **** 
2937:.\console.c   **** 				printf("Accelerometer (100Hz)\r\n");
 10469              		.loc 1 2937 0
 10470 4268 40F20000 		movw	r0, #:lower16:.LC531
 10471 426c C0F20000 		movt	r0, #:upper16:.LC531
 10472 4270 FFF7FEFF 		bl	puts
2938:.\console.c   **** 				printf("=====================\r\n");					
 10473              		.loc 1 2938 0
 10474 4274 40F20000 		movw	r0, #:lower16:.LC532
 10475 4278 C0F20000 		movt	r0, #:upper16:.LC532
 10476 427c FFF7FEFF 		bl	puts
2939:.\console.c   **** 				printf("beta  (accelerometer LPF)    = ");
 10477              		.loc 1 2939 0
 10478 4280 40F20000 		movw	r0, #:lower16:.LC533
 10479 4284 C0F20000 		movt	r0, #:upper16:.LC533
 10480 4288 FFF7FEFF 		bl	printf
2940:.\console.c   **** 				printf("%8f (tau=%1.4f [msec])",(float)(gobee_param.beta.fnum), (float)LPFtau(gobee_param.beta.
 10481              		.loc 1 2940 0
 10482 428c 40F20003 		movw	r3, #:lower16:gobee_param
 10483 4290 C0F20003 		movt	r3, #:upper16:gobee_param
 10484 4294 5B68     		ldr	r3, [r3, #4]	@ float
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 286


 10485 4296 1846     		mov	r0, r3
 10486 4298 FFF7FEFF 		bl	__aeabi_f2d
 10487 429c 0446     		mov	r4, r0
 10488 429e 0D46     		mov	r5, r1
 10489 42a0 40F20003 		movw	r3, #:lower16:gobee_param
 10490 42a4 C0F20003 		movt	r3, #:upper16:gobee_param
 10491 42a8 5B68     		ldr	r3, [r3, #4]	@ float
 10492 42aa 1846     		mov	r0, r3
 10493 42ac 4DF20A71 		movw	r1, #55050
 10494 42b0 C3F62341 		movt	r1, 15395
 10495 42b4 FFF7FEFF 		bl	LPFtau
 10496 42b8 0346     		mov	r3, r0
 10497 42ba 1846     		mov	r0, r3
 10498 42bc FFF7FEFF 		bl	__aeabi_f2d
 10499 42c0 0246     		mov	r2, r0
 10500 42c2 0B46     		mov	r3, r1
 10501 42c4 CDE90023 		strd	r2, [sp]
 10502 42c8 40F20000 		movw	r0, #:lower16:.LC534
 10503 42cc C0F20000 		movt	r0, #:upper16:.LC534
 10504 42d0 2246     		mov	r2, r4
 10505 42d2 2B46     		mov	r3, r5
 10506 42d4 FFF7FEFF 		bl	printf
2941:.\console.c   **** 				printf(" (fc=%1.4f [Hz])\r\n", (float)LPFfreq(gobee_param.beta.fnum, H_DeltaT_const));				
 10507              		.loc 1 2941 0
 10508 42d8 40F20003 		movw	r3, #:lower16:gobee_param
 10509 42dc C0F20003 		movt	r3, #:upper16:gobee_param
 10510 42e0 5B68     		ldr	r3, [r3, #4]	@ float
 10511 42e2 1846     		mov	r0, r3
 10512 42e4 4DF20A71 		movw	r1, #55050
 10513 42e8 C3F62341 		movt	r1, 15395
 10514 42ec FFF7FEFF 		bl	LPFfreq
 10515 42f0 0346     		mov	r3, r0
 10516 42f2 1846     		mov	r0, r3
 10517 42f4 FFF7FEFF 		bl	__aeabi_f2d
 10518 42f8 0246     		mov	r2, r0
 10519 42fa 0B46     		mov	r3, r1
 10520 42fc 40F20000 		movw	r0, #:lower16:.LC535
 10521 4300 C0F20000 		movt	r0, #:upper16:.LC535
 10522 4304 FFF7FEFF 		bl	printf
2942:.\console.c   **** 
2943:.\console.c   **** 				printf("Analog Accel. X ADC Offset   = ");
 10523              		.loc 1 2943 0
 10524 4308 40F20000 		movw	r0, #:lower16:.LC536
 10525 430c C0F20000 		movt	r0, #:upper16:.LC536
 10526 4310 FFF7FEFF 		bl	printf
2944:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.x_acc_ADC_offset));
 10527              		.loc 1 2944 0
 10528 4314 40F20003 		movw	r3, #:lower16:gobee_param
 10529 4318 C0F20003 		movt	r3, #:upper16:gobee_param
 10530 431c 1B89     		ldrh	r3, [r3, #8]
 10531 431e 1BB2     		sxth	r3, r3
 10532 4320 40F20000 		movw	r0, #:lower16:.LC537
 10533 4324 C0F20000 		movt	r0, #:upper16:.LC537
 10534 4328 1946     		mov	r1, r3
 10535 432a FFF7FEFF 		bl	printf
2945:.\console.c   **** 				printf("\r\n");	
 10536              		.loc 1 2945 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 287


 10537 432e 40F20000 		movw	r0, #:lower16:.LC42
 10538 4332 C0F20000 		movt	r0, #:upper16:.LC42
 10539 4336 FFF7FEFF 		bl	puts
2946:.\console.c   **** 				
2947:.\console.c   **** 				printf("Analog Accel. Y ADC Offset   = ");
 10540              		.loc 1 2947 0
 10541 433a 40F20000 		movw	r0, #:lower16:.LC538
 10542 433e C0F20000 		movt	r0, #:upper16:.LC538
 10543 4342 FFF7FEFF 		bl	printf
2948:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.y_acc_ADC_offset));
 10544              		.loc 1 2948 0
 10545 4346 40F20003 		movw	r3, #:lower16:gobee_param
 10546 434a C0F20003 		movt	r3, #:upper16:gobee_param
 10547 434e 5B89     		ldrh	r3, [r3, #10]
 10548 4350 1BB2     		sxth	r3, r3
 10549 4352 40F20000 		movw	r0, #:lower16:.LC537
 10550 4356 C0F20000 		movt	r0, #:upper16:.LC537
 10551 435a 1946     		mov	r1, r3
 10552 435c FFF7FEFF 		bl	printf
2949:.\console.c   **** 				printf("\r\n");
 10553              		.loc 1 2949 0
 10554 4360 40F20000 		movw	r0, #:lower16:.LC42
 10555 4364 C0F20000 		movt	r0, #:upper16:.LC42
 10556 4368 FFF7FEFF 		bl	puts
2950:.\console.c   **** 				
2951:.\console.c   **** 				printf("Analog Accel. Z ADC Offset   = ");
 10557              		.loc 1 2951 0
 10558 436c 40F20000 		movw	r0, #:lower16:.LC539
 10559 4370 C0F20000 		movt	r0, #:upper16:.LC539
 10560 4374 FFF7FEFF 		bl	printf
2952:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.z_acc_ADC_offset));
 10561              		.loc 1 2952 0
 10562 4378 40F20003 		movw	r3, #:lower16:gobee_param
 10563 437c C0F20003 		movt	r3, #:upper16:gobee_param
 10564 4380 9B89     		ldrh	r3, [r3, #12]
 10565 4382 1BB2     		sxth	r3, r3
 10566 4384 40F20000 		movw	r0, #:lower16:.LC537
 10567 4388 C0F20000 		movt	r0, #:upper16:.LC537
 10568 438c 1946     		mov	r1, r3
 10569 438e FFF7FEFF 		bl	printf
2953:.\console.c   **** 				printf("\r\n");				
 10570              		.loc 1 2953 0
 10571 4392 40F20000 		movw	r0, #:lower16:.LC42
 10572 4396 C0F20000 		movt	r0, #:upper16:.LC42
 10573 439a FFF7FEFF 		bl	puts
2954:.\console.c   **** 				printf("\r\n");	
 10574              		.loc 1 2954 0
 10575 439e 40F20000 		movw	r0, #:lower16:.LC42
 10576 43a2 C0F20000 		movt	r0, #:upper16:.LC42
 10577 43a6 FFF7FEFF 		bl	puts
2955:.\console.c   **** 				
2956:.\console.c   **** 				printf("Bike Frame IMU (1.5kHz)\r\n");
 10578              		.loc 1 2956 0
 10579 43aa 40F20000 		movw	r0, #:lower16:.LC540
 10580 43ae C0F20000 		movt	r0, #:upper16:.LC540
 10581 43b2 FFF7FEFF 		bl	puts
2957:.\console.c   **** 				printf("=======================\r\n");					
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 288


 10582              		.loc 1 2957 0
 10583 43b6 40F20000 		movw	r0, #:lower16:.LC541
 10584 43ba C0F20000 		movt	r0, #:upper16:.LC541
 10585 43be FFF7FEFF 		bl	puts
2958:.\console.c   **** 				printf("gamma  (IMU LPF)             = ");
 10586              		.loc 1 2958 0
 10587 43c2 40F20000 		movw	r0, #:lower16:.LC542
 10588 43c6 C0F20000 		movt	r0, #:upper16:.LC542
 10589 43ca FFF7FEFF 		bl	printf
2959:.\console.c   **** 				printf("%8f (tau=%1.4f [msec])",(float)(IMU_sensor.param.gamma.fnum), (float)LPFtau(IMU_sensor.
 10590              		.loc 1 2959 0
 10591 43ce 40F20003 		movw	r3, #:lower16:IMU_sensor
 10592 43d2 C0F20003 		movt	r3, #:upper16:IMU_sensor
 10593 43d6 9B6A     		ldr	r3, [r3, #40]	@ float
 10594 43d8 1846     		mov	r0, r3
 10595 43da FFF7FEFF 		bl	__aeabi_f2d
 10596 43de 0446     		mov	r4, r0
 10597 43e0 0D46     		mov	r5, r1
 10598 43e2 40F20003 		movw	r3, #:lower16:IMU_sensor
 10599 43e6 C0F20003 		movt	r3, #:upper16:IMU_sensor
 10600 43ea 9B6A     		ldr	r3, [r3, #40]	@ float
 10601 43ec 1846     		mov	r0, r3
 10602 43ee 4CF24431 		movw	r1, #49988
 10603 43f2 C3F62E21 		movt	r1, 14894
 10604 43f6 FFF7FEFF 		bl	LPFtau
 10605 43fa 0346     		mov	r3, r0
 10606 43fc 1846     		mov	r0, r3
 10607 43fe FFF7FEFF 		bl	__aeabi_f2d
 10608 4402 0246     		mov	r2, r0
 10609 4404 0B46     		mov	r3, r1
 10610 4406 CDE90023 		strd	r2, [sp]
 10611 440a 40F20000 		movw	r0, #:lower16:.LC534
 10612 440e C0F20000 		movt	r0, #:upper16:.LC534
 10613 4412 2246     		mov	r2, r4
 10614 4414 2B46     		mov	r3, r5
 10615 4416 FFF7FEFF 		bl	printf
2960:.\console.c   **** 				printf(" (fc=%1.4f [Hz])\r\n", (float)LPFfreq(IMU_sensor.param.gamma.fnum, DeltaT_const));
 10616              		.loc 1 2960 0
 10617 441a 40F20003 		movw	r3, #:lower16:IMU_sensor
 10618 441e C0F20003 		movt	r3, #:upper16:IMU_sensor
 10619 4422 9B6A     		ldr	r3, [r3, #40]	@ float
 10620 4424 1846     		mov	r0, r3
 10621 4426 4CF24431 		movw	r1, #49988
 10622 442a C3F62E21 		movt	r1, 14894
 10623 442e FFF7FEFF 		bl	LPFfreq
 10624 4432 0346     		mov	r3, r0
 10625 4434 1846     		mov	r0, r3
 10626 4436 FFF7FEFF 		bl	__aeabi_f2d
 10627 443a 0246     		mov	r2, r0
 10628 443c 0B46     		mov	r3, r1
 10629 443e 40F20000 		movw	r0, #:lower16:.LC535
 10630 4442 C0F20000 		movt	r0, #:upper16:.LC535
 10631 4446 FFF7FEFF 		bl	printf
2961:.\console.c   **** 				
2962:.\console.c   **** 				printf("IMU Yaw angle invertion      = ");
 10632              		.loc 1 2962 0
 10633 444a 40F20000 		movw	r0, #:lower16:.LC543
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 289


 10634 444e C0F20000 		movt	r0, #:upper16:.LC543
 10635 4452 FFF7FEFF 		bl	printf
2963:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.yaw_invertion));
 10636              		.loc 1 2963 0
 10637 4456 40F20003 		movw	r3, #:lower16:IMU_sensor
 10638 445a C0F20003 		movt	r3, #:upper16:IMU_sensor
 10639 445e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 10640 4462 40F20000 		movw	r0, #:lower16:.LC491
 10641 4466 C0F20000 		movt	r0, #:upper16:.LC491
 10642 446a 1946     		mov	r1, r3
 10643 446c FFF7FEFF 		bl	printf
2964:.\console.c   **** 				printf("\r\n");
 10644              		.loc 1 2964 0
 10645 4470 40F20000 		movw	r0, #:lower16:.LC42
 10646 4474 C0F20000 		movt	r0, #:upper16:.LC42
 10647 4478 FFF7FEFF 		bl	puts
2965:.\console.c   **** 				
2966:.\console.c   **** 				printf("IMU Pitch angle invertion    = ");
 10648              		.loc 1 2966 0
 10649 447c 40F20000 		movw	r0, #:lower16:.LC544
 10650 4480 C0F20000 		movt	r0, #:upper16:.LC544
 10651 4484 FFF7FEFF 		bl	printf
2967:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.pitch_invertion));
 10652              		.loc 1 2967 0
 10653 4488 40F20003 		movw	r3, #:lower16:IMU_sensor
 10654 448c C0F20003 		movt	r3, #:upper16:IMU_sensor
 10655 4490 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 10656 4494 40F20000 		movw	r0, #:lower16:.LC491
 10657 4498 C0F20000 		movt	r0, #:upper16:.LC491
 10658 449c 1946     		mov	r1, r3
 10659 449e FFF7FEFF 		bl	printf
2968:.\console.c   **** 				printf("\r\n");
 10660              		.loc 1 2968 0
 10661 44a2 40F20000 		movw	r0, #:lower16:.LC42
 10662 44a6 C0F20000 		movt	r0, #:upper16:.LC42
 10663 44aa FFF7FEFF 		bl	puts
2969:.\console.c   **** 				
2970:.\console.c   **** 				printf("IMU Roll angle invertion     = ");
 10664              		.loc 1 2970 0
 10665 44ae 40F20000 		movw	r0, #:lower16:.LC545
 10666 44b2 C0F20000 		movt	r0, #:upper16:.LC545
 10667 44b6 FFF7FEFF 		bl	printf
2971:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.roll_invertion));
 10668              		.loc 1 2971 0
 10669 44ba 40F20003 		movw	r3, #:lower16:IMU_sensor
 10670 44be C0F20003 		movt	r3, #:upper16:IMU_sensor
 10671 44c2 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 10672 44c6 40F20000 		movw	r0, #:lower16:.LC491
 10673 44ca C0F20000 		movt	r0, #:upper16:.LC491
 10674 44ce 1946     		mov	r1, r3
 10675 44d0 FFF7FEFF 		bl	printf
2972:.\console.c   **** 				printf("\r\n");
 10676              		.loc 1 2972 0
 10677 44d4 40F20000 		movw	r0, #:lower16:.LC42
 10678 44d8 C0F20000 		movt	r0, #:upper16:.LC42
 10679 44dc FFF7FEFF 		bl	puts
2973:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 290


2974:.\console.c   **** 				printf("IMU Pith and Roll exchange   = ");
 10680              		.loc 1 2974 0
 10681 44e0 40F20000 		movw	r0, #:lower16:.LC546
 10682 44e4 C0F20000 		movt	r0, #:upper16:.LC546
 10683 44e8 FFF7FEFF 		bl	printf
2975:.\console.c   **** 				printf("%1u (0=true, 1=exchanged)",(int16)(IMU_sensor.param.pitch_roll_exchange));
 10684              		.loc 1 2975 0
 10685 44ec 40F20003 		movw	r3, #:lower16:IMU_sensor
 10686 44f0 C0F20003 		movt	r3, #:upper16:IMU_sensor
 10687 44f4 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 10688 44f8 40F20000 		movw	r0, #:lower16:.LC547
 10689 44fc C0F20000 		movt	r0, #:upper16:.LC547
 10690 4500 1946     		mov	r1, r3
 10691 4502 FFF7FEFF 		bl	printf
2976:.\console.c   **** 				printf("\r\n");				
 10692              		.loc 1 2976 0
 10693 4506 40F20000 		movw	r0, #:lower16:.LC42
 10694 450a C0F20000 		movt	r0, #:upper16:.LC42
 10695 450e FFF7FEFF 		bl	puts
2977:.\console.c   **** 				printf("\r\n");					
 10696              		.loc 1 2977 0
 10697 4512 40F20000 		movw	r0, #:lower16:.LC42
 10698 4516 C0F20000 		movt	r0, #:upper16:.LC42
 10699 451a FFF7FEFF 		bl	puts
2978:.\console.c   **** 				
2979:.\console.c   **** 				printf("Events Parameters\r\n");
 10700              		.loc 1 2979 0
 10701 451e 40F20000 		movw	r0, #:lower16:.LC548
 10702 4522 C0F20000 		movt	r0, #:upper16:.LC548
 10703 4526 FFF7FEFF 		bl	puts
2980:.\console.c   **** 				printf("=================\r\n");				
 10704              		.loc 1 2980 0
 10705 452a 40F20000 		movw	r0, #:lower16:.LC549
 10706 452e C0F20000 		movt	r0, #:upper16:.LC549
 10707 4532 FFF7FEFF 		bl	puts
2981:.\console.c   **** 				
2982:.\console.c   **** 				printf("Jump G Threshold             = ");
 10708              		.loc 1 2982 0
 10709 4536 40F20000 		movw	r0, #:lower16:.LC550
 10710 453a C0F20000 		movt	r0, #:upper16:.LC550
 10711 453e FFF7FEFF 		bl	printf
2983:.\console.c   **** 				printf("%8f [g]\r\n",(float)(gobee_param.jump_g_threshold.fnum));				
 10712              		.loc 1 2983 0
 10713 4542 40F20003 		movw	r3, #:lower16:gobee_param
 10714 4546 C0F20003 		movt	r3, #:upper16:gobee_param
 10715 454a 1B69     		ldr	r3, [r3, #16]	@ float
 10716 454c 1846     		mov	r0, r3
 10717 454e FFF7FEFF 		bl	__aeabi_f2d
 10718 4552 0246     		mov	r2, r0
 10719 4554 0B46     		mov	r3, r1
 10720 4556 40F20000 		movw	r0, #:lower16:.LC551
 10721 455a C0F20000 		movt	r0, #:upper16:.LC551
 10722 455e FFF7FEFF 		bl	printf
2984:.\console.c   **** 
2985:.\console.c   **** 				printf("Acceleration G Threshold     = ");
 10723              		.loc 1 2985 0
 10724 4562 40F20000 		movw	r0, #:lower16:.LC552
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 291


 10725 4566 C0F20000 		movt	r0, #:upper16:.LC552
 10726 456a FFF7FEFF 		bl	printf
2986:.\console.c   **** 				printf("%8f [g]\r\n",(float)(gobee_param.acc_g_threshold.fnum));				
 10727              		.loc 1 2986 0
 10728 456e 40F20003 		movw	r3, #:lower16:gobee_param
 10729 4572 C0F20003 		movt	r3, #:upper16:gobee_param
 10730 4576 5B69     		ldr	r3, [r3, #20]	@ float
 10731 4578 1846     		mov	r0, r3
 10732 457a FFF7FEFF 		bl	__aeabi_f2d
 10733 457e 0246     		mov	r2, r0
 10734 4580 0B46     		mov	r3, r1
 10735 4582 40F20000 		movw	r0, #:lower16:.LC551
 10736 4586 C0F20000 		movt	r0, #:upper16:.LC551
 10737 458a FFF7FEFF 		bl	printf
2987:.\console.c   **** 				printf("\r\n");
 10738              		.loc 1 2987 0
 10739 458e 40F20000 		movw	r0, #:lower16:.LC42
 10740 4592 C0F20000 		movt	r0, #:upper16:.LC42
 10741 4596 FFF7FEFF 		bl	puts
2988:.\console.c   **** 				
2989:.\console.c   **** 				goto exitpars;
 10742              		.loc 1 2989 0
 10743 459a 02F089BC 		b	.L131
 10744              	.L224:
2990:.\console.c   **** 			}
2991:.\console.c   **** 		goto exitpars;	
2992:.\console.c   **** 		}
2993:.\console.c   **** 		
2994:.\console.c   **** 		
2995:.\console.c   **** //		/* CMD MOVEPATH */
2996:.\console.c   **** //		if ((strcmp(actual_cmd.action, "movepath") == 0) ||
2997:.\console.c   **** //		   (strcmp(actual_cmd.action, "movep") == 0))
2998:.\console.c   **** //		{	
2999:.\console.c   **** //			if (((path_n = atoi(actual_cmd.parameter)) >= 0)
3000:.\console.c   **** //			&& (path_n = atoi(actual_cmd.parameter)) <= PATH_N_MAX-1)
3001:.\console.c   **** //			{
3002:.\console.c   **** //				if (machine_state == GOBEE_ENERGIZED)
3003:.\console.c   **** //				{
3004:.\console.c   **** //					printf("Path %2i Mover START!\r\n", (int16)path_n);				
3005:.\console.c   **** //					MoverStart(path_n);	/* Initialize & Start the Mover over path n		*/
3006:.\console.c   **** //					
3007:.\console.c   **** //					while (AnyButtonPressed() == NO_PRESSED)
3008:.\console.c   **** //					{
3009:.\console.c   **** //						//print . every 1 sec
3010:.\console.c   **** //						if (mover.ticks % MOVER_FREQ)
3011:.\console.c   **** //						printf(".");
3012:.\console.c   **** //						
3013:.\console.c   **** //						if (mover.status == MOVER_ENDED)
3014:.\console.c   **** //						{
3015:.\console.c   **** //							printf("\r\nPath %2i Mover END!\r\n", (int16)path_n);						
3016:.\console.c   **** //							goto exitpars;
3017:.\console.c   **** //						}
3018:.\console.c   **** //					}
3019:.\console.c   **** //				}
3020:.\console.c   **** //				else
3021:.\console.c   **** //				{
3022:.\console.c   **** //					printf("Mover Not Started: energize the Gobee before!\r\n");	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 292


3023:.\console.c   **** //				}
3024:.\console.c   **** //			}
3025:.\console.c   **** //			else
3026:.\console.c   **** //			{
3027:.\console.c   **** //				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3028:.\console.c   **** //			}
3029:.\console.c   **** //			goto exitpars;	
3030:.\console.c   **** //		}	
3031:.\console.c   **** 
3032:.\console.c   **** 		
3033:.\console.c   **** 		/* CMD CLUEXEC */
3034:.\console.c   **** 		if (strcmp(actual_cmd.action, "cluexec") == 0)
 10745              		.loc 1 3034 0
 10746 459e 40F20000 		movw	r0, #:lower16:actual_cmd
 10747 45a2 C0F20000 		movt	r0, #:upper16:actual_cmd
 10748 45a6 40F20001 		movw	r1, #:lower16:.LC553
 10749 45aa C0F20001 		movt	r1, #:upper16:.LC553
 10750 45ae FFF7FEFF 		bl	strcmp
 10751 45b2 0346     		mov	r3, r0
 10752 45b4 002B     		cmp	r3, #0
 10753 45b6 5ED1     		bne	.L373
3035:.\console.c   **** 		{	
3036:.\console.c   **** 			if (((clu_number = atoi(actual_cmd.parameter)) >= 0)
 10754              		.loc 1 3036 0
 10755 45b8 B148     		ldr	r0, .L739
 10756 45ba FFF7FEFF 		bl	atoi
 10757 45be 0346     		mov	r3, r0
 10758 45c0 87F8EA30 		strb	r3, [r7, #234]
3037:.\console.c   **** 			&& (clu_number = atoi(actual_cmd.parameter)) <= MAX_CLU_NUMBER)
 10759              		.loc 1 3037 0
 10760 45c4 AE48     		ldr	r0, .L739
 10761 45c6 FFF7FEFF 		bl	atoi
 10762 45ca 0346     		mov	r3, r0
 10763 45cc 87F8EA30 		strb	r3, [r7, #234]
 10764 45d0 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10765 45d4 322B     		cmp	r3, #50
 10766 45d6 44D8     		bhi	.L374
3038:.\console.c   **** 			{
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10767              		.loc 1 3039 0
 10768 45d8 40F20003 		movw	r3, #:lower16:machine_state
 10769 45dc C0F20003 		movt	r3, #:upper16:machine_state
 10770 45e0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10771 45e2 052B     		cmp	r3, #5
 10772 45e4 35D1     		bne	.L375
3040:.\console.c   **** 				{
3041:.\console.c   **** 					if (isCluEmpty(clu_number) == CLU_IS_NOT_EMPTY)
 10773              		.loc 1 3041 0
 10774 45e6 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10775 45ea 1846     		mov	r0, r3
 10776 45ec FFF7FEFF 		bl	isCluEmpty
 10777 45f0 0346     		mov	r3, r0
 10778 45f2 002B     		cmp	r3, #0
 10779 45f4 26D1     		bne	.L376
3042:.\console.c   **** 					{
3043:.\console.c   **** 						printf("CLU %2i START!\r\n", (int16)clu_number);
 10780              		.loc 1 3043 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 293


 10781 45f6 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10782 45fa 40F20000 		movw	r0, #:lower16:.LC554
 10783 45fe C0F20000 		movt	r0, #:upper16:.LC554
 10784 4602 1946     		mov	r1, r3
 10785 4604 FFF7FEFF 		bl	printf
3044:.\console.c   **** 						clu_sm_start((uint8)clu_number);
 10786              		.loc 1 3044 0
 10787 4608 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10788 460c 1846     		mov	r0, r3
 10789 460e FFF7FEFF 		bl	clu_sm_start
3045:.\console.c   **** 						
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 10790              		.loc 1 3046 0
 10791 4612 11E0     		b	.L377
 10792              	.L378:
3047:.\console.c   **** 						{					
3048:.\console.c   **** 							if (clu_sm.status == CLUSM_END)
 10793              		.loc 1 3048 0
 10794 4614 40F20003 		movw	r3, #:lower16:clu_sm
 10795 4618 C0F20003 		movt	r3, #:upper16:clu_sm
 10796 461c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10797 461e 0C2B     		cmp	r3, #12
 10798 4620 0AD1     		bne	.L377
3049:.\console.c   **** 							{
3050:.\console.c   **** 								printf("\r\nCLU %2i END!\r\n", (int16)clu_number);						
 10799              		.loc 1 3050 0
 10800 4622 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10801 4626 40F20000 		movw	r0, #:lower16:.LC555
 10802 462a C0F20000 		movt	r0, #:upper16:.LC555
 10803 462e 1946     		mov	r1, r3
 10804 4630 FFF7FEFF 		bl	printf
3051:.\console.c   **** 								goto exitpars;
 10805              		.loc 1 3051 0
 10806 4634 02F03CBC 		b	.L131
 10807              	.L377:
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 10808              		.loc 1 3046 0 discriminator 1
 10809 4638 FFF7FEFF 		bl	AnyButtonPressed
 10810 463c 0346     		mov	r3, r0
 10811 463e 002B     		cmp	r3, #0
 10812 4640 E8D0     		beq	.L378
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 10813              		.loc 1 3046 0 is_stmt 0
 10814 4642 0DE0     		b	.L683
 10815              	.L376:
3052:.\console.c   **** 							}
3053:.\console.c   **** 						}
3054:.\console.c   **** 					}
3055:.\console.c   **** 					else
3056:.\console.c   **** 					{
3057:.\console.c   **** 						printf("CLU not started: selected CLU is empty!\r\n");	
 10816              		.loc 1 3057 0 is_stmt 1
 10817 4644 40F20000 		movw	r0, #:lower16:.LC556
 10818 4648 C0F20000 		movt	r0, #:upper16:.LC556
 10819 464c FFF7FEFF 		bl	puts
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10820              		.loc 1 3039 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 294


 10821 4650 0FE0     		b	.L380
 10822              	.L375:
3058:.\console.c   **** 					}
3059:.\console.c   **** 				}
3060:.\console.c   **** 				else
3061:.\console.c   **** 				{
3062:.\console.c   **** 					printf("CLU not started: energize the Gobee before!\r\n");	
 10823              		.loc 1 3062 0
 10824 4652 40F20000 		movw	r0, #:lower16:.LC557
 10825 4656 C0F20000 		movt	r0, #:upper16:.LC557
 10826 465a FFF7FEFF 		bl	puts
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10827              		.loc 1 3039 0
 10828 465e 08E0     		b	.L380
 10829              	.L683:
 10830 4660 07E0     		b	.L380
 10831              	.L374:
3063:.\console.c   **** 				}
3064:.\console.c   **** 			}
3065:.\console.c   **** 			else
3066:.\console.c   **** 			{
3067:.\console.c   **** 				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 10832              		.loc 1 3067 0
 10833 4662 40F20000 		movw	r0, #:lower16:.LC450
 10834 4666 C0F20000 		movt	r0, #:upper16:.LC450
 10835 466a FFF7FEFF 		bl	printf
3068:.\console.c   **** 			}
3069:.\console.c   **** 			goto exitpars;	
 10836              		.loc 1 3069 0
 10837 466e 02F01FBC 		b	.L131
 10838              	.L380:
 10839 4672 02F01DBC 		b	.L131
 10840              	.L373:
3070:.\console.c   **** 		}
3071:.\console.c   **** 		/* END CMD CLUEXEC*/
3072:.\console.c   **** 		
3073:.\console.c   **** 		
3074:.\console.c   **** 		/* CMD CLUSEQUENCE */
3075:.\console.c   **** 		if (strcmp(actual_cmd.action, "cluseq") == 0)
 10841              		.loc 1 3075 0
 10842 4676 40F20000 		movw	r0, #:lower16:actual_cmd
 10843 467a C0F20000 		movt	r0, #:upper16:actual_cmd
 10844 467e 40F20001 		movw	r1, #:lower16:.LC558
 10845 4682 C0F20001 		movt	r1, #:upper16:.LC558
 10846 4686 FFF7FEFF 		bl	strcmp
 10847 468a 0346     		mov	r3, r0
 10848 468c 002B     		cmp	r3, #0
 10849 468e 79D1     		bne	.L381
3076:.\console.c   **** 		{	
3077:.\console.c   **** 			if (((clu_pause = atoi(actual_cmd.parameter)) >= 0)
 10850              		.loc 1 3077 0
 10851 4690 7B48     		ldr	r0, .L739
 10852 4692 FFF7FEFF 		bl	atoi
 10853 4696 0346     		mov	r3, r0
 10854 4698 87F8E930 		strb	r3, [r7, #233]
3078:.\console.c   **** 			&& (clu_pause = atoi(actual_cmd.parameter)) <= 30000)
 10855              		.loc 1 3078 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 295


 10856 469c 7848     		ldr	r0, .L739
 10857 469e FFF7FEFF 		bl	atoi
 10858 46a2 0346     		mov	r3, r0
 10859 46a4 87F8E930 		strb	r3, [r7, #233]
3079:.\console.c   **** 			{
3080:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10860              		.loc 1 3080 0
 10861 46a8 40F20003 		movw	r3, #:lower16:machine_state
 10862 46ac C0F20003 		movt	r3, #:upper16:machine_state
 10863 46b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10864 46b2 052B     		cmp	r3, #5
 10865 46b4 5DD1     		bne	.L382
 10866              	.LBB9:
3081:.\console.c   **** 				{				
3082:.\console.c   **** 					InitCluSequence();
 10867              		.loc 1 3082 0
 10868 46b6 FFF7FEFF 		bl	InitCluSequence
3083:.\console.c   **** 					
3084:.\console.c   **** 					uint8 clu_step = 0;
 10869              		.loc 1 3084 0
 10870 46ba 4FF00003 		mov	r3, #0
 10871 46be 87F8FE30 		strb	r3, [r7, #254]
3085:.\console.c   **** 					while (clu_sequence[clu_step] != 0xFF)
 10872              		.loc 1 3085 0
 10873 46c2 45E0     		b	.L383
 10874              	.L386:
3086:.\console.c   **** 					{
3087:.\console.c   **** 						printf("CLU %2i START!\r\n", (int16)clu_sequence[clu_step]);
 10875              		.loc 1 3087 0
 10876 46c4 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 10877 46c8 40F20003 		movw	r3, #:lower16:clu_sequence
 10878 46cc C0F20003 		movt	r3, #:upper16:clu_sequence
 10879 46d0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10880 46d2 40F20000 		movw	r0, #:lower16:.LC554
 10881 46d6 C0F20000 		movt	r0, #:upper16:.LC554
 10882 46da 1946     		mov	r1, r3
 10883 46dc FFF7FEFF 		bl	printf
3088:.\console.c   **** 						clu_sm_start((uint8)clu_sequence[clu_step]);
 10884              		.loc 1 3088 0
 10885 46e0 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 10886 46e4 40F20003 		movw	r3, #:lower16:clu_sequence
 10887 46e8 C0F20003 		movt	r3, #:upper16:clu_sequence
 10888 46ec 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10889 46ee 1846     		mov	r0, r3
 10890 46f0 FFF7FEFF 		bl	clu_sm_start
3089:.\console.c   **** 
3090:.\console.c   **** 						while (clu_sm.status != CLUSM_END)
 10891              		.loc 1 3090 0
 10892 46f4 0CE0     		b	.L384
 10893              	.L385:
3091:.\console.c   **** 						{
3092:.\console.c   **** 							if (AnyButtonPressed() == PRESSED)
 10894              		.loc 1 3092 0
 10895 46f6 FFF7FEFF 		bl	AnyButtonPressed
 10896 46fa 0346     		mov	r3, r0
 10897 46fc 012B     		cmp	r3, #1
 10898 46fe 07D1     		bne	.L384
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 296


3093:.\console.c   **** 							{
3094:.\console.c   **** 								printf("\r\nUser Abort!\r\n");
 10899              		.loc 1 3094 0
 10900 4700 40F20000 		movw	r0, #:lower16:.LC559
 10901 4704 C0F20000 		movt	r0, #:upper16:.LC559
 10902 4708 FFF7FEFF 		bl	puts
3095:.\console.c   **** 								
3096:.\console.c   **** 								goto exitpars;	
 10903              		.loc 1 3096 0
 10904 470c 02F0D0BB 		b	.L131
 10905              	.L384:
3090:.\console.c   **** 						while (clu_sm.status != CLUSM_END)
 10906              		.loc 1 3090 0 discriminator 1
 10907 4710 40F20003 		movw	r3, #:lower16:clu_sm
 10908 4714 C0F20003 		movt	r3, #:upper16:clu_sm
 10909 4718 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10910 471a 0C2B     		cmp	r3, #12
 10911 471c EBD1     		bne	.L385
3097:.\console.c   **** 							}	
3098:.\console.c   **** 						}
3099:.\console.c   **** 						printf("\r\nCLU %2i END!\r\n", (int16)clu_sequence[clu_step]);
 10912              		.loc 1 3099 0
 10913 471e 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 10914 4722 40F20003 		movw	r3, #:lower16:clu_sequence
 10915 4726 C0F20003 		movt	r3, #:upper16:clu_sequence
 10916 472a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10917 472c 40F20000 		movw	r0, #:lower16:.LC555
 10918 4730 C0F20000 		movt	r0, #:upper16:.LC555
 10919 4734 1946     		mov	r1, r3
 10920 4736 FFF7FEFF 		bl	printf
3100:.\console.c   **** 						CyDelay(clu_pause);
 10921              		.loc 1 3100 0
 10922 473a 97F8E930 		ldrb	r3, [r7, #233]	@ zero_extendqisi2
 10923 473e 1846     		mov	r0, r3
 10924 4740 FFF7FEFF 		bl	CyDelay
3101:.\console.c   **** 						clu_step++;
 10925              		.loc 1 3101 0
 10926 4744 97F8FE30 		ldrb	r3, [r7, #254]
 10927 4748 03F10103 		add	r3, r3, #1
 10928 474c 87F8FE30 		strb	r3, [r7, #254]
 10929              	.L383:
3085:.\console.c   **** 					while (clu_sequence[clu_step] != 0xFF)
 10930              		.loc 1 3085 0 discriminator 1
 10931 4750 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 10932 4754 40F20003 		movw	r3, #:lower16:clu_sequence
 10933 4758 C0F20003 		movt	r3, #:upper16:clu_sequence
 10934 475c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10935 475e FF2B     		cmp	r3, #255
 10936 4760 B0D1     		bne	.L386
3102:.\console.c   **** 					}
3103:.\console.c   **** 					printf("\r\nCLU SEQUENCE END!\r\n");
 10937              		.loc 1 3103 0
 10938 4762 40F20000 		movw	r0, #:lower16:.LC560
 10939 4766 C0F20000 		movt	r0, #:upper16:.LC560
 10940 476a FFF7FEFF 		bl	puts
3104:.\console.c   **** 					goto exitpars;
 10941              		.loc 1 3104 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 297


 10942 476e 02F09FBB 		b	.L131
 10943              	.L382:
 10944              	.LBE9:
3105:.\console.c   **** 				}
3106:.\console.c   **** 				else
3107:.\console.c   **** 				{
3108:.\console.c   **** 					printf("CLUSEQ not started: energize the Gobee before!\r\n");	
 10945              		.loc 1 3108 0 discriminator 1
 10946 4772 40F20000 		movw	r0, #:lower16:.LC561
 10947 4776 C0F20000 		movt	r0, #:upper16:.LC561
 10948 477a FFF7FEFF 		bl	puts
3080:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10949              		.loc 1 3080 0 discriminator 1
 10950 477e 00BF     		nop
3109:.\console.c   **** 				}				
3110:.\console.c   **** 			}
3111:.\console.c   **** 			else
3112:.\console.c   **** 			{
3113:.\console.c   **** 				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3114:.\console.c   **** 			}
3115:.\console.c   **** 			goto exitpars;	
 10951              		.loc 1 3115 0 discriminator 1
 10952 4780 02F096BB 		b	.L131
 10953              	.L381:
3116:.\console.c   **** 		}
3117:.\console.c   **** 		/* END CMD CLUSEQUENCE*/		
3118:.\console.c   **** 		
3119:.\console.c   **** 		
3120:.\console.c   **** 		/* CMD GOTOHOME */
3121:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotohome") == 0) ||
 10954              		.loc 1 3121 0
 10955 4784 40F20000 		movw	r0, #:lower16:actual_cmd
 10956 4788 C0F20000 		movt	r0, #:upper16:actual_cmd
 10957 478c 40F20001 		movw	r1, #:lower16:.LC562
 10958 4790 C0F20001 		movt	r1, #:upper16:.LC562
 10959 4794 FFF7FEFF 		bl	strcmp
 10960 4798 0346     		mov	r3, r0
 10961 479a 002B     		cmp	r3, #0
 10962 479c 0CD0     		beq	.L387
3122:.\console.c   **** 		   (strcmp(actual_cmd.action, "gotoh") == 0))
 10963              		.loc 1 3122 0 discriminator 1
 10964 479e 40F20000 		movw	r0, #:lower16:actual_cmd
 10965 47a2 C0F20000 		movt	r0, #:upper16:actual_cmd
 10966 47a6 40F20001 		movw	r1, #:lower16:.LC563
 10967 47aa C0F20001 		movt	r1, #:upper16:.LC563
 10968 47ae FFF7FEFF 		bl	strcmp
 10969 47b2 0346     		mov	r3, r0
3121:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotohome") == 0) ||
 10970              		.loc 1 3121 0 discriminator 1
 10971 47b4 002B     		cmp	r3, #0
 10972 47b6 65D1     		bne	.L388
 10973              	.L387:
3123:.\console.c   **** 		{	
3124:.\console.c   **** 			if (machine_state == GOBEE_ENERGIZED)
 10974              		.loc 1 3124 0
 10975 47b8 40F20003 		movw	r3, #:lower16:machine_state
 10976 47bc C0F20003 		movt	r3, #:upper16:machine_state
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 298


 10977 47c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10978 47c2 052B     		cmp	r3, #5
 10979 47c4 52D1     		bne	.L389
3125:.\console.c   **** 			{
3126:.\console.c   **** 				printf("Goto Home Mover START!\r\n");	
 10980              		.loc 1 3126 0
 10981 47c6 40F20000 		movw	r0, #:lower16:.LC564
 10982 47ca C0F20000 		movt	r0, #:upper16:.LC564
 10983 47ce FFF7FEFF 		bl	puts
3127:.\console.c   **** 				InitPanGotoHomePath();						/* initialize the Pan Goto Home Path					*/
 10984              		.loc 1 3127 0
 10985 47d2 FFF7FEFF 		bl	InitPanGotoHomePath
3128:.\console.c   **** 				InitTiltGotoHomePath();						/* initialize the Tilt Goto Home Path					*/			
 10986              		.loc 1 3128 0
 10987 47d6 FFF7FEFF 		bl	InitTiltGotoHomePath
3129:.\console.c   **** 				CalculatePanGotoHomePath();					/* Calculate the  Pan Goto Home Path 					*/
 10988              		.loc 1 3129 0
 10989 47da FFF7FEFF 		bl	CalculatePanGotoHomePath
3130:.\console.c   **** 				CalculateTiltGotoHomePath();				/* Calculate the  Tilt Goto Home Path 					*/			
 10990              		.loc 1 3130 0
 10991 47de FFF7FEFF 		bl	CalculateTiltGotoHomePath
3131:.\console.c   **** 				MoverStart(&mover_pan, PATH_PGOTOHOME);		/* Initialize & Start the Mover over Pan path to Home	
 10992              		.loc 1 3131 0
 10993 47e2 40F20000 		movw	r0, #:lower16:mover_pan
 10994 47e6 C0F20000 		movt	r0, #:upper16:mover_pan
 10995 47ea 4FF00201 		mov	r1, #2
 10996 47ee FFF7FEFF 		bl	MoverStart
3132:.\console.c   **** 				MoverStart(&mover_tilt, PATH_TGOTOHOME);	/* Initialize & Start the Mover over Tilt path to Home
 10997              		.loc 1 3132 0
 10998 47f2 40F20000 		movw	r0, #:lower16:mover_tilt
 10999 47f6 C0F20000 		movt	r0, #:upper16:mover_tilt
 11000 47fa 4FF00301 		mov	r1, #3
 11001 47fe FFF7FEFF 		bl	MoverStart
3133:.\console.c   **** 				
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11002              		.loc 1 3134 0
 11003 4802 2DE0     		b	.L390
 11004              	.L392:
3135:.\console.c   **** 				{
3136:.\console.c   **** 					//print . every 1 sec
3137:.\console.c   **** 					if ((mover_pan.ticks % MOVER_FREQ) == 0)
 11005              		.loc 1 3137 0
 11006 4804 40F20003 		movw	r3, #:lower16:mover_pan
 11007 4808 C0F20003 		movt	r3, #:upper16:mover_pan
 11008 480c 5A68     		ldr	r2, [r3, #4]
 11009 480e 41F6F113 		movw	r3, #6641
 11010 4812 C0F27653 		movt	r3, 1398
 11011 4816 A3FB0213 		umull	r1, r3, r3, r2
 11012 481a 4FEA5313 		lsr	r3, r3, #5
 11013 481e 40F2DC51 		movw	r1, #1500
 11014 4822 01FB03F3 		mul	r3, r1, r3
 11015 4826 D31A     		subs	r3, r2, r3
 11016 4828 002B     		cmp	r3, #0
 11017 482a 03D1     		bne	.L391
3138:.\console.c   **** 					printf(".");
 11018              		.loc 1 3138 0
 11019 482c 4FF02E00 		mov	r0, #46
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 299


 11020 4830 FFF7FEFF 		bl	putchar
 11021              	.L391:
3139:.\console.c   **** 					
3140:.\console.c   **** 					if ((mover_pan.status == MOVER_ENDED) && (mover_tilt.status == MOVER_ENDED))
 11022              		.loc 1 3140 0
 11023 4834 40F20003 		movw	r3, #:lower16:mover_pan
 11024 4838 C0F20003 		movt	r3, #:upper16:mover_pan
 11025 483c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11026 483e 022B     		cmp	r3, #2
 11027 4840 0ED1     		bne	.L390
 11028              		.loc 1 3140 0 is_stmt 0 discriminator 1
 11029 4842 40F20003 		movw	r3, #:lower16:mover_tilt
 11030 4846 C0F20003 		movt	r3, #:upper16:mover_tilt
 11031 484a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11032 484c 022B     		cmp	r3, #2
 11033 484e 07D1     		bne	.L390
3141:.\console.c   **** 					{
3142:.\console.c   **** 						printf("\r\nGoto Home Mover END!\r\n");						
 11034              		.loc 1 3142 0 is_stmt 1
 11035 4850 40F20000 		movw	r0, #:lower16:.LC565
 11036 4854 C0F20000 		movt	r0, #:upper16:.LC565
 11037 4858 FFF7FEFF 		bl	puts
3143:.\console.c   **** 						goto exitpars;
 11038              		.loc 1 3143 0
 11039 485c 02F028BB 		b	.L131
 11040              	.L390:
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11041              		.loc 1 3134 0 discriminator 1
 11042 4860 FFF7FEFF 		bl	AnyButtonPressed
 11043 4864 0346     		mov	r3, r0
 11044 4866 002B     		cmp	r3, #0
 11045 4868 CCD0     		beq	.L392
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11046              		.loc 1 3134 0 is_stmt 0
 11047 486a 07E0     		b	.L684
 11048              	.L389:
3144:.\console.c   **** 					}
3145:.\console.c   **** 				}
3146:.\console.c   **** 			}
3147:.\console.c   **** 			else
3148:.\console.c   **** 			{
3149:.\console.c   **** 				printf("Goto Home Mover Not Started: energize the Gobee before!\r\n");	
 11049              		.loc 1 3149 0 is_stmt 1
 11050 486c 40F20000 		movw	r0, #:lower16:.LC566
 11051 4870 C0F20000 		movt	r0, #:upper16:.LC566
 11052 4874 FFF7FEFF 		bl	puts
3150:.\console.c   **** 			}
3151:.\console.c   **** 			goto exitpars;	
 11053              		.loc 1 3151 0
 11054 4878 02F01ABB 		b	.L131
 11055              	.L684:
 11056 487c 02F018BB 		b	.L131
 11057              	.L740:
 11058              		.align	2
 11059              	.L739:
 11060 4880 0F000000 		.word	actual_cmd+15
 11061              	.L388:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 300


3152:.\console.c   **** 		}
3153:.\console.c   **** 		/* CMD GOTOHOME END */
3154:.\console.c   **** 		
3155:.\console.c   **** 		
3156:.\console.c   **** 		/* CMD GOTOQ */
3157:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotoq") == 0) ||
 11062              		.loc 1 3157 0
 11063 4884 40F20000 		movw	r0, #:lower16:actual_cmd
 11064 4888 C0F20000 		movt	r0, #:upper16:actual_cmd
 11065 488c 40F20001 		movw	r1, #:lower16:.LC567
 11066 4890 C0F20001 		movt	r1, #:upper16:.LC567
 11067 4894 FFF7FEFF 		bl	strcmp
 11068 4898 0346     		mov	r3, r0
 11069 489a 002B     		cmp	r3, #0
 11070 489c 0DD0     		beq	.L394
3158:.\console.c   **** 		    (strcmp(actual_cmd.action, "g") == 0))
 11071              		.loc 1 3158 0 discriminator 1
 11072 489e 40F20000 		movw	r0, #:lower16:actual_cmd
 11073 48a2 C0F20000 		movt	r0, #:upper16:actual_cmd
 11074 48a6 40F20001 		movw	r1, #:lower16:.LC568
 11075 48aa C0F20001 		movt	r1, #:upper16:.LC568
 11076 48ae FFF7FEFF 		bl	strcmp
 11077 48b2 0346     		mov	r3, r0
3157:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotoq") == 0) ||
 11078              		.loc 1 3157 0 discriminator 1
 11079 48b4 002B     		cmp	r3, #0
 11080 48b6 40F0DC80 		bne	.L395
 11081              	.L394:
3159:.\console.c   **** 		
3160:.\console.c   **** 		{	
3161:.\console.c   **** 			if (((q_number = atoi(actual_cmd.parameter)) >= Q_NUMBER_MIN)
 11082              		.loc 1 3161 0
 11083 48ba BA48     		ldr	r0, .L741
 11084 48bc FFF7FEFF 		bl	atoi
 11085 48c0 0346     		mov	r3, r0
 11086 48c2 87F8E530 		strb	r3, [r7, #229]
 11087 48c6 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11088 48ca 002B     		cmp	r3, #0
 11089 48cc 00F0C780 		beq	.L396
3162:.\console.c   **** 			&& (q_number = atoi(actual_cmd.parameter)) <= Q_NUMBER_MAX)
 11090              		.loc 1 3162 0
 11091 48d0 B448     		ldr	r0, .L741
 11092 48d2 FFF7FEFF 		bl	atoi
 11093 48d6 0346     		mov	r3, r0
 11094 48d8 87F8E530 		strb	r3, [r7, #229]
 11095 48dc 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11096 48e0 632B     		cmp	r3, #99
 11097 48e2 00F2BC80 		bhi	.L396
3163:.\console.c   **** 			{	
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11098              		.loc 1 3164 0
 11099 48e6 B048     		ldr	r0, .L741+4
 11100 48e8 FFF7FEFF 		bl	atof
 11101 48ec 0246     		mov	r2, r0
 11102 48ee 0B46     		mov	r3, r1
 11103 48f0 1046     		mov	r0, r2
 11104 48f2 1946     		mov	r1, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 301


 11105 48f4 FFF7FEFF 		bl	__aeabi_d2f
 11106 48f8 0346     		mov	r3, r0
 11107 48fa C7F81431 		str	r3, [r7, #276]	@ float
 11108 48fe D7F81401 		ldr	r0, [r7, #276]	@ float
 11109 4902 4FF00001 		mov	r1, #0
 11110 4906 FFF7FEFF 		bl	__aeabi_fcmpge
 11111 490a 0346     		mov	r3, r0
 11112 490c 002B     		cmp	r3, #0
 11113 490e 00F0AE80 		beq	.L407
 11114              	.L644:
3165:.\console.c   **** 				&& (time_loc = atof(actual_cmd.number1)) <= 30)		//[sec]
 11115              		.loc 1 3165 0
 11116 4912 A548     		ldr	r0, .L741+4
 11117 4914 FFF7FEFF 		bl	atof
 11118 4918 0246     		mov	r2, r0
 11119 491a 0B46     		mov	r3, r1
 11120 491c 1046     		mov	r0, r2
 11121 491e 1946     		mov	r1, r3
 11122 4920 FFF7FEFF 		bl	__aeabi_d2f
 11123 4924 0346     		mov	r3, r0
 11124 4926 C7F81431 		str	r3, [r7, #276]	@ float
 11125 492a D7F81401 		ldr	r0, [r7, #276]	@ float
 11126 492e 4FF00001 		mov	r1, #0
 11127 4932 C4F2F011 		movt	r1, 16880
 11128 4936 FFF7FEFF 		bl	__aeabi_fcmple
 11129 493a 0346     		mov	r3, r0
 11130 493c 002B     		cmp	r3, #0
 11131 493e 00F08D80 		beq	.L397
 11132              	.L645:
3166:.\console.c   **** 				{
3167:.\console.c   **** 					if (machine_state == GOBEE_ENERGIZED)
 11133              		.loc 1 3167 0
 11134 4942 40F20003 		movw	r3, #:lower16:machine_state
 11135 4946 C0F20003 		movt	r3, #:upper16:machine_state
 11136 494a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11137 494c 052B     		cmp	r3, #5
 11138 494e 7ED1     		bne	.L400
3168:.\console.c   **** 					{
3169:.\console.c   **** 						if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)		//is Q allocated on any memory?
 11139              		.loc 1 3169 0
 11140 4950 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 11141 4954 40F20003 		movw	r3, #:lower16:q_table
 11142 4958 C0F20003 		movt	r3, #:upper16:q_table
 11143 495c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 11144 495e FF2B     		cmp	r3, #255
 11145 4960 6BD0     		beq	.L401
3170:.\console.c   **** 						{
3171:.\console.c   **** 							if (time_loc == 0)
 11146              		.loc 1 3171 0
 11147 4962 D7F81401 		ldr	r0, [r7, #276]	@ float
 11148 4966 4FF00001 		mov	r1, #0
 11149 496a FFF7FEFF 		bl	__aeabi_fcmpeq
 11150 496e 0346     		mov	r3, r0
 11151 4970 002B     		cmp	r3, #0
 11152 4972 03D0     		beq	.L402
 11153              	.L646:
3172:.\console.c   **** 							{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 302


3173:.\console.c   **** 								time_loc = 2;	//default 2 sec	
 11154              		.loc 1 3173 0
 11155 4974 4FF08043 		mov	r3, #1073741824
 11156 4978 C7F81431 		str	r3, [r7, #276]	@ float
 11157              	.L402:
3174:.\console.c   **** 							}
3175:.\console.c   **** 							
3176:.\console.c   **** 							printf("Goto Q Mover START!\r\n");	
 11158              		.loc 1 3176 0
 11159 497c 40F20000 		movw	r0, #:lower16:.LC569
 11160 4980 C0F20000 		movt	r0, #:upper16:.LC569
 11161 4984 FFF7FEFF 		bl	puts
3177:.\console.c   **** 							InitPanGotoQPath(q_number, time_loc);	/* initialize the Pan Goto Q Path					*/
 11162              		.loc 1 3177 0
 11163 4988 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11164 498c 5BB2     		sxtb	r3, r3
 11165 498e 1846     		mov	r0, r3
 11166 4990 D7F81411 		ldr	r1, [r7, #276]	@ float
 11167 4994 FFF7FEFF 		bl	InitPanGotoQPath
3178:.\console.c   **** 							InitTiltGotoQPath(q_number, time_loc);	/* initialize the Tilt Goto Q Path					*/			
 11168              		.loc 1 3178 0
 11169 4998 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11170 499c 5BB2     		sxtb	r3, r3
 11171 499e 1846     		mov	r0, r3
 11172 49a0 D7F81411 		ldr	r1, [r7, #276]	@ float
 11173 49a4 FFF7FEFF 		bl	InitTiltGotoQPath
3179:.\console.c   **** 							CalculatePanGotoQPath();				/* Calculate the  Pan Goto Q Path 					*/
 11174              		.loc 1 3179 0
 11175 49a8 FFF7FEFF 		bl	CalculatePanGotoQPath
3180:.\console.c   **** 							CalculateTiltGotoQPath();				/* Calculate the  Tilt Goto Q Path 					*/			
 11176              		.loc 1 3180 0
 11177 49ac FFF7FEFF 		bl	CalculateTiltGotoQPath
3181:.\console.c   **** 							MoverStart(&mover_pan, PATH_PGOTOQ);	/* Initialize & Start the Mover over Pan path to Q	*/
 11178              		.loc 1 3181 0
 11179 49b0 40F20000 		movw	r0, #:lower16:mover_pan
 11180 49b4 C0F20000 		movt	r0, #:upper16:mover_pan
 11181 49b8 4FF00401 		mov	r1, #4
 11182 49bc FFF7FEFF 		bl	MoverStart
3182:.\console.c   **** 							MoverStart(&mover_tilt, PATH_TGOTOQ);	/* Initialize & Start the Mover over Tilt path to Q	*/
 11183              		.loc 1 3182 0
 11184 49c0 40F20000 		movw	r0, #:lower16:mover_tilt
 11185 49c4 C0F20000 		movt	r0, #:upper16:mover_tilt
 11186 49c8 4FF00501 		mov	r1, #5
 11187 49cc FFF7FEFF 		bl	MoverStart
3183:.\console.c   **** 							
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11188              		.loc 1 3184 0
 11189 49d0 2DE0     		b	.L404
 11190              	.L406:
3185:.\console.c   **** 							{
3186:.\console.c   **** 								//print . every 1 sec
3187:.\console.c   **** 								if ((mover_pan.ticks % MOVER_FREQ) == 0)
 11191              		.loc 1 3187 0
 11192 49d2 40F20003 		movw	r3, #:lower16:mover_pan
 11193 49d6 C0F20003 		movt	r3, #:upper16:mover_pan
 11194 49da 5A68     		ldr	r2, [r3, #4]
 11195 49dc 41F6F113 		movw	r3, #6641
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 303


 11196 49e0 C0F27653 		movt	r3, 1398
 11197 49e4 A3FB0203 		umull	r0, r3, r3, r2
 11198 49e8 4FEA5313 		lsr	r3, r3, #5
 11199 49ec 40F2DC51 		movw	r1, #1500
 11200 49f0 01FB03F3 		mul	r3, r1, r3
 11201 49f4 D31A     		subs	r3, r2, r3
 11202 49f6 002B     		cmp	r3, #0
 11203 49f8 03D1     		bne	.L405
3188:.\console.c   **** 								printf(".");
 11204              		.loc 1 3188 0
 11205 49fa 4FF02E00 		mov	r0, #46
 11206 49fe FFF7FEFF 		bl	putchar
 11207              	.L405:
3189:.\console.c   **** 								
3190:.\console.c   **** 								if ((mover_pan.status == MOVER_ENDED) && (mover_tilt.status == MOVER_ENDED))
 11208              		.loc 1 3190 0
 11209 4a02 40F20003 		movw	r3, #:lower16:mover_pan
 11210 4a06 C0F20003 		movt	r3, #:upper16:mover_pan
 11211 4a0a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11212 4a0c 022B     		cmp	r3, #2
 11213 4a0e 0ED1     		bne	.L404
 11214              		.loc 1 3190 0 is_stmt 0 discriminator 1
 11215 4a10 40F20003 		movw	r3, #:lower16:mover_tilt
 11216 4a14 C0F20003 		movt	r3, #:upper16:mover_tilt
 11217 4a18 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11218 4a1a 022B     		cmp	r3, #2
 11219 4a1c 07D1     		bne	.L404
3191:.\console.c   **** 								{
3192:.\console.c   **** 									printf("\r\nGoto Q Mover END!\r\n");						
 11220              		.loc 1 3192 0 is_stmt 1
 11221 4a1e 40F20000 		movw	r0, #:lower16:.LC570
 11222 4a22 C0F20000 		movt	r0, #:upper16:.LC570
 11223 4a26 FFF7FEFF 		bl	puts
3193:.\console.c   **** 									goto exitpars;
 11224              		.loc 1 3193 0
 11225 4a2a 02F041BA 		b	.L131
 11226              	.L404:
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11227              		.loc 1 3184 0 discriminator 1
 11228 4a2e FFF7FEFF 		bl	AnyButtonPressed
 11229 4a32 0346     		mov	r3, r0
 11230 4a34 002B     		cmp	r3, #0
 11231 4a36 CCD0     		beq	.L406
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11232              		.loc 1 3184 0 is_stmt 0
 11233 4a38 10E0     		b	.L397
 11234              	.L401:
3194:.\console.c   **** 								}
3195:.\console.c   **** 							}
3196:.\console.c   **** 						}
3197:.\console.c   **** 						else
3198:.\console.c   **** 						{
3199:.\console.c   **** 							printf("Goto Q Mover Not Started: QMemory %02d NOT ALLOCATED!\r\n",(uint16)q_number);
 11235              		.loc 1 3199 0 is_stmt 1
 11236 4a3a 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11237 4a3e 40F20000 		movw	r0, #:lower16:.LC571
 11238 4a42 C0F20000 		movt	r0, #:upper16:.LC571
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 304


 11239 4a46 1946     		mov	r1, r3
 11240 4a48 FFF7FEFF 		bl	printf
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11241              		.loc 1 3164 0
 11242 4a4c 0FE0     		b	.L407
 11243              	.L400:
3200:.\console.c   **** 						}						
3201:.\console.c   **** 					}
3202:.\console.c   **** 					else
3203:.\console.c   **** 					{
3204:.\console.c   **** 						printf("Goto Q Mover Not Started: energize the Gobee before!\r\n");	
 11244              		.loc 1 3204 0
 11245 4a4e 40F20000 		movw	r0, #:lower16:.LC572
 11246 4a52 C0F20000 		movt	r0, #:upper16:.LC572
 11247 4a56 FFF7FEFF 		bl	puts
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11248              		.loc 1 3164 0
 11249 4a5a 08E0     		b	.L407
 11250              	.L397:
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11251              		.loc 1 3164 0 is_stmt 0 discriminator 1
 11252 4a5c 07E0     		b	.L407
 11253              	.L396:
3205:.\console.c   **** 					}
3206:.\console.c   **** 				}
3207:.\console.c   **** 			}
3208:.\console.c   **** 			else
3209:.\console.c   **** 			{
3210:.\console.c   **** 				printf("Goto Q Mover Not Started: Q maximum is 99!\r\n");	
 11254              		.loc 1 3210 0 is_stmt 1
 11255 4a5e 40F20000 		movw	r0, #:lower16:.LC573
 11256 4a62 C0F20000 		movt	r0, #:upper16:.LC573
 11257 4a66 FFF7FEFF 		bl	puts
3211:.\console.c   **** 			}
3212:.\console.c   **** 			goto exitpars;	
 11258              		.loc 1 3212 0
 11259 4a6a 02F021BA 		b	.L131
 11260              	.L407:
 11261 4a6e 02F01FBA 		b	.L131
 11262              	.L395:
3213:.\console.c   **** 		}
3214:.\console.c   **** 		/* CMD GOTOQ END */
3215:.\console.c   **** 
3216:.\console.c   **** 		
3217:.\console.c   **** //		/* CMD CIAK */
3218:.\console.c   **** //		if (strcmp(actual_cmd.action, "ciak") == 0)
3219:.\console.c   **** //		{	
3220:.\console.c   **** //			if (machine_state == GOBEE_ENERGIZED)
3221:.\console.c   **** //			{
3222:.\console.c   **** //				int8 ciak_num = 2;	/* ciak path iterations */
3223:.\console.c   **** //				
3224:.\console.c   **** //				printf("CIAK Mover START!\r\n");	
3225:.\console.c   **** //				MoverStart(5);				/* Initialize & Start the Mover over path 5	*/
3226:.\console.c   **** //				
3227:.\console.c   **** //				while (AnyButtonPressed() == NO_PRESSED)
3228:.\console.c   **** //				{
3229:.\console.c   **** //					//print . every 1 sec
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 305


3230:.\console.c   **** //					if (mover.ticks % MOVER_FREQ)
3231:.\console.c   **** //					printf(".");
3232:.\console.c   **** //					
3233:.\console.c   **** //					if (mover.status == MOVER_ENDED)
3234:.\console.c   **** //					{
3235:.\console.c   **** //						ciak_num--;
3236:.\console.c   **** //						if (ciak_num>0)
3237:.\console.c   **** //						{
3238:.\console.c   **** //							MoverStart(5);				/* Redo CIAK */
3239:.\console.c   **** //						}
3240:.\console.c   **** //						else
3241:.\console.c   **** //						{
3242:.\console.c   **** //						printf("\r\nCIAK Mover END!\r\n");						
3243:.\console.c   **** //						goto exitpars;
3244:.\console.c   **** //						}
3245:.\console.c   **** //					}
3246:.\console.c   **** //				}
3247:.\console.c   **** //			}
3248:.\console.c   **** //			else
3249:.\console.c   **** //			{
3250:.\console.c   **** //				printf("CIAK Mover Not Started: energize the Gobee before!\r\n");	
3251:.\console.c   **** //			}
3252:.\console.c   **** //			goto exitpars;	
3253:.\console.c   **** //		}					
3254:.\console.c   **** 		
3255:.\console.c   **** 		
3256:.\console.c   **** 		/* CMD SET*/
3257:.\console.c   **** 		if (strcmp(actual_cmd.action, "set") == 0)
 11263              		.loc 1 3257 0
 11264 4a72 40F20000 		movw	r0, #:lower16:actual_cmd
 11265 4a76 C0F20000 		movt	r0, #:upper16:actual_cmd
 11266 4a7a 40F20001 		movw	r1, #:lower16:.LC167
 11267 4a7e C0F20001 		movt	r1, #:upper16:.LC167
 11268 4a82 FFF7FEFF 		bl	strcmp
 11269 4a86 0346     		mov	r3, r0
 11270 4a88 002B     		cmp	r3, #0
 11271 4a8a 42F0FD81 		bne	.L408
3258:.\console.c   **** 		{
3259:.\console.c   **** 			if (strlen(actual_cmd.parameter) == 0)
 11272              		.loc 1 3259 0
 11273 4a8e 454B     		ldr	r3, .L741
 11274 4a90 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11275 4a92 002B     		cmp	r3, #0
 11276 4a94 07D1     		bne	.L409
3260:.\console.c   **** 			{
3261:.\console.c   **** 				printf(STR_ERROR2);		/* ERROR2: more parameters needed! */
 11277              		.loc 1 3261 0
 11278 4a96 40F20000 		movw	r0, #:lower16:.LC574
 11279 4a9a C0F20000 		movt	r0, #:upper16:.LC574
 11280 4a9e FFF7FEFF 		bl	printf
3262:.\console.c   **** 			}
3263:.\console.c   **** 			else
3264:.\console.c   **** 			{
3265:.\console.c   **** 				// SET DIRECTOR
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
3267:.\console.c   **** 					(strcmp(actual_cmd.parameter, "dir") == 0))
3268:.\console.c   **** 				{	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 306


3269:.\console.c   **** 					if (((director = atoi(actual_cmd.number1)) >= STANLEY)
3270:.\console.c   **** 					&& (director = atoi(actual_cmd.number1)) <= JJ)
3271:.\console.c   **** 					{
3272:.\console.c   **** 						gobee_param.director = director;
3273:.\console.c   **** 						
3274:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3275:.\console.c   **** 						dummy = WriteAllEEparams();
3276:.\console.c   **** 						printf(STR_REM_SEDR, (uint16)director);   /* REM: director setted to...*/
3277:.\console.c   **** 						ShowParamsDirector();
3278:.\console.c   **** 					}
3279:.\console.c   **** 					else
3280:.\console.c   **** 					{
3281:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3282:.\console.c   **** 					}
3283:.\console.c   **** 					goto exitpars;
3284:.\console.c   **** 				}	
3285:.\console.c   **** 				// END SET DIRECTOR
3286:.\console.c   **** 				
3287:.\console.c   **** 				
3288:.\console.c   **** 				// SET MACHINE MODE
3289:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "mode") == 0)
3290:.\console.c   **** 				{	
3291:.\console.c   **** 					if (((mode_loc = atoi(actual_cmd.number1)) >= REMOTECONTROL_MODE)
3292:.\console.c   **** 					&& (mode_loc = atoi(actual_cmd.number1)) <= DIRECTOR_MODE)
3293:.\console.c   **** 					{
3294:.\console.c   **** 						gobee_param.mode = mode_loc;
3295:.\console.c   **** 						
3296:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3297:.\console.c   **** 						dummy = WriteAllEEparams();
3298:.\console.c   **** 						printf(STR_REM_SMOD, (uint16)mode_loc);   /* REM: machine mode setted to...*/					
3299:.\console.c   **** 					}
3300:.\console.c   **** 					else
3301:.\console.c   **** 					{
3302:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3303:.\console.c   **** 					}
3304:.\console.c   **** 					goto exitpars;
3305:.\console.c   **** 				}	
3306:.\console.c   **** 				// END SET MACHINE MODE
3307:.\console.c   **** 				
3308:.\console.c   **** 				
3309:.\console.c   **** 				// SET PAN MOTOR POLARITY
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
3311:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polp") == 0))
3312:.\console.c   **** 				{	
3313:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
3314:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
3315:.\console.c   **** 					{
3316:.\console.c   **** 						pan_axis.param.polarity = polarity;
3317:.\console.c   **** 						
3318:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3319:.\console.c   **** 						dummy = WriteAllEEparams();
3320:.\console.c   **** 						printf(STR_REM_SETP, (uint16)polarity);   /* REM: pan axis polarity setted to...*/					
3321:.\console.c   **** 					}
3322:.\console.c   **** 					else
3323:.\console.c   **** 					{
3324:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3325:.\console.c   **** 					}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 307


3326:.\console.c   **** 					goto exitpars;
3327:.\console.c   **** 				}	
3328:.\console.c   **** 				// END PAN MOTOR POLARITY
3329:.\console.c   **** 
3330:.\console.c   **** 				
3331:.\console.c   **** 				// SET TILT MOTOR POLARITY
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
3333:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polt") == 0))
3334:.\console.c   **** 				{	
3335:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
3336:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
3337:.\console.c   **** 					{
3338:.\console.c   **** 						tilt_axis.param.polarity = polarity;
3339:.\console.c   **** 						
3340:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3341:.\console.c   **** 						dummy = WriteAllEEparams();
3342:.\console.c   **** 						printf(STR_REM_SETPT, (uint16)polarity);   /* REM: tilt axis polarity setted to...*/					
3343:.\console.c   **** 					}
3344:.\console.c   **** 					else
3345:.\console.c   **** 					{
3346:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3347:.\console.c   **** 					}
3348:.\console.c   **** 					goto exitpars;
3349:.\console.c   **** 				}	
3350:.\console.c   **** 				// END TILT MOTOR POLARITY
3351:.\console.c   **** 				
3352:.\console.c   **** 
3353:.\console.c   **** 				// SET PAN MOTOR LIMIT CONTROL
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
3355:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lcp") == 0))
3356:.\console.c   **** 				{	
3357:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
3358:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
3359:.\console.c   **** 					{
3360:.\console.c   **** 						pan_axis.param.limit_control = limit_control;
3361:.\console.c   **** 						
3362:.\console.c   **** 						/* Writes parameter on EEPROM */
3363:.\console.c   **** 						dummy = WriteAllEEparams();
3364:.\console.c   **** 						printf(STR_REM_STLP, (uint16)limit_control);   /* REM: pan axis limit control setted to...*/	
3365:.\console.c   **** 					}
3366:.\console.c   **** 					else
3367:.\console.c   **** 					{
3368:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3369:.\console.c   **** 					}
3370:.\console.c   **** 					goto exitpars;
3371:.\console.c   **** 				}	
3372:.\console.c   **** 				// END PAN MOTOR LIMIT CONTROL		
3373:.\console.c   **** 				
3374:.\console.c   **** 				
3375:.\console.c   **** 				// SET ABSOLUTE SENSOR PAN INVERTION
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
3377:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invp") == 0))
3378:.\console.c   **** 				{	
3379:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
3380:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
3381:.\console.c   **** 					{
3382:.\console.c   **** 						pan_absolute_sensor.param.raw_invertion = raw_invertion;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 308


3383:.\console.c   **** 						
3384:.\console.c   **** 						/* Writes parameter on EEPROM */
3385:.\console.c   **** 						dummy = WriteAllEEparams();
3386:.\console.c   **** 						printf(STR_REM_SIVP, (uint16)raw_invertion);   /* REM: pan axis absoluter sensor invertion se
3387:.\console.c   **** 					}
3388:.\console.c   **** 					else
3389:.\console.c   **** 					{
3390:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3391:.\console.c   **** 					}
3392:.\console.c   **** 					goto exitpars;
3393:.\console.c   **** 				}	
3394:.\console.c   **** 				// END ABSOLUTE SENSOR PAN INVERTION				
3395:.\console.c   **** 				
3396:.\console.c   **** 				
3397:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN ZERO (HOME)
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
3399:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zp") == 0))
3400:.\console.c   **** 				{	
3401:.\console.c   **** 					printf("* Warning! Put PAN Axis to zero (HOME) position and press y!");
3402:.\console.c   **** 					
3403:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3404:.\console.c   **** 					{						
3405:.\console.c   **** 						pan_absolute_sensor.param.raw_home = 0; 		/* reset absolute pan sensor zero raw 			*/
3406:.\console.c   **** 
3407:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3408:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3409:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3410:.\console.c   **** 						
3411:.\console.c   **** 						//Delay
3412:.\console.c   **** 						CyDelay(1000);
3413:.\console.c   **** 						
3414:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3415:.\console.c   **** 						printf("* Statistics stop!\r\n");						
3416:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3417:.\console.c   **** 								
3418:.\console.c   **** 	
3419:.\console.c   **** 						/* Update Global Parameter			*/
3420:.\console.c   **** 						pan_absolute_sensor.param.raw_home = (int16)pan_absolute_sensor_stat.mean;
3421:.\console.c   **** 						printf(STR_REM_PASZ, (int16)pan_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Zer
3422:.\console.c   **** 					}
3423:.\console.c   **** 					else
3424:.\console.c   **** 					{
3425:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3426:.\console.c   **** 					}
3427:.\console.c   **** 						
3428:.\console.c   **** 					/* Update EEPROM */
3429:.\console.c   **** 					dummy = WriteAllEEparams();
3430:.\console.c   **** 
3431:.\console.c   **** 					goto exitpars;
3432:.\console.c   **** 				}	
3433:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN ZERO (HOME)
3434:.\console.c   **** 			
3435:.\console.c   **** 				
3436:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN LIMIT MIN
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
3438:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lminp") == 0))
3439:.\console.c   **** 				{	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 309


3440:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MIN position and press y!");
3441:.\console.c   **** 					
3442:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3443:.\console.c   **** 					{						
3444:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute pan sensor limit min raw 	*/
3445:.\console.c   **** 
3446:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3447:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3448:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3449:.\console.c   **** 						
3450:.\console.c   **** 						//Delay
3451:.\console.c   **** 						CyDelay(1000);
3452:.\console.c   **** 						
3453:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3454:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3455:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3456:.\console.c   **** 	
3457:.\console.c   **** 						/* Update Global Parameter			*/
3458:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = (int16)pan_absolute_sensor_stat.mean;														
3459:.\console.c   **** 						printf(STR_REM_PMIN, (int16)pan_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Senso
3460:.\console.c   **** 					}
3461:.\console.c   **** 					else
3462:.\console.c   **** 					{
3463:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3464:.\console.c   **** 					}
3465:.\console.c   **** 						
3466:.\console.c   **** 					/* Update EEPROM */
3467:.\console.c   **** 					dummy = WriteAllEEparams();
3468:.\console.c   **** 
3469:.\console.c   **** 					goto exitpars;
3470:.\console.c   **** 				}	
3471:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN LIMIT MIN
3472:.\console.c   **** 				
3473:.\console.c   **** 				
3474:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN LIMIT MAX
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
3476:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxp") == 0))
3477:.\console.c   **** 				{	
3478:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MAX position and press y!");
3479:.\console.c   **** 					
3480:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3481:.\console.c   **** 					{						
3482:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute pan sensor limit max raw 	*/
3483:.\console.c   **** 
3484:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3485:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3486:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3487:.\console.c   **** 						
3488:.\console.c   **** 						//Delay
3489:.\console.c   **** 						CyDelay(1000);
3490:.\console.c   **** 						
3491:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3492:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3493:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3494:.\console.c   **** 	
3495:.\console.c   **** 						/* Update Global Parameter			*/
3496:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = (int16)pan_absolute_sensor_stat.mean;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 310


3497:.\console.c   **** 						printf(STR_REM_PMAX, (int16)pan_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Senso
3498:.\console.c   **** 					}
3499:.\console.c   **** 					else
3500:.\console.c   **** 					{
3501:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3502:.\console.c   **** 					}
3503:.\console.c   **** 						
3504:.\console.c   **** 					/* Update EEPROM */
3505:.\console.c   **** 					dummy = WriteAllEEparams();
3506:.\console.c   **** 
3507:.\console.c   **** 					goto exitpars;
3508:.\console.c   **** 				}	
3509:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN LIMIT MAX)
3510:.\console.c   **** 				
3511:.\console.c   **** 				
3512:.\console.c   **** 				// SET ABSOLUTE SENSOR PAN LIMIT HYSTERESIS
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
3514:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystp") == 0))
3515:.\console.c   **** 				{	
3516:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
3517:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
3518:.\console.c   **** 					{
3519:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
3520:.\console.c   **** 						
3521:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3522:.\console.c   **** 						dummy = WriteAllEEparams();
3523:.\console.c   **** 						printf(STR_REM_PLHY, (uint16)raw_limit_hyst);   /* REM: pan axis absolute sensor limit hyster
3524:.\console.c   **** 					}
3525:.\console.c   **** 					else
3526:.\console.c   **** 					{
3527:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3528:.\console.c   **** 					}
3529:.\console.c   **** 					goto exitpars;
3530:.\console.c   **** 				}	
3531:.\console.c   **** 				// END ABSOLUTE SENSOR PAN LIMIT HYSTERESIS		
3532:.\console.c   **** 				
3533:.\console.c   **** 				
3534:.\console.c   **** 				// SET PAN ENCODER OVER ABSOLUTE SENSOR RATIO
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
3536:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiop") == 0))
3537:.\console.c   **** 				{	
3538:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
3539:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
3540:.\console.c   **** 					{
3541:.\console.c   **** 						pan_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
3542:.\console.c   **** 						
3543:.\console.c   **** 						/* Writes Parameter on EEPROM */
3544:.\console.c   **** 						dummy = WriteAllEEparams();
3545:.\console.c   **** 						printf(STR_REM_PEAR, (float)step_abs_ratio);   /* REM: pan encoder over absolute sensor ratio
3546:.\console.c   **** 					}
3547:.\console.c   **** 					else
3548:.\console.c   **** 					{
3549:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3550:.\console.c   **** 					}
3551:.\console.c   **** 					goto exitpars;
3552:.\console.c   **** 				}	
3553:.\console.c   **** 				// END PAN ENCODER OVER ABSOLUTE SENSOR RATIO	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 311


3554:.\console.c   **** 				
3555:.\console.c   **** 				
3556:.\console.c   **** 				// SET TILT MOTOR LIMIT CONTROL
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
3558:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lct") == 0))
3559:.\console.c   **** 				{	
3560:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
3561:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
3562:.\console.c   **** 					{
3563:.\console.c   **** 						tilt_axis.param.limit_control = limit_control;
3564:.\console.c   **** 						
3565:.\console.c   **** 						/* Writes parameter on EEPROM */
3566:.\console.c   **** 						dummy = WriteAllEEparams();
3567:.\console.c   **** 						printf(STR_REM_STLT, (uint16)limit_control);   /* REM: tilt axis limit control setted to...*/
3568:.\console.c   **** 					}
3569:.\console.c   **** 					else
3570:.\console.c   **** 					{
3571:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3572:.\console.c   **** 					}
3573:.\console.c   **** 					goto exitpars;
3574:.\console.c   **** 				}	
3575:.\console.c   **** 				// END TILT MOTOR LIMIT CONTROL	
3576:.\console.c   **** 				
3577:.\console.c   **** 				
3578:.\console.c   **** 				// SET ABSOLUTE SENSOR TILT INVERTION
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
3580:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invt") == 0))
3581:.\console.c   **** 				{	
3582:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
3583:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
3584:.\console.c   **** 					{
3585:.\console.c   **** 						tilt_absolute_sensor.param.raw_invertion = raw_invertion;
3586:.\console.c   **** 						
3587:.\console.c   **** 						/* Writes parameter on EEPROM */
3588:.\console.c   **** 						dummy = WriteAllEEparams();
3589:.\console.c   **** 						printf(STR_REM_SIVT, (uint16)raw_invertion);   /* REM: tilt axis absoluter sensor invertion s
3590:.\console.c   **** 					}
3591:.\console.c   **** 					else
3592:.\console.c   **** 					{
3593:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3594:.\console.c   **** 					}
3595:.\console.c   **** 					goto exitpars;
3596:.\console.c   **** 				}	
3597:.\console.c   **** 				// END ABSOLUTE SENSOR TILT INVERTION				
3598:.\console.c   **** 				
3599:.\console.c   **** 				
3600:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT ZERO (HOME)
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
3602:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zt") == 0))
3603:.\console.c   **** 				{	
3604:.\console.c   **** 					printf("* Warning! Put TILT Axis to zero (HOME) position and press y!");
3605:.\console.c   **** 					
3606:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3607:.\console.c   **** 					{						
3608:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = 0; 		/* reset absolute tilt sensor zero raw 			*/
3609:.\console.c   **** 
3610:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 312


3611:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3612:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3613:.\console.c   **** 						
3614:.\console.c   **** 						//Delay
3615:.\console.c   **** 						CyDelay(1000);
3616:.\console.c   **** 						
3617:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3618:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3619:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3620:.\console.c   **** 	
3621:.\console.c   **** 						/* Update Global Parameter			*/
3622:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = (int16)tilt_absolute_sensor_stat.mean;
3623:.\console.c   **** 						printf(STR_REM_TASZ, (int16)tilt_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Ze
3624:.\console.c   **** 					}
3625:.\console.c   **** 					else
3626:.\console.c   **** 					{
3627:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3628:.\console.c   **** 					}
3629:.\console.c   **** 						
3630:.\console.c   **** 					/* Update EEPROM */
3631:.\console.c   **** 					dummy = WriteAllEEparams();
3632:.\console.c   **** 
3633:.\console.c   **** 					goto exitpars;
3634:.\console.c   **** 				}	
3635:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT ZERO (HOME)				
3636:.\console.c   **** 				
3637:.\console.c   **** 				
3638:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT LIMIT MIN
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
3640:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmint") == 0))
3641:.\console.c   **** 				{	
3642:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MIN position and press y!");
3643:.\console.c   **** 					
3644:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3645:.\console.c   **** 					{						
3646:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute tilt sensor limit min raw 	
3647:.\console.c   **** 
3648:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3649:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3650:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3651:.\console.c   **** 						
3652:.\console.c   **** 						//Delay
3653:.\console.c   **** 						CyDelay(1000);
3654:.\console.c   **** 						
3655:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3656:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3657:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3658:.\console.c   **** 	
3659:.\console.c   **** 						/* Update Global Parameter			*/
3660:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = (int16)tilt_absolute_sensor_stat.mean;												
3661:.\console.c   **** 						printf(STR_REM_TMIN, (int16)tilt_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Sens
3662:.\console.c   **** 					}
3663:.\console.c   **** 					else
3664:.\console.c   **** 					{
3665:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3666:.\console.c   **** 					}
3667:.\console.c   **** 						
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 313


3668:.\console.c   **** 					/* Update EEPROM */
3669:.\console.c   **** 					dummy = WriteAllEEparams();
3670:.\console.c   **** 
3671:.\console.c   **** 					goto exitpars;
3672:.\console.c   **** 				}	
3673:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT LIMIT MIN
3674:.\console.c   **** 				
3675:.\console.c   **** 				
3676:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT LIMIT MAX
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
3678:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxt") == 0))
3679:.\console.c   **** 				{	
3680:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MAX position and press y!");
3681:.\console.c   **** 					
3682:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3683:.\console.c   **** 					{						
3684:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute tilt sensor limit max raw 	
3685:.\console.c   **** 
3686:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3687:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3688:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3689:.\console.c   **** 						
3690:.\console.c   **** 						//Delay
3691:.\console.c   **** 						CyDelay(1000);
3692:.\console.c   **** 						
3693:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3694:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3695:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3696:.\console.c   **** 	
3697:.\console.c   **** 						/* Update Global Parameter			*/
3698:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = (int16)tilt_absolute_sensor_stat.mean;
3699:.\console.c   **** 						printf(STR_REM_TMAX, (int16)tilt_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Sens
3700:.\console.c   **** 					}
3701:.\console.c   **** 					else
3702:.\console.c   **** 					{
3703:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3704:.\console.c   **** 					}
3705:.\console.c   **** 						
3706:.\console.c   **** 					/* Update EEPROM */
3707:.\console.c   **** 					dummy = WriteAllEEparams();
3708:.\console.c   **** 
3709:.\console.c   **** 					goto exitpars;
3710:.\console.c   **** 				}	
3711:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT LIMIT MAX)
3712:.\console.c   **** 
3713:.\console.c   **** 				
3714:.\console.c   **** 				// SET ABSOLUTE SENSOR TILT LIMIT HYSTERESIS
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
3716:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystt") == 0))
3717:.\console.c   **** 				{	
3718:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
3719:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
3720:.\console.c   **** 					{
3721:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
3722:.\console.c   **** 						
3723:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3724:.\console.c   **** 						dummy = WriteAllEEparams();
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 314


3725:.\console.c   **** 						printf(STR_REM_TLHY, (uint16)raw_limit_hyst);   /* REM: tilt axis absolute sensor limit hyste
3726:.\console.c   **** 					}
3727:.\console.c   **** 					else
3728:.\console.c   **** 					{
3729:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3730:.\console.c   **** 					}
3731:.\console.c   **** 					goto exitpars;
3732:.\console.c   **** 				}	
3733:.\console.c   **** 				// END ABSOLUTE SENSOR TILT LIMIT HYSTERESIS		
3734:.\console.c   **** 			
3735:.\console.c   **** 				
3736:.\console.c   **** 				// SET TILT ENCODER OVER ABSOLUTE SENSOR RATIO
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
3738:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiot") == 0))
3739:.\console.c   **** 				{	
3740:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
3741:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
3742:.\console.c   **** 					{
3743:.\console.c   **** 						tilt_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
3744:.\console.c   **** 						
3745:.\console.c   **** 						/* Writes Parameter on EEPROM */
3746:.\console.c   **** 						dummy = WriteAllEEparams();
3747:.\console.c   **** 						printf(STR_REM_TEAR, (float)step_abs_ratio);   /* REM: tilt encoder over absolute sensor rati
3748:.\console.c   **** 					}
3749:.\console.c   **** 					else
3750:.\console.c   **** 					{
3751:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3752:.\console.c   **** 					}
3753:.\console.c   **** 					goto exitpars;
3754:.\console.c   **** 				}	
3755:.\console.c   **** 				// END TILT ENCODER OVER ABSOLUTE SENSOR RATIO					
3756:.\console.c   **** 								
3757:.\console.c   **** 				
3758:.\console.c   **** 				// SET INVERTION YAW (IMU)
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
3760:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imuy") == 0))
3761:.\console.c   **** 				{	
3762:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3763:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3764:.\console.c   **** 					{
3765:.\console.c   **** 						IMU_sensor.param.yaw_invertion = invertion;
3766:.\console.c   **** 						
3767:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3768:.\console.c   **** 						dummy = WriteAllEEparams();
3769:.\console.c   **** 						printf(STR_REM_SINY, (uint16)IMU_sensor.param.yaw_invertion);   /* REM: Invertion Yaw setted 
3770:.\console.c   **** 					}
3771:.\console.c   **** 					else
3772:.\console.c   **** 					{
3773:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3774:.\console.c   **** 					}
3775:.\console.c   **** 					goto exitpars;
3776:.\console.c   **** 				}	
3777:.\console.c   **** 				// END SET INVERTION YAW (IMU)	
3778:.\console.c   **** 				
3779:.\console.c   **** 				
3780:.\console.c   **** 				// SET INVERTION PITCH (IMU)
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 315


3782:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imup") == 0))
3783:.\console.c   **** 				{	
3784:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3785:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3786:.\console.c   **** 					{
3787:.\console.c   **** 						IMU_sensor.param.pitch_invertion = invertion;
3788:.\console.c   **** 						
3789:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3790:.\console.c   **** 						dummy = WriteAllEEparams();
3791:.\console.c   **** 						printf(STR_REM_SINP, (uint16)IMU_sensor.param.pitch_invertion);   /* REM: Invertion Pitch set
3792:.\console.c   **** 					}
3793:.\console.c   **** 					else
3794:.\console.c   **** 					{
3795:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3796:.\console.c   **** 					}
3797:.\console.c   **** 					goto exitpars;
3798:.\console.c   **** 				}	
3799:.\console.c   **** 				// END SET INVERTION PITCH (IMU)	
3800:.\console.c   **** 				
3801:.\console.c   **** 				
3802:.\console.c   **** 				// SET INVERTION ROLL (IMU)
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
3804:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imur") == 0))
3805:.\console.c   **** 				{	
3806:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3807:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3808:.\console.c   **** 					{
3809:.\console.c   **** 						IMU_sensor.param.roll_invertion = invertion;
3810:.\console.c   **** 						
3811:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3812:.\console.c   **** 						dummy = WriteAllEEparams();
3813:.\console.c   **** 						printf(STR_REM_SINR, (uint16)IMU_sensor.param.roll_invertion);   /* REM: Invertion Roll sette
3814:.\console.c   **** 					}
3815:.\console.c   **** 					else
3816:.\console.c   **** 					{
3817:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3818:.\console.c   **** 					}
3819:.\console.c   **** 					goto exitpars;
3820:.\console.c   **** 				}	
3821:.\console.c   **** 				// END SET INVERTION ROLL (IMU)	
3822:.\console.c   **** 				
3823:.\console.c   **** 				
3824:.\console.c   **** 				// SET PITCH ROLL EXCHANGE (IMU)
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
3826:.\console.c   **** 					(strcmp(actual_cmd.parameter, "prex") == 0))
3827:.\console.c   **** 				{	
3828:.\console.c   **** 					if (((exchange = atoi(actual_cmd.number1)) >= 0)
3829:.\console.c   **** 					&& (exchange = atoi(actual_cmd.number1)) <= 1)
3830:.\console.c   **** 					{
3831:.\console.c   **** 						IMU_sensor.param.pitch_roll_exchange = exchange;
3832:.\console.c   **** 						
3833:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3834:.\console.c   **** 						dummy = WriteAllEEparams();
3835:.\console.c   **** 						printf(STR_REM_SPRX, (uint16)IMU_sensor.param.pitch_roll_exchange);   /* REM: Invertion Roll 
3836:.\console.c   **** 					}
3837:.\console.c   **** 					else
3838:.\console.c   **** 					{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 316


3839:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3840:.\console.c   **** 					}
3841:.\console.c   **** 					goto exitpars;
3842:.\console.c   **** 				}	
3843:.\console.c   **** 				// END SET PITCH ROLL EXCHANGE (IMU)					
3844:.\console.c   **** 				
3845:.\console.c   **** 				
3846:.\console.c   **** 				//SET Q ELEMENT (SHOT)
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
3848:.\console.c   **** 					(strcmp(actual_cmd.parameter, "shot") == 0))
3849:.\console.c   **** 				{	
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
3851:.\console.c   **** 					    (strcmp(actual_cmd.number2, "c") == 0))
3852:.\console.c   **** 					   
3853:.\console.c   **** 					{					
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3855:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3856:.\console.c   **** 						{	
3857:.\console.c   **** 							/* Update Global Parameter and RT data	*/
3858:.\console.c   **** 							//if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
3859:.\console.c   **** 							if (q[q_table[q_number]].number != Q_NUMBER_UNUSED)
3860:.\console.c   **** 							{						
3861:.\console.c   **** 								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
3862:.\console.c   **** 								
3863:.\console.c   **** 								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
3864:.\console.c   **** 								
3865:.\console.c   **** 								/* Update EEPROM */
3866:.\console.c   **** 								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3867:.\console.c   **** 								{
3868:.\console.c   **** 									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3869:.\console.c   **** 								}
3870:.\console.c   **** 							}
3871:.\console.c   **** 							else
3872:.\console.c   **** 							{
3873:.\console.c   **** 								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
3874:.\console.c   **** 							}
3875:.\console.c   **** 						}
3876:.\console.c   **** 					}
3877:.\console.c   **** 					else if (((memory_number = atoi(actual_cmd.number2)) >= Q_MEMORY_NUMBER_MIN)
3878:.\console.c   **** 						    && (memory_number = atoi(actual_cmd.number2)) < Q_MEMORY_NUMBER_MAX)
3879:.\console.c   **** 					{					
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3881:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3882:.\console.c   **** 						{							
3883:.\console.c   **** 							printf("* Warning! Put All Axes to desired position and press y!");
3884:.\console.c   **** 							
3885:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _YES)
3886:.\console.c   **** 							{														
3887:.\console.c   **** 								if (strlen(actual_cmd.number2) != 0)
3888:.\console.c   **** 								{	
3889:.\console.c   **** 									//user defined memory number
3890:.\console.c   **** 									q_table[q_number] 			= memory_number;				  		/* save for fast indexing 	*/
3891:.\console.c   **** 								}
3892:.\console.c   **** 								else
3893:.\console.c   **** 								{
3894:.\console.c   **** 									//table standard memory number
3895:.\console.c   **** 									q_table[q_number] 			= qmemory_standard_address[q_number];	/* save for fast indexing 	*/
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 317


3896:.\console.c   **** 								}
3897:.\console.c   **** 								
3898:.\console.c   **** 								/* Update Global Parameters and RT data	*/
3899:.\console.c   **** 								q[q_table[q_number]].number									= (uint8)(q_number);
3900:.\console.c   **** 								q[q_table[q_number]].mc.position[PAN_AXIS]             		= pan_absolute_sensor.position;			
3901:.\console.c   **** 								q[q_table[q_number]].param.position_default[PAN_AXIS].fnum  = pan_absolute_sensor.position;
3902:.\console.c   **** 
3903:.\console.c   **** 								q[q_table[q_number]].mc.position[TILT_AXIS]            		= tilt_absolute_sensor.position;		
3904:.\console.c   **** 								q[q_table[q_number]].param.position_default[TILT_AXIS].fnum = tilt_absolute_sensor.position
3905:.\console.c   **** 								
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
3907:.\console.c   **** 									(uint16)q_number,
3908:.\console.c   **** 									(int32)pan_absolute_sensor.position,
3909:.\console.c   **** 									(int32)tilt_absolute_sensor.position,
3910:.\console.c   **** 									(int16)q_table[q_number]);	
3911:.\console.c   **** 							}
3912:.\console.c   **** 							else
3913:.\console.c   **** 							{
3914:.\console.c   **** 								printf("\r\n* Q element (shot) position not sampled!\r\n");								
3915:.\console.c   **** 							}
3916:.\console.c   **** 								
3917:.\console.c   **** 							/* Update EEPROM */
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3919:.\console.c   **** 							{
3920:.\console.c   **** 								printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3921:.\console.c   **** 							}
3922:.\console.c   **** 						}
3923:.\console.c   **** 						else
3924:.\console.c   **** 						{
3925:.\console.c   **** 							printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
3926:.\console.c   **** 						}						
3927:.\console.c   **** 					}
3928:.\console.c   **** //					else if (strcmp(actual_cmd.number2, "c") == 0)
3929:.\console.c   **** //					//else if ((memory_number = atoi(actual_cmd.number2)) == Q_MEMORY_CLEAR_FLAG)
3930:.\console.c   **** //					{					
3931:.\console.c   **** //						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3932:.\console.c   **** //						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3933:.\console.c   **** //						{	
3934:.\console.c   **** //							/* Update Global Parameter and RT data	*/
3935:.\console.c   **** //							if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
3936:.\console.c   **** //							{						
3937:.\console.c   **** //								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
3938:.\console.c   **** //								
3939:.\console.c   **** //								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
3940:.\console.c   **** //								
3941:.\console.c   **** //								/* Update EEPROM */
3942:.\console.c   **** //								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3943:.\console.c   **** //								{
3944:.\console.c   **** //									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3945:.\console.c   **** //								}
3946:.\console.c   **** //							}
3947:.\console.c   **** //							else
3948:.\console.c   **** //							{
3949:.\console.c   **** //								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
3950:.\console.c   **** //							}
3951:.\console.c   **** //							
3952:.\console.c   **** //						}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 318


3953:.\console.c   **** //					}
3954:.\console.c   **** 					else
3955:.\console.c   **** 					{
3956:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
3957:.\console.c   **** 					}
3958:.\console.c   **** 					goto exitpars;
3959:.\console.c   **** 				}	
3960:.\console.c   **** 				//END SET SET Q ELEMENT (SHOT)
3961:.\console.c   **** 				
3962:.\console.c   **** 				
3963:.\console.c   **** 				// SET PAN MOTOR Kp
3964:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpp") == 0)
3965:.\console.c   **** 				{	
3966:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
3967:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
3968:.\console.c   **** 					{
3969:.\console.c   **** 						pan_axis.param.Kpf.fnum = Kp;
3970:.\console.c   **** 						
3971:.\console.c   **** 						/* Writes Kp on EEPROM */
3972:.\console.c   **** 						dummy = WriteAllEEparams();
3973:.\console.c   **** 						printf(STR_REM_PMKP, (float)pan_axis.param.Kpf.fnum);   /* REM: Pan Motor Kp setted to...*/		
3974:.\console.c   **** 					}
3975:.\console.c   **** 					else
3976:.\console.c   **** 					{
3977:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3978:.\console.c   **** 					}
3979:.\console.c   **** 					goto exitpars;
3980:.\console.c   **** 				}	
3981:.\console.c   **** 				// END SET PAN MOTOR Kp
3982:.\console.c   **** 
3983:.\console.c   **** 				
3984:.\console.c   **** 				// SET TILT MOTOR Kp
3985:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpt") == 0)
3986:.\console.c   **** 				{	
3987:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
3988:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
3989:.\console.c   **** 					{
3990:.\console.c   **** 						tilt_axis.param.Kpf.fnum = Kp;
3991:.\console.c   **** 						
3992:.\console.c   **** 						/* Writes Kp on EEPROM */
3993:.\console.c   **** 						dummy = WriteAllEEparams();
3994:.\console.c   **** 						printf(STR_REM_TMKP, (float)tilt_axis.param.Kpf.fnum);   /* REM: Tilt Motor Kp setted to...*/
3995:.\console.c   **** 					}
3996:.\console.c   **** 					else
3997:.\console.c   **** 					{
3998:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3999:.\console.c   **** 					}
4000:.\console.c   **** 					goto exitpars;
4001:.\console.c   **** 				}	
4002:.\console.c   **** 				// END SET TILT MOTOR Kp				
4003:.\console.c   **** 				
4004:.\console.c   **** 				
4005:.\console.c   **** 				// SET PAN MOTOR Kd
4006:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdp") == 0)
4007:.\console.c   **** 				{	
4008:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
4009:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 319


4010:.\console.c   **** 					{
4011:.\console.c   **** 						pan_axis.param.Kdf.fnum = Kd;
4012:.\console.c   **** 						
4013:.\console.c   **** 						/* Writes Kp on EEPROM */
4014:.\console.c   **** 						dummy = WriteAllEEparams();
4015:.\console.c   **** 						printf(STR_REM_PMKD, (float)pan_axis.param.Kdf.fnum);   /* REM: Pan Motor Kd setted to...*/		
4016:.\console.c   **** 					}
4017:.\console.c   **** 					else
4018:.\console.c   **** 					{
4019:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4020:.\console.c   **** 					}
4021:.\console.c   **** 					goto exitpars;
4022:.\console.c   **** 				}	
4023:.\console.c   **** 				// END SET PAN MOTOR Kd
4024:.\console.c   **** 
4025:.\console.c   **** 				
4026:.\console.c   **** 				// SET TILT MOTOR Kd
4027:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdt") == 0)
4028:.\console.c   **** 				{	
4029:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
4030:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
4031:.\console.c   **** 					{
4032:.\console.c   **** 						tilt_axis.param.Kdf.fnum = Kd;
4033:.\console.c   **** 						
4034:.\console.c   **** 						/* Writes Kp on EEPROM */
4035:.\console.c   **** 						dummy = WriteAllEEparams();
4036:.\console.c   **** 						printf(STR_REM_TMKD, (float)tilt_axis.param.Kdf.fnum);   /* REM: Tilt Motor Kd setted to...*/
4037:.\console.c   **** 					}
4038:.\console.c   **** 					else
4039:.\console.c   **** 					{
4040:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4041:.\console.c   **** 					}
4042:.\console.c   **** 					goto exitpars;
4043:.\console.c   **** 				}	
4044:.\console.c   **** 				// END SET TILT MOTOR Kd				
4045:.\console.c   **** 				
4046:.\console.c   **** 				
4047:.\console.c   **** 				// SET PAN MOTOR Ki
4048:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kip") == 0)
4049:.\console.c   **** 				{	
4050:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
4051:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
4052:.\console.c   **** 					{
4053:.\console.c   **** 						pan_axis.param.Kif.fnum = Ki;
4054:.\console.c   **** 						
4055:.\console.c   **** 						/* Writes Ki on EEPROM */
4056:.\console.c   **** 						dummy = WriteAllEEparams();
4057:.\console.c   **** 						printf(STR_REM_PMKI, (float)pan_axis.param.Kif.fnum);   /* REM: Pan Motor Ki setted to...*/		
4058:.\console.c   **** 					}
4059:.\console.c   **** 					else
4060:.\console.c   **** 					{
4061:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4062:.\console.c   **** 					}
4063:.\console.c   **** 					goto exitpars;
4064:.\console.c   **** 				}	
4065:.\console.c   **** 				// END SET PAN MOTOR Ki
4066:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 320


4067:.\console.c   **** 				
4068:.\console.c   **** 				// SET TILT MOTOR Ki
4069:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kit") == 0)
4070:.\console.c   **** 				{	
4071:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
4072:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
4073:.\console.c   **** 					{
4074:.\console.c   **** 						tilt_axis.param.Kif.fnum = Ki;
4075:.\console.c   **** 						
4076:.\console.c   **** 						/* Writes Ki on EEPROM */
4077:.\console.c   **** 						dummy = WriteAllEEparams();
4078:.\console.c   **** 						printf(STR_REM_TMKI, (float)tilt_axis.param.Kif.fnum);   /* REM: Tilt Motor Ki setted to...*/
4079:.\console.c   **** 					}
4080:.\console.c   **** 					else
4081:.\console.c   **** 					{
4082:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4083:.\console.c   **** 					}
4084:.\console.c   **** 					goto exitpars;
4085:.\console.c   **** 				}	
4086:.\console.c   **** 				// END SET TILT MOTOR Ki				
4087:.\console.c   **** 				
4088:.\console.c   **** 				
4089:.\console.c   **** 				// SET PAN MOTOR Ksi
4090:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksip") == 0)
4091:.\console.c   **** 				{	
4092:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
4093:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
4094:.\console.c   **** 					{
4095:.\console.c   **** 						pan_axis.param.Ksif.fnum = Ksi;
4096:.\console.c   **** 						
4097:.\console.c   **** 						/* Writes Ksi on EEPROM */
4098:.\console.c   **** 						dummy = WriteAllEEparams();
4099:.\console.c   **** 						printf(STR_REM_PMKS, (float)pan_axis.param.Ksif.fnum);   /* REM: Pan Motor Ksi setted to...*/
4100:.\console.c   **** 					}
4101:.\console.c   **** 					else
4102:.\console.c   **** 					{
4103:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4104:.\console.c   **** 					}
4105:.\console.c   **** 					goto exitpars;
4106:.\console.c   **** 				}	
4107:.\console.c   **** 				// END SET PAN MOTOR Ksi
4108:.\console.c   **** 
4109:.\console.c   **** 				
4110:.\console.c   **** 				// SET TILT MOTOR Ksi
4111:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksit") == 0)
4112:.\console.c   **** 				{	
4113:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
4114:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
4115:.\console.c   **** 					{
4116:.\console.c   **** 						tilt_axis.param.Ksif.fnum = Ksi;
4117:.\console.c   **** 						
4118:.\console.c   **** 						/* Writes Ksi on EEPROM */
4119:.\console.c   **** 						dummy = WriteAllEEparams();
4120:.\console.c   **** 						printf(STR_REM_TMKS, (float)tilt_axis.param.Ksif.fnum);   /* REM: Tilt Motor Ksi setted to...
4121:.\console.c   **** 					}
4122:.\console.c   **** 					else
4123:.\console.c   **** 					{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 321


4124:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4125:.\console.c   **** 					}
4126:.\console.c   **** 					goto exitpars;
4127:.\console.c   **** 				}	
4128:.\console.c   **** 				// END SET TILT MOTOR Ksi				
4129:.\console.c   **** 				
4130:.\console.c   **** 				
4131:.\console.c   **** 				// SET A[NAOUT]AXIS
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
4133:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaxis") == 0))
4134:.\console.c   **** 				{			
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
4136:.\console.c   **** 					{							
4137:.\console.c   **** 						if (strcmp(actual_cmd.number1, "pan") == 0)
4138:.\console.c   **** 						{								
4139:.\console.c   **** 							/* Update Global Volatile Parameter			*/
4140:.\console.c   **** 							Selected_ANAOUT=&pan_axis;
4141:.\console.c   **** 							printf(STR_REM_ANAXP);   /* REM: Anaout Axis setted to PAN*/
4142:.\console.c   **** 							
4143:.\console.c   **** 							CyDelay(100);
4144:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
4145:.\console.c   **** 							/* anapos_offset <-- correct value to zero oscilloscope output */
4146:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();							
4147:.\console.c   **** 						}
4148:.\console.c   **** 						
4149:.\console.c   **** 						if (strcmp(actual_cmd.number1, "tilt") == 0)
4150:.\console.c   **** 						{
4151:.\console.c   **** 							/* Update Global Volatile Parameter			*/
4152:.\console.c   **** 							Selected_ANAOUT=&tilt_axis;
4153:.\console.c   **** 							printf(STR_REM_ANAXT);   /* REM: Anaout Axis setted to TILT*/
4154:.\console.c   **** 							
4155:.\console.c   **** 							CyDelay(100);
4156:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
4157:.\console.c   **** 							/* anapos_offset <-- correct value to zero oscilloscope output */
4158:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();	
4159:.\console.c   **** 						}
4160:.\console.c   **** 					
4161:.\console.c   **** 						/* Update EEPROM */
4162:.\console.c   **** 						dummy = WriteAllEEparams();
4163:.\console.c   **** 					}
4164:.\console.c   **** 					else
4165:.\console.c   **** 					{
4166:.\console.c   **** 						printf(STR_ERROR6);			/* ERROR6: Axis may be [pan,tilt,roll,all] */
4167:.\console.c   **** 					}
4168:.\console.c   **** 					goto exitpars;
4169:.\console.c   **** 				}	
4170:.\console.c   **** 				//END SET A[NAOUT]AXIS							
4171:.\console.c   **** 				
4172:.\console.c   **** 				
4173:.\console.c   **** 				// SET PAN MOTOR COLOR
4174:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colorp") == 0)
4175:.\console.c   **** 				{	
4176:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
4177:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
4178:.\console.c   **** 					{
4179:.\console.c   **** 						pan_axis.param.color = color;
4180:.\console.c   **** 						
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 322


4181:.\console.c   **** 						/* Writes Burst Period on EEPROM */
4182:.\console.c   **** 						dummy = WriteAllEEparams();
4183:.\console.c   **** 						printf(STR_REM_SCOL);   /* REM: pan axis color setted to...*/
4184:.\console.c   **** 						ShowParamsColor(&pan_axis);
4185:.\console.c   **** 					}
4186:.\console.c   **** 					else
4187:.\console.c   **** 					{
4188:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4189:.\console.c   **** 					}
4190:.\console.c   **** 					goto exitpars;
4191:.\console.c   **** 				}	
4192:.\console.c   **** 				// END PAN MOTOR COLOR
4193:.\console.c   **** 				
4194:.\console.c   **** 				
4195:.\console.c   **** 				// SET TILT MOTOR COLOR
4196:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colort") == 0)
4197:.\console.c   **** 				{	
4198:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
4199:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
4200:.\console.c   **** 					{
4201:.\console.c   **** 						tilt_axis.param.color = color;
4202:.\console.c   **** 						
4203:.\console.c   **** 						/* Writes Burst Period on EEPROM */
4204:.\console.c   **** 						dummy = WriteAllEEparams();
4205:.\console.c   **** 						printf(STR_REM_SCOLT);   /* REM: tilt axis color setted to...*/
4206:.\console.c   **** 						ShowParamsColor(&tilt_axis);						
4207:.\console.c   **** 					}
4208:.\console.c   **** 					else
4209:.\console.c   **** 					{
4210:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4211:.\console.c   **** 					}
4212:.\console.c   **** 					goto exitpars;
4213:.\console.c   **** 				}	
4214:.\console.c   **** 				// END SET TILT MOTOR COLOR				
4215:.\console.c   **** 				
4216:.\console.c   **** 				
4217:.\console.c   **** 				// SET PAN MOTOR Kopf
4218:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopfp") == 0)
4219:.\console.c   **** 				{	
4220:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
4221:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
4222:.\console.c   **** 					{
4223:.\console.c   **** 						pan_axis.param.Kopf.fnum = Kopf;
4224:.\console.c   **** 						
4225:.\console.c   **** 						/* Writes Ksi on EEPROM */
4226:.\console.c   **** 						dummy = WriteAllEEparams();
4227:.\console.c   **** 						printf(STR_REM_PKOF, (float)pan_axis.param.Kopf.fnum);   /* REM: Pan Motor Kopf setted to...*
4228:.\console.c   **** 					}
4229:.\console.c   **** 					else
4230:.\console.c   **** 					{
4231:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4232:.\console.c   **** 					}
4233:.\console.c   **** 					goto exitpars;
4234:.\console.c   **** 				}	
4235:.\console.c   **** 				// END SET PAN MOTOR Kopf		
4236:.\console.c   **** 				
4237:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 323


4238:.\console.c   **** 				// SET TILT MOTOR Kopf
4239:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopft") == 0)
4240:.\console.c   **** 				{	
4241:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
4242:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
4243:.\console.c   **** 					{
4244:.\console.c   **** 						tilt_axis.param.Kopf.fnum = Kopf;
4245:.\console.c   **** 						
4246:.\console.c   **** 						/* Writes Ksi on EEPROM */
4247:.\console.c   **** 						dummy = WriteAllEEparams();
4248:.\console.c   **** 						printf(STR_REM_TKOF, (float)tilt_axis.param.Kopf.fnum);   /* REM: Tilt Motor Kopf setted to..
4249:.\console.c   **** 					}
4250:.\console.c   **** 					else
4251:.\console.c   **** 					{
4252:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4253:.\console.c   **** 					}
4254:.\console.c   **** 					goto exitpars;
4255:.\console.c   **** 				}	
4256:.\console.c   **** 				// END SET TILT MOTOR Kopf 					
4257:.\console.c   **** 
4258:.\console.c   **** 				
4259:.\console.c   **** 				// SET PAN MOTOR Again
4260:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againp") == 0)
4261:.\console.c   **** 				{	
4262:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
4263:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
4264:.\console.c   **** 					{
4265:.\console.c   **** 						pan_axis.param.Gain_ANAOUT.fnum = anaout_gain;
4266:.\console.c   **** 						
4267:.\console.c   **** 						/* Writes Ksi on EEPROM */
4268:.\console.c   **** 						dummy = WriteAllEEparams();
4269:.\console.c   **** 						printf(STR_REM_PAGA, (float)pan_axis.param.Gain_ANAOUT.fnum);   /* REM: Pan Motor Anaout Gain
4270:.\console.c   **** 					}
4271:.\console.c   **** 					else
4272:.\console.c   **** 					{
4273:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4274:.\console.c   **** 					}
4275:.\console.c   **** 					goto exitpars;
4276:.\console.c   **** 				}	
4277:.\console.c   **** 				// END SET PAN MOTOR Again	
4278:.\console.c   **** 				
4279:.\console.c   **** 				
4280:.\console.c   **** 				// SET TILT MOTOR Again
4281:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againt") == 0)
4282:.\console.c   **** 				{	
4283:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
4284:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
4285:.\console.c   **** 					{
4286:.\console.c   **** 						tilt_axis.param.Gain_ANAOUT.fnum = anaout_gain;
4287:.\console.c   **** 						
4288:.\console.c   **** 						/* Writes Ksi on EEPROM */
4289:.\console.c   **** 						dummy = WriteAllEEparams();
4290:.\console.c   **** 						printf(STR_REM_TAGA, (float)tilt_axis.param.Gain_ANAOUT.fnum);   /* REM: Tilt Motor Anaout Ga
4291:.\console.c   **** 					}
4292:.\console.c   **** 					else
4293:.\console.c   **** 					{
4294:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 324


4295:.\console.c   **** 					}
4296:.\console.c   **** 					goto exitpars;
4297:.\console.c   **** 				}	
4298:.\console.c   **** 				// END SET TILT MOTOR Again				
4299:.\console.c   **** 				
4300:.\console.c   **** 				
4301:.\console.c   **** //				// SET KPLOWPASS
4302:.\console.c   **** //				if ((strcmp(actual_cmd.parameter, "kplowpass") == 0) ||
4303:.\console.c   **** //					(strcmp(actual_cmd.parameter, "kpl") == 0))
4304:.\console.c   **** //				{	
4305:.\console.c   **** //					if (((kplowpass = atoi(actual_cmd.number1)) >= 0)
4306:.\console.c   **** //					&& (kplowpass = atoi(actual_cmd.number1)) <= 1)
4307:.\console.c   **** //					{
4308:.\console.c   **** //						gobee_param.kplowpass = kplowpass;
4309:.\console.c   **** //						
4310:.\console.c   **** //						/* Writes Kp Low Pass flag on EEPROM */
4311:.\console.c   **** //						dummy = WriteAllEEparams();
4312:.\console.c   **** //						printf(STR_REM_SEKL, (uint16)kplowpass);   /* REM: kp Low Pass setted to...*/					
4313:.\console.c   **** //					}
4314:.\console.c   **** //					else
4315:.\console.c   **** //					{
4316:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4317:.\console.c   **** //					}
4318:.\console.c   **** //					goto exitpars;
4319:.\console.c   **** //				}	
4320:.\console.c   **** //				// END SET KP LOWPASS
4321:.\console.c   **** 
4322:.\console.c   **** 
4323:.\console.c   **** 				// SET ACC X AXIS ADC OFFSET
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
4325:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacxof") == 0))
4326:.\console.c   **** 				{	
4327:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4328:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4329:.\console.c   **** 					{
4330:.\console.c   **** 						gobee_param.x_acc_ADC_offset = (int16)offset;
4331:.\console.c   **** 						
4332:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4333:.\console.c   **** 						dummy = WriteAllEEparams();
4334:.\console.c   **** 						printf(STR_REM_SEAX, (int16)offset);   /* REM: ACC AXIS X ADC offset setted to...*/					
4335:.\console.c   **** 					}
4336:.\console.c   **** 					else
4337:.\console.c   **** 					{
4338:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4339:.\console.c   **** 					}
4340:.\console.c   **** 					goto exitpars;
4341:.\console.c   **** 				}	
4342:.\console.c   **** 				// END SET ACC X AXIS ADC OFFSET
4343:.\console.c   **** 
4344:.\console.c   **** 
4345:.\console.c   **** 				// SET ACC Y AXIS ADC OFFSET
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
4347:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacyof") == 0))
4348:.\console.c   **** 				{	
4349:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4350:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4351:.\console.c   **** 					{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 325


4352:.\console.c   **** 						gobee_param.y_acc_ADC_offset = (int16)offset;
4353:.\console.c   **** 						
4354:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4355:.\console.c   **** 						dummy = WriteAllEEparams();
4356:.\console.c   **** 						printf(STR_REM_SEAY, (int16)offset);   /* REM: ACC AXIS Y ADC offset setted to...*/					
4357:.\console.c   **** 					}
4358:.\console.c   **** 					else
4359:.\console.c   **** 					{
4360:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4361:.\console.c   **** 					}
4362:.\console.c   **** 					goto exitpars;
4363:.\console.c   **** 				}	
4364:.\console.c   **** 				// END SET ACC Y AXIS ADC OFFSET
4365:.\console.c   **** 
4366:.\console.c   **** 				
4367:.\console.c   **** 				// SET ACC Z AXIS ADC OFFSET
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
4369:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaczof") == 0))
4370:.\console.c   **** 				{	
4371:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4372:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4373:.\console.c   **** 					{
4374:.\console.c   **** 						gobee_param.z_acc_ADC_offset = (int16)offset;
4375:.\console.c   **** 						
4376:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4377:.\console.c   **** 						dummy = WriteAllEEparams();
4378:.\console.c   **** 						printf(STR_REM_SEAZ, (int16)offset);   /* REM: ACC AXIS Z ADC offset setted to...*/					
4379:.\console.c   **** 					}
4380:.\console.c   **** 					else
4381:.\console.c   **** 					{
4382:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4383:.\console.c   **** 					}
4384:.\console.c   **** 					goto exitpars;
4385:.\console.c   **** 				}	
4386:.\console.c   **** 				// END SET ACC Z AXIS ADC OFFSET				
4387:.\console.c   **** 		
4388:.\console.c   **** 				
4389:.\console.c   **** //				// SET Digital Gyro Offset FINE
4390:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "dgfine") == 0)
4391:.\console.c   **** //				{	
4392:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -10)
4393:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +10)
4394:.\console.c   **** //					{
4395:.\console.c   **** //						gobee_param.dgyro_offset_fine.fnum = offset_fine;
4396:.\console.c   **** //						
4397:.\console.c   **** //						/* Writes Ki on EEPROM */
4398:.\console.c   **** //						dummy = WriteAllEEparams();
4399:.\console.c   **** //						printf(STR_REM_STDF, (float)offset_fine);   /* REM: Digital Gyro Offset Fine...*/					
4400:.\console.c   **** //					}
4401:.\console.c   **** //					else
4402:.\console.c   **** //					{
4403:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4404:.\console.c   **** //					}
4405:.\console.c   **** //					goto exitpars;
4406:.\console.c   **** //				}	
4407:.\console.c   **** //				// END SET Digital Gyro Offset FINE
4408:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 326


4409:.\console.c   **** 
4410:.\console.c   **** //				// SET Analog Gyro Offset FINE
4411:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "agfine") == 0)
4412:.\console.c   **** //				{	
4413:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -10)
4414:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +10)
4415:.\console.c   **** //					{
4416:.\console.c   **** //						gobee_param.gyro_offset_fine.fnum = offset_fine;
4417:.\console.c   **** //						
4418:.\console.c   **** //						/* Writes Ki on EEPROM */
4419:.\console.c   **** //						dummy = WriteAllEEparams();
4420:.\console.c   **** //						printf(STR_REM_STOF, (float)offset_fine);   /* REM: Analog Gyro Offset Fine...*/					
4421:.\console.c   **** //					}
4422:.\console.c   **** //					else
4423:.\console.c   **** //					{
4424:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4425:.\console.c   **** //					}
4426:.\console.c   **** //					goto exitpars;
4427:.\console.c   **** //				}	
4428:.\console.c   **** //				// END SET Analog Gyro Offset FINE
4429:.\console.c   **** 
4430:.\console.c   **** 
4431:.\console.c   **** //				// SET Analog Gyro Scale Offset FINE
4432:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "agsfine") == 0)
4433:.\console.c   **** //				{	
4434:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -0.1)
4435:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +0.1)
4436:.\console.c   **** //					{
4437:.\console.c   **** //						gobee_param.gyro_scale_offset_fine.fnum = offset_fine;
4438:.\console.c   **** //						
4439:.\console.c   **** //						/* Writes Ki on EEPROM */
4440:.\console.c   **** //						dummy = WriteAllEEparams();
4441:.\console.c   **** //						printf(STR_REM_STSF, (float)offset_fine);   /* REM: Analog Gyro Scale Offset Fine...*/					
4442:.\console.c   **** //					}
4443:.\console.c   **** //					else
4444:.\console.c   **** //					{
4445:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4446:.\console.c   **** //					}
4447:.\console.c   **** //					goto exitpars;
4448:.\console.c   **** //				}	
4449:.\console.c   **** //				// END SET Analog Gyro Scale Offset FINE
4450:.\console.c   **** 
4451:.\console.c   **** 
4452:.\console.c   **** 
4453:.\console.c   **** //			// SET alpha
4454:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "alpha") == 0)
4455:.\console.c   **** //				{	
4456:.\console.c   **** //					if (((alpha = atof(actual_cmd.number1)) >= 0)
4457:.\console.c   **** //					&& (alpha = atof(actual_cmd.number1)) <= 1)
4458:.\console.c   **** //					{
4459:.\console.c   **** //						gobee_param.alpha.fnum = alpha;
4460:.\console.c   **** //						
4461:.\console.c   **** //						/* Writes alpha on EEPROM */
4462:.\console.c   **** //						dummy = WriteAllEEparams();
4463:.\console.c   **** //						printf(STR_REM_STAL, (float)gobee_param.alpha.fnum);   /* REM: alpha setted to...*/					
4464:.\console.c   **** //					}
4465:.\console.c   **** //					else
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 327


4466:.\console.c   **** //					{
4467:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4468:.\console.c   **** //					}
4469:.\console.c   **** //					goto exitpars;
4470:.\console.c   **** //				}	
4471:.\console.c   **** //				// END SET alpha
4472:.\console.c   **** 				
4473:.\console.c   **** 				
4474:.\console.c   **** 			// SET beta
4475:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "beta") == 0)
4476:.\console.c   **** 				{	
4477:.\console.c   **** 					if (((beta = atof(actual_cmd.number1)) >= 0)
4478:.\console.c   **** 					&& (beta = atof(actual_cmd.number1)) <= 1)
4479:.\console.c   **** 					{
4480:.\console.c   **** 						gobee_param.beta.fnum = beta;
4481:.\console.c   **** 						
4482:.\console.c   **** 						/* Writes alpha on EEPROM */
4483:.\console.c   **** 						dummy = WriteAllEEparams();
4484:.\console.c   **** 						printf(STR_REM_STBT, (float)gobee_param.beta.fnum);   /* REM: beta setted to...*/					
4485:.\console.c   **** 					}
4486:.\console.c   **** 					else
4487:.\console.c   **** 					{
4488:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4489:.\console.c   **** 					}
4490:.\console.c   **** 					goto exitpars;
4491:.\console.c   **** 				}	
4492:.\console.c   **** 				// END SET beta				
4493:.\console.c   **** 
4494:.\console.c   **** 				
4495:.\console.c   **** 				// SET gamma (IMU LPF)
4496:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "gamma") == 0)
4497:.\console.c   **** 				{	
4498:.\console.c   **** 					if (((gamma = atof(actual_cmd.number1)) >= 0)
4499:.\console.c   **** 					&& (gamma = atof(actual_cmd.number1)) <= 1)
4500:.\console.c   **** 					{
4501:.\console.c   **** 						IMU_sensor.param.gamma.fnum = gamma;
4502:.\console.c   **** 						
4503:.\console.c   **** 						/* Writes alpha on EEPROM */
4504:.\console.c   **** 						dummy = WriteAllEEparams();
4505:.\console.c   **** 						printf(STR_REM_STGM, (float)IMU_sensor.param.gamma.fnum);   /* REM: gamma setted to...*/					
4506:.\console.c   **** 					}
4507:.\console.c   **** 					else
4508:.\console.c   **** 					{
4509:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4510:.\console.c   **** 					}
4511:.\console.c   **** 					goto exitpars;
4512:.\console.c   **** 				}	
4513:.\console.c   **** 				// END SET gamma (IMU LPF)
4514:.\console.c   **** 
4515:.\console.c   **** 				
4516:.\console.c   **** 				// SET Jump G Threshold
4517:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "jumpth") == 0)
4518:.\console.c   **** 				{	
4519:.\console.c   **** 					if (((jump_g_th = atof(actual_cmd.number1)) >= 0)
4520:.\console.c   **** 					&& (jump_g_th = atof(actual_cmd.number1)) <= 10)
4521:.\console.c   **** 					{
4522:.\console.c   **** 						gobee_param.jump_g_threshold.fnum = jump_g_th;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 328


4523:.\console.c   **** 						
4524:.\console.c   **** 						/* Writes alpha on EEPROM */
4525:.\console.c   **** 						dummy = WriteAllEEparams();
4526:.\console.c   **** 						printf(STR_REM_STJG, (float)gobee_param.jump_g_threshold.fnum);   /* REM: jump g thr setted t
4527:.\console.c   **** 					}
4528:.\console.c   **** 					else
4529:.\console.c   **** 					{
4530:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4531:.\console.c   **** 					}
4532:.\console.c   **** 					goto exitpars;
4533:.\console.c   **** 				}	
4534:.\console.c   **** 				// END SET Jump G Threshold		
4535:.\console.c   **** 				
4536:.\console.c   **** 				
4537:.\console.c   **** 				// SET Acceleration G Threshold
4538:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "accth") == 0)
4539:.\console.c   **** 				{	
4540:.\console.c   **** 					if (((acc_g_th = atof(actual_cmd.number1)) >= 0)
4541:.\console.c   **** 					&& (acc_g_th = atof(actual_cmd.number1)) <= 10)
4542:.\console.c   **** 					{
4543:.\console.c   **** 						gobee_param.acc_g_threshold.fnum = acc_g_th;
4544:.\console.c   **** 						
4545:.\console.c   **** 						/* Writes alpha on EEPROM */
4546:.\console.c   **** 						dummy = WriteAllEEparams();
4547:.\console.c   **** 						printf(STR_REM_STAG, (float)gobee_param.acc_g_threshold.fnum);   /* REM: acc g thr setted to.
4548:.\console.c   **** 					}
4549:.\console.c   **** 					else
4550:.\console.c   **** 					{
4551:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4552:.\console.c   **** 					}
4553:.\console.c   **** 					goto exitpars;
4554:.\console.c   **** 				}	
4555:.\console.c   **** 				// END SET Acceleration G Threshold					
4556:.\console.c   **** 				
4557:.\console.c   **** 				
4558:.\console.c   **** 				// SET ASTIM TYPE
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
4560:.\console.c   **** 				   (strcmp(actual_cmd.parameter, "astimtype") == 0)) 
4561:.\console.c   **** 				{	
4562:.\console.c   **** 					if (((astim_type = atoi(actual_cmd.number1)) >= NO_ASTIM)
4563:.\console.c   **** 					&& (astim_type = atoi(actual_cmd.number1)) <= SQUARE_ASTIM)
4564:.\console.c   **** 					{		
4565:.\console.c   **** //						if (astim_type != NO_ASTIM)
4566:.\console.c   **** //						{
4567:.\console.c   **** //							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4568:.\console.c   **** //							printf(STR_ASTIMB);				//
4569:.\console.c   **** //							
4570:.\console.c   **** //							if (ButtonYNChoice(ECHO_ON) == _NO)
4571:.\console.c   **** //							{
4572:.\console.c   **** //								goto exitpars;
4573:.\console.c   **** //							}
4574:.\console.c   **** //							printf("\r\n");
4575:.\console.c   **** 							
4576:.\console.c   **** 							/* Update Global Volatile Parameter		*/
4577:.\console.c   **** 							pan_axis.vparam.astim_type  = astim_type;
4578:.\console.c   **** 							tilt_axis.vparam.astim_type = astim_type;						
4579:.\console.c   **** 							
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 329


4580:.\console.c   **** 							printf(STR_REM_ASTP, (uint16)astim_type);   /* REM: PAN  Astim Type Configured to...*/
4581:.\console.c   **** 							printf(STR_REM_ASTT, (uint16)astim_type);   /* REM: TILT Astim Type Configured to...*/						
4582:.\console.c   **** 							
4583:.\console.c   **** 							WaveDAC8_Start();					//Starts WaveDAC8	
4584:.\console.c   **** 							PGA_ASTIM_Start();					//Starts PGA_ASTIM
4585:.\console.c   **** 							
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
4587:.\console.c   **** 							{
4588:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
4589:.\console.c   **** 								Control_Reg_WS_Write(0);			//Selects wave 0
4590:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4591:.\console.c   **** 								printf("Sine Wave Astim Started!\r\n");							
4592:.\console.c   **** 							}
4593:.\console.c   **** 							else if (astim_type == TRIANGLE_ASTIM)
4594:.\console.c   **** 							{
4595:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
4596:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1																	
4597:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_triangle, WaveDAC8_WAVE_TRIANGLE_LENGTH);	//SELECTS TRIAN
4598:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4599:.\console.c   **** 								printf("Triangle Wave Astim Started!\r\n");								
4600:.\console.c   **** 							}
4601:.\console.c   **** 							else if (astim_type == SQUARE_ASTIM)
4602:.\console.c   **** 							{
4603:.\console.c   **** 								WaveDAC8_Stop();					//Stops 						
4604:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1	
4605:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_square, WaveDAC8_WAVE_SQUARE_LENGTH);	//SELECTS SQUARE
4606:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4607:.\console.c   **** 								printf("Square Wave Astim Started!\r\n");								
4608:.\console.c   **** 							}						
4609:.\console.c   **** 							else if (astim_type == NO_ASTIM)
4610:.\console.c   **** 							{
4611:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8
4612:.\console.c   **** 								PGA_ASTIM_Stop();					//Stops PGA_ASTIM
4613:.\console.c   **** 								printf("Wave Astim Stopped!\r\n");							
4614:.\console.c   **** 							}	
4615:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4616:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4617:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4618:.\console.c   **** //						}
4619:.\console.c   **** 					}
4620:.\console.c   **** 					else
4621:.\console.c   **** 					{
4622:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4623:.\console.c   **** 					}
4624:.\console.c   **** 					goto exitpars;
4625:.\console.c   **** 				}	
4626:.\console.c   **** 				//END SET ASTIM TYPE
4627:.\console.c   **** 				
4628:.\console.c   **** 				
4629:.\console.c   **** 				// SET ASTIM PAN ENABLE
4630:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimp") == 0) 
4631:.\console.c   **** 				{	
4632:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
4633:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
4634:.\console.c   **** 					{		
4635:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
4636:.\console.c   **** 						{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 330


4637:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4638:.\console.c   **** 							printf(STR_ASTIMB);				//
4639:.\console.c   **** 							
4640:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
4641:.\console.c   **** 							{
4642:.\console.c   **** 								goto exitpars;
4643:.\console.c   **** 							}
4644:.\console.c   **** 							printf("\r\n");	
4645:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4646:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4647:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4648:.\console.c   **** 						}
4649:.\console.c   **** 						/* Update Global Volatile Parameter		*/
4650:.\console.c   **** 						pan_axis.vparam.astim_enable  = astim_enable;
4651:.\console.c   **** 						
4652:.\console.c   **** 						printf(STR_REM_ASEP, (uint16)astim_enable);   /* REM: PAN  Astim Type Configured to...*/
4653:.\console.c   **** 					}
4654:.\console.c   **** 					else
4655:.\console.c   **** 					{
4656:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4657:.\console.c   **** 					}
4658:.\console.c   **** 					goto exitpars;
4659:.\console.c   **** 				}	
4660:.\console.c   **** 				//END SET ASTIM PAN ENABLE				
4661:.\console.c   **** 				
4662:.\console.c   **** 				
4663:.\console.c   **** 				// SET ASTIM TILT ENABLE
4664:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimt") == 0) 
4665:.\console.c   **** 				{	
4666:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
4667:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
4668:.\console.c   **** 					{		
4669:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
4670:.\console.c   **** 						{
4671:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4672:.\console.c   **** 							printf(STR_ASTIMB);				//
4673:.\console.c   **** 							
4674:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
4675:.\console.c   **** 							{
4676:.\console.c   **** 								goto exitpars;
4677:.\console.c   **** 							}
4678:.\console.c   **** 							printf("\r\n");
4679:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4680:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4681:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4682:.\console.c   **** 						}
4683:.\console.c   **** 							/* Update Global Volatile Parameter		*/
4684:.\console.c   **** 							tilt_axis.vparam.astim_enable  = astim_enable;
4685:.\console.c   **** 							
4686:.\console.c   **** 							printf(STR_REM_ASET, (uint16)astim_enable);   /* REM: TILT  Astim Type Configured to...*/
4687:.\console.c   **** 					}
4688:.\console.c   **** 					else
4689:.\console.c   **** 					{
4690:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4691:.\console.c   **** 					}
4692:.\console.c   **** 					goto exitpars;
4693:.\console.c   **** 				}	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 331


4694:.\console.c   **** 				//END SET ASTIM TILT ENABLE					
4695:.\console.c   **** 				
4696:.\console.c   **** 				
4697:.\console.c   **** //				// SET DEFAULT machine parameters
4698:.\console.c   **** //				if ((strcmp(actual_cmd.parameter, "default") == 0)
4699:.\console.c   **** //				|| (strcmp(actual_cmd.parameter, "defaults") == 0))
4700:.\console.c   **** //				{	
4701:.\console.c   **** //					if ((strlen(actual_cmd.number1)) == 0)
4702:.\console.c   **** //					{
4703:.\console.c   **** //						printf("Are you sure [Y/N]?");
4704:.\console.c   **** //						
4705:.\console.c   **** //						if (ButtonYNChoice(ECHO_ON) == _YES)
4706:.\console.c   **** //						{
4707:.\console.c   **** //							cys_param.nodeid = 1;					/* Default CAN/RS485 nodeid = 1 				*/
4708:.\console.c   **** //							cys_param.maxmotors = 8;				/* Default max motor number = 8 				*/
4709:.\console.c   **** //							cys_param.maxcurrent = 64; 				/* Default Medium Current 						*/
4710:.\console.c   **** //							cys_param.speed = VSTOP;				/* Default All Motor Stop 						*/
4711:.\console.c   **** //							cys_param.moveTimeoutms = 20000;		/* Default 20secs of moving before FAULT 		*/
4712:.\console.c   **** //							cys_param.currTimeoutms = 500;			/* Default 500msec before Current Fault     	*/
4713:.\console.c   **** //							cys_param.faultcurrent = 600;			/* Default faulcurrent=600*2,014362[mA]=1200[mA]*/	
4714:.\console.c   **** //				
4715:.\console.c   **** //							strcpy(cys_param.unicode, "12345678");	/* Deafult Unicode = "12345678"					*/									
4716:.\console.c   **** //							
4717:.\console.c   **** //							for (idx=0;idx<=7;idx++)
4718:.\console.c   **** //							{
4719:.\console.c   **** //								cys_param.targets1[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 1 Default */
4720:.\console.c   **** //								cys_param.targets2[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 2 Default */
4721:.\console.c   **** //								cys_param.targets3[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 3 Default */
4722:.\console.c   **** //								cys_param.targets4[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 4 Default */
4723:.\console.c   **** //							}
4724:.\console.c   **** //	
4725:.\console.c   **** //							/* Writes MAXCURRENT on DACS */
4726:.\console.c   **** //							VDAC_IREF_12_SetValue(cys_param.maxcurrent);
4727:.\console.c   **** //							VDAC_IREF_34_SetValue(cys_param.maxcurrent);
4728:.\console.c   **** //							VDAC_IREF_56_SetValue(cys_param.maxcurrent);
4729:.\console.c   **** //							VDAC_IREF_78_SetValue(cys_param.maxcurrent);	
4730:.\console.c   **** //	
4731:.\console.c   **** //							/* Writes DEFAULT parameters on EEPROM */
4732:.\console.c   **** //							dummy = WriteAllEEparams();						
4733:.\console.c   **** //							
4734:.\console.c   **** //							printf(STR_REM_DEFL);   /* REM: *All machine parameters setted to factory DEFAULT! */
4735:.\console.c   **** //						}
4736:.\console.c   **** //						else
4737:.\console.c   **** //						{
4738:.\console.c   **** //							printf(STR_REM_NODF);   /* REM: Machine parameters UNCHANGED! */
4739:.\console.c   **** //						}
4740:.\console.c   **** //					}
4741:.\console.c   **** //					else
4742:.\console.c   **** //					{
4743:.\console.c   **** //						printf(STR_ERROR1);		/* ERROR1: Too much parameters! */
4744:.\console.c   **** //					}
4745:.\console.c   **** //					goto exitpars;
4746:.\console.c   **** //				}					
4747:.\console.c   **** //				
4748:.\console.c   **** //				printf(STR_ERROR3);				/* ERROR3: Bad parameters */
4749:.\console.c   **** //				// altri casi di set
4750:.\console.c   **** //
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 332


4751:.\console.c   **** 			}
4752:.\console.c   **** 		goto exitpars;	
 11281              		.loc 1 4752 0
 11282 4aa2 02F002BA 		b	.L704
 11283              	.L409:
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
 11284              		.loc 1 3266 0
 11285 4aa6 3F48     		ldr	r0, .L741
 11286 4aa8 40F20001 		movw	r1, #:lower16:.LC575
 11287 4aac C0F20001 		movt	r1, #:upper16:.LC575
 11288 4ab0 FFF7FEFF 		bl	strcmp
 11289 4ab4 0346     		mov	r3, r0
 11290 4ab6 002B     		cmp	r3, #0
 11291 4ab8 09D0     		beq	.L411
3267:.\console.c   **** 					(strcmp(actual_cmd.parameter, "dir") == 0))
 11292              		.loc 1 3267 0 discriminator 1
 11293 4aba 3A48     		ldr	r0, .L741
 11294 4abc 40F20001 		movw	r1, #:lower16:.LC576
 11295 4ac0 C0F20001 		movt	r1, #:upper16:.LC576
 11296 4ac4 FFF7FEFF 		bl	strcmp
 11297 4ac8 0346     		mov	r3, r0
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
 11298              		.loc 1 3266 0 discriminator 1
 11299 4aca 002B     		cmp	r3, #0
 11300 4acc 30D1     		bne	.L412
 11301              	.L411:
3269:.\console.c   **** 					if (((director = atoi(actual_cmd.number1)) >= STANLEY)
 11302              		.loc 1 3269 0
 11303 4ace 3648     		ldr	r0, .L741+4
 11304 4ad0 FFF7FEFF 		bl	atoi
 11305 4ad4 0346     		mov	r3, r0
 11306 4ad6 87F8B330 		strb	r3, [r7, #179]
3270:.\console.c   **** 					&& (director = atoi(actual_cmd.number1)) <= JJ)
 11307              		.loc 1 3270 0
 11308 4ada 3348     		ldr	r0, .L741+4
 11309 4adc FFF7FEFF 		bl	atoi
 11310 4ae0 0346     		mov	r3, r0
 11311 4ae2 87F8B330 		strb	r3, [r7, #179]
 11312 4ae6 97F8B330 		ldrb	r3, [r7, #179]	@ zero_extendqisi2
 11313 4aea 122B     		cmp	r3, #18
 11314 4aec 18D8     		bhi	.L413
3272:.\console.c   **** 						gobee_param.director = director;
 11315              		.loc 1 3272 0
 11316 4aee 40F20003 		movw	r3, #:lower16:gobee_param
 11317 4af2 C0F20003 		movt	r3, #:upper16:gobee_param
 11318 4af6 97F8B320 		ldrb	r2, [r7, #179]
 11319 4afa 5A70     		strb	r2, [r3, #1]
3275:.\console.c   **** 						dummy = WriteAllEEparams();
 11320              		.loc 1 3275 0
 11321 4afc FFF7FEFF 		bl	WriteAllEEparams
 11322 4b00 0346     		mov	r3, r0
 11323 4b02 87F8D930 		strb	r3, [r7, #217]
3276:.\console.c   **** 						printf(STR_REM_SEDR, (uint16)director);   /* REM: director setted to...*/
 11324              		.loc 1 3276 0
 11325 4b06 97F8B330 		ldrb	r3, [r7, #179]	@ zero_extendqisi2
 11326 4b0a 40F20000 		movw	r0, #:lower16:.LC577
 11327 4b0e C0F20000 		movt	r0, #:upper16:.LC577
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 333


 11328 4b12 1946     		mov	r1, r3
 11329 4b14 FFF7FEFF 		bl	printf
3277:.\console.c   **** 						ShowParamsDirector();
 11330              		.loc 1 3277 0
 11331 4b18 FFF7FEFF 		bl	ShowParamsDirector
3283:.\console.c   **** 					goto exitpars;
 11332              		.loc 1 3283 0
 11333 4b1c 02F0C8B9 		b	.L131
 11334              	.L413:
3281:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11335              		.loc 1 3281 0
 11336 4b20 40F20000 		movw	r0, #:lower16:.LC450
 11337 4b24 C0F20000 		movt	r0, #:upper16:.LC450
 11338 4b28 FFF7FEFF 		bl	printf
3283:.\console.c   **** 					goto exitpars;
 11339              		.loc 1 3283 0
 11340 4b2c 02F0C0B9 		b	.L131
 11341              	.L412:
3289:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "mode") == 0)
 11342              		.loc 1 3289 0
 11343 4b30 1C48     		ldr	r0, .L741
 11344 4b32 40F20001 		movw	r1, #:lower16:.LC578
 11345 4b36 C0F20001 		movt	r1, #:upper16:.LC578
 11346 4b3a FFF7FEFF 		bl	strcmp
 11347 4b3e 0346     		mov	r3, r0
 11348 4b40 002B     		cmp	r3, #0
 11349 4b42 33D1     		bne	.L415
3291:.\console.c   **** 					if (((mode_loc = atoi(actual_cmd.number1)) >= REMOTECONTROL_MODE)
 11350              		.loc 1 3291 0
 11351 4b44 1848     		ldr	r0, .L741+4
 11352 4b46 FFF7FEFF 		bl	atoi
 11353 4b4a 0346     		mov	r3, r0
 11354 4b4c 87F8DA30 		strb	r3, [r7, #218]
3292:.\console.c   **** 					&& (mode_loc = atoi(actual_cmd.number1)) <= DIRECTOR_MODE)
 11355              		.loc 1 3292 0
 11356 4b50 1548     		ldr	r0, .L741+4
 11357 4b52 FFF7FEFF 		bl	atoi
 11358 4b56 0346     		mov	r3, r0
 11359 4b58 87F8DA30 		strb	r3, [r7, #218]
 11360 4b5c 97F8DA30 		ldrb	r3, [r7, #218]	@ zero_extendqisi2
 11361 4b60 012B     		cmp	r3, #1
 11362 4b62 16D8     		bhi	.L416
3294:.\console.c   **** 						gobee_param.mode = mode_loc;
 11363              		.loc 1 3294 0
 11364 4b64 40F20003 		movw	r3, #:lower16:gobee_param
 11365 4b68 C0F20003 		movt	r3, #:upper16:gobee_param
 11366 4b6c 97F8DA20 		ldrb	r2, [r7, #218]
 11367 4b70 1A70     		strb	r2, [r3, #0]
3297:.\console.c   **** 						dummy = WriteAllEEparams();
 11368              		.loc 1 3297 0
 11369 4b72 FFF7FEFF 		bl	WriteAllEEparams
 11370 4b76 0346     		mov	r3, r0
 11371 4b78 87F8D930 		strb	r3, [r7, #217]
3298:.\console.c   **** 						printf(STR_REM_SMOD, (uint16)mode_loc);   /* REM: machine mode setted to...*/					
 11372              		.loc 1 3298 0
 11373 4b7c 97F8DA30 		ldrb	r3, [r7, #218]	@ zero_extendqisi2
 11374 4b80 40F20000 		movw	r0, #:lower16:.LC579
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 334


 11375 4b84 C0F20000 		movt	r0, #:upper16:.LC579
 11376 4b88 1946     		mov	r1, r3
 11377 4b8a FFF7FEFF 		bl	printf
3304:.\console.c   **** 					goto exitpars;
 11378              		.loc 1 3304 0
 11379 4b8e 02F08FB9 		b	.L131
 11380              	.L416:
3302:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11381              		.loc 1 3302 0
 11382 4b92 40F20000 		movw	r0, #:lower16:.LC450
 11383 4b96 C0F20000 		movt	r0, #:upper16:.LC450
 11384 4b9a FFF7FEFF 		bl	printf
3304:.\console.c   **** 					goto exitpars;
 11385              		.loc 1 3304 0
 11386 4b9e 02F087B9 		b	.L131
 11387              	.L742:
 11388 4ba2 00BF     		.align	2
 11389              	.L741:
 11390 4ba4 0F000000 		.word	actual_cmd+15
 11391 4ba8 1E000000 		.word	actual_cmd+30
 11392              	.L415:
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
 11393              		.loc 1 3310 0
 11394 4bac BD48     		ldr	r0, .L743
 11395 4bae 40F20001 		movw	r1, #:lower16:.LC580
 11396 4bb2 C0F20001 		movt	r1, #:upper16:.LC580
 11397 4bb6 FFF7FEFF 		bl	strcmp
 11398 4bba 0346     		mov	r3, r0
 11399 4bbc 002B     		cmp	r3, #0
 11400 4bbe 09D0     		beq	.L418
3311:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polp") == 0))
 11401              		.loc 1 3311 0 discriminator 1
 11402 4bc0 B848     		ldr	r0, .L743
 11403 4bc2 40F20001 		movw	r1, #:lower16:.LC581
 11404 4bc6 C0F20001 		movt	r1, #:upper16:.LC581
 11405 4bca FFF7FEFF 		bl	strcmp
 11406 4bce 0346     		mov	r3, r0
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
 11407              		.loc 1 3310 0 discriminator 1
 11408 4bd0 002B     		cmp	r3, #0
 11409 4bd2 2ED1     		bne	.L419
 11410              	.L418:
3313:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
 11411              		.loc 1 3313 0
 11412 4bd4 B448     		ldr	r0, .L743+4
 11413 4bd6 FFF7FEFF 		bl	atoi
 11414 4bda 0346     		mov	r3, r0
 11415 4bdc 87F8F330 		strb	r3, [r7, #243]
3314:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
 11416              		.loc 1 3314 0
 11417 4be0 B148     		ldr	r0, .L743+4
 11418 4be2 FFF7FEFF 		bl	atoi
 11419 4be6 0346     		mov	r3, r0
 11420 4be8 87F8F330 		strb	r3, [r7, #243]
 11421 4bec 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11422 4bf0 012B     		cmp	r3, #1
 11423 4bf2 16D8     		bhi	.L420
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 335


3316:.\console.c   **** 						pan_axis.param.polarity = polarity;
 11424              		.loc 1 3316 0
 11425 4bf4 40F20003 		movw	r3, #:lower16:pan_axis
 11426 4bf8 C0F20003 		movt	r3, #:upper16:pan_axis
 11427 4bfc 97F8F320 		ldrb	r2, [r7, #243]
 11428 4c00 1A74     		strb	r2, [r3, #16]
3319:.\console.c   **** 						dummy = WriteAllEEparams();
 11429              		.loc 1 3319 0
 11430 4c02 FFF7FEFF 		bl	WriteAllEEparams
 11431 4c06 0346     		mov	r3, r0
 11432 4c08 87F8D930 		strb	r3, [r7, #217]
3320:.\console.c   **** 						printf(STR_REM_SETP, (uint16)polarity);   /* REM: pan axis polarity setted to...*/					
 11433              		.loc 1 3320 0
 11434 4c0c 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11435 4c10 40F20000 		movw	r0, #:lower16:.LC582
 11436 4c14 C0F20000 		movt	r0, #:upper16:.LC582
 11437 4c18 1946     		mov	r1, r3
 11438 4c1a FFF7FEFF 		bl	printf
3326:.\console.c   **** 					goto exitpars;
 11439              		.loc 1 3326 0
 11440 4c1e 02F047B9 		b	.L131
 11441              	.L420:
3324:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11442              		.loc 1 3324 0
 11443 4c22 40F20000 		movw	r0, #:lower16:.LC450
 11444 4c26 C0F20000 		movt	r0, #:upper16:.LC450
 11445 4c2a FFF7FEFF 		bl	printf
3326:.\console.c   **** 					goto exitpars;
 11446              		.loc 1 3326 0
 11447 4c2e 02F03FB9 		b	.L131
 11448              	.L419:
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
 11449              		.loc 1 3332 0
 11450 4c32 9C48     		ldr	r0, .L743
 11451 4c34 40F20001 		movw	r1, #:lower16:.LC583
 11452 4c38 C0F20001 		movt	r1, #:upper16:.LC583
 11453 4c3c FFF7FEFF 		bl	strcmp
 11454 4c40 0346     		mov	r3, r0
 11455 4c42 002B     		cmp	r3, #0
 11456 4c44 09D0     		beq	.L422
3333:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polt") == 0))
 11457              		.loc 1 3333 0 discriminator 1
 11458 4c46 9748     		ldr	r0, .L743
 11459 4c48 40F20001 		movw	r1, #:lower16:.LC584
 11460 4c4c C0F20001 		movt	r1, #:upper16:.LC584
 11461 4c50 FFF7FEFF 		bl	strcmp
 11462 4c54 0346     		mov	r3, r0
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
 11463              		.loc 1 3332 0 discriminator 1
 11464 4c56 002B     		cmp	r3, #0
 11465 4c58 2ED1     		bne	.L423
 11466              	.L422:
3335:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
 11467              		.loc 1 3335 0
 11468 4c5a 9348     		ldr	r0, .L743+4
 11469 4c5c FFF7FEFF 		bl	atoi
 11470 4c60 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 336


 11471 4c62 87F8F330 		strb	r3, [r7, #243]
3336:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
 11472              		.loc 1 3336 0
 11473 4c66 9048     		ldr	r0, .L743+4
 11474 4c68 FFF7FEFF 		bl	atoi
 11475 4c6c 0346     		mov	r3, r0
 11476 4c6e 87F8F330 		strb	r3, [r7, #243]
 11477 4c72 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11478 4c76 012B     		cmp	r3, #1
 11479 4c78 16D8     		bhi	.L424
3338:.\console.c   **** 						tilt_axis.param.polarity = polarity;
 11480              		.loc 1 3338 0
 11481 4c7a 40F20003 		movw	r3, #:lower16:tilt_axis
 11482 4c7e C0F20003 		movt	r3, #:upper16:tilt_axis
 11483 4c82 97F8F320 		ldrb	r2, [r7, #243]
 11484 4c86 1A74     		strb	r2, [r3, #16]
3341:.\console.c   **** 						dummy = WriteAllEEparams();
 11485              		.loc 1 3341 0
 11486 4c88 FFF7FEFF 		bl	WriteAllEEparams
 11487 4c8c 0346     		mov	r3, r0
 11488 4c8e 87F8D930 		strb	r3, [r7, #217]
3342:.\console.c   **** 						printf(STR_REM_SETPT, (uint16)polarity);   /* REM: tilt axis polarity setted to...*/					
 11489              		.loc 1 3342 0
 11490 4c92 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11491 4c96 40F20000 		movw	r0, #:lower16:.LC585
 11492 4c9a C0F20000 		movt	r0, #:upper16:.LC585
 11493 4c9e 1946     		mov	r1, r3
 11494 4ca0 FFF7FEFF 		bl	printf
3348:.\console.c   **** 					goto exitpars;
 11495              		.loc 1 3348 0
 11496 4ca4 02F004B9 		b	.L131
 11497              	.L424:
3346:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11498              		.loc 1 3346 0
 11499 4ca8 40F20000 		movw	r0, #:lower16:.LC450
 11500 4cac C0F20000 		movt	r0, #:upper16:.LC450
 11501 4cb0 FFF7FEFF 		bl	printf
3348:.\console.c   **** 					goto exitpars;
 11502              		.loc 1 3348 0
 11503 4cb4 02F0FCB8 		b	.L131
 11504              	.L423:
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
 11505              		.loc 1 3354 0
 11506 4cb8 7A48     		ldr	r0, .L743
 11507 4cba 40F20001 		movw	r1, #:lower16:.LC586
 11508 4cbe C0F20001 		movt	r1, #:upper16:.LC586
 11509 4cc2 FFF7FEFF 		bl	strcmp
 11510 4cc6 0346     		mov	r3, r0
 11511 4cc8 002B     		cmp	r3, #0
 11512 4cca 09D0     		beq	.L426
3355:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lcp") == 0))
 11513              		.loc 1 3355 0 discriminator 1
 11514 4ccc 7548     		ldr	r0, .L743
 11515 4cce 40F20001 		movw	r1, #:lower16:.LC587
 11516 4cd2 C0F20001 		movt	r1, #:upper16:.LC587
 11517 4cd6 FFF7FEFF 		bl	strcmp
 11518 4cda 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 337


3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
 11519              		.loc 1 3354 0 discriminator 1
 11520 4cdc 002B     		cmp	r3, #0
 11521 4cde 2FD1     		bne	.L427
 11522              	.L426:
3357:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
 11523              		.loc 1 3357 0
 11524 4ce0 7148     		ldr	r0, .L743+4
 11525 4ce2 FFF7FEFF 		bl	atoi
 11526 4ce6 0346     		mov	r3, r0
 11527 4ce8 87F8B430 		strb	r3, [r7, #180]
3358:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
 11528              		.loc 1 3358 0
 11529 4cec 6E48     		ldr	r0, .L743+4
 11530 4cee FFF7FEFF 		bl	atoi
 11531 4cf2 0346     		mov	r3, r0
 11532 4cf4 87F8B430 		strb	r3, [r7, #180]
 11533 4cf8 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 11534 4cfc 012B     		cmp	r3, #1
 11535 4cfe 17D8     		bhi	.L428
3360:.\console.c   **** 						pan_axis.param.limit_control = limit_control;
 11536              		.loc 1 3360 0
 11537 4d00 40F20003 		movw	r3, #:lower16:pan_axis
 11538 4d04 C0F20003 		movt	r3, #:upper16:pan_axis
 11539 4d08 97F8B420 		ldrb	r2, [r7, #180]
 11540 4d0c 83F82D20 		strb	r2, [r3, #45]
3363:.\console.c   **** 						dummy = WriteAllEEparams();
 11541              		.loc 1 3363 0
 11542 4d10 FFF7FEFF 		bl	WriteAllEEparams
 11543 4d14 0346     		mov	r3, r0
 11544 4d16 87F8D930 		strb	r3, [r7, #217]
3364:.\console.c   **** 						printf(STR_REM_STLP, (uint16)limit_control);   /* REM: pan axis limit control setted to...*/	
 11545              		.loc 1 3364 0
 11546 4d1a 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 11547 4d1e 40F20000 		movw	r0, #:lower16:.LC588
 11548 4d22 C0F20000 		movt	r0, #:upper16:.LC588
 11549 4d26 1946     		mov	r1, r3
 11550 4d28 FFF7FEFF 		bl	printf
3370:.\console.c   **** 					goto exitpars;
 11551              		.loc 1 3370 0
 11552 4d2c 02F0C0B8 		b	.L131
 11553              	.L428:
3368:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11554              		.loc 1 3368 0
 11555 4d30 40F20000 		movw	r0, #:lower16:.LC450
 11556 4d34 C0F20000 		movt	r0, #:upper16:.LC450
 11557 4d38 FFF7FEFF 		bl	printf
3370:.\console.c   **** 					goto exitpars;
 11558              		.loc 1 3370 0
 11559 4d3c 02F0B8B8 		b	.L131
 11560              	.L427:
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
 11561              		.loc 1 3376 0
 11562 4d40 5848     		ldr	r0, .L743
 11563 4d42 40F20001 		movw	r1, #:lower16:.LC589
 11564 4d46 C0F20001 		movt	r1, #:upper16:.LC589
 11565 4d4a FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 338


 11566 4d4e 0346     		mov	r3, r0
 11567 4d50 002B     		cmp	r3, #0
 11568 4d52 09D0     		beq	.L430
3377:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invp") == 0))
 11569              		.loc 1 3377 0 discriminator 1
 11570 4d54 5348     		ldr	r0, .L743
 11571 4d56 40F20001 		movw	r1, #:lower16:.LC590
 11572 4d5a C0F20001 		movt	r1, #:upper16:.LC590
 11573 4d5e FFF7FEFF 		bl	strcmp
 11574 4d62 0346     		mov	r3, r0
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
 11575              		.loc 1 3376 0 discriminator 1
 11576 4d64 002B     		cmp	r3, #0
 11577 4d66 2FD1     		bne	.L431
 11578              	.L430:
3379:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
 11579              		.loc 1 3379 0
 11580 4d68 4F48     		ldr	r0, .L743+4
 11581 4d6a FFF7FEFF 		bl	atoi
 11582 4d6e 0346     		mov	r3, r0
 11583 4d70 87F8B530 		strb	r3, [r7, #181]
3380:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
 11584              		.loc 1 3380 0
 11585 4d74 4C48     		ldr	r0, .L743+4
 11586 4d76 FFF7FEFF 		bl	atoi
 11587 4d7a 0346     		mov	r3, r0
 11588 4d7c 87F8B530 		strb	r3, [r7, #181]
 11589 4d80 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 11590 4d84 012B     		cmp	r3, #1
 11591 4d86 17D8     		bhi	.L432
3382:.\console.c   **** 						pan_absolute_sensor.param.raw_invertion = raw_invertion;
 11592              		.loc 1 3382 0
 11593 4d88 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11594 4d8c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11595 4d90 97F8B520 		ldrb	r2, [r7, #181]
 11596 4d94 83F82C20 		strb	r2, [r3, #44]
3385:.\console.c   **** 						dummy = WriteAllEEparams();
 11597              		.loc 1 3385 0
 11598 4d98 FFF7FEFF 		bl	WriteAllEEparams
 11599 4d9c 0346     		mov	r3, r0
 11600 4d9e 87F8D930 		strb	r3, [r7, #217]
3386:.\console.c   **** 						printf(STR_REM_SIVP, (uint16)raw_invertion);   /* REM: pan axis absoluter sensor invertion se
 11601              		.loc 1 3386 0
 11602 4da2 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 11603 4da6 40F20000 		movw	r0, #:lower16:.LC591
 11604 4daa C0F20000 		movt	r0, #:upper16:.LC591
 11605 4dae 1946     		mov	r1, r3
 11606 4db0 FFF7FEFF 		bl	printf
3392:.\console.c   **** 					goto exitpars;
 11607              		.loc 1 3392 0
 11608 4db4 02F07CB8 		b	.L131
 11609              	.L432:
3390:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11610              		.loc 1 3390 0
 11611 4db8 40F20000 		movw	r0, #:lower16:.LC450
 11612 4dbc C0F20000 		movt	r0, #:upper16:.LC450
 11613 4dc0 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 339


3392:.\console.c   **** 					goto exitpars;
 11614              		.loc 1 3392 0
 11615 4dc4 02F074B8 		b	.L131
 11616              	.L431:
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
 11617              		.loc 1 3398 0
 11618 4dc8 3648     		ldr	r0, .L743
 11619 4dca 40F20001 		movw	r1, #:lower16:.LC592
 11620 4dce C0F20001 		movt	r1, #:upper16:.LC592
 11621 4dd2 FFF7FEFF 		bl	strcmp
 11622 4dd6 0346     		mov	r3, r0
 11623 4dd8 002B     		cmp	r3, #0
 11624 4dda 09D0     		beq	.L434
3399:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zp") == 0))
 11625              		.loc 1 3399 0 discriminator 1
 11626 4ddc 3148     		ldr	r0, .L743
 11627 4dde 40F20001 		movw	r1, #:lower16:.LC593
 11628 4de2 C0F20001 		movt	r1, #:upper16:.LC593
 11629 4de6 FFF7FEFF 		bl	strcmp
 11630 4dea 0346     		mov	r3, r0
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
 11631              		.loc 1 3398 0 discriminator 1
 11632 4dec 002B     		cmp	r3, #0
 11633 4dee 5DD1     		bne	.L435
 11634              	.L434:
3401:.\console.c   **** 					printf("* Warning! Put PAN Axis to zero (HOME) position and press y!");
 11635              		.loc 1 3401 0
 11636 4df0 40F20000 		movw	r0, #:lower16:.LC594
 11637 4df4 C0F20000 		movt	r0, #:upper16:.LC594
 11638 4df8 FFF7FEFF 		bl	printf
3403:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 11639              		.loc 1 3403 0
 11640 4dfc 4FF00100 		mov	r0, #1
 11641 4e00 FFF7FEFF 		bl	ButtonYNChoice
 11642 4e04 0346     		mov	r3, r0
 11643 4e06 012B     		cmp	r3, #1
 11644 4e08 3FD1     		bne	.L436
3405:.\console.c   **** 						pan_absolute_sensor.param.raw_home = 0; 		/* reset absolute pan sensor zero raw 			*/
 11645              		.loc 1 3405 0
 11646 4e0a 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11647 4e0e C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11648 4e12 4FF00002 		mov	r2, #0
 11649 4e16 DA85     		strh	r2, [r3, #46]	@ movhi
3408:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 11650              		.loc 1 3408 0
 11651 4e18 40F20000 		movw	r0, #:lower16:.LC595
 11652 4e1c C0F20000 		movt	r0, #:upper16:.LC595
 11653 4e20 FFF7FEFF 		bl	puts
3409:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 11654              		.loc 1 3409 0
 11655 4e24 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11656 4e28 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11657 4e2c FFF7FEFF 		bl	statistics_start
3412:.\console.c   **** 						CyDelay(1000);
 11658              		.loc 1 3412 0
 11659 4e30 4FF47A70 		mov	r0, #1000
 11660 4e34 FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 340


3415:.\console.c   **** 						printf("* Statistics stop!\r\n");						
 11661              		.loc 1 3415 0
 11662 4e38 40F20000 		movw	r0, #:lower16:.LC596
 11663 4e3c C0F20000 		movt	r0, #:upper16:.LC596
 11664 4e40 FFF7FEFF 		bl	puts
3416:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 11665              		.loc 1 3416 0
 11666 4e44 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11667 4e48 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11668 4e4c FFF7FEFF 		bl	statistics_stop
3420:.\console.c   **** 						pan_absolute_sensor.param.raw_home = (int16)pan_absolute_sensor_stat.mean;
 11669              		.loc 1 3420 0
 11670 4e50 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 11671 4e54 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 11672 4e58 5B68     		ldr	r3, [r3, #4]	@ float
 11673 4e5a 1846     		mov	r0, r3
 11674 4e5c FFF7FEFF 		bl	__aeabi_f2iz
 11675 4e60 0346     		mov	r3, r0
 11676 4e62 9AB2     		uxth	r2, r3
 11677 4e64 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11678 4e68 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11679 4e6c DA85     		strh	r2, [r3, #46]	@ movhi
3421:.\console.c   **** 						printf(STR_REM_PASZ, (int16)pan_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Zer
 11680              		.loc 1 3421 0
 11681 4e6e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11682 4e72 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11683 4e76 DB8D     		ldrh	r3, [r3, #46]
 11684 4e78 1BB2     		sxth	r3, r3
 11685 4e7a 40F20000 		movw	r0, #:lower16:.LC597
 11686 4e7e C0F20000 		movt	r0, #:upper16:.LC597
 11687 4e82 1946     		mov	r1, r3
 11688 4e84 FFF7FEFF 		bl	printf
 11689 4e88 05E0     		b	.L437
 11690              	.L436:
3425:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 11691              		.loc 1 3425 0
 11692 4e8a 40F20000 		movw	r0, #:lower16:.LC598
 11693 4e8e C0F20000 		movt	r0, #:upper16:.LC598
 11694 4e92 FFF7FEFF 		bl	puts
 11695              	.L437:
3429:.\console.c   **** 					dummy = WriteAllEEparams();
 11696              		.loc 1 3429 0
 11697 4e96 FFF7FEFF 		bl	WriteAllEEparams
 11698 4e9a 0346     		mov	r3, r0
 11699 4e9c 87F8D930 		strb	r3, [r7, #217]
3431:.\console.c   **** 					goto exitpars;
 11700              		.loc 1 3431 0
 11701 4ea0 02F006B8 		b	.L131
 11702              	.L744:
 11703              		.align	2
 11704              	.L743:
 11705 4ea4 0F000000 		.word	actual_cmd+15
 11706 4ea8 1E000000 		.word	actual_cmd+30
 11707              	.L435:
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
 11708              		.loc 1 3437 0
 11709 4eac C148     		ldr	r0, .L745
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 341


 11710 4eae 40F20001 		movw	r1, #:lower16:.LC599
 11711 4eb2 C0F20001 		movt	r1, #:upper16:.LC599
 11712 4eb6 FFF7FEFF 		bl	strcmp
 11713 4eba 0346     		mov	r3, r0
 11714 4ebc 002B     		cmp	r3, #0
 11715 4ebe 09D0     		beq	.L438
3438:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lminp") == 0))
 11716              		.loc 1 3438 0 discriminator 1
 11717 4ec0 BC48     		ldr	r0, .L745
 11718 4ec2 40F20001 		movw	r1, #:lower16:.LC600
 11719 4ec6 C0F20001 		movt	r1, #:upper16:.LC600
 11720 4eca FFF7FEFF 		bl	strcmp
 11721 4ece 0346     		mov	r3, r0
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
 11722              		.loc 1 3437 0 discriminator 1
 11723 4ed0 002B     		cmp	r3, #0
 11724 4ed2 59D1     		bne	.L439
 11725              	.L438:
3440:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MIN position and press y!");
 11726              		.loc 1 3440 0
 11727 4ed4 40F20000 		movw	r0, #:lower16:.LC601
 11728 4ed8 C0F20000 		movt	r0, #:upper16:.LC601
 11729 4edc FFF7FEFF 		bl	printf
3442:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 11730              		.loc 1 3442 0
 11731 4ee0 4FF00100 		mov	r0, #1
 11732 4ee4 FFF7FEFF 		bl	ButtonYNChoice
 11733 4ee8 0346     		mov	r3, r0
 11734 4eea 012B     		cmp	r3, #1
 11735 4eec 3FD1     		bne	.L440
3444:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute pan sensor limit min raw 	*/
 11736              		.loc 1 3444 0
 11737 4eee 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11738 4ef2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11739 4ef6 4FF00002 		mov	r2, #0
 11740 4efa 5A86     		strh	r2, [r3, #50]	@ movhi
3447:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 11741              		.loc 1 3447 0
 11742 4efc 40F20000 		movw	r0, #:lower16:.LC595
 11743 4f00 C0F20000 		movt	r0, #:upper16:.LC595
 11744 4f04 FFF7FEFF 		bl	puts
3448:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 11745              		.loc 1 3448 0
 11746 4f08 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11747 4f0c C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11748 4f10 FFF7FEFF 		bl	statistics_start
3451:.\console.c   **** 						CyDelay(1000);
 11749              		.loc 1 3451 0
 11750 4f14 4FF47A70 		mov	r0, #1000
 11751 4f18 FFF7FEFF 		bl	CyDelay
3454:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 11752              		.loc 1 3454 0
 11753 4f1c 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11754 4f20 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11755 4f24 FFF7FEFF 		bl	statistics_stop
3455:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 11756              		.loc 1 3455 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 342


 11757 4f28 40F20000 		movw	r0, #:lower16:.LC596
 11758 4f2c C0F20000 		movt	r0, #:upper16:.LC596
 11759 4f30 FFF7FEFF 		bl	puts
3458:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = (int16)pan_absolute_sensor_stat.mean;														
 11760              		.loc 1 3458 0
 11761 4f34 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 11762 4f38 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 11763 4f3c 5B68     		ldr	r3, [r3, #4]	@ float
 11764 4f3e 1846     		mov	r0, r3
 11765 4f40 FFF7FEFF 		bl	__aeabi_f2iz
 11766 4f44 0346     		mov	r3, r0
 11767 4f46 9AB2     		uxth	r2, r3
 11768 4f48 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11769 4f4c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11770 4f50 5A86     		strh	r2, [r3, #50]	@ movhi
3459:.\console.c   **** 						printf(STR_REM_PMIN, (int16)pan_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Senso
 11771              		.loc 1 3459 0
 11772 4f52 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11773 4f56 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11774 4f5a 5B8E     		ldrh	r3, [r3, #50]
 11775 4f5c 1BB2     		sxth	r3, r3
 11776 4f5e 40F20000 		movw	r0, #:lower16:.LC602
 11777 4f62 C0F20000 		movt	r0, #:upper16:.LC602
 11778 4f66 1946     		mov	r1, r3
 11779 4f68 FFF7FEFF 		bl	printf
 11780 4f6c 05E0     		b	.L441
 11781              	.L440:
3463:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 11782              		.loc 1 3463 0
 11783 4f6e 40F20000 		movw	r0, #:lower16:.LC598
 11784 4f72 C0F20000 		movt	r0, #:upper16:.LC598
 11785 4f76 FFF7FEFF 		bl	puts
 11786              	.L441:
3467:.\console.c   **** 					dummy = WriteAllEEparams();
 11787              		.loc 1 3467 0
 11788 4f7a FFF7FEFF 		bl	WriteAllEEparams
 11789 4f7e 0346     		mov	r3, r0
 11790 4f80 87F8D930 		strb	r3, [r7, #217]
3469:.\console.c   **** 					goto exitpars;
 11791              		.loc 1 3469 0
 11792 4f84 01F094BF 		b	.L131
 11793              	.L439:
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
 11794              		.loc 1 3475 0
 11795 4f88 8A48     		ldr	r0, .L745
 11796 4f8a 40F20001 		movw	r1, #:lower16:.LC603
 11797 4f8e C0F20001 		movt	r1, #:upper16:.LC603
 11798 4f92 FFF7FEFF 		bl	strcmp
 11799 4f96 0346     		mov	r3, r0
 11800 4f98 002B     		cmp	r3, #0
 11801 4f9a 09D0     		beq	.L442
3476:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxp") == 0))
 11802              		.loc 1 3476 0 discriminator 1
 11803 4f9c 8548     		ldr	r0, .L745
 11804 4f9e 40F20001 		movw	r1, #:lower16:.LC604
 11805 4fa2 C0F20001 		movt	r1, #:upper16:.LC604
 11806 4fa6 FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 343


 11807 4faa 0346     		mov	r3, r0
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
 11808              		.loc 1 3475 0 discriminator 1
 11809 4fac 002B     		cmp	r3, #0
 11810 4fae 59D1     		bne	.L443
 11811              	.L442:
3478:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MAX position and press y!");
 11812              		.loc 1 3478 0
 11813 4fb0 40F20000 		movw	r0, #:lower16:.LC605
 11814 4fb4 C0F20000 		movt	r0, #:upper16:.LC605
 11815 4fb8 FFF7FEFF 		bl	printf
3480:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 11816              		.loc 1 3480 0
 11817 4fbc 4FF00100 		mov	r0, #1
 11818 4fc0 FFF7FEFF 		bl	ButtonYNChoice
 11819 4fc4 0346     		mov	r3, r0
 11820 4fc6 012B     		cmp	r3, #1
 11821 4fc8 3FD1     		bne	.L444
3482:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute pan sensor limit max raw 	*/
 11822              		.loc 1 3482 0
 11823 4fca 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11824 4fce C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11825 4fd2 4FF00002 		mov	r2, #0
 11826 4fd6 1A86     		strh	r2, [r3, #48]	@ movhi
3485:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 11827              		.loc 1 3485 0
 11828 4fd8 40F20000 		movw	r0, #:lower16:.LC595
 11829 4fdc C0F20000 		movt	r0, #:upper16:.LC595
 11830 4fe0 FFF7FEFF 		bl	puts
3486:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 11831              		.loc 1 3486 0
 11832 4fe4 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11833 4fe8 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11834 4fec FFF7FEFF 		bl	statistics_start
3489:.\console.c   **** 						CyDelay(1000);
 11835              		.loc 1 3489 0
 11836 4ff0 4FF47A70 		mov	r0, #1000
 11837 4ff4 FFF7FEFF 		bl	CyDelay
3492:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 11838              		.loc 1 3492 0
 11839 4ff8 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11840 4ffc C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11841 5000 FFF7FEFF 		bl	statistics_stop
3493:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 11842              		.loc 1 3493 0
 11843 5004 40F20000 		movw	r0, #:lower16:.LC596
 11844 5008 C0F20000 		movt	r0, #:upper16:.LC596
 11845 500c FFF7FEFF 		bl	puts
3496:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = (int16)pan_absolute_sensor_stat.mean;
 11846              		.loc 1 3496 0
 11847 5010 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 11848 5014 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 11849 5018 5B68     		ldr	r3, [r3, #4]	@ float
 11850 501a 1846     		mov	r0, r3
 11851 501c FFF7FEFF 		bl	__aeabi_f2iz
 11852 5020 0346     		mov	r3, r0
 11853 5022 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 344


 11854 5024 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11855 5028 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11856 502c 1A86     		strh	r2, [r3, #48]	@ movhi
3497:.\console.c   **** 						printf(STR_REM_PMAX, (int16)pan_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Senso
 11857              		.loc 1 3497 0
 11858 502e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11859 5032 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11860 5036 1B8E     		ldrh	r3, [r3, #48]
 11861 5038 1BB2     		sxth	r3, r3
 11862 503a 40F20000 		movw	r0, #:lower16:.LC606
 11863 503e C0F20000 		movt	r0, #:upper16:.LC606
 11864 5042 1946     		mov	r1, r3
 11865 5044 FFF7FEFF 		bl	printf
 11866 5048 05E0     		b	.L445
 11867              	.L444:
3501:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 11868              		.loc 1 3501 0
 11869 504a 40F20000 		movw	r0, #:lower16:.LC598
 11870 504e C0F20000 		movt	r0, #:upper16:.LC598
 11871 5052 FFF7FEFF 		bl	puts
 11872              	.L445:
3505:.\console.c   **** 					dummy = WriteAllEEparams();
 11873              		.loc 1 3505 0
 11874 5056 FFF7FEFF 		bl	WriteAllEEparams
 11875 505a 0346     		mov	r3, r0
 11876 505c 87F8D930 		strb	r3, [r7, #217]
3507:.\console.c   **** 					goto exitpars;
 11877              		.loc 1 3507 0
 11878 5060 01F026BF 		b	.L131
 11879              	.L443:
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
 11880              		.loc 1 3513 0
 11881 5064 5348     		ldr	r0, .L745
 11882 5066 40F20001 		movw	r1, #:lower16:.LC607
 11883 506a C0F20001 		movt	r1, #:upper16:.LC607
 11884 506e FFF7FEFF 		bl	strcmp
 11885 5072 0346     		mov	r3, r0
 11886 5074 002B     		cmp	r3, #0
 11887 5076 09D0     		beq	.L446
3514:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystp") == 0))
 11888              		.loc 1 3514 0 discriminator 1
 11889 5078 4E48     		ldr	r0, .L745
 11890 507a 40F20001 		movw	r1, #:lower16:.LC608
 11891 507e C0F20001 		movt	r1, #:upper16:.LC608
 11892 5082 FFF7FEFF 		bl	strcmp
 11893 5086 0346     		mov	r3, r0
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
 11894              		.loc 1 3513 0 discriminator 1
 11895 5088 002B     		cmp	r3, #0
 11896 508a 2ED1     		bne	.L447
 11897              	.L446:
3516:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
 11898              		.loc 1 3516 0
 11899 508c 4A48     		ldr	r0, .L745+4
 11900 508e FFF7FEFF 		bl	atoi
 11901 5092 0346     		mov	r3, r0
 11902 5094 A7F8B630 		strh	r3, [r7, #182]	@ movhi
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 345


3517:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
 11903              		.loc 1 3517 0
 11904 5098 4748     		ldr	r0, .L745+4
 11905 509a FFF7FEFF 		bl	atoi
 11906 509e 0346     		mov	r3, r0
 11907 50a0 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 11908 50a4 B7F8B630 		ldrh	r3, [r7, #182]
 11909 50a8 642B     		cmp	r3, #100
 11910 50aa 16D8     		bhi	.L448
3519:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
 11911              		.loc 1 3519 0
 11912 50ac B7F8B620 		ldrh	r2, [r7, #182]
 11913 50b0 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11914 50b4 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11915 50b8 9A86     		strh	r2, [r3, #52]	@ movhi
3522:.\console.c   **** 						dummy = WriteAllEEparams();
 11916              		.loc 1 3522 0
 11917 50ba FFF7FEFF 		bl	WriteAllEEparams
 11918 50be 0346     		mov	r3, r0
 11919 50c0 87F8D930 		strb	r3, [r7, #217]
3523:.\console.c   **** 						printf(STR_REM_PLHY, (uint16)raw_limit_hyst);   /* REM: pan axis absolute sensor limit hyster
 11920              		.loc 1 3523 0
 11921 50c4 B7F8B630 		ldrh	r3, [r7, #182]
 11922 50c8 40F20000 		movw	r0, #:lower16:.LC609
 11923 50cc C0F20000 		movt	r0, #:upper16:.LC609
 11924 50d0 1946     		mov	r1, r3
 11925 50d2 FFF7FEFF 		bl	printf
3529:.\console.c   **** 					goto exitpars;
 11926              		.loc 1 3529 0
 11927 50d6 01F0EBBE 		b	.L131
 11928              	.L448:
3527:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11929              		.loc 1 3527 0
 11930 50da 40F20000 		movw	r0, #:lower16:.LC450
 11931 50de C0F20000 		movt	r0, #:upper16:.LC450
 11932 50e2 FFF7FEFF 		bl	printf
3529:.\console.c   **** 					goto exitpars;
 11933              		.loc 1 3529 0
 11934 50e6 01F0E3BE 		b	.L131
 11935              	.L447:
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
 11936              		.loc 1 3535 0
 11937 50ea 3248     		ldr	r0, .L745
 11938 50ec 40F20001 		movw	r1, #:lower16:.LC458
 11939 50f0 C0F20001 		movt	r1, #:upper16:.LC458
 11940 50f4 FFF7FEFF 		bl	strcmp
 11941 50f8 0346     		mov	r3, r0
 11942 50fa 002B     		cmp	r3, #0
 11943 50fc 09D0     		beq	.L450
3536:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiop") == 0))
 11944              		.loc 1 3536 0 discriminator 1
 11945 50fe 2D48     		ldr	r0, .L745
 11946 5100 40F20001 		movw	r1, #:lower16:.LC459
 11947 5104 C0F20001 		movt	r1, #:upper16:.LC459
 11948 5108 FFF7FEFF 		bl	strcmp
 11949 510c 0346     		mov	r3, r0
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 346


 11950              		.loc 1 3535 0 discriminator 1
 11951 510e 002B     		cmp	r3, #0
 11952 5110 54D1     		bne	.L451
 11953              	.L450:
3538:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
 11954              		.loc 1 3538 0
 11955 5112 2948     		ldr	r0, .L745+4
 11956 5114 FFF7FEFF 		bl	atof
 11957 5118 0246     		mov	r2, r0
 11958 511a 0B46     		mov	r3, r1
 11959 511c 1046     		mov	r0, r2
 11960 511e 1946     		mov	r1, r3
 11961 5120 FFF7FEFF 		bl	__aeabi_d2f
 11962 5124 0346     		mov	r3, r0
 11963 5126 C7F8B830 		str	r3, [r7, #184]	@ float
 11964 512a D7F8B800 		ldr	r0, [r7, #184]	@ float
 11965 512e 4FF48041 		mov	r1, #16384
 11966 5132 CCF21C61 		movt	r1, 50716
 11967 5136 FFF7FEFF 		bl	__aeabi_fcmpge
 11968 513a 0346     		mov	r3, r0
 11969 513c 002B     		cmp	r3, #0
 11970 513e 30D0     		beq	.L452
 11971              	.L647:
3539:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
 11972              		.loc 1 3539 0
 11973 5140 1D48     		ldr	r0, .L745+4
 11974 5142 FFF7FEFF 		bl	atof
 11975 5146 0246     		mov	r2, r0
 11976 5148 0B46     		mov	r3, r1
 11977 514a 1046     		mov	r0, r2
 11978 514c 1946     		mov	r1, r3
 11979 514e FFF7FEFF 		bl	__aeabi_d2f
 11980 5152 0346     		mov	r3, r0
 11981 5154 C7F8B830 		str	r3, [r7, #184]	@ float
 11982 5158 D7F8B800 		ldr	r0, [r7, #184]	@ float
 11983 515c 4FF48041 		mov	r1, #16384
 11984 5160 C4F21C61 		movt	r1, 17948
 11985 5164 FFF7FEFF 		bl	__aeabi_fcmple
 11986 5168 0346     		mov	r3, r0
 11987 516a 002B     		cmp	r3, #0
 11988 516c 19D0     		beq	.L452
 11989              	.L648:
3541:.\console.c   **** 						pan_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
 11990              		.loc 1 3541 0
 11991 516e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11992 5172 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11993 5176 D7F8B820 		ldr	r2, [r7, #184]	@ float
 11994 517a 9A63     		str	r2, [r3, #56]	@ float
3544:.\console.c   **** 						dummy = WriteAllEEparams();
 11995              		.loc 1 3544 0
 11996 517c FFF7FEFF 		bl	WriteAllEEparams
 11997 5180 0346     		mov	r3, r0
 11998 5182 87F8D930 		strb	r3, [r7, #217]
3545:.\console.c   **** 						printf(STR_REM_PEAR, (float)step_abs_ratio);   /* REM: pan encoder over absolute sensor ratio
 11999              		.loc 1 3545 0
 12000 5186 D7F8B800 		ldr	r0, [r7, #184]	@ float
 12001 518a FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 347


 12002 518e 0246     		mov	r2, r0
 12003 5190 0B46     		mov	r3, r1
 12004 5192 40F20000 		movw	r0, #:lower16:.LC610
 12005 5196 C0F20000 		movt	r0, #:upper16:.LC610
 12006 519a FFF7FEFF 		bl	printf
3551:.\console.c   **** 					goto exitpars;
 12007              		.loc 1 3551 0
 12008 519e 01F087BE 		b	.L131
 12009              	.L452:
3549:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12010              		.loc 1 3549 0
 12011 51a2 40F20000 		movw	r0, #:lower16:.LC450
 12012 51a6 C0F20000 		movt	r0, #:upper16:.LC450
 12013 51aa FFF7FEFF 		bl	printf
3551:.\console.c   **** 					goto exitpars;
 12014              		.loc 1 3551 0
 12015 51ae 01F07FBE 		b	.L131
 12016              	.L746:
 12017 51b2 00BF     		.align	2
 12018              	.L745:
 12019 51b4 0F000000 		.word	actual_cmd+15
 12020 51b8 1E000000 		.word	actual_cmd+30
 12021              	.L451:
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
 12022              		.loc 1 3557 0
 12023 51bc B148     		ldr	r0, .L747
 12024 51be 40F20001 		movw	r1, #:lower16:.LC611
 12025 51c2 C0F20001 		movt	r1, #:upper16:.LC611
 12026 51c6 FFF7FEFF 		bl	strcmp
 12027 51ca 0346     		mov	r3, r0
 12028 51cc 002B     		cmp	r3, #0
 12029 51ce 09D0     		beq	.L456
3558:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lct") == 0))
 12030              		.loc 1 3558 0 discriminator 1
 12031 51d0 AC48     		ldr	r0, .L747
 12032 51d2 40F20001 		movw	r1, #:lower16:.LC612
 12033 51d6 C0F20001 		movt	r1, #:upper16:.LC612
 12034 51da FFF7FEFF 		bl	strcmp
 12035 51de 0346     		mov	r3, r0
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
 12036              		.loc 1 3557 0 discriminator 1
 12037 51e0 002B     		cmp	r3, #0
 12038 51e2 2FD1     		bne	.L457
 12039              	.L456:
3560:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
 12040              		.loc 1 3560 0
 12041 51e4 A848     		ldr	r0, .L747+4
 12042 51e6 FFF7FEFF 		bl	atoi
 12043 51ea 0346     		mov	r3, r0
 12044 51ec 87F8B430 		strb	r3, [r7, #180]
3561:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
 12045              		.loc 1 3561 0
 12046 51f0 A548     		ldr	r0, .L747+4
 12047 51f2 FFF7FEFF 		bl	atoi
 12048 51f6 0346     		mov	r3, r0
 12049 51f8 87F8B430 		strb	r3, [r7, #180]
 12050 51fc 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 348


 12051 5200 012B     		cmp	r3, #1
 12052 5202 17D8     		bhi	.L458
3563:.\console.c   **** 						tilt_axis.param.limit_control = limit_control;
 12053              		.loc 1 3563 0
 12054 5204 40F20003 		movw	r3, #:lower16:tilt_axis
 12055 5208 C0F20003 		movt	r3, #:upper16:tilt_axis
 12056 520c 97F8B420 		ldrb	r2, [r7, #180]
 12057 5210 83F82D20 		strb	r2, [r3, #45]
3566:.\console.c   **** 						dummy = WriteAllEEparams();
 12058              		.loc 1 3566 0
 12059 5214 FFF7FEFF 		bl	WriteAllEEparams
 12060 5218 0346     		mov	r3, r0
 12061 521a 87F8D930 		strb	r3, [r7, #217]
3567:.\console.c   **** 						printf(STR_REM_STLT, (uint16)limit_control);   /* REM: tilt axis limit control setted to...*/
 12062              		.loc 1 3567 0
 12063 521e 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 12064 5222 40F20000 		movw	r0, #:lower16:.LC613
 12065 5226 C0F20000 		movt	r0, #:upper16:.LC613
 12066 522a 1946     		mov	r1, r3
 12067 522c FFF7FEFF 		bl	printf
3573:.\console.c   **** 					goto exitpars;
 12068              		.loc 1 3573 0
 12069 5230 01F03EBE 		b	.L131
 12070              	.L458:
3571:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12071              		.loc 1 3571 0
 12072 5234 40F20000 		movw	r0, #:lower16:.LC450
 12073 5238 C0F20000 		movt	r0, #:upper16:.LC450
 12074 523c FFF7FEFF 		bl	printf
3573:.\console.c   **** 					goto exitpars;
 12075              		.loc 1 3573 0
 12076 5240 01F036BE 		b	.L131
 12077              	.L457:
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
 12078              		.loc 1 3579 0
 12079 5244 8F48     		ldr	r0, .L747
 12080 5246 40F20001 		movw	r1, #:lower16:.LC614
 12081 524a C0F20001 		movt	r1, #:upper16:.LC614
 12082 524e FFF7FEFF 		bl	strcmp
 12083 5252 0346     		mov	r3, r0
 12084 5254 002B     		cmp	r3, #0
 12085 5256 09D0     		beq	.L460
3580:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invt") == 0))
 12086              		.loc 1 3580 0 discriminator 1
 12087 5258 8A48     		ldr	r0, .L747
 12088 525a 40F20001 		movw	r1, #:lower16:.LC615
 12089 525e C0F20001 		movt	r1, #:upper16:.LC615
 12090 5262 FFF7FEFF 		bl	strcmp
 12091 5266 0346     		mov	r3, r0
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
 12092              		.loc 1 3579 0 discriminator 1
 12093 5268 002B     		cmp	r3, #0
 12094 526a 2FD1     		bne	.L461
 12095              	.L460:
3582:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
 12096              		.loc 1 3582 0
 12097 526c 8648     		ldr	r0, .L747+4
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 349


 12098 526e FFF7FEFF 		bl	atoi
 12099 5272 0346     		mov	r3, r0
 12100 5274 87F8B530 		strb	r3, [r7, #181]
3583:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
 12101              		.loc 1 3583 0
 12102 5278 8348     		ldr	r0, .L747+4
 12103 527a FFF7FEFF 		bl	atoi
 12104 527e 0346     		mov	r3, r0
 12105 5280 87F8B530 		strb	r3, [r7, #181]
 12106 5284 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 12107 5288 012B     		cmp	r3, #1
 12108 528a 17D8     		bhi	.L462
3585:.\console.c   **** 						tilt_absolute_sensor.param.raw_invertion = raw_invertion;
 12109              		.loc 1 3585 0
 12110 528c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12111 5290 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12112 5294 97F8B520 		ldrb	r2, [r7, #181]
 12113 5298 83F82C20 		strb	r2, [r3, #44]
3588:.\console.c   **** 						dummy = WriteAllEEparams();
 12114              		.loc 1 3588 0
 12115 529c FFF7FEFF 		bl	WriteAllEEparams
 12116 52a0 0346     		mov	r3, r0
 12117 52a2 87F8D930 		strb	r3, [r7, #217]
3589:.\console.c   **** 						printf(STR_REM_SIVT, (uint16)raw_invertion);   /* REM: tilt axis absoluter sensor invertion s
 12118              		.loc 1 3589 0
 12119 52a6 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 12120 52aa 40F20000 		movw	r0, #:lower16:.LC616
 12121 52ae C0F20000 		movt	r0, #:upper16:.LC616
 12122 52b2 1946     		mov	r1, r3
 12123 52b4 FFF7FEFF 		bl	printf
3595:.\console.c   **** 					goto exitpars;
 12124              		.loc 1 3595 0
 12125 52b8 01F0FABD 		b	.L131
 12126              	.L462:
3593:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12127              		.loc 1 3593 0
 12128 52bc 40F20000 		movw	r0, #:lower16:.LC450
 12129 52c0 C0F20000 		movt	r0, #:upper16:.LC450
 12130 52c4 FFF7FEFF 		bl	printf
3595:.\console.c   **** 					goto exitpars;
 12131              		.loc 1 3595 0
 12132 52c8 01F0F2BD 		b	.L131
 12133              	.L461:
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
 12134              		.loc 1 3601 0
 12135 52cc 6D48     		ldr	r0, .L747
 12136 52ce 40F20001 		movw	r1, #:lower16:.LC617
 12137 52d2 C0F20001 		movt	r1, #:upper16:.LC617
 12138 52d6 FFF7FEFF 		bl	strcmp
 12139 52da 0346     		mov	r3, r0
 12140 52dc 002B     		cmp	r3, #0
 12141 52de 09D0     		beq	.L464
3602:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zt") == 0))
 12142              		.loc 1 3602 0 discriminator 1
 12143 52e0 6848     		ldr	r0, .L747
 12144 52e2 40F20001 		movw	r1, #:lower16:.LC618
 12145 52e6 C0F20001 		movt	r1, #:upper16:.LC618
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 350


 12146 52ea FFF7FEFF 		bl	strcmp
 12147 52ee 0346     		mov	r3, r0
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
 12148              		.loc 1 3601 0 discriminator 1
 12149 52f0 002B     		cmp	r3, #0
 12150 52f2 59D1     		bne	.L465
 12151              	.L464:
3604:.\console.c   **** 					printf("* Warning! Put TILT Axis to zero (HOME) position and press y!");
 12152              		.loc 1 3604 0
 12153 52f4 40F20000 		movw	r0, #:lower16:.LC619
 12154 52f8 C0F20000 		movt	r0, #:upper16:.LC619
 12155 52fc FFF7FEFF 		bl	printf
3606:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12156              		.loc 1 3606 0
 12157 5300 4FF00100 		mov	r0, #1
 12158 5304 FFF7FEFF 		bl	ButtonYNChoice
 12159 5308 0346     		mov	r3, r0
 12160 530a 012B     		cmp	r3, #1
 12161 530c 3FD1     		bne	.L466
3608:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = 0; 		/* reset absolute tilt sensor zero raw 			*/
 12162              		.loc 1 3608 0
 12163 530e 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12164 5312 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12165 5316 4FF00002 		mov	r2, #0
 12166 531a DA85     		strh	r2, [r3, #46]	@ movhi
3611:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12167              		.loc 1 3611 0
 12168 531c 40F20000 		movw	r0, #:lower16:.LC595
 12169 5320 C0F20000 		movt	r0, #:upper16:.LC595
 12170 5324 FFF7FEFF 		bl	puts
3612:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12171              		.loc 1 3612 0
 12172 5328 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12173 532c C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12174 5330 FFF7FEFF 		bl	statistics_start
3615:.\console.c   **** 						CyDelay(1000);
 12175              		.loc 1 3615 0
 12176 5334 4FF47A70 		mov	r0, #1000
 12177 5338 FFF7FEFF 		bl	CyDelay
3618:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12178              		.loc 1 3618 0
 12179 533c 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12180 5340 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12181 5344 FFF7FEFF 		bl	statistics_stop
3619:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12182              		.loc 1 3619 0
 12183 5348 40F20000 		movw	r0, #:lower16:.LC596
 12184 534c C0F20000 		movt	r0, #:upper16:.LC596
 12185 5350 FFF7FEFF 		bl	puts
3622:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = (int16)tilt_absolute_sensor_stat.mean;
 12186              		.loc 1 3622 0
 12187 5354 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12188 5358 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12189 535c 5B68     		ldr	r3, [r3, #4]	@ float
 12190 535e 1846     		mov	r0, r3
 12191 5360 FFF7FEFF 		bl	__aeabi_f2iz
 12192 5364 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 351


 12193 5366 9AB2     		uxth	r2, r3
 12194 5368 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12195 536c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12196 5370 DA85     		strh	r2, [r3, #46]	@ movhi
3623:.\console.c   **** 						printf(STR_REM_TASZ, (int16)tilt_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Ze
 12197              		.loc 1 3623 0
 12198 5372 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12199 5376 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12200 537a DB8D     		ldrh	r3, [r3, #46]
 12201 537c 1BB2     		sxth	r3, r3
 12202 537e 40F20000 		movw	r0, #:lower16:.LC620
 12203 5382 C0F20000 		movt	r0, #:upper16:.LC620
 12204 5386 1946     		mov	r1, r3
 12205 5388 FFF7FEFF 		bl	printf
 12206 538c 05E0     		b	.L467
 12207              	.L466:
3627:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12208              		.loc 1 3627 0
 12209 538e 40F20000 		movw	r0, #:lower16:.LC621
 12210 5392 C0F20000 		movt	r0, #:upper16:.LC621
 12211 5396 FFF7FEFF 		bl	puts
 12212              	.L467:
3631:.\console.c   **** 					dummy = WriteAllEEparams();
 12213              		.loc 1 3631 0
 12214 539a FFF7FEFF 		bl	WriteAllEEparams
 12215 539e 0346     		mov	r3, r0
 12216 53a0 87F8D930 		strb	r3, [r7, #217]
3633:.\console.c   **** 					goto exitpars;
 12217              		.loc 1 3633 0
 12218 53a4 01F084BD 		b	.L131
 12219              	.L465:
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
 12220              		.loc 1 3639 0
 12221 53a8 3648     		ldr	r0, .L747
 12222 53aa 40F20001 		movw	r1, #:lower16:.LC622
 12223 53ae C0F20001 		movt	r1, #:upper16:.LC622
 12224 53b2 FFF7FEFF 		bl	strcmp
 12225 53b6 0346     		mov	r3, r0
 12226 53b8 002B     		cmp	r3, #0
 12227 53ba 09D0     		beq	.L468
3640:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmint") == 0))
 12228              		.loc 1 3640 0 discriminator 1
 12229 53bc 3148     		ldr	r0, .L747
 12230 53be 40F20001 		movw	r1, #:lower16:.LC623
 12231 53c2 C0F20001 		movt	r1, #:upper16:.LC623
 12232 53c6 FFF7FEFF 		bl	strcmp
 12233 53ca 0346     		mov	r3, r0
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
 12234              		.loc 1 3639 0 discriminator 1
 12235 53cc 002B     		cmp	r3, #0
 12236 53ce 5DD1     		bne	.L469
 12237              	.L468:
3642:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MIN position and press y!");
 12238              		.loc 1 3642 0
 12239 53d0 40F20000 		movw	r0, #:lower16:.LC624
 12240 53d4 C0F20000 		movt	r0, #:upper16:.LC624
 12241 53d8 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 352


3644:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12242              		.loc 1 3644 0
 12243 53dc 4FF00100 		mov	r0, #1
 12244 53e0 FFF7FEFF 		bl	ButtonYNChoice
 12245 53e4 0346     		mov	r3, r0
 12246 53e6 012B     		cmp	r3, #1
 12247 53e8 3FD1     		bne	.L470
3646:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute tilt sensor limit min raw 	
 12248              		.loc 1 3646 0
 12249 53ea 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12250 53ee C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12251 53f2 4FF00002 		mov	r2, #0
 12252 53f6 5A86     		strh	r2, [r3, #50]	@ movhi
3649:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12253              		.loc 1 3649 0
 12254 53f8 40F20000 		movw	r0, #:lower16:.LC595
 12255 53fc C0F20000 		movt	r0, #:upper16:.LC595
 12256 5400 FFF7FEFF 		bl	puts
3650:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12257              		.loc 1 3650 0
 12258 5404 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12259 5408 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12260 540c FFF7FEFF 		bl	statistics_start
3653:.\console.c   **** 						CyDelay(1000);
 12261              		.loc 1 3653 0
 12262 5410 4FF47A70 		mov	r0, #1000
 12263 5414 FFF7FEFF 		bl	CyDelay
3656:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12264              		.loc 1 3656 0
 12265 5418 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12266 541c C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12267 5420 FFF7FEFF 		bl	statistics_stop
3657:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12268              		.loc 1 3657 0
 12269 5424 40F20000 		movw	r0, #:lower16:.LC596
 12270 5428 C0F20000 		movt	r0, #:upper16:.LC596
 12271 542c FFF7FEFF 		bl	puts
3660:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = (int16)tilt_absolute_sensor_stat.mean;												
 12272              		.loc 1 3660 0
 12273 5430 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12274 5434 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12275 5438 5B68     		ldr	r3, [r3, #4]	@ float
 12276 543a 1846     		mov	r0, r3
 12277 543c FFF7FEFF 		bl	__aeabi_f2iz
 12278 5440 0346     		mov	r3, r0
 12279 5442 9AB2     		uxth	r2, r3
 12280 5444 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12281 5448 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12282 544c 5A86     		strh	r2, [r3, #50]	@ movhi
3661:.\console.c   **** 						printf(STR_REM_TMIN, (int16)tilt_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Sens
 12283              		.loc 1 3661 0
 12284 544e 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12285 5452 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12286 5456 5B8E     		ldrh	r3, [r3, #50]
 12287 5458 1BB2     		sxth	r3, r3
 12288 545a 40F20000 		movw	r0, #:lower16:.LC625
 12289 545e C0F20000 		movt	r0, #:upper16:.LC625
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 353


 12290 5462 1946     		mov	r1, r3
 12291 5464 FFF7FEFF 		bl	printf
 12292 5468 05E0     		b	.L471
 12293              	.L470:
3665:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12294              		.loc 1 3665 0
 12295 546a 40F20000 		movw	r0, #:lower16:.LC621
 12296 546e C0F20000 		movt	r0, #:upper16:.LC621
 12297 5472 FFF7FEFF 		bl	puts
 12298              	.L471:
3669:.\console.c   **** 					dummy = WriteAllEEparams();
 12299              		.loc 1 3669 0
 12300 5476 FFF7FEFF 		bl	WriteAllEEparams
 12301 547a 0346     		mov	r3, r0
 12302 547c 87F8D930 		strb	r3, [r7, #217]
3671:.\console.c   **** 					goto exitpars;
 12303              		.loc 1 3671 0
 12304 5480 01F016BD 		b	.L131
 12305              	.L748:
 12306              		.align	2
 12307              	.L747:
 12308 5484 0F000000 		.word	actual_cmd+15
 12309 5488 1E000000 		.word	actual_cmd+30
 12310              	.L469:
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
 12311              		.loc 1 3677 0
 12312 548c D248     		ldr	r0, .L749
 12313 548e 40F20001 		movw	r1, #:lower16:.LC626
 12314 5492 C0F20001 		movt	r1, #:upper16:.LC626
 12315 5496 FFF7FEFF 		bl	strcmp
 12316 549a 0346     		mov	r3, r0
 12317 549c 002B     		cmp	r3, #0
 12318 549e 09D0     		beq	.L472
3678:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxt") == 0))
 12319              		.loc 1 3678 0 discriminator 1
 12320 54a0 CD48     		ldr	r0, .L749
 12321 54a2 40F20001 		movw	r1, #:lower16:.LC627
 12322 54a6 C0F20001 		movt	r1, #:upper16:.LC627
 12323 54aa FFF7FEFF 		bl	strcmp
 12324 54ae 0346     		mov	r3, r0
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
 12325              		.loc 1 3677 0 discriminator 1
 12326 54b0 002B     		cmp	r3, #0
 12327 54b2 59D1     		bne	.L473
 12328              	.L472:
3680:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MAX position and press y!");
 12329              		.loc 1 3680 0
 12330 54b4 40F20000 		movw	r0, #:lower16:.LC628
 12331 54b8 C0F20000 		movt	r0, #:upper16:.LC628
 12332 54bc FFF7FEFF 		bl	printf
3682:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12333              		.loc 1 3682 0
 12334 54c0 4FF00100 		mov	r0, #1
 12335 54c4 FFF7FEFF 		bl	ButtonYNChoice
 12336 54c8 0346     		mov	r3, r0
 12337 54ca 012B     		cmp	r3, #1
 12338 54cc 3FD1     		bne	.L474
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 354


3684:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute tilt sensor limit max raw 	
 12339              		.loc 1 3684 0
 12340 54ce 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12341 54d2 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12342 54d6 4FF00002 		mov	r2, #0
 12343 54da 1A86     		strh	r2, [r3, #48]	@ movhi
3687:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12344              		.loc 1 3687 0
 12345 54dc 40F20000 		movw	r0, #:lower16:.LC595
 12346 54e0 C0F20000 		movt	r0, #:upper16:.LC595
 12347 54e4 FFF7FEFF 		bl	puts
3688:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12348              		.loc 1 3688 0
 12349 54e8 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12350 54ec C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12351 54f0 FFF7FEFF 		bl	statistics_start
3691:.\console.c   **** 						CyDelay(1000);
 12352              		.loc 1 3691 0
 12353 54f4 4FF47A70 		mov	r0, #1000
 12354 54f8 FFF7FEFF 		bl	CyDelay
3694:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12355              		.loc 1 3694 0
 12356 54fc 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12357 5500 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12358 5504 FFF7FEFF 		bl	statistics_stop
3695:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12359              		.loc 1 3695 0
 12360 5508 40F20000 		movw	r0, #:lower16:.LC596
 12361 550c C0F20000 		movt	r0, #:upper16:.LC596
 12362 5510 FFF7FEFF 		bl	puts
3698:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = (int16)tilt_absolute_sensor_stat.mean;
 12363              		.loc 1 3698 0
 12364 5514 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12365 5518 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12366 551c 5B68     		ldr	r3, [r3, #4]	@ float
 12367 551e 1846     		mov	r0, r3
 12368 5520 FFF7FEFF 		bl	__aeabi_f2iz
 12369 5524 0346     		mov	r3, r0
 12370 5526 9AB2     		uxth	r2, r3
 12371 5528 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12372 552c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12373 5530 1A86     		strh	r2, [r3, #48]	@ movhi
3699:.\console.c   **** 						printf(STR_REM_TMAX, (int16)tilt_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Sens
 12374              		.loc 1 3699 0
 12375 5532 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12376 5536 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12377 553a 1B8E     		ldrh	r3, [r3, #48]
 12378 553c 1BB2     		sxth	r3, r3
 12379 553e 40F20000 		movw	r0, #:lower16:.LC629
 12380 5542 C0F20000 		movt	r0, #:upper16:.LC629
 12381 5546 1946     		mov	r1, r3
 12382 5548 FFF7FEFF 		bl	printf
 12383 554c 05E0     		b	.L475
 12384              	.L474:
3703:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12385              		.loc 1 3703 0
 12386 554e 40F20000 		movw	r0, #:lower16:.LC621
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 355


 12387 5552 C0F20000 		movt	r0, #:upper16:.LC621
 12388 5556 FFF7FEFF 		bl	puts
 12389              	.L475:
3707:.\console.c   **** 					dummy = WriteAllEEparams();
 12390              		.loc 1 3707 0
 12391 555a FFF7FEFF 		bl	WriteAllEEparams
 12392 555e 0346     		mov	r3, r0
 12393 5560 87F8D930 		strb	r3, [r7, #217]
3709:.\console.c   **** 					goto exitpars;
 12394              		.loc 1 3709 0
 12395 5564 01F0A4BC 		b	.L131
 12396              	.L473:
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
 12397              		.loc 1 3715 0
 12398 5568 9B48     		ldr	r0, .L749
 12399 556a 40F20001 		movw	r1, #:lower16:.LC630
 12400 556e C0F20001 		movt	r1, #:upper16:.LC630
 12401 5572 FFF7FEFF 		bl	strcmp
 12402 5576 0346     		mov	r3, r0
 12403 5578 002B     		cmp	r3, #0
 12404 557a 09D0     		beq	.L476
3716:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystt") == 0))
 12405              		.loc 1 3716 0 discriminator 1
 12406 557c 9648     		ldr	r0, .L749
 12407 557e 40F20001 		movw	r1, #:lower16:.LC631
 12408 5582 C0F20001 		movt	r1, #:upper16:.LC631
 12409 5586 FFF7FEFF 		bl	strcmp
 12410 558a 0346     		mov	r3, r0
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
 12411              		.loc 1 3715 0 discriminator 1
 12412 558c 002B     		cmp	r3, #0
 12413 558e 2ED1     		bne	.L477
 12414              	.L476:
3718:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
 12415              		.loc 1 3718 0
 12416 5590 9248     		ldr	r0, .L749+4
 12417 5592 FFF7FEFF 		bl	atoi
 12418 5596 0346     		mov	r3, r0
 12419 5598 A7F8B630 		strh	r3, [r7, #182]	@ movhi
3719:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
 12420              		.loc 1 3719 0
 12421 559c 8F48     		ldr	r0, .L749+4
 12422 559e FFF7FEFF 		bl	atoi
 12423 55a2 0346     		mov	r3, r0
 12424 55a4 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 12425 55a8 B7F8B630 		ldrh	r3, [r7, #182]
 12426 55ac 642B     		cmp	r3, #100
 12427 55ae 16D8     		bhi	.L478
3721:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
 12428              		.loc 1 3721 0
 12429 55b0 B7F8B620 		ldrh	r2, [r7, #182]
 12430 55b4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12431 55b8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12432 55bc 9A86     		strh	r2, [r3, #52]	@ movhi
3724:.\console.c   **** 						dummy = WriteAllEEparams();
 12433              		.loc 1 3724 0
 12434 55be FFF7FEFF 		bl	WriteAllEEparams
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 356


 12435 55c2 0346     		mov	r3, r0
 12436 55c4 87F8D930 		strb	r3, [r7, #217]
3725:.\console.c   **** 						printf(STR_REM_TLHY, (uint16)raw_limit_hyst);   /* REM: tilt axis absolute sensor limit hyste
 12437              		.loc 1 3725 0
 12438 55c8 B7F8B630 		ldrh	r3, [r7, #182]
 12439 55cc 40F20000 		movw	r0, #:lower16:.LC632
 12440 55d0 C0F20000 		movt	r0, #:upper16:.LC632
 12441 55d4 1946     		mov	r1, r3
 12442 55d6 FFF7FEFF 		bl	printf
3731:.\console.c   **** 					goto exitpars;
 12443              		.loc 1 3731 0
 12444 55da 01F069BC 		b	.L131
 12445              	.L478:
3729:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12446              		.loc 1 3729 0
 12447 55de 40F20000 		movw	r0, #:lower16:.LC450
 12448 55e2 C0F20000 		movt	r0, #:upper16:.LC450
 12449 55e6 FFF7FEFF 		bl	printf
3731:.\console.c   **** 					goto exitpars;
 12450              		.loc 1 3731 0
 12451 55ea 01F061BC 		b	.L131
 12452              	.L477:
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
 12453              		.loc 1 3737 0
 12454 55ee 7A48     		ldr	r0, .L749
 12455 55f0 40F20001 		movw	r1, #:lower16:.LC467
 12456 55f4 C0F20001 		movt	r1, #:upper16:.LC467
 12457 55f8 FFF7FEFF 		bl	strcmp
 12458 55fc 0346     		mov	r3, r0
 12459 55fe 002B     		cmp	r3, #0
 12460 5600 09D0     		beq	.L480
3738:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiot") == 0))
 12461              		.loc 1 3738 0 discriminator 1
 12462 5602 7548     		ldr	r0, .L749
 12463 5604 40F20001 		movw	r1, #:lower16:.LC468
 12464 5608 C0F20001 		movt	r1, #:upper16:.LC468
 12465 560c FFF7FEFF 		bl	strcmp
 12466 5610 0346     		mov	r3, r0
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
 12467              		.loc 1 3737 0 discriminator 1
 12468 5612 002B     		cmp	r3, #0
 12469 5614 4FD1     		bne	.L481
 12470              	.L480:
3740:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
 12471              		.loc 1 3740 0
 12472 5616 7148     		ldr	r0, .L749+4
 12473 5618 FFF7FEFF 		bl	atof
 12474 561c 0246     		mov	r2, r0
 12475 561e 0B46     		mov	r3, r1
 12476 5620 1046     		mov	r0, r2
 12477 5622 1946     		mov	r1, r3
 12478 5624 FFF7FEFF 		bl	__aeabi_d2f
 12479 5628 0346     		mov	r3, r0
 12480 562a C7F8B830 		str	r3, [r7, #184]	@ float
 12481 562e D7F8B800 		ldr	r0, [r7, #184]	@ float
 12482 5632 4FF48041 		mov	r1, #16384
 12483 5636 CCF21C61 		movt	r1, 50716
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 357


 12484 563a FFF7FEFF 		bl	__aeabi_fcmpge
 12485 563e 0346     		mov	r3, r0
 12486 5640 002B     		cmp	r3, #0
 12487 5642 30D0     		beq	.L482
 12488              	.L649:
3741:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
 12489              		.loc 1 3741 0
 12490 5644 6548     		ldr	r0, .L749+4
 12491 5646 FFF7FEFF 		bl	atof
 12492 564a 0246     		mov	r2, r0
 12493 564c 0B46     		mov	r3, r1
 12494 564e 1046     		mov	r0, r2
 12495 5650 1946     		mov	r1, r3
 12496 5652 FFF7FEFF 		bl	__aeabi_d2f
 12497 5656 0346     		mov	r3, r0
 12498 5658 C7F8B830 		str	r3, [r7, #184]	@ float
 12499 565c D7F8B800 		ldr	r0, [r7, #184]	@ float
 12500 5660 4FF48041 		mov	r1, #16384
 12501 5664 C4F21C61 		movt	r1, 17948
 12502 5668 FFF7FEFF 		bl	__aeabi_fcmple
 12503 566c 0346     		mov	r3, r0
 12504 566e 002B     		cmp	r3, #0
 12505 5670 19D0     		beq	.L482
 12506              	.L650:
3743:.\console.c   **** 						tilt_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
 12507              		.loc 1 3743 0
 12508 5672 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12509 5676 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12510 567a D7F8B820 		ldr	r2, [r7, #184]	@ float
 12511 567e 9A63     		str	r2, [r3, #56]	@ float
3746:.\console.c   **** 						dummy = WriteAllEEparams();
 12512              		.loc 1 3746 0
 12513 5680 FFF7FEFF 		bl	WriteAllEEparams
 12514 5684 0346     		mov	r3, r0
 12515 5686 87F8D930 		strb	r3, [r7, #217]
3747:.\console.c   **** 						printf(STR_REM_TEAR, (float)step_abs_ratio);   /* REM: tilt encoder over absolute sensor rati
 12516              		.loc 1 3747 0
 12517 568a D7F8B800 		ldr	r0, [r7, #184]	@ float
 12518 568e FFF7FEFF 		bl	__aeabi_f2d
 12519 5692 0246     		mov	r2, r0
 12520 5694 0B46     		mov	r3, r1
 12521 5696 40F20000 		movw	r0, #:lower16:.LC633
 12522 569a C0F20000 		movt	r0, #:upper16:.LC633
 12523 569e FFF7FEFF 		bl	printf
3753:.\console.c   **** 					goto exitpars;
 12524              		.loc 1 3753 0
 12525 56a2 01F005BC 		b	.L131
 12526              	.L482:
3751:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12527              		.loc 1 3751 0
 12528 56a6 40F20000 		movw	r0, #:lower16:.LC450
 12529 56aa C0F20000 		movt	r0, #:upper16:.LC450
 12530 56ae FFF7FEFF 		bl	printf
3753:.\console.c   **** 					goto exitpars;
 12531              		.loc 1 3753 0
 12532 56b2 01F0FDBB 		b	.L131
 12533              	.L481:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 358


3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
 12534              		.loc 1 3759 0
 12535 56b6 4848     		ldr	r0, .L749
 12536 56b8 40F20001 		movw	r1, #:lower16:.LC634
 12537 56bc C0F20001 		movt	r1, #:upper16:.LC634
 12538 56c0 FFF7FEFF 		bl	strcmp
 12539 56c4 0346     		mov	r3, r0
 12540 56c6 002B     		cmp	r3, #0
 12541 56c8 09D0     		beq	.L486
3760:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imuy") == 0))
 12542              		.loc 1 3760 0 discriminator 1
 12543 56ca 4348     		ldr	r0, .L749
 12544 56cc 40F20001 		movw	r1, #:lower16:.LC635
 12545 56d0 C0F20001 		movt	r1, #:upper16:.LC635
 12546 56d4 FFF7FEFF 		bl	strcmp
 12547 56d8 0346     		mov	r3, r0
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
 12548              		.loc 1 3759 0 discriminator 1
 12549 56da 002B     		cmp	r3, #0
 12550 56dc 33D1     		bne	.L487
 12551              	.L486:
3762:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 12552              		.loc 1 3762 0
 12553 56de 3F48     		ldr	r0, .L749+4
 12554 56e0 FFF7FEFF 		bl	atoi
 12555 56e4 0346     		mov	r3, r0
 12556 56e6 87F8F230 		strb	r3, [r7, #242]
3763:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 12557              		.loc 1 3763 0
 12558 56ea 3C48     		ldr	r0, .L749+4
 12559 56ec FFF7FEFF 		bl	atoi
 12560 56f0 0346     		mov	r3, r0
 12561 56f2 87F8F230 		strb	r3, [r7, #242]
 12562 56f6 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 12563 56fa 012B     		cmp	r3, #1
 12564 56fc 1BD8     		bhi	.L488
3765:.\console.c   **** 						IMU_sensor.param.yaw_invertion = invertion;
 12565              		.loc 1 3765 0
 12566 56fe 40F20003 		movw	r3, #:lower16:IMU_sensor
 12567 5702 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12568 5706 97F8F220 		ldrb	r2, [r7, #242]
 12569 570a 83F82420 		strb	r2, [r3, #36]
3768:.\console.c   **** 						dummy = WriteAllEEparams();
 12570              		.loc 1 3768 0
 12571 570e FFF7FEFF 		bl	WriteAllEEparams
 12572 5712 0346     		mov	r3, r0
 12573 5714 87F8D930 		strb	r3, [r7, #217]
3769:.\console.c   **** 						printf(STR_REM_SINY, (uint16)IMU_sensor.param.yaw_invertion);   /* REM: Invertion Yaw setted 
 12574              		.loc 1 3769 0
 12575 5718 40F20003 		movw	r3, #:lower16:IMU_sensor
 12576 571c C0F20003 		movt	r3, #:upper16:IMU_sensor
 12577 5720 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 12578 5724 40F20000 		movw	r0, #:lower16:.LC636
 12579 5728 C0F20000 		movt	r0, #:upper16:.LC636
 12580 572c 1946     		mov	r1, r3
 12581 572e FFF7FEFF 		bl	printf
3775:.\console.c   **** 					goto exitpars;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 359


 12582              		.loc 1 3775 0
 12583 5732 01F0BDBB 		b	.L131
 12584              	.L488:
3773:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12585              		.loc 1 3773 0
 12586 5736 40F20000 		movw	r0, #:lower16:.LC450
 12587 573a C0F20000 		movt	r0, #:upper16:.LC450
 12588 573e FFF7FEFF 		bl	printf
3775:.\console.c   **** 					goto exitpars;
 12589              		.loc 1 3775 0
 12590 5742 01F0B5BB 		b	.L131
 12591              	.L487:
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
 12592              		.loc 1 3781 0
 12593 5746 2448     		ldr	r0, .L749
 12594 5748 40F20001 		movw	r1, #:lower16:.LC637
 12595 574c C0F20001 		movt	r1, #:upper16:.LC637
 12596 5750 FFF7FEFF 		bl	strcmp
 12597 5754 0346     		mov	r3, r0
 12598 5756 002B     		cmp	r3, #0
 12599 5758 09D0     		beq	.L490
3782:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imup") == 0))
 12600              		.loc 1 3782 0 discriminator 1
 12601 575a 1F48     		ldr	r0, .L749
 12602 575c 40F20001 		movw	r1, #:lower16:.LC638
 12603 5760 C0F20001 		movt	r1, #:upper16:.LC638
 12604 5764 FFF7FEFF 		bl	strcmp
 12605 5768 0346     		mov	r3, r0
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
 12606              		.loc 1 3781 0 discriminator 1
 12607 576a 002B     		cmp	r3, #0
 12608 576c 38D1     		bne	.L491
 12609              	.L490:
3784:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 12610              		.loc 1 3784 0
 12611 576e 1B48     		ldr	r0, .L749+4
 12612 5770 FFF7FEFF 		bl	atoi
 12613 5774 0346     		mov	r3, r0
 12614 5776 87F8F230 		strb	r3, [r7, #242]
3785:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 12615              		.loc 1 3785 0
 12616 577a 1848     		ldr	r0, .L749+4
 12617 577c FFF7FEFF 		bl	atoi
 12618 5780 0346     		mov	r3, r0
 12619 5782 87F8F230 		strb	r3, [r7, #242]
 12620 5786 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 12621 578a 012B     		cmp	r3, #1
 12622 578c 1BD8     		bhi	.L492
3787:.\console.c   **** 						IMU_sensor.param.pitch_invertion = invertion;
 12623              		.loc 1 3787 0
 12624 578e 40F20003 		movw	r3, #:lower16:IMU_sensor
 12625 5792 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12626 5796 97F8F220 		ldrb	r2, [r7, #242]
 12627 579a 83F82520 		strb	r2, [r3, #37]
3790:.\console.c   **** 						dummy = WriteAllEEparams();
 12628              		.loc 1 3790 0
 12629 579e FFF7FEFF 		bl	WriteAllEEparams
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 360


 12630 57a2 0346     		mov	r3, r0
 12631 57a4 87F8D930 		strb	r3, [r7, #217]
3791:.\console.c   **** 						printf(STR_REM_SINP, (uint16)IMU_sensor.param.pitch_invertion);   /* REM: Invertion Pitch set
 12632              		.loc 1 3791 0
 12633 57a8 40F20003 		movw	r3, #:lower16:IMU_sensor
 12634 57ac C0F20003 		movt	r3, #:upper16:IMU_sensor
 12635 57b0 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 12636 57b4 40F20000 		movw	r0, #:lower16:.LC639
 12637 57b8 C0F20000 		movt	r0, #:upper16:.LC639
 12638 57bc 1946     		mov	r1, r3
 12639 57be FFF7FEFF 		bl	printf
3797:.\console.c   **** 					goto exitpars;
 12640              		.loc 1 3797 0
 12641 57c2 01F075BB 		b	.L131
 12642              	.L492:
3795:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12643              		.loc 1 3795 0
 12644 57c6 40F20000 		movw	r0, #:lower16:.LC450
 12645 57ca C0F20000 		movt	r0, #:upper16:.LC450
 12646 57ce FFF7FEFF 		bl	printf
3797:.\console.c   **** 					goto exitpars;
 12647              		.loc 1 3797 0
 12648 57d2 01F06DBB 		b	.L131
 12649              	.L750:
 12650 57d6 00BF     		.align	2
 12651              	.L749:
 12652 57d8 0F000000 		.word	actual_cmd+15
 12653 57dc 1E000000 		.word	actual_cmd+30
 12654              	.L491:
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
 12655              		.loc 1 3803 0
 12656 57e0 BB48     		ldr	r0, .L751
 12657 57e2 40F20001 		movw	r1, #:lower16:.LC640
 12658 57e6 C0F20001 		movt	r1, #:upper16:.LC640
 12659 57ea FFF7FEFF 		bl	strcmp
 12660 57ee 0346     		mov	r3, r0
 12661 57f0 002B     		cmp	r3, #0
 12662 57f2 09D0     		beq	.L494
3804:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imur") == 0))
 12663              		.loc 1 3804 0 discriminator 1
 12664 57f4 B648     		ldr	r0, .L751
 12665 57f6 40F20001 		movw	r1, #:lower16:.LC641
 12666 57fa C0F20001 		movt	r1, #:upper16:.LC641
 12667 57fe FFF7FEFF 		bl	strcmp
 12668 5802 0346     		mov	r3, r0
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
 12669              		.loc 1 3803 0 discriminator 1
 12670 5804 002B     		cmp	r3, #0
 12671 5806 33D1     		bne	.L495
 12672              	.L494:
3806:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 12673              		.loc 1 3806 0
 12674 5808 B248     		ldr	r0, .L751+4
 12675 580a FFF7FEFF 		bl	atoi
 12676 580e 0346     		mov	r3, r0
 12677 5810 87F8F230 		strb	r3, [r7, #242]
3807:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 361


 12678              		.loc 1 3807 0
 12679 5814 AF48     		ldr	r0, .L751+4
 12680 5816 FFF7FEFF 		bl	atoi
 12681 581a 0346     		mov	r3, r0
 12682 581c 87F8F230 		strb	r3, [r7, #242]
 12683 5820 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 12684 5824 012B     		cmp	r3, #1
 12685 5826 1BD8     		bhi	.L496
3809:.\console.c   **** 						IMU_sensor.param.roll_invertion = invertion;
 12686              		.loc 1 3809 0
 12687 5828 40F20003 		movw	r3, #:lower16:IMU_sensor
 12688 582c C0F20003 		movt	r3, #:upper16:IMU_sensor
 12689 5830 97F8F220 		ldrb	r2, [r7, #242]
 12690 5834 83F82620 		strb	r2, [r3, #38]
3812:.\console.c   **** 						dummy = WriteAllEEparams();
 12691              		.loc 1 3812 0
 12692 5838 FFF7FEFF 		bl	WriteAllEEparams
 12693 583c 0346     		mov	r3, r0
 12694 583e 87F8D930 		strb	r3, [r7, #217]
3813:.\console.c   **** 						printf(STR_REM_SINR, (uint16)IMU_sensor.param.roll_invertion);   /* REM: Invertion Roll sette
 12695              		.loc 1 3813 0
 12696 5842 40F20003 		movw	r3, #:lower16:IMU_sensor
 12697 5846 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12698 584a 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 12699 584e 40F20000 		movw	r0, #:lower16:.LC642
 12700 5852 C0F20000 		movt	r0, #:upper16:.LC642
 12701 5856 1946     		mov	r1, r3
 12702 5858 FFF7FEFF 		bl	printf
3819:.\console.c   **** 					goto exitpars;
 12703              		.loc 1 3819 0
 12704 585c 01F028BB 		b	.L131
 12705              	.L496:
3817:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12706              		.loc 1 3817 0
 12707 5860 40F20000 		movw	r0, #:lower16:.LC450
 12708 5864 C0F20000 		movt	r0, #:upper16:.LC450
 12709 5868 FFF7FEFF 		bl	printf
3819:.\console.c   **** 					goto exitpars;
 12710              		.loc 1 3819 0
 12711 586c 01F020BB 		b	.L131
 12712              	.L495:
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
 12713              		.loc 1 3825 0
 12714 5870 9748     		ldr	r0, .L751
 12715 5872 40F20001 		movw	r1, #:lower16:.LC643
 12716 5876 C0F20001 		movt	r1, #:upper16:.LC643
 12717 587a FFF7FEFF 		bl	strcmp
 12718 587e 0346     		mov	r3, r0
 12719 5880 002B     		cmp	r3, #0
 12720 5882 09D0     		beq	.L498
3826:.\console.c   **** 					(strcmp(actual_cmd.parameter, "prex") == 0))
 12721              		.loc 1 3826 0 discriminator 1
 12722 5884 9248     		ldr	r0, .L751
 12723 5886 40F20001 		movw	r1, #:lower16:.LC644
 12724 588a C0F20001 		movt	r1, #:upper16:.LC644
 12725 588e FFF7FEFF 		bl	strcmp
 12726 5892 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 362


3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
 12727              		.loc 1 3825 0 discriminator 1
 12728 5894 002B     		cmp	r3, #0
 12729 5896 33D1     		bne	.L499
 12730              	.L498:
3828:.\console.c   **** 					if (((exchange = atoi(actual_cmd.number1)) >= 0)
 12731              		.loc 1 3828 0
 12732 5898 8E48     		ldr	r0, .L751+4
 12733 589a FFF7FEFF 		bl	atoi
 12734 589e 0346     		mov	r3, r0
 12735 58a0 87F8F130 		strb	r3, [r7, #241]
3829:.\console.c   **** 					&& (exchange = atoi(actual_cmd.number1)) <= 1)
 12736              		.loc 1 3829 0
 12737 58a4 8B48     		ldr	r0, .L751+4
 12738 58a6 FFF7FEFF 		bl	atoi
 12739 58aa 0346     		mov	r3, r0
 12740 58ac 87F8F130 		strb	r3, [r7, #241]
 12741 58b0 97F8F130 		ldrb	r3, [r7, #241]	@ zero_extendqisi2
 12742 58b4 012B     		cmp	r3, #1
 12743 58b6 1BD8     		bhi	.L500
3831:.\console.c   **** 						IMU_sensor.param.pitch_roll_exchange = exchange;
 12744              		.loc 1 3831 0
 12745 58b8 40F20003 		movw	r3, #:lower16:IMU_sensor
 12746 58bc C0F20003 		movt	r3, #:upper16:IMU_sensor
 12747 58c0 97F8F120 		ldrb	r2, [r7, #241]
 12748 58c4 83F82720 		strb	r2, [r3, #39]
3834:.\console.c   **** 						dummy = WriteAllEEparams();
 12749              		.loc 1 3834 0
 12750 58c8 FFF7FEFF 		bl	WriteAllEEparams
 12751 58cc 0346     		mov	r3, r0
 12752 58ce 87F8D930 		strb	r3, [r7, #217]
3835:.\console.c   **** 						printf(STR_REM_SPRX, (uint16)IMU_sensor.param.pitch_roll_exchange);   /* REM: Invertion Roll 
 12753              		.loc 1 3835 0
 12754 58d2 40F20003 		movw	r3, #:lower16:IMU_sensor
 12755 58d6 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12756 58da 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 12757 58de 40F20000 		movw	r0, #:lower16:.LC645
 12758 58e2 C0F20000 		movt	r0, #:upper16:.LC645
 12759 58e6 1946     		mov	r1, r3
 12760 58e8 FFF7FEFF 		bl	printf
3841:.\console.c   **** 					goto exitpars;
 12761              		.loc 1 3841 0
 12762 58ec 01F0E0BA 		b	.L131
 12763              	.L500:
3839:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12764              		.loc 1 3839 0
 12765 58f0 40F20000 		movw	r0, #:lower16:.LC450
 12766 58f4 C0F20000 		movt	r0, #:upper16:.LC450
 12767 58f8 FFF7FEFF 		bl	printf
3841:.\console.c   **** 					goto exitpars;
 12768              		.loc 1 3841 0
 12769 58fc 01F0D8BA 		b	.L131
 12770              	.L499:
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
 12771              		.loc 1 3847 0
 12772 5900 7348     		ldr	r0, .L751
 12773 5902 40F20001 		movw	r1, #:lower16:.LC272
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 363


 12774 5906 C0F20001 		movt	r1, #:upper16:.LC272
 12775 590a FFF7FEFF 		bl	strcmp
 12776 590e 0346     		mov	r3, r0
 12777 5910 002B     		cmp	r3, #0
 12778 5912 0AD0     		beq	.L502
3848:.\console.c   **** 					(strcmp(actual_cmd.parameter, "shot") == 0))
 12779              		.loc 1 3848 0 discriminator 1
 12780 5914 6E48     		ldr	r0, .L751
 12781 5916 40F20001 		movw	r1, #:lower16:.LC442
 12782 591a C0F20001 		movt	r1, #:upper16:.LC442
 12783 591e FFF7FEFF 		bl	strcmp
 12784 5922 0346     		mov	r3, r0
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
 12785              		.loc 1 3847 0 discriminator 1
 12786 5924 002B     		cmp	r3, #0
 12787 5926 40F0BE81 		bne	.L503
 12788              	.L502:
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
 12789              		.loc 1 3850 0
 12790 592a 6B48     		ldr	r0, .L751+8
 12791 592c 40F20001 		movw	r1, #:lower16:.LC646
 12792 5930 C0F20001 		movt	r1, #:upper16:.LC646
 12793 5934 FFF7FEFF 		bl	strcmp
 12794 5938 0346     		mov	r3, r0
 12795 593a 002B     		cmp	r3, #0
 12796 593c 09D0     		beq	.L504
3851:.\console.c   **** 					    (strcmp(actual_cmd.number2, "c") == 0))
 12797              		.loc 1 3851 0 discriminator 1
 12798 593e 6648     		ldr	r0, .L751+8
 12799 5940 40F20001 		movw	r1, #:lower16:.LC647
 12800 5944 C0F20001 		movt	r1, #:upper16:.LC647
 12801 5948 FFF7FEFF 		bl	strcmp
 12802 594c 0346     		mov	r3, r0
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
 12803              		.loc 1 3850 0 discriminator 1
 12804 594e 002B     		cmp	r3, #0
 12805 5950 7AD1     		bne	.L505
 12806              	.L504:
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12807              		.loc 1 3854 0
 12808 5952 6048     		ldr	r0, .L751+4
 12809 5954 FFF7FEFF 		bl	atoi
 12810 5958 0346     		mov	r3, r0
 12811 595a 87F8E530 		strb	r3, [r7, #229]
 12812 595e 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 12813 5962 002B     		cmp	r3, #0
 12814 5964 00F09C81 		beq	.L701
3855:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 12815              		.loc 1 3855 0
 12816 5968 5A48     		ldr	r0, .L751+4
 12817 596a FFF7FEFF 		bl	atoi
 12818 596e 0346     		mov	r3, r0
 12819 5970 87F8E530 		strb	r3, [r7, #229]
 12820 5974 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 12821 5978 632B     		cmp	r3, #99
 12822 597a 00F29181 		bhi	.L701
3859:.\console.c   **** 							if (q[q_table[q_number]].number != Q_NUMBER_UNUSED)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 364


 12823              		.loc 1 3859 0
 12824 597e 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12825 5982 40F20003 		movw	r3, #:lower16:q_table
 12826 5986 C0F20003 		movt	r3, #:upper16:q_table
 12827 598a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12828 598c 1946     		mov	r1, r3
 12829 598e 40F20002 		movw	r2, #:lower16:q
 12830 5992 C0F20002 		movt	r2, #:upper16:q
 12831 5996 0B46     		mov	r3, r1
 12832 5998 4FEAC303 		lsl	r3, r3, #3
 12833 599c 5B18     		adds	r3, r3, r1
 12834 599e 4FEA8303 		lsl	r3, r3, #2
 12835 59a2 D318     		adds	r3, r2, r3
 12836 59a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 12837 59a6 002B     		cmp	r3, #0
 12838 59a8 47D0     		beq	.L507
3861:.\console.c   **** 								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
 12839              		.loc 1 3861 0
 12840 59aa 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12841 59ae 40F20003 		movw	r3, #:lower16:q_table
 12842 59b2 C0F20003 		movt	r3, #:upper16:q_table
 12843 59b6 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12844 59b8 1946     		mov	r1, r3
 12845 59ba 40F20002 		movw	r2, #:lower16:q
 12846 59be C0F20002 		movt	r2, #:upper16:q
 12847 59c2 0B46     		mov	r3, r1
 12848 59c4 4FEAC303 		lsl	r3, r3, #3
 12849 59c8 5B18     		adds	r3, r3, r1
 12850 59ca 4FEA8303 		lsl	r3, r3, #2
 12851 59ce D318     		adds	r3, r2, r3
 12852 59d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 12853 59d2 40F20000 		movw	r0, #:lower16:.LC648
 12854 59d6 C0F20000 		movt	r0, #:upper16:.LC648
 12855 59da 1946     		mov	r1, r3
 12856 59dc FFF7FEFF 		bl	printf
3863:.\console.c   **** 								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
 12857              		.loc 1 3863 0
 12858 59e0 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12859 59e4 40F20003 		movw	r3, #:lower16:q_table
 12860 59e8 C0F20003 		movt	r3, #:upper16:q_table
 12861 59ec 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12862 59ee 1946     		mov	r1, r3
 12863 59f0 40F20002 		movw	r2, #:lower16:q
 12864 59f4 C0F20002 		movt	r2, #:upper16:q
 12865 59f8 0B46     		mov	r3, r1
 12866 59fa 4FEAC303 		lsl	r3, r3, #3
 12867 59fe 5B18     		adds	r3, r3, r1
 12868 5a00 4FEA8303 		lsl	r3, r3, #2
 12869 5a04 D318     		adds	r3, r2, r3
 12870 5a06 4FF00002 		mov	r2, #0
 12871 5a0a 1A70     		strb	r2, [r3, #0]
3866:.\console.c   **** 								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 12872              		.loc 1 3866 0
 12873 5a0c 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12874 5a10 40F20003 		movw	r3, #:lower16:q_table
 12875 5a14 C0F20003 		movt	r3, #:upper16:q_table
 12876 5a18 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 365


 12877 5a1a DBB2     		uxtb	r3, r3
 12878 5a1c 5BB2     		sxtb	r3, r3
 12879 5a1e 1846     		mov	r0, r3
 12880 5a20 FFF7FEFF 		bl	WriteQEEparams
 12881 5a24 0346     		mov	r3, r0
 12882 5a26 002B     		cmp	r3, #0
 12883 5a28 00F03A81 		beq	.L701
3868:.\console.c   **** 									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
 12884              		.loc 1 3868 0
 12885 5a2c 40F20000 		movw	r0, #:lower16:.LC649
 12886 5a30 C0F20000 		movt	r0, #:upper16:.LC649
 12887 5a34 FFF7FEFF 		bl	printf
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12888              		.loc 1 3854 0
 12889 5a38 32E1     		b	.L701
 12890              	.L507:
3873:.\console.c   **** 								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
 12891              		.loc 1 3873 0
 12892 5a3a 40F20000 		movw	r0, #:lower16:.LC650
 12893 5a3e C0F20000 		movt	r0, #:upper16:.LC650
 12894 5a42 FFF7FEFF 		bl	puts
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12895              		.loc 1 3854 0
 12896 5a46 2BE1     		b	.L701
 12897              	.L505:
3877:.\console.c   **** 					else if (((memory_number = atoi(actual_cmd.number2)) >= Q_MEMORY_NUMBER_MIN)
 12898              		.loc 1 3877 0
 12899 5a48 2348     		ldr	r0, .L751+8
 12900 5a4a FFF7FEFF 		bl	atoi
 12901 5a4e 0346     		mov	r3, r0
 12902 5a50 A7F8E630 		strh	r3, [r7, #230]	@ movhi
3878:.\console.c   **** 						    && (memory_number = atoi(actual_cmd.number2)) < Q_MEMORY_NUMBER_MAX)
 12903              		.loc 1 3878 0
 12904 5a54 2048     		ldr	r0, .L751+8
 12905 5a56 FFF7FEFF 		bl	atoi
 12906 5a5a 0346     		mov	r3, r0
 12907 5a5c A7F8E630 		strh	r3, [r7, #230]	@ movhi
 12908 5a60 B7F8E630 		ldrh	r3, [r7, #230]
 12909 5a64 1F2B     		cmp	r3, #31
 12910 5a66 00F21381 		bhi	.L509
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12911              		.loc 1 3880 0
 12912 5a6a 1A48     		ldr	r0, .L751+4
 12913 5a6c FFF7FEFF 		bl	atoi
 12914 5a70 0346     		mov	r3, r0
 12915 5a72 87F8E530 		strb	r3, [r7, #229]
 12916 5a76 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 12917 5a7a 002B     		cmp	r3, #0
 12918 5a7c 00F00081 		beq	.L510
3881:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 12919              		.loc 1 3881 0
 12920 5a80 1448     		ldr	r0, .L751+4
 12921 5a82 FFF7FEFF 		bl	atoi
 12922 5a86 0346     		mov	r3, r0
 12923 5a88 87F8E530 		strb	r3, [r7, #229]
 12924 5a8c 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 12925 5a90 632B     		cmp	r3, #99
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 366


 12926 5a92 00F2F580 		bhi	.L510
3883:.\console.c   **** 							printf("* Warning! Put All Axes to desired position and press y!");
 12927              		.loc 1 3883 0
 12928 5a96 40F20000 		movw	r0, #:lower16:.LC651
 12929 5a9a C0F20000 		movt	r0, #:upper16:.LC651
 12930 5a9e FFF7FEFF 		bl	printf
3885:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _YES)
 12931              		.loc 1 3885 0
 12932 5aa2 4FF00100 		mov	r0, #1
 12933 5aa6 FFF7FEFF 		bl	ButtonYNChoice
 12934 5aaa 0346     		mov	r3, r0
 12935 5aac 012B     		cmp	r3, #1
 12936 5aae 40F0CB80 		bne	.L511
3887:.\console.c   **** 								if (strlen(actual_cmd.number2) != 0)
 12937              		.loc 1 3887 0
 12938 5ab2 094B     		ldr	r3, .L751+8
 12939 5ab4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 12940 5ab6 002B     		cmp	r3, #0
 12941 5ab8 10D0     		beq	.L512
3890:.\console.c   **** 									q_table[q_number] 			= memory_number;				  		/* save for fast indexing 	*/
 12942              		.loc 1 3890 0
 12943 5aba 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12944 5abe B7F8E630 		ldrh	r3, [r7, #230]	@ movhi
 12945 5ac2 D9B2     		uxtb	r1, r3
 12946 5ac4 40F20003 		movw	r3, #:lower16:q_table
 12947 5ac8 C0F20003 		movt	r3, #:upper16:q_table
 12948 5acc 9954     		strb	r1, [r3, r2]
 12949 5ace 13E0     		b	.L513
 12950              	.L752:
 12951              		.align	2
 12952              	.L751:
 12953 5ad0 0F000000 		.word	actual_cmd+15
 12954 5ad4 1E000000 		.word	actual_cmd+30
 12955 5ad8 28000000 		.word	actual_cmd+40
 12956              	.L512:
3895:.\console.c   **** 									q_table[q_number] 			= qmemory_standard_address[q_number];	/* save for fast indexing 	*/
 12957              		.loc 1 3895 0
 12958 5adc 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12959 5ae0 97F8E510 		ldrb	r1, [r7, #229]	@ zero_extendqisi2
 12960 5ae4 40F20003 		movw	r3, #:lower16:qmemory_standard_address
 12961 5ae8 C0F20003 		movt	r3, #:upper16:qmemory_standard_address
 12962 5aec 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 12963 5aee 40F20003 		movw	r3, #:lower16:q_table
 12964 5af2 C0F20003 		movt	r3, #:upper16:q_table
 12965 5af6 9954     		strb	r1, [r3, r2]
 12966              	.L513:
3899:.\console.c   **** 								q[q_table[q_number]].number									= (uint8)(q_number);
 12967              		.loc 1 3899 0
 12968 5af8 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12969 5afc 40F20003 		movw	r3, #:lower16:q_table
 12970 5b00 C0F20003 		movt	r3, #:upper16:q_table
 12971 5b04 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12972 5b06 1946     		mov	r1, r3
 12973 5b08 40F20002 		movw	r2, #:lower16:q
 12974 5b0c C0F20002 		movt	r2, #:upper16:q
 12975 5b10 0B46     		mov	r3, r1
 12976 5b12 4FEAC303 		lsl	r3, r3, #3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 367


 12977 5b16 5B18     		adds	r3, r3, r1
 12978 5b18 4FEA8303 		lsl	r3, r3, #2
 12979 5b1c D318     		adds	r3, r2, r3
 12980 5b1e 97F8E520 		ldrb	r2, [r7, #229]
 12981 5b22 1A70     		strb	r2, [r3, #0]
3900:.\console.c   **** 								q[q_table[q_number]].mc.position[PAN_AXIS]             		= pan_absolute_sensor.position;			
 12982              		.loc 1 3900 0
 12983 5b24 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12984 5b28 40F20003 		movw	r3, #:lower16:q_table
 12985 5b2c C0F20003 		movt	r3, #:upper16:q_table
 12986 5b30 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12987 5b32 1946     		mov	r1, r3
 12988 5b34 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12989 5b38 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12990 5b3c 5868     		ldr	r0, [r3, #4]	@ float
 12991 5b3e 40F20002 		movw	r2, #:lower16:q
 12992 5b42 C0F20002 		movt	r2, #:upper16:q
 12993 5b46 0B46     		mov	r3, r1
 12994 5b48 4FEAC303 		lsl	r3, r3, #3
 12995 5b4c 5B18     		adds	r3, r3, r1
 12996 5b4e 4FEA8303 		lsl	r3, r3, #2
 12997 5b52 D318     		adds	r3, r2, r3
 12998 5b54 03F11803 		add	r3, r3, #24
 12999 5b58 1860     		str	r0, [r3, #0]	@ float
3901:.\console.c   **** 								q[q_table[q_number]].param.position_default[PAN_AXIS].fnum  = pan_absolute_sensor.position;
 13000              		.loc 1 3901 0
 13001 5b5a 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13002 5b5e 40F20003 		movw	r3, #:lower16:q_table
 13003 5b62 C0F20003 		movt	r3, #:upper16:q_table
 13004 5b66 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13005 5b68 1946     		mov	r1, r3
 13006 5b6a 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13007 5b6e C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13008 5b72 5868     		ldr	r0, [r3, #4]	@ float
 13009 5b74 40F20002 		movw	r2, #:lower16:q
 13010 5b78 C0F20002 		movt	r2, #:upper16:q
 13011 5b7c 0B46     		mov	r3, r1
 13012 5b7e 4FEAC303 		lsl	r3, r3, #3
 13013 5b82 5B18     		adds	r3, r3, r1
 13014 5b84 4FEA8303 		lsl	r3, r3, #2
 13015 5b88 D318     		adds	r3, r2, r3
 13016 5b8a 03F10403 		add	r3, r3, #4
 13017 5b8e 1860     		str	r0, [r3, #0]	@ float
3903:.\console.c   **** 								q[q_table[q_number]].mc.position[TILT_AXIS]            		= tilt_absolute_sensor.position;		
 13018              		.loc 1 3903 0
 13019 5b90 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13020 5b94 40F20003 		movw	r3, #:lower16:q_table
 13021 5b98 C0F20003 		movt	r3, #:upper16:q_table
 13022 5b9c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13023 5b9e 1946     		mov	r1, r3
 13024 5ba0 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13025 5ba4 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13026 5ba8 5868     		ldr	r0, [r3, #4]	@ float
 13027 5baa 40F20002 		movw	r2, #:lower16:q
 13028 5bae C0F20002 		movt	r2, #:upper16:q
 13029 5bb2 0B46     		mov	r3, r1
 13030 5bb4 4FEAC303 		lsl	r3, r3, #3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 368


 13031 5bb8 5B18     		adds	r3, r3, r1
 13032 5bba 4FEA8303 		lsl	r3, r3, #2
 13033 5bbe D318     		adds	r3, r2, r3
 13034 5bc0 03F11C03 		add	r3, r3, #28
 13035 5bc4 1860     		str	r0, [r3, #0]	@ float
3904:.\console.c   **** 								q[q_table[q_number]].param.position_default[TILT_AXIS].fnum = tilt_absolute_sensor.position
 13036              		.loc 1 3904 0
 13037 5bc6 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13038 5bca 40F20003 		movw	r3, #:lower16:q_table
 13039 5bce C0F20003 		movt	r3, #:upper16:q_table
 13040 5bd2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13041 5bd4 1946     		mov	r1, r3
 13042 5bd6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13043 5bda C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13044 5bde 5868     		ldr	r0, [r3, #4]	@ float
 13045 5be0 40F20002 		movw	r2, #:lower16:q
 13046 5be4 C0F20002 		movt	r2, #:upper16:q
 13047 5be8 0B46     		mov	r3, r1
 13048 5bea 4FEAC303 		lsl	r3, r3, #3
 13049 5bee 5B18     		adds	r3, r3, r1
 13050 5bf0 4FEA8303 		lsl	r3, r3, #2
 13051 5bf4 D318     		adds	r3, r2, r3
 13052 5bf6 03F10803 		add	r3, r3, #8
 13053 5bfa 1860     		str	r0, [r3, #0]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13054              		.loc 1 3906 0
 13055 5bfc 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
3908:.\console.c   **** 									(int32)pan_absolute_sensor.position,
 13056              		.loc 1 3908 0
 13057 5c00 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13058 5c04 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13059 5c08 5B68     		ldr	r3, [r3, #4]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13060              		.loc 1 3906 0
 13061 5c0a 1846     		mov	r0, r3
 13062 5c0c FFF7FEFF 		bl	__aeabi_f2iz
 13063 5c10 0546     		mov	r5, r0
3909:.\console.c   **** 									(int32)tilt_absolute_sensor.position,
 13064              		.loc 1 3909 0
 13065 5c12 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13066 5c16 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13067 5c1a 5B68     		ldr	r3, [r3, #4]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13068              		.loc 1 3906 0
 13069 5c1c 1846     		mov	r0, r3
 13070 5c1e FFF7FEFF 		bl	__aeabi_f2iz
 13071 5c22 0446     		mov	r4, r0
3910:.\console.c   **** 									(int16)q_table[q_number]);	
 13072              		.loc 1 3910 0
 13073 5c24 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13074 5c28 40F20003 		movw	r3, #:lower16:q_table
 13075 5c2c C0F20003 		movt	r3, #:upper16:q_table
 13076 5c30 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13077              		.loc 1 3906 0
 13078 5c32 0093     		str	r3, [sp, #0]
 13079 5c34 40F20000 		movw	r0, #:lower16:.LC652
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 369


 13080 5c38 C0F20000 		movt	r0, #:upper16:.LC652
 13081 5c3c 3146     		mov	r1, r6
 13082 5c3e 2A46     		mov	r2, r5
 13083 5c40 2346     		mov	r3, r4
 13084 5c42 FFF7FEFF 		bl	printf
 13085 5c46 05E0     		b	.L514
 13086              	.L511:
3914:.\console.c   **** 								printf("\r\n* Q element (shot) position not sampled!\r\n");								
 13087              		.loc 1 3914 0
 13088 5c48 40F20000 		movw	r0, #:lower16:.LC653
 13089 5c4c C0F20000 		movt	r0, #:upper16:.LC653
 13090 5c50 FFF7FEFF 		bl	puts
 13091              	.L514:
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 13092              		.loc 1 3918 0
 13093 5c54 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13094 5c58 40F20003 		movw	r3, #:lower16:q_table
 13095 5c5c C0F20003 		movt	r3, #:upper16:q_table
 13096 5c60 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13097 5c62 DBB2     		uxtb	r3, r3
 13098 5c64 5BB2     		sxtb	r3, r3
 13099 5c66 1846     		mov	r0, r3
 13100 5c68 FFF7FEFF 		bl	WriteQEEparams
 13101 5c6c 0346     		mov	r3, r0
 13102 5c6e 002B     		cmp	r3, #0
 13103 5c70 0DD0     		beq	.L516
3920:.\console.c   **** 								printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
 13104              		.loc 1 3920 0
 13105 5c72 40F20000 		movw	r0, #:lower16:.LC649
 13106 5c76 C0F20000 		movt	r0, #:upper16:.LC649
 13107 5c7a FFF7FEFF 		bl	printf
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 13108              		.loc 1 3918 0
 13109 5c7e 06E0     		b	.L516
 13110              	.L510:
3925:.\console.c   **** 							printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
 13111              		.loc 1 3925 0
 13112 5c80 40F20000 		movw	r0, #:lower16:.LC450
 13113 5c84 C0F20000 		movt	r0, #:upper16:.LC450
 13114 5c88 FFF7FEFF 		bl	printf
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13115              		.loc 1 3880 0
 13116 5c8c 09E0     		b	.L508
 13117              	.L516:
 13118 5c8e 08E0     		b	.L508
 13119              	.L509:
3956:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
 13120              		.loc 1 3956 0
 13121 5c90 40F20000 		movw	r0, #:lower16:.LC450
 13122 5c94 C0F20000 		movt	r0, #:upper16:.LC450
 13123 5c98 FFF7FEFF 		bl	printf
3958:.\console.c   **** 					goto exitpars;
 13124              		.loc 1 3958 0
 13125 5c9c 01F008B9 		b	.L131
 13126              	.L701:
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13127              		.loc 1 3854 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 370


 13128 5ca0 00BF     		nop
 13129              	.L508:
3958:.\console.c   **** 					goto exitpars;
 13130              		.loc 1 3958 0
 13131 5ca2 01F005B9 		b	.L131
 13132              	.L503:
3964:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpp") == 0)
 13133              		.loc 1 3964 0
 13134 5ca6 B848     		ldr	r0, .L753
 13135 5ca8 40F20001 		movw	r1, #:lower16:.LC654
 13136 5cac C0F20001 		movt	r1, #:upper16:.LC654
 13137 5cb0 FFF7FEFF 		bl	strcmp
 13138 5cb4 0346     		mov	r3, r0
 13139 5cb6 002B     		cmp	r3, #0
 13140 5cb8 51D1     		bne	.L517
3966:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
 13141              		.loc 1 3966 0
 13142 5cba B448     		ldr	r0, .L753+4
 13143 5cbc FFF7FEFF 		bl	atof
 13144 5cc0 0246     		mov	r2, r0
 13145 5cc2 0B46     		mov	r3, r1
 13146 5cc4 1046     		mov	r0, r2
 13147 5cc6 1946     		mov	r1, r3
 13148 5cc8 FFF7FEFF 		bl	__aeabi_d2f
 13149 5ccc 0346     		mov	r3, r0
 13150 5cce C7F8D430 		str	r3, [r7, #212]	@ float
 13151 5cd2 D7F8D400 		ldr	r0, [r7, #212]	@ float
 13152 5cd6 4FF00001 		mov	r1, #0
 13153 5cda FFF7FEFF 		bl	__aeabi_fcmpge
 13154 5cde 0346     		mov	r3, r0
 13155 5ce0 002B     		cmp	r3, #0
 13156 5ce2 34D0     		beq	.L518
 13157              	.L651:
3967:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
 13158              		.loc 1 3967 0
 13159 5ce4 A948     		ldr	r0, .L753+4
 13160 5ce6 FFF7FEFF 		bl	atof
 13161 5cea 0246     		mov	r2, r0
 13162 5cec 0B46     		mov	r3, r1
 13163 5cee 1046     		mov	r0, r2
 13164 5cf0 1946     		mov	r1, r3
 13165 5cf2 FFF7FEFF 		bl	__aeabi_d2f
 13166 5cf6 0346     		mov	r3, r0
 13167 5cf8 C7F8D430 		str	r3, [r7, #212]	@ float
 13168 5cfc D7F8D400 		ldr	r0, [r7, #212]	@ float
 13169 5d00 4FF00001 		mov	r1, #0
 13170 5d04 C4F2C821 		movt	r1, 17096
 13171 5d08 FFF7FEFF 		bl	__aeabi_fcmple
 13172 5d0c 0346     		mov	r3, r0
 13173 5d0e 002B     		cmp	r3, #0
 13174 5d10 1DD0     		beq	.L518
 13175              	.L652:
3969:.\console.c   **** 						pan_axis.param.Kpf.fnum = Kp;
 13176              		.loc 1 3969 0
 13177 5d12 40F20003 		movw	r3, #:lower16:pan_axis
 13178 5d16 C0F20003 		movt	r3, #:upper16:pan_axis
 13179 5d1a D7F8D420 		ldr	r2, [r7, #212]	@ float
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 371


 13180 5d1e 5A61     		str	r2, [r3, #20]	@ float
3972:.\console.c   **** 						dummy = WriteAllEEparams();
 13181              		.loc 1 3972 0
 13182 5d20 FFF7FEFF 		bl	WriteAllEEparams
 13183 5d24 0346     		mov	r3, r0
 13184 5d26 87F8D930 		strb	r3, [r7, #217]
3973:.\console.c   **** 						printf(STR_REM_PMKP, (float)pan_axis.param.Kpf.fnum);   /* REM: Pan Motor Kp setted to...*/		
 13185              		.loc 1 3973 0
 13186 5d2a 40F20003 		movw	r3, #:lower16:pan_axis
 13187 5d2e C0F20003 		movt	r3, #:upper16:pan_axis
 13188 5d32 5B69     		ldr	r3, [r3, #20]	@ float
 13189 5d34 1846     		mov	r0, r3
 13190 5d36 FFF7FEFF 		bl	__aeabi_f2d
 13191 5d3a 0246     		mov	r2, r0
 13192 5d3c 0B46     		mov	r3, r1
 13193 5d3e 40F20000 		movw	r0, #:lower16:.LC655
 13194 5d42 C0F20000 		movt	r0, #:upper16:.LC655
 13195 5d46 FFF7FEFF 		bl	printf
3979:.\console.c   **** 					goto exitpars;
 13196              		.loc 1 3979 0
 13197 5d4a 01F0B1B8 		b	.L131
 13198              	.L518:
3977:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13199              		.loc 1 3977 0
 13200 5d4e 40F20000 		movw	r0, #:lower16:.LC450
 13201 5d52 C0F20000 		movt	r0, #:upper16:.LC450
 13202 5d56 FFF7FEFF 		bl	printf
3979:.\console.c   **** 					goto exitpars;
 13203              		.loc 1 3979 0
 13204 5d5a 01F0A9B8 		b	.L131
 13205              	.L517:
3985:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpt") == 0)
 13206              		.loc 1 3985 0
 13207 5d5e 8A48     		ldr	r0, .L753
 13208 5d60 40F20001 		movw	r1, #:lower16:.LC656
 13209 5d64 C0F20001 		movt	r1, #:upper16:.LC656
 13210 5d68 FFF7FEFF 		bl	strcmp
 13211 5d6c 0346     		mov	r3, r0
 13212 5d6e 002B     		cmp	r3, #0
 13213 5d70 51D1     		bne	.L522
3987:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
 13214              		.loc 1 3987 0
 13215 5d72 8648     		ldr	r0, .L753+4
 13216 5d74 FFF7FEFF 		bl	atof
 13217 5d78 0246     		mov	r2, r0
 13218 5d7a 0B46     		mov	r3, r1
 13219 5d7c 1046     		mov	r0, r2
 13220 5d7e 1946     		mov	r1, r3
 13221 5d80 FFF7FEFF 		bl	__aeabi_d2f
 13222 5d84 0346     		mov	r3, r0
 13223 5d86 C7F8D430 		str	r3, [r7, #212]	@ float
 13224 5d8a D7F8D400 		ldr	r0, [r7, #212]	@ float
 13225 5d8e 4FF00001 		mov	r1, #0
 13226 5d92 FFF7FEFF 		bl	__aeabi_fcmpge
 13227 5d96 0346     		mov	r3, r0
 13228 5d98 002B     		cmp	r3, #0
 13229 5d9a 34D0     		beq	.L523
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 372


 13230              	.L653:
3988:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
 13231              		.loc 1 3988 0
 13232 5d9c 7B48     		ldr	r0, .L753+4
 13233 5d9e FFF7FEFF 		bl	atof
 13234 5da2 0246     		mov	r2, r0
 13235 5da4 0B46     		mov	r3, r1
 13236 5da6 1046     		mov	r0, r2
 13237 5da8 1946     		mov	r1, r3
 13238 5daa FFF7FEFF 		bl	__aeabi_d2f
 13239 5dae 0346     		mov	r3, r0
 13240 5db0 C7F8D430 		str	r3, [r7, #212]	@ float
 13241 5db4 D7F8D400 		ldr	r0, [r7, #212]	@ float
 13242 5db8 4FF00001 		mov	r1, #0
 13243 5dbc C4F2C821 		movt	r1, 17096
 13244 5dc0 FFF7FEFF 		bl	__aeabi_fcmple
 13245 5dc4 0346     		mov	r3, r0
 13246 5dc6 002B     		cmp	r3, #0
 13247 5dc8 1DD0     		beq	.L523
 13248              	.L654:
3990:.\console.c   **** 						tilt_axis.param.Kpf.fnum = Kp;
 13249              		.loc 1 3990 0
 13250 5dca 40F20003 		movw	r3, #:lower16:tilt_axis
 13251 5dce C0F20003 		movt	r3, #:upper16:tilt_axis
 13252 5dd2 D7F8D420 		ldr	r2, [r7, #212]	@ float
 13253 5dd6 5A61     		str	r2, [r3, #20]	@ float
3993:.\console.c   **** 						dummy = WriteAllEEparams();
 13254              		.loc 1 3993 0
 13255 5dd8 FFF7FEFF 		bl	WriteAllEEparams
 13256 5ddc 0346     		mov	r3, r0
 13257 5dde 87F8D930 		strb	r3, [r7, #217]
3994:.\console.c   **** 						printf(STR_REM_TMKP, (float)tilt_axis.param.Kpf.fnum);   /* REM: Tilt Motor Kp setted to...*/
 13258              		.loc 1 3994 0
 13259 5de2 40F20003 		movw	r3, #:lower16:tilt_axis
 13260 5de6 C0F20003 		movt	r3, #:upper16:tilt_axis
 13261 5dea 5B69     		ldr	r3, [r3, #20]	@ float
 13262 5dec 1846     		mov	r0, r3
 13263 5dee FFF7FEFF 		bl	__aeabi_f2d
 13264 5df2 0246     		mov	r2, r0
 13265 5df4 0B46     		mov	r3, r1
 13266 5df6 40F20000 		movw	r0, #:lower16:.LC657
 13267 5dfa C0F20000 		movt	r0, #:upper16:.LC657
 13268 5dfe FFF7FEFF 		bl	printf
4000:.\console.c   **** 					goto exitpars;
 13269              		.loc 1 4000 0
 13270 5e02 01F055B8 		b	.L131
 13271              	.L523:
3998:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13272              		.loc 1 3998 0
 13273 5e06 40F20000 		movw	r0, #:lower16:.LC450
 13274 5e0a C0F20000 		movt	r0, #:upper16:.LC450
 13275 5e0e FFF7FEFF 		bl	printf
4000:.\console.c   **** 					goto exitpars;
 13276              		.loc 1 4000 0
 13277 5e12 01F04DB8 		b	.L131
 13278              	.L522:
4006:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdp") == 0)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 373


 13279              		.loc 1 4006 0
 13280 5e16 5C48     		ldr	r0, .L753
 13281 5e18 40F20001 		movw	r1, #:lower16:.LC658
 13282 5e1c C0F20001 		movt	r1, #:upper16:.LC658
 13283 5e20 FFF7FEFF 		bl	strcmp
 13284 5e24 0346     		mov	r3, r0
 13285 5e26 002B     		cmp	r3, #0
 13286 5e28 51D1     		bne	.L527
4008:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
 13287              		.loc 1 4008 0
 13288 5e2a 5848     		ldr	r0, .L753+4
 13289 5e2c FFF7FEFF 		bl	atof
 13290 5e30 0246     		mov	r2, r0
 13291 5e32 0B46     		mov	r3, r1
 13292 5e34 1046     		mov	r0, r2
 13293 5e36 1946     		mov	r1, r3
 13294 5e38 FFF7FEFF 		bl	__aeabi_d2f
 13295 5e3c 0346     		mov	r3, r0
 13296 5e3e C7F8D030 		str	r3, [r7, #208]	@ float
 13297 5e42 D7F8D000 		ldr	r0, [r7, #208]	@ float
 13298 5e46 4FF00001 		mov	r1, #0
 13299 5e4a FFF7FEFF 		bl	__aeabi_fcmpge
 13300 5e4e 0346     		mov	r3, r0
 13301 5e50 002B     		cmp	r3, #0
 13302 5e52 34D0     		beq	.L528
 13303              	.L655:
4009:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
 13304              		.loc 1 4009 0
 13305 5e54 4D48     		ldr	r0, .L753+4
 13306 5e56 FFF7FEFF 		bl	atof
 13307 5e5a 0246     		mov	r2, r0
 13308 5e5c 0B46     		mov	r3, r1
 13309 5e5e 1046     		mov	r0, r2
 13310 5e60 1946     		mov	r1, r3
 13311 5e62 FFF7FEFF 		bl	__aeabi_d2f
 13312 5e66 0346     		mov	r3, r0
 13313 5e68 C7F8D030 		str	r3, [r7, #208]	@ float
 13314 5e6c D7F8D000 		ldr	r0, [r7, #208]	@ float
 13315 5e70 4FF00001 		mov	r1, #0
 13316 5e74 C4F27A41 		movt	r1, 17530
 13317 5e78 FFF7FEFF 		bl	__aeabi_fcmple
 13318 5e7c 0346     		mov	r3, r0
 13319 5e7e 002B     		cmp	r3, #0
 13320 5e80 1DD0     		beq	.L528
 13321              	.L656:
4011:.\console.c   **** 						pan_axis.param.Kdf.fnum = Kd;
 13322              		.loc 1 4011 0
 13323 5e82 40F20003 		movw	r3, #:lower16:pan_axis
 13324 5e86 C0F20003 		movt	r3, #:upper16:pan_axis
 13325 5e8a D7F8D020 		ldr	r2, [r7, #208]	@ float
 13326 5e8e 9A61     		str	r2, [r3, #24]	@ float
4014:.\console.c   **** 						dummy = WriteAllEEparams();
 13327              		.loc 1 4014 0
 13328 5e90 FFF7FEFF 		bl	WriteAllEEparams
 13329 5e94 0346     		mov	r3, r0
 13330 5e96 87F8D930 		strb	r3, [r7, #217]
4015:.\console.c   **** 						printf(STR_REM_PMKD, (float)pan_axis.param.Kdf.fnum);   /* REM: Pan Motor Kd setted to...*/		
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 374


 13331              		.loc 1 4015 0
 13332 5e9a 40F20003 		movw	r3, #:lower16:pan_axis
 13333 5e9e C0F20003 		movt	r3, #:upper16:pan_axis
 13334 5ea2 9B69     		ldr	r3, [r3, #24]	@ float
 13335 5ea4 1846     		mov	r0, r3
 13336 5ea6 FFF7FEFF 		bl	__aeabi_f2d
 13337 5eaa 0246     		mov	r2, r0
 13338 5eac 0B46     		mov	r3, r1
 13339 5eae 40F20000 		movw	r0, #:lower16:.LC659
 13340 5eb2 C0F20000 		movt	r0, #:upper16:.LC659
 13341 5eb6 FFF7FEFF 		bl	printf
4021:.\console.c   **** 					goto exitpars;
 13342              		.loc 1 4021 0
 13343 5eba 00F0F9BF 		b	.L131
 13344              	.L528:
4019:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13345              		.loc 1 4019 0
 13346 5ebe 40F20000 		movw	r0, #:lower16:.LC450
 13347 5ec2 C0F20000 		movt	r0, #:upper16:.LC450
 13348 5ec6 FFF7FEFF 		bl	printf
4021:.\console.c   **** 					goto exitpars;
 13349              		.loc 1 4021 0
 13350 5eca 00F0F1BF 		b	.L131
 13351              	.L527:
4027:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdt") == 0)
 13352              		.loc 1 4027 0
 13353 5ece 2E48     		ldr	r0, .L753
 13354 5ed0 40F20001 		movw	r1, #:lower16:.LC660
 13355 5ed4 C0F20001 		movt	r1, #:upper16:.LC660
 13356 5ed8 FFF7FEFF 		bl	strcmp
 13357 5edc 0346     		mov	r3, r0
 13358 5ede 002B     		cmp	r3, #0
 13359 5ee0 56D1     		bne	.L532
4029:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
 13360              		.loc 1 4029 0
 13361 5ee2 2A48     		ldr	r0, .L753+4
 13362 5ee4 FFF7FEFF 		bl	atof
 13363 5ee8 0246     		mov	r2, r0
 13364 5eea 0B46     		mov	r3, r1
 13365 5eec 1046     		mov	r0, r2
 13366 5eee 1946     		mov	r1, r3
 13367 5ef0 FFF7FEFF 		bl	__aeabi_d2f
 13368 5ef4 0346     		mov	r3, r0
 13369 5ef6 C7F8D030 		str	r3, [r7, #208]	@ float
 13370 5efa D7F8D000 		ldr	r0, [r7, #208]	@ float
 13371 5efe 4FF00001 		mov	r1, #0
 13372 5f02 FFF7FEFF 		bl	__aeabi_fcmpge
 13373 5f06 0346     		mov	r3, r0
 13374 5f08 002B     		cmp	r3, #0
 13375 5f0a 34D0     		beq	.L533
 13376              	.L657:
4030:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
 13377              		.loc 1 4030 0
 13378 5f0c 1F48     		ldr	r0, .L753+4
 13379 5f0e FFF7FEFF 		bl	atof
 13380 5f12 0246     		mov	r2, r0
 13381 5f14 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 375


 13382 5f16 1046     		mov	r0, r2
 13383 5f18 1946     		mov	r1, r3
 13384 5f1a FFF7FEFF 		bl	__aeabi_d2f
 13385 5f1e 0346     		mov	r3, r0
 13386 5f20 C7F8D030 		str	r3, [r7, #208]	@ float
 13387 5f24 D7F8D000 		ldr	r0, [r7, #208]	@ float
 13388 5f28 4FF00001 		mov	r1, #0
 13389 5f2c C4F27A41 		movt	r1, 17530
 13390 5f30 FFF7FEFF 		bl	__aeabi_fcmple
 13391 5f34 0346     		mov	r3, r0
 13392 5f36 002B     		cmp	r3, #0
 13393 5f38 1DD0     		beq	.L533
 13394              	.L658:
4032:.\console.c   **** 						tilt_axis.param.Kdf.fnum = Kd;
 13395              		.loc 1 4032 0
 13396 5f3a 40F20003 		movw	r3, #:lower16:tilt_axis
 13397 5f3e C0F20003 		movt	r3, #:upper16:tilt_axis
 13398 5f42 D7F8D020 		ldr	r2, [r7, #208]	@ float
 13399 5f46 9A61     		str	r2, [r3, #24]	@ float
4035:.\console.c   **** 						dummy = WriteAllEEparams();
 13400              		.loc 1 4035 0
 13401 5f48 FFF7FEFF 		bl	WriteAllEEparams
 13402 5f4c 0346     		mov	r3, r0
 13403 5f4e 87F8D930 		strb	r3, [r7, #217]
4036:.\console.c   **** 						printf(STR_REM_TMKD, (float)tilt_axis.param.Kdf.fnum);   /* REM: Tilt Motor Kd setted to...*/
 13404              		.loc 1 4036 0
 13405 5f52 40F20003 		movw	r3, #:lower16:tilt_axis
 13406 5f56 C0F20003 		movt	r3, #:upper16:tilt_axis
 13407 5f5a 9B69     		ldr	r3, [r3, #24]	@ float
 13408 5f5c 1846     		mov	r0, r3
 13409 5f5e FFF7FEFF 		bl	__aeabi_f2d
 13410 5f62 0246     		mov	r2, r0
 13411 5f64 0B46     		mov	r3, r1
 13412 5f66 40F20000 		movw	r0, #:lower16:.LC661
 13413 5f6a C0F20000 		movt	r0, #:upper16:.LC661
 13414 5f6e FFF7FEFF 		bl	printf
4042:.\console.c   **** 					goto exitpars;
 13415              		.loc 1 4042 0
 13416 5f72 00F09DBF 		b	.L131
 13417              	.L533:
4040:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13418              		.loc 1 4040 0
 13419 5f76 40F20000 		movw	r0, #:lower16:.LC450
 13420 5f7a C0F20000 		movt	r0, #:upper16:.LC450
 13421 5f7e FFF7FEFF 		bl	printf
4042:.\console.c   **** 					goto exitpars;
 13422              		.loc 1 4042 0
 13423 5f82 00F095BF 		b	.L131
 13424              	.L754:
 13425 5f86 00BF     		.align	2
 13426              	.L753:
 13427 5f88 0F000000 		.word	actual_cmd+15
 13428 5f8c 1E000000 		.word	actual_cmd+30
 13429              	.L532:
4048:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kip") == 0)
 13430              		.loc 1 4048 0
 13431 5f90 B748     		ldr	r0, .L755
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 376


 13432 5f92 40F20001 		movw	r1, #:lower16:.LC662
 13433 5f96 C0F20001 		movt	r1, #:upper16:.LC662
 13434 5f9a FFF7FEFF 		bl	strcmp
 13435 5f9e 0346     		mov	r3, r0
 13436 5fa0 002B     		cmp	r3, #0
 13437 5fa2 51D1     		bne	.L537
4050:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
 13438              		.loc 1 4050 0
 13439 5fa4 B348     		ldr	r0, .L755+4
 13440 5fa6 FFF7FEFF 		bl	atof
 13441 5faa 0246     		mov	r2, r0
 13442 5fac 0B46     		mov	r3, r1
 13443 5fae 1046     		mov	r0, r2
 13444 5fb0 1946     		mov	r1, r3
 13445 5fb2 FFF7FEFF 		bl	__aeabi_d2f
 13446 5fb6 0346     		mov	r3, r0
 13447 5fb8 C7F8CC30 		str	r3, [r7, #204]	@ float
 13448 5fbc D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13449 5fc0 4FF00001 		mov	r1, #0
 13450 5fc4 FFF7FEFF 		bl	__aeabi_fcmpge
 13451 5fc8 0346     		mov	r3, r0
 13452 5fca 002B     		cmp	r3, #0
 13453 5fcc 34D0     		beq	.L538
 13454              	.L659:
4051:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
 13455              		.loc 1 4051 0
 13456 5fce A948     		ldr	r0, .L755+4
 13457 5fd0 FFF7FEFF 		bl	atof
 13458 5fd4 0246     		mov	r2, r0
 13459 5fd6 0B46     		mov	r3, r1
 13460 5fd8 1046     		mov	r0, r2
 13461 5fda 1946     		mov	r1, r3
 13462 5fdc FFF7FEFF 		bl	__aeabi_d2f
 13463 5fe0 0346     		mov	r3, r0
 13464 5fe2 C7F8CC30 		str	r3, [r7, #204]	@ float
 13465 5fe6 D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13466 5fea 4FF00001 		mov	r1, #0
 13467 5fee C4F2C821 		movt	r1, 17096
 13468 5ff2 FFF7FEFF 		bl	__aeabi_fcmple
 13469 5ff6 0346     		mov	r3, r0
 13470 5ff8 002B     		cmp	r3, #0
 13471 5ffa 1DD0     		beq	.L538
 13472              	.L660:
4053:.\console.c   **** 						pan_axis.param.Kif.fnum = Ki;
 13473              		.loc 1 4053 0
 13474 5ffc 40F20003 		movw	r3, #:lower16:pan_axis
 13475 6000 C0F20003 		movt	r3, #:upper16:pan_axis
 13476 6004 D7F8CC20 		ldr	r2, [r7, #204]	@ float
 13477 6008 DA61     		str	r2, [r3, #28]	@ float
4056:.\console.c   **** 						dummy = WriteAllEEparams();
 13478              		.loc 1 4056 0
 13479 600a FFF7FEFF 		bl	WriteAllEEparams
 13480 600e 0346     		mov	r3, r0
 13481 6010 87F8D930 		strb	r3, [r7, #217]
4057:.\console.c   **** 						printf(STR_REM_PMKI, (float)pan_axis.param.Kif.fnum);   /* REM: Pan Motor Ki setted to...*/		
 13482              		.loc 1 4057 0
 13483 6014 40F20003 		movw	r3, #:lower16:pan_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 377


 13484 6018 C0F20003 		movt	r3, #:upper16:pan_axis
 13485 601c DB69     		ldr	r3, [r3, #28]	@ float
 13486 601e 1846     		mov	r0, r3
 13487 6020 FFF7FEFF 		bl	__aeabi_f2d
 13488 6024 0246     		mov	r2, r0
 13489 6026 0B46     		mov	r3, r1
 13490 6028 40F20000 		movw	r0, #:lower16:.LC663
 13491 602c C0F20000 		movt	r0, #:upper16:.LC663
 13492 6030 FFF7FEFF 		bl	printf
4063:.\console.c   **** 					goto exitpars;
 13493              		.loc 1 4063 0
 13494 6034 00F03CBF 		b	.L131
 13495              	.L538:
4061:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13496              		.loc 1 4061 0
 13497 6038 40F20000 		movw	r0, #:lower16:.LC450
 13498 603c C0F20000 		movt	r0, #:upper16:.LC450
 13499 6040 FFF7FEFF 		bl	printf
4063:.\console.c   **** 					goto exitpars;
 13500              		.loc 1 4063 0
 13501 6044 00F034BF 		b	.L131
 13502              	.L537:
4069:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kit") == 0)
 13503              		.loc 1 4069 0
 13504 6048 8948     		ldr	r0, .L755
 13505 604a 40F20001 		movw	r1, #:lower16:.LC664
 13506 604e C0F20001 		movt	r1, #:upper16:.LC664
 13507 6052 FFF7FEFF 		bl	strcmp
 13508 6056 0346     		mov	r3, r0
 13509 6058 002B     		cmp	r3, #0
 13510 605a 51D1     		bne	.L542
4071:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
 13511              		.loc 1 4071 0
 13512 605c 8548     		ldr	r0, .L755+4
 13513 605e FFF7FEFF 		bl	atof
 13514 6062 0246     		mov	r2, r0
 13515 6064 0B46     		mov	r3, r1
 13516 6066 1046     		mov	r0, r2
 13517 6068 1946     		mov	r1, r3
 13518 606a FFF7FEFF 		bl	__aeabi_d2f
 13519 606e 0346     		mov	r3, r0
 13520 6070 C7F8CC30 		str	r3, [r7, #204]	@ float
 13521 6074 D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13522 6078 4FF00001 		mov	r1, #0
 13523 607c FFF7FEFF 		bl	__aeabi_fcmpge
 13524 6080 0346     		mov	r3, r0
 13525 6082 002B     		cmp	r3, #0
 13526 6084 34D0     		beq	.L543
 13527              	.L661:
4072:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
 13528              		.loc 1 4072 0
 13529 6086 7B48     		ldr	r0, .L755+4
 13530 6088 FFF7FEFF 		bl	atof
 13531 608c 0246     		mov	r2, r0
 13532 608e 0B46     		mov	r3, r1
 13533 6090 1046     		mov	r0, r2
 13534 6092 1946     		mov	r1, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 378


 13535 6094 FFF7FEFF 		bl	__aeabi_d2f
 13536 6098 0346     		mov	r3, r0
 13537 609a C7F8CC30 		str	r3, [r7, #204]	@ float
 13538 609e D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13539 60a2 4FF00001 		mov	r1, #0
 13540 60a6 C4F2C821 		movt	r1, 17096
 13541 60aa FFF7FEFF 		bl	__aeabi_fcmple
 13542 60ae 0346     		mov	r3, r0
 13543 60b0 002B     		cmp	r3, #0
 13544 60b2 1DD0     		beq	.L543
 13545              	.L662:
4074:.\console.c   **** 						tilt_axis.param.Kif.fnum = Ki;
 13546              		.loc 1 4074 0
 13547 60b4 40F20003 		movw	r3, #:lower16:tilt_axis
 13548 60b8 C0F20003 		movt	r3, #:upper16:tilt_axis
 13549 60bc D7F8CC20 		ldr	r2, [r7, #204]	@ float
 13550 60c0 DA61     		str	r2, [r3, #28]	@ float
4077:.\console.c   **** 						dummy = WriteAllEEparams();
 13551              		.loc 1 4077 0
 13552 60c2 FFF7FEFF 		bl	WriteAllEEparams
 13553 60c6 0346     		mov	r3, r0
 13554 60c8 87F8D930 		strb	r3, [r7, #217]
4078:.\console.c   **** 						printf(STR_REM_TMKI, (float)tilt_axis.param.Kif.fnum);   /* REM: Tilt Motor Ki setted to...*/
 13555              		.loc 1 4078 0
 13556 60cc 40F20003 		movw	r3, #:lower16:tilt_axis
 13557 60d0 C0F20003 		movt	r3, #:upper16:tilt_axis
 13558 60d4 DB69     		ldr	r3, [r3, #28]	@ float
 13559 60d6 1846     		mov	r0, r3
 13560 60d8 FFF7FEFF 		bl	__aeabi_f2d
 13561 60dc 0246     		mov	r2, r0
 13562 60de 0B46     		mov	r3, r1
 13563 60e0 40F20000 		movw	r0, #:lower16:.LC665
 13564 60e4 C0F20000 		movt	r0, #:upper16:.LC665
 13565 60e8 FFF7FEFF 		bl	printf
4084:.\console.c   **** 					goto exitpars;
 13566              		.loc 1 4084 0
 13567 60ec 00F0E0BE 		b	.L131
 13568              	.L543:
4082:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13569              		.loc 1 4082 0
 13570 60f0 40F20000 		movw	r0, #:lower16:.LC450
 13571 60f4 C0F20000 		movt	r0, #:upper16:.LC450
 13572 60f8 FFF7FEFF 		bl	printf
4084:.\console.c   **** 					goto exitpars;
 13573              		.loc 1 4084 0
 13574 60fc 00F0D8BE 		b	.L131
 13575              	.L542:
4090:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksip") == 0)
 13576              		.loc 1 4090 0
 13577 6100 5B48     		ldr	r0, .L755
 13578 6102 40F20001 		movw	r1, #:lower16:.LC666
 13579 6106 C0F20001 		movt	r1, #:upper16:.LC666
 13580 610a FFF7FEFF 		bl	strcmp
 13581 610e 0346     		mov	r3, r0
 13582 6110 002B     		cmp	r3, #0
 13583 6112 51D1     		bne	.L547
4092:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 379


 13584              		.loc 1 4092 0
 13585 6114 5748     		ldr	r0, .L755+4
 13586 6116 FFF7FEFF 		bl	atof
 13587 611a 0246     		mov	r2, r0
 13588 611c 0B46     		mov	r3, r1
 13589 611e 1046     		mov	r0, r2
 13590 6120 1946     		mov	r1, r3
 13591 6122 FFF7FEFF 		bl	__aeabi_d2f
 13592 6126 0346     		mov	r3, r0
 13593 6128 C7F8C830 		str	r3, [r7, #200]	@ float
 13594 612c D7F8C800 		ldr	r0, [r7, #200]	@ float
 13595 6130 4FF00001 		mov	r1, #0
 13596 6134 FFF7FEFF 		bl	__aeabi_fcmpge
 13597 6138 0346     		mov	r3, r0
 13598 613a 002B     		cmp	r3, #0
 13599 613c 34D0     		beq	.L548
 13600              	.L663:
4093:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
 13601              		.loc 1 4093 0
 13602 613e 4D48     		ldr	r0, .L755+4
 13603 6140 FFF7FEFF 		bl	atof
 13604 6144 0246     		mov	r2, r0
 13605 6146 0B46     		mov	r3, r1
 13606 6148 1046     		mov	r0, r2
 13607 614a 1946     		mov	r1, r3
 13608 614c FFF7FEFF 		bl	__aeabi_d2f
 13609 6150 0346     		mov	r3, r0
 13610 6152 C7F8C830 		str	r3, [r7, #200]	@ float
 13611 6156 D7F8C800 		ldr	r0, [r7, #200]	@ float
 13612 615a 4FF41051 		mov	r1, #9216
 13613 615e C4F67411 		movt	r1, 18804
 13614 6162 FFF7FEFF 		bl	__aeabi_fcmple
 13615 6166 0346     		mov	r3, r0
 13616 6168 002B     		cmp	r3, #0
 13617 616a 1DD0     		beq	.L548
 13618              	.L664:
4095:.\console.c   **** 						pan_axis.param.Ksif.fnum = Ksi;
 13619              		.loc 1 4095 0
 13620 616c 40F20003 		movw	r3, #:lower16:pan_axis
 13621 6170 C0F20003 		movt	r3, #:upper16:pan_axis
 13622 6174 D7F8C820 		ldr	r2, [r7, #200]	@ float
 13623 6178 1A62     		str	r2, [r3, #32]	@ float
4098:.\console.c   **** 						dummy = WriteAllEEparams();
 13624              		.loc 1 4098 0
 13625 617a FFF7FEFF 		bl	WriteAllEEparams
 13626 617e 0346     		mov	r3, r0
 13627 6180 87F8D930 		strb	r3, [r7, #217]
4099:.\console.c   **** 						printf(STR_REM_PMKS, (float)pan_axis.param.Ksif.fnum);   /* REM: Pan Motor Ksi setted to...*/
 13628              		.loc 1 4099 0
 13629 6184 40F20003 		movw	r3, #:lower16:pan_axis
 13630 6188 C0F20003 		movt	r3, #:upper16:pan_axis
 13631 618c 1B6A     		ldr	r3, [r3, #32]	@ float
 13632 618e 1846     		mov	r0, r3
 13633 6190 FFF7FEFF 		bl	__aeabi_f2d
 13634 6194 0246     		mov	r2, r0
 13635 6196 0B46     		mov	r3, r1
 13636 6198 40F20000 		movw	r0, #:lower16:.LC667
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 380


 13637 619c C0F20000 		movt	r0, #:upper16:.LC667
 13638 61a0 FFF7FEFF 		bl	printf
4105:.\console.c   **** 					goto exitpars;
 13639              		.loc 1 4105 0
 13640 61a4 00F084BE 		b	.L131
 13641              	.L548:
4103:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13642              		.loc 1 4103 0
 13643 61a8 40F20000 		movw	r0, #:lower16:.LC450
 13644 61ac C0F20000 		movt	r0, #:upper16:.LC450
 13645 61b0 FFF7FEFF 		bl	printf
4105:.\console.c   **** 					goto exitpars;
 13646              		.loc 1 4105 0
 13647 61b4 00F07CBE 		b	.L131
 13648              	.L547:
4111:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksit") == 0)
 13649              		.loc 1 4111 0
 13650 61b8 2D48     		ldr	r0, .L755
 13651 61ba 40F20001 		movw	r1, #:lower16:.LC668
 13652 61be C0F20001 		movt	r1, #:upper16:.LC668
 13653 61c2 FFF7FEFF 		bl	strcmp
 13654 61c6 0346     		mov	r3, r0
 13655 61c8 002B     		cmp	r3, #0
 13656 61ca 55D1     		bne	.L552
4113:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
 13657              		.loc 1 4113 0
 13658 61cc 2948     		ldr	r0, .L755+4
 13659 61ce FFF7FEFF 		bl	atof
 13660 61d2 0246     		mov	r2, r0
 13661 61d4 0B46     		mov	r3, r1
 13662 61d6 1046     		mov	r0, r2
 13663 61d8 1946     		mov	r1, r3
 13664 61da FFF7FEFF 		bl	__aeabi_d2f
 13665 61de 0346     		mov	r3, r0
 13666 61e0 C7F8C830 		str	r3, [r7, #200]	@ float
 13667 61e4 D7F8C800 		ldr	r0, [r7, #200]	@ float
 13668 61e8 4FF00001 		mov	r1, #0
 13669 61ec FFF7FEFF 		bl	__aeabi_fcmpge
 13670 61f0 0346     		mov	r3, r0
 13671 61f2 002B     		cmp	r3, #0
 13672 61f4 34D0     		beq	.L553
 13673              	.L665:
4114:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
 13674              		.loc 1 4114 0
 13675 61f6 1F48     		ldr	r0, .L755+4
 13676 61f8 FFF7FEFF 		bl	atof
 13677 61fc 0246     		mov	r2, r0
 13678 61fe 0B46     		mov	r3, r1
 13679 6200 1046     		mov	r0, r2
 13680 6202 1946     		mov	r1, r3
 13681 6204 FFF7FEFF 		bl	__aeabi_d2f
 13682 6208 0346     		mov	r3, r0
 13683 620a C7F8C830 		str	r3, [r7, #200]	@ float
 13684 620e D7F8C800 		ldr	r0, [r7, #200]	@ float
 13685 6212 4FF41051 		mov	r1, #9216
 13686 6216 C4F67411 		movt	r1, 18804
 13687 621a FFF7FEFF 		bl	__aeabi_fcmple
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 381


 13688 621e 0346     		mov	r3, r0
 13689 6220 002B     		cmp	r3, #0
 13690 6222 1DD0     		beq	.L553
 13691              	.L666:
4116:.\console.c   **** 						tilt_axis.param.Ksif.fnum = Ksi;
 13692              		.loc 1 4116 0
 13693 6224 40F20003 		movw	r3, #:lower16:tilt_axis
 13694 6228 C0F20003 		movt	r3, #:upper16:tilt_axis
 13695 622c D7F8C820 		ldr	r2, [r7, #200]	@ float
 13696 6230 1A62     		str	r2, [r3, #32]	@ float
4119:.\console.c   **** 						dummy = WriteAllEEparams();
 13697              		.loc 1 4119 0
 13698 6232 FFF7FEFF 		bl	WriteAllEEparams
 13699 6236 0346     		mov	r3, r0
 13700 6238 87F8D930 		strb	r3, [r7, #217]
4120:.\console.c   **** 						printf(STR_REM_TMKS, (float)tilt_axis.param.Ksif.fnum);   /* REM: Tilt Motor Ksi setted to...
 13701              		.loc 1 4120 0
 13702 623c 40F20003 		movw	r3, #:lower16:tilt_axis
 13703 6240 C0F20003 		movt	r3, #:upper16:tilt_axis
 13704 6244 1B6A     		ldr	r3, [r3, #32]	@ float
 13705 6246 1846     		mov	r0, r3
 13706 6248 FFF7FEFF 		bl	__aeabi_f2d
 13707 624c 0246     		mov	r2, r0
 13708 624e 0B46     		mov	r3, r1
 13709 6250 40F20000 		movw	r0, #:lower16:.LC669
 13710 6254 C0F20000 		movt	r0, #:upper16:.LC669
 13711 6258 FFF7FEFF 		bl	printf
4126:.\console.c   **** 					goto exitpars;
 13712              		.loc 1 4126 0
 13713 625c 00F028BE 		b	.L131
 13714              	.L553:
4124:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13715              		.loc 1 4124 0
 13716 6260 40F20000 		movw	r0, #:lower16:.LC450
 13717 6264 C0F20000 		movt	r0, #:upper16:.LC450
 13718 6268 FFF7FEFF 		bl	printf
4126:.\console.c   **** 					goto exitpars;
 13719              		.loc 1 4126 0
 13720 626c 00F020BE 		b	.L131
 13721              	.L756:
 13722              		.align	2
 13723              	.L755:
 13724 6270 0F000000 		.word	actual_cmd+15
 13725 6274 1E000000 		.word	actual_cmd+30
 13726              	.L552:
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
 13727              		.loc 1 4132 0
 13728 6278 B148     		ldr	r0, .L757
 13729 627a 40F20001 		movw	r1, #:lower16:.LC670
 13730 627e C0F20001 		movt	r1, #:upper16:.LC670
 13731 6282 FFF7FEFF 		bl	strcmp
 13732 6286 0346     		mov	r3, r0
 13733 6288 002B     		cmp	r3, #0
 13734 628a 09D0     		beq	.L557
4133:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaxis") == 0))
 13735              		.loc 1 4133 0 discriminator 1
 13736 628c AC48     		ldr	r0, .L757
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 382


 13737 628e 40F20001 		movw	r1, #:lower16:.LC671
 13738 6292 C0F20001 		movt	r1, #:upper16:.LC671
 13739 6296 FFF7FEFF 		bl	strcmp
 13740 629a 0346     		mov	r3, r0
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
 13741              		.loc 1 4132 0 discriminator 1
 13742 629c 002B     		cmp	r3, #0
 13743 629e 78D1     		bne	.L558
 13744              	.L557:
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
 13745              		.loc 1 4135 0
 13746 62a0 A848     		ldr	r0, .L757+4
 13747 62a2 40F20001 		movw	r1, #:lower16:.LC672
 13748 62a6 C0F20001 		movt	r1, #:upper16:.LC672
 13749 62aa FFF7FEFF 		bl	strcmp
 13750 62ae 0346     		mov	r3, r0
 13751 62b0 002B     		cmp	r3, #0
 13752 62b2 09D0     		beq	.L559
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
 13753              		.loc 1 4135 0 is_stmt 0 discriminator 1
 13754 62b4 A348     		ldr	r0, .L757+4
 13755 62b6 40F20001 		movw	r1, #:lower16:.LC673
 13756 62ba C0F20001 		movt	r1, #:upper16:.LC673
 13757 62be FFF7FEFF 		bl	strcmp
 13758 62c2 0346     		mov	r3, r0
 13759 62c4 002B     		cmp	r3, #0
 13760 62c6 5CD1     		bne	.L560
 13761              	.L559:
4137:.\console.c   **** 						if (strcmp(actual_cmd.number1, "pan") == 0)
 13762              		.loc 1 4137 0 is_stmt 1
 13763 62c8 9E48     		ldr	r0, .L757+4
 13764 62ca 40F20001 		movw	r1, #:lower16:.LC672
 13765 62ce C0F20001 		movt	r1, #:upper16:.LC672
 13766 62d2 FFF7FEFF 		bl	strcmp
 13767 62d6 0346     		mov	r3, r0
 13768 62d8 002B     		cmp	r3, #0
 13769 62da 20D1     		bne	.L561
4140:.\console.c   **** 							Selected_ANAOUT=&pan_axis;
 13770              		.loc 1 4140 0
 13771 62dc 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 13772 62e0 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 13773 62e4 40F20002 		movw	r2, #:lower16:pan_axis
 13774 62e8 C0F20002 		movt	r2, #:upper16:pan_axis
 13775 62ec 1A60     		str	r2, [r3, #0]
4141:.\console.c   **** 							printf(STR_REM_ANAXP);   /* REM: Anaout Axis setted to PAN*/
 13776              		.loc 1 4141 0
 13777 62ee 40F20000 		movw	r0, #:lower16:.LC674
 13778 62f2 C0F20000 		movt	r0, #:upper16:.LC674
 13779 62f6 FFF7FEFF 		bl	puts
4143:.\console.c   **** 							CyDelay(100);
 13780              		.loc 1 4143 0
 13781 62fa 4FF06400 		mov	r0, #100
 13782 62fe FFF7FEFF 		bl	CyDelay
4144:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
 13783              		.loc 1 4144 0
 13784 6302 40F20000 		movw	r0, #:lower16:.LC675
 13785 6306 C0F20000 		movt	r0, #:upper16:.LC675
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 383


 13786 630a FFF7FEFF 		bl	puts
4146:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();							
 13787              		.loc 1 4146 0
 13788 630e FFF7FEFF 		bl	GetAnaposOffsetZero
 13789 6312 0246     		mov	r2, r0
 13790 6314 40F20003 		movw	r3, #:lower16:anapos_offset
 13791 6318 C0F20003 		movt	r3, #:upper16:anapos_offset
 13792 631c 1A60     		str	r2, [r3, #0]
 13793              	.L561:
4149:.\console.c   **** 						if (strcmp(actual_cmd.number1, "tilt") == 0)
 13794              		.loc 1 4149 0
 13795 631e 8948     		ldr	r0, .L757+4
 13796 6320 40F20001 		movw	r1, #:lower16:.LC673
 13797 6324 C0F20001 		movt	r1, #:upper16:.LC673
 13798 6328 FFF7FEFF 		bl	strcmp
 13799 632c 0346     		mov	r3, r0
 13800 632e 002B     		cmp	r3, #0
 13801 6330 20D1     		bne	.L562
4152:.\console.c   **** 							Selected_ANAOUT=&tilt_axis;
 13802              		.loc 1 4152 0
 13803 6332 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 13804 6336 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 13805 633a 40F20002 		movw	r2, #:lower16:tilt_axis
 13806 633e C0F20002 		movt	r2, #:upper16:tilt_axis
 13807 6342 1A60     		str	r2, [r3, #0]
4153:.\console.c   **** 							printf(STR_REM_ANAXT);   /* REM: Anaout Axis setted to TILT*/
 13808              		.loc 1 4153 0
 13809 6344 40F20000 		movw	r0, #:lower16:.LC676
 13810 6348 C0F20000 		movt	r0, #:upper16:.LC676
 13811 634c FFF7FEFF 		bl	puts
4155:.\console.c   **** 							CyDelay(100);
 13812              		.loc 1 4155 0
 13813 6350 4FF06400 		mov	r0, #100
 13814 6354 FFF7FEFF 		bl	CyDelay
4156:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
 13815              		.loc 1 4156 0
 13816 6358 40F20000 		movw	r0, #:lower16:.LC675
 13817 635c C0F20000 		movt	r0, #:upper16:.LC675
 13818 6360 FFF7FEFF 		bl	puts
4158:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();	
 13819              		.loc 1 4158 0
 13820 6364 FFF7FEFF 		bl	GetAnaposOffsetZero
 13821 6368 0246     		mov	r2, r0
 13822 636a 40F20003 		movw	r3, #:lower16:anapos_offset
 13823 636e C0F20003 		movt	r3, #:upper16:anapos_offset
 13824 6372 1A60     		str	r2, [r3, #0]
 13825              	.L562:
4162:.\console.c   **** 						dummy = WriteAllEEparams();
 13826              		.loc 1 4162 0
 13827 6374 FFF7FEFF 		bl	WriteAllEEparams
 13828 6378 0346     		mov	r3, r0
 13829 637a 87F8D930 		strb	r3, [r7, #217]
4168:.\console.c   **** 					goto exitpars;
 13830              		.loc 1 4168 0
 13831 637e 00F097BD 		b	.L131
 13832              	.L560:
4166:.\console.c   **** 						printf(STR_ERROR6);			/* ERROR6: Axis may be [pan,tilt,roll,all] */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 384


 13833              		.loc 1 4166 0
 13834 6382 40F20000 		movw	r0, #:lower16:.LC677
 13835 6386 C0F20000 		movt	r0, #:upper16:.LC677
 13836 638a FFF7FEFF 		bl	printf
4168:.\console.c   **** 					goto exitpars;
 13837              		.loc 1 4168 0
 13838 638e 00F08FBD 		b	.L131
 13839              	.L558:
4174:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colorp") == 0)
 13840              		.loc 1 4174 0
 13841 6392 6B48     		ldr	r0, .L757
 13842 6394 40F20001 		movw	r1, #:lower16:.LC678
 13843 6398 C0F20001 		movt	r1, #:upper16:.LC678
 13844 639c FFF7FEFF 		bl	strcmp
 13845 63a0 0346     		mov	r3, r0
 13846 63a2 002B     		cmp	r3, #0
 13847 63a4 32D1     		bne	.L564
4176:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
 13848              		.loc 1 4176 0
 13849 63a6 6748     		ldr	r0, .L757+4
 13850 63a8 FFF7FEFF 		bl	atoi
 13851 63ac 0346     		mov	r3, r0
 13852 63ae 87F8C730 		strb	r3, [r7, #199]
4177:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
 13853              		.loc 1 4177 0
 13854 63b2 6448     		ldr	r0, .L757+4
 13855 63b4 FFF7FEFF 		bl	atoi
 13856 63b8 0346     		mov	r3, r0
 13857 63ba 87F8C730 		strb	r3, [r7, #199]
 13858 63be 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 13859 63c2 082B     		cmp	r3, #8
 13860 63c4 1AD8     		bhi	.L565
4179:.\console.c   **** 						pan_axis.param.color = color;
 13861              		.loc 1 4179 0
 13862 63c6 40F20003 		movw	r3, #:lower16:pan_axis
 13863 63ca C0F20003 		movt	r3, #:upper16:pan_axis
 13864 63ce 97F8C720 		ldrb	r2, [r7, #199]
 13865 63d2 83F82C20 		strb	r2, [r3, #44]
4182:.\console.c   **** 						dummy = WriteAllEEparams();
 13866              		.loc 1 4182 0
 13867 63d6 FFF7FEFF 		bl	WriteAllEEparams
 13868 63da 0346     		mov	r3, r0
 13869 63dc 87F8D930 		strb	r3, [r7, #217]
4183:.\console.c   **** 						printf(STR_REM_SCOL);   /* REM: pan axis color setted to...*/
 13870              		.loc 1 4183 0
 13871 63e0 40F20000 		movw	r0, #:lower16:.LC679
 13872 63e4 C0F20000 		movt	r0, #:upper16:.LC679
 13873 63e8 FFF7FEFF 		bl	printf
4184:.\console.c   **** 						ShowParamsColor(&pan_axis);
 13874              		.loc 1 4184 0
 13875 63ec 40F20000 		movw	r0, #:lower16:pan_axis
 13876 63f0 C0F20000 		movt	r0, #:upper16:pan_axis
 13877 63f4 FFF7FEFF 		bl	ShowParamsColor
4190:.\console.c   **** 					goto exitpars;
 13878              		.loc 1 4190 0
 13879 63f8 00F05ABD 		b	.L131
 13880              	.L565:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 385


4188:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13881              		.loc 1 4188 0
 13882 63fc 40F20000 		movw	r0, #:lower16:.LC450
 13883 6400 C0F20000 		movt	r0, #:upper16:.LC450
 13884 6404 FFF7FEFF 		bl	printf
4190:.\console.c   **** 					goto exitpars;
 13885              		.loc 1 4190 0
 13886 6408 00F052BD 		b	.L131
 13887              	.L564:
4196:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colort") == 0)
 13888              		.loc 1 4196 0
 13889 640c 4C48     		ldr	r0, .L757
 13890 640e 40F20001 		movw	r1, #:lower16:.LC680
 13891 6412 C0F20001 		movt	r1, #:upper16:.LC680
 13892 6416 FFF7FEFF 		bl	strcmp
 13893 641a 0346     		mov	r3, r0
 13894 641c 002B     		cmp	r3, #0
 13895 641e 32D1     		bne	.L567
4198:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
 13896              		.loc 1 4198 0
 13897 6420 4848     		ldr	r0, .L757+4
 13898 6422 FFF7FEFF 		bl	atoi
 13899 6426 0346     		mov	r3, r0
 13900 6428 87F8C730 		strb	r3, [r7, #199]
4199:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
 13901              		.loc 1 4199 0
 13902 642c 4548     		ldr	r0, .L757+4
 13903 642e FFF7FEFF 		bl	atoi
 13904 6432 0346     		mov	r3, r0
 13905 6434 87F8C730 		strb	r3, [r7, #199]
 13906 6438 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 13907 643c 082B     		cmp	r3, #8
 13908 643e 1AD8     		bhi	.L568
4201:.\console.c   **** 						tilt_axis.param.color = color;
 13909              		.loc 1 4201 0
 13910 6440 40F20003 		movw	r3, #:lower16:tilt_axis
 13911 6444 C0F20003 		movt	r3, #:upper16:tilt_axis
 13912 6448 97F8C720 		ldrb	r2, [r7, #199]
 13913 644c 83F82C20 		strb	r2, [r3, #44]
4204:.\console.c   **** 						dummy = WriteAllEEparams();
 13914              		.loc 1 4204 0
 13915 6450 FFF7FEFF 		bl	WriteAllEEparams
 13916 6454 0346     		mov	r3, r0
 13917 6456 87F8D930 		strb	r3, [r7, #217]
4205:.\console.c   **** 						printf(STR_REM_SCOLT);   /* REM: tilt axis color setted to...*/
 13918              		.loc 1 4205 0
 13919 645a 40F20000 		movw	r0, #:lower16:.LC681
 13920 645e C0F20000 		movt	r0, #:upper16:.LC681
 13921 6462 FFF7FEFF 		bl	printf
4206:.\console.c   **** 						ShowParamsColor(&tilt_axis);						
 13922              		.loc 1 4206 0
 13923 6466 40F20000 		movw	r0, #:lower16:tilt_axis
 13924 646a C0F20000 		movt	r0, #:upper16:tilt_axis
 13925 646e FFF7FEFF 		bl	ShowParamsColor
4212:.\console.c   **** 					goto exitpars;
 13926              		.loc 1 4212 0
 13927 6472 00F01DBD 		b	.L131
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 386


 13928              	.L568:
4210:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13929              		.loc 1 4210 0
 13930 6476 40F20000 		movw	r0, #:lower16:.LC450
 13931 647a C0F20000 		movt	r0, #:upper16:.LC450
 13932 647e FFF7FEFF 		bl	printf
4212:.\console.c   **** 					goto exitpars;
 13933              		.loc 1 4212 0
 13934 6482 00F015BD 		b	.L131
 13935              	.L567:
4218:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopfp") == 0)
 13936              		.loc 1 4218 0
 13937 6486 2E48     		ldr	r0, .L757
 13938 6488 40F20001 		movw	r1, #:lower16:.LC682
 13939 648c C0F20001 		movt	r1, #:upper16:.LC682
 13940 6490 FFF7FEFF 		bl	strcmp
 13941 6494 0346     		mov	r3, r0
 13942 6496 002B     		cmp	r3, #0
 13943 6498 56D1     		bne	.L570
4220:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
 13944              		.loc 1 4220 0
 13945 649a 2A48     		ldr	r0, .L757+4
 13946 649c FFF7FEFF 		bl	atof
 13947 64a0 0246     		mov	r2, r0
 13948 64a2 0B46     		mov	r3, r1
 13949 64a4 1046     		mov	r0, r2
 13950 64a6 1946     		mov	r1, r3
 13951 64a8 FFF7FEFF 		bl	__aeabi_d2f
 13952 64ac 0346     		mov	r3, r0
 13953 64ae C7F8C030 		str	r3, [r7, #192]	@ float
 13954 64b2 D7F8C000 		ldr	r0, [r7, #192]	@ float
 13955 64b6 4FF00001 		mov	r1, #0
 13956 64ba FFF7FEFF 		bl	__aeabi_fcmpge
 13957 64be 0346     		mov	r3, r0
 13958 64c0 002B     		cmp	r3, #0
 13959 64c2 34D0     		beq	.L571
 13960              	.L667:
4221:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
 13961              		.loc 1 4221 0
 13962 64c4 1F48     		ldr	r0, .L757+4
 13963 64c6 FFF7FEFF 		bl	atof
 13964 64ca 0246     		mov	r2, r0
 13965 64cc 0B46     		mov	r3, r1
 13966 64ce 1046     		mov	r0, r2
 13967 64d0 1946     		mov	r1, r3
 13968 64d2 FFF7FEFF 		bl	__aeabi_d2f
 13969 64d6 0346     		mov	r3, r0
 13970 64d8 C7F8C030 		str	r3, [r7, #192]	@ float
 13971 64dc D7F8C000 		ldr	r0, [r7, #192]	@ float
 13972 64e0 4FF00001 		mov	r1, #0
 13973 64e4 C4F22011 		movt	r1, 16672
 13974 64e8 FFF7FEFF 		bl	__aeabi_fcmple
 13975 64ec 0346     		mov	r3, r0
 13976 64ee 002B     		cmp	r3, #0
 13977 64f0 1DD0     		beq	.L571
 13978              	.L668:
4223:.\console.c   **** 						pan_axis.param.Kopf.fnum = Kopf;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 387


 13979              		.loc 1 4223 0
 13980 64f2 40F20003 		movw	r3, #:lower16:pan_axis
 13981 64f6 C0F20003 		movt	r3, #:upper16:pan_axis
 13982 64fa D7F8C020 		ldr	r2, [r7, #192]	@ float
 13983 64fe 5A62     		str	r2, [r3, #36]	@ float
4226:.\console.c   **** 						dummy = WriteAllEEparams();
 13984              		.loc 1 4226 0
 13985 6500 FFF7FEFF 		bl	WriteAllEEparams
 13986 6504 0346     		mov	r3, r0
 13987 6506 87F8D930 		strb	r3, [r7, #217]
4227:.\console.c   **** 						printf(STR_REM_PKOF, (float)pan_axis.param.Kopf.fnum);   /* REM: Pan Motor Kopf setted to...*
 13988              		.loc 1 4227 0
 13989 650a 40F20003 		movw	r3, #:lower16:pan_axis
 13990 650e C0F20003 		movt	r3, #:upper16:pan_axis
 13991 6512 5B6A     		ldr	r3, [r3, #36]	@ float
 13992 6514 1846     		mov	r0, r3
 13993 6516 FFF7FEFF 		bl	__aeabi_f2d
 13994 651a 0246     		mov	r2, r0
 13995 651c 0B46     		mov	r3, r1
 13996 651e 40F20000 		movw	r0, #:lower16:.LC683
 13997 6522 C0F20000 		movt	r0, #:upper16:.LC683
 13998 6526 FFF7FEFF 		bl	printf
4233:.\console.c   **** 					goto exitpars;
 13999              		.loc 1 4233 0
 14000 652a 00F0C1BC 		b	.L131
 14001              	.L571:
4231:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14002              		.loc 1 4231 0
 14003 652e 40F20000 		movw	r0, #:lower16:.LC450
 14004 6532 C0F20000 		movt	r0, #:upper16:.LC450
 14005 6536 FFF7FEFF 		bl	printf
4233:.\console.c   **** 					goto exitpars;
 14006              		.loc 1 4233 0
 14007 653a 00F0B9BC 		b	.L131
 14008              	.L758:
 14009 653e 00BF     		.align	2
 14010              	.L757:
 14011 6540 0F000000 		.word	actual_cmd+15
 14012 6544 1E000000 		.word	actual_cmd+30
 14013              	.L570:
4239:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopft") == 0)
 14014              		.loc 1 4239 0
 14015 6548 AD48     		ldr	r0, .L759
 14016 654a 40F20001 		movw	r1, #:lower16:.LC684
 14017 654e C0F20001 		movt	r1, #:upper16:.LC684
 14018 6552 FFF7FEFF 		bl	strcmp
 14019 6556 0346     		mov	r3, r0
 14020 6558 002B     		cmp	r3, #0
 14021 655a 51D1     		bne	.L575
4241:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
 14022              		.loc 1 4241 0
 14023 655c A948     		ldr	r0, .L759+4
 14024 655e FFF7FEFF 		bl	atof
 14025 6562 0246     		mov	r2, r0
 14026 6564 0B46     		mov	r3, r1
 14027 6566 1046     		mov	r0, r2
 14028 6568 1946     		mov	r1, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 388


 14029 656a FFF7FEFF 		bl	__aeabi_d2f
 14030 656e 0346     		mov	r3, r0
 14031 6570 C7F8C030 		str	r3, [r7, #192]	@ float
 14032 6574 D7F8C000 		ldr	r0, [r7, #192]	@ float
 14033 6578 4FF00001 		mov	r1, #0
 14034 657c FFF7FEFF 		bl	__aeabi_fcmpge
 14035 6580 0346     		mov	r3, r0
 14036 6582 002B     		cmp	r3, #0
 14037 6584 34D0     		beq	.L576
 14038              	.L669:
4242:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
 14039              		.loc 1 4242 0
 14040 6586 9F48     		ldr	r0, .L759+4
 14041 6588 FFF7FEFF 		bl	atof
 14042 658c 0246     		mov	r2, r0
 14043 658e 0B46     		mov	r3, r1
 14044 6590 1046     		mov	r0, r2
 14045 6592 1946     		mov	r1, r3
 14046 6594 FFF7FEFF 		bl	__aeabi_d2f
 14047 6598 0346     		mov	r3, r0
 14048 659a C7F8C030 		str	r3, [r7, #192]	@ float
 14049 659e D7F8C000 		ldr	r0, [r7, #192]	@ float
 14050 65a2 4FF00001 		mov	r1, #0
 14051 65a6 C4F22011 		movt	r1, 16672
 14052 65aa FFF7FEFF 		bl	__aeabi_fcmple
 14053 65ae 0346     		mov	r3, r0
 14054 65b0 002B     		cmp	r3, #0
 14055 65b2 1DD0     		beq	.L576
 14056              	.L670:
4244:.\console.c   **** 						tilt_axis.param.Kopf.fnum = Kopf;
 14057              		.loc 1 4244 0
 14058 65b4 40F20003 		movw	r3, #:lower16:tilt_axis
 14059 65b8 C0F20003 		movt	r3, #:upper16:tilt_axis
 14060 65bc D7F8C020 		ldr	r2, [r7, #192]	@ float
 14061 65c0 5A62     		str	r2, [r3, #36]	@ float
4247:.\console.c   **** 						dummy = WriteAllEEparams();
 14062              		.loc 1 4247 0
 14063 65c2 FFF7FEFF 		bl	WriteAllEEparams
 14064 65c6 0346     		mov	r3, r0
 14065 65c8 87F8D930 		strb	r3, [r7, #217]
4248:.\console.c   **** 						printf(STR_REM_TKOF, (float)tilt_axis.param.Kopf.fnum);   /* REM: Tilt Motor Kopf setted to..
 14066              		.loc 1 4248 0
 14067 65cc 40F20003 		movw	r3, #:lower16:tilt_axis
 14068 65d0 C0F20003 		movt	r3, #:upper16:tilt_axis
 14069 65d4 5B6A     		ldr	r3, [r3, #36]	@ float
 14070 65d6 1846     		mov	r0, r3
 14071 65d8 FFF7FEFF 		bl	__aeabi_f2d
 14072 65dc 0246     		mov	r2, r0
 14073 65de 0B46     		mov	r3, r1
 14074 65e0 40F20000 		movw	r0, #:lower16:.LC685
 14075 65e4 C0F20000 		movt	r0, #:upper16:.LC685
 14076 65e8 FFF7FEFF 		bl	printf
4254:.\console.c   **** 					goto exitpars;
 14077              		.loc 1 4254 0
 14078 65ec 00F060BC 		b	.L131
 14079              	.L576:
4252:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 389


 14080              		.loc 1 4252 0
 14081 65f0 40F20000 		movw	r0, #:lower16:.LC450
 14082 65f4 C0F20000 		movt	r0, #:upper16:.LC450
 14083 65f8 FFF7FEFF 		bl	printf
4254:.\console.c   **** 					goto exitpars;
 14084              		.loc 1 4254 0
 14085 65fc 00F058BC 		b	.L131
 14086              	.L575:
4260:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againp") == 0)
 14087              		.loc 1 4260 0
 14088 6600 7F48     		ldr	r0, .L759
 14089 6602 40F20001 		movw	r1, #:lower16:.LC686
 14090 6606 C0F20001 		movt	r1, #:upper16:.LC686
 14091 660a FFF7FEFF 		bl	strcmp
 14092 660e 0346     		mov	r3, r0
 14093 6610 002B     		cmp	r3, #0
 14094 6612 52D1     		bne	.L580
4262:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
 14095              		.loc 1 4262 0
 14096 6614 7B48     		ldr	r0, .L759+4
 14097 6616 FFF7FEFF 		bl	atof
 14098 661a 0246     		mov	r2, r0
 14099 661c 0B46     		mov	r3, r1
 14100 661e 1046     		mov	r0, r2
 14101 6620 1946     		mov	r1, r3
 14102 6622 FFF7FEFF 		bl	__aeabi_d2f
 14103 6626 0346     		mov	r3, r0
 14104 6628 C7F8BC30 		str	r3, [r7, #188]	@ float
 14105 662c D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14106 6630 4FF00001 		mov	r1, #0
 14107 6634 CCF27A41 		movt	r1, 50298
 14108 6638 FFF7FEFF 		bl	__aeabi_fcmpge
 14109 663c 0346     		mov	r3, r0
 14110 663e 002B     		cmp	r3, #0
 14111 6640 34D0     		beq	.L581
 14112              	.L671:
4263:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
 14113              		.loc 1 4263 0
 14114 6642 7048     		ldr	r0, .L759+4
 14115 6644 FFF7FEFF 		bl	atof
 14116 6648 0246     		mov	r2, r0
 14117 664a 0B46     		mov	r3, r1
 14118 664c 1046     		mov	r0, r2
 14119 664e 1946     		mov	r1, r3
 14120 6650 FFF7FEFF 		bl	__aeabi_d2f
 14121 6654 0346     		mov	r3, r0
 14122 6656 C7F8BC30 		str	r3, [r7, #188]	@ float
 14123 665a D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14124 665e 4FF00001 		mov	r1, #0
 14125 6662 C4F27A41 		movt	r1, 17530
 14126 6666 FFF7FEFF 		bl	__aeabi_fcmple
 14127 666a 0346     		mov	r3, r0
 14128 666c 002B     		cmp	r3, #0
 14129 666e 1DD0     		beq	.L581
 14130              	.L672:
4265:.\console.c   **** 						pan_axis.param.Gain_ANAOUT.fnum = anaout_gain;
 14131              		.loc 1 4265 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 390


 14132 6670 40F20003 		movw	r3, #:lower16:pan_axis
 14133 6674 C0F20003 		movt	r3, #:upper16:pan_axis
 14134 6678 D7F8BC20 		ldr	r2, [r7, #188]	@ float
 14135 667c 9A62     		str	r2, [r3, #40]	@ float
4268:.\console.c   **** 						dummy = WriteAllEEparams();
 14136              		.loc 1 4268 0
 14137 667e FFF7FEFF 		bl	WriteAllEEparams
 14138 6682 0346     		mov	r3, r0
 14139 6684 87F8D930 		strb	r3, [r7, #217]
4269:.\console.c   **** 						printf(STR_REM_PAGA, (float)pan_axis.param.Gain_ANAOUT.fnum);   /* REM: Pan Motor Anaout Gain
 14140              		.loc 1 4269 0
 14141 6688 40F20003 		movw	r3, #:lower16:pan_axis
 14142 668c C0F20003 		movt	r3, #:upper16:pan_axis
 14143 6690 9B6A     		ldr	r3, [r3, #40]	@ float
 14144 6692 1846     		mov	r0, r3
 14145 6694 FFF7FEFF 		bl	__aeabi_f2d
 14146 6698 0246     		mov	r2, r0
 14147 669a 0B46     		mov	r3, r1
 14148 669c 40F20000 		movw	r0, #:lower16:.LC687
 14149 66a0 C0F20000 		movt	r0, #:upper16:.LC687
 14150 66a4 FFF7FEFF 		bl	printf
4275:.\console.c   **** 					goto exitpars;
 14151              		.loc 1 4275 0
 14152 66a8 00F002BC 		b	.L131
 14153              	.L581:
4273:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14154              		.loc 1 4273 0
 14155 66ac 40F20000 		movw	r0, #:lower16:.LC450
 14156 66b0 C0F20000 		movt	r0, #:upper16:.LC450
 14157 66b4 FFF7FEFF 		bl	printf
4275:.\console.c   **** 					goto exitpars;
 14158              		.loc 1 4275 0
 14159 66b8 FAE3     		b	.L131
 14160              	.L580:
4281:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againt") == 0)
 14161              		.loc 1 4281 0
 14162 66ba 5148     		ldr	r0, .L759
 14163 66bc 40F20001 		movw	r1, #:lower16:.LC688
 14164 66c0 C0F20001 		movt	r1, #:upper16:.LC688
 14165 66c4 FFF7FEFF 		bl	strcmp
 14166 66c8 0346     		mov	r3, r0
 14167 66ca 002B     		cmp	r3, #0
 14168 66cc 51D1     		bne	.L585
4283:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
 14169              		.loc 1 4283 0
 14170 66ce 4D48     		ldr	r0, .L759+4
 14171 66d0 FFF7FEFF 		bl	atof
 14172 66d4 0246     		mov	r2, r0
 14173 66d6 0B46     		mov	r3, r1
 14174 66d8 1046     		mov	r0, r2
 14175 66da 1946     		mov	r1, r3
 14176 66dc FFF7FEFF 		bl	__aeabi_d2f
 14177 66e0 0346     		mov	r3, r0
 14178 66e2 C7F8BC30 		str	r3, [r7, #188]	@ float
 14179 66e6 D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14180 66ea 4FF00001 		mov	r1, #0
 14181 66ee CCF27A41 		movt	r1, 50298
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 391


 14182 66f2 FFF7FEFF 		bl	__aeabi_fcmpge
 14183 66f6 0346     		mov	r3, r0
 14184 66f8 002B     		cmp	r3, #0
 14185 66fa 33D0     		beq	.L586
 14186              	.L673:
4284:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
 14187              		.loc 1 4284 0
 14188 66fc 4148     		ldr	r0, .L759+4
 14189 66fe FFF7FEFF 		bl	atof
 14190 6702 0246     		mov	r2, r0
 14191 6704 0B46     		mov	r3, r1
 14192 6706 1046     		mov	r0, r2
 14193 6708 1946     		mov	r1, r3
 14194 670a FFF7FEFF 		bl	__aeabi_d2f
 14195 670e 0346     		mov	r3, r0
 14196 6710 C7F8BC30 		str	r3, [r7, #188]	@ float
 14197 6714 D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14198 6718 4FF00001 		mov	r1, #0
 14199 671c C4F27A41 		movt	r1, 17530
 14200 6720 FFF7FEFF 		bl	__aeabi_fcmple
 14201 6724 0346     		mov	r3, r0
 14202 6726 002B     		cmp	r3, #0
 14203 6728 1CD0     		beq	.L586
 14204              	.L674:
4286:.\console.c   **** 						tilt_axis.param.Gain_ANAOUT.fnum = anaout_gain;
 14205              		.loc 1 4286 0
 14206 672a 40F20003 		movw	r3, #:lower16:tilt_axis
 14207 672e C0F20003 		movt	r3, #:upper16:tilt_axis
 14208 6732 D7F8BC20 		ldr	r2, [r7, #188]	@ float
 14209 6736 9A62     		str	r2, [r3, #40]	@ float
4289:.\console.c   **** 						dummy = WriteAllEEparams();
 14210              		.loc 1 4289 0
 14211 6738 FFF7FEFF 		bl	WriteAllEEparams
 14212 673c 0346     		mov	r3, r0
 14213 673e 87F8D930 		strb	r3, [r7, #217]
4290:.\console.c   **** 						printf(STR_REM_TAGA, (float)tilt_axis.param.Gain_ANAOUT.fnum);   /* REM: Tilt Motor Anaout Ga
 14214              		.loc 1 4290 0
 14215 6742 40F20003 		movw	r3, #:lower16:tilt_axis
 14216 6746 C0F20003 		movt	r3, #:upper16:tilt_axis
 14217 674a 9B6A     		ldr	r3, [r3, #40]	@ float
 14218 674c 1846     		mov	r0, r3
 14219 674e FFF7FEFF 		bl	__aeabi_f2d
 14220 6752 0246     		mov	r2, r0
 14221 6754 0B46     		mov	r3, r1
 14222 6756 40F20000 		movw	r0, #:lower16:.LC689
 14223 675a C0F20000 		movt	r0, #:upper16:.LC689
 14224 675e FFF7FEFF 		bl	printf
4296:.\console.c   **** 					goto exitpars;
 14225              		.loc 1 4296 0
 14226 6762 A5E3     		b	.L131
 14227              	.L586:
4294:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14228              		.loc 1 4294 0
 14229 6764 40F20000 		movw	r0, #:lower16:.LC450
 14230 6768 C0F20000 		movt	r0, #:upper16:.LC450
 14231 676c FFF7FEFF 		bl	printf
4296:.\console.c   **** 					goto exitpars;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 392


 14232              		.loc 1 4296 0
 14233 6770 9EE3     		b	.L131
 14234              	.L585:
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
 14235              		.loc 1 4324 0
 14236 6772 2348     		ldr	r0, .L759
 14237 6774 40F20001 		movw	r1, #:lower16:.LC690
 14238 6778 C0F20001 		movt	r1, #:upper16:.LC690
 14239 677c FFF7FEFF 		bl	strcmp
 14240 6780 0346     		mov	r3, r0
 14241 6782 002B     		cmp	r3, #0
 14242 6784 09D0     		beq	.L590
4325:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacxof") == 0))
 14243              		.loc 1 4325 0 discriminator 1
 14244 6786 1E48     		ldr	r0, .L759
 14245 6788 40F20001 		movw	r1, #:lower16:.LC691
 14246 678c C0F20001 		movt	r1, #:upper16:.LC691
 14247 6790 FFF7FEFF 		bl	strcmp
 14248 6794 0346     		mov	r3, r0
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
 14249              		.loc 1 4324 0 discriminator 1
 14250 6796 002B     		cmp	r3, #0
 14251 6798 36D1     		bne	.L591
 14252              	.L590:
4327:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14253              		.loc 1 4327 0
 14254 679a 1A48     		ldr	r0, .L759+4
 14255 679c FFF7FEFF 		bl	atoi
 14256 67a0 0346     		mov	r3, r0
 14257 67a2 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14258 67a6 B7F9EE30 		ldrsh	r3, [r7, #238]
 14259 67aa 13F1960F 		cmn	r3, #150
 14260 67ae 1FDB     		blt	.L592
4328:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14261              		.loc 1 4328 0
 14262 67b0 1448     		ldr	r0, .L759+4
 14263 67b2 FFF7FEFF 		bl	atoi
 14264 67b6 0346     		mov	r3, r0
 14265 67b8 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14266 67bc B7F9EE30 		ldrsh	r3, [r7, #238]
 14267 67c0 962B     		cmp	r3, #150
 14268 67c2 15DC     		bgt	.L592
4330:.\console.c   **** 						gobee_param.x_acc_ADC_offset = (int16)offset;
 14269              		.loc 1 4330 0
 14270 67c4 40F20003 		movw	r3, #:lower16:gobee_param
 14271 67c8 C0F20003 		movt	r3, #:upper16:gobee_param
 14272 67cc B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14273 67d0 1A81     		strh	r2, [r3, #8]	@ movhi
4333:.\console.c   **** 						dummy = WriteAllEEparams();
 14274              		.loc 1 4333 0
 14275 67d2 FFF7FEFF 		bl	WriteAllEEparams
 14276 67d6 0346     		mov	r3, r0
 14277 67d8 87F8D930 		strb	r3, [r7, #217]
4334:.\console.c   **** 						printf(STR_REM_SEAX, (int16)offset);   /* REM: ACC AXIS X ADC offset setted to...*/					
 14278              		.loc 1 4334 0
 14279 67dc B7F9EE30 		ldrsh	r3, [r7, #238]
 14280 67e0 40F20000 		movw	r0, #:lower16:.LC692
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 393


 14281 67e4 C0F20000 		movt	r0, #:upper16:.LC692
 14282 67e8 1946     		mov	r1, r3
 14283 67ea FFF7FEFF 		bl	printf
4340:.\console.c   **** 					goto exitpars;
 14284              		.loc 1 4340 0
 14285 67ee 5FE3     		b	.L131
 14286              	.L592:
4338:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14287              		.loc 1 4338 0
 14288 67f0 40F20000 		movw	r0, #:lower16:.LC450
 14289 67f4 C0F20000 		movt	r0, #:upper16:.LC450
 14290 67f8 FFF7FEFF 		bl	printf
4340:.\console.c   **** 					goto exitpars;
 14291              		.loc 1 4340 0
 14292 67fc 58E3     		b	.L131
 14293              	.L760:
 14294 67fe 00BF     		.align	2
 14295              	.L759:
 14296 6800 0F000000 		.word	actual_cmd+15
 14297 6804 1E000000 		.word	actual_cmd+30
 14298              	.L591:
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
 14299              		.loc 1 4346 0
 14300 6808 9D48     		ldr	r0, .L761
 14301 680a 40F20001 		movw	r1, #:lower16:.LC693
 14302 680e C0F20001 		movt	r1, #:upper16:.LC693
 14303 6812 FFF7FEFF 		bl	strcmp
 14304 6816 0346     		mov	r3, r0
 14305 6818 002B     		cmp	r3, #0
 14306 681a 09D0     		beq	.L594
4347:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacyof") == 0))
 14307              		.loc 1 4347 0 discriminator 1
 14308 681c 9848     		ldr	r0, .L761
 14309 681e 40F20001 		movw	r1, #:lower16:.LC694
 14310 6822 C0F20001 		movt	r1, #:upper16:.LC694
 14311 6826 FFF7FEFF 		bl	strcmp
 14312 682a 0346     		mov	r3, r0
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
 14313              		.loc 1 4346 0 discriminator 1
 14314 682c 002B     		cmp	r3, #0
 14315 682e 31D1     		bne	.L595
 14316              	.L594:
4349:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14317              		.loc 1 4349 0
 14318 6830 9448     		ldr	r0, .L761+4
 14319 6832 FFF7FEFF 		bl	atoi
 14320 6836 0346     		mov	r3, r0
 14321 6838 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14322 683c B7F9EE30 		ldrsh	r3, [r7, #238]
 14323 6840 13F1960F 		cmn	r3, #150
 14324 6844 1FDB     		blt	.L596
4350:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14325              		.loc 1 4350 0
 14326 6846 8F48     		ldr	r0, .L761+4
 14327 6848 FFF7FEFF 		bl	atoi
 14328 684c 0346     		mov	r3, r0
 14329 684e A7F8EE30 		strh	r3, [r7, #238]	@ movhi
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 394


 14330 6852 B7F9EE30 		ldrsh	r3, [r7, #238]
 14331 6856 962B     		cmp	r3, #150
 14332 6858 15DC     		bgt	.L596
4352:.\console.c   **** 						gobee_param.y_acc_ADC_offset = (int16)offset;
 14333              		.loc 1 4352 0
 14334 685a 40F20003 		movw	r3, #:lower16:gobee_param
 14335 685e C0F20003 		movt	r3, #:upper16:gobee_param
 14336 6862 B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14337 6866 5A81     		strh	r2, [r3, #10]	@ movhi
4355:.\console.c   **** 						dummy = WriteAllEEparams();
 14338              		.loc 1 4355 0
 14339 6868 FFF7FEFF 		bl	WriteAllEEparams
 14340 686c 0346     		mov	r3, r0
 14341 686e 87F8D930 		strb	r3, [r7, #217]
4356:.\console.c   **** 						printf(STR_REM_SEAY, (int16)offset);   /* REM: ACC AXIS Y ADC offset setted to...*/					
 14342              		.loc 1 4356 0
 14343 6872 B7F9EE30 		ldrsh	r3, [r7, #238]
 14344 6876 40F20000 		movw	r0, #:lower16:.LC695
 14345 687a C0F20000 		movt	r0, #:upper16:.LC695
 14346 687e 1946     		mov	r1, r3
 14347 6880 FFF7FEFF 		bl	printf
4362:.\console.c   **** 					goto exitpars;
 14348              		.loc 1 4362 0
 14349 6884 14E3     		b	.L131
 14350              	.L596:
4360:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14351              		.loc 1 4360 0
 14352 6886 40F20000 		movw	r0, #:lower16:.LC450
 14353 688a C0F20000 		movt	r0, #:upper16:.LC450
 14354 688e FFF7FEFF 		bl	printf
4362:.\console.c   **** 					goto exitpars;
 14355              		.loc 1 4362 0
 14356 6892 0DE3     		b	.L131
 14357              	.L595:
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
 14358              		.loc 1 4368 0
 14359 6894 7A48     		ldr	r0, .L761
 14360 6896 40F20001 		movw	r1, #:lower16:.LC696
 14361 689a C0F20001 		movt	r1, #:upper16:.LC696
 14362 689e FFF7FEFF 		bl	strcmp
 14363 68a2 0346     		mov	r3, r0
 14364 68a4 002B     		cmp	r3, #0
 14365 68a6 09D0     		beq	.L598
4369:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaczof") == 0))
 14366              		.loc 1 4369 0 discriminator 1
 14367 68a8 7548     		ldr	r0, .L761
 14368 68aa 40F20001 		movw	r1, #:lower16:.LC697
 14369 68ae C0F20001 		movt	r1, #:upper16:.LC697
 14370 68b2 FFF7FEFF 		bl	strcmp
 14371 68b6 0346     		mov	r3, r0
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
 14372              		.loc 1 4368 0 discriminator 1
 14373 68b8 002B     		cmp	r3, #0
 14374 68ba 31D1     		bne	.L599
 14375              	.L598:
4371:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14376              		.loc 1 4371 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 395


 14377 68bc 7148     		ldr	r0, .L761+4
 14378 68be FFF7FEFF 		bl	atoi
 14379 68c2 0346     		mov	r3, r0
 14380 68c4 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14381 68c8 B7F9EE30 		ldrsh	r3, [r7, #238]
 14382 68cc 13F1960F 		cmn	r3, #150
 14383 68d0 1FDB     		blt	.L600
4372:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14384              		.loc 1 4372 0
 14385 68d2 6C48     		ldr	r0, .L761+4
 14386 68d4 FFF7FEFF 		bl	atoi
 14387 68d8 0346     		mov	r3, r0
 14388 68da A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14389 68de B7F9EE30 		ldrsh	r3, [r7, #238]
 14390 68e2 962B     		cmp	r3, #150
 14391 68e4 15DC     		bgt	.L600
4374:.\console.c   **** 						gobee_param.z_acc_ADC_offset = (int16)offset;
 14392              		.loc 1 4374 0
 14393 68e6 40F20003 		movw	r3, #:lower16:gobee_param
 14394 68ea C0F20003 		movt	r3, #:upper16:gobee_param
 14395 68ee B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14396 68f2 9A81     		strh	r2, [r3, #12]	@ movhi
4377:.\console.c   **** 						dummy = WriteAllEEparams();
 14397              		.loc 1 4377 0
 14398 68f4 FFF7FEFF 		bl	WriteAllEEparams
 14399 68f8 0346     		mov	r3, r0
 14400 68fa 87F8D930 		strb	r3, [r7, #217]
4378:.\console.c   **** 						printf(STR_REM_SEAZ, (int16)offset);   /* REM: ACC AXIS Z ADC offset setted to...*/					
 14401              		.loc 1 4378 0
 14402 68fe B7F9EE30 		ldrsh	r3, [r7, #238]
 14403 6902 40F20000 		movw	r0, #:lower16:.LC698
 14404 6906 C0F20000 		movt	r0, #:upper16:.LC698
 14405 690a 1946     		mov	r1, r3
 14406 690c FFF7FEFF 		bl	printf
4384:.\console.c   **** 					goto exitpars;
 14407              		.loc 1 4384 0
 14408 6910 CEE2     		b	.L131
 14409              	.L600:
4382:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14410              		.loc 1 4382 0
 14411 6912 40F20000 		movw	r0, #:lower16:.LC450
 14412 6916 C0F20000 		movt	r0, #:upper16:.LC450
 14413 691a FFF7FEFF 		bl	printf
4384:.\console.c   **** 					goto exitpars;
 14414              		.loc 1 4384 0
 14415 691e C7E2     		b	.L131
 14416              	.L599:
4475:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "beta") == 0)
 14417              		.loc 1 4475 0
 14418 6920 5748     		ldr	r0, .L761
 14419 6922 40F20001 		movw	r1, #:lower16:.LC699
 14420 6926 C0F20001 		movt	r1, #:upper16:.LC699
 14421 692a FFF7FEFF 		bl	strcmp
 14422 692e 0346     		mov	r3, r0
 14423 6930 002B     		cmp	r3, #0
 14424 6932 4DD1     		bne	.L602
4477:.\console.c   **** 					if (((beta = atof(actual_cmd.number1)) >= 0)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 396


 14425              		.loc 1 4477 0
 14426 6934 5348     		ldr	r0, .L761+4
 14427 6936 FFF7FEFF 		bl	atof
 14428 693a 0246     		mov	r2, r0
 14429 693c 0B46     		mov	r3, r1
 14430 693e 1046     		mov	r0, r2
 14431 6940 1946     		mov	r1, r3
 14432 6942 FFF7FEFF 		bl	__aeabi_d2f
 14433 6946 0346     		mov	r3, r0
 14434 6948 C7F8F830 		str	r3, [r7, #248]	@ float
 14435 694c D7F8F800 		ldr	r0, [r7, #248]	@ float
 14436 6950 4FF00001 		mov	r1, #0
 14437 6954 FFF7FEFF 		bl	__aeabi_fcmpge
 14438 6958 0346     		mov	r3, r0
 14439 695a 002B     		cmp	r3, #0
 14440 695c 31D0     		beq	.L603
 14441              	.L675:
4478:.\console.c   **** 					&& (beta = atof(actual_cmd.number1)) <= 1)
 14442              		.loc 1 4478 0
 14443 695e 4948     		ldr	r0, .L761+4
 14444 6960 FFF7FEFF 		bl	atof
 14445 6964 0246     		mov	r2, r0
 14446 6966 0B46     		mov	r3, r1
 14447 6968 1046     		mov	r0, r2
 14448 696a 1946     		mov	r1, r3
 14449 696c FFF7FEFF 		bl	__aeabi_d2f
 14450 6970 0346     		mov	r3, r0
 14451 6972 C7F8F830 		str	r3, [r7, #248]	@ float
 14452 6976 D7F8F800 		ldr	r0, [r7, #248]	@ float
 14453 697a 4FF07E51 		mov	r1, #1065353216
 14454 697e FFF7FEFF 		bl	__aeabi_fcmple
 14455 6982 0346     		mov	r3, r0
 14456 6984 002B     		cmp	r3, #0
 14457 6986 1CD0     		beq	.L603
 14458              	.L676:
4480:.\console.c   **** 						gobee_param.beta.fnum = beta;
 14459              		.loc 1 4480 0
 14460 6988 40F20003 		movw	r3, #:lower16:gobee_param
 14461 698c C0F20003 		movt	r3, #:upper16:gobee_param
 14462 6990 D7F8F820 		ldr	r2, [r7, #248]	@ float
 14463 6994 5A60     		str	r2, [r3, #4]	@ float
4483:.\console.c   **** 						dummy = WriteAllEEparams();
 14464              		.loc 1 4483 0
 14465 6996 FFF7FEFF 		bl	WriteAllEEparams
 14466 699a 0346     		mov	r3, r0
 14467 699c 87F8D930 		strb	r3, [r7, #217]
4484:.\console.c   **** 						printf(STR_REM_STBT, (float)gobee_param.beta.fnum);   /* REM: beta setted to...*/					
 14468              		.loc 1 4484 0
 14469 69a0 40F20003 		movw	r3, #:lower16:gobee_param
 14470 69a4 C0F20003 		movt	r3, #:upper16:gobee_param
 14471 69a8 5B68     		ldr	r3, [r3, #4]	@ float
 14472 69aa 1846     		mov	r0, r3
 14473 69ac FFF7FEFF 		bl	__aeabi_f2d
 14474 69b0 0246     		mov	r2, r0
 14475 69b2 0B46     		mov	r3, r1
 14476 69b4 40F20000 		movw	r0, #:lower16:.LC700
 14477 69b8 C0F20000 		movt	r0, #:upper16:.LC700
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 397


 14478 69bc FFF7FEFF 		bl	printf
4490:.\console.c   **** 					goto exitpars;
 14479              		.loc 1 4490 0
 14480 69c0 76E2     		b	.L131
 14481              	.L603:
4488:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14482              		.loc 1 4488 0
 14483 69c2 40F20000 		movw	r0, #:lower16:.LC450
 14484 69c6 C0F20000 		movt	r0, #:upper16:.LC450
 14485 69ca FFF7FEFF 		bl	printf
4490:.\console.c   **** 					goto exitpars;
 14486              		.loc 1 4490 0
 14487 69ce 6FE2     		b	.L131
 14488              	.L602:
4496:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "gamma") == 0)
 14489              		.loc 1 4496 0
 14490 69d0 2B48     		ldr	r0, .L761
 14491 69d2 40F20001 		movw	r1, #:lower16:.LC701
 14492 69d6 C0F20001 		movt	r1, #:upper16:.LC701
 14493 69da FFF7FEFF 		bl	strcmp
 14494 69de 0346     		mov	r3, r0
 14495 69e0 002B     		cmp	r3, #0
 14496 69e2 51D1     		bne	.L607
4498:.\console.c   **** 					if (((gamma = atof(actual_cmd.number1)) >= 0)
 14497              		.loc 1 4498 0
 14498 69e4 2748     		ldr	r0, .L761+4
 14499 69e6 FFF7FEFF 		bl	atof
 14500 69ea 0246     		mov	r2, r0
 14501 69ec 0B46     		mov	r3, r1
 14502 69ee 1046     		mov	r0, r2
 14503 69f0 1946     		mov	r1, r3
 14504 69f2 FFF7FEFF 		bl	__aeabi_d2f
 14505 69f6 0346     		mov	r3, r0
 14506 69f8 C7F8F430 		str	r3, [r7, #244]	@ float
 14507 69fc D7F8F400 		ldr	r0, [r7, #244]	@ float
 14508 6a00 4FF00001 		mov	r1, #0
 14509 6a04 FFF7FEFF 		bl	__aeabi_fcmpge
 14510 6a08 0346     		mov	r3, r0
 14511 6a0a 002B     		cmp	r3, #0
 14512 6a0c 31D0     		beq	.L608
 14513              	.L677:
4499:.\console.c   **** 					&& (gamma = atof(actual_cmd.number1)) <= 1)
 14514              		.loc 1 4499 0
 14515 6a0e 1D48     		ldr	r0, .L761+4
 14516 6a10 FFF7FEFF 		bl	atof
 14517 6a14 0246     		mov	r2, r0
 14518 6a16 0B46     		mov	r3, r1
 14519 6a18 1046     		mov	r0, r2
 14520 6a1a 1946     		mov	r1, r3
 14521 6a1c FFF7FEFF 		bl	__aeabi_d2f
 14522 6a20 0346     		mov	r3, r0
 14523 6a22 C7F8F430 		str	r3, [r7, #244]	@ float
 14524 6a26 D7F8F400 		ldr	r0, [r7, #244]	@ float
 14525 6a2a 4FF07E51 		mov	r1, #1065353216
 14526 6a2e FFF7FEFF 		bl	__aeabi_fcmple
 14527 6a32 0346     		mov	r3, r0
 14528 6a34 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 398


 14529 6a36 1CD0     		beq	.L608
 14530              	.L678:
4501:.\console.c   **** 						IMU_sensor.param.gamma.fnum = gamma;
 14531              		.loc 1 4501 0
 14532 6a38 40F20003 		movw	r3, #:lower16:IMU_sensor
 14533 6a3c C0F20003 		movt	r3, #:upper16:IMU_sensor
 14534 6a40 D7F8F420 		ldr	r2, [r7, #244]	@ float
 14535 6a44 9A62     		str	r2, [r3, #40]	@ float
4504:.\console.c   **** 						dummy = WriteAllEEparams();
 14536              		.loc 1 4504 0
 14537 6a46 FFF7FEFF 		bl	WriteAllEEparams
 14538 6a4a 0346     		mov	r3, r0
 14539 6a4c 87F8D930 		strb	r3, [r7, #217]
4505:.\console.c   **** 						printf(STR_REM_STGM, (float)IMU_sensor.param.gamma.fnum);   /* REM: gamma setted to...*/					
 14540              		.loc 1 4505 0
 14541 6a50 40F20003 		movw	r3, #:lower16:IMU_sensor
 14542 6a54 C0F20003 		movt	r3, #:upper16:IMU_sensor
 14543 6a58 9B6A     		ldr	r3, [r3, #40]	@ float
 14544 6a5a 1846     		mov	r0, r3
 14545 6a5c FFF7FEFF 		bl	__aeabi_f2d
 14546 6a60 0246     		mov	r2, r0
 14547 6a62 0B46     		mov	r3, r1
 14548 6a64 40F20000 		movw	r0, #:lower16:.LC702
 14549 6a68 C0F20000 		movt	r0, #:upper16:.LC702
 14550 6a6c FFF7FEFF 		bl	printf
4511:.\console.c   **** 					goto exitpars;
 14551              		.loc 1 4511 0
 14552 6a70 1EE2     		b	.L131
 14553              	.L608:
4509:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14554              		.loc 1 4509 0
 14555 6a72 40F20000 		movw	r0, #:lower16:.LC450
 14556 6a76 C0F20000 		movt	r0, #:upper16:.LC450
 14557 6a7a FFF7FEFF 		bl	printf
4511:.\console.c   **** 					goto exitpars;
 14558              		.loc 1 4511 0
 14559 6a7e 17E2     		b	.L131
 14560              	.L762:
 14561              		.align	2
 14562              	.L761:
 14563 6a80 0F000000 		.word	actual_cmd+15
 14564 6a84 1E000000 		.word	actual_cmd+30
 14565              	.L607:
4517:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "jumpth") == 0)
 14566              		.loc 1 4517 0
 14567 6a88 AE48     		ldr	r0, .L763
 14568 6a8a 40F20001 		movw	r1, #:lower16:.LC703
 14569 6a8e C0F20001 		movt	r1, #:upper16:.LC703
 14570 6a92 FFF7FEFF 		bl	strcmp
 14571 6a96 0346     		mov	r3, r0
 14572 6a98 002B     		cmp	r3, #0
 14573 6a9a 4FD1     		bne	.L612
4519:.\console.c   **** 					if (((jump_g_th = atof(actual_cmd.number1)) >= 0)
 14574              		.loc 1 4519 0
 14575 6a9c AA48     		ldr	r0, .L763+4
 14576 6a9e FFF7FEFF 		bl	atof
 14577 6aa2 0246     		mov	r2, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 399


 14578 6aa4 0B46     		mov	r3, r1
 14579 6aa6 1046     		mov	r0, r2
 14580 6aa8 1946     		mov	r1, r3
 14581 6aaa FFF7FEFF 		bl	__aeabi_d2f
 14582 6aae 0346     		mov	r3, r0
 14583 6ab0 C7F8E030 		str	r3, [r7, #224]	@ float
 14584 6ab4 D7F8E000 		ldr	r0, [r7, #224]	@ float
 14585 6ab8 4FF00001 		mov	r1, #0
 14586 6abc FFF7FEFF 		bl	__aeabi_fcmpge
 14587 6ac0 0346     		mov	r3, r0
 14588 6ac2 002B     		cmp	r3, #0
 14589 6ac4 33D0     		beq	.L613
 14590              	.L679:
4520:.\console.c   **** 					&& (jump_g_th = atof(actual_cmd.number1)) <= 10)
 14591              		.loc 1 4520 0
 14592 6ac6 A048     		ldr	r0, .L763+4
 14593 6ac8 FFF7FEFF 		bl	atof
 14594 6acc 0246     		mov	r2, r0
 14595 6ace 0B46     		mov	r3, r1
 14596 6ad0 1046     		mov	r0, r2
 14597 6ad2 1946     		mov	r1, r3
 14598 6ad4 FFF7FEFF 		bl	__aeabi_d2f
 14599 6ad8 0346     		mov	r3, r0
 14600 6ada C7F8E030 		str	r3, [r7, #224]	@ float
 14601 6ade D7F8E000 		ldr	r0, [r7, #224]	@ float
 14602 6ae2 4FF00001 		mov	r1, #0
 14603 6ae6 C4F22011 		movt	r1, 16672
 14604 6aea FFF7FEFF 		bl	__aeabi_fcmple
 14605 6aee 0346     		mov	r3, r0
 14606 6af0 002B     		cmp	r3, #0
 14607 6af2 1CD0     		beq	.L613
 14608              	.L680:
4522:.\console.c   **** 						gobee_param.jump_g_threshold.fnum = jump_g_th;
 14609              		.loc 1 4522 0
 14610 6af4 40F20003 		movw	r3, #:lower16:gobee_param
 14611 6af8 C0F20003 		movt	r3, #:upper16:gobee_param
 14612 6afc D7F8E020 		ldr	r2, [r7, #224]	@ float
 14613 6b00 1A61     		str	r2, [r3, #16]	@ float
4525:.\console.c   **** 						dummy = WriteAllEEparams();
 14614              		.loc 1 4525 0
 14615 6b02 FFF7FEFF 		bl	WriteAllEEparams
 14616 6b06 0346     		mov	r3, r0
 14617 6b08 87F8D930 		strb	r3, [r7, #217]
4526:.\console.c   **** 						printf(STR_REM_STJG, (float)gobee_param.jump_g_threshold.fnum);   /* REM: jump g thr setted t
 14618              		.loc 1 4526 0
 14619 6b0c 40F20003 		movw	r3, #:lower16:gobee_param
 14620 6b10 C0F20003 		movt	r3, #:upper16:gobee_param
 14621 6b14 1B69     		ldr	r3, [r3, #16]	@ float
 14622 6b16 1846     		mov	r0, r3
 14623 6b18 FFF7FEFF 		bl	__aeabi_f2d
 14624 6b1c 0246     		mov	r2, r0
 14625 6b1e 0B46     		mov	r3, r1
 14626 6b20 40F20000 		movw	r0, #:lower16:.LC704
 14627 6b24 C0F20000 		movt	r0, #:upper16:.LC704
 14628 6b28 FFF7FEFF 		bl	printf
4532:.\console.c   **** 					goto exitpars;
 14629              		.loc 1 4532 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 400


 14630 6b2c C0E1     		b	.L131
 14631              	.L613:
4530:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14632              		.loc 1 4530 0
 14633 6b2e 40F20000 		movw	r0, #:lower16:.LC450
 14634 6b32 C0F20000 		movt	r0, #:upper16:.LC450
 14635 6b36 FFF7FEFF 		bl	printf
4532:.\console.c   **** 					goto exitpars;
 14636              		.loc 1 4532 0
 14637 6b3a B9E1     		b	.L131
 14638              	.L612:
4538:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "accth") == 0)
 14639              		.loc 1 4538 0
 14640 6b3c 8148     		ldr	r0, .L763
 14641 6b3e 40F20001 		movw	r1, #:lower16:.LC705
 14642 6b42 C0F20001 		movt	r1, #:upper16:.LC705
 14643 6b46 FFF7FEFF 		bl	strcmp
 14644 6b4a 0346     		mov	r3, r0
 14645 6b4c 002B     		cmp	r3, #0
 14646 6b4e 4FD1     		bne	.L617
4540:.\console.c   **** 					if (((acc_g_th = atof(actual_cmd.number1)) >= 0)
 14647              		.loc 1 4540 0
 14648 6b50 7D48     		ldr	r0, .L763+4
 14649 6b52 FFF7FEFF 		bl	atof
 14650 6b56 0246     		mov	r2, r0
 14651 6b58 0B46     		mov	r3, r1
 14652 6b5a 1046     		mov	r0, r2
 14653 6b5c 1946     		mov	r1, r3
 14654 6b5e FFF7FEFF 		bl	__aeabi_d2f
 14655 6b62 0346     		mov	r3, r0
 14656 6b64 C7F8DC30 		str	r3, [r7, #220]	@ float
 14657 6b68 D7F8DC00 		ldr	r0, [r7, #220]	@ float
 14658 6b6c 4FF00001 		mov	r1, #0
 14659 6b70 FFF7FEFF 		bl	__aeabi_fcmpge
 14660 6b74 0346     		mov	r3, r0
 14661 6b76 002B     		cmp	r3, #0
 14662 6b78 33D0     		beq	.L618
 14663              	.L681:
4541:.\console.c   **** 					&& (acc_g_th = atof(actual_cmd.number1)) <= 10)
 14664              		.loc 1 4541 0
 14665 6b7a 7348     		ldr	r0, .L763+4
 14666 6b7c FFF7FEFF 		bl	atof
 14667 6b80 0246     		mov	r2, r0
 14668 6b82 0B46     		mov	r3, r1
 14669 6b84 1046     		mov	r0, r2
 14670 6b86 1946     		mov	r1, r3
 14671 6b88 FFF7FEFF 		bl	__aeabi_d2f
 14672 6b8c 0346     		mov	r3, r0
 14673 6b8e C7F8DC30 		str	r3, [r7, #220]	@ float
 14674 6b92 D7F8DC00 		ldr	r0, [r7, #220]	@ float
 14675 6b96 4FF00001 		mov	r1, #0
 14676 6b9a C4F22011 		movt	r1, 16672
 14677 6b9e FFF7FEFF 		bl	__aeabi_fcmple
 14678 6ba2 0346     		mov	r3, r0
 14679 6ba4 002B     		cmp	r3, #0
 14680 6ba6 1CD0     		beq	.L618
 14681              	.L682:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 401


4543:.\console.c   **** 						gobee_param.acc_g_threshold.fnum = acc_g_th;
 14682              		.loc 1 4543 0
 14683 6ba8 40F20003 		movw	r3, #:lower16:gobee_param
 14684 6bac C0F20003 		movt	r3, #:upper16:gobee_param
 14685 6bb0 D7F8DC20 		ldr	r2, [r7, #220]	@ float
 14686 6bb4 5A61     		str	r2, [r3, #20]	@ float
4546:.\console.c   **** 						dummy = WriteAllEEparams();
 14687              		.loc 1 4546 0
 14688 6bb6 FFF7FEFF 		bl	WriteAllEEparams
 14689 6bba 0346     		mov	r3, r0
 14690 6bbc 87F8D930 		strb	r3, [r7, #217]
4547:.\console.c   **** 						printf(STR_REM_STAG, (float)gobee_param.acc_g_threshold.fnum);   /* REM: acc g thr setted to.
 14691              		.loc 1 4547 0
 14692 6bc0 40F20003 		movw	r3, #:lower16:gobee_param
 14693 6bc4 C0F20003 		movt	r3, #:upper16:gobee_param
 14694 6bc8 5B69     		ldr	r3, [r3, #20]	@ float
 14695 6bca 1846     		mov	r0, r3
 14696 6bcc FFF7FEFF 		bl	__aeabi_f2d
 14697 6bd0 0246     		mov	r2, r0
 14698 6bd2 0B46     		mov	r3, r1
 14699 6bd4 40F20000 		movw	r0, #:lower16:.LC706
 14700 6bd8 C0F20000 		movt	r0, #:upper16:.LC706
 14701 6bdc FFF7FEFF 		bl	printf
4553:.\console.c   **** 					goto exitpars;
 14702              		.loc 1 4553 0
 14703 6be0 66E1     		b	.L131
 14704              	.L618:
4551:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14705              		.loc 1 4551 0
 14706 6be2 40F20000 		movw	r0, #:lower16:.LC450
 14707 6be6 C0F20000 		movt	r0, #:upper16:.LC450
 14708 6bea FFF7FEFF 		bl	printf
4553:.\console.c   **** 					goto exitpars;
 14709              		.loc 1 4553 0
 14710 6bee 5FE1     		b	.L131
 14711              	.L617:
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
 14712              		.loc 1 4559 0
 14713 6bf0 5448     		ldr	r0, .L763
 14714 6bf2 40F20001 		movw	r1, #:lower16:.LC707
 14715 6bf6 C0F20001 		movt	r1, #:upper16:.LC707
 14716 6bfa FFF7FEFF 		bl	strcmp
 14717 6bfe 0346     		mov	r3, r0
 14718 6c00 002B     		cmp	r3, #0
 14719 6c02 0AD0     		beq	.L622
4560:.\console.c   **** 				   (strcmp(actual_cmd.parameter, "astimtype") == 0)) 
 14720              		.loc 1 4560 0 discriminator 1
 14721 6c04 4F48     		ldr	r0, .L763
 14722 6c06 40F20001 		movw	r1, #:lower16:.LC708
 14723 6c0a C0F20001 		movt	r1, #:upper16:.LC708
 14724 6c0e FFF7FEFF 		bl	strcmp
 14725 6c12 0346     		mov	r3, r0
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
 14726              		.loc 1 4559 0 discriminator 1
 14727 6c14 002B     		cmp	r3, #0
 14728 6c16 40F09980 		bne	.L623
 14729              	.L622:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 402


4562:.\console.c   **** 					if (((astim_type = atoi(actual_cmd.number1)) >= NO_ASTIM)
 14730              		.loc 1 4562 0
 14731 6c1a 4B48     		ldr	r0, .L763+4
 14732 6c1c FFF7FEFF 		bl	atoi
 14733 6c20 0346     		mov	r3, r0
 14734 6c22 87F8ED30 		strb	r3, [r7, #237]
4563:.\console.c   **** 					&& (astim_type = atoi(actual_cmd.number1)) <= SQUARE_ASTIM)
 14735              		.loc 1 4563 0
 14736 6c26 4848     		ldr	r0, .L763+4
 14737 6c28 FFF7FEFF 		bl	atoi
 14738 6c2c 0346     		mov	r3, r0
 14739 6c2e 87F8ED30 		strb	r3, [r7, #237]
 14740 6c32 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14741 6c36 032B     		cmp	r3, #3
 14742 6c38 7BD8     		bhi	.L624
4577:.\console.c   **** 							pan_axis.vparam.astim_type  = astim_type;
 14743              		.loc 1 4577 0
 14744 6c3a 40F20003 		movw	r3, #:lower16:pan_axis
 14745 6c3e C0F20003 		movt	r3, #:upper16:pan_axis
 14746 6c42 97F8ED20 		ldrb	r2, [r7, #237]
 14747 6c46 5A70     		strb	r2, [r3, #1]
4578:.\console.c   **** 							tilt_axis.vparam.astim_type = astim_type;						
 14748              		.loc 1 4578 0
 14749 6c48 40F20003 		movw	r3, #:lower16:tilt_axis
 14750 6c4c C0F20003 		movt	r3, #:upper16:tilt_axis
 14751 6c50 97F8ED20 		ldrb	r2, [r7, #237]
 14752 6c54 5A70     		strb	r2, [r3, #1]
4580:.\console.c   **** 							printf(STR_REM_ASTP, (uint16)astim_type);   /* REM: PAN  Astim Type Configured to...*/
 14753              		.loc 1 4580 0
 14754 6c56 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14755 6c5a 40F20000 		movw	r0, #:lower16:.LC709
 14756 6c5e C0F20000 		movt	r0, #:upper16:.LC709
 14757 6c62 1946     		mov	r1, r3
 14758 6c64 FFF7FEFF 		bl	printf
4581:.\console.c   **** 							printf(STR_REM_ASTT, (uint16)astim_type);   /* REM: TILT Astim Type Configured to...*/						
 14759              		.loc 1 4581 0
 14760 6c68 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14761 6c6c 40F20000 		movw	r0, #:lower16:.LC710
 14762 6c70 C0F20000 		movt	r0, #:upper16:.LC710
 14763 6c74 1946     		mov	r1, r3
 14764 6c76 FFF7FEFF 		bl	printf
4583:.\console.c   **** 							WaveDAC8_Start();					//Starts WaveDAC8	
 14765              		.loc 1 4583 0
 14766 6c7a FFF7FEFF 		bl	WaveDAC8_Start
4584:.\console.c   **** 							PGA_ASTIM_Start();					//Starts PGA_ASTIM
 14767              		.loc 1 4584 0
 14768 6c7e FFF7FEFF 		bl	PGA_ASTIM_Start
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14769              		.loc 1 4586 0
 14770 6c82 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14771 6c86 012B     		cmp	r3, #1
 14772 6c88 0ED1     		bne	.L625
4588:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
 14773              		.loc 1 4588 0
 14774 6c8a FFF7FEFF 		bl	WaveDAC8_Stop
4589:.\console.c   **** 								Control_Reg_WS_Write(0);			//Selects wave 0
 14775              		.loc 1 4589 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 403


 14776 6c8e 4FF00000 		mov	r0, #0
 14777 6c92 FFF7FEFF 		bl	Control_Reg_WS_Write
4590:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 14778              		.loc 1 4590 0
 14779 6c96 FFF7FEFF 		bl	WaveDAC8_Start
4591:.\console.c   **** 								printf("Sine Wave Astim Started!\r\n");							
 14780              		.loc 1 4591 0
 14781 6c9a 40F20000 		movw	r0, #:lower16:.LC711
 14782 6c9e C0F20000 		movt	r0, #:upper16:.LC711
 14783 6ca2 FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14784              		.loc 1 4586 0
 14785 6ca6 4BE0     		b	.L702
 14786              	.L625:
4593:.\console.c   **** 							else if (astim_type == TRIANGLE_ASTIM)
 14787              		.loc 1 4593 0
 14788 6ca8 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14789 6cac 022B     		cmp	r3, #2
 14790 6cae 16D1     		bne	.L627
4595:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
 14791              		.loc 1 4595 0
 14792 6cb0 FFF7FEFF 		bl	WaveDAC8_Stop
4596:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1																	
 14793              		.loc 1 4596 0
 14794 6cb4 4FF00100 		mov	r0, #1
 14795 6cb8 FFF7FEFF 		bl	Control_Reg_WS_Write
4597:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_triangle, WaveDAC8_WAVE_TRIANGLE_LENGTH);	//SELECTS TRIAN
 14796              		.loc 1 4597 0
 14797 6cbc 40F20000 		movw	r0, #:lower16:WaveDAC8_wave_triangle
 14798 6cc0 C0F20000 		movt	r0, #:upper16:WaveDAC8_wave_triangle
 14799 6cc4 40F60551 		movw	r1, #3333
 14800 6cc8 FFF7FEFF 		bl	WaveDAC8_Wave2Setup
4598:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 14801              		.loc 1 4598 0
 14802 6ccc FFF7FEFF 		bl	WaveDAC8_Start
4599:.\console.c   **** 								printf("Triangle Wave Astim Started!\r\n");								
 14803              		.loc 1 4599 0
 14804 6cd0 40F20000 		movw	r0, #:lower16:.LC712
 14805 6cd4 C0F20000 		movt	r0, #:upper16:.LC712
 14806 6cd8 FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14807              		.loc 1 4586 0
 14808 6cdc 30E0     		b	.L702
 14809              	.L627:
4601:.\console.c   **** 							else if (astim_type == SQUARE_ASTIM)
 14810              		.loc 1 4601 0
 14811 6cde 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14812 6ce2 032B     		cmp	r3, #3
 14813 6ce4 16D1     		bne	.L628
4603:.\console.c   **** 								WaveDAC8_Stop();					//Stops 						
 14814              		.loc 1 4603 0
 14815 6ce6 FFF7FEFF 		bl	WaveDAC8_Stop
4604:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1	
 14816              		.loc 1 4604 0
 14817 6cea 4FF00100 		mov	r0, #1
 14818 6cee FFF7FEFF 		bl	Control_Reg_WS_Write
4605:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_square, WaveDAC8_WAVE_SQUARE_LENGTH);	//SELECTS SQUARE
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 404


 14819              		.loc 1 4605 0
 14820 6cf2 40F20000 		movw	r0, #:lower16:WaveDAC8_wave_square
 14821 6cf6 C0F20000 		movt	r0, #:upper16:WaveDAC8_wave_square
 14822 6cfa 40F60551 		movw	r1, #3333
 14823 6cfe FFF7FEFF 		bl	WaveDAC8_Wave2Setup
4606:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 14824              		.loc 1 4606 0
 14825 6d02 FFF7FEFF 		bl	WaveDAC8_Start
4607:.\console.c   **** 								printf("Square Wave Astim Started!\r\n");								
 14826              		.loc 1 4607 0
 14827 6d06 40F20000 		movw	r0, #:lower16:.LC713
 14828 6d0a C0F20000 		movt	r0, #:upper16:.LC713
 14829 6d0e FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14830              		.loc 1 4586 0
 14831 6d12 15E0     		b	.L702
 14832              	.L628:
4609:.\console.c   **** 							else if (astim_type == NO_ASTIM)
 14833              		.loc 1 4609 0
 14834 6d14 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14835 6d18 002B     		cmp	r3, #0
 14836 6d1a 11D1     		bne	.L702
4611:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8
 14837              		.loc 1 4611 0
 14838 6d1c FFF7FEFF 		bl	WaveDAC8_Stop
4612:.\console.c   **** 								PGA_ASTIM_Stop();					//Stops PGA_ASTIM
 14839              		.loc 1 4612 0
 14840 6d20 FFF7FEFF 		bl	PGA_ASTIM_Stop
4613:.\console.c   **** 								printf("Wave Astim Stopped!\r\n");							
 14841              		.loc 1 4613 0
 14842 6d24 40F20000 		movw	r0, #:lower16:.LC714
 14843 6d28 C0F20000 		movt	r0, #:upper16:.LC714
 14844 6d2c FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14845              		.loc 1 4586 0
 14846 6d30 06E0     		b	.L702
 14847              	.L624:
4622:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14848              		.loc 1 4622 0
 14849 6d32 40F20000 		movw	r0, #:lower16:.LC450
 14850 6d36 C0F20000 		movt	r0, #:upper16:.LC450
 14851 6d3a FFF7FEFF 		bl	printf
4624:.\console.c   **** 					goto exitpars;
 14852              		.loc 1 4624 0
 14853 6d3e B7E0     		b	.L131
 14854              	.L702:
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14855              		.loc 1 4586 0
 14856 6d40 00BF     		nop
 14857              	.L629:
4624:.\console.c   **** 					goto exitpars;
 14858              		.loc 1 4624 0
 14859 6d42 B5E0     		b	.L131
 14860              	.L764:
 14861              		.align	2
 14862              	.L763:
 14863 6d44 0F000000 		.word	actual_cmd+15
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 405


 14864 6d48 1E000000 		.word	actual_cmd+30
 14865              	.L623:
4630:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimp") == 0) 
 14866              		.loc 1 4630 0
 14867 6d4c 5C48     		ldr	r0, .L765
 14868 6d4e 40F20001 		movw	r1, #:lower16:.LC715
 14869 6d52 C0F20001 		movt	r1, #:upper16:.LC715
 14870 6d56 FFF7FEFF 		bl	strcmp
 14871 6d5a 0346     		mov	r3, r0
 14872 6d5c 002B     		cmp	r3, #0
 14873 6d5e 44D1     		bne	.L630
4632:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
 14874              		.loc 1 4632 0
 14875 6d60 5848     		ldr	r0, .L765+4
 14876 6d62 FFF7FEFF 		bl	atoi
 14877 6d66 0346     		mov	r3, r0
 14878 6d68 87F8EC30 		strb	r3, [r7, #236]
4633:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
 14879              		.loc 1 4633 0
 14880 6d6c 5548     		ldr	r0, .L765+4
 14881 6d6e FFF7FEFF 		bl	atoi
 14882 6d72 0346     		mov	r3, r0
 14883 6d74 87F8EC30 		strb	r3, [r7, #236]
 14884 6d78 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14885 6d7c 012B     		cmp	r3, #1
 14886 6d7e 2DD8     		bhi	.L631
4635:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
 14887              		.loc 1 4635 0
 14888 6d80 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14889 6d84 012B     		cmp	r3, #1
 14890 6d86 18D1     		bne	.L632
4637:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
 14891              		.loc 1 4637 0
 14892 6d88 40F20000 		movw	r0, #:lower16:.LC716
 14893 6d8c C0F20000 		movt	r0, #:upper16:.LC716
 14894 6d90 FFF7FEFF 		bl	puts
4638:.\console.c   **** 							printf(STR_ASTIMB);				//
 14895              		.loc 1 4638 0
 14896 6d94 40F20000 		movw	r0, #:lower16:.LC717
 14897 6d98 C0F20000 		movt	r0, #:upper16:.LC717
 14898 6d9c FFF7FEFF 		bl	printf
4640:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
 14899              		.loc 1 4640 0
 14900 6da0 4FF00100 		mov	r0, #1
 14901 6da4 FFF7FEFF 		bl	ButtonYNChoice
 14902 6da8 0346     		mov	r3, r0
 14903 6daa 002B     		cmp	r3, #0
 14904 6dac 7BD0     		beq	.L703
 14905              	.L633:
4644:.\console.c   **** 							printf("\r\n");	
 14906              		.loc 1 4644 0
 14907 6dae 40F20000 		movw	r0, #:lower16:.LC42
 14908 6db2 C0F20000 		movt	r0, #:upper16:.LC42
 14909 6db6 FFF7FEFF 		bl	puts
 14910              	.L632:
4650:.\console.c   **** 						pan_axis.vparam.astim_enable  = astim_enable;
 14911              		.loc 1 4650 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 406


 14912 6dba 40F20003 		movw	r3, #:lower16:pan_axis
 14913 6dbe C0F20003 		movt	r3, #:upper16:pan_axis
 14914 6dc2 97F8EC20 		ldrb	r2, [r7, #236]
 14915 6dc6 1A70     		strb	r2, [r3, #0]
4652:.\console.c   **** 						printf(STR_REM_ASEP, (uint16)astim_enable);   /* REM: PAN  Astim Type Configured to...*/
 14916              		.loc 1 4652 0
 14917 6dc8 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14918 6dcc 40F20000 		movw	r0, #:lower16:.LC718
 14919 6dd0 C0F20000 		movt	r0, #:upper16:.LC718
 14920 6dd4 1946     		mov	r1, r3
 14921 6dd6 FFF7FEFF 		bl	printf
4658:.\console.c   **** 					goto exitpars;
 14922              		.loc 1 4658 0
 14923 6dda 69E0     		b	.L131
 14924              	.L631:
4656:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14925              		.loc 1 4656 0
 14926 6ddc 40F20000 		movw	r0, #:lower16:.LC450
 14927 6de0 C0F20000 		movt	r0, #:upper16:.LC450
 14928 6de4 FFF7FEFF 		bl	printf
4658:.\console.c   **** 					goto exitpars;
 14929              		.loc 1 4658 0
 14930 6de8 62E0     		b	.L131
 14931              	.L630:
4664:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimt") == 0) 
 14932              		.loc 1 4664 0
 14933 6dea 3548     		ldr	r0, .L765
 14934 6dec 40F20001 		movw	r1, #:lower16:.LC719
 14935 6df0 C0F20001 		movt	r1, #:upper16:.LC719
 14936 6df4 FFF7FEFF 		bl	strcmp
 14937 6df8 0346     		mov	r3, r0
 14938 6dfa 002B     		cmp	r3, #0
 14939 6dfc 55D1     		bne	.L704
4666:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
 14940              		.loc 1 4666 0
 14941 6dfe 3148     		ldr	r0, .L765+4
 14942 6e00 FFF7FEFF 		bl	atoi
 14943 6e04 0346     		mov	r3, r0
 14944 6e06 87F8EC30 		strb	r3, [r7, #236]
4667:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
 14945              		.loc 1 4667 0
 14946 6e0a 2E48     		ldr	r0, .L765+4
 14947 6e0c FFF7FEFF 		bl	atoi
 14948 6e10 0346     		mov	r3, r0
 14949 6e12 87F8EC30 		strb	r3, [r7, #236]
 14950 6e16 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14951 6e1a 012B     		cmp	r3, #1
 14952 6e1c 2DD8     		bhi	.L635
4669:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
 14953              		.loc 1 4669 0
 14954 6e1e 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14955 6e22 012B     		cmp	r3, #1
 14956 6e24 18D1     		bne	.L636
4671:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
 14957              		.loc 1 4671 0
 14958 6e26 40F20000 		movw	r0, #:lower16:.LC716
 14959 6e2a C0F20000 		movt	r0, #:upper16:.LC716
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 407


 14960 6e2e FFF7FEFF 		bl	puts
4672:.\console.c   **** 							printf(STR_ASTIMB);				//
 14961              		.loc 1 4672 0
 14962 6e32 40F20000 		movw	r0, #:lower16:.LC717
 14963 6e36 C0F20000 		movt	r0, #:upper16:.LC717
 14964 6e3a FFF7FEFF 		bl	printf
4674:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
 14965              		.loc 1 4674 0
 14966 6e3e 4FF00100 		mov	r0, #1
 14967 6e42 FFF7FEFF 		bl	ButtonYNChoice
 14968 6e46 0346     		mov	r3, r0
 14969 6e48 002B     		cmp	r3, #0
 14970 6e4a 30D0     		beq	.L705
 14971              	.L637:
4678:.\console.c   **** 							printf("\r\n");
 14972              		.loc 1 4678 0
 14973 6e4c 40F20000 		movw	r0, #:lower16:.LC42
 14974 6e50 C0F20000 		movt	r0, #:upper16:.LC42
 14975 6e54 FFF7FEFF 		bl	puts
 14976              	.L636:
4684:.\console.c   **** 							tilt_axis.vparam.astim_enable  = astim_enable;
 14977              		.loc 1 4684 0
 14978 6e58 40F20003 		movw	r3, #:lower16:tilt_axis
 14979 6e5c C0F20003 		movt	r3, #:upper16:tilt_axis
 14980 6e60 97F8EC20 		ldrb	r2, [r7, #236]
 14981 6e64 1A70     		strb	r2, [r3, #0]
4686:.\console.c   **** 							printf(STR_REM_ASET, (uint16)astim_enable);   /* REM: TILT  Astim Type Configured to...*/
 14982              		.loc 1 4686 0
 14983 6e66 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14984 6e6a 40F20000 		movw	r0, #:lower16:.LC720
 14985 6e6e C0F20000 		movt	r0, #:upper16:.LC720
 14986 6e72 1946     		mov	r1, r3
 14987 6e74 FFF7FEFF 		bl	printf
4692:.\console.c   **** 					goto exitpars;
 14988              		.loc 1 4692 0
 14989 6e78 1AE0     		b	.L131
 14990              	.L635:
4690:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14991              		.loc 1 4690 0
 14992 6e7a 40F20000 		movw	r0, #:lower16:.LC450
 14993 6e7e C0F20000 		movt	r0, #:upper16:.LC450
 14994 6e82 FFF7FEFF 		bl	printf
4692:.\console.c   **** 					goto exitpars;
 14995              		.loc 1 4692 0
 14996 6e86 13E0     		b	.L131
 14997              	.L408:
4753:.\console.c   **** 		}	
4754:.\console.c   **** 	printf(STR_ERROR4);
 14998              		.loc 1 4754 0
 14999 6e88 40F20000 		movw	r0, #:lower16:.LC721
 15000 6e8c C0F20000 		movt	r0, #:upper16:.LC721
 15001 6e90 FFF7FEFF 		bl	printf
 15002 6e94 0CE0     		b	.L131
 15003              	.L685:
1207:.\console.c   **** 	goto exitpars;
 15004              		.loc 1 1207 0
 15005 6e96 00BF     		nop
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 408


 15006 6e98 0AE0     		b	.L131
 15007              	.L694:
2279:.\console.c   **** 				goto exitpars;	
 15008              		.loc 1 2279 0
 15009 6e9a 00BF     		nop
 15010 6e9c 08E0     		b	.L131
 15011              	.L699:
2770:.\console.c   **** 				goto exitpars;
 15012              		.loc 1 2770 0
 15013 6e9e 00BF     		nop
 15014 6ea0 06E0     		b	.L131
 15015              	.L700:
2991:.\console.c   **** 		goto exitpars;	
 15016              		.loc 1 2991 0
 15017 6ea2 00BF     		nop
 15018 6ea4 04E0     		b	.L131
 15019              	.L703:
4642:.\console.c   **** 								goto exitpars;
 15020              		.loc 1 4642 0
 15021 6ea6 00BF     		nop
 15022 6ea8 02E0     		b	.L131
 15023              	.L704:
4752:.\console.c   **** 		goto exitpars;	
 15024              		.loc 1 4752 0
 15025 6eaa 00BF     		nop
 15026 6eac 00E0     		b	.L131
 15027              	.L705:
4676:.\console.c   **** 								goto exitpars;
 15028              		.loc 1 4676 0
 15029 6eae 00BF     		nop
 15030              	.L131:
4755:.\console.c   **** 
4756:.\console.c   **** 	
4757:.\console.c   **** exitpars:	
4758:.\console.c   **** 	//printf("\r\n");	
4759:.\console.c   **** 	return 0;	// PARS_OK//
 15031              		.loc 1 4759 0
 15032 6eb0 4FF00003 		mov	r3, #0
4760:.\console.c   **** }
 15033              		.loc 1 4760 0
 15034 6eb4 1846     		mov	r0, r3
 15035 6eb6 07F58E77 		add	r7, r7, #284
 15036 6eba BD46     		mov	sp, r7
 15037 6ebc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 15038              	.L766:
 15039              		.align	2
 15040              	.L765:
 15041 6ec0 0F000000 		.word	actual_cmd+15
 15042 6ec4 1E000000 		.word	actual_cmd+30
 15043              		.cfi_endproc
 15044              	.LFE69:
 15045              		.size	parser, .-parser
 15046              		.section	.text.AnyButtonPressed,"ax",%progbits
 15047              		.align	2
 15048              		.global	AnyButtonPressed
 15049              		.thumb
 15050              		.thumb_func
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 409


 15051              		.type	AnyButtonPressed, %function
 15052              	AnyButtonPressed:
 15053              	.LFB70:
4761:.\console.c   **** 
4762:.\console.c   **** 
4763:.\console.c   **** /* Verify Any CHAR pressed */
4764:.\console.c   **** uint8 AnyButtonPressed(void)
4765:.\console.c   **** {	
 15054              		.loc 1 4765 0
 15055              		.cfi_startproc
 15056              		@ args = 0, pretend = 0, frame = 0
 15057              		@ frame_needed = 1, uses_anonymous_args = 0
 15058 0000 80B5     		push	{r7, lr}
 15059              	.LCFI40:
 15060              		.cfi_def_cfa_offset 8
 15061              		.cfi_offset 7, -8
 15062              		.cfi_offset 14, -4
 15063 0002 00AF     		add	r7, sp, #0
 15064              	.LCFI41:
 15065              		.cfi_def_cfa_register 7
4766:.\console.c   **** 	// case USB standard input
4767:.\console.c   **** 	if (UART_USB_GetChar() == 0)
 15066              		.loc 1 4767 0
 15067 0004 FFF7FEFF 		bl	UART_USB_GetChar
 15068 0008 0346     		mov	r3, r0
 15069 000a 002B     		cmp	r3, #0
 15070 000c 02D1     		bne	.L768
4768:.\console.c   **** 	{
4769:.\console.c   **** 		return NO_PRESSED;
 15071              		.loc 1 4769 0
 15072 000e 4FF00003 		mov	r3, #0
 15073 0012 01E0     		b	.L769
 15074              	.L768:
4770:.\console.c   **** 	}
4771:.\console.c   **** 	else
4772:.\console.c   **** 	{
4773:.\console.c   **** 		return PRESSED;
 15075              		.loc 1 4773 0
 15076 0014 4FF00103 		mov	r3, #1
 15077              	.L769:
4774:.\console.c   **** 	}
4775:.\console.c   **** }
 15078              		.loc 1 4775 0
 15079 0018 1846     		mov	r0, r3
 15080 001a 80BD     		pop	{r7, pc}
 15081              		.cfi_endproc
 15082              	.LFE70:
 15083              		.size	AnyButtonPressed, .-AnyButtonPressed
 15084              		.section	.text.ButtonYNChoice,"ax",%progbits
 15085              		.align	2
 15086              		.global	ButtonYNChoice
 15087              		.thumb
 15088              		.thumb_func
 15089              		.type	ButtonYNChoice, %function
 15090              	ButtonYNChoice:
 15091              	.LFB71:
4776:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 410


4777:.\console.c   **** 
4778:.\console.c   **** 
4779:.\console.c   **** /* Verify [Y/N] choice */
4780:.\console.c   **** uint8 ButtonYNChoice(bit echo)
4781:.\console.c   **** {	
 15092              		.loc 1 4781 0
 15093              		.cfi_startproc
 15094              		@ args = 0, pretend = 0, frame = 16
 15095              		@ frame_needed = 1, uses_anonymous_args = 0
 15096 0000 80B5     		push	{r7, lr}
 15097              	.LCFI42:
 15098              		.cfi_def_cfa_offset 8
 15099              		.cfi_offset 7, -8
 15100              		.cfi_offset 14, -4
 15101 0002 84B0     		sub	sp, sp, #16
 15102              	.LCFI43:
 15103              		.cfi_def_cfa_offset 24
 15104 0004 00AF     		add	r7, sp, #0
 15105              	.LCFI44:
 15106              		.cfi_def_cfa_register 7
 15107 0006 0346     		mov	r3, r0
 15108 0008 FB71     		strb	r3, [r7, #7]
 15109              	.L771:
4782:.\console.c   **** 	char charin;
4783:.\console.c   **** 	
4784:.\console.c   **** //	if (std_input == USB_STD_INPUT)
4785:.\console.c   **** //	{
4786:.\console.c   **** 		// case USB standard input
4787:.\console.c   **** 		while ((charin = UART_USB_GetChar()) == 0)
 15110              		.loc 1 4787 0 discriminator 1
 15111 000a FFF7FEFF 		bl	UART_USB_GetChar
 15112 000e 0346     		mov	r3, r0
 15113 0010 FB73     		strb	r3, [r7, #15]
 15114 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15115 0014 002B     		cmp	r3, #0
 15116 0016 F8D0     		beq	.L771
4788:.\console.c   **** 		{
4789:.\console.c   **** 		//wait for char
4790:.\console.c   **** 		}
4791:.\console.c   **** //	}
4792:.\console.c   **** //	else
4793:.\console.c   **** //	{
4794:.\console.c   **** //		// case BT standard input
4795:.\console.c   **** //		while ((charin = UART_BT_GetChar()) == 0)
4796:.\console.c   **** //		{
4797:.\console.c   **** //		//wait for char
4798:.\console.c   **** //		}
4799:.\console.c   **** //	}
4800:.\console.c   **** 	
4801:.\console.c   **** 	if (echo == 1)
 15117              		.loc 1 4801 0
 15118 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 15119 001a 012B     		cmp	r3, #1
 15120 001c 03D1     		bne	.L772
4802:.\console.c   **** 	{
4803:.\console.c   **** 		printf("%c", charin);
 15121              		.loc 1 4803 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 411


 15122 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15123 0020 1846     		mov	r0, r3
 15124 0022 FFF7FEFF 		bl	putchar
 15125              	.L772:
 15126              	.LBB10:
4804:.\console.c   **** 	}
4805:.\console.c   **** 	
4806:.\console.c   **** 	if (tolower((int)charin) == 'y')
 15127              		.loc 1 4806 0
 15128 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15129 0028 BB60     		str	r3, [r7, #8]
 15130 002a 40F20003 		movw	r3, #:lower16:__ctype_ptr__
 15131 002e C0F20003 		movt	r3, #:upper16:__ctype_ptr__
 15132 0032 1A68     		ldr	r2, [r3, #0]
 15133 0034 BB68     		ldr	r3, [r7, #8]
 15134 0036 03F10103 		add	r3, r3, #1
 15135 003a D318     		adds	r3, r2, r3
 15136 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 15137 003e 03F00303 		and	r3, r3, #3
 15138 0042 012B     		cmp	r3, #1
 15139 0044 03D1     		bne	.L773
 15140              		.loc 1 4806 0 is_stmt 0 discriminator 1
 15141 0046 BB68     		ldr	r3, [r7, #8]
 15142 0048 03F12003 		add	r3, r3, #32
 15143 004c 00E0     		b	.L774
 15144              	.L773:
 15145              		.loc 1 4806 0 discriminator 2
 15146 004e BB68     		ldr	r3, [r7, #8]
 15147              	.L774:
 15148              	.LBE10:
 15149              		.loc 1 4806 0 discriminator 3
 15150 0050 792B     		cmp	r3, #121
 15151 0052 02D1     		bne	.L775
4807:.\console.c   **** 	{
4808:.\console.c   **** 		return _YES;
 15152              		.loc 1 4808 0 is_stmt 1
 15153 0054 4FF00103 		mov	r3, #1
 15154 0058 01E0     		b	.L776
 15155              	.L775:
4809:.\console.c   **** 	}
4810:.\console.c   **** 	else
4811:.\console.c   **** 	{
4812:.\console.c   **** 		return _NO;
 15156              		.loc 1 4812 0
 15157 005a 4FF00003 		mov	r3, #0
 15158              	.L776:
4813:.\console.c   **** 	}
4814:.\console.c   **** 
4815:.\console.c   **** }
 15159              		.loc 1 4815 0
 15160 005e 1846     		mov	r0, r3
 15161 0060 07F11007 		add	r7, r7, #16
 15162 0064 BD46     		mov	sp, r7
 15163 0066 80BD     		pop	{r7, pc}
 15164              		.cfi_endproc
 15165              	.LFE71:
 15166              		.size	ButtonYNChoice, .-ButtonYNChoice
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 412


 15167              		.section	.text.clear_string,"ax",%progbits
 15168              		.align	2
 15169              		.global	clear_string
 15170              		.thumb
 15171              		.thumb_func
 15172              		.type	clear_string, %function
 15173              	clear_string:
 15174              	.LFB72:
4816:.\console.c   **** 
4817:.\console.c   **** 
4818:.\console.c   **** void clear_string(char *str)
4819:.\console.c   **** {
 15175              		.loc 1 4819 0
 15176              		.cfi_startproc
 15177              		@ args = 0, pretend = 0, frame = 16
 15178              		@ frame_needed = 1, uses_anonymous_args = 0
 15179              		@ link register save eliminated.
 15180 0000 80B4     		push	{r7}
 15181              	.LCFI45:
 15182              		.cfi_def_cfa_offset 4
 15183              		.cfi_offset 7, -4
 15184 0002 85B0     		sub	sp, sp, #20
 15185              	.LCFI46:
 15186              		.cfi_def_cfa_offset 24
 15187 0004 00AF     		add	r7, sp, #0
 15188              	.LCFI47:
 15189              		.cfi_def_cfa_register 7
 15190 0006 7860     		str	r0, [r7, #4]
4820:.\console.c   **** 	uint8 idx = 0;
 15191              		.loc 1 4820 0
 15192 0008 4FF00003 		mov	r3, #0
 15193 000c FB73     		strb	r3, [r7, #15]
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15194              		.loc 1 4821 0
 15195 000e 4FF00003 		mov	r3, #0
 15196 0012 FB73     		strb	r3, [r7, #15]
 15197 0014 09E0     		b	.L778
 15198              	.L779:
4822:.\console.c   **** 	{
4823:.\console.c   **** 		*(str + idx) = '\0';
 15199              		.loc 1 4823 0 discriminator 2
 15200 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15201 0018 7A68     		ldr	r2, [r7, #4]
 15202 001a D318     		adds	r3, r2, r3
 15203 001c 4FF00002 		mov	r2, #0
 15204 0020 1A70     		strb	r2, [r3, #0]
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15205              		.loc 1 4821 0 discriminator 2
 15206 0022 FB7B     		ldrb	r3, [r7, #15]
 15207 0024 03F10103 		add	r3, r3, #1
 15208 0028 FB73     		strb	r3, [r7, #15]
 15209              	.L778:
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15210              		.loc 1 4821 0 is_stmt 0 discriminator 1
 15211 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15212 002c 042B     		cmp	r3, #4
 15213 002e F2D9     		bls	.L779
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 413


4824:.\console.c   **** 	}
4825:.\console.c   **** }
 15214              		.loc 1 4825 0 is_stmt 1
 15215 0030 07F11407 		add	r7, r7, #20
 15216 0034 BD46     		mov	sp, r7
 15217 0036 80BC     		pop	{r7}
 15218 0038 7047     		bx	lr
 15219              		.cfi_endproc
 15220              	.LFE72:
 15221              		.size	clear_string, .-clear_string
 15222 003a 00BF     		.section	.text.USB_Check,"ax",%progbits
 15223              		.align	2
 15224              		.global	USB_Check
 15225              		.thumb
 15226              		.thumb_func
 15227              		.type	USB_Check, %function
 15228              	USB_Check:
 15229              	.LFB73:
4826:.\console.c   **** 
4827:.\console.c   **** 
4828:.\console.c   **** uint8 USB_Check(void)
4829:.\console.c   **** {	
 15230              		.loc 1 4829 0
 15231              		.cfi_startproc
 15232              		@ args = 0, pretend = 0, frame = 0
 15233              		@ frame_needed = 1, uses_anonymous_args = 0
 15234              		@ link register save eliminated.
 15235 0000 80B4     		push	{r7}
 15236              	.LCFI48:
 15237              		.cfi_def_cfa_offset 4
 15238              		.cfi_offset 7, -4
 15239 0002 00AF     		add	r7, sp, #0
 15240              	.LCFI49:
 15241              		.cfi_def_cfa_register 7
4830:.\console.c   **** 	return USB_INSERTED;	/* There is not the phisical signal on the board */
 15242              		.loc 1 4830 0
 15243 0004 4FF00103 		mov	r3, #1
4831:.\console.c   **** 
4832:.\console.c   **** }
 15244              		.loc 1 4832 0
 15245 0008 1846     		mov	r0, r3
 15246 000a BD46     		mov	sp, r7
 15247 000c 80BC     		pop	{r7}
 15248 000e 7047     		bx	lr
 15249              		.cfi_endproc
 15250              	.LFE73:
 15251              		.size	USB_Check, .-USB_Check
 15252              		.section	.text.GetAnaposOffsetZero,"ax",%progbits
 15253              		.align	2
 15254              		.global	GetAnaposOffsetZero
 15255              		.thumb
 15256              		.thumb_func
 15257              		.type	GetAnaposOffsetZero, %function
 15258              	GetAnaposOffsetZero:
 15259              	.LFB74:
4833:.\console.c   **** 
4834:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 414


4835:.\console.c   **** /* Get Anapos Offset value to zero Oscilloscope									*/
4836:.\console.c   **** /*   returns: (int32)anapos_offset  correct value to zero oscilloscope output	*/
4837:.\console.c   **** int32 GetAnaposOffsetZero(void)
4838:.\console.c   **** {	
 15260              		.loc 1 4838 0
 15261              		.cfi_startproc
 15262              		@ args = 0, pretend = 0, frame = 0
 15263              		@ frame_needed = 1, uses_anonymous_args = 0
 15264 0000 80B5     		push	{r7, lr}
 15265              	.LCFI50:
 15266              		.cfi_def_cfa_offset 8
 15267              		.cfi_offset 7, -8
 15268              		.cfi_offset 14, -4
 15269 0002 00AF     		add	r7, sp, #0
 15270              	.LCFI51:
 15271              		.cfi_def_cfa_register 7
4839:.\console.c   **** 	/* CONTROL integral(t) CASE		*/
4840:.\console.c   **** 	if ((*Selected_ANAOUT).param.color == CTRL_IERROR)
 15272              		.loc 1 4840 0
 15273 0004 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15274 0008 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15275 000c 1B68     		ldr	r3, [r3, #0]
 15276 000e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15277 0012 062B     		cmp	r3, #6
 15278 0014 0FD1     		bne	.L783
4841:.\console.c   **** 	{
4842:.\console.c   **** 		anapos_offset = (*Selected_ANAOUT).mc.ierror;
 15279              		.loc 1 4842 0
 15280 0016 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15281 001a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15282 001e 1B68     		ldr	r3, [r3, #0]
 15283 0020 1B6E     		ldr	r3, [r3, #96]	@ float
 15284 0022 1846     		mov	r0, r3
 15285 0024 FFF7FEFF 		bl	__aeabi_f2iz
 15286 0028 0246     		mov	r2, r0
 15287 002a 40F20003 		movw	r3, #:lower16:anapos_offset
 15288 002e C0F20003 		movt	r3, #:upper16:anapos_offset
 15289 0032 1A60     		str	r2, [r3, #0]
 15290 0034 87E0     		b	.L784
 15291              	.L783:
4843:.\console.c   **** 	}
4844:.\console.c   **** 	/* CONTROL integral_action(t) CASE	*/
4845:.\console.c   **** 	else if ((*Selected_ANAOUT).param.color == CTRL_AZIERROR)
 15292              		.loc 1 4845 0
 15293 0036 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15294 003a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15295 003e 1B68     		ldr	r3, [r3, #0]
 15296 0040 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15297 0044 072B     		cmp	r3, #7
 15298 0046 1AD1     		bne	.L785
4846:.\console.c   **** 	{
4847:.\console.c   **** 		anapos_offset = (*Selected_ANAOUT).param.Kif.fnum * (*Selected_ANAOUT).mc.ierror;
 15299              		.loc 1 4847 0
 15300 0048 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15301 004c C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15302 0050 1B68     		ldr	r3, [r3, #0]
 15303 0052 DA69     		ldr	r2, [r3, #28]	@ float
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 415


 15304 0054 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15305 0058 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15306 005c 1B68     		ldr	r3, [r3, #0]
 15307 005e 1B6E     		ldr	r3, [r3, #96]	@ float
 15308 0060 1046     		mov	r0, r2
 15309 0062 1946     		mov	r1, r3
 15310 0064 FFF7FEFF 		bl	__aeabi_fmul
 15311 0068 0346     		mov	r3, r0
 15312 006a 1846     		mov	r0, r3
 15313 006c FFF7FEFF 		bl	__aeabi_f2iz
 15314 0070 0246     		mov	r2, r0
 15315 0072 40F20003 		movw	r3, #:lower16:anapos_offset
 15316 0076 C0F20003 		movt	r3, #:upper16:anapos_offset
 15317 007a 1A60     		str	r2, [r3, #0]
 15318 007c 63E0     		b	.L784
 15319              	.L785:
4848:.\console.c   **** 	}	
4849:.\console.c   **** 	/* SLAVE CASE */
4850:.\console.c   **** 	else if ((*Selected_ANAOUT).param.color == SLAVE_ENC_POS)
 15320              		.loc 1 4850 0
 15321 007e 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15322 0082 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15323 0086 1B68     		ldr	r3, [r3, #0]
 15324 0088 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15325 008c 012B     		cmp	r3, #1
 15326 008e 2FD1     		bne	.L786
4851:.\console.c   **** 	{
4852:.\console.c   **** 		if (Selected_ANAOUT == &pan_axis)
 15327              		.loc 1 4852 0
 15328 0090 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15329 0094 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15330 0098 1A68     		ldr	r2, [r3, #0]
 15331 009a 40F20003 		movw	r3, #:lower16:pan_axis
 15332 009e C0F20003 		movt	r3, #:upper16:pan_axis
 15333 00a2 9A42     		cmp	r2, r3
 15334 00a4 08D1     		bne	.L787
4853:.\console.c   **** 		{
4854:.\console.c   **** 			anapos_offset = QuadDec_PAN_GetCounter();
 15335              		.loc 1 4854 0
 15336 00a6 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 15337 00aa 0246     		mov	r2, r0
 15338 00ac 40F20003 		movw	r3, #:lower16:anapos_offset
 15339 00b0 C0F20003 		movt	r3, #:upper16:anapos_offset
 15340 00b4 1A60     		str	r2, [r3, #0]
 15341 00b6 46E0     		b	.L784
 15342              	.L787:
4855:.\console.c   **** 		}
4856:.\console.c   **** 		else if (Selected_ANAOUT == &tilt_axis)
 15343              		.loc 1 4856 0
 15344 00b8 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15345 00bc C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15346 00c0 1A68     		ldr	r2, [r3, #0]
 15347 00c2 40F20003 		movw	r3, #:lower16:tilt_axis
 15348 00c6 C0F20003 		movt	r3, #:upper16:tilt_axis
 15349 00ca 9A42     		cmp	r2, r3
 15350 00cc 08D1     		bne	.L788
4857:.\console.c   **** 		{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 416


4858:.\console.c   **** 			anapos_offset = QuadDec_TILT_GetCounter();
 15351              		.loc 1 4858 0
 15352 00ce FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 15353 00d2 0246     		mov	r2, r0
 15354 00d4 40F20003 		movw	r3, #:lower16:anapos_offset
 15355 00d8 C0F20003 		movt	r3, #:upper16:anapos_offset
 15356 00dc 1A60     		str	r2, [r3, #0]
 15357 00de 32E0     		b	.L784
 15358              	.L788:
4859:.\console.c   **** 		}	
4860:.\console.c   **** //		else if (Selected_ANAOUT == &roll_axis)
4861:.\console.c   **** //		{
4862:.\console.c   **** //			anapos_offset = QuadDec_ROLL_GetCounter();
4863:.\console.c   **** //		}	
4864:.\console.c   **** 		else
4865:.\console.c   **** 		{
4866:.\console.c   **** 			anapos_offset = 0;
 15359              		.loc 1 4866 0
 15360 00e0 40F20003 		movw	r3, #:lower16:anapos_offset
 15361 00e4 C0F20003 		movt	r3, #:upper16:anapos_offset
 15362 00e8 4FF00002 		mov	r2, #0
 15363 00ec 1A60     		str	r2, [r3, #0]
 15364 00ee 2AE0     		b	.L784
 15365              	.L786:
4867:.\console.c   **** 		}				
4868:.\console.c   **** 	}
4869:.\console.c   **** 	/* ASTIM CASE */
4870:.\console.c   **** 	else if (((*Selected_ANAOUT).param.color == ASTIM_IN) || 
 15366              		.loc 1 4870 0
 15367 00f0 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15368 00f4 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15369 00f8 1B68     		ldr	r3, [r3, #0]
 15370 00fa 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15371 00fe 032B     		cmp	r3, #3
 15372 0100 1AD0     		beq	.L789
4871:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_ERROR) ||
 15373              		.loc 1 4871 0 discriminator 1
 15374 0102 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15375 0106 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15376 010a 1B68     		ldr	r3, [r3, #0]
 15377 010c 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4870:.\console.c   **** 	else if (((*Selected_ANAOUT).param.color == ASTIM_IN) || 
 15378              		.loc 1 4870 0 discriminator 1
 15379 0110 042B     		cmp	r3, #4
 15380 0112 11D0     		beq	.L789
4872:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_DERROR) ||
 15381              		.loc 1 4872 0
 15382 0114 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15383 0118 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15384 011c 1B68     		ldr	r3, [r3, #0]
 15385 011e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4871:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_ERROR) ||
 15386              		.loc 1 4871 0
 15387 0122 052B     		cmp	r3, #5
 15388 0124 08D0     		beq	.L789
4873:.\console.c   **** 			((*Selected_ANAOUT).param.color == GYRO_RATE))
 15389              		.loc 1 4873 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 417


 15390 0126 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15391 012a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15392 012e 1B68     		ldr	r3, [r3, #0]
 15393 0130 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4872:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_DERROR) ||
 15394              		.loc 1 4872 0
 15395 0134 002B     		cmp	r3, #0
 15396 0136 06D1     		bne	.L784
 15397              	.L789:
4874:.\console.c   **** 	{
4875:.\console.c   **** 			anapos_offset = 0;
 15398              		.loc 1 4875 0
 15399 0138 40F20003 		movw	r3, #:lower16:anapos_offset
 15400 013c C0F20003 		movt	r3, #:upper16:anapos_offset
 15401 0140 4FF00002 		mov	r2, #0
 15402 0144 1A60     		str	r2, [r3, #0]
 15403              	.L784:
4876:.\console.c   **** 	}
4877:.\console.c   **** 	
4878:.\console.c   **** 	return anapos_offset;
 15404              		.loc 1 4878 0
 15405 0146 40F20003 		movw	r3, #:lower16:anapos_offset
 15406 014a C0F20003 		movt	r3, #:upper16:anapos_offset
 15407 014e 1B68     		ldr	r3, [r3, #0]
4879:.\console.c   **** }
 15408              		.loc 1 4879 0
 15409 0150 1846     		mov	r0, r3
 15410 0152 80BD     		pop	{r7, pc}
 15411              		.cfi_endproc
 15412              	.LFE74:
 15413              		.size	GetAnaposOffsetZero, .-GetAnaposOffsetZero
 15414              		.text
 15415              	.Letext0:
 15416              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.0\\psoc creator\\import\\gnu_cs\\arm\\4
 15417              		.file 3 "./Generated_Source/PSoC5/cytypes.h"
 15418              		.file 4 "./gobee.h"
 15419              		.file 5 "./console.h"
 15420              		.file 6 "./mover.h"
 15421              		.file 7 "./clu.h"
 15422              		.file 8 "./statistics.h"
 15423              		.file 9 "./torquestat.h"
 15424              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\3.0\\psoc creator\\import\\gnu_cs\\arm\\
 15425              		.file 11 "./Generated_Source/PSoC5/core_cm3.h"
 15426              		.file 12 "./XTR-8LR100.h"
 15427              		.section	.debug_info,"",%progbits
 15428              	.Ldebug_info0:
 15429 0000 AB160000 		.4byte	0x16ab
 15430 0004 0200     		.2byte	0x2
 15431 0006 00000000 		.4byte	.Ldebug_abbrev0
 15432 000a 04       		.byte	0x4
 15433 000b 01       		.uleb128 0x1
 15434 000c D0030000 		.4byte	.LASF287
 15435 0010 01       		.byte	0x1
 15436 0011 C70C0000 		.4byte	.LASF288
 15437 0015 B0020000 		.4byte	.LASF289
 15438 0019 00000000 		.4byte	.Ldebug_ranges0+0
 15439 001d 00000000 		.4byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 418


 15440 0021 00000000 		.4byte	0
 15441 0025 00000000 		.4byte	.Ldebug_line0
 15442 0029 02       		.uleb128 0x2
 15443 002a 01       		.byte	0x1
 15444 002b 06       		.byte	0x6
 15445 002c 28030000 		.4byte	.LASF0
 15446 0030 02       		.uleb128 0x2
 15447 0031 01       		.byte	0x1
 15448 0032 08       		.byte	0x8
 15449 0033 88030000 		.4byte	.LASF1
 15450 0037 02       		.uleb128 0x2
 15451 0038 02       		.byte	0x2
 15452 0039 05       		.byte	0x5
 15453 003a D40B0000 		.4byte	.LASF2
 15454 003e 02       		.uleb128 0x2
 15455 003f 02       		.byte	0x2
 15456 0040 07       		.byte	0x7
 15457 0041 180D0000 		.4byte	.LASF3
 15458 0045 03       		.uleb128 0x3
 15459 0046 73000000 		.4byte	.LASF9
 15460 004a 02       		.byte	0x2
 15461 004b 4F       		.byte	0x4f
 15462 004c 50000000 		.4byte	0x50
 15463 0050 02       		.uleb128 0x2
 15464 0051 04       		.byte	0x4
 15465 0052 05       		.byte	0x5
 15466 0053 7A020000 		.4byte	.LASF4
 15467 0057 02       		.uleb128 0x2
 15468 0058 04       		.byte	0x4
 15469 0059 07       		.byte	0x7
 15470 005a 50060000 		.4byte	.LASF5
 15471 005e 02       		.uleb128 0x2
 15472 005f 08       		.byte	0x8
 15473 0060 05       		.byte	0x5
 15474 0061 57070000 		.4byte	.LASF6
 15475 0065 02       		.uleb128 0x2
 15476 0066 08       		.byte	0x8
 15477 0067 07       		.byte	0x7
 15478 0068 D7090000 		.4byte	.LASF7
 15479 006c 04       		.uleb128 0x4
 15480 006d 04       		.byte	0x4
 15481 006e 05       		.byte	0x5
 15482 006f 696E7400 		.ascii	"int\000"
 15483 0073 02       		.uleb128 0x2
 15484 0074 04       		.byte	0x4
 15485 0075 07       		.byte	0x7
 15486 0076 17080000 		.4byte	.LASF8
 15487 007a 03       		.uleb128 0x3
 15488 007b 990B0000 		.4byte	.LASF10
 15489 007f 03       		.byte	0x3
 15490 0080 5B       		.byte	0x5b
 15491 0081 30000000 		.4byte	0x30
 15492 0085 03       		.uleb128 0x3
 15493 0086 E30D0000 		.4byte	.LASF11
 15494 008a 03       		.byte	0x3
 15495 008b 5C       		.byte	0x5c
 15496 008c 3E000000 		.4byte	0x3e
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 419


 15497 0090 03       		.uleb128 0x3
 15498 0091 BD000000 		.4byte	.LASF12
 15499 0095 03       		.byte	0x3
 15500 0096 5D       		.byte	0x5d
 15501 0097 57000000 		.4byte	0x57
 15502 009b 03       		.uleb128 0x3
 15503 009c 99010000 		.4byte	.LASF13
 15504 00a0 03       		.byte	0x3
 15505 00a1 5E       		.byte	0x5e
 15506 00a2 29000000 		.4byte	0x29
 15507 00a6 03       		.uleb128 0x3
 15508 00a7 DD0C0000 		.4byte	.LASF14
 15509 00ab 03       		.byte	0x3
 15510 00ac 5F       		.byte	0x5f
 15511 00ad 37000000 		.4byte	0x37
 15512 00b1 03       		.uleb128 0x3
 15513 00b2 5A0D0000 		.4byte	.LASF15
 15514 00b6 03       		.byte	0x3
 15515 00b7 60       		.byte	0x60
 15516 00b8 50000000 		.4byte	0x50
 15517 00bc 02       		.uleb128 0x2
 15518 00bd 04       		.byte	0x4
 15519 00be 04       		.byte	0x4
 15520 00bf FB070000 		.4byte	.LASF16
 15521 00c3 02       		.uleb128 0x2
 15522 00c4 08       		.byte	0x8
 15523 00c5 04       		.byte	0x4
 15524 00c6 AB070000 		.4byte	.LASF17
 15525 00ca 03       		.uleb128 0x3
 15526 00cb 33010000 		.4byte	.LASF18
 15527 00cf 03       		.byte	0x3
 15528 00d0 6C       		.byte	0x6c
 15529 00d1 D5000000 		.4byte	0xd5
 15530 00d5 02       		.uleb128 0x2
 15531 00d6 01       		.byte	0x1
 15532 00d7 08       		.byte	0x8
 15533 00d8 83040000 		.4byte	.LASF19
 15534 00dc 02       		.uleb128 0x2
 15535 00dd 04       		.byte	0x4
 15536 00de 07       		.byte	0x7
 15537 00df 0B000000 		.4byte	.LASF20
 15538 00e3 05       		.uleb128 0x5
 15539 00e4 04       		.byte	0x4
 15540 00e5 D5000000 		.4byte	0xd5
 15541 00e9 05       		.uleb128 0x5
 15542 00ea 04       		.byte	0x4
 15543 00eb EF000000 		.4byte	0xef
 15544 00ef 06       		.uleb128 0x6
 15545 00f0 D5000000 		.4byte	0xd5
 15546 00f4 02       		.uleb128 0x2
 15547 00f5 08       		.byte	0x8
 15548 00f6 04       		.byte	0x4
 15549 00f7 67090000 		.4byte	.LASF21
 15550 00fb 07       		.uleb128 0x7
 15551 00fc 04       		.byte	0x4
 15552 00fd 04       		.byte	0x4
 15553 00fe 1B01     		.2byte	0x11b
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 420


 15554 0100 1D010000 		.4byte	0x11d
 15555 0104 08       		.uleb128 0x8
 15556 0105 A5070000 		.4byte	.LASF22
 15557 0109 04       		.byte	0x4
 15558 010a 1D01     		.2byte	0x11d
 15559 010c 1D010000 		.4byte	0x11d
 15560 0110 08       		.uleb128 0x8
 15561 0111 73090000 		.4byte	.LASF23
 15562 0115 04       		.byte	0x4
 15563 0116 1E01     		.2byte	0x11e
 15564 0118 BC000000 		.4byte	0xbc
 15565 011c 00       		.byte	0
 15566 011d 09       		.uleb128 0x9
 15567 011e CA000000 		.4byte	0xca
 15568 0122 2D010000 		.4byte	0x12d
 15569 0126 0A       		.uleb128 0xa
 15570 0127 DC000000 		.4byte	0xdc
 15571 012b 03       		.byte	0x3
 15572 012c 00       		.byte	0
 15573 012d 0B       		.uleb128 0xb
 15574 012e FF0A0000 		.4byte	.LASF24
 15575 0132 04       		.byte	0x4
 15576 0133 1F01     		.2byte	0x11f
 15577 0135 FB000000 		.4byte	0xfb
 15578 0139 0C       		.uleb128 0xc
 15579 013a 19020000 		.4byte	.LASF33
 15580 013e 18       		.byte	0x18
 15581 013f 04       		.byte	0x4
 15582 0140 3401     		.2byte	0x134
 15583 0142 BF010000 		.4byte	0x1bf
 15584 0146 0D       		.uleb128 0xd
 15585 0147 E30B0000 		.4byte	.LASF25
 15586 014b 04       		.byte	0x4
 15587 014c 3601     		.2byte	0x136
 15588 014e 7A000000 		.4byte	0x7a
 15589 0152 02       		.byte	0x2
 15590 0153 23       		.byte	0x23
 15591 0154 00       		.uleb128 0
 15592 0155 0D       		.uleb128 0xd
 15593 0156 08090000 		.4byte	.LASF26
 15594 015a 04       		.byte	0x4
 15595 015b 3A01     		.2byte	0x13a
 15596 015d 7A000000 		.4byte	0x7a
 15597 0161 02       		.byte	0x2
 15598 0162 23       		.byte	0x23
 15599 0163 01       		.uleb128 0x1
 15600 0164 0D       		.uleb128 0xd
 15601 0165 0E0B0000 		.4byte	.LASF27
 15602 0169 04       		.byte	0x4
 15603 016a 3C01     		.2byte	0x13c
 15604 016c 2D010000 		.4byte	0x12d
 15605 0170 02       		.byte	0x2
 15606 0171 23       		.byte	0x23
 15607 0172 04       		.uleb128 0x4
 15608 0173 0D       		.uleb128 0xd
 15609 0174 AA030000 		.4byte	.LASF28
 15610 0178 04       		.byte	0x4
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 421


 15611 0179 4001     		.2byte	0x140
 15612 017b A6000000 		.4byte	0xa6
 15613 017f 02       		.byte	0x2
 15614 0180 23       		.byte	0x23
 15615 0181 08       		.uleb128 0x8
 15616 0182 0D       		.uleb128 0xd
 15617 0183 8D090000 		.4byte	.LASF29
 15618 0187 04       		.byte	0x4
 15619 0188 4101     		.2byte	0x141
 15620 018a A6000000 		.4byte	0xa6
 15621 018e 02       		.byte	0x2
 15622 018f 23       		.byte	0x23
 15623 0190 0A       		.uleb128 0xa
 15624 0191 0D       		.uleb128 0xd
 15625 0192 28060000 		.4byte	.LASF30
 15626 0196 04       		.byte	0x4
 15627 0197 4201     		.2byte	0x142
 15628 0199 A6000000 		.4byte	0xa6
 15629 019d 02       		.byte	0x2
 15630 019e 23       		.byte	0x23
 15631 019f 0C       		.uleb128 0xc
 15632 01a0 0D       		.uleb128 0xd
 15633 01a1 370C0000 		.4byte	.LASF31
 15634 01a5 04       		.byte	0x4
 15635 01a6 4601     		.2byte	0x146
 15636 01a8 2D010000 		.4byte	0x12d
 15637 01ac 02       		.byte	0x2
 15638 01ad 23       		.byte	0x23
 15639 01ae 10       		.uleb128 0x10
 15640 01af 0D       		.uleb128 0xd
 15641 01b0 88040000 		.4byte	.LASF32
 15642 01b4 04       		.byte	0x4
 15643 01b5 4701     		.2byte	0x147
 15644 01b7 2D010000 		.4byte	0x12d
 15645 01bb 02       		.byte	0x2
 15646 01bc 23       		.byte	0x23
 15647 01bd 14       		.uleb128 0x14
 15648 01be 00       		.byte	0
 15649 01bf 0C       		.uleb128 0xc
 15650 01c0 2E090000 		.4byte	.LASF34
 15651 01c4 06       		.byte	0x6
 15652 01c5 04       		.byte	0x4
 15653 01c6 4C01     		.2byte	0x14c
 15654 01c8 09020000 		.4byte	0x209
 15655 01cc 0D       		.uleb128 0xd
 15656 01cd 55080000 		.4byte	.LASF35
 15657 01d1 04       		.byte	0x4
 15658 01d2 4E01     		.2byte	0x14e
 15659 01d4 85000000 		.4byte	0x85
 15660 01d8 02       		.byte	0x2
 15661 01d9 23       		.byte	0x23
 15662 01da 00       		.uleb128 0
 15663 01db 0D       		.uleb128 0xd
 15664 01dc 43000000 		.4byte	.LASF36
 15665 01e0 04       		.byte	0x4
 15666 01e1 4F01     		.2byte	0x14f
 15667 01e3 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 422


 15668 01e7 02       		.byte	0x2
 15669 01e8 23       		.byte	0x23
 15670 01e9 02       		.uleb128 0x2
 15671 01ea 0D       		.uleb128 0xd
 15672 01eb 42030000 		.4byte	.LASF37
 15673 01ef 04       		.byte	0x4
 15674 01f0 5101     		.2byte	0x151
 15675 01f2 7A000000 		.4byte	0x7a
 15676 01f6 02       		.byte	0x2
 15677 01f7 23       		.byte	0x23
 15678 01f8 03       		.uleb128 0x3
 15679 01f9 0D       		.uleb128 0xd
 15680 01fa 480C0000 		.4byte	.LASF38
 15681 01fe 04       		.byte	0x4
 15682 01ff 5201     		.2byte	0x152
 15683 0201 7A000000 		.4byte	0x7a
 15684 0205 02       		.byte	0x2
 15685 0206 23       		.byte	0x23
 15686 0207 04       		.uleb128 0x4
 15687 0208 00       		.byte	0
 15688 0209 0C       		.uleb128 0xc
 15689 020a F5020000 		.4byte	.LASF39
 15690 020e 10       		.byte	0x10
 15691 020f 04       		.byte	0x4
 15692 0210 7901     		.2byte	0x179
 15693 0212 53020000 		.4byte	0x253
 15694 0216 0E       		.uleb128 0xe
 15695 0217 41444300 		.ascii	"ADC\000"
 15696 021b 04       		.byte	0x4
 15697 021c 7B01     		.2byte	0x17b
 15698 021e A6000000 		.4byte	0xa6
 15699 0222 02       		.byte	0x2
 15700 0223 23       		.byte	0x23
 15701 0224 00       		.uleb128 0
 15702 0225 0D       		.uleb128 0xd
 15703 0226 82030000 		.4byte	.LASF40
 15704 022a 04       		.byte	0x4
 15705 022b 7C01     		.2byte	0x17c
 15706 022d BC000000 		.4byte	0xbc
 15707 0231 02       		.byte	0x2
 15708 0232 23       		.byte	0x23
 15709 0233 04       		.uleb128 0x4
 15710 0234 0D       		.uleb128 0xd
 15711 0235 0F010000 		.4byte	.LASF41
 15712 0239 04       		.byte	0x4
 15713 023a 7D01     		.2byte	0x17d
 15714 023c BC000000 		.4byte	0xbc
 15715 0240 02       		.byte	0x2
 15716 0241 23       		.byte	0x23
 15717 0242 08       		.uleb128 0x8
 15718 0243 0D       		.uleb128 0xd
 15719 0244 C8080000 		.4byte	.LASF42
 15720 0248 04       		.byte	0x4
 15721 0249 7E01     		.2byte	0x17e
 15722 024b BC000000 		.4byte	0xbc
 15723 024f 02       		.byte	0x2
 15724 0250 23       		.byte	0x23
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 423


 15725 0251 0C       		.uleb128 0xc
 15726 0252 00       		.byte	0
 15727 0253 0C       		.uleb128 0xc
 15728 0254 A90B0000 		.4byte	.LASF43
 15729 0258 10       		.byte	0x10
 15730 0259 04       		.byte	0x4
 15731 025a 8101     		.2byte	0x181
 15732 025c 9D020000 		.4byte	0x29d
 15733 0260 0E       		.uleb128 0xe
 15734 0261 41444300 		.ascii	"ADC\000"
 15735 0265 04       		.byte	0x4
 15736 0266 8301     		.2byte	0x183
 15737 0268 A6000000 		.4byte	0xa6
 15738 026c 02       		.byte	0x2
 15739 026d 23       		.byte	0x23
 15740 026e 00       		.uleb128 0
 15741 026f 0D       		.uleb128 0xd
 15742 0270 82030000 		.4byte	.LASF40
 15743 0274 04       		.byte	0x4
 15744 0275 8401     		.2byte	0x184
 15745 0277 BC000000 		.4byte	0xbc
 15746 027b 02       		.byte	0x2
 15747 027c 23       		.byte	0x23
 15748 027d 04       		.uleb128 0x4
 15749 027e 0D       		.uleb128 0xd
 15750 027f 0F010000 		.4byte	.LASF41
 15751 0283 04       		.byte	0x4
 15752 0284 8501     		.2byte	0x185
 15753 0286 BC000000 		.4byte	0xbc
 15754 028a 02       		.byte	0x2
 15755 028b 23       		.byte	0x23
 15756 028c 08       		.uleb128 0x8
 15757 028d 0D       		.uleb128 0xd
 15758 028e C8080000 		.4byte	.LASF42
 15759 0292 04       		.byte	0x4
 15760 0293 8601     		.2byte	0x186
 15761 0295 BC000000 		.4byte	0xbc
 15762 0299 02       		.byte	0x2
 15763 029a 23       		.byte	0x23
 15764 029b 0C       		.uleb128 0xc
 15765 029c 00       		.byte	0
 15766 029d 0C       		.uleb128 0xc
 15767 029e 85060000 		.4byte	.LASF44
 15768 02a2 10       		.byte	0x10
 15769 02a3 04       		.byte	0x4
 15770 02a4 8901     		.2byte	0x189
 15771 02a6 E7020000 		.4byte	0x2e7
 15772 02aa 0E       		.uleb128 0xe
 15773 02ab 41444300 		.ascii	"ADC\000"
 15774 02af 04       		.byte	0x4
 15775 02b0 8B01     		.2byte	0x18b
 15776 02b2 A6000000 		.4byte	0xa6
 15777 02b6 02       		.byte	0x2
 15778 02b7 23       		.byte	0x23
 15779 02b8 00       		.uleb128 0
 15780 02b9 0D       		.uleb128 0xd
 15781 02ba 82030000 		.4byte	.LASF40
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 424


 15782 02be 04       		.byte	0x4
 15783 02bf 8C01     		.2byte	0x18c
 15784 02c1 BC000000 		.4byte	0xbc
 15785 02c5 02       		.byte	0x2
 15786 02c6 23       		.byte	0x23
 15787 02c7 04       		.uleb128 0x4
 15788 02c8 0D       		.uleb128 0xd
 15789 02c9 0F010000 		.4byte	.LASF41
 15790 02cd 04       		.byte	0x4
 15791 02ce 8D01     		.2byte	0x18d
 15792 02d0 BC000000 		.4byte	0xbc
 15793 02d4 02       		.byte	0x2
 15794 02d5 23       		.byte	0x23
 15795 02d6 08       		.uleb128 0x8
 15796 02d7 0D       		.uleb128 0xd
 15797 02d8 C8080000 		.4byte	.LASF42
 15798 02dc 04       		.byte	0x4
 15799 02dd 8E01     		.2byte	0x18e
 15800 02df BC000000 		.4byte	0xbc
 15801 02e3 02       		.byte	0x2
 15802 02e4 23       		.byte	0x23
 15803 02e5 0C       		.uleb128 0xc
 15804 02e6 00       		.byte	0
 15805 02e7 0C       		.uleb128 0xc
 15806 02e8 3E0A0000 		.4byte	.LASF45
 15807 02ec 3C       		.byte	0x3c
 15808 02ed 04       		.byte	0x4
 15809 02ee 7601     		.2byte	0x176
 15810 02f0 4F030000 		.4byte	0x34f
 15811 02f4 0D       		.uleb128 0xd
 15812 02f5 CD0B0000 		.4byte	.LASF46
 15813 02f9 04       		.byte	0x4
 15814 02fa 7F01     		.2byte	0x17f
 15815 02fc 09020000 		.4byte	0x209
 15816 0300 02       		.byte	0x2
 15817 0301 23       		.byte	0x23
 15818 0302 00       		.uleb128 0
 15819 0303 0D       		.uleb128 0xd
 15820 0304 8C060000 		.4byte	.LASF47
 15821 0308 04       		.byte	0x4
 15822 0309 8701     		.2byte	0x187
 15823 030b 53020000 		.4byte	0x253
 15824 030f 02       		.byte	0x2
 15825 0310 23       		.byte	0x23
 15826 0311 10       		.uleb128 0x10
 15827 0312 0D       		.uleb128 0xd
 15828 0313 B6000000 		.4byte	.LASF48
 15829 0317 04       		.byte	0x4
 15830 0318 9001     		.2byte	0x190
 15831 031a 9D020000 		.4byte	0x29d
 15832 031e 02       		.byte	0x2
 15833 031f 23       		.byte	0x23
 15834 0320 20       		.uleb128 0x20
 15835 0321 0D       		.uleb128 0xd
 15836 0322 1A030000 		.4byte	.LASF49
 15837 0326 04       		.byte	0x4
 15838 0327 9201     		.2byte	0x192
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 425


 15839 0329 BC000000 		.4byte	0xbc
 15840 032d 02       		.byte	0x2
 15841 032e 23       		.byte	0x23
 15842 032f 30       		.uleb128 0x30
 15843 0330 0D       		.uleb128 0xd
 15844 0331 A5040000 		.4byte	.LASF50
 15845 0335 04       		.byte	0x4
 15846 0336 9301     		.2byte	0x193
 15847 0338 BC000000 		.4byte	0xbc
 15848 033c 02       		.byte	0x2
 15849 033d 23       		.byte	0x23
 15850 033e 34       		.uleb128 0x34
 15851 033f 0D       		.uleb128 0xd
 15852 0340 C6010000 		.4byte	.LASF51
 15853 0344 04       		.byte	0x4
 15854 0345 9401     		.2byte	0x194
 15855 0347 BC000000 		.4byte	0xbc
 15856 034b 02       		.byte	0x2
 15857 034c 23       		.byte	0x23
 15858 034d 38       		.uleb128 0x38
 15859 034e 00       		.byte	0
 15860 034f 0C       		.uleb128 0xc
 15861 0350 34030000 		.4byte	.LASF52
 15862 0354 04       		.byte	0x4
 15863 0355 04       		.byte	0x4
 15864 0356 A001     		.2byte	0x1a0
 15865 0358 6C030000 		.4byte	0x36c
 15866 035c 0D       		.uleb128 0xd
 15867 035d 000C0000 		.4byte	.LASF53
 15868 0361 04       		.byte	0x4
 15869 0362 A201     		.2byte	0x1a2
 15870 0364 B1000000 		.4byte	0xb1
 15871 0368 02       		.byte	0x2
 15872 0369 23       		.byte	0x23
 15873 036a 00       		.uleb128 0
 15874 036b 00       		.byte	0
 15875 036c 0C       		.uleb128 0xc
 15876 036d 5E020000 		.4byte	.LASF54
 15877 0371 14       		.byte	0x14
 15878 0372 04       		.byte	0x4
 15879 0373 9901     		.2byte	0x199
 15880 0375 C5030000 		.4byte	0x3c5
 15881 0379 0D       		.uleb128 0xd
 15882 037a 4C080000 		.4byte	.LASF55
 15883 037e 04       		.byte	0x4
 15884 037f 9B01     		.2byte	0x19b
 15885 0381 B1000000 		.4byte	0xb1
 15886 0385 02       		.byte	0x2
 15887 0386 23       		.byte	0x23
 15888 0387 00       		.uleb128 0
 15889 0388 0D       		.uleb128 0xd
 15890 0389 8A080000 		.4byte	.LASF56
 15891 038d 04       		.byte	0x4
 15892 038e 9C01     		.2byte	0x19c
 15893 0390 BC000000 		.4byte	0xbc
 15894 0394 02       		.byte	0x2
 15895 0395 23       		.byte	0x23
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 426


 15896 0396 04       		.uleb128 0x4
 15897 0397 0D       		.uleb128 0xd
 15898 0398 E2060000 		.4byte	.LASF57
 15899 039c 04       		.byte	0x4
 15900 039d 9D01     		.2byte	0x19d
 15901 039f BC000000 		.4byte	0xbc
 15902 03a3 02       		.byte	0x2
 15903 03a4 23       		.byte	0x23
 15904 03a5 08       		.uleb128 0x8
 15905 03a6 0D       		.uleb128 0xd
 15906 03a7 0B050000 		.4byte	.LASF58
 15907 03ab 04       		.byte	0x4
 15908 03ac 9E01     		.2byte	0x19e
 15909 03ae BC000000 		.4byte	0xbc
 15910 03b2 02       		.byte	0x2
 15911 03b3 23       		.byte	0x23
 15912 03b4 0C       		.uleb128 0xc
 15913 03b5 0D       		.uleb128 0xd
 15914 03b6 D50D0000 		.4byte	.LASF59
 15915 03ba 04       		.byte	0x4
 15916 03bb A601     		.2byte	0x1a6
 15917 03bd 4F030000 		.4byte	0x34f
 15918 03c1 02       		.byte	0x2
 15919 03c2 23       		.byte	0x23
 15920 03c3 10       		.uleb128 0x10
 15921 03c4 00       		.byte	0
 15922 03c5 0C       		.uleb128 0xc
 15923 03c6 19040000 		.4byte	.LASF60
 15924 03ca 10       		.byte	0x10
 15925 03cb 04       		.byte	0x4
 15926 03cc BF01     		.2byte	0x1bf
 15927 03ce 2D040000 		.4byte	0x42d
 15928 03d2 0D       		.uleb128 0xd
 15929 03d3 E8060000 		.4byte	.LASF61
 15930 03d7 04       		.byte	0x4
 15931 03d8 C101     		.2byte	0x1c1
 15932 03da 7A000000 		.4byte	0x7a
 15933 03de 02       		.byte	0x2
 15934 03df 23       		.byte	0x23
 15935 03e0 00       		.uleb128 0
 15936 03e1 0D       		.uleb128 0xd
 15937 03e2 C7030000 		.4byte	.LASF62
 15938 03e6 04       		.byte	0x4
 15939 03e7 C201     		.2byte	0x1c2
 15940 03e9 A6000000 		.4byte	0xa6
 15941 03ed 02       		.byte	0x2
 15942 03ee 23       		.byte	0x23
 15943 03ef 02       		.uleb128 0x2
 15944 03f0 0D       		.uleb128 0xd
 15945 03f1 FD050000 		.4byte	.LASF63
 15946 03f5 04       		.byte	0x4
 15947 03f6 C301     		.2byte	0x1c3
 15948 03f8 A6000000 		.4byte	0xa6
 15949 03fc 02       		.byte	0x2
 15950 03fd 23       		.byte	0x23
 15951 03fe 04       		.uleb128 0x4
 15952 03ff 0D       		.uleb128 0xd
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 427


 15953 0400 78090000 		.4byte	.LASF64
 15954 0404 04       		.byte	0x4
 15955 0405 C401     		.2byte	0x1c4
 15956 0407 A6000000 		.4byte	0xa6
 15957 040b 02       		.byte	0x2
 15958 040c 23       		.byte	0x23
 15959 040d 06       		.uleb128 0x6
 15960 040e 0D       		.uleb128 0xd
 15961 040f B8090000 		.4byte	.LASF65
 15962 0413 04       		.byte	0x4
 15963 0414 C501     		.2byte	0x1c5
 15964 0416 A6000000 		.4byte	0xa6
 15965 041a 02       		.byte	0x2
 15966 041b 23       		.byte	0x23
 15967 041c 08       		.uleb128 0x8
 15968 041d 0D       		.uleb128 0xd
 15969 041e 66020000 		.4byte	.LASF66
 15970 0422 04       		.byte	0x4
 15971 0423 C601     		.2byte	0x1c6
 15972 0425 2D010000 		.4byte	0x12d
 15973 0429 02       		.byte	0x2
 15974 042a 23       		.byte	0x23
 15975 042b 0C       		.uleb128 0xc
 15976 042c 00       		.byte	0
 15977 042d 0C       		.uleb128 0xc
 15978 042e 490B0000 		.4byte	.LASF67
 15979 0432 3C       		.byte	0x3c
 15980 0433 04       		.byte	0x4
 15981 0434 AB01     		.2byte	0x1ab
 15982 0436 EF040000 		.4byte	0x4ef
 15983 043a 0E       		.uleb128 0xe
 15984 043b 72617700 		.ascii	"raw\000"
 15985 043f 04       		.byte	0x4
 15986 0440 AE01     		.2byte	0x1ae
 15987 0442 A6000000 		.4byte	0xa6
 15988 0446 02       		.byte	0x2
 15989 0447 23       		.byte	0x23
 15990 0448 00       		.uleb128 0
 15991 0449 0D       		.uleb128 0xd
 15992 044a 4C080000 		.4byte	.LASF55
 15993 044e 04       		.byte	0x4
 15994 044f B101     		.2byte	0x1b1
 15995 0451 BC000000 		.4byte	0xbc
 15996 0455 02       		.byte	0x2
 15997 0456 23       		.byte	0x23
 15998 0457 04       		.uleb128 0x4
 15999 0458 0D       		.uleb128 0xd
 16000 0459 8A080000 		.4byte	.LASF56
 16001 045d 04       		.byte	0x4
 16002 045e B201     		.2byte	0x1b2
 16003 0460 BC000000 		.4byte	0xbc
 16004 0464 02       		.byte	0x2
 16005 0465 23       		.byte	0x23
 16006 0466 08       		.uleb128 0x8
 16007 0467 0D       		.uleb128 0xd
 16008 0468 E2060000 		.4byte	.LASF57
 16009 046c 04       		.byte	0x4
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 428


 16010 046d B301     		.2byte	0x1b3
 16011 046f BC000000 		.4byte	0xbc
 16012 0473 02       		.byte	0x2
 16013 0474 23       		.byte	0x23
 16014 0475 0C       		.uleb128 0xc
 16015 0476 0D       		.uleb128 0xd
 16016 0477 A2060000 		.4byte	.LASF68
 16017 047b 04       		.byte	0x4
 16018 047c B401     		.2byte	0x1b4
 16019 047e BC000000 		.4byte	0xbc
 16020 0482 02       		.byte	0x2
 16021 0483 23       		.byte	0x23
 16022 0484 10       		.uleb128 0x10
 16023 0485 0D       		.uleb128 0xd
 16024 0486 0B050000 		.4byte	.LASF58
 16025 048a 04       		.byte	0x4
 16026 048b B501     		.2byte	0x1b5
 16027 048d BC000000 		.4byte	0xbc
 16028 0491 02       		.byte	0x2
 16029 0492 23       		.byte	0x23
 16030 0493 14       		.uleb128 0x14
 16031 0494 0D       		.uleb128 0xd
 16032 0495 8A0D0000 		.4byte	.LASF69
 16033 0499 04       		.byte	0x4
 16034 049a B801     		.2byte	0x1b8
 16035 049c B1000000 		.4byte	0xb1
 16036 04a0 02       		.byte	0x2
 16037 04a1 23       		.byte	0x23
 16038 04a2 18       		.uleb128 0x18
 16039 04a3 0D       		.uleb128 0xd
 16040 04a4 9E090000 		.4byte	.LASF70
 16041 04a8 04       		.byte	0x4
 16042 04a9 B901     		.2byte	0x1b9
 16043 04ab B1000000 		.4byte	0xb1
 16044 04af 02       		.byte	0x2
 16045 04b0 23       		.byte	0x23
 16046 04b1 1C       		.uleb128 0x1c
 16047 04b2 0D       		.uleb128 0xd
 16048 04b3 8F010000 		.4byte	.LASF71
 16049 04b7 04       		.byte	0x4
 16050 04b8 BA01     		.2byte	0x1ba
 16051 04ba BC000000 		.4byte	0xbc
 16052 04be 02       		.byte	0x2
 16053 04bf 23       		.byte	0x23
 16054 04c0 20       		.uleb128 0x20
 16055 04c1 0D       		.uleb128 0xd
 16056 04c2 F80C0000 		.4byte	.LASF72
 16057 04c6 04       		.byte	0x4
 16058 04c7 BB01     		.2byte	0x1bb
 16059 04c9 BC000000 		.4byte	0xbc
 16060 04cd 02       		.byte	0x2
 16061 04ce 23       		.byte	0x23
 16062 04cf 24       		.uleb128 0x24
 16063 04d0 0D       		.uleb128 0xd
 16064 04d1 66050000 		.4byte	.LASF73
 16065 04d5 04       		.byte	0x4
 16066 04d6 BC01     		.2byte	0x1bc
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 429


 16067 04d8 BC000000 		.4byte	0xbc
 16068 04dc 02       		.byte	0x2
 16069 04dd 23       		.byte	0x23
 16070 04de 28       		.uleb128 0x28
 16071 04df 0D       		.uleb128 0xd
 16072 04e0 D50D0000 		.4byte	.LASF59
 16073 04e4 04       		.byte	0x4
 16074 04e5 C701     		.2byte	0x1c7
 16075 04e7 C5030000 		.4byte	0x3c5
 16076 04eb 02       		.byte	0x2
 16077 04ec 23       		.byte	0x23
 16078 04ed 2C       		.uleb128 0x2c
 16079 04ee 00       		.byte	0
 16080 04ef 0C       		.uleb128 0xc
 16081 04f0 6A0C0000 		.4byte	.LASF74
 16082 04f4 08       		.byte	0x8
 16083 04f5 04       		.byte	0x4
 16084 04f6 DB01     		.2byte	0x1db
 16085 04f8 48050000 		.4byte	0x548
 16086 04fc 0D       		.uleb128 0xd
 16087 04fd 93000000 		.4byte	.LASF75
 16088 0501 04       		.byte	0x4
 16089 0502 DD01     		.2byte	0x1dd
 16090 0504 7A000000 		.4byte	0x7a
 16091 0508 02       		.byte	0x2
 16092 0509 23       		.byte	0x23
 16093 050a 00       		.uleb128 0
 16094 050b 0D       		.uleb128 0xd
 16095 050c 31020000 		.4byte	.LASF76
 16096 0510 04       		.byte	0x4
 16097 0511 DE01     		.2byte	0x1de
 16098 0513 7A000000 		.4byte	0x7a
 16099 0517 02       		.byte	0x2
 16100 0518 23       		.byte	0x23
 16101 0519 01       		.uleb128 0x1
 16102 051a 0D       		.uleb128 0xd
 16103 051b EE090000 		.4byte	.LASF77
 16104 051f 04       		.byte	0x4
 16105 0520 DF01     		.2byte	0x1df
 16106 0522 7A000000 		.4byte	0x7a
 16107 0526 02       		.byte	0x2
 16108 0527 23       		.byte	0x23
 16109 0528 02       		.uleb128 0x2
 16110 0529 0D       		.uleb128 0xd
 16111 052a CF0A0000 		.4byte	.LASF78
 16112 052e 04       		.byte	0x4
 16113 052f E101     		.2byte	0x1e1
 16114 0531 7A000000 		.4byte	0x7a
 16115 0535 02       		.byte	0x2
 16116 0536 23       		.byte	0x23
 16117 0537 03       		.uleb128 0x3
 16118 0538 0D       		.uleb128 0xd
 16119 0539 22030000 		.4byte	.LASF79
 16120 053d 04       		.byte	0x4
 16121 053e E301     		.2byte	0x1e3
 16122 0540 2D010000 		.4byte	0x12d
 16123 0544 02       		.byte	0x2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 430


 16124 0545 23       		.byte	0x23
 16125 0546 04       		.uleb128 0x4
 16126 0547 00       		.byte	0
 16127 0548 0C       		.uleb128 0xc
 16128 0549 F6060000 		.4byte	.LASF80
 16129 054d 2C       		.byte	0x2c
 16130 054e 04       		.byte	0x4
 16131 054f CB01     		.2byte	0x1cb
 16132 0551 EC050000 		.4byte	0x5ec
 16133 0555 0D       		.uleb128 0xd
 16134 0556 96050000 		.4byte	.LASF81
 16135 055a 04       		.byte	0x4
 16136 055b CE01     		.2byte	0x1ce
 16137 055d BC000000 		.4byte	0xbc
 16138 0561 02       		.byte	0x2
 16139 0562 23       		.byte	0x23
 16140 0563 00       		.uleb128 0
 16141 0564 0D       		.uleb128 0xd
 16142 0565 A30A0000 		.4byte	.LASF82
 16143 0569 04       		.byte	0x4
 16144 056a CF01     		.2byte	0x1cf
 16145 056c BC000000 		.4byte	0xbc
 16146 0570 02       		.byte	0x2
 16147 0571 23       		.byte	0x23
 16148 0572 04       		.uleb128 0x4
 16149 0573 0D       		.uleb128 0xd
 16150 0574 CD090000 		.4byte	.LASF83
 16151 0578 04       		.byte	0x4
 16152 0579 D001     		.2byte	0x1d0
 16153 057b BC000000 		.4byte	0xbc
 16154 057f 02       		.byte	0x2
 16155 0580 23       		.byte	0x23
 16156 0581 08       		.uleb128 0x8
 16157 0582 0D       		.uleb128 0xd
 16158 0583 0D030000 		.4byte	.LASF84
 16159 0587 04       		.byte	0x4
 16160 0588 D101     		.2byte	0x1d1
 16161 058a BC000000 		.4byte	0xbc
 16162 058e 02       		.byte	0x2
 16163 058f 23       		.byte	0x23
 16164 0590 0C       		.uleb128 0xc
 16165 0591 0D       		.uleb128 0xd
 16166 0592 88070000 		.4byte	.LASF85
 16167 0596 04       		.byte	0x4
 16168 0597 D201     		.2byte	0x1d2
 16169 0599 BC000000 		.4byte	0xbc
 16170 059d 02       		.byte	0x2
 16171 059e 23       		.byte	0x23
 16172 059f 10       		.uleb128 0x10
 16173 05a0 0D       		.uleb128 0xd
 16174 05a1 39060000 		.4byte	.LASF86
 16175 05a5 04       		.byte	0x4
 16176 05a6 D301     		.2byte	0x1d3
 16177 05a8 BC000000 		.4byte	0xbc
 16178 05ac 02       		.byte	0x2
 16179 05ad 23       		.byte	0x23
 16180 05ae 14       		.uleb128 0x14
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 431


 16181 05af 0D       		.uleb128 0xd
 16182 05b0 1C010000 		.4byte	.LASF87
 16183 05b4 04       		.byte	0x4
 16184 05b5 D601     		.2byte	0x1d6
 16185 05b7 BC000000 		.4byte	0xbc
 16186 05bb 02       		.byte	0x2
 16187 05bc 23       		.byte	0x23
 16188 05bd 18       		.uleb128 0x18
 16189 05be 0D       		.uleb128 0xd
 16190 05bf AE0A0000 		.4byte	.LASF88
 16191 05c3 04       		.byte	0x4
 16192 05c4 D701     		.2byte	0x1d7
 16193 05c6 BC000000 		.4byte	0xbc
 16194 05ca 02       		.byte	0x2
 16195 05cb 23       		.byte	0x23
 16196 05cc 1C       		.uleb128 0x1c
 16197 05cd 0D       		.uleb128 0xd
 16198 05ce 6F0D0000 		.4byte	.LASF89
 16199 05d2 04       		.byte	0x4
 16200 05d3 D801     		.2byte	0x1d8
 16201 05d5 BC000000 		.4byte	0xbc
 16202 05d9 02       		.byte	0x2
 16203 05da 23       		.byte	0x23
 16204 05db 20       		.uleb128 0x20
 16205 05dc 0D       		.uleb128 0xd
 16206 05dd D50D0000 		.4byte	.LASF59
 16207 05e1 04       		.byte	0x4
 16208 05e2 E601     		.2byte	0x1e6
 16209 05e4 EF040000 		.4byte	0x4ef
 16210 05e8 02       		.byte	0x2
 16211 05e9 23       		.byte	0x23
 16212 05ea 24       		.uleb128 0x24
 16213 05eb 00       		.byte	0
 16214 05ec 0C       		.uleb128 0xc
 16215 05ed 8B000000 		.4byte	.LASF90
 16216 05f1 0C       		.byte	0xc
 16217 05f2 04       		.byte	0x4
 16218 05f3 EE01     		.2byte	0x1ee
 16219 05f5 36060000 		.4byte	0x636
 16220 05f9 0D       		.uleb128 0xd
 16221 05fa AC060000 		.4byte	.LASF91
 16222 05fe 04       		.byte	0x4
 16223 05ff F001     		.2byte	0x1f0
 16224 0601 7A000000 		.4byte	0x7a
 16225 0605 02       		.byte	0x2
 16226 0606 23       		.byte	0x23
 16227 0607 00       		.uleb128 0
 16228 0608 0D       		.uleb128 0xd
 16229 0609 350D0000 		.4byte	.LASF92
 16230 060d 04       		.byte	0x4
 16231 060e F401     		.2byte	0x1f4
 16232 0610 7A000000 		.4byte	0x7a
 16233 0614 02       		.byte	0x2
 16234 0615 23       		.byte	0x23
 16235 0616 01       		.uleb128 0x1
 16236 0617 0D       		.uleb128 0xd
 16237 0618 41020000 		.4byte	.LASF93
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 432


 16238 061c 04       		.byte	0x4
 16239 061d FA01     		.2byte	0x1fa
 16240 061f BC000000 		.4byte	0xbc
 16241 0623 02       		.byte	0x2
 16242 0624 23       		.byte	0x23
 16243 0625 04       		.uleb128 0x4
 16244 0626 0D       		.uleb128 0xd
 16245 0627 5F040000 		.4byte	.LASF94
 16246 062b 04       		.byte	0x4
 16247 062c FB01     		.2byte	0x1fb
 16248 062e BC000000 		.4byte	0xbc
 16249 0632 02       		.byte	0x2
 16250 0633 23       		.byte	0x23
 16251 0634 08       		.uleb128 0x8
 16252 0635 00       		.byte	0
 16253 0636 0C       		.uleb128 0xc
 16254 0637 5F000000 		.4byte	.LASF95
 16255 063b 28       		.byte	0x28
 16256 063c 04       		.byte	0x4
 16257 063d 0002     		.2byte	0x200
 16258 063f E9060000 		.4byte	0x6e9
 16259 0643 0D       		.uleb128 0xd
 16260 0644 000C0000 		.4byte	.LASF53
 16261 0648 04       		.byte	0x4
 16262 0649 0202     		.2byte	0x202
 16263 064b 2D010000 		.4byte	0x12d
 16264 064f 02       		.byte	0x2
 16265 0650 23       		.byte	0x23
 16266 0651 00       		.uleb128 0
 16267 0652 0D       		.uleb128 0xd
 16268 0653 14000000 		.4byte	.LASF96
 16269 0657 04       		.byte	0x4
 16270 0658 0802     		.2byte	0x208
 16271 065a 7A000000 		.4byte	0x7a
 16272 065e 02       		.byte	0x2
 16273 065f 23       		.byte	0x23
 16274 0660 04       		.uleb128 0x4
 16275 0661 0E       		.uleb128 0xe
 16276 0662 4B706600 		.ascii	"Kpf\000"
 16277 0666 04       		.byte	0x4
 16278 0667 0C02     		.2byte	0x20c
 16279 0669 2D010000 		.4byte	0x12d
 16280 066d 02       		.byte	0x2
 16281 066e 23       		.byte	0x23
 16282 066f 08       		.uleb128 0x8
 16283 0670 0E       		.uleb128 0xe
 16284 0671 4B646600 		.ascii	"Kdf\000"
 16285 0675 04       		.byte	0x4
 16286 0676 0E02     		.2byte	0x20e
 16287 0678 2D010000 		.4byte	0x12d
 16288 067c 02       		.byte	0x2
 16289 067d 23       		.byte	0x23
 16290 067e 0C       		.uleb128 0xc
 16291 067f 0E       		.uleb128 0xe
 16292 0680 4B696600 		.ascii	"Kif\000"
 16293 0684 04       		.byte	0x4
 16294 0685 1002     		.2byte	0x210
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 433


 16295 0687 2D010000 		.4byte	0x12d
 16296 068b 02       		.byte	0x2
 16297 068c 23       		.byte	0x23
 16298 068d 10       		.uleb128 0x10
 16299 068e 0D       		.uleb128 0xd
 16300 068f FC080000 		.4byte	.LASF97
 16301 0693 04       		.byte	0x4
 16302 0694 1202     		.2byte	0x212
 16303 0696 2D010000 		.4byte	0x12d
 16304 069a 02       		.byte	0x2
 16305 069b 23       		.byte	0x23
 16306 069c 14       		.uleb128 0x14
 16307 069d 0D       		.uleb128 0xd
 16308 069e B1000000 		.4byte	.LASF98
 16309 06a2 04       		.byte	0x4
 16310 06a3 1602     		.2byte	0x216
 16311 06a5 2D010000 		.4byte	0x12d
 16312 06a9 02       		.byte	0x2
 16313 06aa 23       		.byte	0x23
 16314 06ab 18       		.uleb128 0x18
 16315 06ac 0D       		.uleb128 0xd
 16316 06ad F0080000 		.4byte	.LASF99
 16317 06b1 04       		.byte	0x4
 16318 06b2 1802     		.2byte	0x218
 16319 06b4 2D010000 		.4byte	0x12d
 16320 06b8 02       		.byte	0x2
 16321 06b9 23       		.byte	0x23
 16322 06ba 1C       		.uleb128 0x1c
 16323 06bb 0D       		.uleb128 0xd
 16324 06bc F90A0000 		.4byte	.LASF100
 16325 06c0 04       		.byte	0x4
 16326 06c1 1A02     		.2byte	0x21a
 16327 06c3 7A000000 		.4byte	0x7a
 16328 06c7 02       		.byte	0x2
 16329 06c8 23       		.byte	0x23
 16330 06c9 20       		.uleb128 0x20
 16331 06ca 0D       		.uleb128 0xd
 16332 06cb BB0A0000 		.4byte	.LASF101
 16333 06cf 04       		.byte	0x4
 16334 06d0 1E02     		.2byte	0x21e
 16335 06d2 7A000000 		.4byte	0x7a
 16336 06d6 02       		.byte	0x2
 16337 06d7 23       		.byte	0x23
 16338 06d8 21       		.uleb128 0x21
 16339 06d9 0D       		.uleb128 0xd
 16340 06da F5000000 		.4byte	.LASF102
 16341 06de 04       		.byte	0x4
 16342 06df 2202     		.2byte	0x222
 16343 06e1 2D010000 		.4byte	0x12d
 16344 06e5 02       		.byte	0x2
 16345 06e6 23       		.byte	0x23
 16346 06e7 24       		.uleb128 0x24
 16347 06e8 00       		.byte	0
 16348 06e9 0C       		.uleb128 0xc
 16349 06ea B0090000 		.4byte	.LASF103
 16350 06ee 50       		.byte	0x50
 16351 06ef 04       		.byte	0x4
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 434


 16352 06f0 2802     		.2byte	0x228
 16353 06f2 F6070000 		.4byte	0x7f6
 16354 06f6 0D       		.uleb128 0xd
 16355 06f7 60010000 		.4byte	.LASF104
 16356 06fb 04       		.byte	0x4
 16357 06fc 2A02     		.2byte	0x22a
 16358 06fe B1000000 		.4byte	0xb1
 16359 0702 02       		.byte	0x2
 16360 0703 23       		.byte	0x23
 16361 0704 00       		.uleb128 0
 16362 0705 0D       		.uleb128 0xd
 16363 0706 72080000 		.4byte	.LASF105
 16364 070a 04       		.byte	0x4
 16365 070b 2B02     		.2byte	0x22b
 16366 070d B1000000 		.4byte	0xb1
 16367 0711 02       		.byte	0x2
 16368 0712 23       		.byte	0x23
 16369 0713 04       		.uleb128 0x4
 16370 0714 0D       		.uleb128 0xd
 16371 0715 C9040000 		.4byte	.LASF106
 16372 0719 04       		.byte	0x4
 16373 071a 3002     		.2byte	0x230
 16374 071c B1000000 		.4byte	0xb1
 16375 0720 02       		.byte	0x2
 16376 0721 23       		.byte	0x23
 16377 0722 08       		.uleb128 0x8
 16378 0723 0D       		.uleb128 0xd
 16379 0724 6A030000 		.4byte	.LASF107
 16380 0728 04       		.byte	0x4
 16381 0729 3102     		.2byte	0x231
 16382 072b B1000000 		.4byte	0xb1
 16383 072f 02       		.byte	0x2
 16384 0730 23       		.byte	0x23
 16385 0731 0C       		.uleb128 0xc
 16386 0732 0D       		.uleb128 0xd
 16387 0733 78050000 		.4byte	.LASF108
 16388 0737 04       		.byte	0x4
 16389 0738 3602     		.2byte	0x236
 16390 073a 6C030000 		.4byte	0x36c
 16391 073e 02       		.byte	0x2
 16392 073f 23       		.byte	0x23
 16393 0740 10       		.uleb128 0x10
 16394 0741 0D       		.uleb128 0xd
 16395 0742 DF020000 		.4byte	.LASF109
 16396 0746 04       		.byte	0x4
 16397 0747 3802     		.2byte	0x238
 16398 0749 BC000000 		.4byte	0xbc
 16399 074d 02       		.byte	0x2
 16400 074e 23       		.byte	0x23
 16401 074f 24       		.uleb128 0x24
 16402 0750 0D       		.uleb128 0xd
 16403 0751 9F0B0000 		.4byte	.LASF110
 16404 0755 04       		.byte	0x4
 16405 0756 3902     		.2byte	0x239
 16406 0758 BC000000 		.4byte	0xbc
 16407 075c 02       		.byte	0x2
 16408 075d 23       		.byte	0x23
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 435


 16409 075e 28       		.uleb128 0x28
 16410 075f 0D       		.uleb128 0xd
 16411 0760 E0080000 		.4byte	.LASF111
 16412 0764 04       		.byte	0x4
 16413 0765 3A02     		.2byte	0x23a
 16414 0767 BC000000 		.4byte	0xbc
 16415 076b 02       		.byte	0x2
 16416 076c 23       		.byte	0x23
 16417 076d 2C       		.uleb128 0x2c
 16418 076e 0D       		.uleb128 0xd
 16419 076f E30C0000 		.4byte	.LASF112
 16420 0773 04       		.byte	0x4
 16421 0774 3B02     		.2byte	0x23b
 16422 0776 BC000000 		.4byte	0xbc
 16423 077a 02       		.byte	0x2
 16424 077b 23       		.byte	0x23
 16425 077c 30       		.uleb128 0x30
 16426 077d 0D       		.uleb128 0xd
 16427 077e 26000000 		.4byte	.LASF113
 16428 0782 04       		.byte	0x4
 16429 0783 3C02     		.2byte	0x23c
 16430 0785 BC000000 		.4byte	0xbc
 16431 0789 02       		.byte	0x2
 16432 078a 23       		.byte	0x23
 16433 078b 34       		.uleb128 0x34
 16434 078c 0D       		.uleb128 0xd
 16435 078d 22050000 		.4byte	.LASF114
 16436 0791 04       		.byte	0x4
 16437 0792 3D02     		.2byte	0x23d
 16438 0794 BC000000 		.4byte	0xbc
 16439 0798 02       		.byte	0x2
 16440 0799 23       		.byte	0x23
 16441 079a 38       		.uleb128 0x38
 16442 079b 0D       		.uleb128 0xd
 16443 079c B2050000 		.4byte	.LASF115
 16444 07a0 04       		.byte	0x4
 16445 07a1 3F02     		.2byte	0x23f
 16446 07a3 BC000000 		.4byte	0xbc
 16447 07a7 02       		.byte	0x2
 16448 07a8 23       		.byte	0x23
 16449 07a9 3C       		.uleb128 0x3c
 16450 07aa 0D       		.uleb128 0xd
 16451 07ab DB0D0000 		.4byte	.LASF116
 16452 07af 04       		.byte	0x4
 16453 07b0 4002     		.2byte	0x240
 16454 07b2 A6000000 		.4byte	0xa6
 16455 07b6 02       		.byte	0x2
 16456 07b7 23       		.byte	0x23
 16457 07b8 40       		.uleb128 0x40
 16458 07b9 0D       		.uleb128 0xd
 16459 07ba E7040000 		.4byte	.LASF117
 16460 07be 04       		.byte	0x4
 16461 07bf 4102     		.2byte	0x241
 16462 07c1 A6000000 		.4byte	0xa6
 16463 07c5 02       		.byte	0x2
 16464 07c6 23       		.byte	0x23
 16465 07c7 42       		.uleb128 0x42
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 436


 16466 07c8 0D       		.uleb128 0xd
 16467 07c9 AB080000 		.4byte	.LASF118
 16468 07cd 04       		.byte	0x4
 16469 07ce 4302     		.2byte	0x243
 16470 07d0 BC000000 		.4byte	0xbc
 16471 07d4 02       		.byte	0x2
 16472 07d5 23       		.byte	0x23
 16473 07d6 44       		.uleb128 0x44
 16474 07d7 0D       		.uleb128 0xd
 16475 07d8 DA070000 		.4byte	.LASF119
 16476 07dc 04       		.byte	0x4
 16477 07dd 4502     		.2byte	0x245
 16478 07df BC000000 		.4byte	0xbc
 16479 07e3 02       		.byte	0x2
 16480 07e4 23       		.byte	0x23
 16481 07e5 48       		.uleb128 0x48
 16482 07e6 0D       		.uleb128 0xd
 16483 07e7 150C0000 		.4byte	.LASF120
 16484 07eb 04       		.byte	0x4
 16485 07ec 4602     		.2byte	0x246
 16486 07ee 7A000000 		.4byte	0x7a
 16487 07f2 02       		.byte	0x2
 16488 07f3 23       		.byte	0x23
 16489 07f4 4C       		.uleb128 0x4c
 16490 07f5 00       		.byte	0
 16491 07f6 0C       		.uleb128 0xc
 16492 07f7 66000000 		.4byte	.LASF121
 16493 07fb 0C       		.byte	0xc
 16494 07fc 04       		.byte	0x4
 16495 07fd 4A02     		.2byte	0x24a
 16496 07ff 31080000 		.4byte	0x831
 16497 0803 0D       		.uleb128 0xd
 16498 0804 7E060000 		.4byte	.LASF122
 16499 0808 04       		.byte	0x4
 16500 0809 4C02     		.2byte	0x24c
 16501 080b 7A000000 		.4byte	0x7a
 16502 080f 02       		.byte	0x2
 16503 0810 23       		.byte	0x23
 16504 0811 00       		.uleb128 0
 16505 0812 0D       		.uleb128 0xd
 16506 0813 9E010000 		.4byte	.LASF123
 16507 0817 04       		.byte	0x4
 16508 0818 4D02     		.2byte	0x24d
 16509 081a BC000000 		.4byte	0xbc
 16510 081e 02       		.byte	0x2
 16511 081f 23       		.byte	0x23
 16512 0820 04       		.uleb128 0x4
 16513 0821 0D       		.uleb128 0xd
 16514 0822 2E040000 		.4byte	.LASF124
 16515 0826 04       		.byte	0x4
 16516 0827 4E02     		.2byte	0x24e
 16517 0829 BC000000 		.4byte	0xbc
 16518 082d 02       		.byte	0x2
 16519 082e 23       		.byte	0x23
 16520 082f 08       		.uleb128 0x8
 16521 0830 00       		.byte	0
 16522 0831 0C       		.uleb128 0xc
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 437


 16523 0832 0B0A0000 		.4byte	.LASF125
 16524 0836 90       		.byte	0x90
 16525 0837 04       		.byte	0x4
 16526 0838 EB01     		.2byte	0x1eb
 16527 083a 7A080000 		.4byte	0x87a
 16528 083e 0D       		.uleb128 0xd
 16529 083f 83020000 		.4byte	.LASF126
 16530 0843 04       		.byte	0x4
 16531 0844 FD01     		.2byte	0x1fd
 16532 0846 EC050000 		.4byte	0x5ec
 16533 084a 02       		.byte	0x2
 16534 084b 23       		.byte	0x23
 16535 084c 00       		.uleb128 0
 16536 084d 0D       		.uleb128 0xd
 16537 084e D50D0000 		.4byte	.LASF59
 16538 0852 04       		.byte	0x4
 16539 0853 2402     		.2byte	0x224
 16540 0855 36060000 		.4byte	0x636
 16541 0859 02       		.byte	0x2
 16542 085a 23       		.byte	0x23
 16543 085b 0C       		.uleb128 0xc
 16544 085c 0E       		.uleb128 0xe
 16545 085d 6D6300   		.ascii	"mc\000"
 16546 0860 04       		.byte	0x4
 16547 0861 4702     		.2byte	0x247
 16548 0863 E9060000 		.4byte	0x6e9
 16549 0867 02       		.byte	0x2
 16550 0868 23       		.byte	0x23
 16551 0869 34       		.uleb128 0x34
 16552 086a 0E       		.uleb128 0xe
 16553 086b 6C6300   		.ascii	"lc\000"
 16554 086e 04       		.byte	0x4
 16555 086f 4F02     		.2byte	0x24f
 16556 0871 F6070000 		.4byte	0x7f6
 16557 0875 03       		.byte	0x3
 16558 0876 23       		.byte	0x23
 16559 0877 8401     		.uleb128 0x84
 16560 0879 00       		.byte	0
 16561 087a 0C       		.uleb128 0xc
 16562 087b 810B0000 		.4byte	.LASF127
 16563 087f 0C       		.byte	0xc
 16564 0880 04       		.byte	0x4
 16565 0881 5702     		.2byte	0x257
 16566 0883 B5080000 		.4byte	0x8b5
 16567 0887 0D       		.uleb128 0xd
 16568 0888 C1010000 		.4byte	.LASF128
 16569 088c 04       		.byte	0x4
 16570 088d 5902     		.2byte	0x259
 16571 088f 90000000 		.4byte	0x90
 16572 0893 02       		.byte	0x2
 16573 0894 23       		.byte	0x23
 16574 0895 00       		.uleb128 0
 16575 0896 0E       		.uleb128 0xe
 16576 0897 73656300 		.ascii	"sec\000"
 16577 089b 04       		.byte	0x4
 16578 089c 5A02     		.2byte	0x25a
 16579 089e 90000000 		.4byte	0x90
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 438


 16580 08a2 02       		.byte	0x2
 16581 08a3 23       		.byte	0x23
 16582 08a4 04       		.uleb128 0x4
 16583 08a5 0D       		.uleb128 0xd
 16584 08a6 18060000 		.4byte	.LASF129
 16585 08aa 04       		.byte	0x4
 16586 08ab 5B02     		.2byte	0x25b
 16587 08ad 90000000 		.4byte	0x90
 16588 08b1 02       		.byte	0x2
 16589 08b2 23       		.byte	0x23
 16590 08b3 08       		.uleb128 0x8
 16591 08b4 00       		.byte	0
 16592 08b5 0C       		.uleb128 0xc
 16593 08b6 47060000 		.4byte	.LASF130
 16594 08ba 05       		.byte	0x5
 16595 08bb 04       		.byte	0x4
 16596 08bc 5E02     		.2byte	0x25e
 16597 08be 0E090000 		.4byte	0x90e
 16598 08c2 0D       		.uleb128 0xd
 16599 08c3 55010000 		.4byte	.LASF131
 16600 08c7 04       		.byte	0x4
 16601 08c8 6002     		.2byte	0x260
 16602 08ca 7A000000 		.4byte	0x7a
 16603 08ce 02       		.byte	0x2
 16604 08cf 23       		.byte	0x23
 16605 08d0 00       		.uleb128 0
 16606 08d1 0D       		.uleb128 0xd
 16607 08d2 BB050000 		.4byte	.LASF132
 16608 08d6 04       		.byte	0x4
 16609 08d7 6102     		.2byte	0x261
 16610 08d9 7A000000 		.4byte	0x7a
 16611 08dd 02       		.byte	0x2
 16612 08de 23       		.byte	0x23
 16613 08df 01       		.uleb128 0x1
 16614 08e0 0D       		.uleb128 0xd
 16615 08e1 DE0B0000 		.4byte	.LASF133
 16616 08e5 04       		.byte	0x4
 16617 08e6 6202     		.2byte	0x262
 16618 08e8 7A000000 		.4byte	0x7a
 16619 08ec 02       		.byte	0x2
 16620 08ed 23       		.byte	0x23
 16621 08ee 02       		.uleb128 0x2
 16622 08ef 0D       		.uleb128 0xd
 16623 08f0 0F010000 		.4byte	.LASF41
 16624 08f4 04       		.byte	0x4
 16625 08f5 6302     		.2byte	0x263
 16626 08f7 7A000000 		.4byte	0x7a
 16627 08fb 02       		.byte	0x2
 16628 08fc 23       		.byte	0x23
 16629 08fd 03       		.uleb128 0x3
 16630 08fe 0D       		.uleb128 0xd
 16631 08ff 0D080000 		.4byte	.LASF134
 16632 0903 04       		.byte	0x4
 16633 0904 6402     		.2byte	0x264
 16634 0906 7A000000 		.4byte	0x7a
 16635 090a 02       		.byte	0x2
 16636 090b 23       		.byte	0x23
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 439


 16637 090c 04       		.uleb128 0x4
 16638 090d 00       		.byte	0
 16639 090e 0C       		.uleb128 0xc
 16640 090f 04050000 		.4byte	.LASF135
 16641 0913 18       		.byte	0x18
 16642 0914 04       		.byte	0x4
 16643 0915 5302     		.2byte	0x253
 16644 0917 49090000 		.4byte	0x949
 16645 091b 0D       		.uleb128 0xd
 16646 091c EE0B0000 		.4byte	.LASF136
 16647 0920 04       		.byte	0x4
 16648 0921 5502     		.2byte	0x255
 16649 0923 7A000000 		.4byte	0x7a
 16650 0927 02       		.byte	0x2
 16651 0928 23       		.byte	0x23
 16652 0929 00       		.uleb128 0
 16653 092a 0D       		.uleb128 0xd
 16654 092b 82050000 		.4byte	.LASF137
 16655 092f 04       		.byte	0x4
 16656 0930 5C02     		.2byte	0x25c
 16657 0932 7A080000 		.4byte	0x87a
 16658 0936 02       		.byte	0x2
 16659 0937 23       		.byte	0x23
 16660 0938 04       		.uleb128 0x4
 16661 0939 0D       		.uleb128 0xd
 16662 093a C50D0000 		.4byte	.LASF138
 16663 093e 04       		.byte	0x4
 16664 093f 6502     		.2byte	0x265
 16665 0941 B5080000 		.4byte	0x8b5
 16666 0945 02       		.byte	0x2
 16667 0946 23       		.byte	0x23
 16668 0947 10       		.uleb128 0x10
 16669 0948 00       		.byte	0
 16670 0949 0F       		.uleb128 0xf
 16671 094a FD090000 		.4byte	.LASF139
 16672 094e 2D       		.byte	0x2d
 16673 094f 05       		.byte	0x5
 16674 0950 12       		.byte	0x12
 16675 0951 8E090000 		.4byte	0x98e
 16676 0955 10       		.uleb128 0x10
 16677 0956 59030000 		.4byte	.LASF140
 16678 095a 05       		.byte	0x5
 16679 095b 14       		.byte	0x14
 16680 095c 8E090000 		.4byte	0x98e
 16681 0960 02       		.byte	0x2
 16682 0961 23       		.byte	0x23
 16683 0962 00       		.uleb128 0
 16684 0963 10       		.uleb128 0x10
 16685 0964 DD040000 		.4byte	.LASF141
 16686 0968 05       		.byte	0x5
 16687 0969 15       		.byte	0x15
 16688 096a 8E090000 		.4byte	0x98e
 16689 096e 02       		.byte	0x2
 16690 096f 23       		.byte	0x23
 16691 0970 0F       		.uleb128 0xf
 16692 0971 10       		.uleb128 0x10
 16693 0972 73040000 		.4byte	.LASF142
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 440


 16694 0976 05       		.byte	0x5
 16695 0977 16       		.byte	0x16
 16696 0978 9E090000 		.4byte	0x99e
 16697 097c 02       		.byte	0x2
 16698 097d 23       		.byte	0x23
 16699 097e 1E       		.uleb128 0x1e
 16700 097f 10       		.uleb128 0x10
 16701 0980 7B040000 		.4byte	.LASF143
 16702 0984 05       		.byte	0x5
 16703 0985 17       		.byte	0x17
 16704 0986 AE090000 		.4byte	0x9ae
 16705 098a 02       		.byte	0x2
 16706 098b 23       		.byte	0x23
 16707 098c 28       		.uleb128 0x28
 16708 098d 00       		.byte	0
 16709 098e 09       		.uleb128 0x9
 16710 098f D5000000 		.4byte	0xd5
 16711 0993 9E090000 		.4byte	0x99e
 16712 0997 0A       		.uleb128 0xa
 16713 0998 DC000000 		.4byte	0xdc
 16714 099c 0E       		.byte	0xe
 16715 099d 00       		.byte	0
 16716 099e 09       		.uleb128 0x9
 16717 099f D5000000 		.4byte	0xd5
 16718 09a3 AE090000 		.4byte	0x9ae
 16719 09a7 0A       		.uleb128 0xa
 16720 09a8 DC000000 		.4byte	0xdc
 16721 09ac 09       		.byte	0x9
 16722 09ad 00       		.byte	0
 16723 09ae 09       		.uleb128 0x9
 16724 09af D5000000 		.4byte	0xd5
 16725 09b3 BE090000 		.4byte	0x9be
 16726 09b7 0A       		.uleb128 0xa
 16727 09b8 DC000000 		.4byte	0xdc
 16728 09bc 04       		.byte	0x4
 16729 09bd 00       		.byte	0
 16730 09be 11       		.uleb128 0x11
 16731 09bf 30       		.byte	0x30
 16732 09c0 06       		.byte	0x6
 16733 09c1 7B       		.byte	0x7b
 16734 09c2 450A0000 		.4byte	0xa45
 16735 09c6 10       		.uleb128 0x10
 16736 09c7 7E060000 		.4byte	.LASF122
 16737 09cb 06       		.byte	0x6
 16738 09cc 7D       		.byte	0x7d
 16739 09cd 7A000000 		.4byte	0x7a
 16740 09d1 02       		.byte	0x2
 16741 09d2 23       		.byte	0x23
 16742 09d3 00       		.uleb128 0
 16743 09d4 10       		.uleb128 0x10
 16744 09d5 710B0000 		.4byte	.LASF144
 16745 09d9 06       		.byte	0x6
 16746 09da 7E       		.byte	0x7e
 16747 09db 7A000000 		.4byte	0x7a
 16748 09df 02       		.byte	0x2
 16749 09e0 23       		.byte	0x23
 16750 09e1 01       		.uleb128 0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 441


 16751 09e2 10       		.uleb128 0x10
 16752 09e3 20070000 		.4byte	.LASF145
 16753 09e7 06       		.byte	0x6
 16754 09e8 7F       		.byte	0x7f
 16755 09e9 90000000 		.4byte	0x90
 16756 09ed 02       		.byte	0x2
 16757 09ee 23       		.byte	0x23
 16758 09ef 04       		.uleb128 0x4
 16759 09f0 10       		.uleb128 0x10
 16760 09f1 4C050000 		.4byte	.LASF146
 16761 09f5 06       		.byte	0x6
 16762 09f6 80       		.byte	0x80
 16763 09f7 C3000000 		.4byte	0xc3
 16764 09fb 02       		.byte	0x2
 16765 09fc 23       		.byte	0x23
 16766 09fd 08       		.uleb128 0x8
 16767 09fe 10       		.uleb128 0x10
 16768 09ff 1C050000 		.4byte	.LASF147
 16769 0a03 06       		.byte	0x6
 16770 0a04 81       		.byte	0x81
 16771 0a05 B1000000 		.4byte	0xb1
 16772 0a09 02       		.byte	0x2
 16773 0a0a 23       		.byte	0x23
 16774 0a0b 10       		.uleb128 0x10
 16775 0a0c 10       		.uleb128 0x10
 16776 0a0d 52090000 		.4byte	.LASF148
 16777 0a11 06       		.byte	0x6
 16778 0a12 82       		.byte	0x82
 16779 0a13 C3000000 		.4byte	0xc3
 16780 0a17 02       		.byte	0x2
 16781 0a18 23       		.byte	0x23
 16782 0a19 18       		.uleb128 0x18
 16783 0a1a 10       		.uleb128 0x10
 16784 0a1b 5D0A0000 		.4byte	.LASF149
 16785 0a1f 06       		.byte	0x6
 16786 0a20 83       		.byte	0x83
 16787 0a21 B1000000 		.4byte	0xb1
 16788 0a25 02       		.byte	0x2
 16789 0a26 23       		.byte	0x23
 16790 0a27 20       		.uleb128 0x20
 16791 0a28 10       		.uleb128 0x10
 16792 0a29 50000000 		.4byte	.LASF150
 16793 0a2d 06       		.byte	0x6
 16794 0a2e 84       		.byte	0x84
 16795 0a2f B1000000 		.4byte	0xb1
 16796 0a33 02       		.byte	0x2
 16797 0a34 23       		.byte	0x23
 16798 0a35 24       		.uleb128 0x24
 16799 0a36 10       		.uleb128 0x10
 16800 0a37 E30A0000 		.4byte	.LASF151
 16801 0a3b 06       		.byte	0x6
 16802 0a3c 85       		.byte	0x85
 16803 0a3d 7A000000 		.4byte	0x7a
 16804 0a41 02       		.byte	0x2
 16805 0a42 23       		.byte	0x23
 16806 0a43 28       		.uleb128 0x28
 16807 0a44 00       		.byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 442


 16808 0a45 03       		.uleb128 0x3
 16809 0a46 8B050000 		.4byte	.LASF152
 16810 0a4a 06       		.byte	0x6
 16811 0a4b 87       		.byte	0x87
 16812 0a4c BE090000 		.4byte	0x9be
 16813 0a50 0F       		.uleb128 0xf
 16814 0a51 59040000 		.4byte	.LASF153
 16815 0a55 14       		.byte	0x14
 16816 0a56 06       		.byte	0x6
 16817 0a57 93       		.byte	0x93
 16818 0a58 790A0000 		.4byte	0xa79
 16819 0a5c 10       		.uleb128 0x10
 16820 0a5d 26070000 		.4byte	.LASF154
 16821 0a61 06       		.byte	0x6
 16822 0a62 95       		.byte	0x95
 16823 0a63 790A0000 		.4byte	0xa79
 16824 0a67 02       		.byte	0x2
 16825 0a68 23       		.byte	0x23
 16826 0a69 00       		.uleb128 0
 16827 0a6a 10       		.uleb128 0x10
 16828 0a6b F4040000 		.4byte	.LASF155
 16829 0a6f 06       		.byte	0x6
 16830 0a70 97       		.byte	0x97
 16831 0a71 890A0000 		.4byte	0xa89
 16832 0a75 02       		.byte	0x2
 16833 0a76 23       		.byte	0x23
 16834 0a77 0C       		.uleb128 0xc
 16835 0a78 00       		.byte	0
 16836 0a79 09       		.uleb128 0x9
 16837 0a7a 2D010000 		.4byte	0x12d
 16838 0a7e 890A0000 		.4byte	0xa89
 16839 0a82 0A       		.uleb128 0xa
 16840 0a83 DC000000 		.4byte	0xdc
 16841 0a87 02       		.byte	0x2
 16842 0a88 00       		.byte	0
 16843 0a89 09       		.uleb128 0x9
 16844 0a8a A6000000 		.4byte	0xa6
 16845 0a8e 990A0000 		.4byte	0xa99
 16846 0a92 0A       		.uleb128 0xa
 16847 0a93 DC000000 		.4byte	0xdc
 16848 0a97 02       		.byte	0x2
 16849 0a98 00       		.byte	0
 16850 0a99 12       		.uleb128 0x12
 16851 0a9a 514D4300 		.ascii	"QMC\000"
 16852 0a9e 0C       		.byte	0xc
 16853 0a9f 06       		.byte	0x6
 16854 0aa0 9C       		.byte	0x9c
 16855 0aa1 B40A0000 		.4byte	0xab4
 16856 0aa5 10       		.uleb128 0x10
 16857 0aa6 4C080000 		.4byte	.LASF55
 16858 0aaa 06       		.byte	0x6
 16859 0aab 9E       		.byte	0x9e
 16860 0aac B40A0000 		.4byte	0xab4
 16861 0ab0 02       		.byte	0x2
 16862 0ab1 23       		.byte	0x23
 16863 0ab2 00       		.uleb128 0
 16864 0ab3 00       		.byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 443


 16865 0ab4 09       		.uleb128 0x9
 16866 0ab5 BC000000 		.4byte	0xbc
 16867 0ab9 C40A0000 		.4byte	0xac4
 16868 0abd 0A       		.uleb128 0xa
 16869 0abe DC000000 		.4byte	0xdc
 16870 0ac2 02       		.byte	0x2
 16871 0ac3 00       		.byte	0
 16872 0ac4 0F       		.uleb128 0xf
 16873 0ac5 DC010000 		.4byte	.LASF156
 16874 0ac9 24       		.byte	0x24
 16875 0aca 06       		.byte	0x6
 16876 0acb 8B       		.byte	0x8b
 16877 0acc 080B0000 		.4byte	0xb08
 16878 0ad0 10       		.uleb128 0x10
 16879 0ad1 070B0000 		.4byte	.LASF157
 16880 0ad5 06       		.byte	0x6
 16881 0ad6 8D       		.byte	0x8d
 16882 0ad7 7A000000 		.4byte	0x7a
 16883 0adb 02       		.byte	0x2
 16884 0adc 23       		.byte	0x23
 16885 0add 00       		.uleb128 0
 16886 0ade 10       		.uleb128 0x10
 16887 0adf E30B0000 		.4byte	.LASF25
 16888 0ae3 06       		.byte	0x6
 16889 0ae4 90       		.byte	0x90
 16890 0ae5 7A000000 		.4byte	0x7a
 16891 0ae9 02       		.byte	0x2
 16892 0aea 23       		.byte	0x23
 16893 0aeb 01       		.uleb128 0x1
 16894 0aec 10       		.uleb128 0x10
 16895 0aed D50D0000 		.4byte	.LASF59
 16896 0af1 06       		.byte	0x6
 16897 0af2 99       		.byte	0x99
 16898 0af3 500A0000 		.4byte	0xa50
 16899 0af7 02       		.byte	0x2
 16900 0af8 23       		.byte	0x23
 16901 0af9 04       		.uleb128 0x4
 16902 0afa 13       		.uleb128 0x13
 16903 0afb 6D6300   		.ascii	"mc\000"
 16904 0afe 06       		.byte	0x6
 16905 0aff A0       		.byte	0xa0
 16906 0b00 990A0000 		.4byte	0xa99
 16907 0b04 02       		.byte	0x2
 16908 0b05 23       		.byte	0x23
 16909 0b06 18       		.uleb128 0x18
 16910 0b07 00       		.byte	0
 16911 0b08 0F       		.uleb128 0xf
 16912 0b09 570B0000 		.4byte	.LASF158
 16913 0b0d 0A       		.byte	0xa
 16914 0b0e 07       		.byte	0x7
 16915 0b0f 18       		.byte	0x18
 16916 0b10 770B0000 		.4byte	0xb77
 16917 0b14 10       		.uleb128 0x10
 16918 0b15 7E060000 		.4byte	.LASF122
 16919 0b19 07       		.byte	0x7
 16920 0b1a 1A       		.byte	0x1a
 16921 0b1b 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 444


 16922 0b1f 02       		.byte	0x2
 16923 0b20 23       		.byte	0x23
 16924 0b21 00       		.uleb128 0
 16925 0b22 10       		.uleb128 0x10
 16926 0b23 A8050000 		.4byte	.LASF159
 16927 0b27 07       		.byte	0x7
 16928 0b28 1B       		.byte	0x1b
 16929 0b29 7A000000 		.4byte	0x7a
 16930 0b2d 02       		.byte	0x2
 16931 0b2e 23       		.byte	0x23
 16932 0b2f 01       		.uleb128 0x1
 16933 0b30 10       		.uleb128 0x10
 16934 0b31 F5050000 		.4byte	.LASF160
 16935 0b35 07       		.byte	0x7
 16936 0b36 1C       		.byte	0x1c
 16937 0b37 7A000000 		.4byte	0x7a
 16938 0b3b 02       		.byte	0x2
 16939 0b3c 23       		.byte	0x23
 16940 0b3d 02       		.uleb128 0x2
 16941 0b3e 10       		.uleb128 0x10
 16942 0b3f 28010000 		.4byte	.LASF161
 16943 0b43 07       		.byte	0x7
 16944 0b44 1D       		.byte	0x1d
 16945 0b45 85000000 		.4byte	0x85
 16946 0b49 02       		.byte	0x2
 16947 0b4a 23       		.byte	0x23
 16948 0b4b 04       		.uleb128 0x4
 16949 0b4c 10       		.uleb128 0x10
 16950 0b4d 43050000 		.4byte	.LASF162
 16951 0b51 07       		.byte	0x7
 16952 0b52 1E       		.byte	0x1e
 16953 0b53 85000000 		.4byte	0x85
 16954 0b57 02       		.byte	0x2
 16955 0b58 23       		.byte	0x23
 16956 0b59 06       		.uleb128 0x6
 16957 0b5a 10       		.uleb128 0x10
 16958 0b5b 600C0000 		.4byte	.LASF163
 16959 0b5f 07       		.byte	0x7
 16960 0b60 1F       		.byte	0x1f
 16961 0b61 7A000000 		.4byte	0x7a
 16962 0b65 02       		.byte	0x2
 16963 0b66 23       		.byte	0x23
 16964 0b67 08       		.uleb128 0x8
 16965 0b68 10       		.uleb128 0x10
 16966 0b69 8B0A0000 		.4byte	.LASF164
 16967 0b6d 07       		.byte	0x7
 16968 0b6e 20       		.byte	0x20
 16969 0b6f 7A000000 		.4byte	0x7a
 16970 0b73 02       		.byte	0x2
 16971 0b74 23       		.byte	0x23
 16972 0b75 09       		.uleb128 0x9
 16973 0b76 00       		.byte	0
 16974 0b77 0F       		.uleb128 0xf
 16975 0b78 BA0D0000 		.4byte	.LASF165
 16976 0b7c 30       		.byte	0x30
 16977 0b7d 08       		.byte	0x8
 16978 0b7e 18       		.byte	0x18
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 445


 16979 0b7f 2B0C0000 		.4byte	0xc2b
 16980 0b83 10       		.uleb128 0x10
 16981 0b84 050A0000 		.4byte	.LASF166
 16982 0b88 08       		.byte	0x8
 16983 0b89 1A       		.byte	0x1a
 16984 0b8a 7A000000 		.4byte	0x7a
 16985 0b8e 02       		.byte	0x2
 16986 0b8f 23       		.byte	0x23
 16987 0b90 00       		.uleb128 0
 16988 0b91 10       		.uleb128 0x10
 16989 0b92 390A0000 		.4byte	.LASF167
 16990 0b96 08       		.byte	0x8
 16991 0b97 1C       		.byte	0x1c
 16992 0b98 BC000000 		.4byte	0xbc
 16993 0b9c 02       		.byte	0x2
 16994 0b9d 23       		.byte	0x23
 16995 0b9e 04       		.uleb128 0x4
 16996 0b9f 10       		.uleb128 0x10
 16997 0ba0 D5050000 		.4byte	.LASF168
 16998 0ba4 08       		.byte	0x8
 16999 0ba5 1D       		.byte	0x1d
 17000 0ba6 BC000000 		.4byte	0xbc
 17001 0baa 02       		.byte	0x2
 17002 0bab 23       		.byte	0x23
 17003 0bac 08       		.uleb128 0x8
 17004 0bad 13       		.uleb128 0x13
 17005 0bae 6D696E00 		.ascii	"min\000"
 17006 0bb2 08       		.byte	0x8
 17007 0bb3 1E       		.byte	0x1e
 17008 0bb4 BC000000 		.4byte	0xbc
 17009 0bb8 02       		.byte	0x2
 17010 0bb9 23       		.byte	0x23
 17011 0bba 0C       		.uleb128 0xc
 17012 0bbb 13       		.uleb128 0x13
 17013 0bbc 6D617800 		.ascii	"max\000"
 17014 0bc0 08       		.byte	0x8
 17015 0bc1 1F       		.byte	0x1f
 17016 0bc2 BC000000 		.4byte	0xbc
 17017 0bc6 02       		.byte	0x2
 17018 0bc7 23       		.byte	0x23
 17019 0bc8 10       		.uleb128 0x10
 17020 0bc9 10       		.uleb128 0x10
 17021 0bca E80B0000 		.4byte	.LASF169
 17022 0bce 08       		.byte	0x8
 17023 0bcf 20       		.byte	0x20
 17024 0bd0 BC000000 		.4byte	0xbc
 17025 0bd4 02       		.byte	0x2
 17026 0bd5 23       		.byte	0x23
 17027 0bd6 14       		.uleb128 0x14
 17028 0bd7 10       		.uleb128 0x10
 17029 0bd8 01090000 		.4byte	.LASF170
 17030 0bdc 08       		.byte	0x8
 17031 0bdd 21       		.byte	0x21
 17032 0bde BC000000 		.4byte	0xbc
 17033 0be2 02       		.byte	0x2
 17034 0be3 23       		.byte	0x23
 17035 0be4 18       		.uleb128 0x18
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 446


 17036 0be5 13       		.uleb128 0x13
 17037 0be6 516B00   		.ascii	"Qk\000"
 17038 0be9 08       		.byte	0x8
 17039 0bea 22       		.byte	0x22
 17040 0beb BC000000 		.4byte	0xbc
 17041 0bef 02       		.byte	0x2
 17042 0bf0 23       		.byte	0x23
 17043 0bf1 1C       		.uleb128 0x1c
 17044 0bf2 10       		.uleb128 0x10
 17045 0bf3 8A020000 		.4byte	.LASF171
 17046 0bf7 08       		.byte	0x8
 17047 0bf8 23       		.byte	0x23
 17048 0bf9 BC000000 		.4byte	0xbc
 17049 0bfd 02       		.byte	0x2
 17050 0bfe 23       		.byte	0x23
 17051 0bff 20       		.uleb128 0x20
 17052 0c00 10       		.uleb128 0x10
 17053 0c01 F00A0000 		.4byte	.LASF172
 17054 0c05 08       		.byte	0x8
 17055 0c06 24       		.byte	0x24
 17056 0c07 BC000000 		.4byte	0xbc
 17057 0c0b 02       		.byte	0x2
 17058 0c0c 23       		.byte	0x23
 17059 0c0d 24       		.uleb128 0x24
 17060 0c0e 10       		.uleb128 0x10
 17061 0c0f 950A0000 		.4byte	.LASF173
 17062 0c13 08       		.byte	0x8
 17063 0c14 26       		.byte	0x26
 17064 0c15 90000000 		.4byte	0x90
 17065 0c19 02       		.byte	0x2
 17066 0c1a 23       		.byte	0x23
 17067 0c1b 28       		.uleb128 0x28
 17068 0c1c 10       		.uleb128 0x10
 17069 0c1d 9D060000 		.4byte	.LASF174
 17070 0c21 08       		.byte	0x8
 17071 0c22 28       		.byte	0x28
 17072 0c23 90000000 		.4byte	0x90
 17073 0c27 02       		.byte	0x2
 17074 0c28 23       		.byte	0x23
 17075 0c29 2C       		.uleb128 0x2c
 17076 0c2a 00       		.byte	0
 17077 0c2b 0F       		.uleb128 0xf
 17078 0c2c A00C0000 		.4byte	.LASF175
 17079 0c30 08       		.byte	0x8
 17080 0c31 09       		.byte	0x9
 17081 0c32 8C       		.byte	0x8c
 17082 0c33 540C0000 		.4byte	0xc54
 17083 0c37 10       		.uleb128 0x10
 17084 0c38 AA0C0000 		.4byte	.LASF176
 17085 0c3c 09       		.byte	0x9
 17086 0c3d 8E       		.byte	0x8e
 17087 0c3e BC000000 		.4byte	0xbc
 17088 0c42 02       		.byte	0x2
 17089 0c43 23       		.byte	0x23
 17090 0c44 00       		.uleb128 0
 17091 0c45 10       		.uleb128 0x10
 17092 0c46 1D000000 		.4byte	.LASF177
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 447


 17093 0c4a 09       		.byte	0x9
 17094 0c4b 8F       		.byte	0x8f
 17095 0c4c BC000000 		.4byte	0xbc
 17096 0c50 02       		.byte	0x2
 17097 0c51 23       		.byte	0x23
 17098 0c52 04       		.uleb128 0x4
 17099 0c53 00       		.byte	0
 17100 0c54 0F       		.uleb128 0xf
 17101 0c55 55020000 		.4byte	.LASF178
 17102 0c59 08       		.byte	0x8
 17103 0c5a 09       		.byte	0x9
 17104 0c5b 92       		.byte	0x92
 17105 0c5c 7D0C0000 		.4byte	0xc7d
 17106 0c60 10       		.uleb128 0x10
 17107 0c61 400D0000 		.4byte	.LASF179
 17108 0c65 09       		.byte	0x9
 17109 0c66 94       		.byte	0x94
 17110 0c67 BC000000 		.4byte	0xbc
 17111 0c6b 02       		.byte	0x2
 17112 0c6c 23       		.byte	0x23
 17113 0c6d 00       		.uleb128 0
 17114 0c6e 10       		.uleb128 0x10
 17115 0c6f B60C0000 		.4byte	.LASF180
 17116 0c73 09       		.byte	0x9
 17117 0c74 95       		.byte	0x95
 17118 0c75 B1000000 		.4byte	0xb1
 17119 0c79 02       		.byte	0x2
 17120 0c7a 23       		.byte	0x23
 17121 0c7b 04       		.uleb128 0x4
 17122 0c7c 00       		.byte	0
 17123 0c7d 0F       		.uleb128 0xf
 17124 0c7e A5020000 		.4byte	.LASF181
 17125 0c82 20       		.byte	0x20
 17126 0c83 09       		.byte	0x9
 17127 0c84 87       		.byte	0x87
 17128 0c85 C20C0000 		.4byte	0xcc2
 17129 0c89 10       		.uleb128 0x10
 17130 0c8a FC020000 		.4byte	.LASF182
 17131 0c8e 09       		.byte	0x9
 17132 0c8f 89       		.byte	0x89
 17133 0c90 C3000000 		.4byte	0xc3
 17134 0c94 02       		.byte	0x2
 17135 0c95 23       		.byte	0x23
 17136 0c96 00       		.uleb128 0
 17137 0c97 10       		.uleb128 0x10
 17138 0c98 97070000 		.4byte	.LASF183
 17139 0c9c 09       		.byte	0x9
 17140 0c9d 8A       		.byte	0x8a
 17141 0c9e BC000000 		.4byte	0xbc
 17142 0ca2 02       		.byte	0x2
 17143 0ca3 23       		.byte	0x23
 17144 0ca4 08       		.uleb128 0x8
 17145 0ca5 10       		.uleb128 0x10
 17146 0ca6 A9090000 		.4byte	.LASF184
 17147 0caa 09       		.byte	0x9
 17148 0cab 90       		.byte	0x90
 17149 0cac 2B0C0000 		.4byte	0xc2b
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 448


 17150 0cb0 02       		.byte	0x2
 17151 0cb1 23       		.byte	0x23
 17152 0cb2 0C       		.uleb128 0xc
 17153 0cb3 10       		.uleb128 0x10
 17154 0cb4 C90A0000 		.4byte	.LASF185
 17155 0cb8 09       		.byte	0x9
 17156 0cb9 96       		.byte	0x96
 17157 0cba 540C0000 		.4byte	0xc54
 17158 0cbe 02       		.byte	0x2
 17159 0cbf 23       		.byte	0x23
 17160 0cc0 14       		.uleb128 0x14
 17161 0cc1 00       		.byte	0
 17162 0cc2 14       		.uleb128 0x14
 17163 0cc3 01       		.byte	0x1
 17164 0cc4 C4000000 		.4byte	.LASF186
 17165 0cc8 01       		.byte	0x1
 17166 0cc9 B3       		.byte	0xb3
 17167 0cca 01       		.byte	0x1
 17168 0ccb 00000000 		.4byte	.LFB56
 17169 0ccf D2000000 		.4byte	.LFE56
 17170 0cd3 00000000 		.4byte	.LLST0
 17171 0cd7 01       		.byte	0x1
 17172 0cd8 EB0C0000 		.4byte	0xceb
 17173 0cdc 15       		.uleb128 0x15
 17174 0cdd 7E060000 		.4byte	.LASF122
 17175 0ce1 01       		.byte	0x1
 17176 0ce2 B3       		.byte	0xb3
 17177 0ce3 7A000000 		.4byte	0x7a
 17178 0ce7 02       		.byte	0x2
 17179 0ce8 91       		.byte	0x91
 17180 0ce9 77       		.sleb128 -9
 17181 0cea 00       		.byte	0
 17182 0ceb 14       		.uleb128 0x14
 17183 0cec 01       		.byte	0x1
 17184 0ced 39000000 		.4byte	.LASF187
 17185 0cf1 01       		.byte	0x1
 17186 0cf2 DB       		.byte	0xdb
 17187 0cf3 01       		.byte	0x1
 17188 0cf4 00000000 		.4byte	.LFB57
 17189 0cf8 EE000000 		.4byte	.LFE57
 17190 0cfc 38000000 		.4byte	.LLST1
 17191 0d00 01       		.byte	0x1
 17192 0d01 140D0000 		.4byte	0xd14
 17193 0d05 15       		.uleb128 0x15
 17194 0d06 7E060000 		.4byte	.LASF122
 17195 0d0a 01       		.byte	0x1
 17196 0d0b DB       		.byte	0xdb
 17197 0d0c 7A000000 		.4byte	0x7a
 17198 0d10 02       		.byte	0x2
 17199 0d11 91       		.byte	0x91
 17200 0d12 77       		.sleb128 -9
 17201 0d13 00       		.byte	0
 17202 0d14 16       		.uleb128 0x16
 17203 0d15 01       		.byte	0x1
 17204 0d16 6B060000 		.4byte	.LASF188
 17205 0d1a 01       		.byte	0x1
 17206 0d1b 0701     		.2byte	0x107
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 449


 17207 0d1d 01       		.byte	0x1
 17208 0d1e 00000000 		.4byte	.LFB58
 17209 0d22 74010000 		.4byte	.LFE58
 17210 0d26 70000000 		.4byte	.LLST2
 17211 0d2a 01       		.byte	0x1
 17212 0d2b 16       		.uleb128 0x16
 17213 0d2c 01       		.byte	0x1
 17214 0d2d 96020000 		.4byte	.LASF189
 17215 0d31 01       		.byte	0x1
 17216 0d32 4801     		.2byte	0x148
 17217 0d34 01       		.byte	0x1
 17218 0d35 00000000 		.4byte	.LFB59
 17219 0d39 50000000 		.4byte	.LFE59
 17220 0d3d 9C000000 		.4byte	.LLST3
 17221 0d41 01       		.byte	0x1
 17222 0d42 17       		.uleb128 0x17
 17223 0d43 01       		.byte	0x1
 17224 0d44 2F0B0000 		.4byte	.LASF190
 17225 0d48 01       		.byte	0x1
 17226 0d49 5901     		.2byte	0x159
 17227 0d4b 01       		.byte	0x1
 17228 0d4c 00000000 		.4byte	.LFB60
 17229 0d50 80000000 		.4byte	.LFE60
 17230 0d54 C8000000 		.4byte	.LLST4
 17231 0d58 01       		.byte	0x1
 17232 0d59 6D0D0000 		.4byte	0xd6d
 17233 0d5d 18       		.uleb128 0x18
 17234 0d5e F20C0000 		.4byte	.LASF191
 17235 0d62 01       		.byte	0x1
 17236 0d63 5901     		.2byte	0x159
 17237 0d65 6D0D0000 		.4byte	0xd6d
 17238 0d69 02       		.byte	0x2
 17239 0d6a 91       		.byte	0x91
 17240 0d6b 74       		.sleb128 -12
 17241 0d6c 00       		.byte	0
 17242 0d6d 05       		.uleb128 0x5
 17243 0d6e 04       		.byte	0x4
 17244 0d6f 31080000 		.4byte	0x831
 17245 0d73 17       		.uleb128 0x17
 17246 0d74 01       		.byte	0x1
 17247 0d75 B3080000 		.4byte	.LASF192
 17248 0d79 01       		.byte	0x1
 17249 0d7a 7201     		.2byte	0x172
 17250 0d7c 01       		.byte	0x1
 17251 0d7d 00000000 		.4byte	.LFB61
 17252 0d81 98000000 		.4byte	.LFE61
 17253 0d85 00010000 		.4byte	.LLST5
 17254 0d89 01       		.byte	0x1
 17255 0d8a 9E0D0000 		.4byte	0xd9e
 17256 0d8e 18       		.uleb128 0x18
 17257 0d8f F20C0000 		.4byte	.LASF191
 17258 0d93 01       		.byte	0x1
 17259 0d94 7201     		.2byte	0x172
 17260 0d96 6D0D0000 		.4byte	0xd6d
 17261 0d9a 02       		.byte	0x2
 17262 0d9b 91       		.byte	0x91
 17263 0d9c 74       		.sleb128 -12
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 450


 17264 0d9d 00       		.byte	0
 17265 0d9e 17       		.uleb128 0x17
 17266 0d9f 01       		.byte	0x1
 17267 0da0 B00B0000 		.4byte	.LASF193
 17268 0da4 01       		.byte	0x1
 17269 0da5 8001     		.2byte	0x180
 17270 0da7 01       		.byte	0x1
 17271 0da8 00000000 		.4byte	.LFB62
 17272 0dac 54000000 		.4byte	.LFE62
 17273 0db0 38010000 		.4byte	.LLST6
 17274 0db4 01       		.byte	0x1
 17275 0db5 C90D0000 		.4byte	0xdc9
 17276 0db9 18       		.uleb128 0x18
 17277 0dba F20C0000 		.4byte	.LASF191
 17278 0dbe 01       		.byte	0x1
 17279 0dbf 8001     		.2byte	0x180
 17280 0dc1 6D0D0000 		.4byte	0xd6d
 17281 0dc5 02       		.byte	0x2
 17282 0dc6 91       		.byte	0x91
 17283 0dc7 74       		.sleb128 -12
 17284 0dc8 00       		.byte	0
 17285 0dc9 16       		.uleb128 0x16
 17286 0dca 01       		.byte	0x1
 17287 0dcb 7B000000 		.4byte	.LASF194
 17288 0dcf 01       		.byte	0x1
 17289 0dd0 9501     		.2byte	0x195
 17290 0dd2 01       		.byte	0x1
 17291 0dd3 00000000 		.4byte	.LFB63
 17292 0dd7 66000000 		.4byte	.LFE63
 17293 0ddb 70010000 		.4byte	.LLST7
 17294 0ddf 01       		.byte	0x1
 17295 0de0 16       		.uleb128 0x16
 17296 0de1 01       		.byte	0x1
 17297 0de2 B2070000 		.4byte	.LASF195
 17298 0de6 01       		.byte	0x1
 17299 0de7 9B01     		.2byte	0x19b
 17300 0de9 01       		.byte	0x1
 17301 0dea 00000000 		.4byte	.LFB64
 17302 0dee 66000000 		.4byte	.LFE64
 17303 0df2 A8010000 		.4byte	.LLST8
 17304 0df6 01       		.byte	0x1
 17305 0df7 17       		.uleb128 0x17
 17306 0df8 01       		.byte	0x1
 17307 0df9 A1000000 		.4byte	.LASF196
 17308 0dfd 01       		.byte	0x1
 17309 0dfe A101     		.2byte	0x1a1
 17310 0e00 01       		.byte	0x1
 17311 0e01 00000000 		.4byte	.LFB65
 17312 0e05 20010000 		.4byte	.LFE65
 17313 0e09 E0010000 		.4byte	.LLST9
 17314 0e0d 01       		.byte	0x1
 17315 0e0e 220E0000 		.4byte	0xe22
 17316 0e12 18       		.uleb128 0x18
 17317 0e13 F20C0000 		.4byte	.LASF191
 17318 0e17 01       		.byte	0x1
 17319 0e18 A101     		.2byte	0x1a1
 17320 0e1a 6D0D0000 		.4byte	0xd6d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 451


 17321 0e1e 02       		.byte	0x2
 17322 0e1f 91       		.byte	0x91
 17323 0e20 74       		.sleb128 -12
 17324 0e21 00       		.byte	0
 17325 0e22 17       		.uleb128 0x17
 17326 0e23 01       		.byte	0x1
 17327 0e24 D7060000 		.4byte	.LASF197
 17328 0e28 01       		.byte	0x1
 17329 0e29 D301     		.2byte	0x1d3
 17330 0e2b 01       		.byte	0x1
 17331 0e2c 00000000 		.4byte	.LFB66
 17332 0e30 64000000 		.4byte	.LFE66
 17333 0e34 18020000 		.4byte	.LLST10
 17334 0e38 01       		.byte	0x1
 17335 0e39 4D0E0000 		.4byte	0xe4d
 17336 0e3d 18       		.uleb128 0x18
 17337 0e3e F20C0000 		.4byte	.LASF191
 17338 0e42 01       		.byte	0x1
 17339 0e43 D301     		.2byte	0x1d3
 17340 0e45 6D0D0000 		.4byte	0xd6d
 17341 0e49 02       		.byte	0x2
 17342 0e4a 91       		.byte	0x91
 17343 0e4b 74       		.sleb128 -12
 17344 0e4c 00       		.byte	0
 17345 0e4d 19       		.uleb128 0x19
 17346 0e4e 01       		.byte	0x1
 17347 0e4f 210B0000 		.4byte	.LASF202
 17348 0e53 01       		.byte	0x1
 17349 0e54 ED01     		.2byte	0x1ed
 17350 0e56 01       		.byte	0x1
 17351 0e57 7A000000 		.4byte	0x7a
 17352 0e5b 00000000 		.4byte	.LFB67
 17353 0e5f FA000000 		.4byte	.LFE67
 17354 0e63 50020000 		.4byte	.LLST11
 17355 0e67 01       		.byte	0x1
 17356 0e68 D10E0000 		.4byte	0xed1
 17357 0e6c 18       		.uleb128 0x18
 17358 0e6d 65070000 		.4byte	.LASF198
 17359 0e71 01       		.byte	0x1
 17360 0e72 ED01     		.2byte	0x1ed
 17361 0e74 7A000000 		.4byte	0x7a
 17362 0e78 02       		.byte	0x2
 17363 0e79 91       		.byte	0x91
 17364 0e7a 67       		.sleb128 -25
 17365 0e7b 18       		.uleb128 0x18
 17366 0e7c F3070000 		.4byte	.LASF199
 17367 0e80 01       		.byte	0x1
 17368 0e81 ED01     		.2byte	0x1ed
 17369 0e83 7A000000 		.4byte	0x7a
 17370 0e87 02       		.byte	0x2
 17371 0e88 91       		.byte	0x91
 17372 0e89 66       		.sleb128 -26
 17373 0e8a 1A       		.uleb128 0x1a
 17374 0e8b 0B060000 		.4byte	.LASF200
 17375 0e8f 01       		.byte	0x1
 17376 0e90 EF01     		.2byte	0x1ef
 17377 0e92 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 452


 17378 0e96 02       		.byte	0x2
 17379 0e97 91       		.byte	0x91
 17380 0e98 77       		.sleb128 -9
 17381 0e99 1A       		.uleb128 0x1a
 17382 0e9a 20070000 		.4byte	.LASF145
 17383 0e9e 01       		.byte	0x1
 17384 0e9f F001     		.2byte	0x1f0
 17385 0ea1 85000000 		.4byte	0x85
 17386 0ea5 02       		.byte	0x2
 17387 0ea6 91       		.byte	0x91
 17388 0ea7 74       		.sleb128 -12
 17389 0ea8 1A       		.uleb128 0x1a
 17390 0ea9 11060000 		.4byte	.LASF201
 17391 0ead 01       		.byte	0x1
 17392 0eae F101     		.2byte	0x1f1
 17393 0eb0 D5000000 		.4byte	0xd5
 17394 0eb4 02       		.byte	0x2
 17395 0eb5 91       		.byte	0x91
 17396 0eb6 73       		.sleb128 -13
 17397 0eb7 1B       		.uleb128 0x1b
 17398 0eb8 36000000 		.4byte	.LBB2
 17399 0ebc 60000000 		.4byte	.LBE2
 17400 0ec0 1C       		.uleb128 0x1c
 17401 0ec1 5F5F7800 		.ascii	"__x\000"
 17402 0ec5 01       		.byte	0x1
 17403 0ec6 FC01     		.2byte	0x1fc
 17404 0ec8 6C000000 		.4byte	0x6c
 17405 0ecc 02       		.byte	0x2
 17406 0ecd 91       		.byte	0x91
 17407 0ece 6C       		.sleb128 -20
 17408 0ecf 00       		.byte	0
 17409 0ed0 00       		.byte	0
 17410 0ed1 19       		.uleb128 0x19
 17411 0ed2 01       		.byte	0x1
 17412 0ed3 A2080000 		.4byte	.LASF203
 17413 0ed7 01       		.byte	0x1
 17414 0ed8 2D02     		.2byte	0x22d
 17415 0eda 01       		.byte	0x1
 17416 0edb 7A000000 		.4byte	0x7a
 17417 0edf 00000000 		.4byte	.LFB68
 17418 0ee3 04030000 		.4byte	.LFE68
 17419 0ee7 88020000 		.4byte	.LLST12
 17420 0eeb 01       		.byte	0x1
 17421 0eec 4A0F0000 		.4byte	0xf4a
 17422 0ef0 18       		.uleb128 0x18
 17423 0ef1 4F070000 		.4byte	.LASF204
 17424 0ef5 01       		.byte	0x1
 17425 0ef6 2D02     		.2byte	0x22d
 17426 0ef8 7A000000 		.4byte	0x7a
 17427 0efc 03       		.byte	0x3
 17428 0efd 91       		.byte	0x91
 17429 0efe BF7F     		.sleb128 -65
 17430 0f00 1A       		.uleb128 0x1a
 17431 0f01 560A0000 		.4byte	.LASF205
 17432 0f05 01       		.byte	0x1
 17433 0f06 2F02     		.2byte	0x22f
 17434 0f08 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 453


 17435 0f0c 02       		.byte	0x2
 17436 0f0d 91       		.byte	0x91
 17437 0f0e 6F       		.sleb128 -17
 17438 0f0f 1A       		.uleb128 0x1a
 17439 0f10 D5070000 		.4byte	.LASF206
 17440 0f14 01       		.byte	0x1
 17441 0f15 3002     		.2byte	0x230
 17442 0f17 7A000000 		.4byte	0x7a
 17443 0f1b 02       		.byte	0x2
 17444 0f1c 91       		.byte	0x91
 17445 0f1d 77       		.sleb128 -9
 17446 0f1e 1A       		.uleb128 0x1a
 17447 0f1f EA0D0000 		.4byte	.LASF207
 17448 0f23 01       		.byte	0x1
 17449 0f24 3002     		.2byte	0x230
 17450 0f26 7A000000 		.4byte	0x7a
 17451 0f2a 02       		.byte	0x2
 17452 0f2b 91       		.byte	0x91
 17453 0f2c 76       		.sleb128 -10
 17454 0f2d 1A       		.uleb128 0x1a
 17455 0f2e DF000000 		.4byte	.LASF208
 17456 0f32 01       		.byte	0x1
 17457 0f33 3102     		.2byte	0x231
 17458 0f35 4A0F0000 		.4byte	0xf4a
 17459 0f39 02       		.byte	0x2
 17460 0f3a 91       		.byte	0x91
 17461 0f3b 44       		.sleb128 -60
 17462 0f3c 1C       		.uleb128 0x1c
 17463 0f3d 7000     		.ascii	"p\000"
 17464 0f3f 01       		.byte	0x1
 17465 0f40 3202     		.2byte	0x232
 17466 0f42 E3000000 		.4byte	0xe3
 17467 0f46 02       		.byte	0x2
 17468 0f47 91       		.byte	0x91
 17469 0f48 70       		.sleb128 -16
 17470 0f49 00       		.byte	0
 17471 0f4a 09       		.uleb128 0x9
 17472 0f4b D5000000 		.4byte	0xd5
 17473 0f4f 5A0F0000 		.4byte	0xf5a
 17474 0f53 0A       		.uleb128 0xa
 17475 0f54 DC000000 		.4byte	0xdc
 17476 0f58 27       		.byte	0x27
 17477 0f59 00       		.byte	0
 17478 0f5a 1D       		.uleb128 0x1d
 17479 0f5b 01       		.byte	0x1
 17480 0f5c D8000000 		.4byte	.LASF209
 17481 0f60 01       		.byte	0x1
 17482 0f61 B402     		.2byte	0x2b4
 17483 0f63 7A000000 		.4byte	0x7a
 17484 0f67 00000000 		.4byte	.LFB69
 17485 0f6b C86E0000 		.4byte	.LFE69
 17486 0f6f C2020000 		.4byte	.LLST13
 17487 0f73 01       		.byte	0x1
 17488 0f74 2D130000 		.4byte	0x132d
 17489 0f78 1A       		.uleb128 0x1a
 17490 0f79 5D050000 		.4byte	.LASF210
 17491 0f7d 01       		.byte	0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 454


 17492 0f7e B602     		.2byte	0x2b6
 17493 0f80 7A000000 		.4byte	0x7a
 17494 0f84 03       		.byte	0x3
 17495 0f85 91       		.byte	0x91
 17496 0f86 9B7F     		.sleb128 -101
 17497 0f88 1A       		.uleb128 0x1a
 17498 0f89 08090000 		.4byte	.LASF26
 17499 0f8d 01       		.byte	0x1
 17500 0f8e B802     		.2byte	0x2b8
 17501 0f90 7A000000 		.4byte	0x7a
 17502 0f94 03       		.byte	0x3
 17503 0f95 91       		.byte	0x91
 17504 0f96 F37E     		.sleb128 -141
 17505 0f98 1A       		.uleb128 0x1a
 17506 0f99 62060000 		.4byte	.LASF211
 17507 0f9d 01       		.byte	0x1
 17508 0f9e B902     		.2byte	0x2b9
 17509 0fa0 7A000000 		.4byte	0x7a
 17510 0fa4 03       		.byte	0x3
 17511 0fa5 91       		.byte	0x91
 17512 0fa6 9A7F     		.sleb128 -102
 17513 0fa8 1A       		.uleb128 0x1a
 17514 0fa9 0E0B0000 		.4byte	.LASF27
 17515 0fad 01       		.byte	0x1
 17516 0fae BA02     		.2byte	0x2ba
 17517 0fb0 BC000000 		.4byte	0xbc
 17518 0fb4 03       		.byte	0x3
 17519 0fb5 91       		.byte	0x91
 17520 0fb6 B87F     		.sleb128 -72
 17521 0fb8 1A       		.uleb128 0x1a
 17522 0fb9 22030000 		.4byte	.LASF79
 17523 0fbd 01       		.byte	0x1
 17524 0fbe BB02     		.2byte	0x2bb
 17525 0fc0 BC000000 		.4byte	0xbc
 17526 0fc4 03       		.byte	0x3
 17527 0fc5 91       		.byte	0x91
 17528 0fc6 B47F     		.sleb128 -76
 17529 0fc8 1A       		.uleb128 0x1a
 17530 0fc9 14000000 		.4byte	.LASF96
 17531 0fcd 01       		.byte	0x1
 17532 0fce BC02     		.2byte	0x2bc
 17533 0fd0 7A000000 		.4byte	0x7a
 17534 0fd4 03       		.byte	0x3
 17535 0fd5 91       		.byte	0x91
 17536 0fd6 B37F     		.sleb128 -77
 17537 0fd8 1A       		.uleb128 0x1a
 17538 0fd9 2E080000 		.4byte	.LASF212
 17539 0fdd 01       		.byte	0x1
 17540 0fde BD02     		.2byte	0x2bd
 17541 0fe0 7A000000 		.4byte	0x7a
 17542 0fe4 03       		.byte	0x3
 17543 0fe5 91       		.byte	0x91
 17544 0fe6 B27F     		.sleb128 -78
 17545 0fe8 1A       		.uleb128 0x1a
 17546 0fe9 C3070000 		.4byte	.LASF213
 17547 0fed 01       		.byte	0x1
 17548 0fee BE02     		.2byte	0x2be
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 455


 17549 0ff0 7A000000 		.4byte	0x7a
 17550 0ff4 03       		.byte	0x3
 17551 0ff5 91       		.byte	0x91
 17552 0ff6 B17F     		.sleb128 -79
 17553 0ff8 1A       		.uleb128 0x1a
 17554 0ff9 D9080000 		.4byte	.LASF214
 17555 0ffd 01       		.byte	0x1
 17556 0ffe BF02     		.2byte	0x2bf
 17557 1000 A6000000 		.4byte	0xa6
 17558 1004 03       		.byte	0x3
 17559 1005 91       		.byte	0x91
 17560 1006 AE7F     		.sleb128 -82
 17561 1008 1C       		.uleb128 0x1c
 17562 1009 4B7000   		.ascii	"Kp\000"
 17563 100c 01       		.byte	0x1
 17564 100d C102     		.2byte	0x2c1
 17565 100f BC000000 		.4byte	0xbc
 17566 1013 03       		.byte	0x3
 17567 1014 91       		.byte	0x91
 17568 1015 947F     		.sleb128 -108
 17569 1017 1C       		.uleb128 0x1c
 17570 1018 4B6400   		.ascii	"Kd\000"
 17571 101b 01       		.byte	0x1
 17572 101c C202     		.2byte	0x2c2
 17573 101e BC000000 		.4byte	0xbc
 17574 1022 03       		.byte	0x3
 17575 1023 91       		.byte	0x91
 17576 1024 907F     		.sleb128 -112
 17577 1026 1C       		.uleb128 0x1c
 17578 1027 4B6900   		.ascii	"Ki\000"
 17579 102a 01       		.byte	0x1
 17580 102b C302     		.2byte	0x2c3
 17581 102d BC000000 		.4byte	0xbc
 17582 1031 03       		.byte	0x3
 17583 1032 91       		.byte	0x91
 17584 1033 8C7F     		.sleb128 -116
 17585 1035 1C       		.uleb128 0x1c
 17586 1036 4B736900 		.ascii	"Ksi\000"
 17587 103a 01       		.byte	0x1
 17588 103b C402     		.2byte	0x2c4
 17589 103d BC000000 		.4byte	0xbc
 17590 1041 03       		.byte	0x3
 17591 1042 91       		.byte	0x91
 17592 1043 887F     		.sleb128 -120
 17593 1045 1A       		.uleb128 0x1a
 17594 1046 BB0A0000 		.4byte	.LASF101
 17595 104a 01       		.byte	0x1
 17596 104b C502     		.2byte	0x2c5
 17597 104d 7A000000 		.4byte	0x7a
 17598 1051 03       		.byte	0x3
 17599 1052 91       		.byte	0x91
 17600 1053 F47E     		.sleb128 -140
 17601 1055 1A       		.uleb128 0x1a
 17602 1056 E8060000 		.4byte	.LASF61
 17603 105a 01       		.byte	0x1
 17604 105b C602     		.2byte	0x2c6
 17605 105d 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 456


 17606 1061 03       		.byte	0x3
 17607 1062 91       		.byte	0x91
 17608 1063 F57E     		.sleb128 -139
 17609 1065 1A       		.uleb128 0x1a
 17610 1066 8A0B0000 		.4byte	.LASF215
 17611 106a 01       		.byte	0x1
 17612 106b C702     		.2byte	0x2c7
 17613 106d 85000000 		.4byte	0x85
 17614 1071 03       		.byte	0x3
 17615 1072 91       		.byte	0x91
 17616 1073 F67E     		.sleb128 -138
 17617 1075 1A       		.uleb128 0x1a
 17618 1076 600D0000 		.4byte	.LASF216
 17619 107a 01       		.byte	0x1
 17620 107b C802     		.2byte	0x2c8
 17621 107d BC000000 		.4byte	0xbc
 17622 1081 03       		.byte	0x3
 17623 1082 91       		.byte	0x91
 17624 1083 F87E     		.sleb128 -136
 17625 1085 1A       		.uleb128 0x1a
 17626 1086 B1000000 		.4byte	.LASF98
 17627 108a 01       		.byte	0x1
 17628 108b C902     		.2byte	0x2c9
 17629 108d BC000000 		.4byte	0xbc
 17630 1091 03       		.byte	0x3
 17631 1092 91       		.byte	0x91
 17632 1093 807F     		.sleb128 -128
 17633 1095 1A       		.uleb128 0x1a
 17634 1096 01080000 		.4byte	.LASF217
 17635 109a 01       		.byte	0x1
 17636 109b CA02     		.2byte	0x2ca
 17637 109d BC000000 		.4byte	0xbc
 17638 10a1 03       		.byte	0x3
 17639 10a2 91       		.byte	0x91
 17640 10a3 FC7E     		.sleb128 -132
 17641 10a5 1A       		.uleb128 0x1a
 17642 10a6 F90A0000 		.4byte	.LASF100
 17643 10aa 01       		.byte	0x1
 17644 10ab CB02     		.2byte	0x2cb
 17645 10ad 7A000000 		.4byte	0x7a
 17646 10b1 03       		.byte	0x3
 17647 10b2 91       		.byte	0x91
 17648 10b3 877F     		.sleb128 -121
 17649 10b5 1A       		.uleb128 0x1a
 17650 10b6 350D0000 		.4byte	.LASF92
 17651 10ba 01       		.byte	0x1
 17652 10bb CC02     		.2byte	0x2cc
 17653 10bd 7A000000 		.4byte	0x7a
 17654 10c1 03       		.byte	0x3
 17655 10c2 91       		.byte	0x91
 17656 10c3 AD7F     		.sleb128 -83
 17657 10c5 1A       		.uleb128 0x1a
 17658 10c6 AC060000 		.4byte	.LASF91
 17659 10ca 01       		.byte	0x1
 17660 10cb CD02     		.2byte	0x2cd
 17661 10cd 7A000000 		.4byte	0x7a
 17662 10d1 03       		.byte	0x3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 457


 17663 10d2 91       		.byte	0x91
 17664 10d3 AC7F     		.sleb128 -84
 17665 10d5 1A       		.uleb128 0x1a
 17666 10d6 86090000 		.4byte	.LASF218
 17667 10da 01       		.byte	0x1
 17668 10db CE02     		.2byte	0x2ce
 17669 10dd 7A000000 		.4byte	0x7a
 17670 10e1 03       		.byte	0x3
 17671 10e2 91       		.byte	0x91
 17672 10e3 AB7F     		.sleb128 -85
 17673 10e5 1A       		.uleb128 0x1a
 17674 10e6 220C0000 		.4byte	.LASF219
 17675 10ea 01       		.byte	0x1
 17676 10eb CF02     		.2byte	0x2cf
 17677 10ed 7A000000 		.4byte	0x7a
 17678 10f1 03       		.byte	0x3
 17679 10f2 91       		.byte	0x91
 17680 10f3 AA7F     		.sleb128 -86
 17681 10f5 1A       		.uleb128 0x1a
 17682 10f6 0B0C0000 		.4byte	.LASF220
 17683 10fa 01       		.byte	0x1
 17684 10fb D002     		.2byte	0x2d0
 17685 10fd 7A000000 		.4byte	0x7a
 17686 1101 03       		.byte	0x3
 17687 1102 91       		.byte	0x91
 17688 1103 A97F     		.sleb128 -87
 17689 1105 1A       		.uleb128 0x1a
 17690 1106 B9060000 		.4byte	.LASF221
 17691 110a 01       		.byte	0x1
 17692 110b D102     		.2byte	0x2d1
 17693 110d 85000000 		.4byte	0x85
 17694 1111 03       		.byte	0x3
 17695 1112 91       		.byte	0x91
 17696 1113 A67F     		.sleb128 -90
 17697 1115 1A       		.uleb128 0x1a
 17698 1116 96030000 		.4byte	.LASF222
 17699 111a 01       		.byte	0x1
 17700 111b D202     		.2byte	0x2d2
 17701 111d 7A000000 		.4byte	0x7a
 17702 1121 03       		.byte	0x3
 17703 1122 91       		.byte	0x91
 17704 1123 A57F     		.sleb128 -91
 17705 1125 1A       		.uleb128 0x1a
 17706 1126 4C010000 		.4byte	.LASF223
 17707 112a 01       		.byte	0x1
 17708 112b D302     		.2byte	0x2d3
 17709 112d BC000000 		.4byte	0xbc
 17710 1131 02       		.byte	0x2
 17711 1132 91       		.byte	0x91
 17712 1133 54       		.sleb128 -44
 17713 1134 1A       		.uleb128 0x1a
 17714 1135 EB000000 		.4byte	.LASF224
 17715 1139 01       		.byte	0x1
 17716 113a D402     		.2byte	0x2d4
 17717 113c BC000000 		.4byte	0xbc
 17718 1140 03       		.byte	0x3
 17719 1141 91       		.byte	0x91
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 458


 17720 1142 A07F     		.sleb128 -96
 17721 1144 1A       		.uleb128 0x1a
 17722 1145 02020000 		.4byte	.LASF225
 17723 1149 01       		.byte	0x1
 17724 114a D502     		.2byte	0x2d5
 17725 114c BC000000 		.4byte	0xbc
 17726 1150 03       		.byte	0x3
 17727 1151 91       		.byte	0x91
 17728 1152 9C7F     		.sleb128 -100
 17729 1154 1A       		.uleb128 0x1a
 17730 1155 1B0B0000 		.4byte	.LASF226
 17731 1159 01       		.byte	0x1
 17732 115a D802     		.2byte	0x2d8
 17733 115c 7A000000 		.4byte	0x7a
 17734 1160 03       		.byte	0x3
 17735 1161 91       		.byte	0x91
 17736 1162 997F     		.sleb128 -103
 17737 1164 1C       		.uleb128 0x1c
 17738 1165 69647800 		.ascii	"idx\000"
 17739 1169 01       		.byte	0x1
 17740 116a D902     		.2byte	0x2d9
 17741 116c 7A000000 		.4byte	0x7a
 17742 1170 02       		.byte	0x2
 17743 1171 91       		.byte	0x91
 17744 1172 53       		.sleb128 -45
 17745 1173 1A       		.uleb128 0x1a
 17746 1174 70050000 		.4byte	.LASF227
 17747 1178 01       		.byte	0x1
 17748 1179 DA02     		.2byte	0x2da
 17749 117b 7A000000 		.4byte	0x7a
 17750 117f 02       		.byte	0x2
 17751 1180 91       		.byte	0x91
 17752 1181 52       		.sleb128 -46
 17753 1182 1E       		.uleb128 0x1e
 17754 1183 CE060000 		.4byte	.LASF228
 17755 1187 01       		.byte	0x1
 17756 1188 9512     		.2byte	0x1295
 17757 118a B06E0000 		.4byte	.L131
 17758 118e 1E       		.uleb128 0x1e
 17759 118f 7C0D0000 		.4byte	.LASF229
 17760 1193 01       		.byte	0x1
 17761 1194 E308     		.2byte	0x8e3
 17762 1196 F2300000 		.4byte	.L312
 17763 119a 1E       		.uleb128 0x1e
 17764 119b 2B0D0000 		.4byte	.LASF230
 17765 119f 01       		.byte	0x1
 17766 11a0 480A     		.2byte	0xa48
 17767 11a2 A2370000 		.4byte	.L353
 17768 11a6 1E       		.uleb128 0x1e
 17769 11a7 60030000 		.4byte	.LASF231
 17770 11ab 01       		.byte	0x1
 17771 11ac 9E0A     		.2byte	0xa9e
 17772 11ae CE390000 		.4byte	.L364
 17773 11b2 1F       		.uleb128 0x1f
 17774 11b3 E4050000 		.4byte	.LBB3
 17775 11b7 5E070000 		.4byte	.LBE3
 17776 11bb CF110000 		.4byte	0x11cf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 459


 17777 11bf 1A       		.uleb128 0x1a
 17778 11c0 7D0C0000 		.4byte	.LASF232
 17779 11c4 01       		.byte	0x1
 17780 11c5 1004     		.2byte	0x410
 17781 11c7 BC000000 		.4byte	0xbc
 17782 11cb 02       		.byte	0x2
 17783 11cc 91       		.byte	0x91
 17784 11cd 4C       		.sleb128 -52
 17785 11ce 00       		.byte	0
 17786 11cf 1F       		.uleb128 0x1f
 17787 11d0 94070000 		.4byte	.LBB4
 17788 11d4 24090000 		.4byte	.LBE4
 17789 11d8 EC110000 		.4byte	0x11ec
 17790 11dc 1A       		.uleb128 0x1a
 17791 11dd 93080000 		.4byte	.LASF233
 17792 11e1 01       		.byte	0x1
 17793 11e2 3D04     		.2byte	0x43d
 17794 11e4 BC000000 		.4byte	0xbc
 17795 11e8 02       		.byte	0x2
 17796 11e9 91       		.byte	0x91
 17797 11ea 48       		.sleb128 -56
 17798 11eb 00       		.byte	0
 17799 11ec 1F       		.uleb128 0x1f
 17800 11ed 5A090000 		.4byte	.LBB5
 17801 11f1 CC0B0000 		.4byte	.LBE5
 17802 11f5 18120000 		.4byte	0x1218
 17803 11f9 1A       		.uleb128 0x1a
 17804 11fa 7D0C0000 		.4byte	.LASF232
 17805 11fe 01       		.byte	0x1
 17806 11ff 6A04     		.2byte	0x46a
 17807 1201 BC000000 		.4byte	0xbc
 17808 1205 02       		.byte	0x2
 17809 1206 91       		.byte	0x91
 17810 1207 44       		.sleb128 -60
 17811 1208 1A       		.uleb128 0x1a
 17812 1209 93080000 		.4byte	.LASF233
 17813 120d 01       		.byte	0x1
 17814 120e 6B04     		.2byte	0x46b
 17815 1210 BC000000 		.4byte	0xbc
 17816 1214 02       		.byte	0x2
 17817 1215 91       		.byte	0x91
 17818 1216 40       		.sleb128 -64
 17819 1217 00       		.byte	0
 17820 1218 1F       		.uleb128 0x1f
 17821 1219 58260000 		.4byte	.LBB6
 17822 121d 34270000 		.4byte	.LBE6
 17823 1221 86120000 		.4byte	0x1286
 17824 1225 1A       		.uleb128 0x1a
 17825 1226 74010000 		.4byte	.LASF234
 17826 122a 01       		.byte	0x1
 17827 122b 5C07     		.2byte	0x75c
 17828 122d BC000000 		.4byte	0xbc
 17829 1231 03       		.byte	0x3
 17830 1232 91       		.byte	0x91
 17831 1233 D47E     		.sleb128 -172
 17832 1235 1A       		.uleb128 0x1a
 17833 1236 9F050000 		.4byte	.LASF235
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 460


 17834 123a 01       		.byte	0x1
 17835 123b 5D07     		.2byte	0x75d
 17836 123d BC000000 		.4byte	0xbc
 17837 1241 03       		.byte	0x3
 17838 1242 91       		.byte	0x91
 17839 1243 D07E     		.sleb128 -176
 17840 1245 1A       		.uleb128 0x1a
 17841 1246 6B0A0000 		.4byte	.LASF236
 17842 124a 01       		.byte	0x1
 17843 124b 5E07     		.2byte	0x75e
 17844 124d BC000000 		.4byte	0xbc
 17845 1251 03       		.byte	0x3
 17846 1252 91       		.byte	0x91
 17847 1253 CC7E     		.sleb128 -180
 17848 1255 1A       		.uleb128 0x1a
 17849 1256 130B0000 		.4byte	.LASF237
 17850 125a 01       		.byte	0x1
 17851 125b 5F07     		.2byte	0x75f
 17852 125d BC000000 		.4byte	0xbc
 17853 1261 03       		.byte	0x3
 17854 1262 91       		.byte	0x91
 17855 1263 C87E     		.sleb128 -184
 17856 1265 1A       		.uleb128 0x1a
 17857 1266 24080000 		.4byte	.LASF238
 17858 126a 01       		.byte	0x1
 17859 126b 6007     		.2byte	0x760
 17860 126d BC000000 		.4byte	0xbc
 17861 1271 03       		.byte	0x3
 17862 1272 91       		.byte	0x91
 17863 1273 C47E     		.sleb128 -188
 17864 1275 1A       		.uleb128 0x1a
 17865 1276 D30C0000 		.4byte	.LASF239
 17866 127a 01       		.byte	0x1
 17867 127b 6107     		.2byte	0x761
 17868 127d BC000000 		.4byte	0xbc
 17869 1281 03       		.byte	0x3
 17870 1282 91       		.byte	0x91
 17871 1283 C07E     		.sleb128 -192
 17872 1285 00       		.byte	0
 17873 1286 1F       		.uleb128 0x1f
 17874 1287 B4270000 		.4byte	.LBB7
 17875 128b 90280000 		.4byte	.LBE7
 17876 128f F4120000 		.4byte	0x12f4
 17877 1293 1A       		.uleb128 0x1a
 17878 1294 74010000 		.4byte	.LASF234
 17879 1298 01       		.byte	0x1
 17880 1299 8407     		.2byte	0x784
 17881 129b BC000000 		.4byte	0xbc
 17882 129f 03       		.byte	0x3
 17883 12a0 91       		.byte	0x91
 17884 12a1 EC7E     		.sleb128 -148
 17885 12a3 1A       		.uleb128 0x1a
 17886 12a4 9F050000 		.4byte	.LASF235
 17887 12a8 01       		.byte	0x1
 17888 12a9 8507     		.2byte	0x785
 17889 12ab BC000000 		.4byte	0xbc
 17890 12af 03       		.byte	0x3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 461


 17891 12b0 91       		.byte	0x91
 17892 12b1 E87E     		.sleb128 -152
 17893 12b3 1A       		.uleb128 0x1a
 17894 12b4 6B0A0000 		.4byte	.LASF236
 17895 12b8 01       		.byte	0x1
 17896 12b9 8607     		.2byte	0x786
 17897 12bb BC000000 		.4byte	0xbc
 17898 12bf 03       		.byte	0x3
 17899 12c0 91       		.byte	0x91
 17900 12c1 E47E     		.sleb128 -156
 17901 12c3 1A       		.uleb128 0x1a
 17902 12c4 130B0000 		.4byte	.LASF237
 17903 12c8 01       		.byte	0x1
 17904 12c9 8707     		.2byte	0x787
 17905 12cb BC000000 		.4byte	0xbc
 17906 12cf 03       		.byte	0x3
 17907 12d0 91       		.byte	0x91
 17908 12d1 E07E     		.sleb128 -160
 17909 12d3 1A       		.uleb128 0x1a
 17910 12d4 24080000 		.4byte	.LASF238
 17911 12d8 01       		.byte	0x1
 17912 12d9 8807     		.2byte	0x788
 17913 12db BC000000 		.4byte	0xbc
 17914 12df 03       		.byte	0x3
 17915 12e0 91       		.byte	0x91
 17916 12e1 DC7E     		.sleb128 -164
 17917 12e3 1A       		.uleb128 0x1a
 17918 12e4 D30C0000 		.4byte	.LASF239
 17919 12e8 01       		.byte	0x1
 17920 12e9 8907     		.2byte	0x789
 17921 12eb BC000000 		.4byte	0xbc
 17922 12ef 03       		.byte	0x3
 17923 12f0 91       		.byte	0x91
 17924 12f1 D87E     		.sleb128 -168
 17925 12f3 00       		.byte	0
 17926 12f4 1F       		.uleb128 0x1f
 17927 12f5 F0310000 		.4byte	.LBB8
 17928 12f9 7A320000 		.4byte	.LBE8
 17929 12fd 12130000 		.4byte	0x1312
 17930 1301 1A       		.uleb128 0x1a
 17931 1302 9F030000 		.4byte	.LASF240
 17932 1306 01       		.byte	0x1
 17933 1307 3609     		.2byte	0x936
 17934 1309 9B000000 		.4byte	0x9b
 17935 130d 03       		.byte	0x3
 17936 130e 91       		.byte	0x91
 17937 130f BF7F     		.sleb128 -65
 17938 1311 00       		.byte	0
 17939 1312 1B       		.uleb128 0x1b
 17940 1313 B6460000 		.4byte	.LBB9
 17941 1317 72470000 		.4byte	.LBE9
 17942 131b 1A       		.uleb128 0x1a
 17943 131c EF0D0000 		.4byte	.LASF241
 17944 1320 01       		.byte	0x1
 17945 1321 0C0C     		.2byte	0xc0c
 17946 1323 7A000000 		.4byte	0x7a
 17947 1327 03       		.byte	0x3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 462


 17948 1328 91       		.byte	0x91
 17949 1329 BE7F     		.sleb128 -66
 17950 132b 00       		.byte	0
 17951 132c 00       		.byte	0
 17952 132d 20       		.uleb128 0x20
 17953 132e 01       		.byte	0x1
 17954 132f 7E010000 		.4byte	.LASF244
 17955 1333 01       		.byte	0x1
 17956 1334 9C12     		.2byte	0x129c
 17957 1336 01       		.byte	0x1
 17958 1337 7A000000 		.4byte	0x7a
 17959 133b 00000000 		.4byte	.LFB70
 17960 133f 1C000000 		.4byte	.LFE70
 17961 1343 FC020000 		.4byte	.LLST14
 17962 1347 01       		.byte	0x1
 17963 1348 19       		.uleb128 0x19
 17964 1349 01       		.byte	0x1
 17965 134a C6050000 		.4byte	.LASF242
 17966 134e 01       		.byte	0x1
 17967 134f AC12     		.2byte	0x12ac
 17968 1351 01       		.byte	0x1
 17969 1352 7A000000 		.4byte	0x7a
 17970 1356 00000000 		.4byte	.LFB71
 17971 135a 68000000 		.4byte	.LFE71
 17972 135e 28030000 		.4byte	.LLST15
 17973 1362 01       		.byte	0x1
 17974 1363 9F130000 		.4byte	0x139f
 17975 1367 18       		.uleb128 0x18
 17976 1368 65070000 		.4byte	.LASF198
 17977 136c 01       		.byte	0x1
 17978 136d AC12     		.2byte	0x12ac
 17979 136f 7A000000 		.4byte	0x7a
 17980 1373 02       		.byte	0x2
 17981 1374 91       		.byte	0x91
 17982 1375 6F       		.sleb128 -17
 17983 1376 1A       		.uleb128 0x1a
 17984 1377 11060000 		.4byte	.LASF201
 17985 137b 01       		.byte	0x1
 17986 137c AE12     		.2byte	0x12ae
 17987 137e D5000000 		.4byte	0xd5
 17988 1382 02       		.byte	0x2
 17989 1383 91       		.byte	0x91
 17990 1384 77       		.sleb128 -9
 17991 1385 1B       		.uleb128 0x1b
 17992 1386 26000000 		.4byte	.LBB10
 17993 138a 50000000 		.4byte	.LBE10
 17994 138e 1C       		.uleb128 0x1c
 17995 138f 5F5F7800 		.ascii	"__x\000"
 17996 1393 01       		.byte	0x1
 17997 1394 C612     		.2byte	0x12c6
 17998 1396 6C000000 		.4byte	0x6c
 17999 139a 02       		.byte	0x2
 18000 139b 91       		.byte	0x91
 18001 139c 70       		.sleb128 -16
 18002 139d 00       		.byte	0
 18003 139e 00       		.byte	0
 18004 139f 21       		.uleb128 0x21
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 463


 18005 13a0 01       		.byte	0x1
 18006 13a1 BC040000 		.4byte	.LASF243
 18007 13a5 01       		.byte	0x1
 18008 13a6 D212     		.2byte	0x12d2
 18009 13a8 01       		.byte	0x1
 18010 13a9 00000000 		.4byte	.LFB72
 18011 13ad 3A000000 		.4byte	.LFE72
 18012 13b1 60030000 		.4byte	.LLST16
 18013 13b5 01       		.byte	0x1
 18014 13b6 D9130000 		.4byte	0x13d9
 18015 13ba 22       		.uleb128 0x22
 18016 13bb 73747200 		.ascii	"str\000"
 18017 13bf 01       		.byte	0x1
 18018 13c0 D212     		.2byte	0x12d2
 18019 13c2 E3000000 		.4byte	0xe3
 18020 13c6 02       		.byte	0x2
 18021 13c7 91       		.byte	0x91
 18022 13c8 6C       		.sleb128 -20
 18023 13c9 1C       		.uleb128 0x1c
 18024 13ca 69647800 		.ascii	"idx\000"
 18025 13ce 01       		.byte	0x1
 18026 13cf D412     		.2byte	0x12d4
 18027 13d1 7A000000 		.4byte	0x7a
 18028 13d5 02       		.byte	0x2
 18029 13d6 91       		.byte	0x91
 18030 13d7 77       		.sleb128 -9
 18031 13d8 00       		.byte	0
 18032 13d9 23       		.uleb128 0x23
 18033 13da 01       		.byte	0x1
 18034 13db 3F0B0000 		.4byte	.LASF245
 18035 13df 01       		.byte	0x1
 18036 13e0 DC12     		.2byte	0x12dc
 18037 13e2 01       		.byte	0x1
 18038 13e3 7A000000 		.4byte	0x7a
 18039 13e7 00000000 		.4byte	.LFB73
 18040 13eb 10000000 		.4byte	.LFE73
 18041 13ef 98030000 		.4byte	.LLST17
 18042 13f3 01       		.byte	0x1
 18043 13f4 20       		.uleb128 0x20
 18044 13f5 01       		.byte	0x1
 18045 13f6 01070000 		.4byte	.LASF246
 18046 13fa 01       		.byte	0x1
 18047 13fb E512     		.2byte	0x12e5
 18048 13fd 01       		.byte	0x1
 18049 13fe B1000000 		.4byte	0xb1
 18050 1402 00000000 		.4byte	.LFB74
 18051 1406 54010000 		.4byte	.LFE74
 18052 140a C4030000 		.4byte	.LLST18
 18053 140e 01       		.byte	0x1
 18054 140f 24       		.uleb128 0x24
 18055 1410 20090000 		.4byte	.LASF247
 18056 1414 0A       		.byte	0xa
 18057 1415 2D       		.byte	0x2d
 18058 1416 E9000000 		.4byte	0xe9
 18059 141a 01       		.byte	0x1
 18060 141b 01       		.byte	0x1
 18061 141c 25       		.uleb128 0x25
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 464


 18062 141d E6070000 		.4byte	.LASF248
 18063 1421 0B       		.byte	0xb
 18064 1422 1606     		.2byte	0x616
 18065 1424 2A140000 		.4byte	0x142a
 18066 1428 01       		.byte	0x1
 18067 1429 01       		.byte	0x1
 18068 142a 26       		.uleb128 0x26
 18069 142b 45000000 		.4byte	0x45
 18070 142f 09       		.uleb128 0x9
 18071 1430 D5000000 		.4byte	0xd5
 18072 1434 3A140000 		.4byte	0x143a
 18073 1438 27       		.uleb128 0x27
 18074 1439 00       		.byte	0
 18075 143a 24       		.uleb128 0x24
 18076 143b C7060000 		.4byte	.LASF249
 18077 143f 0C       		.byte	0xc
 18078 1440 1D       		.byte	0x1d
 18079 1441 47140000 		.4byte	0x1447
 18080 1445 01       		.byte	0x1
 18081 1446 01       		.byte	0x1
 18082 1447 06       		.uleb128 0x6
 18083 1448 2F140000 		.4byte	0x142f
 18084 144c 24       		.uleb128 0x24
 18085 144d 39010000 		.4byte	.LASF250
 18086 1451 0C       		.byte	0xc
 18087 1452 22       		.byte	0x22
 18088 1453 59140000 		.4byte	0x1459
 18089 1457 01       		.byte	0x1
 18090 1458 01       		.byte	0x1
 18091 1459 06       		.uleb128 0x6
 18092 145a 2F140000 		.4byte	0x142f
 18093 145e 28       		.uleb128 0x28
 18094 145f A5020000 		.4byte	.LASF181
 18095 1463 09       		.byte	0x9
 18096 1464 97       		.byte	0x97
 18097 1465 7D0C0000 		.4byte	0xc7d
 18098 1469 01       		.byte	0x1
 18099 146a 05       		.byte	0x5
 18100 146b 03       		.byte	0x3
 18101 146c 00000000 		.4byte	TORQUESTAT
 18102 1470 24       		.uleb128 0x24
 18103 1471 F6010000 		.4byte	.LASF251
 18104 1475 01       		.byte	0x1
 18105 1476 29       		.byte	0x29
 18106 1477 39010000 		.4byte	0x139
 18107 147b 01       		.byte	0x1
 18108 147c 01       		.byte	0x1
 18109 147d 09       		.uleb128 0x9
 18110 147e A6000000 		.4byte	0xa6
 18111 1482 8D140000 		.4byte	0x148d
 18112 1486 0A       		.uleb128 0xa
 18113 1487 DC000000 		.4byte	0xdc
 18114 148b 08       		.byte	0x8
 18115 148c 00       		.byte	0
 18116 148d 24       		.uleb128 0x24
 18117 148e CC070000 		.4byte	.LASF252
 18118 1492 01       		.byte	0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 465


 18119 1493 2A       		.byte	0x2a
 18120 1494 7D140000 		.4byte	0x147d
 18121 1498 01       		.byte	0x1
 18122 1499 01       		.byte	0x1
 18123 149a 24       		.uleb128 0x24
 18124 149b 0B020000 		.4byte	.LASF253
 18125 149f 01       		.byte	0x1
 18126 14a0 2C       		.byte	0x2c
 18127 14a1 7A000000 		.4byte	0x7a
 18128 14a5 01       		.byte	0x1
 18129 14a6 01       		.byte	0x1
 18130 14a7 24       		.uleb128 0x24
 18131 14a8 BB030000 		.4byte	.LASF254
 18132 14ac 01       		.byte	0x1
 18133 14ad 30       		.byte	0x30
 18134 14ae BF010000 		.4byte	0x1bf
 18135 14b2 01       		.byte	0x1
 18136 14b3 01       		.byte	0x1
 18137 14b4 24       		.uleb128 0x24
 18138 14b5 F80D0000 		.4byte	.LASF255
 18139 14b9 01       		.byte	0x1
 18140 14ba 33       		.byte	0x33
 18141 14bb 080B0000 		.4byte	0xb08
 18142 14bf 01       		.byte	0x1
 18143 14c0 01       		.byte	0x1
 18144 14c1 24       		.uleb128 0x24
 18145 14c2 2D0C0000 		.4byte	.LASF256
 18146 14c6 01       		.byte	0x1
 18147 14c7 36       		.byte	0x36
 18148 14c8 BC000000 		.4byte	0xbc
 18149 14cc 01       		.byte	0x1
 18150 14cd 01       		.byte	0x1
 18151 14ce 24       		.uleb128 0x24
 18152 14cf E7080000 		.4byte	.LASF257
 18153 14d3 01       		.byte	0x1
 18154 14d4 3A       		.byte	0x3a
 18155 14d5 31080000 		.4byte	0x831
 18156 14d9 01       		.byte	0x1
 18157 14da 01       		.byte	0x1
 18158 14db 24       		.uleb128 0x24
 18159 14dc 2F0A0000 		.4byte	.LASF258
 18160 14e0 01       		.byte	0x1
 18161 14e1 3B       		.byte	0x3b
 18162 14e2 31080000 		.4byte	0x831
 18163 14e6 01       		.byte	0x1
 18164 14e7 01       		.byte	0x1
 18165 14e8 24       		.uleb128 0x24
 18166 14e9 E5020000 		.4byte	.LASF259
 18167 14ed 01       		.byte	0x1
 18168 14ee 3C       		.byte	0x3c
 18169 14ef 6D0D0000 		.4byte	0xd6d
 18170 14f3 01       		.byte	0x1
 18171 14f4 01       		.byte	0x1
 18172 14f5 24       		.uleb128 0x24
 18173 14f6 38080000 		.4byte	.LASF260
 18174 14fa 01       		.byte	0x1
 18175 14fb 3F       		.byte	0x3f
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 466


 18176 14fc 2D040000 		.4byte	0x42d
 18177 1500 01       		.byte	0x1
 18178 1501 01       		.byte	0x1
 18179 1502 24       		.uleb128 0x24
 18180 1503 8B0C0000 		.4byte	.LASF261
 18181 1507 01       		.byte	0x1
 18182 1508 40       		.byte	0x40
 18183 1509 2D040000 		.4byte	0x42d
 18184 150d 01       		.byte	0x1
 18185 150e 01       		.byte	0x1
 18186 150f 24       		.uleb128 0x24
 18187 1510 160A0000 		.4byte	.LASF262
 18188 1514 01       		.byte	0x1
 18189 1515 43       		.byte	0x43
 18190 1516 770B0000 		.4byte	0xb77
 18191 151a 01       		.byte	0x1
 18192 151b 01       		.byte	0x1
 18193 151c 24       		.uleb128 0x24
 18194 151d A00D0000 		.4byte	.LASF263
 18195 1521 01       		.byte	0x1
 18196 1522 44       		.byte	0x44
 18197 1523 770B0000 		.4byte	0xb77
 18198 1527 01       		.byte	0x1
 18199 1528 01       		.byte	0x1
 18200 1529 24       		.uleb128 0x24
 18201 152a 32050000 		.4byte	.LASF264
 18202 152e 01       		.byte	0x1
 18203 152f 47       		.byte	0x47
 18204 1530 770B0000 		.4byte	0xb77
 18205 1534 01       		.byte	0x1
 18206 1535 01       		.byte	0x1
 18207 1536 24       		.uleb128 0x24
 18208 1537 78070000 		.4byte	.LASF265
 18209 153b 01       		.byte	0x1
 18210 153c 48       		.byte	0x48
 18211 153d 770B0000 		.4byte	0xb77
 18212 1541 01       		.byte	0x1
 18213 1542 01       		.byte	0x1
 18214 1543 24       		.uleb128 0x24
 18215 1544 E3050000 		.4byte	.LASF266
 18216 1548 01       		.byte	0x1
 18217 1549 49       		.byte	0x49
 18218 154a 770B0000 		.4byte	0xb77
 18219 154e 01       		.byte	0x1
 18220 154f 01       		.byte	0x1
 18221 1550 24       		.uleb128 0x24
 18222 1551 E5010000 		.4byte	.LASF267
 18223 1555 01       		.byte	0x1
 18224 1556 4A       		.byte	0x4a
 18225 1557 770B0000 		.4byte	0xb77
 18226 155b 01       		.byte	0x1
 18227 155c 01       		.byte	0x1
 18228 155d 24       		.uleb128 0x24
 18229 155e AC040000 		.4byte	.LASF268
 18230 1562 01       		.byte	0x1
 18231 1563 4D       		.byte	0x4d
 18232 1564 7D0C0000 		.4byte	0xc7d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 467


 18233 1568 01       		.byte	0x1
 18234 1569 01       		.byte	0x1
 18235 156a 24       		.uleb128 0x24
 18236 156b 020D0000 		.4byte	.LASF269
 18237 156f 01       		.byte	0x1
 18238 1570 4E       		.byte	0x4e
 18239 1571 7D0C0000 		.4byte	0xc7d
 18240 1575 01       		.byte	0x1
 18241 1576 01       		.byte	0x1
 18242 1577 24       		.uleb128 0x24
 18243 1578 93060000 		.4byte	.LASF270
 18244 157c 01       		.byte	0x1
 18245 157d 55       		.byte	0x55
 18246 157e 450A0000 		.4byte	0xa45
 18247 1582 01       		.byte	0x1
 18248 1583 01       		.byte	0x1
 18249 1584 24       		.uleb128 0x24
 18250 1585 00000000 		.4byte	.LASF271
 18251 1589 01       		.byte	0x1
 18252 158a 56       		.byte	0x56
 18253 158b 450A0000 		.4byte	0xa45
 18254 158f 01       		.byte	0x1
 18255 1590 01       		.byte	0x1
 18256 1591 09       		.uleb128 0x9
 18257 1592 C40A0000 		.4byte	0xac4
 18258 1596 A1150000 		.4byte	0x15a1
 18259 159a 0A       		.uleb128 0xa
 18260 159b DC000000 		.4byte	0xdc
 18261 159f 20       		.byte	0x20
 18262 15a0 00       		.byte	0
 18263 15a1 29       		.uleb128 0x29
 18264 15a2 7100     		.ascii	"q\000"
 18265 15a4 01       		.byte	0x1
 18266 15a5 59       		.byte	0x59
 18267 15a6 91150000 		.4byte	0x1591
 18268 15aa 01       		.byte	0x1
 18269 15ab 01       		.byte	0x1
 18270 15ac 09       		.uleb128 0x9
 18271 15ad 7A000000 		.4byte	0x7a
 18272 15b1 BC150000 		.4byte	0x15bc
 18273 15b5 0A       		.uleb128 0xa
 18274 15b6 DC000000 		.4byte	0xdc
 18275 15ba 63       		.byte	0x63
 18276 15bb 00       		.byte	0
 18277 15bc 24       		.uleb128 0x24
 18278 15bd EA0C0000 		.4byte	.LASF272
 18279 15c1 01       		.byte	0x1
 18280 15c2 5C       		.byte	0x5c
 18281 15c3 AC150000 		.4byte	0x15ac
 18282 15c7 01       		.byte	0x1
 18283 15c8 01       		.byte	0x1
 18284 15c9 24       		.uleb128 0x24
 18285 15ca 720A0000 		.4byte	.LASF273
 18286 15ce 01       		.byte	0x1
 18287 15cf 5D       		.byte	0x5d
 18288 15d0 AC150000 		.4byte	0x15ac
 18289 15d4 01       		.byte	0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 468


 18290 15d5 01       		.byte	0x1
 18291 15d6 24       		.uleb128 0x24
 18292 15d7 98040000 		.4byte	.LASF274
 18293 15db 01       		.byte	0x1
 18294 15dc 60       		.byte	0x60
 18295 15dd AC150000 		.4byte	0x15ac
 18296 15e1 01       		.byte	0x1
 18297 15e2 01       		.byte	0x1
 18298 15e3 24       		.uleb128 0x24
 18299 15e4 CE0D0000 		.4byte	.LASF275
 18300 15e8 01       		.byte	0x1
 18301 15e9 63       		.byte	0x63
 18302 15ea 0E090000 		.4byte	0x90e
 18303 15ee 01       		.byte	0x1
 18304 15ef 01       		.byte	0x1
 18305 15f0 24       		.uleb128 0x24
 18306 15f1 26020000 		.4byte	.LASF276
 18307 15f5 01       		.byte	0x1
 18308 15f6 6B       		.byte	0x6b
 18309 15f7 48050000 		.4byte	0x548
 18310 15fb 01       		.byte	0x1
 18311 15fc 01       		.byte	0x1
 18312 15fd 24       		.uleb128 0x24
 18313 15fe 130D0000 		.4byte	.LASF277
 18314 1602 01       		.byte	0x1
 18315 1603 8A       		.byte	0x8a
 18316 1604 E7020000 		.4byte	0x2e7
 18317 1608 01       		.byte	0x1
 18318 1609 01       		.byte	0x1
 18319 160a 24       		.uleb128 0x24
 18320 160b 6A070000 		.4byte	.LASF278
 18321 160f 01       		.byte	0x1
 18322 1610 98       		.byte	0x98
 18323 1611 B1000000 		.4byte	0xb1
 18324 1615 01       		.byte	0x1
 18325 1616 01       		.byte	0x1
 18326 1617 24       		.uleb128 0x24
 18327 1618 37070000 		.4byte	.LASF279
 18328 161c 01       		.byte	0x1
 18329 161d 9B       		.byte	0x9b
 18330 161e 85000000 		.4byte	0x85
 18331 1622 01       		.byte	0x1
 18332 1623 01       		.byte	0x1
 18333 1624 24       		.uleb128 0x24
 18334 1625 3B090000 		.4byte	.LASF280
 18335 1629 01       		.byte	0x1
 18336 162a 9C       		.byte	0x9c
 18337 162b 85000000 		.4byte	0x85
 18338 162f 01       		.byte	0x1
 18339 1630 01       		.byte	0x1
 18340 1631 09       		.uleb128 0x9
 18341 1632 7A000000 		.4byte	0x7a
 18342 1636 42160000 		.4byte	0x1642
 18343 163a 2A       		.uleb128 0x2a
 18344 163b DC000000 		.4byte	0xdc
 18345 163f 040D     		.2byte	0xd04
 18346 1641 00       		.byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 469


 18347 1642 24       		.uleb128 0x24
 18348 1643 42040000 		.4byte	.LASF281
 18349 1647 01       		.byte	0x1
 18350 1648 A7       		.byte	0xa7
 18351 1649 4F160000 		.4byte	0x164f
 18352 164d 01       		.byte	0x1
 18353 164e 01       		.byte	0x1
 18354 164f 06       		.uleb128 0x6
 18355 1650 31160000 		.4byte	0x1631
 18356 1654 24       		.uleb128 0x24
 18357 1655 5D080000 		.4byte	.LASF282
 18358 1659 01       		.byte	0x1
 18359 165a A8       		.byte	0xa8
 18360 165b 61160000 		.4byte	0x1661
 18361 165f 01       		.byte	0x1
 18362 1660 01       		.byte	0x1
 18363 1661 06       		.uleb128 0x6
 18364 1662 31160000 		.4byte	0x1631
 18365 1666 28       		.uleb128 0x28
 18366 1667 B1010000 		.4byte	.LASF283
 18367 166b 01       		.byte	0x1
 18368 166c AB       		.byte	0xab
 18369 166d 4A0F0000 		.4byte	0xf4a
 18370 1671 01       		.byte	0x1
 18371 1672 05       		.byte	0x5
 18372 1673 03       		.byte	0x3
 18373 1674 00000000 		.4byte	userInputBuffer
 18374 1678 28       		.uleb128 0x28
 18375 1679 15070000 		.4byte	.LASF284
 18376 167d 01       		.byte	0x1
 18377 167e AC       		.byte	0xac
 18378 167f 49090000 		.4byte	0x949
 18379 1683 01       		.byte	0x1
 18380 1684 05       		.byte	0x5
 18381 1685 03       		.byte	0x3
 18382 1686 00000000 		.4byte	actual_cmd
 18383 168a 28       		.uleb128 0x28
 18384 168b 11090000 		.4byte	.LASF285
 18385 168f 01       		.byte	0x1
 18386 1690 AD       		.byte	0xad
 18387 1691 7A000000 		.4byte	0x7a
 18388 1695 01       		.byte	0x1
 18389 1696 05       		.byte	0x5
 18390 1697 03       		.byte	0x3
 18391 1698 00000000 		.4byte	USB_Check_prev
 18392 169c 28       		.uleb128 0x28
 18393 169d 680B0000 		.4byte	.LASF286
 18394 16a1 01       		.byte	0x1
 18395 16a2 AE       		.byte	0xae
 18396 16a3 8E090000 		.4byte	0x98e
 18397 16a7 01       		.byte	0x1
 18398 16a8 05       		.byte	0x5
 18399 16a9 03       		.byte	0x3
 18400 16aa 00000000 		.4byte	slegenda
 18401 16ae 00       		.byte	0
 18402              		.section	.debug_abbrev,"",%progbits
 18403              	.Ldebug_abbrev0:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 470


 18404 0000 01       		.uleb128 0x1
 18405 0001 11       		.uleb128 0x11
 18406 0002 01       		.byte	0x1
 18407 0003 25       		.uleb128 0x25
 18408 0004 0E       		.uleb128 0xe
 18409 0005 13       		.uleb128 0x13
 18410 0006 0B       		.uleb128 0xb
 18411 0007 03       		.uleb128 0x3
 18412 0008 0E       		.uleb128 0xe
 18413 0009 1B       		.uleb128 0x1b
 18414 000a 0E       		.uleb128 0xe
 18415 000b 55       		.uleb128 0x55
 18416 000c 06       		.uleb128 0x6
 18417 000d 11       		.uleb128 0x11
 18418 000e 01       		.uleb128 0x1
 18419 000f 52       		.uleb128 0x52
 18420 0010 01       		.uleb128 0x1
 18421 0011 10       		.uleb128 0x10
 18422 0012 06       		.uleb128 0x6
 18423 0013 00       		.byte	0
 18424 0014 00       		.byte	0
 18425 0015 02       		.uleb128 0x2
 18426 0016 24       		.uleb128 0x24
 18427 0017 00       		.byte	0
 18428 0018 0B       		.uleb128 0xb
 18429 0019 0B       		.uleb128 0xb
 18430 001a 3E       		.uleb128 0x3e
 18431 001b 0B       		.uleb128 0xb
 18432 001c 03       		.uleb128 0x3
 18433 001d 0E       		.uleb128 0xe
 18434 001e 00       		.byte	0
 18435 001f 00       		.byte	0
 18436 0020 03       		.uleb128 0x3
 18437 0021 16       		.uleb128 0x16
 18438 0022 00       		.byte	0
 18439 0023 03       		.uleb128 0x3
 18440 0024 0E       		.uleb128 0xe
 18441 0025 3A       		.uleb128 0x3a
 18442 0026 0B       		.uleb128 0xb
 18443 0027 3B       		.uleb128 0x3b
 18444 0028 0B       		.uleb128 0xb
 18445 0029 49       		.uleb128 0x49
 18446 002a 13       		.uleb128 0x13
 18447 002b 00       		.byte	0
 18448 002c 00       		.byte	0
 18449 002d 04       		.uleb128 0x4
 18450 002e 24       		.uleb128 0x24
 18451 002f 00       		.byte	0
 18452 0030 0B       		.uleb128 0xb
 18453 0031 0B       		.uleb128 0xb
 18454 0032 3E       		.uleb128 0x3e
 18455 0033 0B       		.uleb128 0xb
 18456 0034 03       		.uleb128 0x3
 18457 0035 08       		.uleb128 0x8
 18458 0036 00       		.byte	0
 18459 0037 00       		.byte	0
 18460 0038 05       		.uleb128 0x5
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 471


 18461 0039 0F       		.uleb128 0xf
 18462 003a 00       		.byte	0
 18463 003b 0B       		.uleb128 0xb
 18464 003c 0B       		.uleb128 0xb
 18465 003d 49       		.uleb128 0x49
 18466 003e 13       		.uleb128 0x13
 18467 003f 00       		.byte	0
 18468 0040 00       		.byte	0
 18469 0041 06       		.uleb128 0x6
 18470 0042 26       		.uleb128 0x26
 18471 0043 00       		.byte	0
 18472 0044 49       		.uleb128 0x49
 18473 0045 13       		.uleb128 0x13
 18474 0046 00       		.byte	0
 18475 0047 00       		.byte	0
 18476 0048 07       		.uleb128 0x7
 18477 0049 17       		.uleb128 0x17
 18478 004a 01       		.byte	0x1
 18479 004b 0B       		.uleb128 0xb
 18480 004c 0B       		.uleb128 0xb
 18481 004d 3A       		.uleb128 0x3a
 18482 004e 0B       		.uleb128 0xb
 18483 004f 3B       		.uleb128 0x3b
 18484 0050 05       		.uleb128 0x5
 18485 0051 01       		.uleb128 0x1
 18486 0052 13       		.uleb128 0x13
 18487 0053 00       		.byte	0
 18488 0054 00       		.byte	0
 18489 0055 08       		.uleb128 0x8
 18490 0056 0D       		.uleb128 0xd
 18491 0057 00       		.byte	0
 18492 0058 03       		.uleb128 0x3
 18493 0059 0E       		.uleb128 0xe
 18494 005a 3A       		.uleb128 0x3a
 18495 005b 0B       		.uleb128 0xb
 18496 005c 3B       		.uleb128 0x3b
 18497 005d 05       		.uleb128 0x5
 18498 005e 49       		.uleb128 0x49
 18499 005f 13       		.uleb128 0x13
 18500 0060 00       		.byte	0
 18501 0061 00       		.byte	0
 18502 0062 09       		.uleb128 0x9
 18503 0063 01       		.uleb128 0x1
 18504 0064 01       		.byte	0x1
 18505 0065 49       		.uleb128 0x49
 18506 0066 13       		.uleb128 0x13
 18507 0067 01       		.uleb128 0x1
 18508 0068 13       		.uleb128 0x13
 18509 0069 00       		.byte	0
 18510 006a 00       		.byte	0
 18511 006b 0A       		.uleb128 0xa
 18512 006c 21       		.uleb128 0x21
 18513 006d 00       		.byte	0
 18514 006e 49       		.uleb128 0x49
 18515 006f 13       		.uleb128 0x13
 18516 0070 2F       		.uleb128 0x2f
 18517 0071 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 472


 18518 0072 00       		.byte	0
 18519 0073 00       		.byte	0
 18520 0074 0B       		.uleb128 0xb
 18521 0075 16       		.uleb128 0x16
 18522 0076 00       		.byte	0
 18523 0077 03       		.uleb128 0x3
 18524 0078 0E       		.uleb128 0xe
 18525 0079 3A       		.uleb128 0x3a
 18526 007a 0B       		.uleb128 0xb
 18527 007b 3B       		.uleb128 0x3b
 18528 007c 05       		.uleb128 0x5
 18529 007d 49       		.uleb128 0x49
 18530 007e 13       		.uleb128 0x13
 18531 007f 00       		.byte	0
 18532 0080 00       		.byte	0
 18533 0081 0C       		.uleb128 0xc
 18534 0082 13       		.uleb128 0x13
 18535 0083 01       		.byte	0x1
 18536 0084 03       		.uleb128 0x3
 18537 0085 0E       		.uleb128 0xe
 18538 0086 0B       		.uleb128 0xb
 18539 0087 0B       		.uleb128 0xb
 18540 0088 3A       		.uleb128 0x3a
 18541 0089 0B       		.uleb128 0xb
 18542 008a 3B       		.uleb128 0x3b
 18543 008b 05       		.uleb128 0x5
 18544 008c 01       		.uleb128 0x1
 18545 008d 13       		.uleb128 0x13
 18546 008e 00       		.byte	0
 18547 008f 00       		.byte	0
 18548 0090 0D       		.uleb128 0xd
 18549 0091 0D       		.uleb128 0xd
 18550 0092 00       		.byte	0
 18551 0093 03       		.uleb128 0x3
 18552 0094 0E       		.uleb128 0xe
 18553 0095 3A       		.uleb128 0x3a
 18554 0096 0B       		.uleb128 0xb
 18555 0097 3B       		.uleb128 0x3b
 18556 0098 05       		.uleb128 0x5
 18557 0099 49       		.uleb128 0x49
 18558 009a 13       		.uleb128 0x13
 18559 009b 38       		.uleb128 0x38
 18560 009c 0A       		.uleb128 0xa
 18561 009d 00       		.byte	0
 18562 009e 00       		.byte	0
 18563 009f 0E       		.uleb128 0xe
 18564 00a0 0D       		.uleb128 0xd
 18565 00a1 00       		.byte	0
 18566 00a2 03       		.uleb128 0x3
 18567 00a3 08       		.uleb128 0x8
 18568 00a4 3A       		.uleb128 0x3a
 18569 00a5 0B       		.uleb128 0xb
 18570 00a6 3B       		.uleb128 0x3b
 18571 00a7 05       		.uleb128 0x5
 18572 00a8 49       		.uleb128 0x49
 18573 00a9 13       		.uleb128 0x13
 18574 00aa 38       		.uleb128 0x38
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 473


 18575 00ab 0A       		.uleb128 0xa
 18576 00ac 00       		.byte	0
 18577 00ad 00       		.byte	0
 18578 00ae 0F       		.uleb128 0xf
 18579 00af 13       		.uleb128 0x13
 18580 00b0 01       		.byte	0x1
 18581 00b1 03       		.uleb128 0x3
 18582 00b2 0E       		.uleb128 0xe
 18583 00b3 0B       		.uleb128 0xb
 18584 00b4 0B       		.uleb128 0xb
 18585 00b5 3A       		.uleb128 0x3a
 18586 00b6 0B       		.uleb128 0xb
 18587 00b7 3B       		.uleb128 0x3b
 18588 00b8 0B       		.uleb128 0xb
 18589 00b9 01       		.uleb128 0x1
 18590 00ba 13       		.uleb128 0x13
 18591 00bb 00       		.byte	0
 18592 00bc 00       		.byte	0
 18593 00bd 10       		.uleb128 0x10
 18594 00be 0D       		.uleb128 0xd
 18595 00bf 00       		.byte	0
 18596 00c0 03       		.uleb128 0x3
 18597 00c1 0E       		.uleb128 0xe
 18598 00c2 3A       		.uleb128 0x3a
 18599 00c3 0B       		.uleb128 0xb
 18600 00c4 3B       		.uleb128 0x3b
 18601 00c5 0B       		.uleb128 0xb
 18602 00c6 49       		.uleb128 0x49
 18603 00c7 13       		.uleb128 0x13
 18604 00c8 38       		.uleb128 0x38
 18605 00c9 0A       		.uleb128 0xa
 18606 00ca 00       		.byte	0
 18607 00cb 00       		.byte	0
 18608 00cc 11       		.uleb128 0x11
 18609 00cd 13       		.uleb128 0x13
 18610 00ce 01       		.byte	0x1
 18611 00cf 0B       		.uleb128 0xb
 18612 00d0 0B       		.uleb128 0xb
 18613 00d1 3A       		.uleb128 0x3a
 18614 00d2 0B       		.uleb128 0xb
 18615 00d3 3B       		.uleb128 0x3b
 18616 00d4 0B       		.uleb128 0xb
 18617 00d5 01       		.uleb128 0x1
 18618 00d6 13       		.uleb128 0x13
 18619 00d7 00       		.byte	0
 18620 00d8 00       		.byte	0
 18621 00d9 12       		.uleb128 0x12
 18622 00da 13       		.uleb128 0x13
 18623 00db 01       		.byte	0x1
 18624 00dc 03       		.uleb128 0x3
 18625 00dd 08       		.uleb128 0x8
 18626 00de 0B       		.uleb128 0xb
 18627 00df 0B       		.uleb128 0xb
 18628 00e0 3A       		.uleb128 0x3a
 18629 00e1 0B       		.uleb128 0xb
 18630 00e2 3B       		.uleb128 0x3b
 18631 00e3 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 474


 18632 00e4 01       		.uleb128 0x1
 18633 00e5 13       		.uleb128 0x13
 18634 00e6 00       		.byte	0
 18635 00e7 00       		.byte	0
 18636 00e8 13       		.uleb128 0x13
 18637 00e9 0D       		.uleb128 0xd
 18638 00ea 00       		.byte	0
 18639 00eb 03       		.uleb128 0x3
 18640 00ec 08       		.uleb128 0x8
 18641 00ed 3A       		.uleb128 0x3a
 18642 00ee 0B       		.uleb128 0xb
 18643 00ef 3B       		.uleb128 0x3b
 18644 00f0 0B       		.uleb128 0xb
 18645 00f1 49       		.uleb128 0x49
 18646 00f2 13       		.uleb128 0x13
 18647 00f3 38       		.uleb128 0x38
 18648 00f4 0A       		.uleb128 0xa
 18649 00f5 00       		.byte	0
 18650 00f6 00       		.byte	0
 18651 00f7 14       		.uleb128 0x14
 18652 00f8 2E       		.uleb128 0x2e
 18653 00f9 01       		.byte	0x1
 18654 00fa 3F       		.uleb128 0x3f
 18655 00fb 0C       		.uleb128 0xc
 18656 00fc 03       		.uleb128 0x3
 18657 00fd 0E       		.uleb128 0xe
 18658 00fe 3A       		.uleb128 0x3a
 18659 00ff 0B       		.uleb128 0xb
 18660 0100 3B       		.uleb128 0x3b
 18661 0101 0B       		.uleb128 0xb
 18662 0102 27       		.uleb128 0x27
 18663 0103 0C       		.uleb128 0xc
 18664 0104 11       		.uleb128 0x11
 18665 0105 01       		.uleb128 0x1
 18666 0106 12       		.uleb128 0x12
 18667 0107 01       		.uleb128 0x1
 18668 0108 40       		.uleb128 0x40
 18669 0109 06       		.uleb128 0x6
 18670 010a 9642     		.uleb128 0x2116
 18671 010c 0C       		.uleb128 0xc
 18672 010d 01       		.uleb128 0x1
 18673 010e 13       		.uleb128 0x13
 18674 010f 00       		.byte	0
 18675 0110 00       		.byte	0
 18676 0111 15       		.uleb128 0x15
 18677 0112 05       		.uleb128 0x5
 18678 0113 00       		.byte	0
 18679 0114 03       		.uleb128 0x3
 18680 0115 0E       		.uleb128 0xe
 18681 0116 3A       		.uleb128 0x3a
 18682 0117 0B       		.uleb128 0xb
 18683 0118 3B       		.uleb128 0x3b
 18684 0119 0B       		.uleb128 0xb
 18685 011a 49       		.uleb128 0x49
 18686 011b 13       		.uleb128 0x13
 18687 011c 02       		.uleb128 0x2
 18688 011d 0A       		.uleb128 0xa
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 475


 18689 011e 00       		.byte	0
 18690 011f 00       		.byte	0
 18691 0120 16       		.uleb128 0x16
 18692 0121 2E       		.uleb128 0x2e
 18693 0122 00       		.byte	0
 18694 0123 3F       		.uleb128 0x3f
 18695 0124 0C       		.uleb128 0xc
 18696 0125 03       		.uleb128 0x3
 18697 0126 0E       		.uleb128 0xe
 18698 0127 3A       		.uleb128 0x3a
 18699 0128 0B       		.uleb128 0xb
 18700 0129 3B       		.uleb128 0x3b
 18701 012a 05       		.uleb128 0x5
 18702 012b 27       		.uleb128 0x27
 18703 012c 0C       		.uleb128 0xc
 18704 012d 11       		.uleb128 0x11
 18705 012e 01       		.uleb128 0x1
 18706 012f 12       		.uleb128 0x12
 18707 0130 01       		.uleb128 0x1
 18708 0131 40       		.uleb128 0x40
 18709 0132 06       		.uleb128 0x6
 18710 0133 9642     		.uleb128 0x2116
 18711 0135 0C       		.uleb128 0xc
 18712 0136 00       		.byte	0
 18713 0137 00       		.byte	0
 18714 0138 17       		.uleb128 0x17
 18715 0139 2E       		.uleb128 0x2e
 18716 013a 01       		.byte	0x1
 18717 013b 3F       		.uleb128 0x3f
 18718 013c 0C       		.uleb128 0xc
 18719 013d 03       		.uleb128 0x3
 18720 013e 0E       		.uleb128 0xe
 18721 013f 3A       		.uleb128 0x3a
 18722 0140 0B       		.uleb128 0xb
 18723 0141 3B       		.uleb128 0x3b
 18724 0142 05       		.uleb128 0x5
 18725 0143 27       		.uleb128 0x27
 18726 0144 0C       		.uleb128 0xc
 18727 0145 11       		.uleb128 0x11
 18728 0146 01       		.uleb128 0x1
 18729 0147 12       		.uleb128 0x12
 18730 0148 01       		.uleb128 0x1
 18731 0149 40       		.uleb128 0x40
 18732 014a 06       		.uleb128 0x6
 18733 014b 9642     		.uleb128 0x2116
 18734 014d 0C       		.uleb128 0xc
 18735 014e 01       		.uleb128 0x1
 18736 014f 13       		.uleb128 0x13
 18737 0150 00       		.byte	0
 18738 0151 00       		.byte	0
 18739 0152 18       		.uleb128 0x18
 18740 0153 05       		.uleb128 0x5
 18741 0154 00       		.byte	0
 18742 0155 03       		.uleb128 0x3
 18743 0156 0E       		.uleb128 0xe
 18744 0157 3A       		.uleb128 0x3a
 18745 0158 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 476


 18746 0159 3B       		.uleb128 0x3b
 18747 015a 05       		.uleb128 0x5
 18748 015b 49       		.uleb128 0x49
 18749 015c 13       		.uleb128 0x13
 18750 015d 02       		.uleb128 0x2
 18751 015e 0A       		.uleb128 0xa
 18752 015f 00       		.byte	0
 18753 0160 00       		.byte	0
 18754 0161 19       		.uleb128 0x19
 18755 0162 2E       		.uleb128 0x2e
 18756 0163 01       		.byte	0x1
 18757 0164 3F       		.uleb128 0x3f
 18758 0165 0C       		.uleb128 0xc
 18759 0166 03       		.uleb128 0x3
 18760 0167 0E       		.uleb128 0xe
 18761 0168 3A       		.uleb128 0x3a
 18762 0169 0B       		.uleb128 0xb
 18763 016a 3B       		.uleb128 0x3b
 18764 016b 05       		.uleb128 0x5
 18765 016c 27       		.uleb128 0x27
 18766 016d 0C       		.uleb128 0xc
 18767 016e 49       		.uleb128 0x49
 18768 016f 13       		.uleb128 0x13
 18769 0170 11       		.uleb128 0x11
 18770 0171 01       		.uleb128 0x1
 18771 0172 12       		.uleb128 0x12
 18772 0173 01       		.uleb128 0x1
 18773 0174 40       		.uleb128 0x40
 18774 0175 06       		.uleb128 0x6
 18775 0176 9642     		.uleb128 0x2116
 18776 0178 0C       		.uleb128 0xc
 18777 0179 01       		.uleb128 0x1
 18778 017a 13       		.uleb128 0x13
 18779 017b 00       		.byte	0
 18780 017c 00       		.byte	0
 18781 017d 1A       		.uleb128 0x1a
 18782 017e 34       		.uleb128 0x34
 18783 017f 00       		.byte	0
 18784 0180 03       		.uleb128 0x3
 18785 0181 0E       		.uleb128 0xe
 18786 0182 3A       		.uleb128 0x3a
 18787 0183 0B       		.uleb128 0xb
 18788 0184 3B       		.uleb128 0x3b
 18789 0185 05       		.uleb128 0x5
 18790 0186 49       		.uleb128 0x49
 18791 0187 13       		.uleb128 0x13
 18792 0188 02       		.uleb128 0x2
 18793 0189 0A       		.uleb128 0xa
 18794 018a 00       		.byte	0
 18795 018b 00       		.byte	0
 18796 018c 1B       		.uleb128 0x1b
 18797 018d 0B       		.uleb128 0xb
 18798 018e 01       		.byte	0x1
 18799 018f 11       		.uleb128 0x11
 18800 0190 01       		.uleb128 0x1
 18801 0191 12       		.uleb128 0x12
 18802 0192 01       		.uleb128 0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 477


 18803 0193 00       		.byte	0
 18804 0194 00       		.byte	0
 18805 0195 1C       		.uleb128 0x1c
 18806 0196 34       		.uleb128 0x34
 18807 0197 00       		.byte	0
 18808 0198 03       		.uleb128 0x3
 18809 0199 08       		.uleb128 0x8
 18810 019a 3A       		.uleb128 0x3a
 18811 019b 0B       		.uleb128 0xb
 18812 019c 3B       		.uleb128 0x3b
 18813 019d 05       		.uleb128 0x5
 18814 019e 49       		.uleb128 0x49
 18815 019f 13       		.uleb128 0x13
 18816 01a0 02       		.uleb128 0x2
 18817 01a1 0A       		.uleb128 0xa
 18818 01a2 00       		.byte	0
 18819 01a3 00       		.byte	0
 18820 01a4 1D       		.uleb128 0x1d
 18821 01a5 2E       		.uleb128 0x2e
 18822 01a6 01       		.byte	0x1
 18823 01a7 3F       		.uleb128 0x3f
 18824 01a8 0C       		.uleb128 0xc
 18825 01a9 03       		.uleb128 0x3
 18826 01aa 0E       		.uleb128 0xe
 18827 01ab 3A       		.uleb128 0x3a
 18828 01ac 0B       		.uleb128 0xb
 18829 01ad 3B       		.uleb128 0x3b
 18830 01ae 05       		.uleb128 0x5
 18831 01af 49       		.uleb128 0x49
 18832 01b0 13       		.uleb128 0x13
 18833 01b1 11       		.uleb128 0x11
 18834 01b2 01       		.uleb128 0x1
 18835 01b3 12       		.uleb128 0x12
 18836 01b4 01       		.uleb128 0x1
 18837 01b5 40       		.uleb128 0x40
 18838 01b6 06       		.uleb128 0x6
 18839 01b7 9642     		.uleb128 0x2116
 18840 01b9 0C       		.uleb128 0xc
 18841 01ba 01       		.uleb128 0x1
 18842 01bb 13       		.uleb128 0x13
 18843 01bc 00       		.byte	0
 18844 01bd 00       		.byte	0
 18845 01be 1E       		.uleb128 0x1e
 18846 01bf 0A       		.uleb128 0xa
 18847 01c0 00       		.byte	0
 18848 01c1 03       		.uleb128 0x3
 18849 01c2 0E       		.uleb128 0xe
 18850 01c3 3A       		.uleb128 0x3a
 18851 01c4 0B       		.uleb128 0xb
 18852 01c5 3B       		.uleb128 0x3b
 18853 01c6 05       		.uleb128 0x5
 18854 01c7 11       		.uleb128 0x11
 18855 01c8 01       		.uleb128 0x1
 18856 01c9 00       		.byte	0
 18857 01ca 00       		.byte	0
 18858 01cb 1F       		.uleb128 0x1f
 18859 01cc 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 478


 18860 01cd 01       		.byte	0x1
 18861 01ce 11       		.uleb128 0x11
 18862 01cf 01       		.uleb128 0x1
 18863 01d0 12       		.uleb128 0x12
 18864 01d1 01       		.uleb128 0x1
 18865 01d2 01       		.uleb128 0x1
 18866 01d3 13       		.uleb128 0x13
 18867 01d4 00       		.byte	0
 18868 01d5 00       		.byte	0
 18869 01d6 20       		.uleb128 0x20
 18870 01d7 2E       		.uleb128 0x2e
 18871 01d8 00       		.byte	0
 18872 01d9 3F       		.uleb128 0x3f
 18873 01da 0C       		.uleb128 0xc
 18874 01db 03       		.uleb128 0x3
 18875 01dc 0E       		.uleb128 0xe
 18876 01dd 3A       		.uleb128 0x3a
 18877 01de 0B       		.uleb128 0xb
 18878 01df 3B       		.uleb128 0x3b
 18879 01e0 05       		.uleb128 0x5
 18880 01e1 27       		.uleb128 0x27
 18881 01e2 0C       		.uleb128 0xc
 18882 01e3 49       		.uleb128 0x49
 18883 01e4 13       		.uleb128 0x13
 18884 01e5 11       		.uleb128 0x11
 18885 01e6 01       		.uleb128 0x1
 18886 01e7 12       		.uleb128 0x12
 18887 01e8 01       		.uleb128 0x1
 18888 01e9 40       		.uleb128 0x40
 18889 01ea 06       		.uleb128 0x6
 18890 01eb 9642     		.uleb128 0x2116
 18891 01ed 0C       		.uleb128 0xc
 18892 01ee 00       		.byte	0
 18893 01ef 00       		.byte	0
 18894 01f0 21       		.uleb128 0x21
 18895 01f1 2E       		.uleb128 0x2e
 18896 01f2 01       		.byte	0x1
 18897 01f3 3F       		.uleb128 0x3f
 18898 01f4 0C       		.uleb128 0xc
 18899 01f5 03       		.uleb128 0x3
 18900 01f6 0E       		.uleb128 0xe
 18901 01f7 3A       		.uleb128 0x3a
 18902 01f8 0B       		.uleb128 0xb
 18903 01f9 3B       		.uleb128 0x3b
 18904 01fa 05       		.uleb128 0x5
 18905 01fb 27       		.uleb128 0x27
 18906 01fc 0C       		.uleb128 0xc
 18907 01fd 11       		.uleb128 0x11
 18908 01fe 01       		.uleb128 0x1
 18909 01ff 12       		.uleb128 0x12
 18910 0200 01       		.uleb128 0x1
 18911 0201 40       		.uleb128 0x40
 18912 0202 06       		.uleb128 0x6
 18913 0203 9742     		.uleb128 0x2117
 18914 0205 0C       		.uleb128 0xc
 18915 0206 01       		.uleb128 0x1
 18916 0207 13       		.uleb128 0x13
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 479


 18917 0208 00       		.byte	0
 18918 0209 00       		.byte	0
 18919 020a 22       		.uleb128 0x22
 18920 020b 05       		.uleb128 0x5
 18921 020c 00       		.byte	0
 18922 020d 03       		.uleb128 0x3
 18923 020e 08       		.uleb128 0x8
 18924 020f 3A       		.uleb128 0x3a
 18925 0210 0B       		.uleb128 0xb
 18926 0211 3B       		.uleb128 0x3b
 18927 0212 05       		.uleb128 0x5
 18928 0213 49       		.uleb128 0x49
 18929 0214 13       		.uleb128 0x13
 18930 0215 02       		.uleb128 0x2
 18931 0216 0A       		.uleb128 0xa
 18932 0217 00       		.byte	0
 18933 0218 00       		.byte	0
 18934 0219 23       		.uleb128 0x23
 18935 021a 2E       		.uleb128 0x2e
 18936 021b 00       		.byte	0
 18937 021c 3F       		.uleb128 0x3f
 18938 021d 0C       		.uleb128 0xc
 18939 021e 03       		.uleb128 0x3
 18940 021f 0E       		.uleb128 0xe
 18941 0220 3A       		.uleb128 0x3a
 18942 0221 0B       		.uleb128 0xb
 18943 0222 3B       		.uleb128 0x3b
 18944 0223 05       		.uleb128 0x5
 18945 0224 27       		.uleb128 0x27
 18946 0225 0C       		.uleb128 0xc
 18947 0226 49       		.uleb128 0x49
 18948 0227 13       		.uleb128 0x13
 18949 0228 11       		.uleb128 0x11
 18950 0229 01       		.uleb128 0x1
 18951 022a 12       		.uleb128 0x12
 18952 022b 01       		.uleb128 0x1
 18953 022c 40       		.uleb128 0x40
 18954 022d 06       		.uleb128 0x6
 18955 022e 9742     		.uleb128 0x2117
 18956 0230 0C       		.uleb128 0xc
 18957 0231 00       		.byte	0
 18958 0232 00       		.byte	0
 18959 0233 24       		.uleb128 0x24
 18960 0234 34       		.uleb128 0x34
 18961 0235 00       		.byte	0
 18962 0236 03       		.uleb128 0x3
 18963 0237 0E       		.uleb128 0xe
 18964 0238 3A       		.uleb128 0x3a
 18965 0239 0B       		.uleb128 0xb
 18966 023a 3B       		.uleb128 0x3b
 18967 023b 0B       		.uleb128 0xb
 18968 023c 49       		.uleb128 0x49
 18969 023d 13       		.uleb128 0x13
 18970 023e 3F       		.uleb128 0x3f
 18971 023f 0C       		.uleb128 0xc
 18972 0240 3C       		.uleb128 0x3c
 18973 0241 0C       		.uleb128 0xc
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 480


 18974 0242 00       		.byte	0
 18975 0243 00       		.byte	0
 18976 0244 25       		.uleb128 0x25
 18977 0245 34       		.uleb128 0x34
 18978 0246 00       		.byte	0
 18979 0247 03       		.uleb128 0x3
 18980 0248 0E       		.uleb128 0xe
 18981 0249 3A       		.uleb128 0x3a
 18982 024a 0B       		.uleb128 0xb
 18983 024b 3B       		.uleb128 0x3b
 18984 024c 05       		.uleb128 0x5
 18985 024d 49       		.uleb128 0x49
 18986 024e 13       		.uleb128 0x13
 18987 024f 3F       		.uleb128 0x3f
 18988 0250 0C       		.uleb128 0xc
 18989 0251 3C       		.uleb128 0x3c
 18990 0252 0C       		.uleb128 0xc
 18991 0253 00       		.byte	0
 18992 0254 00       		.byte	0
 18993 0255 26       		.uleb128 0x26
 18994 0256 35       		.uleb128 0x35
 18995 0257 00       		.byte	0
 18996 0258 49       		.uleb128 0x49
 18997 0259 13       		.uleb128 0x13
 18998 025a 00       		.byte	0
 18999 025b 00       		.byte	0
 19000 025c 27       		.uleb128 0x27
 19001 025d 21       		.uleb128 0x21
 19002 025e 00       		.byte	0
 19003 025f 00       		.byte	0
 19004 0260 00       		.byte	0
 19005 0261 28       		.uleb128 0x28
 19006 0262 34       		.uleb128 0x34
 19007 0263 00       		.byte	0
 19008 0264 03       		.uleb128 0x3
 19009 0265 0E       		.uleb128 0xe
 19010 0266 3A       		.uleb128 0x3a
 19011 0267 0B       		.uleb128 0xb
 19012 0268 3B       		.uleb128 0x3b
 19013 0269 0B       		.uleb128 0xb
 19014 026a 49       		.uleb128 0x49
 19015 026b 13       		.uleb128 0x13
 19016 026c 3F       		.uleb128 0x3f
 19017 026d 0C       		.uleb128 0xc
 19018 026e 02       		.uleb128 0x2
 19019 026f 0A       		.uleb128 0xa
 19020 0270 00       		.byte	0
 19021 0271 00       		.byte	0
 19022 0272 29       		.uleb128 0x29
 19023 0273 34       		.uleb128 0x34
 19024 0274 00       		.byte	0
 19025 0275 03       		.uleb128 0x3
 19026 0276 08       		.uleb128 0x8
 19027 0277 3A       		.uleb128 0x3a
 19028 0278 0B       		.uleb128 0xb
 19029 0279 3B       		.uleb128 0x3b
 19030 027a 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 481


 19031 027b 49       		.uleb128 0x49
 19032 027c 13       		.uleb128 0x13
 19033 027d 3F       		.uleb128 0x3f
 19034 027e 0C       		.uleb128 0xc
 19035 027f 3C       		.uleb128 0x3c
 19036 0280 0C       		.uleb128 0xc
 19037 0281 00       		.byte	0
 19038 0282 00       		.byte	0
 19039 0283 2A       		.uleb128 0x2a
 19040 0284 21       		.uleb128 0x21
 19041 0285 00       		.byte	0
 19042 0286 49       		.uleb128 0x49
 19043 0287 13       		.uleb128 0x13
 19044 0288 2F       		.uleb128 0x2f
 19045 0289 05       		.uleb128 0x5
 19046 028a 00       		.byte	0
 19047 028b 00       		.byte	0
 19048 028c 00       		.byte	0
 19049              		.section	.debug_loc,"",%progbits
 19050              	.Ldebug_loc0:
 19051              	.LLST0:
 19052 0000 00000000 		.4byte	.LFB56
 19053 0004 02000000 		.4byte	.LCFI0
 19054 0008 0200     		.2byte	0x2
 19055 000a 7D       		.byte	0x7d
 19056 000b 00       		.sleb128 0
 19057 000c 02000000 		.4byte	.LCFI0
 19058 0010 04000000 		.4byte	.LCFI1
 19059 0014 0200     		.2byte	0x2
 19060 0016 7D       		.byte	0x7d
 19061 0017 08       		.sleb128 8
 19062 0018 04000000 		.4byte	.LCFI1
 19063 001c 06000000 		.4byte	.LCFI2
 19064 0020 0200     		.2byte	0x2
 19065 0022 7D       		.byte	0x7d
 19066 0023 10       		.sleb128 16
 19067 0024 06000000 		.4byte	.LCFI2
 19068 0028 D2000000 		.4byte	.LFE56
 19069 002c 0200     		.2byte	0x2
 19070 002e 77       		.byte	0x77
 19071 002f 10       		.sleb128 16
 19072 0030 00000000 		.4byte	0
 19073 0034 00000000 		.4byte	0
 19074              	.LLST1:
 19075 0038 00000000 		.4byte	.LFB57
 19076 003c 02000000 		.4byte	.LCFI3
 19077 0040 0200     		.2byte	0x2
 19078 0042 7D       		.byte	0x7d
 19079 0043 00       		.sleb128 0
 19080 0044 02000000 		.4byte	.LCFI3
 19081 0048 04000000 		.4byte	.LCFI4
 19082 004c 0200     		.2byte	0x2
 19083 004e 7D       		.byte	0x7d
 19084 004f 08       		.sleb128 8
 19085 0050 04000000 		.4byte	.LCFI4
 19086 0054 06000000 		.4byte	.LCFI5
 19087 0058 0200     		.2byte	0x2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 482


 19088 005a 7D       		.byte	0x7d
 19089 005b 10       		.sleb128 16
 19090 005c 06000000 		.4byte	.LCFI5
 19091 0060 EE000000 		.4byte	.LFE57
 19092 0064 0200     		.2byte	0x2
 19093 0066 77       		.byte	0x77
 19094 0067 10       		.sleb128 16
 19095 0068 00000000 		.4byte	0
 19096 006c 00000000 		.4byte	0
 19097              	.LLST2:
 19098 0070 00000000 		.4byte	.LFB58
 19099 0074 02000000 		.4byte	.LCFI6
 19100 0078 0200     		.2byte	0x2
 19101 007a 7D       		.byte	0x7d
 19102 007b 00       		.sleb128 0
 19103 007c 02000000 		.4byte	.LCFI6
 19104 0080 04000000 		.4byte	.LCFI7
 19105 0084 0200     		.2byte	0x2
 19106 0086 7D       		.byte	0x7d
 19107 0087 08       		.sleb128 8
 19108 0088 04000000 		.4byte	.LCFI7
 19109 008c 74010000 		.4byte	.LFE58
 19110 0090 0200     		.2byte	0x2
 19111 0092 77       		.byte	0x77
 19112 0093 08       		.sleb128 8
 19113 0094 00000000 		.4byte	0
 19114 0098 00000000 		.4byte	0
 19115              	.LLST3:
 19116 009c 00000000 		.4byte	.LFB59
 19117 00a0 02000000 		.4byte	.LCFI8
 19118 00a4 0200     		.2byte	0x2
 19119 00a6 7D       		.byte	0x7d
 19120 00a7 00       		.sleb128 0
 19121 00a8 02000000 		.4byte	.LCFI8
 19122 00ac 04000000 		.4byte	.LCFI9
 19123 00b0 0200     		.2byte	0x2
 19124 00b2 7D       		.byte	0x7d
 19125 00b3 08       		.sleb128 8
 19126 00b4 04000000 		.4byte	.LCFI9
 19127 00b8 50000000 		.4byte	.LFE59
 19128 00bc 0200     		.2byte	0x2
 19129 00be 77       		.byte	0x77
 19130 00bf 08       		.sleb128 8
 19131 00c0 00000000 		.4byte	0
 19132 00c4 00000000 		.4byte	0
 19133              	.LLST4:
 19134 00c8 00000000 		.4byte	.LFB60
 19135 00cc 02000000 		.4byte	.LCFI10
 19136 00d0 0200     		.2byte	0x2
 19137 00d2 7D       		.byte	0x7d
 19138 00d3 00       		.sleb128 0
 19139 00d4 02000000 		.4byte	.LCFI10
 19140 00d8 04000000 		.4byte	.LCFI11
 19141 00dc 0200     		.2byte	0x2
 19142 00de 7D       		.byte	0x7d
 19143 00df 08       		.sleb128 8
 19144 00e0 04000000 		.4byte	.LCFI11
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 483


 19145 00e4 06000000 		.4byte	.LCFI12
 19146 00e8 0200     		.2byte	0x2
 19147 00ea 7D       		.byte	0x7d
 19148 00eb 10       		.sleb128 16
 19149 00ec 06000000 		.4byte	.LCFI12
 19150 00f0 80000000 		.4byte	.LFE60
 19151 00f4 0200     		.2byte	0x2
 19152 00f6 77       		.byte	0x77
 19153 00f7 10       		.sleb128 16
 19154 00f8 00000000 		.4byte	0
 19155 00fc 00000000 		.4byte	0
 19156              	.LLST5:
 19157 0100 00000000 		.4byte	.LFB61
 19158 0104 02000000 		.4byte	.LCFI13
 19159 0108 0200     		.2byte	0x2
 19160 010a 7D       		.byte	0x7d
 19161 010b 00       		.sleb128 0
 19162 010c 02000000 		.4byte	.LCFI13
 19163 0110 04000000 		.4byte	.LCFI14
 19164 0114 0200     		.2byte	0x2
 19165 0116 7D       		.byte	0x7d
 19166 0117 08       		.sleb128 8
 19167 0118 04000000 		.4byte	.LCFI14
 19168 011c 06000000 		.4byte	.LCFI15
 19169 0120 0200     		.2byte	0x2
 19170 0122 7D       		.byte	0x7d
 19171 0123 10       		.sleb128 16
 19172 0124 06000000 		.4byte	.LCFI15
 19173 0128 98000000 		.4byte	.LFE61
 19174 012c 0200     		.2byte	0x2
 19175 012e 77       		.byte	0x77
 19176 012f 10       		.sleb128 16
 19177 0130 00000000 		.4byte	0
 19178 0134 00000000 		.4byte	0
 19179              	.LLST6:
 19180 0138 00000000 		.4byte	.LFB62
 19181 013c 02000000 		.4byte	.LCFI16
 19182 0140 0200     		.2byte	0x2
 19183 0142 7D       		.byte	0x7d
 19184 0143 00       		.sleb128 0
 19185 0144 02000000 		.4byte	.LCFI16
 19186 0148 04000000 		.4byte	.LCFI17
 19187 014c 0200     		.2byte	0x2
 19188 014e 7D       		.byte	0x7d
 19189 014f 08       		.sleb128 8
 19190 0150 04000000 		.4byte	.LCFI17
 19191 0154 06000000 		.4byte	.LCFI18
 19192 0158 0200     		.2byte	0x2
 19193 015a 7D       		.byte	0x7d
 19194 015b 10       		.sleb128 16
 19195 015c 06000000 		.4byte	.LCFI18
 19196 0160 54000000 		.4byte	.LFE62
 19197 0164 0200     		.2byte	0x2
 19198 0166 77       		.byte	0x77
 19199 0167 10       		.sleb128 16
 19200 0168 00000000 		.4byte	0
 19201 016c 00000000 		.4byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 484


 19202              	.LLST7:
 19203 0170 00000000 		.4byte	.LFB63
 19204 0174 02000000 		.4byte	.LCFI19
 19205 0178 0200     		.2byte	0x2
 19206 017a 7D       		.byte	0x7d
 19207 017b 00       		.sleb128 0
 19208 017c 02000000 		.4byte	.LCFI19
 19209 0180 04000000 		.4byte	.LCFI20
 19210 0184 0200     		.2byte	0x2
 19211 0186 7D       		.byte	0x7d
 19212 0187 10       		.sleb128 16
 19213 0188 04000000 		.4byte	.LCFI20
 19214 018c 06000000 		.4byte	.LCFI21
 19215 0190 0200     		.2byte	0x2
 19216 0192 7D       		.byte	0x7d
 19217 0193 18       		.sleb128 24
 19218 0194 06000000 		.4byte	.LCFI21
 19219 0198 66000000 		.4byte	.LFE63
 19220 019c 0200     		.2byte	0x2
 19221 019e 77       		.byte	0x77
 19222 019f 10       		.sleb128 16
 19223 01a0 00000000 		.4byte	0
 19224 01a4 00000000 		.4byte	0
 19225              	.LLST8:
 19226 01a8 00000000 		.4byte	.LFB64
 19227 01ac 02000000 		.4byte	.LCFI22
 19228 01b0 0200     		.2byte	0x2
 19229 01b2 7D       		.byte	0x7d
 19230 01b3 00       		.sleb128 0
 19231 01b4 02000000 		.4byte	.LCFI22
 19232 01b8 04000000 		.4byte	.LCFI23
 19233 01bc 0200     		.2byte	0x2
 19234 01be 7D       		.byte	0x7d
 19235 01bf 10       		.sleb128 16
 19236 01c0 04000000 		.4byte	.LCFI23
 19237 01c4 06000000 		.4byte	.LCFI24
 19238 01c8 0200     		.2byte	0x2
 19239 01ca 7D       		.byte	0x7d
 19240 01cb 18       		.sleb128 24
 19241 01cc 06000000 		.4byte	.LCFI24
 19242 01d0 66000000 		.4byte	.LFE64
 19243 01d4 0200     		.2byte	0x2
 19244 01d6 77       		.byte	0x77
 19245 01d7 10       		.sleb128 16
 19246 01d8 00000000 		.4byte	0
 19247 01dc 00000000 		.4byte	0
 19248              	.LLST9:
 19249 01e0 00000000 		.4byte	.LFB65
 19250 01e4 02000000 		.4byte	.LCFI25
 19251 01e8 0200     		.2byte	0x2
 19252 01ea 7D       		.byte	0x7d
 19253 01eb 00       		.sleb128 0
 19254 01ec 02000000 		.4byte	.LCFI25
 19255 01f0 04000000 		.4byte	.LCFI26
 19256 01f4 0200     		.2byte	0x2
 19257 01f6 7D       		.byte	0x7d
 19258 01f7 08       		.sleb128 8
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 485


 19259 01f8 04000000 		.4byte	.LCFI26
 19260 01fc 06000000 		.4byte	.LCFI27
 19261 0200 0200     		.2byte	0x2
 19262 0202 7D       		.byte	0x7d
 19263 0203 10       		.sleb128 16
 19264 0204 06000000 		.4byte	.LCFI27
 19265 0208 20010000 		.4byte	.LFE65
 19266 020c 0200     		.2byte	0x2
 19267 020e 77       		.byte	0x77
 19268 020f 10       		.sleb128 16
 19269 0210 00000000 		.4byte	0
 19270 0214 00000000 		.4byte	0
 19271              	.LLST10:
 19272 0218 00000000 		.4byte	.LFB66
 19273 021c 02000000 		.4byte	.LCFI28
 19274 0220 0200     		.2byte	0x2
 19275 0222 7D       		.byte	0x7d
 19276 0223 00       		.sleb128 0
 19277 0224 02000000 		.4byte	.LCFI28
 19278 0228 04000000 		.4byte	.LCFI29
 19279 022c 0200     		.2byte	0x2
 19280 022e 7D       		.byte	0x7d
 19281 022f 08       		.sleb128 8
 19282 0230 04000000 		.4byte	.LCFI29
 19283 0234 06000000 		.4byte	.LCFI30
 19284 0238 0200     		.2byte	0x2
 19285 023a 7D       		.byte	0x7d
 19286 023b 10       		.sleb128 16
 19287 023c 06000000 		.4byte	.LCFI30
 19288 0240 64000000 		.4byte	.LFE66
 19289 0244 0200     		.2byte	0x2
 19290 0246 77       		.byte	0x77
 19291 0247 10       		.sleb128 16
 19292 0248 00000000 		.4byte	0
 19293 024c 00000000 		.4byte	0
 19294              	.LLST11:
 19295 0250 00000000 		.4byte	.LFB67
 19296 0254 02000000 		.4byte	.LCFI31
 19297 0258 0200     		.2byte	0x2
 19298 025a 7D       		.byte	0x7d
 19299 025b 00       		.sleb128 0
 19300 025c 02000000 		.4byte	.LCFI31
 19301 0260 04000000 		.4byte	.LCFI32
 19302 0264 0200     		.2byte	0x2
 19303 0266 7D       		.byte	0x7d
 19304 0267 08       		.sleb128 8
 19305 0268 04000000 		.4byte	.LCFI32
 19306 026c 06000000 		.4byte	.LCFI33
 19307 0270 0200     		.2byte	0x2
 19308 0272 7D       		.byte	0x7d
 19309 0273 20       		.sleb128 32
 19310 0274 06000000 		.4byte	.LCFI33
 19311 0278 FA000000 		.4byte	.LFE67
 19312 027c 0200     		.2byte	0x2
 19313 027e 77       		.byte	0x77
 19314 027f 20       		.sleb128 32
 19315 0280 00000000 		.4byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 486


 19316 0284 00000000 		.4byte	0
 19317              	.LLST12:
 19318 0288 00000000 		.4byte	.LFB68
 19319 028c 02000000 		.4byte	.LCFI34
 19320 0290 0200     		.2byte	0x2
 19321 0292 7D       		.byte	0x7d
 19322 0293 00       		.sleb128 0
 19323 0294 02000000 		.4byte	.LCFI34
 19324 0298 04000000 		.4byte	.LCFI35
 19325 029c 0200     		.2byte	0x2
 19326 029e 7D       		.byte	0x7d
 19327 029f 08       		.sleb128 8
 19328 02a0 04000000 		.4byte	.LCFI35
 19329 02a4 06000000 		.4byte	.LCFI36
 19330 02a8 0300     		.2byte	0x3
 19331 02aa 7D       		.byte	0x7d
 19332 02ab C800     		.sleb128 72
 19333 02ad 06000000 		.4byte	.LCFI36
 19334 02b1 04030000 		.4byte	.LFE68
 19335 02b5 0300     		.2byte	0x3
 19336 02b7 77       		.byte	0x77
 19337 02b8 C800     		.sleb128 72
 19338 02ba 00000000 		.4byte	0
 19339 02be 00000000 		.4byte	0
 19340              	.LLST13:
 19341 02c2 00000000 		.4byte	.LFB69
 19342 02c6 04000000 		.4byte	.LCFI37
 19343 02ca 0200     		.2byte	0x2
 19344 02cc 7D       		.byte	0x7d
 19345 02cd 00       		.sleb128 0
 19346 02ce 04000000 		.4byte	.LCFI37
 19347 02d2 06000000 		.4byte	.LCFI38
 19348 02d6 0200     		.2byte	0x2
 19349 02d8 7D       		.byte	0x7d
 19350 02d9 24       		.sleb128 36
 19351 02da 06000000 		.4byte	.LCFI38
 19352 02de 08000000 		.4byte	.LCFI39
 19353 02e2 0300     		.2byte	0x3
 19354 02e4 7D       		.byte	0x7d
 19355 02e5 F002     		.sleb128 368
 19356 02e7 08000000 		.4byte	.LCFI39
 19357 02eb C86E0000 		.4byte	.LFE69
 19358 02ef 0300     		.2byte	0x3
 19359 02f1 77       		.byte	0x77
 19360 02f2 C002     		.sleb128 320
 19361 02f4 00000000 		.4byte	0
 19362 02f8 00000000 		.4byte	0
 19363              	.LLST14:
 19364 02fc 00000000 		.4byte	.LFB70
 19365 0300 02000000 		.4byte	.LCFI40
 19366 0304 0200     		.2byte	0x2
 19367 0306 7D       		.byte	0x7d
 19368 0307 00       		.sleb128 0
 19369 0308 02000000 		.4byte	.LCFI40
 19370 030c 04000000 		.4byte	.LCFI41
 19371 0310 0200     		.2byte	0x2
 19372 0312 7D       		.byte	0x7d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 487


 19373 0313 08       		.sleb128 8
 19374 0314 04000000 		.4byte	.LCFI41
 19375 0318 1C000000 		.4byte	.LFE70
 19376 031c 0200     		.2byte	0x2
 19377 031e 77       		.byte	0x77
 19378 031f 08       		.sleb128 8
 19379 0320 00000000 		.4byte	0
 19380 0324 00000000 		.4byte	0
 19381              	.LLST15:
 19382 0328 00000000 		.4byte	.LFB71
 19383 032c 02000000 		.4byte	.LCFI42
 19384 0330 0200     		.2byte	0x2
 19385 0332 7D       		.byte	0x7d
 19386 0333 00       		.sleb128 0
 19387 0334 02000000 		.4byte	.LCFI42
 19388 0338 04000000 		.4byte	.LCFI43
 19389 033c 0200     		.2byte	0x2
 19390 033e 7D       		.byte	0x7d
 19391 033f 08       		.sleb128 8
 19392 0340 04000000 		.4byte	.LCFI43
 19393 0344 06000000 		.4byte	.LCFI44
 19394 0348 0200     		.2byte	0x2
 19395 034a 7D       		.byte	0x7d
 19396 034b 18       		.sleb128 24
 19397 034c 06000000 		.4byte	.LCFI44
 19398 0350 68000000 		.4byte	.LFE71
 19399 0354 0200     		.2byte	0x2
 19400 0356 77       		.byte	0x77
 19401 0357 18       		.sleb128 24
 19402 0358 00000000 		.4byte	0
 19403 035c 00000000 		.4byte	0
 19404              	.LLST16:
 19405 0360 00000000 		.4byte	.LFB72
 19406 0364 02000000 		.4byte	.LCFI45
 19407 0368 0200     		.2byte	0x2
 19408 036a 7D       		.byte	0x7d
 19409 036b 00       		.sleb128 0
 19410 036c 02000000 		.4byte	.LCFI45
 19411 0370 04000000 		.4byte	.LCFI46
 19412 0374 0200     		.2byte	0x2
 19413 0376 7D       		.byte	0x7d
 19414 0377 04       		.sleb128 4
 19415 0378 04000000 		.4byte	.LCFI46
 19416 037c 06000000 		.4byte	.LCFI47
 19417 0380 0200     		.2byte	0x2
 19418 0382 7D       		.byte	0x7d
 19419 0383 18       		.sleb128 24
 19420 0384 06000000 		.4byte	.LCFI47
 19421 0388 3A000000 		.4byte	.LFE72
 19422 038c 0200     		.2byte	0x2
 19423 038e 77       		.byte	0x77
 19424 038f 18       		.sleb128 24
 19425 0390 00000000 		.4byte	0
 19426 0394 00000000 		.4byte	0
 19427              	.LLST17:
 19428 0398 00000000 		.4byte	.LFB73
 19429 039c 02000000 		.4byte	.LCFI48
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 488


 19430 03a0 0200     		.2byte	0x2
 19431 03a2 7D       		.byte	0x7d
 19432 03a3 00       		.sleb128 0
 19433 03a4 02000000 		.4byte	.LCFI48
 19434 03a8 04000000 		.4byte	.LCFI49
 19435 03ac 0200     		.2byte	0x2
 19436 03ae 7D       		.byte	0x7d
 19437 03af 04       		.sleb128 4
 19438 03b0 04000000 		.4byte	.LCFI49
 19439 03b4 10000000 		.4byte	.LFE73
 19440 03b8 0200     		.2byte	0x2
 19441 03ba 77       		.byte	0x77
 19442 03bb 04       		.sleb128 4
 19443 03bc 00000000 		.4byte	0
 19444 03c0 00000000 		.4byte	0
 19445              	.LLST18:
 19446 03c4 00000000 		.4byte	.LFB74
 19447 03c8 02000000 		.4byte	.LCFI50
 19448 03cc 0200     		.2byte	0x2
 19449 03ce 7D       		.byte	0x7d
 19450 03cf 00       		.sleb128 0
 19451 03d0 02000000 		.4byte	.LCFI50
 19452 03d4 04000000 		.4byte	.LCFI51
 19453 03d8 0200     		.2byte	0x2
 19454 03da 7D       		.byte	0x7d
 19455 03db 08       		.sleb128 8
 19456 03dc 04000000 		.4byte	.LCFI51
 19457 03e0 54010000 		.4byte	.LFE74
 19458 03e4 0200     		.2byte	0x2
 19459 03e6 77       		.byte	0x77
 19460 03e7 08       		.sleb128 8
 19461 03e8 00000000 		.4byte	0
 19462 03ec 00000000 		.4byte	0
 19463              		.section	.debug_aranges,"",%progbits
 19464 0000 AC000000 		.4byte	0xac
 19465 0004 0200     		.2byte	0x2
 19466 0006 00000000 		.4byte	.Ldebug_info0
 19467 000a 04       		.byte	0x4
 19468 000b 00       		.byte	0
 19469 000c 0000     		.2byte	0
 19470 000e 0000     		.2byte	0
 19471 0010 00000000 		.4byte	.LFB56
 19472 0014 D2000000 		.4byte	.LFE56-.LFB56
 19473 0018 00000000 		.4byte	.LFB57
 19474 001c EE000000 		.4byte	.LFE57-.LFB57
 19475 0020 00000000 		.4byte	.LFB58
 19476 0024 74010000 		.4byte	.LFE58-.LFB58
 19477 0028 00000000 		.4byte	.LFB59
 19478 002c 50000000 		.4byte	.LFE59-.LFB59
 19479 0030 00000000 		.4byte	.LFB60
 19480 0034 80000000 		.4byte	.LFE60-.LFB60
 19481 0038 00000000 		.4byte	.LFB61
 19482 003c 98000000 		.4byte	.LFE61-.LFB61
 19483 0040 00000000 		.4byte	.LFB62
 19484 0044 54000000 		.4byte	.LFE62-.LFB62
 19485 0048 00000000 		.4byte	.LFB63
 19486 004c 66000000 		.4byte	.LFE63-.LFB63
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 489


 19487 0050 00000000 		.4byte	.LFB64
 19488 0054 66000000 		.4byte	.LFE64-.LFB64
 19489 0058 00000000 		.4byte	.LFB65
 19490 005c 20010000 		.4byte	.LFE65-.LFB65
 19491 0060 00000000 		.4byte	.LFB66
 19492 0064 64000000 		.4byte	.LFE66-.LFB66
 19493 0068 00000000 		.4byte	.LFB67
 19494 006c FA000000 		.4byte	.LFE67-.LFB67
 19495 0070 00000000 		.4byte	.LFB68
 19496 0074 04030000 		.4byte	.LFE68-.LFB68
 19497 0078 00000000 		.4byte	.LFB69
 19498 007c C86E0000 		.4byte	.LFE69-.LFB69
 19499 0080 00000000 		.4byte	.LFB70
 19500 0084 1C000000 		.4byte	.LFE70-.LFB70
 19501 0088 00000000 		.4byte	.LFB71
 19502 008c 68000000 		.4byte	.LFE71-.LFB71
 19503 0090 00000000 		.4byte	.LFB72
 19504 0094 3A000000 		.4byte	.LFE72-.LFB72
 19505 0098 00000000 		.4byte	.LFB73
 19506 009c 10000000 		.4byte	.LFE73-.LFB73
 19507 00a0 00000000 		.4byte	.LFB74
 19508 00a4 54010000 		.4byte	.LFE74-.LFB74
 19509 00a8 00000000 		.4byte	0
 19510 00ac 00000000 		.4byte	0
 19511              		.section	.debug_ranges,"",%progbits
 19512              	.Ldebug_ranges0:
 19513 0000 00000000 		.4byte	.LFB56
 19514 0004 D2000000 		.4byte	.LFE56
 19515 0008 00000000 		.4byte	.LFB57
 19516 000c EE000000 		.4byte	.LFE57
 19517 0010 00000000 		.4byte	.LFB58
 19518 0014 74010000 		.4byte	.LFE58
 19519 0018 00000000 		.4byte	.LFB59
 19520 001c 50000000 		.4byte	.LFE59
 19521 0020 00000000 		.4byte	.LFB60
 19522 0024 80000000 		.4byte	.LFE60
 19523 0028 00000000 		.4byte	.LFB61
 19524 002c 98000000 		.4byte	.LFE61
 19525 0030 00000000 		.4byte	.LFB62
 19526 0034 54000000 		.4byte	.LFE62
 19527 0038 00000000 		.4byte	.LFB63
 19528 003c 66000000 		.4byte	.LFE63
 19529 0040 00000000 		.4byte	.LFB64
 19530 0044 66000000 		.4byte	.LFE64
 19531 0048 00000000 		.4byte	.LFB65
 19532 004c 20010000 		.4byte	.LFE65
 19533 0050 00000000 		.4byte	.LFB66
 19534 0054 64000000 		.4byte	.LFE66
 19535 0058 00000000 		.4byte	.LFB67
 19536 005c FA000000 		.4byte	.LFE67
 19537 0060 00000000 		.4byte	.LFB68
 19538 0064 04030000 		.4byte	.LFE68
 19539 0068 00000000 		.4byte	.LFB69
 19540 006c C86E0000 		.4byte	.LFE69
 19541 0070 00000000 		.4byte	.LFB70
 19542 0074 1C000000 		.4byte	.LFE70
 19543 0078 00000000 		.4byte	.LFB71
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 490


 19544 007c 68000000 		.4byte	.LFE71
 19545 0080 00000000 		.4byte	.LFB72
 19546 0084 3A000000 		.4byte	.LFE72
 19547 0088 00000000 		.4byte	.LFB73
 19548 008c 10000000 		.4byte	.LFE73
 19549 0090 00000000 		.4byte	.LFB74
 19550 0094 54010000 		.4byte	.LFE74
 19551 0098 00000000 		.4byte	0
 19552 009c 00000000 		.4byte	0
 19553              		.section	.debug_line,"",%progbits
 19554              	.Ldebug_line0:
 19555 0000 0A100000 		.section	.debug_str,"MS",%progbits,1
 19555      02007101 
 19555      00000201 
 19555      FB0E0D00 
 19555      01010101 
 19556              	.LASF271:
 19557 0000 6D6F7665 		.ascii	"mover_tilt\000"
 19557      725F7469 
 19557      6C7400
 19558              	.LASF20:
 19559 000b 73697A65 		.ascii	"sizetype\000"
 19559      74797065 
 19559      00
 19560              	.LASF96:
 19561 0014 706F6C61 		.ascii	"polarity\000"
 19561      72697479 
 19561      00
 19562              	.LASF177:
 19563 001d 71706F77 		.ascii	"qpower_t\000"
 19563      65725F74 
 19563      00
 19564              	.LASF113:
 19565 0026 64657269 		.ascii	"derivative_lowpass\000"
 19565      76617469 
 19565      76655F6C 
 19565      6F777061 
 19565      737300
 19566              	.LASF187:
 19567 0039 53686F77 		.ascii	"ShowCLUSM\000"
 19567      434C5553 
 19567      4D00
 19568              	.LASF36:
 19569 0043 46626B45 		.ascii	"FbkEncFaults\000"
 19569      6E634661 
 19569      756C7473 
 19569      00
 19570              	.LASF150:
 19571 0050 73746570 		.ascii	"steps_integral\000"
 19571      735F696E 
 19571      74656772 
 19571      616C00
 19572              	.LASF95:
 19573 005f 50415241 		.ascii	"PARAMS\000"
 19573      4D5300
 19574              	.LASF121:
 19575 0066 4C494D49 		.ascii	"LIMITCONTROL\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 491


 19575      54434F4E 
 19575      54524F4C 
 19575      00
 19576              	.LASF9:
 19577 0073 696E7433 		.ascii	"int32_t\000"
 19577      325F7400 
 19578              	.LASF194:
 19579 007b 53686F77 		.ascii	"ShowParamsKiPan\000"
 19579      50617261 
 19579      6D734B69 
 19579      50616E00 
 19580              	.LASF90:
 19581 008b 56504152 		.ascii	"VPARAMS\000"
 19581      414D5300 
 19582              	.LASF75:
 19583 0093 7961775F 		.ascii	"yaw_invertion\000"
 19583      696E7665 
 19583      7274696F 
 19583      6E00
 19584              	.LASF196:
 19585 00a1 53686F77 		.ascii	"ShowParamsColor\000"
 19585      50617261 
 19585      6D73436F 
 19585      6C6F7200 
 19586              	.LASF98:
 19587 00b1 4B6F7066 		.ascii	"Kopf\000"
 19587      00
 19588              	.LASF48:
 19589 00b6 7A5F6178 		.ascii	"z_axis\000"
 19589      697300
 19590              	.LASF12:
 19591 00bd 75696E74 		.ascii	"uint32\000"
 19591      333200
 19592              	.LASF186:
 19593 00c4 53686F77 		.ascii	"ShowStatusMappingSM\000"
 19593      53746174 
 19593      75734D61 
 19593      7070696E 
 19593      67534D00 
 19594              	.LASF209:
 19595 00d8 70617273 		.ascii	"parser\000"
 19595      657200
 19596              	.LASF208:
 19597 00df 6C6F6361 		.ascii	"localBuffer\000"
 19597      6C427566 
 19597      66657200 
 19598              	.LASF224:
 19599 00eb 6A756D70 		.ascii	"jump_g_th\000"
 19599      5F675F74 
 19599      6800
 19600              	.LASF102:
 19601 00f5 6C696D69 		.ascii	"limit_deceleration_factor\000"
 19601      745F6465 
 19601      63656C65 
 19601      72617469 
 19601      6F6E5F66 
 19602              	.LASF41:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 492


 19603 010f 61636365 		.ascii	"acceleration\000"
 19603      6C657261 
 19603      74696F6E 
 19603      00
 19604              	.LASF87:
 19605 011c 63616D5F 		.ascii	"cam_gyropan\000"
 19605      6779726F 
 19605      70616E00 
 19606              	.LASF161:
 19607 0128 70617573 		.ascii	"pauseticks\000"
 19607      65746963 
 19607      6B7300
 19608              	.LASF18:
 19609 0133 63686172 		.ascii	"char8\000"
 19609      3800
 19610              	.LASF250:
 19611 0139 434D445F 		.ascii	"CMD_AT_SHOWVERSION\000"
 19611      41545F53 
 19611      484F5756 
 19611      45525349 
 19611      4F4E00
 19612              	.LASF223:
 19613 014c 74696D65 		.ascii	"time_loc\000"
 19613      5F6C6F63 
 19613      00
 19614              	.LASF131:
 19615 0155 74696C74 		.ascii	"tilt_angle\000"
 19615      5F616E67 
 19615      6C6500
 19616              	.LASF104:
 19617 0160 6D617374 		.ascii	"master_enc_position\000"
 19617      65725F65 
 19617      6E635F70 
 19617      6F736974 
 19617      696F6E00 
 19618              	.LASF234:
 19619 0174 6D795F74 		.ascii	"my_torque\000"
 19619      6F727175 
 19619      6500
 19620              	.LASF244:
 19621 017e 416E7942 		.ascii	"AnyButtonPressed\000"
 19621      7574746F 
 19621      6E507265 
 19621      73736564 
 19621      00
 19622              	.LASF71:
 19623 018f 73616D70 		.ascii	"sample_d1\000"
 19623      6C655F64 
 19623      3100
 19624              	.LASF13:
 19625 0199 696E7438 		.ascii	"int8\000"
 19625      00
 19626              	.LASF123:
 19627 019e 6D617374 		.ascii	"master_limit_delta\000"
 19627      65725F6C 
 19627      696D6974 
 19627      5F64656C 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 493


 19627      746100
 19628              	.LASF283:
 19629 01b1 75736572 		.ascii	"userInputBuffer\000"
 19629      496E7075 
 19629      74427566 
 19629      66657200 
 19630              	.LASF128:
 19631 01c1 64736563 		.ascii	"dsec\000"
 19631      00
 19632              	.LASF51:
 19633 01c6 73797374 		.ascii	"system_dynamic_scalar\000"
 19633      656D5F64 
 19633      796E616D 
 19633      69635F73 
 19633      63616C61 
 19634              	.LASF156:
 19635 01dc 51454C45 		.ascii	"QELEMENT\000"
 19635      4D454E54 
 19635      00
 19636              	.LASF267:
 19637 01e5 74696C74 		.ascii	"tilt_qpower_stat\000"
 19637      5F71706F 
 19637      7765725F 
 19637      73746174 
 19637      00
 19638              	.LASF251:
 19639 01f6 676F6265 		.ascii	"gobee_param\000"
 19639      655F7061 
 19639      72616D00 
 19640              	.LASF225:
 19641 0202 6163635F 		.ascii	"acc_g_th\000"
 19641      675F7468 
 19641      00
 19642              	.LASF253:
 19643 020b 6D616368 		.ascii	"machine_state\000"
 19643      696E655F 
 19643      73746174 
 19643      6500
 19644              	.LASF33:
 19645 0219 474F4245 		.ascii	"GOBEE_PARAMS\000"
 19645      455F5041 
 19645      52414D53 
 19645      00
 19646              	.LASF276:
 19647 0226 494D555F 		.ascii	"IMU_sensor\000"
 19647      73656E73 
 19647      6F7200
 19648              	.LASF76:
 19649 0231 70697463 		.ascii	"pitch_invertion\000"
 19649      685F696E 
 19649      76657274 
 19649      696F6E00 
 19650              	.LASF93:
 19651 0241 7265736F 		.ascii	"resolution_step_deg\000"
 19651      6C757469 
 19651      6F6E5F73 
 19651      7465705F 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 494


 19651      64656700 
 19652              	.LASF178:
 19653 0255 56454C4F 		.ascii	"VELOCALC\000"
 19653      43414C43 
 19653      00
 19654              	.LASF54:
 19655 025e 454E434F 		.ascii	"ENCODER\000"
 19655      44455200 
 19656              	.LASF66:
 19657 0266 73746570 		.ascii	"step_over_abs_ratio\000"
 19657      5F6F7665 
 19657      725F6162 
 19657      735F7261 
 19657      74696F00 
 19658              	.LASF4:
 19659 027a 6C6F6E67 		.ascii	"long int\000"
 19659      20696E74 
 19659      00
 19660              	.LASF126:
 19661 0283 76706172 		.ascii	"vparam\000"
 19661      616D00
 19662              	.LASF171:
 19663 028a 516B5F70 		.ascii	"Qk_previous\000"
 19663      72657669 
 19663      6F757300 
 19664              	.LASF189:
 19665 0296 53686F77 		.ascii	"ShowParamsMode\000"
 19665      50617261 
 19665      6D734D6F 
 19665      646500
 19666              	.LASF181:
 19667 02a5 544F5251 		.ascii	"TORQUESTAT\000"
 19667      55455354 
 19667      415400
 19668              	.LASF289:
 19669 02b0 443A5C5F 		.ascii	"D:\\_GITHUB repos\\Squit-HW0.0\\Squit-Proto.cydsn\000"
 19669      47495448 
 19669      55422072 
 19669      65706F73 
 19669      5C537175 
 19670              	.LASF109:
 19671 02df 6572726F 		.ascii	"error\000"
 19671      7200
 19672              	.LASF259:
 19673 02e5 53656C65 		.ascii	"Selected_ANAOUT\000"
 19673      63746564 
 19673      5F414E41 
 19673      4F555400 
 19674              	.LASF39:
 19675 02f5 585F4158 		.ascii	"X_AXIS\000"
 19675      495300
 19676              	.LASF182:
 19677 02fc 63757272 		.ascii	"current_integral\000"
 19677      656E745F 
 19677      696E7465 
 19677      6772616C 
 19677      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 495


 19678              	.LASF84:
 19679 030d 62696B65 		.ascii	"bike_yaw_lpf\000"
 19679      5F796177 
 19679      5F6C7066 
 19679      00
 19680              	.LASF49:
 19681 031a 73717561 		.ascii	"squared\000"
 19681      72656400 
 19682              	.LASF79:
 19683 0322 67616D6D 		.ascii	"gamma\000"
 19683      6100
 19684              	.LASF0:
 19685 0328 7369676E 		.ascii	"signed char\000"
 19685      65642063 
 19685      68617200 
 19686              	.LASF52:
 19687 0334 454E435F 		.ascii	"ENC_PARAMETER\000"
 19687      50415241 
 19687      4D455445 
 19687      5200
 19688              	.LASF37:
 19689 0342 70616E5F 		.ascii	"pan_FE_FAULT_prescaler\000"
 19689      46455F46 
 19689      41554C54 
 19689      5F707265 
 19689      7363616C 
 19690              	.LASF140:
 19691 0359 61637469 		.ascii	"action\000"
 19691      6F6E00
 19692              	.LASF231:
 19693 0360 54736176 		.ascii	"TsavetoEE\000"
 19693      65746F45 
 19693      4500
 19694              	.LASF107:
 19695 036a 6D617374 		.ascii	"master_joy_sample_delta\000"
 19695      65725F6A 
 19695      6F795F73 
 19695      616D706C 
 19695      655F6465 
 19696              	.LASF40:
 19697 0382 7363616C 		.ascii	"scale\000"
 19697      6500
 19698              	.LASF1:
 19699 0388 756E7369 		.ascii	"unsigned char\000"
 19699      676E6564 
 19699      20636861 
 19699      7200
 19700              	.LASF222:
 19701 0396 715F6E75 		.ascii	"q_number\000"
 19701      6D626572 
 19701      00
 19702              	.LASF240:
 19703 039f 6D656D6F 		.ascii	"memory_num\000"
 19703      72795F6E 
 19703      756D00
 19704              	.LASF28:
 19705 03aa 785F6163 		.ascii	"x_acc_ADC_offset\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 496


 19705      635F4144 
 19705      435F6F66 
 19705      66736574 
 19705      00
 19706              	.LASF254:
 19707 03bb 676F6265 		.ascii	"gobeeFaults\000"
 19707      65466175 
 19707      6C747300 
 19708              	.LASF62:
 19709 03c7 7261775F 		.ascii	"raw_home\000"
 19709      686F6D65 
 19709      00
 19710              	.LASF287:
 19711 03d0 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 19711      4320342E 
 19711      372E3320 
 19711      32303133 
 19711      30333132 
 19712 0403 616E6368 		.ascii	"anch revision 196615]\000"
 19712      20726576 
 19712      6973696F 
 19712      6E203139 
 19712      36363135 
 19713              	.LASF60:
 19714 0419 4142504F 		.ascii	"ABPOS_SENS_PARAMETER\000"
 19714      535F5345 
 19714      4E535F50 
 19714      4152414D 
 19714      45544552 
 19715              	.LASF124:
 19716 042e 64656365 		.ascii	"deceleration_factor\000"
 19716      6C657261 
 19716      74696F6E 
 19716      5F666163 
 19716      746F7200 
 19717              	.LASF281:
 19718 0442 57617665 		.ascii	"WaveDAC8_wave_triangle\000"
 19718      44414338 
 19718      5F776176 
 19718      655F7472 
 19718      69616E67 
 19719              	.LASF153:
 19720 0459 51504152 		.ascii	"QPARA\000"
 19720      4100
 19721              	.LASF94:
 19722 045f 7265736F 		.ascii	"resolution_rad_step\000"
 19722      6C757469 
 19722      6F6E5F72 
 19722      61645F73 
 19722      74657000 
 19723              	.LASF142:
 19724 0473 6E756D62 		.ascii	"number1\000"
 19724      65723100 
 19725              	.LASF143:
 19726 047b 6E756D62 		.ascii	"number2\000"
 19726      65723200 
 19727              	.LASF19:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 497


 19728 0483 63686172 		.ascii	"char\000"
 19728      00
 19729              	.LASF32:
 19730 0488 6163635F 		.ascii	"acc_g_threshold\000"
 19730      675F7468 
 19730      72657368 
 19730      6F6C6400 
 19731              	.LASF274:
 19732 0498 636C755F 		.ascii	"clu_sequence\000"
 19732      73657175 
 19732      656E6365 
 19732      00
 19733              	.LASF50:
 19734 04a5 6D6F6475 		.ascii	"modulo\000"
 19734      6C6F00
 19735              	.LASF268:
 19736 04ac 70616E5F 		.ascii	"pan_torque_stat\000"
 19736      746F7271 
 19736      75655F73 
 19736      74617400 
 19737              	.LASF243:
 19738 04bc 636C6561 		.ascii	"clear_string\000"
 19738      725F7374 
 19738      72696E67 
 19738      00
 19739              	.LASF106:
 19740 04c9 6D617374 		.ascii	"master_joy_position\000"
 19740      65725F6A 
 19740      6F795F70 
 19740      6F736974 
 19740      696F6E00 
 19741              	.LASF141:
 19742 04dd 70617261 		.ascii	"parameter\000"
 19742      6D657465 
 19742      7200
 19743              	.LASF117:
 19744 04e7 70776D5F 		.ascii	"pwm_test_var\000"
 19744      74657374 
 19744      5F766172 
 19744      00
 19745              	.LASF155:
 19746 04f4 706F7369 		.ascii	"position_adjust\000"
 19746      74696F6E 
 19746      5F61646A 
 19746      75737400 
 19747              	.LASF135:
 19748 0504 4556454E 		.ascii	"EVENTS\000"
 19748      545300
 19749              	.LASF58:
 19750 050b 616E6775 		.ascii	"angular_velocity\000"
 19750      6C61725F 
 19750      76656C6F 
 19750      63697479 
 19750      00
 19751              	.LASF147:
 19752 051c 73746570 		.ascii	"steps\000"
 19752      7300
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 498


 19753              	.LASF114:
 19754 0522 64656164 		.ascii	"deadband_factor\000"
 19754      62616E64 
 19754      5F666163 
 19754      746F7200 
 19755              	.LASF264:
 19756 0532 70616E5F 		.ascii	"pan_current_stat\000"
 19756      63757272 
 19756      656E745F 
 19756      73746174 
 19756      00
 19757              	.LASF162:
 19758 0543 70617573 		.ascii	"pausemax\000"
 19758      656D6178 
 19758      00
 19759              	.LASF146:
 19760 054c 72656D61 		.ascii	"remainder_double\000"
 19760      696E6465 
 19760      725F646F 
 19760      75626C65 
 19760      00
 19761              	.LASF210:
 19762 055d 7363616E 		.ascii	"scanstat\000"
 19762      73746174 
 19762      00
 19763              	.LASF73:
 19764 0566 72617469 		.ascii	"ratio_tmp\000"
 19764      6F5F746D 
 19764      7000
 19765              	.LASF227:
 19766 0570 6765745F 		.ascii	"get_key\000"
 19766      6B657900 
 19767              	.LASF108:
 19768 0578 736C6176 		.ascii	"slave_enc\000"
 19768      655F656E 
 19768      6300
 19769              	.LASF137:
 19770 0582 74696D65 		.ascii	"timecode\000"
 19770      636F6465 
 19770      00
 19771              	.LASF152:
 19772 058b 6D6F7665 		.ascii	"mover_type\000"
 19772      725F7479 
 19772      706500
 19773              	.LASF81:
 19774 0596 62696B65 		.ascii	"bike_yaw\000"
 19774      5F796177 
 19774      00
 19775              	.LASF235:
 19776 059f 6D795F6F 		.ascii	"my_omega\000"
 19776      6D656761 
 19776      00
 19777              	.LASF159:
 19778 05a8 636C756E 		.ascii	"clunumber\000"
 19778      756D6265 
 19778      7200
 19779              	.LASF115:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 499


 19780 05b2 6374726C 		.ascii	"ctrl_var\000"
 19780      5F766172 
 19780      00
 19781              	.LASF132:
 19782 05bb 726F6C6C 		.ascii	"roll_angle\000"
 19782      5F616E67 
 19782      6C6500
 19783              	.LASF242:
 19784 05c6 42757474 		.ascii	"ButtonYNChoice\000"
 19784      6F6E594E 
 19784      43686F69 
 19784      636500
 19785              	.LASF168:
 19786 05d5 6D65616E 		.ascii	"mean_previous\000"
 19786      5F707265 
 19786      76696F75 
 19786      7300
 19787              	.LASF266:
 19788 05e3 74696C74 		.ascii	"tilt_current_stat\000"
 19788      5F637572 
 19788      72656E74 
 19788      5F737461 
 19788      7400
 19789              	.LASF160:
 19790 05f5 636C756C 		.ascii	"cluline\000"
 19790      696E6500 
 19791              	.LASF63:
 19792 05fd 7261775F 		.ascii	"raw_limit_max\000"
 19792      6C696D69 
 19792      745F6D61 
 19792      7800
 19793              	.LASF200:
 19794 060b 696E6465 		.ascii	"index\000"
 19794      7800
 19795              	.LASF201:
 19796 0611 63686172 		.ascii	"charin\000"
 19796      696E00
 19797              	.LASF129:
 19798 0618 6F6E5F6F 		.ascii	"on_origin_ticks\000"
 19798      72696769 
 19798      6E5F7469 
 19798      636B7300 
 19799              	.LASF30:
 19800 0628 7A5F6163 		.ascii	"z_acc_ADC_offset\000"
 19800      635F4144 
 19800      435F6F66 
 19800      66736574 
 19800      00
 19801              	.LASF86:
 19802 0639 62696B65 		.ascii	"bike_roll_lpf\000"
 19802      5F726F6C 
 19802      6C5F6C70 
 19802      6600
 19803              	.LASF130:
 19804 0647 494E4552 		.ascii	"INERTIAL\000"
 19804      5449414C 
 19804      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 500


 19805              	.LASF5:
 19806 0650 6C6F6E67 		.ascii	"long unsigned int\000"
 19806      20756E73 
 19806      69676E65 
 19806      6420696E 
 19806      7400
 19807              	.LASF211:
 19808 0662 6D6F6465 		.ascii	"mode_loc\000"
 19808      5F6C6F63 
 19808      00
 19809              	.LASF188:
 19810 066b 53686F77 		.ascii	"ShowParamsDirector\000"
 19810      50617261 
 19810      6D734469 
 19810      72656374 
 19810      6F7200
 19811              	.LASF122:
 19812 067e 73746174 		.ascii	"status\000"
 19812      757300
 19813              	.LASF44:
 19814 0685 5A5F4158 		.ascii	"Z_AXIS\000"
 19814      495300
 19815              	.LASF47:
 19816 068c 795F6178 		.ascii	"y_axis\000"
 19816      697300
 19817              	.LASF270:
 19818 0693 6D6F7665 		.ascii	"mover_pan\000"
 19818      725F7061 
 19818      6E00
 19819              	.LASF174:
 19820 069d 7469636B 		.ascii	"tick\000"
 19820      00
 19821              	.LASF68:
 19822 06a2 616E676C 		.ascii	"angle_rad\000"
 19822      655F7261 
 19822      6400
 19823              	.LASF91:
 19824 06ac 61737469 		.ascii	"astim_enable\000"
 19824      6D5F656E 
 19824      61626C65 
 19824      00
 19825              	.LASF221:
 19826 06b9 6D656D6F 		.ascii	"memory_number\000"
 19826      72795F6E 
 19826      756D6265 
 19826      7200
 19827              	.LASF249:
 19828 06c7 434D445F 		.ascii	"CMD_AT\000"
 19828      415400
 19829              	.LASF228:
 19830 06ce 65786974 		.ascii	"exitpars\000"
 19830      70617273 
 19830      00
 19831              	.LASF197:
 19832 06d7 53686F77 		.ascii	"ShowLimits\000"
 19832      4C696D69 
 19832      747300
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 501


 19833              	.LASF57:
 19834 06e2 616E676C 		.ascii	"angle\000"
 19834      6500
 19835              	.LASF61:
 19836 06e8 7261775F 		.ascii	"raw_invertion\000"
 19836      696E7665 
 19836      7274696F 
 19836      6E00
 19837              	.LASF80:
 19838 06f6 494D555F 		.ascii	"IMU_SENSOR\000"
 19838      53454E53 
 19838      4F5200
 19839              	.LASF246:
 19840 0701 47657441 		.ascii	"GetAnaposOffsetZero\000"
 19840      6E61706F 
 19840      734F6666 
 19840      7365745A 
 19840      65726F00 
 19841              	.LASF284:
 19842 0715 61637475 		.ascii	"actual_cmd\000"
 19842      616C5F63 
 19842      6D6400
 19843              	.LASF145:
 19844 0720 7469636B 		.ascii	"ticks\000"
 19844      7300
 19845              	.LASF154:
 19846 0726 706F7369 		.ascii	"position_default\000"
 19846      74696F6E 
 19846      5F646566 
 19846      61756C74 
 19846      00
 19847              	.LASF279:
 19848 0737 6973725F 		.ascii	"isr_START_check_counter\000"
 19848      53544152 
 19848      545F6368 
 19848      65636B5F 
 19848      636F756E 
 19849              	.LASF204:
 19850 074f 76657262 		.ascii	"verbose\000"
 19850      6F736500 
 19851              	.LASF6:
 19852 0757 6C6F6E67 		.ascii	"long long int\000"
 19852      206C6F6E 
 19852      6720696E 
 19852      7400
 19853              	.LASF198:
 19854 0765 6563686F 		.ascii	"echo\000"
 19854      00
 19855              	.LASF278:
 19856 076a 616E6170 		.ascii	"anapos_offset\000"
 19856      6F735F6F 
 19856      66667365 
 19856      7400
 19857              	.LASF265:
 19858 0778 70616E5F 		.ascii	"pan_qpower_stat\000"
 19858      71706F77 
 19858      65725F73 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 502


 19858      74617400 
 19859              	.LASF85:
 19860 0788 62696B65 		.ascii	"bike_pitch_lpf\000"
 19860      5F706974 
 19860      63685F6C 
 19860      706600
 19861              	.LASF183:
 19862 0797 6162735F 		.ascii	"abs_current_t\000"
 19862      63757272 
 19862      656E745F 
 19862      7400
 19863              	.LASF22:
 19864 07a5 66627974 		.ascii	"fbyte\000"
 19864      6500
 19865              	.LASF17:
 19866 07ab 646F7562 		.ascii	"double\000"
 19866      6C6500
 19867              	.LASF195:
 19868 07b2 53686F77 		.ascii	"ShowParamsKiTilt\000"
 19868      50617261 
 19868      6D734B69 
 19868      54696C74 
 19868      00
 19869              	.LASF213:
 19870 07c3 65786368 		.ascii	"exchange\000"
 19870      616E6765 
 19870      00
 19871              	.LASF252:
 19872 07cc 41646356 		.ascii	"AdcValue\000"
 19872      616C7565 
 19872      00
 19873              	.LASF206:
 19874 07d5 75696478 		.ascii	"uidx\000"
 19874      00
 19875              	.LASF119:
 19876 07da 466C6F61 		.ascii	"Float_ASTIM\000"
 19876      745F4153 
 19876      54494D00 
 19877              	.LASF248:
 19878 07e6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 19878      52784275 
 19878      66666572 
 19878      00
 19879              	.LASF199:
 19880 07f3 74696D65 		.ascii	"timeout\000"
 19880      6F757400 
 19881              	.LASF16:
 19882 07fb 666C6F61 		.ascii	"float\000"
 19882      7400
 19883              	.LASF217:
 19884 0801 616E616F 		.ascii	"anaout_gain\000"
 19884      75745F67 
 19884      61696E00 
 19885              	.LASF134:
 19886 080d 76696272 		.ascii	"vibration\000"
 19886      6174696F 
 19886      6E00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 503


 19887              	.LASF8:
 19888 0817 756E7369 		.ascii	"unsigned int\000"
 19888      676E6564 
 19888      20696E74 
 19888      00
 19889              	.LASF238:
 19890 0824 6D795F70 		.ascii	"my_pm_max\000"
 19890      6D5F6D61 
 19890      7800
 19891              	.LASF212:
 19892 082e 696E7665 		.ascii	"invertion\000"
 19892      7274696F 
 19892      6E00
 19893              	.LASF260:
 19894 0838 70616E5F 		.ascii	"pan_absolute_sensor\000"
 19894      6162736F 
 19894      6C757465 
 19894      5F73656E 
 19894      736F7200 
 19895              	.LASF55:
 19896 084c 706F7369 		.ascii	"position\000"
 19896      74696F6E 
 19896      00
 19897              	.LASF35:
 19898 0855 67656E65 		.ascii	"general\000"
 19898      72616C00 
 19899              	.LASF282:
 19900 085d 57617665 		.ascii	"WaveDAC8_wave_square\000"
 19900      44414338 
 19900      5F776176 
 19900      655F7371 
 19900      75617265 
 19901              	.LASF105:
 19902 0872 6D617374 		.ascii	"master_enc_sample_delta\000"
 19902      65725F65 
 19902      6E635F73 
 19902      616D706C 
 19902      655F6465 
 19903              	.LASF56:
 19904 088a 76656C6F 		.ascii	"velocity\000"
 19904      63697479 
 19904      00
 19905              	.LASF233:
 19906 0893 74696C74 		.ascii	"tilt_joy_delta\000"
 19906      5F6A6F79 
 19906      5F64656C 
 19906      746100
 19907              	.LASF203:
 19908 08a2 7363616E 		.ascii	"scanner2\000"
 19908      6E657232 
 19908      00
 19909              	.LASF118:
 19910 08ab 63757272 		.ascii	"current\000"
 19910      656E7400 
 19911              	.LASF192:
 19912 08b3 53686F77 		.ascii	"ShowParamsGainAnaout\000"
 19912      50617261 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 504


 19912      6D734761 
 19912      696E416E 
 19912      616F7574 
 19913              	.LASF42:
 19914 08c8 61636365 		.ascii	"acceleration_lpf\000"
 19914      6C657261 
 19914      74696F6E 
 19914      5F6C7066 
 19914      00
 19915              	.LASF214:
 19916 08d9 6F666673 		.ascii	"offset\000"
 19916      657400
 19917              	.LASF111:
 19918 08e0 69657272 		.ascii	"ierror\000"
 19918      6F7200
 19919              	.LASF257:
 19920 08e7 70616E5F 		.ascii	"pan_axis\000"
 19920      61786973 
 19920      00
 19921              	.LASF99:
 19922 08f0 4761696E 		.ascii	"Gain_ANAOUT\000"
 19922      5F414E41 
 19922      4F555400 
 19923              	.LASF97:
 19924 08fc 4B736966 		.ascii	"Ksif\000"
 19924      00
 19925              	.LASF170:
 19926 0901 73636172 		.ascii	"scarto\000"
 19926      746F00
 19927              	.LASF26:
 19928 0908 64697265 		.ascii	"director\000"
 19928      63746F72 
 19928      00
 19929              	.LASF285:
 19930 0911 5553425F 		.ascii	"USB_Check_prev\000"
 19930      43686563 
 19930      6B5F7072 
 19930      657600
 19931              	.LASF247:
 19932 0920 5F5F6374 		.ascii	"__ctype_ptr__\000"
 19932      7970655F 
 19932      7074725F 
 19932      5F00
 19933              	.LASF34:
 19934 092e 474F4245 		.ascii	"GOBEE_FAULTS\000"
 19934      455F4641 
 19934      554C5453 
 19934      00
 19935              	.LASF280:
 19936 093b 6973725F 		.ascii	"isr_STOP_check_counter\000"
 19936      53544F50 
 19936      5F636865 
 19936      636B5F63 
 19936      6F756E74 
 19937              	.LASF148:
 19938 0952 73746570 		.ascii	"steps_to_move_double\000"
 19938      735F746F 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 505


 19938      5F6D6F76 
 19938      655F646F 
 19938      75626C65 
 19939              	.LASF21:
 19940 0967 6C6F6E67 		.ascii	"long double\000"
 19940      20646F75 
 19940      626C6500 
 19941              	.LASF23:
 19942 0973 666E756D 		.ascii	"fnum\000"
 19942      00
 19943              	.LASF64:
 19944 0978 7261775F 		.ascii	"raw_limit_min\000"
 19944      6C696D69 
 19944      745F6D69 
 19944      6E00
 19945              	.LASF218:
 19946 0986 70617468 		.ascii	"path_n\000"
 19946      5F6E00
 19947              	.LASF29:
 19948 098d 795F6163 		.ascii	"y_acc_ADC_offset\000"
 19948      635F4144 
 19948      435F6F66 
 19948      66736574 
 19948      00
 19949              	.LASF70:
 19950 099e 7261775F 		.ascii	"raw_adc_p0\000"
 19950      6164635F 
 19950      703000
 19951              	.LASF184:
 19952 09a9 70776361 		.ascii	"pwcalc\000"
 19952      6C6300
 19953              	.LASF103:
 19954 09b0 4D434441 		.ascii	"MCDATAS\000"
 19954      54415300 
 19955              	.LASF65:
 19956 09b8 7261775F 		.ascii	"raw_limit_hysteresis\000"
 19956      6C696D69 
 19956      745F6879 
 19956      73746572 
 19956      65736973 
 19957              	.LASF83:
 19958 09cd 62696B65 		.ascii	"bike_roll\000"
 19958      5F726F6C 
 19958      6C00
 19959              	.LASF7:
 19960 09d7 6C6F6E67 		.ascii	"long long unsigned int\000"
 19960      206C6F6E 
 19960      6720756E 
 19960      7369676E 
 19960      65642069 
 19961              	.LASF77:
 19962 09ee 726F6C6C 		.ascii	"roll_invertion\000"
 19962      5F696E76 
 19962      65727469 
 19962      6F6E00
 19963              	.LASF139:
 19964 09fd 636F6D6D 		.ascii	"command\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 506


 19964      616E6400 
 19965              	.LASF166:
 19966 0a05 6D657373 		.ascii	"messg\000"
 19966      6700
 19967              	.LASF125:
 19968 0a0b 4D4F544F 		.ascii	"MOTOR_AXIS\000"
 19968      525F4158 
 19968      495300
 19969              	.LASF262:
 19970 0a16 70616E5F 		.ascii	"pan_absolute_sensor_stat\000"
 19970      6162736F 
 19970      6C757465 
 19970      5F73656E 
 19970      736F725F 
 19971              	.LASF258:
 19972 0a2f 74696C74 		.ascii	"tilt_axis\000"
 19972      5F617869 
 19972      7300
 19973              	.LASF167:
 19974 0a39 6D65616E 		.ascii	"mean\000"
 19974      00
 19975              	.LASF45:
 19976 0a3e 414E414C 		.ascii	"ANALOG_3D_ACCELEROMETER\000"
 19976      4F475F33 
 19976      445F4143 
 19976      43454C45 
 19976      524F4D45 
 19977              	.LASF205:
 19978 0a56 72647374 		.ascii	"rdstat\000"
 19978      617400
 19979              	.LASF149:
 19980 0a5d 73746570 		.ascii	"steps_to_move\000"
 19980      735F746F 
 19980      5F6D6F76 
 19980      6500
 19981              	.LASF236:
 19982 0a6b 6D795F72 		.ascii	"my_rpm\000"
 19982      706D00
 19983              	.LASF273:
 19984 0a72 716D656D 		.ascii	"qmemory_standard_address\000"
 19984      6F72795F 
 19984      7374616E 
 19984      64617264 
 19984      5F616464 
 19985              	.LASF164:
 19986 0a8b 74747261 		.ascii	"ttrap_num\000"
 19986      705F6E75 
 19986      6D00
 19987              	.LASF173:
 19988 0a95 69746572 		.ascii	"iteration_num\000"
 19988      6174696F 
 19988      6E5F6E75 
 19988      6D00
 19989              	.LASF82:
 19990 0aa3 62696B65 		.ascii	"bike_pitch\000"
 19990      5F706974 
 19990      636800
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 507


 19991              	.LASF88:
 19992 0aae 63616D5F 		.ascii	"cam_gyrotilt\000"
 19992      6779726F 
 19992      74696C74 
 19992      00
 19993              	.LASF101:
 19994 0abb 6C696D69 		.ascii	"limit_control\000"
 19994      745F636F 
 19994      6E74726F 
 19994      6C00
 19995              	.LASF185:
 19996 0ac9 7663616C 		.ascii	"vcalc\000"
 19996      6300
 19997              	.LASF78:
 19998 0acf 70697463 		.ascii	"pitch_roll_exchange\000"
 19998      685F726F 
 19998      6C6C5F65 
 19998      78636861 
 19998      6E676500 
 19999              	.LASF151:
 20000 0ae3 70617468 		.ascii	"path_to_move\000"
 20000      5F746F5F 
 20000      6D6F7665 
 20000      00
 20001              	.LASF172:
 20002 0af0 76617269 		.ascii	"variance\000"
 20002      616E6365 
 20002      00
 20003              	.LASF100:
 20004 0af9 636F6C6F 		.ascii	"color\000"
 20004      7200
 20005              	.LASF24:
 20006 0aff 666C6F61 		.ascii	"floatEE\000"
 20006      74454500 
 20007              	.LASF157:
 20008 0b07 6E756D62 		.ascii	"number\000"
 20008      657200
 20009              	.LASF27:
 20010 0b0e 62657461 		.ascii	"beta\000"
 20010      00
 20011              	.LASF237:
 20012 0b13 6D795F70 		.ascii	"my_pm_t\000"
 20012      6D5F7400 
 20013              	.LASF226:
 20014 0b1b 64756D6D 		.ascii	"dummy\000"
 20014      7900
 20015              	.LASF202:
 20016 0b21 52656164 		.ascii	"ReadUSBbuffer\000"
 20016      55534262 
 20016      75666665 
 20016      7200
 20017              	.LASF190:
 20018 0b2f 53686F77 		.ascii	"ShowParamsAstim\000"
 20018      50617261 
 20018      6D734173 
 20018      74696D00 
 20019              	.LASF245:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 508


 20020 0b3f 5553425F 		.ascii	"USB_Check\000"
 20020      43686563 
 20020      6B00
 20021              	.LASF67:
 20022 0b49 41425350 		.ascii	"ABSPOS_SENSOR\000"
 20022      4F535F53 
 20022      454E534F 
 20022      5200
 20023              	.LASF158:
 20024 0b57 434C555F 		.ascii	"CLU_STATEMACHINE\000"
 20024      53544154 
 20024      454D4143 
 20024      48494E45 
 20024      00
 20025              	.LASF286:
 20026 0b68 736C6567 		.ascii	"slegenda\000"
 20026      656E6461 
 20026      00
 20027              	.LASF144:
 20028 0b71 74726170 		.ascii	"trapezoid_index\000"
 20028      657A6F69 
 20028      645F696E 
 20028      64657800 
 20029              	.LASF127:
 20030 0b81 54494D45 		.ascii	"TIMECODE\000"
 20030      434F4445 
 20030      00
 20031              	.LASF215:
 20032 0b8a 7261775F 		.ascii	"raw_limit_hyst\000"
 20032      6C696D69 
 20032      745F6879 
 20032      737400
 20033              	.LASF10:
 20034 0b99 75696E74 		.ascii	"uint8\000"
 20034      3800
 20035              	.LASF110:
 20036 0b9f 6572726F 		.ascii	"error_bef\000"
 20036      725F6265 
 20036      6600
 20037              	.LASF43:
 20038 0ba9 595F4158 		.ascii	"Y_AXIS\000"
 20038      495300
 20039              	.LASF193:
 20040 0bb0 53686F77 		.ascii	"ShowParamsAnaoutSelectedAxis\000"
 20040      50617261 
 20040      6D73416E 
 20040      616F7574 
 20040      53656C65 
 20041              	.LASF46:
 20042 0bcd 785F6178 		.ascii	"x_axis\000"
 20042      697300
 20043              	.LASF2:
 20044 0bd4 73686F72 		.ascii	"short int\000"
 20044      7420696E 
 20044      7400
 20045              	.LASF133:
 20046 0bde 6A756D70 		.ascii	"jump\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 509


 20046      00
 20047              	.LASF25:
 20048 0be3 6D6F6465 		.ascii	"mode\000"
 20048      00
 20049              	.LASF169:
 20050 0be8 72616E67 		.ascii	"range\000"
 20050      6500
 20051              	.LASF136:
 20052 0bee 6D617070 		.ascii	"mapping_sm_status\000"
 20052      696E675F 
 20052      736D5F73 
 20052      74617475 
 20052      7300
 20053              	.LASF53:
 20054 0c00 7265736F 		.ascii	"resolution\000"
 20054      6C757469 
 20054      6F6E00
 20055              	.LASF220:
 20056 0c0b 636C755F 		.ascii	"clu_pause\000"
 20056      70617573 
 20056      6500
 20057              	.LASF120:
 20058 0c15 61737469 		.ascii	"astim_ZCsync\000"
 20058      6D5F5A43 
 20058      73796E63 
 20058      00
 20059              	.LASF219:
 20060 0c22 636C755F 		.ascii	"clu_number\000"
 20060      6E756D62 
 20060      657200
 20061              	.LASF256:
 20062 0c2d 6673616D 		.ascii	"fsampling\000"
 20062      706C696E 
 20062      6700
 20063              	.LASF31:
 20064 0c37 6A756D70 		.ascii	"jump_g_threshold\000"
 20064      5F675F74 
 20064      68726573 
 20064      686F6C64 
 20064      00
 20065              	.LASF38:
 20066 0c48 74696C74 		.ascii	"tilt_FE_FAULT_prescaler\000"
 20066      5F46455F 
 20066      4641554C 
 20066      545F7072 
 20066      65736361 
 20067              	.LASF163:
 20068 0c60 70747261 		.ascii	"ptrap_num\000"
 20068      705F6E75 
 20068      6D00
 20069              	.LASF74:
 20070 0c6a 494D555F 		.ascii	"IMU_SENS_PARAMETER\000"
 20070      53454E53 
 20070      5F504152 
 20070      414D4554 
 20070      455200
 20071              	.LASF232:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 510


 20072 0c7d 70616E5F 		.ascii	"pan_joy_delta\000"
 20072      6A6F795F 
 20072      64656C74 
 20072      6100
 20073              	.LASF261:
 20074 0c8b 74696C74 		.ascii	"tilt_absolute_sensor\000"
 20074      5F616273 
 20074      6F6C7574 
 20074      655F7365 
 20074      6E736F72 
 20075              	.LASF175:
 20076 0ca0 504F5745 		.ascii	"POWERCALC\000"
 20076      5243414C 
 20076      4300
 20077              	.LASF176:
 20078 0caa 6162735F 		.ascii	"abs_omega_t\000"
 20078      6F6D6567 
 20078      615F7400 
 20079              	.LASF180:
 20080 0cb6 656E635F 		.ascii	"enc_position_bef\000"
 20080      706F7369 
 20080      74696F6E 
 20080      5F626566 
 20080      00
 20081              	.LASF288:
 20082 0cc7 2E5C636F 		.ascii	".\\console.c\000"
 20082      6E736F6C 
 20082      652E6300 
 20083              	.LASF239:
 20084 0cd3 6D795F70 		.ascii	"my_pm_med\000"
 20084      6D5F6D65 
 20084      6400
 20085              	.LASF14:
 20086 0cdd 696E7431 		.ascii	"int16\000"
 20086      3600
 20087              	.LASF112:
 20088 0ce3 64657272 		.ascii	"derror\000"
 20088      6F7200
 20089              	.LASF272:
 20090 0cea 715F7461 		.ascii	"q_table\000"
 20090      626C6500 
 20091              	.LASF191:
 20092 0cf2 70617869 		.ascii	"paxis\000"
 20092      7300
 20093              	.LASF72:
 20094 0cf8 73616D70 		.ascii	"sample_d2\000"
 20094      6C655F64 
 20094      3200
 20095              	.LASF269:
 20096 0d02 74696C74 		.ascii	"tilt_torque_stat\000"
 20096      5F746F72 
 20096      7175655F 
 20096      73746174 
 20096      00
 20097              	.LASF277:
 20098 0d13 61616363 		.ascii	"aacc\000"
 20098      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 511


 20099              	.LASF3:
 20100 0d18 73686F72 		.ascii	"short unsigned int\000"
 20100      7420756E 
 20100      7369676E 
 20100      65642069 
 20100      6E7400
 20101              	.LASF230:
 20102 0d2b 50736176 		.ascii	"PsavetoEE\000"
 20102      65746F45 
 20102      4500
 20103              	.LASF92:
 20104 0d35 61737469 		.ascii	"astim_type\000"
 20104      6D5F7479 
 20104      706500
 20105              	.LASF179:
 20106 0d40 61637475 		.ascii	"actual_abs_motor_velocity\000"
 20106      616C5F61 
 20106      62735F6D 
 20106      6F746F72 
 20106      5F76656C 
 20107              	.LASF15:
 20108 0d5a 696E7433 		.ascii	"int32\000"
 20108      3200
 20109              	.LASF216:
 20110 0d60 73746570 		.ascii	"step_abs_ratio\000"
 20110      5F616273 
 20110      5F726174 
 20110      696F00
 20111              	.LASF89:
 20112 0d6f 63616D5F 		.ascii	"cam_gyroroll\000"
 20112      6779726F 
 20112      726F6C6C 
 20112      00
 20113              	.LASF229:
 20114 0d7c 65786974 		.ascii	"exit_showencf\000"
 20114      5F73686F 
 20114      77656E63 
 20114      6600
 20115              	.LASF69:
 20116 0d8a 736C6176 		.ascii	"slave_encoder_step_p0\000"
 20116      655F656E 
 20116      636F6465 
 20116      725F7374 
 20116      65705F70 
 20117              	.LASF263:
 20118 0da0 74696C74 		.ascii	"tilt_absolute_sensor_stat\000"
 20118      5F616273 
 20118      6F6C7574 
 20118      655F7365 
 20118      6E736F72 
 20119              	.LASF165:
 20120 0dba 53544154 		.ascii	"STATISTICS\000"
 20120      49535449 
 20120      435300
 20121              	.LASF138:
 20122 0dc5 696E6572 		.ascii	"inertial\000"
 20122      7469616C 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\ccPXMSFB.s 			page 512


 20122      00
 20123              	.LASF275:
 20124 0dce 6576656E 		.ascii	"events\000"
 20124      747300
 20125              	.LASF59:
 20126 0dd5 70617261 		.ascii	"param\000"
 20126      6D00
 20127              	.LASF116:
 20128 0ddb 70776D5F 		.ascii	"pwm_var\000"
 20128      76617200 
 20129              	.LASF11:
 20130 0de3 75696E74 		.ascii	"uint16\000"
 20130      313600
 20131              	.LASF207:
 20132 0dea 75696479 		.ascii	"uidy\000"
 20132      00
 20133              	.LASF241:
 20134 0def 636C755F 		.ascii	"clu_step\000"
 20134      73746570 
 20134      00
 20135              	.LASF255:
 20136 0df8 636C755F 		.ascii	"clu_sm\000"
 20136      736D00
 20137              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br

ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"console.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	TORQUESTAT,32,8
  19              		.global	userInputBuffer
  20              		.bss
  21              		.align	2
  22              		.type	userInputBuffer, %object
  23              		.size	userInputBuffer, 40
  24              	userInputBuffer:
  25 0000 00000000 		.space	40
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.comm	actual_cmd,45,4
  27              		.comm	USB_Check_prev,1,1
  28              		.global	slegenda
  29              		.align	2
  30              		.type	slegenda, %object
  31              		.size	slegenda, 15
  32              	slegenda:
  33 0028 00000000 		.space	15
  33      00000000 
  33      00000000 
  33      000000
  34 0037 00       		.section	.rodata
  35              		.align	2
  36              	.LC0:
  37 0000 28534D5F 		.ascii	"(SM_ON_ORIGIN)\000"
  37      4F4E5F4F 
  37      52494749 
  37      4E2900
  38 000f 00       		.align	2
  39              	.LC1:
  40 0010 28534D5F 		.ascii	"(SM_MOVING_TO_FACE)\000"
  40      4D4F5649 
  40      4E475F54 
  40      4F5F4641 
  40      43452900 
  41              		.align	2
  42              	.LC2:
  43 0024 28534D5F 		.ascii	"(SM_ON_FACE)\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 2


  43      4F4E5F46 
  43      41434529 
  43      00
  44 0031 000000   		.align	2
  45              	.LC3:
  46 0034 28534D5F 		.ascii	"(SM_MOVING_TO_ORIGIN)\000"
  46      4D4F5649 
  46      4E475F54 
  46      4F5F4F52 
  46      4947494E 
  47 004a 0000     		.align	2
  48              	.LC4:
  49 004c 28534D5F 		.ascii	"(SM_MOVING_PANORAMIC)\000"
  49      4D4F5649 
  49      4E475F50 
  49      414E4F52 
  49      414D4943 
  50 0062 0000     		.align	2
  51              	.LC5:
  52 0064 28534D5F 		.ascii	"(SM_MOVING_JUMP)\000"
  52      4D4F5649 
  52      4E475F4A 
  52      554D5029 
  52      00
  53 0075 000000   		.align	2
  54              	.LC6:
  55 0078 28534D5F 		.ascii	"(SM_MOVING_TO_WHEEL)\000"
  55      4D4F5649 
  55      4E475F54 
  55      4F5F5748 
  55      45454C29 
  56 008d 000000   		.align	2
  57              	.LC7:
  58 0090 28534D5F 		.ascii	"(SM_ON_WHEEL)\000"
  58      4F4E5F57 
  58      4845454C 
  58      2900
  59 009e 0000     		.align	2
  60              	.LC8:
  61 00a0 28534D5F 		.ascii	"(SM_STANDBY)\000"
  61      5354414E 
  61      44425929 
  61      00
  62 00ad 000000   		.align	2
  63              	.LC9:
  64 00b0 282A6572 		.ascii	"(*err)\000"
  64      722900
  65              		.section	.text.ShowStatusMappingSM,"ax",%progbits
  66              		.align	2
  67              		.global	ShowStatusMappingSM
  68              		.thumb
  69              		.thumb_func
  70              		.type	ShowStatusMappingSM, %function
  71              	ShowStatusMappingSM:
  72              	.LFB56:
  73              		.file 1 ".\\console.c"
   1:.\console.c   **** /* ==============================================
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 3


   2:.\console.c   ****  *                                              *
   3:.\console.c   ****  * GoBee Director Console Interface functions	*
   4:.\console.c   ****  *												*
   5:.\console.c   ****  * Copyright 2017 Gobee Srl		         		*
   6:.\console.c   ****  * Author : Graziano G. Ravizza                 *
   7:.\console.c   ****  * All Rights Reserved							*
   8:.\console.c   ****  * UNPUBLISHED, LICENSED SOFTWARE.				*
   9:.\console.c   ****  *												*
  10:.\console.c   ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION		*
  11:.\console.c   ****  * WHICH IS THE PROPERTY OF Gobee Srl			*
  12:.\console.c   ****  * ==============================================
  13:.\console.c   **** */
  14:.\console.c   **** 
  15:.\console.c   **** /* Include files */
  16:.\console.c   **** #include <device.h>
  17:.\console.c   **** #include <stdio.h>
  18:.\console.c   **** #include <stdlib.h>
  19:.\console.c   **** #include <string.h>
  20:.\console.c   **** #include <math.h>
  21:.\console.c   **** 
  22:.\console.c   **** #include <gobee.h>
  23:.\console.c   **** #include <console.h>
  24:.\console.c   **** #include <systrings.h>
  25:.\console.c   **** #include <gobeelib.h>
  26:.\console.c   **** #include <ITG-3701.h>
  27:.\console.c   **** #include <IMU_UM7.h>
  28:.\console.c   **** #include <XTR-8LR100.h>
  29:.\console.c   **** #include <mover.h>
  30:.\console.c   **** #include <motor_CTRL.h>
  31:.\console.c   **** #include <pid_lib.h>
  32:.\console.c   **** #include <My_I2C_lib.h>
  33:.\console.c   **** #include <estimators.h>
  34:.\console.c   **** #include <clu.h>
  35:.\console.c   **** #include <gml.h>
  36:.\console.c   **** #include <statistics.h>
  37:.\console.c   **** #include <torquestat.h>
  38:.\console.c   **** 
  39:.\console.c   **** 
  40:.\console.c   **** /* External Global Wars */
  41:.\console.c   **** extern struct GOBEE_PARAMS gobee_param;
  42:.\console.c   **** extern int16 AdcValue[ADC_MUX_LENGHT];
  43:.\console.c   **** 
  44:.\console.c   **** extern uint8 machine_state;			/* Initial Machine State = POWERON 					*/
  45:.\console.c   **** 									/* Machine States = [POWERON | OPERATIVE | FAULT]	*/
  46:.\console.c   **** 
  47:.\console.c   **** /* GoBee Faults structure */
  48:.\console.c   **** extern struct GOBEE_FAULTS gobeeFaults;	
  49:.\console.c   **** 
  50:.\console.c   **** /* External CLU execution state machine */
  51:.\console.c   **** extern struct CLU_STATEMACHINE clu_sm;		
  52:.\console.c   **** 
  53:.\console.c   **** /* extern Control Variables */
  54:.\console.c   **** extern float fsampling;			/* fsampling [kHz]							*/
  55:.\console.c   **** 
  56:.\console.c   **** 
  57:.\console.c   **** /* External Motor Axis 		 */
  58:.\console.c   **** extern struct MOTOR_AXIS pan_axis; 					/* PAN  Motor Axis Parameters & RT Datas			   */
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 4


  59:.\console.c   **** extern struct MOTOR_AXIS tilt_axis; 				/* TILT Motor Axis Parameters & RT Datas			   */
  60:.\console.c   **** extern struct MOTOR_AXIS *Selected_ANAOUT;			/* Selected Axis for Analog Output					   */
  61:.\console.c   **** 
  62:.\console.c   **** /* EXTERNAL Absolute Position Sensor */
  63:.\console.c   **** extern struct ABSPOS_SENSOR	pan_absolute_sensor;	/* PAN  Absolute Position Sensor Parameters & RT D
  64:.\console.c   **** extern struct ABSPOS_SENSOR	tilt_absolute_sensor;	/* TILT Absolute Position Sensor Parameters & RT 
  65:.\console.c   **** 
  66:.\console.c   **** /* extern axis absolute sensor STATISTICS	*/
  67:.\console.c   **** extern struct STATISTICS pan_absolute_sensor_stat;	/* PAN  Absolute Position Sensor Statistics Data
  68:.\console.c   **** extern struct STATISTICS tilt_absolute_sensor_stat;	/* TILT Absolute Position Sensor Statistics Dat
  69:.\console.c   **** 
  70:.\console.c   **** /* extern axis current and power STATISTICS	*/
  71:.\console.c   **** extern struct STATISTICS pan_current_stat;			/* PAN  Current  Statistic    [A]           (Motor Tor
  72:.\console.c   **** extern struct STATISTICS pan_qpower_stat;			/* PAN  quasi-power Statistic [A * rad/sec] (Motor Powe
  73:.\console.c   **** extern struct STATISTICS tilt_current_stat;			/* TILT Current  Statistic    [A]           (Motor To
  74:.\console.c   **** extern struct STATISTICS tilt_qpower_stat;			/* TILT quasi-power Statistic [A * rad/sec] (Motor Pow
  75:.\console.c   **** 
  76:.\console.c   **** /* extern axis TORQUE Estimator	*/
  77:.\console.c   **** extern struct TORQUESTAT pan_torque_stat;			/* PAN  Torque Statistics Real Time Datas	*/
  78:.\console.c   **** extern struct TORQUESTAT tilt_torque_stat;			/* TILT Torque Statistics Real Time Datas	*/
  79:.\console.c   **** 
  80:.\console.c   **** /* EXTERN MOVER PATH Array */
  81:.\console.c   **** extern path_type path[PATH_N_MAX];		/* path array structure 	*/
  82:.\console.c   **** extern path_type path_to_home;			/* path to home structure instatiation		*/
  83:.\console.c   **** 
  84:.\console.c   **** /* EXTERN MOVER PAN&TILT PATHs */
  85:.\console.c   **** extern mover_type mover_pan;			/* mover PAN structure 		*/
  86:.\console.c   **** extern mover_type mover_tilt;			/* mover TILT structure 	*/
  87:.\console.c   **** 
  88:.\console.c   **** /* external Q elements (shots) ARRAY	*/
  89:.\console.c   **** extern struct QELEMENT q[MAX_Q_MEMORIES_SAFE];
  90:.\console.c   **** 
  91:.\console.c   **** /* external [Q number --> Q memory index] table for fast indexing */
  92:.\console.c   **** extern uint8 q_table[MAX_Q_NUMBER_SAFE];
  93:.\console.c   **** extern uint8 qmemory_standard_address[MAX_Q_NUMBER_SAFE]; 
  94:.\console.c   **** 
  95:.\console.c   **** /* EXTERN CLU Sequence Array 	*/
  96:.\console.c   **** extern uint8 clu_sequence[MAX_CLU_SEQUENCE_STEPS];
  97:.\console.c   **** 
  98:.\console.c   **** /* external events structure	*/
  99:.\console.c   **** extern struct EVENTS events;
 100:.\console.c   **** 
 101:.\console.c   **** /* extern IMU UM7 vars */ 
 102:.\console.c   **** #if IMU_UM7_ENABLED
 103:.\console.c   **** extern EULER_ANGLES euler_angles; 		/* Struttura in cui vengono messi gli angoli di Eulero misurati
 104:.\console.c   **** #endif
 105:.\console.c   **** 
 106:.\console.c   **** /* extern IMU sensor vars */
 107:.\console.c   **** extern struct IMU_SENSOR	IMU_sensor;		/* Struttura dei dati della IMU */
 108:.\console.c   **** 
 109:.\console.c   **** /* external ITG-3701 digital gyro vars */
 110:.\console.c   **** extern float gRes;      				// scale resolutions per LSB for the sensors
 111:.\console.c   **** extern int16 gyroCount[3];  			// Stores the 16-bit signed gyro output
 112:.\console.c   **** extern float gx, gy, gz; 				// variables to hold latest sensor data values 
 113:.\console.c   **** extern float gyroBias[3];			 	// Bias corrections for gyro, accelerometer, and magnetometer
 114:.\console.c   **** extern float temperature;          		// Stores the ITG3701yro internal chip temperature in degrees 
 115:.\console.c   **** 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 5


 116:.\console.c   **** /* extern accelerometer and gyroscopes and estimated Variables */
 117:.\console.c   **** extern int16 gyro_ADC_offset;			/* analog gyroscope ADC offset				*/
 118:.\console.c   **** 
 119:.\console.c   **** //extern float angle_estim_analog_gyro;	/* estimated angle [deg] from ADXRS646     (analog gyro) 		
 120:.\console.c   **** //extern float angle_estim_digital_gyro;	/* estimated angle [deg] from ADXRS453     (digital gyro)	
 121:.\console.c   **** //extern float angle_estim_acc;			/* estimated angle [deg] from ADXL203      (analog accelerometer)
 122:.\console.c   **** //extern float angle_estim_acc_lowpass;	/* Low Pass Filtered estimated angle [deg] (analog accelero
 123:.\console.c   **** 
 124:.\console.c   **** extern signed long system_dynamic_scalar;	/* x_acc_ADC^2 + y_acc_ADC^2 - (1g_ADC)^2						*/
 125:.\console.c   **** 
 126:.\console.c   **** //extern float gyro;					/* analog gyroscope float value						*/
 127:.\console.c   **** //extern float gyro_offset_fine;		/* fine Gyro offset									*/
 128:.\console.c   **** //extern float int_gyro;				/* estimated angle [deg] from ADXRS646				*/
 129:.\console.c   **** //extern float angle;					/* Complementary Filter Estimated angle float [deg]	*/
 130:.\console.c   **** extern float angle_lowpass;
 131:.\console.c   **** extern float agyro_mean;			/* analog gyro mean_value(t)						*/
 132:.\console.c   **** extern float agyro_mean_previous;	/* analog gyro mean_value(t-1)						*/
 133:.\console.c   **** extern uint32 iteration;			/* mean value iteration counter						*/
 134:.\console.c   **** extern uint8 agyro_messg;			/* analog gyro message passing console --> isr_ctrl	*/
 135:.\console.c   **** extern uint16 GyroNullPauseTicks;	/* centiseconds ticks counter for Gyroscope Autonull Procedure De
 136:.\console.c   **** 
 137:.\console.c   **** /* extern Analog ADXL325 3D accelerometer vars) */
 138:.\console.c   **** extern struct ANALOG_3D_ACCELEROMETER aacc;
 139:.\console.c   **** 
 140:.\console.c   **** /* GLOBAL Analog External ADXRS646 gyroscope vars) */
 141:.\console.c   **** extern struct ANALOG_GYRO agyro;
 142:.\console.c   **** 
 143:.\console.c   **** //extern Digital Gyroscope Vars
 144:.\console.c   **** extern unsigned long int dgyro_spi32;	/* ADXRS453 Digital Gyro 32 bit SPI Response			*/
 145:.\console.c   **** extern float dgyro_rate_float;			/* ADXRS453 Digital Gyro Rate (float) [deg/sec] 		*/
 146:.\console.c   **** extern float dgyro_mean;				/* digital gyro mean_value(t)							*/
 147:.\console.c   **** extern float dgyro_mean_of;				/* digital gyro ofsetted mean_value(t)					*/
 148:.\console.c   **** extern uint8 dgyro_messg;				/* digital gyro message passing console --> isr_ctrl	*/
 149:.\console.c   **** 
 150:.\console.c   **** /* extern anapos vars */
 151:.\console.c   **** extern float anapos;					/* Analog Position Output(t) 				*/
 152:.\console.c   **** extern int32 anapos_offset;				/* Analog Position Output Offset			*/
 153:.\console.c   **** 
 154:.\console.c   **** /* EXTERNAL CONTROL CHECK VARS */
 155:.\console.c   **** extern uint16 isr_START_check_counter;
 156:.\console.c   **** extern uint16 isr_STOP_check_counter;
 157:.\console.c   **** 
 158:.\console.c   **** /* EXTERNAL EEPROM Buffers */
 159:.\console.c   **** extern char8 EEreadBuffer[18];
 160:.\console.c   **** extern char8 EEwriteBuffer[18];
 161:.\console.c   **** 
 162:.\console.c   **** extern struct  GOBEE_FAULTS nemo_Faults;			/* Faults Flags Structure */
 163:.\console.c   **** 
 164:.\console.c   **** 
 165:.\console.c   **** /* ASTIM WAVES (3Hz - 3333 samples/sec */
 166:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_sine[WaveDAC8_WAVE_SINE_LENGTH];
 167:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_triangle[WaveDAC8_WAVE_TRIANGLE_LENGTH];
 168:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_square[WaveDAC8_WAVE_SQUARE_LENGTH];
 169:.\console.c   **** 
 170:.\console.c   **** /* Console Module Wars */
 171:.\console.c   **** char   userInputBuffer[40]="";		/* User Input Buffer from USB UART 	*/
 172:.\console.c   **** struct command actual_cmd;
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 6


 173:.\console.c   **** uint8  USB_Check_prev;				/* USB Check(t-1) 					*/
 174:.\console.c   **** char   slegenda[15]="";				/* hystogram legenda string 		*/
 175:.\console.c   **** 
 176:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 177:.\console.c   **** // Show Status of the Mapping State Machine Auxiliary Functions
 178:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 179:.\console.c   **** void ShowStatusMappingSM(uint8 status)
 180:.\console.c   **** {
  74              		.loc 1 180 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              	.LCFI2:
  88              		.cfi_def_cfa_register 7
  89 0006 0346     		mov	r3, r0
  90 0008 FB71     		strb	r3, [r7, #7]
 181:.\console.c   **** 	switch (status)
  91              		.loc 1 181 0
  92 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  93 000c 042B     		cmp	r3, #4
  94 000e 32D0     		beq	.L7
  95 0010 042B     		cmp	r3, #4
  96 0012 0BDC     		bgt	.L12
  97 0014 012B     		cmp	r3, #1
  98 0016 19D0     		beq	.L4
  99 0018 012B     		cmp	r3, #1
 100 001a 02DC     		bgt	.L13
 101 001c 002B     		cmp	r3, #0
 102 001e 0ED0     		beq	.L3
 103 0020 4CE0     		b	.L2
 104              	.L13:
 105 0022 022B     		cmp	r3, #2
 106 0024 19D0     		beq	.L5
 107 0026 032B     		cmp	r3, #3
 108 0028 1ED0     		beq	.L6
 109 002a 47E0     		b	.L2
 110              	.L12:
 111 002c 062B     		cmp	r3, #6
 112 002e 30D0     		beq	.L9
 113 0030 062B     		cmp	r3, #6
 114 0032 27DB     		blt	.L8
 115 0034 072B     		cmp	r3, #7
 116 0036 33D0     		beq	.L10
 117 0038 632B     		cmp	r3, #99
 118 003a 38D0     		beq	.L11
 119 003c 3EE0     		b	.L2
 120              	.L3:
 182:.\console.c   **** 	{
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 7


 183:.\console.c   **** 		case SM_ON_ORIGIN:
 184:.\console.c   **** 			printf("(SM_ON_ORIGIN)");
 121              		.loc 1 184 0
 122 003e 40F20000 		movw	r0, #:lower16:.LC0
 123 0042 C0F20000 		movt	r0, #:upper16:.LC0
 124 0046 FFF7FEFF 		bl	printf
 185:.\console.c   **** 		break;	
 125              		.loc 1 185 0
 126 004a 3EE0     		b	.L1
 127              	.L4:
 186:.\console.c   **** 		case SM_MOVING_TO_FACE:
 187:.\console.c   **** 			printf("(SM_MOVING_TO_FACE)");
 128              		.loc 1 187 0
 129 004c 40F20000 		movw	r0, #:lower16:.LC1
 130 0050 C0F20000 		movt	r0, #:upper16:.LC1
 131 0054 FFF7FEFF 		bl	printf
 188:.\console.c   **** 		break;		
 132              		.loc 1 188 0
 133 0058 37E0     		b	.L1
 134              	.L5:
 189:.\console.c   **** 		case SM_ON_FACE:
 190:.\console.c   **** 			printf("(SM_ON_FACE)");
 135              		.loc 1 190 0
 136 005a 40F20000 		movw	r0, #:lower16:.LC2
 137 005e C0F20000 		movt	r0, #:upper16:.LC2
 138 0062 FFF7FEFF 		bl	printf
 191:.\console.c   **** 		break;
 139              		.loc 1 191 0
 140 0066 30E0     		b	.L1
 141              	.L6:
 192:.\console.c   **** 		case SM_MOVING_TO_ORIGIN:
 193:.\console.c   **** 			printf("(SM_MOVING_TO_ORIGIN)");
 142              		.loc 1 193 0
 143 0068 40F20000 		movw	r0, #:lower16:.LC3
 144 006c C0F20000 		movt	r0, #:upper16:.LC3
 145 0070 FFF7FEFF 		bl	printf
 194:.\console.c   **** 		break;
 146              		.loc 1 194 0
 147 0074 29E0     		b	.L1
 148              	.L7:
 195:.\console.c   **** 		case SM_MOVING_PANORAMIC:
 196:.\console.c   **** 			printf("(SM_MOVING_PANORAMIC)");
 149              		.loc 1 196 0
 150 0076 40F20000 		movw	r0, #:lower16:.LC4
 151 007a C0F20000 		movt	r0, #:upper16:.LC4
 152 007e FFF7FEFF 		bl	printf
 197:.\console.c   **** 		break;
 153              		.loc 1 197 0
 154 0082 22E0     		b	.L1
 155              	.L8:
 198:.\console.c   **** 		case SM_MOVING_JUMP:
 199:.\console.c   **** 			printf("(SM_MOVING_JUMP)");
 156              		.loc 1 199 0
 157 0084 40F20000 		movw	r0, #:lower16:.LC5
 158 0088 C0F20000 		movt	r0, #:upper16:.LC5
 159 008c FFF7FEFF 		bl	printf
 200:.\console.c   **** 		break;
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 8


 160              		.loc 1 200 0
 161 0090 1BE0     		b	.L1
 162              	.L9:
 201:.\console.c   **** 		case SM_MOVING_TO_WHEEL:
 202:.\console.c   **** 			printf("(SM_MOVING_TO_WHEEL)");
 163              		.loc 1 202 0
 164 0092 40F20000 		movw	r0, #:lower16:.LC6
 165 0096 C0F20000 		movt	r0, #:upper16:.LC6
 166 009a FFF7FEFF 		bl	printf
 203:.\console.c   **** 		break;			
 167              		.loc 1 203 0
 168 009e 14E0     		b	.L1
 169              	.L10:
 204:.\console.c   **** 		case SM_ON_WHEEL:
 205:.\console.c   **** 			printf("(SM_ON_WHEEL)");
 170              		.loc 1 205 0
 171 00a0 40F20000 		movw	r0, #:lower16:.LC7
 172 00a4 C0F20000 		movt	r0, #:upper16:.LC7
 173 00a8 FFF7FEFF 		bl	printf
 206:.\console.c   **** 		break;			
 174              		.loc 1 206 0
 175 00ac 0DE0     		b	.L1
 176              	.L11:
 207:.\console.c   **** 		case SM_STANDBY:
 208:.\console.c   **** 			printf("(SM_STANDBY)");
 177              		.loc 1 208 0
 178 00ae 40F20000 		movw	r0, #:lower16:.LC8
 179 00b2 C0F20000 		movt	r0, #:upper16:.LC8
 180 00b6 FFF7FEFF 		bl	printf
 209:.\console.c   **** 		break;			
 181              		.loc 1 209 0
 182 00ba 06E0     		b	.L1
 183              	.L2:
 210:.\console.c   **** 		default:
 211:.\console.c   **** 			printf("(*err)");
 184              		.loc 1 211 0
 185 00bc 40F20000 		movw	r0, #:lower16:.LC9
 186 00c0 C0F20000 		movt	r0, #:upper16:.LC9
 187 00c4 FFF7FEFF 		bl	printf
 212:.\console.c   **** 		break;
 188              		.loc 1 212 0
 189 00c8 00BF     		nop
 190              	.L1:
 213:.\console.c   **** 	}
 214:.\console.c   **** }
 191              		.loc 1 214 0
 192 00ca 07F10807 		add	r7, r7, #8
 193 00ce BD46     		mov	sp, r7
 194 00d0 80BD     		pop	{r7, pc}
 195              		.cfi_endproc
 196              	.LFE56:
 197              		.size	ShowStatusMappingSM, .-ShowStatusMappingSM
 198 00d2 00BF     		.section	.rodata
 199 00b7 00       		.align	2
 200              	.LC10:
 201 00b8 28434C55 		.ascii	"(CLUSM_NOP)\000"
 201      534D5F4E 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 9


 201      4F502900 
 202              		.align	2
 203              	.LC11:
 204 00c4 28434C55 		.ascii	"(CLUSM_START)\000"
 204      534D5F53 
 204      54415254 
 204      2900
 205 00d2 0000     		.align	2
 206              	.LC12:
 207 00d4 28434C55 		.ascii	"(CLUSM_LINE_EXECUTING)\000"
 207      534D5F4C 
 207      494E455F 
 207      45584543 
 207      5554494E 
 208 00eb 00       		.align	2
 209              	.LC13:
 210 00ec 28434C55 		.ascii	"(CLUSM_PAUSE_EXECUTION)\000"
 210      534D5F50 
 210      41555345 
 210      5F455845 
 210      43555449 
 211              		.align	2
 212              	.LC14:
 213 0104 28434C55 		.ascii	"(CLUSM_PGOTO_EXECUTION)\000"
 213      534D5F50 
 213      474F544F 
 213      5F455845 
 213      43555449 
 214              		.align	2
 215              	.LC15:
 216 011c 28434C55 		.ascii	"(CLUSM_TGOTO_EXECUTION)\000"
 216      534D5F54 
 216      474F544F 
 216      5F455845 
 216      43555449 
 217              		.align	2
 218              	.LC16:
 219 0134 28434C55 		.ascii	"(CLUSM_PATH_EXECUTION)\000"
 219      534D5F50 
 219      4154485F 
 219      45584543 
 219      5554494F 
 220 014b 00       		.align	2
 221              	.LC17:
 222 014c 28434C55 		.ascii	"(CLUSM_LINE_EXECUTED)\000"
 222      534D5F4C 
 222      494E455F 
 222      45584543 
 222      55544544 
 223 0162 0000     		.align	2
 224              	.LC18:
 225 0164 28434C55 		.ascii	"(CLUSM_STOP)\000"
 225      534D5F53 
 225      544F5029 
 225      00
 226 0171 000000   		.align	2
 227              	.LC19:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 10


 228 0174 28434C55 		.ascii	"(CLUSM_END)\000"
 228      534D5F45 
 228      4E442900 
 229              		.section	.text.ShowCLUSM,"ax",%progbits
 230              		.align	2
 231              		.global	ShowCLUSM
 232              		.thumb
 233              		.thumb_func
 234              		.type	ShowCLUSM, %function
 235              	ShowCLUSM:
 236              	.LFB57:
 215:.\console.c   **** 
 216:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 217:.\console.c   **** // Show Status of the CLU Machine Auxiliary Functions
 218:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 219:.\console.c   **** void ShowCLUSM(uint8 status)
 220:.\console.c   **** {
 237              		.loc 1 220 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 8
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241 0000 80B5     		push	{r7, lr}
 242              	.LCFI3:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 7, -8
 245              		.cfi_offset 14, -4
 246 0002 82B0     		sub	sp, sp, #8
 247              	.LCFI4:
 248              		.cfi_def_cfa_offset 16
 249 0004 00AF     		add	r7, sp, #0
 250              	.LCFI5:
 251              		.cfi_def_cfa_register 7
 252 0006 0346     		mov	r3, r0
 253 0008 FB71     		strb	r3, [r7, #7]
 221:.\console.c   **** 	switch (status)
 254              		.loc 1 221 0
 255 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 256 000c 0C2B     		cmp	r3, #12
 257 000e 63D8     		bhi	.L16
 258 0010 01A2     		adr	r2, .L27
 259 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 260 0016 00BF     		.align	2
 261              	.L27:
 262 0018 4D000000 		.word	.L17+1
 263 001c 5B000000 		.word	.L18+1
 264 0020 69000000 		.word	.L19+1
 265 0024 77000000 		.word	.L20+1
 266 0028 85000000 		.word	.L21+1
 267 002c 93000000 		.word	.L22+1
 268 0030 A1000000 		.word	.L23+1
 269 0034 D9000000 		.word	.L16+1
 270 0038 D9000000 		.word	.L16+1
 271 003c D9000000 		.word	.L16+1
 272 0040 AF000000 		.word	.L24+1
 273 0044 BD000000 		.word	.L25+1
 274 0048 CB000000 		.word	.L26+1
 275              	.L17:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 11


 222:.\console.c   **** 	{
 223:.\console.c   **** 		case CLUSM_NOP:
 224:.\console.c   **** 			printf("(CLUSM_NOP)");
 276              		.loc 1 224 0
 277 004c 40F20000 		movw	r0, #:lower16:.LC10
 278 0050 C0F20000 		movt	r0, #:upper16:.LC10
 279 0054 FFF7FEFF 		bl	printf
 225:.\console.c   **** 		break;	
 280              		.loc 1 225 0
 281 0058 45E0     		b	.L15
 282              	.L18:
 226:.\console.c   **** 		case CLUSM_START:
 227:.\console.c   **** 			printf("(CLUSM_START)");
 283              		.loc 1 227 0
 284 005a 40F20000 		movw	r0, #:lower16:.LC11
 285 005e C0F20000 		movt	r0, #:upper16:.LC11
 286 0062 FFF7FEFF 		bl	printf
 228:.\console.c   **** 		break;
 287              		.loc 1 228 0
 288 0066 3EE0     		b	.L15
 289              	.L19:
 229:.\console.c   **** 		case CLUSM_LINE_EXECUTING:
 230:.\console.c   **** 			printf("(CLUSM_LINE_EXECUTING)");
 290              		.loc 1 230 0
 291 0068 40F20000 		movw	r0, #:lower16:.LC12
 292 006c C0F20000 		movt	r0, #:upper16:.LC12
 293 0070 FFF7FEFF 		bl	printf
 231:.\console.c   **** 		break;
 294              		.loc 1 231 0
 295 0074 37E0     		b	.L15
 296              	.L20:
 232:.\console.c   **** 		case CLUSM_PAUSE_EXECUTION:
 233:.\console.c   **** 			printf("(CLUSM_PAUSE_EXECUTION)");
 297              		.loc 1 233 0
 298 0076 40F20000 		movw	r0, #:lower16:.LC13
 299 007a C0F20000 		movt	r0, #:upper16:.LC13
 300 007e FFF7FEFF 		bl	printf
 234:.\console.c   **** 		break;		
 301              		.loc 1 234 0
 302 0082 30E0     		b	.L15
 303              	.L21:
 235:.\console.c   **** 		case CLUSM_PGOTO_EXECUTION:
 236:.\console.c   **** 			printf("(CLUSM_PGOTO_EXECUTION)");
 304              		.loc 1 236 0
 305 0084 40F20000 		movw	r0, #:lower16:.LC14
 306 0088 C0F20000 		movt	r0, #:upper16:.LC14
 307 008c FFF7FEFF 		bl	printf
 237:.\console.c   **** 		break;	
 308              		.loc 1 237 0
 309 0090 29E0     		b	.L15
 310              	.L22:
 238:.\console.c   **** 		case CLUSM_TGOTO_EXECUTION:
 239:.\console.c   **** 			printf("(CLUSM_TGOTO_EXECUTION)");
 311              		.loc 1 239 0
 312 0092 40F20000 		movw	r0, #:lower16:.LC15
 313 0096 C0F20000 		movt	r0, #:upper16:.LC15
 314 009a FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 12


 240:.\console.c   **** 		break;
 315              		.loc 1 240 0
 316 009e 22E0     		b	.L15
 317              	.L23:
 241:.\console.c   **** 		case CLUSM_PATH_EXECUTION:
 242:.\console.c   **** 			printf("(CLUSM_PATH_EXECUTION)");
 318              		.loc 1 242 0
 319 00a0 40F20000 		movw	r0, #:lower16:.LC16
 320 00a4 C0F20000 		movt	r0, #:upper16:.LC16
 321 00a8 FFF7FEFF 		bl	printf
 243:.\console.c   **** 		break;		
 322              		.loc 1 243 0
 323 00ac 1BE0     		b	.L15
 324              	.L24:
 244:.\console.c   **** 		case CLUSM_LINE_EXECUTED:
 245:.\console.c   **** 			printf("(CLUSM_LINE_EXECUTED)");
 325              		.loc 1 245 0
 326 00ae 40F20000 		movw	r0, #:lower16:.LC17
 327 00b2 C0F20000 		movt	r0, #:upper16:.LC17
 328 00b6 FFF7FEFF 		bl	printf
 246:.\console.c   **** 		break;		
 329              		.loc 1 246 0
 330 00ba 14E0     		b	.L15
 331              	.L25:
 247:.\console.c   **** 		case CLUSM_STOP:
 248:.\console.c   **** 			printf("(CLUSM_STOP)");
 332              		.loc 1 248 0
 333 00bc 40F20000 		movw	r0, #:lower16:.LC18
 334 00c0 C0F20000 		movt	r0, #:upper16:.LC18
 335 00c4 FFF7FEFF 		bl	printf
 249:.\console.c   **** 		break;	
 336              		.loc 1 249 0
 337 00c8 0DE0     		b	.L15
 338              	.L26:
 250:.\console.c   **** 		case CLUSM_END:
 251:.\console.c   **** 			printf("(CLUSM_END)");
 339              		.loc 1 251 0
 340 00ca 40F20000 		movw	r0, #:lower16:.LC19
 341 00ce C0F20000 		movt	r0, #:upper16:.LC19
 342 00d2 FFF7FEFF 		bl	printf
 252:.\console.c   **** 		break;			
 343              		.loc 1 252 0
 344 00d6 06E0     		b	.L15
 345              	.L16:
 253:.\console.c   **** 		default:
 254:.\console.c   **** 			printf("(*err)");
 346              		.loc 1 254 0
 347 00d8 40F20000 		movw	r0, #:lower16:.LC9
 348 00dc C0F20000 		movt	r0, #:upper16:.LC9
 349 00e0 FFF7FEFF 		bl	printf
 255:.\console.c   **** 		break;
 350              		.loc 1 255 0
 351 00e4 00BF     		nop
 352              	.L15:
 256:.\console.c   **** 	}
 257:.\console.c   **** }
 353              		.loc 1 257 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 13


 354 00e6 07F10807 		add	r7, r7, #8
 355 00ea BD46     		mov	sp, r7
 356 00ec 80BD     		pop	{r7, pc}
 357              		.cfi_endproc
 358              	.LFE57:
 359              		.size	ShowCLUSM, .-ShowCLUSM
 360 00ee 00BF     		.section	.rodata
 361              		.align	2
 362              	.LC20:
 363 0180 5374616E 		.ascii	"Stanley Kubrick\000"
 363      6C657920 
 363      4B756272 
 363      69636B00 
 364              		.align	2
 365              	.LC21:
 366 0190 416C6672 		.ascii	"Alfred Hitchcock\000"
 366      65642048 
 366      69746368 
 366      636F636B 
 366      00
 367 01a1 000000   		.align	2
 368              	.LC22:
 369 01a4 42726961 		.ascii	"Brian De Palma\000"
 369      6E204465 
 369      2050616C 
 369      6D6100
 370 01b3 00       		.align	2
 371              	.LC23:
 372 01b4 43686172 		.ascii	"Charlie Chaplin\000"
 372      6C696520 
 372      43686170 
 372      6C696E00 
 373              		.align	2
 374              	.LC24:
 375 01c4 44617669 		.ascii	"David Linch\000"
 375      64204C69 
 375      6E636800 
 376              		.align	2
 377              	.LC25:
 378 01d0 4672616E 		.ascii	"Francis Ford Coppola\000"
 378      63697320 
 378      466F7264 
 378      20436F70 
 378      706F6C61 
 379 01e5 000000   		.align	2
 380              	.LC26:
 381 01e8 4D617274 		.ascii	"Martin Scorsese\000"
 381      696E2053 
 381      636F7273 
 381      65736500 
 382              		.align	2
 383              	.LC27:
 384 01f8 5175656E 		.ascii	"Quentin Tarantino\000"
 384      74696E20 
 384      54617261 
 384      6E74696E 
 384      6F00
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 14


 385 020a 0000     		.align	2
 386              	.LC28:
 387 020c 5269646C 		.ascii	"Ridley Scott\000"
 387      65792053 
 387      636F7474 
 387      00
 388 0219 000000   		.align	2
 389              	.LC29:
 390 021c 53657267 		.ascii	"Sergio Leone\000"
 390      696F204C 
 390      656F6E65 
 390      00
 391 0229 000000   		.align	2
 392              	.LC30:
 393 022c 53746576 		.ascii	"Steven Spielberg\000"
 393      656E2053 
 393      7069656C 
 393      62657267 
 393      00
 394 023d 000000   		.align	2
 395              	.LC31:
 396 0240 54696D20 		.ascii	"Tim Burton\000"
 396      42757274 
 396      6F6E00
 397 024b 00       		.align	2
 398              	.LC32:
 399 024c 57657320 		.ascii	"Wes Craven\000"
 399      43726176 
 399      656E00
 400 0257 00       		.align	2
 401              	.LC33:
 402 0258 46656465 		.ascii	"Federico Fellini\000"
 402      7269636F 
 402      2046656C 
 402      6C696E69 
 402      00
 403 0269 000000   		.align	2
 404              	.LC34:
 405 026c 43687269 		.ascii	"Christopher Nolan\000"
 405      73746F70 
 405      68657220 
 405      4E6F6C61 
 405      6E00
 406 027e 0000     		.align	2
 407              	.LC35:
 408 0280 47756C6C 		.ascii	"Gullermo Del Toro\000"
 408      65726D6F 
 408      2044656C 
 408      20546F72 
 408      6F00
 409 0292 0000     		.align	2
 410              	.LC36:
 411 0294 47656F72 		.ascii	"George Lucas\000"
 411      6765204C 
 411      75636173 
 411      00
 412 02a1 000000   		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 15


 413              	.LC37:
 414 02a4 4A2E4A2E 		.ascii	"J.J. Abrams\000"
 414      20416272 
 414      616D7300 
 415              		.align	2
 416              	.LC38:
 417 02b0 596F7500 		.ascii	"You\000"
 418              		.section	.text.ShowParamsDirector,"ax",%progbits
 419              		.align	2
 420              		.global	ShowParamsDirector
 421              		.thumb
 422              		.thumb_func
 423              		.type	ShowParamsDirector, %function
 424              	ShowParamsDirector:
 425              	.LFB58:
 258:.\console.c   **** 
 259:.\console.c   **** 
 260:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 261:.\console.c   **** // Show Parameters Auxiliary Functions
 262:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 263:.\console.c   **** void ShowParamsDirector(void)
 264:.\console.c   **** {	
 426              		.loc 1 264 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430 0000 80B5     		push	{r7, lr}
 431              	.LCFI6:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 00AF     		add	r7, sp, #0
 436              	.LCFI7:
 437              		.cfi_def_cfa_register 7
 265:.\console.c   **** 	switch (gobee_param.director)
 438              		.loc 1 265 0
 439 0004 40F20003 		movw	r3, #:lower16:gobee_param
 440 0008 C0F20003 		movt	r3, #:upper16:gobee_param
 441 000c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 442 000e 122B     		cmp	r3, #18
 443 0010 00F2A880 		bhi	.L30
 444 0014 01A2     		adr	r2, .L49
 445 0016 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 446 001a 00BF     		.align	2
 447              	.L49:
 448 001c 69000000 		.word	.L31+1
 449 0020 77000000 		.word	.L32+1
 450 0024 85000000 		.word	.L33+1
 451 0028 93000000 		.word	.L34+1
 452 002c A1000000 		.word	.L35+1
 453 0030 AF000000 		.word	.L36+1
 454 0034 BD000000 		.word	.L37+1
 455 0038 CB000000 		.word	.L38+1
 456 003c D9000000 		.word	.L39+1
 457 0040 E7000000 		.word	.L40+1
 458 0044 F5000000 		.word	.L41+1
 459 0048 03010000 		.word	.L42+1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 16


 460 004c 11010000 		.word	.L43+1
 461 0050 1F010000 		.word	.L44+1
 462 0054 65010000 		.word	.L30+1
 463 0058 2D010000 		.word	.L45+1
 464 005c 3B010000 		.word	.L46+1
 465 0060 49010000 		.word	.L47+1
 466 0064 57010000 		.word	.L48+1
 467              	.L31:
 266:.\console.c   **** 	{
 267:.\console.c   **** 		case STANLEY:
 268:.\console.c   **** 			printf("Stanley Kubrick");
 468              		.loc 1 268 0
 469 0068 40F20000 		movw	r0, #:lower16:.LC20
 470 006c C0F20000 		movt	r0, #:upper16:.LC20
 471 0070 FFF7FEFF 		bl	printf
 269:.\console.c   **** 			break;	
 472              		.loc 1 269 0
 473 0074 7DE0     		b	.L29
 474              	.L32:
 270:.\console.c   **** 		case ALFRED:
 271:.\console.c   **** 			printf("Alfred Hitchcock");
 475              		.loc 1 271 0
 476 0076 40F20000 		movw	r0, #:lower16:.LC21
 477 007a C0F20000 		movt	r0, #:upper16:.LC21
 478 007e FFF7FEFF 		bl	printf
 272:.\console.c   **** 			break;
 479              		.loc 1 272 0
 480 0082 76E0     		b	.L29
 481              	.L33:
 273:.\console.c   **** 		case DE_PALMA:
 274:.\console.c   **** 			printf("Brian De Palma");
 482              		.loc 1 274 0
 483 0084 40F20000 		movw	r0, #:lower16:.LC22
 484 0088 C0F20000 		movt	r0, #:upper16:.LC22
 485 008c FFF7FEFF 		bl	printf
 275:.\console.c   **** 			break;	
 486              		.loc 1 275 0
 487 0090 6FE0     		b	.L29
 488              	.L34:
 276:.\console.c   **** 		case CHARLIE:
 277:.\console.c   **** 			printf("Charlie Chaplin");
 489              		.loc 1 277 0
 490 0092 40F20000 		movw	r0, #:lower16:.LC23
 491 0096 C0F20000 		movt	r0, #:upper16:.LC23
 492 009a FFF7FEFF 		bl	printf
 278:.\console.c   **** 			break;	
 493              		.loc 1 278 0
 494 009e 68E0     		b	.L29
 495              	.L35:
 279:.\console.c   **** 		case LINCH:
 280:.\console.c   **** 			printf("David Linch");
 496              		.loc 1 280 0
 497 00a0 40F20000 		movw	r0, #:lower16:.LC24
 498 00a4 C0F20000 		movt	r0, #:upper16:.LC24
 499 00a8 FFF7FEFF 		bl	printf
 281:.\console.c   **** 			break;
 500              		.loc 1 281 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 17


 501 00ac 61E0     		b	.L29
 502              	.L36:
 282:.\console.c   **** 		case COPPOLA:
 283:.\console.c   **** 			printf("Francis Ford Coppola");
 503              		.loc 1 283 0
 504 00ae 40F20000 		movw	r0, #:lower16:.LC25
 505 00b2 C0F20000 		movt	r0, #:upper16:.LC25
 506 00b6 FFF7FEFF 		bl	printf
 284:.\console.c   **** 			break;
 507              		.loc 1 284 0
 508 00ba 5AE0     		b	.L29
 509              	.L37:
 285:.\console.c   **** 		case MARTIN:
 286:.\console.c   **** 			printf("Martin Scorsese");
 510              		.loc 1 286 0
 511 00bc 40F20000 		movw	r0, #:lower16:.LC26
 512 00c0 C0F20000 		movt	r0, #:upper16:.LC26
 513 00c4 FFF7FEFF 		bl	printf
 287:.\console.c   **** 			break;	
 514              		.loc 1 287 0
 515 00c8 53E0     		b	.L29
 516              	.L38:
 288:.\console.c   **** 		case QUENTIN:
 289:.\console.c   **** 			printf("Quentin Tarantino");
 517              		.loc 1 289 0
 518 00ca 40F20000 		movw	r0, #:lower16:.LC27
 519 00ce C0F20000 		movt	r0, #:upper16:.LC27
 520 00d2 FFF7FEFF 		bl	printf
 290:.\console.c   **** 			break;
 521              		.loc 1 290 0
 522 00d6 4CE0     		b	.L29
 523              	.L39:
 291:.\console.c   **** 		case RIDLEY:
 292:.\console.c   **** 			printf("Ridley Scott");
 524              		.loc 1 292 0
 525 00d8 40F20000 		movw	r0, #:lower16:.LC28
 526 00dc C0F20000 		movt	r0, #:upper16:.LC28
 527 00e0 FFF7FEFF 		bl	printf
 293:.\console.c   **** 			break;
 528              		.loc 1 293 0
 529 00e4 45E0     		b	.L29
 530              	.L40:
 294:.\console.c   **** 		case SERGIO:
 295:.\console.c   **** 			printf("Sergio Leone");
 531              		.loc 1 295 0
 532 00e6 40F20000 		movw	r0, #:lower16:.LC29
 533 00ea C0F20000 		movt	r0, #:upper16:.LC29
 534 00ee FFF7FEFF 		bl	printf
 296:.\console.c   **** 			break;
 535              		.loc 1 296 0
 536 00f2 3EE0     		b	.L29
 537              	.L41:
 297:.\console.c   **** 		case STEVEN:
 298:.\console.c   **** 			printf("Steven Spielberg");
 538              		.loc 1 298 0
 539 00f4 40F20000 		movw	r0, #:lower16:.LC30
 540 00f8 C0F20000 		movt	r0, #:upper16:.LC30
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 18


 541 00fc FFF7FEFF 		bl	printf
 299:.\console.c   **** 			break;
 542              		.loc 1 299 0
 543 0100 37E0     		b	.L29
 544              	.L42:
 300:.\console.c   **** 		case TIM:
 301:.\console.c   **** 			printf("Tim Burton");
 545              		.loc 1 301 0
 546 0102 40F20000 		movw	r0, #:lower16:.LC31
 547 0106 C0F20000 		movt	r0, #:upper16:.LC31
 548 010a FFF7FEFF 		bl	printf
 302:.\console.c   **** 			break;
 549              		.loc 1 302 0
 550 010e 30E0     		b	.L29
 551              	.L43:
 303:.\console.c   **** 		case WES:
 304:.\console.c   **** 			printf("Wes Craven");
 552              		.loc 1 304 0
 553 0110 40F20000 		movw	r0, #:lower16:.LC32
 554 0114 C0F20000 		movt	r0, #:upper16:.LC32
 555 0118 FFF7FEFF 		bl	printf
 305:.\console.c   **** 			break;
 556              		.loc 1 305 0
 557 011c 29E0     		b	.L29
 558              	.L44:
 306:.\console.c   **** 		case FEDERICO:
 307:.\console.c   **** 			printf("Federico Fellini");
 559              		.loc 1 307 0
 560 011e 40F20000 		movw	r0, #:lower16:.LC33
 561 0122 C0F20000 		movt	r0, #:upper16:.LC33
 562 0126 FFF7FEFF 		bl	printf
 308:.\console.c   **** 			break;
 563              		.loc 1 308 0
 564 012a 22E0     		b	.L29
 565              	.L45:
 309:.\console.c   **** 		case CRISTOPHER:
 310:.\console.c   **** 			printf("Christopher Nolan");
 566              		.loc 1 310 0
 567 012c 40F20000 		movw	r0, #:lower16:.LC34
 568 0130 C0F20000 		movt	r0, #:upper16:.LC34
 569 0134 FFF7FEFF 		bl	printf
 311:.\console.c   **** 			break;
 570              		.loc 1 311 0
 571 0138 1BE0     		b	.L29
 572              	.L46:
 312:.\console.c   **** 		case GUILLERMO:
 313:.\console.c   **** 			printf("Gullermo Del Toro");
 573              		.loc 1 313 0
 574 013a 40F20000 		movw	r0, #:lower16:.LC35
 575 013e C0F20000 		movt	r0, #:upper16:.LC35
 576 0142 FFF7FEFF 		bl	printf
 314:.\console.c   **** 			break;	
 577              		.loc 1 314 0
 578 0146 14E0     		b	.L29
 579              	.L47:
 315:.\console.c   **** 		case GEORGE:
 316:.\console.c   **** 			printf("George Lucas");
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 19


 580              		.loc 1 316 0
 581 0148 40F20000 		movw	r0, #:lower16:.LC36
 582 014c C0F20000 		movt	r0, #:upper16:.LC36
 583 0150 FFF7FEFF 		bl	printf
 317:.\console.c   **** 			break;	
 584              		.loc 1 317 0
 585 0154 0DE0     		b	.L29
 586              	.L48:
 318:.\console.c   **** 		case JJ:
 319:.\console.c   **** 			printf("J.J. Abrams");
 587              		.loc 1 319 0
 588 0156 40F20000 		movw	r0, #:lower16:.LC37
 589 015a C0F20000 		movt	r0, #:upper16:.LC37
 590 015e FFF7FEFF 		bl	printf
 320:.\console.c   **** 			break;			
 591              		.loc 1 320 0
 592 0162 06E0     		b	.L29
 593              	.L30:
 321:.\console.c   **** 		default:
 322:.\console.c   **** 			printf("You");
 594              		.loc 1 322 0
 595 0164 40F20000 		movw	r0, #:lower16:.LC38
 596 0168 C0F20000 		movt	r0, #:upper16:.LC38
 597 016c FFF7FEFF 		bl	printf
 323:.\console.c   **** 			break;
 598              		.loc 1 323 0
 599 0170 00BF     		nop
 600              	.L29:
 324:.\console.c   **** 	}		
 325:.\console.c   **** }
 601              		.loc 1 325 0
 602 0172 80BD     		pop	{r7, pc}
 603              		.cfi_endproc
 604              	.LFE58:
 605              		.size	ShowParamsDirector, .-ShowParamsDirector
 606              		.section	.rodata
 607              		.align	2
 608              	.LC39:
 609 02b4 52656D6F 		.ascii	"Remote Control\000"
 609      74652043 
 609      6F6E7472 
 609      6F6C00
 610 02c3 00       		.align	2
 611              	.LC40:
 612 02c4 44697265 		.ascii	"Director AI\000"
 612      63746F72 
 612      20414900 
 613              		.align	2
 614              	.LC41:
 615 02d0 2A206D6F 		.ascii	"* mode err!\000"
 615      64652065 
 615      72722100 
 616              		.align	2
 617              	.LC42:
 618 02dc 0D00     		.ascii	"\015\000"
 619              		.section	.text.ShowParamsMode,"ax",%progbits
 620              		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 20


 621              		.global	ShowParamsMode
 622              		.thumb
 623              		.thumb_func
 624              		.type	ShowParamsMode, %function
 625              	ShowParamsMode:
 626              	.LFB59:
 326:.\console.c   **** 
 327:.\console.c   **** 
 328:.\console.c   **** void ShowParamsMode(void)
 329:.\console.c   **** {	switch (gobee_param.mode)
 627              		.loc 1 329 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 0000 80B5     		push	{r7, lr}
 632              	.LCFI8:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 7, -8
 635              		.cfi_offset 14, -4
 636 0002 00AF     		add	r7, sp, #0
 637              	.LCFI9:
 638              		.cfi_def_cfa_register 7
 639              		.loc 1 329 0
 640 0004 40F20003 		movw	r3, #:lower16:gobee_param
 641 0008 C0F20003 		movt	r3, #:upper16:gobee_param
 642 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 643 000e 002B     		cmp	r3, #0
 644 0010 02D0     		beq	.L53
 645 0012 012B     		cmp	r3, #1
 646 0014 07D0     		beq	.L54
 647 0016 0DE0     		b	.L56
 648              	.L53:
 330:.\console.c   **** 	{
 331:.\console.c   **** 		case REMOTECONTROL_MODE:
 332:.\console.c   **** 			printf("Remote Control");
 649              		.loc 1 332 0
 650 0018 40F20000 		movw	r0, #:lower16:.LC39
 651 001c C0F20000 		movt	r0, #:upper16:.LC39
 652 0020 FFF7FEFF 		bl	printf
 333:.\console.c   **** 			break;	
 653              		.loc 1 333 0
 654 0024 0DE0     		b	.L55
 655              	.L54:
 334:.\console.c   **** 		case DIRECTOR_MODE:
 335:.\console.c   **** 			printf("Director AI");
 656              		.loc 1 335 0
 657 0026 40F20000 		movw	r0, #:lower16:.LC40
 658 002a C0F20000 		movt	r0, #:upper16:.LC40
 659 002e FFF7FEFF 		bl	printf
 336:.\console.c   **** 			break;
 660              		.loc 1 336 0
 661 0032 06E0     		b	.L55
 662              	.L56:
 337:.\console.c   **** 		default:
 338:.\console.c   **** 			printf("* mode err!");
 663              		.loc 1 338 0
 664 0034 40F20000 		movw	r0, #:lower16:.LC41
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 21


 665 0038 C0F20000 		movt	r0, #:upper16:.LC41
 666 003c FFF7FEFF 		bl	printf
 339:.\console.c   **** 			break;
 667              		.loc 1 339 0
 668 0040 00BF     		nop
 669              	.L55:
 340:.\console.c   **** 	}		
 341:.\console.c   **** 	printf("\r\n");
 670              		.loc 1 341 0
 671 0042 40F20000 		movw	r0, #:lower16:.LC42
 672 0046 C0F20000 		movt	r0, #:upper16:.LC42
 673 004a FFF7FEFF 		bl	puts
 342:.\console.c   **** }
 674              		.loc 1 342 0
 675 004e 80BD     		pop	{r7, pc}
 676              		.cfi_endproc
 677              	.LFE59:
 678              		.size	ShowParamsMode, .-ShowParamsMode
 679              		.section	.rodata
 680 02de 0000     		.align	2
 681              	.LC43:
 682 02e0 2028303A 		.ascii	" (0:off)\000"
 682      6F666629 
 682      00
 683 02e9 000000   		.align	2
 684              	.LC44:
 685 02ec 2028313A 		.ascii	" (1:sine)\000"
 685      73696E65 
 685      2900
 686 02f6 0000     		.align	2
 687              	.LC45:
 688 02f8 2028323A 		.ascii	" (2:triangle)\000"
 688      74726961 
 688      6E676C65 
 688      2900
 689 0306 0000     		.align	2
 690              	.LC46:
 691 0308 2028333A 		.ascii	" (3:square)\000"
 691      73717561 
 691      72652900 
 692              		.align	2
 693              	.LC47:
 694 0314 20282169 		.ascii	" (!internal error)\000"
 694      6E746572 
 694      6E616C20 
 694      6572726F 
 694      722900
 695              		.section	.text.ShowParamsAstim,"ax",%progbits
 696              		.align	2
 697              		.global	ShowParamsAstim
 698              		.thumb
 699              		.thumb_func
 700              		.type	ShowParamsAstim, %function
 701              	ShowParamsAstim:
 702              	.LFB60:
 343:.\console.c   **** 
 344:.\console.c   **** 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 22


 345:.\console.c   **** void ShowParamsAstim(struct MOTOR_AXIS *paxis)
 346:.\console.c   **** {
 703              		.loc 1 346 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 8
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707 0000 80B5     		push	{r7, lr}
 708              	.LCFI10:
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 82B0     		sub	sp, sp, #8
 713              	.LCFI11:
 714              		.cfi_def_cfa_offset 16
 715 0004 00AF     		add	r7, sp, #0
 716              	.LCFI12:
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 347:.\console.c   **** 	if ((*paxis).vparam.astim_type == NO_ASTIM)
 719              		.loc 1 347 0
 720 0008 7B68     		ldr	r3, [r7, #4]
 721 000a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 722 000c 002B     		cmp	r3, #0
 723 000e 06D1     		bne	.L58
 348:.\console.c   **** 	{
 349:.\console.c   **** 		printf(" (0:off)");
 724              		.loc 1 349 0
 725 0010 40F20000 		movw	r0, #:lower16:.LC43
 726 0014 C0F20000 		movt	r0, #:upper16:.LC43
 727 0018 FFF7FEFF 		bl	printf
 728 001c 26E0     		b	.L59
 729              	.L58:
 350:.\console.c   **** 	}
 351:.\console.c   **** 	else if ((*paxis).vparam.astim_type == SINE_ASTIM)
 730              		.loc 1 351 0
 731 001e 7B68     		ldr	r3, [r7, #4]
 732 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 733 0022 012B     		cmp	r3, #1
 734 0024 06D1     		bne	.L60
 352:.\console.c   **** 	{
 353:.\console.c   **** 		printf(" (1:sine)");
 735              		.loc 1 353 0
 736 0026 40F20000 		movw	r0, #:lower16:.LC44
 737 002a C0F20000 		movt	r0, #:upper16:.LC44
 738 002e FFF7FEFF 		bl	printf
 739 0032 1BE0     		b	.L59
 740              	.L60:
 354:.\console.c   **** 	}				
 355:.\console.c   **** 	else if ((*paxis).vparam.astim_type == TRIANGLE_ASTIM)
 741              		.loc 1 355 0
 742 0034 7B68     		ldr	r3, [r7, #4]
 743 0036 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 744 0038 022B     		cmp	r3, #2
 745 003a 06D1     		bne	.L61
 356:.\console.c   **** 	{
 357:.\console.c   **** 		printf(" (2:triangle)");
 746              		.loc 1 357 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 23


 747 003c 40F20000 		movw	r0, #:lower16:.LC45
 748 0040 C0F20000 		movt	r0, #:upper16:.LC45
 749 0044 FFF7FEFF 		bl	printf
 750 0048 10E0     		b	.L59
 751              	.L61:
 358:.\console.c   **** 	}
 359:.\console.c   **** 	else if ((*paxis).vparam.astim_type == SQUARE_ASTIM)
 752              		.loc 1 359 0
 753 004a 7B68     		ldr	r3, [r7, #4]
 754 004c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 755 004e 032B     		cmp	r3, #3
 756 0050 06D1     		bne	.L62
 360:.\console.c   **** 	{
 361:.\console.c   **** 		printf(" (3:square)");
 757              		.loc 1 361 0
 758 0052 40F20000 		movw	r0, #:lower16:.LC46
 759 0056 C0F20000 		movt	r0, #:upper16:.LC46
 760 005a FFF7FEFF 		bl	printf
 761 005e 05E0     		b	.L59
 762              	.L62:
 362:.\console.c   **** 	}					
 363:.\console.c   **** 	else
 364:.\console.c   **** 	{
 365:.\console.c   **** 		printf(" (!internal error)");
 763              		.loc 1 365 0
 764 0060 40F20000 		movw	r0, #:lower16:.LC47
 765 0064 C0F20000 		movt	r0, #:upper16:.LC47
 766 0068 FFF7FEFF 		bl	printf
 767              	.L59:
 366:.\console.c   **** 	}				
 367:.\console.c   **** 	printf("\r\n");
 768              		.loc 1 367 0
 769 006c 40F20000 		movw	r0, #:lower16:.LC42
 770 0070 C0F20000 		movt	r0, #:upper16:.LC42
 771 0074 FFF7FEFF 		bl	puts
 368:.\console.c   **** }
 772              		.loc 1 368 0
 773 0078 07F10807 		add	r7, r7, #8
 774 007c BD46     		mov	sp, r7
 775 007e 80BD     		pop	{r7, pc}
 776              		.cfi_endproc
 777              	.LFE60:
 778              		.size	ShowParamsAstim, .-ShowParamsAstim
 779              		.global	__aeabi_f2d
 780              		.section	.rodata
 781 0327 00       		.align	2
 782              	.LC48:
 783 0328 25346620 		.ascii	"%4f \000"
 783      00
 784              		.global	__aeabi_fdiv
 785 032d 000000   		.align	2
 786              	.LC49:
 787 0330 20203156 		.ascii	"  1V=%4.1f [step]\000"
 787      3D25342E 
 787      3166205B 
 787      73746570 
 787      5D00
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 24


 788              		.global	__aeabi_ddiv
 789              		.global	__aeabi_d2f
 790 0342 0000     		.align	2
 791              	.LC50:
 792 0344 20202849 		.ascii	"  (I/O_EQV=f(Kopf)=%1.6f\015\012\000"
 792      2F4F5F45 
 792      51563D66 
 792      284B6F70 
 792      66293D25 
 793              		.section	.text.ShowParamsGainAnaout,"ax",%progbits
 794              		.align	2
 795              		.global	ShowParamsGainAnaout
 796              		.thumb
 797              		.thumb_func
 798              		.type	ShowParamsGainAnaout, %function
 799              	ShowParamsGainAnaout:
 800              	.LFB61:
 369:.\console.c   **** 
 370:.\console.c   **** void ShowParamsGainAnaout(struct MOTOR_AXIS *paxis)
 371:.\console.c   **** {	
 801              		.loc 1 371 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 8
 804              		@ frame_needed = 1, uses_anonymous_args = 0
 805 0000 80B5     		push	{r7, lr}
 806              	.LCFI13:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 82B0     		sub	sp, sp, #8
 811              	.LCFI14:
 812              		.cfi_def_cfa_offset 16
 813 0004 00AF     		add	r7, sp, #0
 814              	.LCFI15:
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
 372:.\console.c   **** 	printf("%4f ",(float)((*paxis).param.Gain_ANAOUT.fnum));
 817              		.loc 1 372 0
 818 0008 7B68     		ldr	r3, [r7, #4]
 819 000a 9B6A     		ldr	r3, [r3, #40]	@ float
 820 000c 1846     		mov	r0, r3
 821 000e FFF7FEFF 		bl	__aeabi_f2d
 822 0012 0246     		mov	r2, r0
 823 0014 0B46     		mov	r3, r1
 824 0016 40F20000 		movw	r0, #:lower16:.LC48
 825 001a C0F20000 		movt	r0, #:upper16:.LC48
 826 001e FFF7FEFF 		bl	printf
 373:.\console.c   **** 	/********************************************************************************/
 374:.\console.c   **** 	/* Again (I/O_EQV) = DAC_Resolution/ADC_Resolution * VMAX_ADC/VMAX_DAC * 1/Kopf	*/
 375:.\console.c   **** 	/* Again (I/O_EQV) =            255/4096           *       5V/4V       * 1/Kopf	*/
 376:.\console.c   **** 	/* Again (I/O_EQV) = 0.077819824 / Kopf											*/
 377:.\console.c   **** 	/********************************************************************************/
 378:.\console.c   **** 	/* 1V Output --> [step] * AGAIN = 255/4 --> [step] = 255/4 * 1/AGAIN			*/
 379:.\console.c   **** 	/********************************************************************************/
 380:.\console.c   **** 	printf("  1V=%4.1f [step]",(float)(63.75/((*paxis).param.Gain_ANAOUT.fnum)));
 827              		.loc 1 380 0
 828 0022 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 25


 829 0024 9B6A     		ldr	r3, [r3, #40]	@ float
 830 0026 4FF00000 		mov	r0, #0
 831 002a C4F27F20 		movt	r0, 17023
 832 002e 1946     		mov	r1, r3
 833 0030 FFF7FEFF 		bl	__aeabi_fdiv
 834 0034 0346     		mov	r3, r0
 835 0036 1846     		mov	r0, r3
 836 0038 FFF7FEFF 		bl	__aeabi_f2d
 837 003c 0246     		mov	r2, r0
 838 003e 0B46     		mov	r3, r1
 839 0040 40F20000 		movw	r0, #:lower16:.LC49
 840 0044 C0F20000 		movt	r0, #:upper16:.LC49
 841 0048 FFF7FEFF 		bl	printf
 381:.\console.c   **** 	printf("  (I/O_EQV=f(Kopf)=%1.6f\r\n",(float)(0.077819824/(*paxis).param.Kopf.fnum));
 842              		.loc 1 381 0
 843 004c 7B68     		ldr	r3, [r7, #4]
 844 004e 5B6A     		ldr	r3, [r3, #36]	@ float
 845 0050 1846     		mov	r0, r3
 846 0052 FFF7FEFF 		bl	__aeabi_f2d
 847 0056 0246     		mov	r2, r0
 848 0058 0B46     		mov	r3, r1
 849 005a 0DA1     		adr	r1, .L64
 850 005c D1E90001 		ldrd	r0, [r1]
 851 0060 FFF7FEFF 		bl	__aeabi_ddiv
 852 0064 0246     		mov	r2, r0
 853 0066 0B46     		mov	r3, r1
 854 0068 1046     		mov	r0, r2
 855 006a 1946     		mov	r1, r3
 856 006c FFF7FEFF 		bl	__aeabi_d2f
 857 0070 0346     		mov	r3, r0
 858 0072 1846     		mov	r0, r3
 859 0074 FFF7FEFF 		bl	__aeabi_f2d
 860 0078 0246     		mov	r2, r0
 861 007a 0B46     		mov	r3, r1
 862 007c 40F20000 		movw	r0, #:lower16:.LC50
 863 0080 C0F20000 		movt	r0, #:upper16:.LC50
 864 0084 FFF7FEFF 		bl	printf
 382:.\console.c   **** }
 865              		.loc 1 382 0
 866 0088 07F10807 		add	r7, r7, #8
 867 008c BD46     		mov	sp, r7
 868 008e 80BD     		pop	{r7, pc}
 869              	.L65:
 870              		.align	3
 871              	.L64:
 872 0090 597B0FFF 		.word	-15762599
 873 0094 FFEBB33F 		.word	1068755967
 874              		.cfi_endproc
 875              	.LFE61:
 876              		.size	ShowParamsGainAnaout, .-ShowParamsGainAnaout
 877              		.section	.rodata
 878 035f 00       		.align	2
 879              	.LC51:
 880 0360 50414E20 		.ascii	"PAN (volatile)\000"
 880      28766F6C 
 880      6174696C 
 880      652900
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 26


 881 036f 00       		.align	2
 882              	.LC52:
 883 0370 54494C54 		.ascii	"TILT (default at poweron)\000"
 883      20286465 
 883      6661756C 
 883      74206174 
 883      20706F77 
 884 038a 0000     		.align	2
 885              	.LC53:
 886 038c 494E5445 		.ascii	"INTERNAL FIRMWARE ERROR!\000"
 886      524E414C 
 886      20464952 
 886      4D574152 
 886      45204552 
 887              		.section	.text.ShowParamsAnaoutSelectedAxis,"ax",%progbits
 888              		.align	2
 889              		.global	ShowParamsAnaoutSelectedAxis
 890              		.thumb
 891              		.thumb_func
 892              		.type	ShowParamsAnaoutSelectedAxis, %function
 893              	ShowParamsAnaoutSelectedAxis:
 894              	.LFB62:
 383:.\console.c   **** 
 384:.\console.c   **** void ShowParamsAnaoutSelectedAxis(struct MOTOR_AXIS *paxis)
 385:.\console.c   **** {
 895              		.loc 1 385 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 8
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 80B5     		push	{r7, lr}
 900              	.LCFI16:
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 7, -8
 903              		.cfi_offset 14, -4
 904 0002 82B0     		sub	sp, sp, #8
 905              	.LCFI17:
 906              		.cfi_def_cfa_offset 16
 907 0004 00AF     		add	r7, sp, #0
 908              	.LCFI18:
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 386:.\console.c   **** 	if (paxis == &pan_axis)
 911              		.loc 1 386 0
 912 0008 7A68     		ldr	r2, [r7, #4]
 913 000a 40F20003 		movw	r3, #:lower16:pan_axis
 914 000e C0F20003 		movt	r3, #:upper16:pan_axis
 915 0012 9A42     		cmp	r2, r3
 916 0014 06D1     		bne	.L67
 387:.\console.c   **** 	{
 388:.\console.c   **** 		printf("PAN (volatile)");
 917              		.loc 1 388 0
 918 0016 40F20000 		movw	r0, #:lower16:.LC51
 919 001a C0F20000 		movt	r0, #:upper16:.LC51
 920 001e FFF7FEFF 		bl	printf
 921 0022 13E0     		b	.L66
 922              	.L67:
 389:.\console.c   **** 	}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 27


 390:.\console.c   **** 	else if (paxis == &tilt_axis)
 923              		.loc 1 390 0
 924 0024 7A68     		ldr	r2, [r7, #4]
 925 0026 40F20003 		movw	r3, #:lower16:tilt_axis
 926 002a C0F20003 		movt	r3, #:upper16:tilt_axis
 927 002e 9A42     		cmp	r2, r3
 928 0030 06D1     		bne	.L69
 391:.\console.c   **** 	{
 392:.\console.c   **** 		printf("TILT (default at poweron)");
 929              		.loc 1 392 0
 930 0032 40F20000 		movw	r0, #:lower16:.LC52
 931 0036 C0F20000 		movt	r0, #:upper16:.LC52
 932 003a FFF7FEFF 		bl	printf
 933 003e 05E0     		b	.L66
 934              	.L69:
 393:.\console.c   **** 	}
 394:.\console.c   **** //	else if (paxis == &roll_axis)
 395:.\console.c   **** //	{
 396:.\console.c   **** //		printf("ROLL (volatile)");
 397:.\console.c   **** //	}
 398:.\console.c   **** 	else
 399:.\console.c   **** 	{
 400:.\console.c   **** 		printf("INTERNAL FIRMWARE ERROR!");
 935              		.loc 1 400 0
 936 0040 40F20000 		movw	r0, #:lower16:.LC53
 937 0044 C0F20000 		movt	r0, #:upper16:.LC53
 938 0048 FFF7FEFF 		bl	printf
 939              	.L66:
 401:.\console.c   **** 	}	
 402:.\console.c   **** 
 403:.\console.c   **** }
 940              		.loc 1 403 0
 941 004c 07F10807 		add	r7, r7, #8
 942 0050 BD46     		mov	sp, r7
 943 0052 80BD     		pop	{r7, pc}
 944              		.cfi_endproc
 945              	.LFE62:
 946              		.size	ShowParamsAnaoutSelectedAxis, .-ShowParamsAnaoutSelectedAxis
 947              		.section	.rodata
 948 03a5 000000   		.align	2
 949              	.LC54:
 950 03a8 25312E36 		.ascii	"%1.6f (Tau=%1.6f [msec])\000"
 950      66202854 
 950      61753D25 
 950      312E3666 
 950      205B6D73 
 951              		.section	.text.ShowParamsKiPan,"ax",%progbits
 952              		.align	2
 953              		.global	ShowParamsKiPan
 954              		.thumb
 955              		.thumb_func
 956              		.type	ShowParamsKiPan, %function
 957              	ShowParamsKiPan:
 958              	.LFB63:
 404:.\console.c   **** 
 405:.\console.c   **** void ShowParamsKiPan(void)
 406:.\console.c   **** {
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 28


 959              		.loc 1 406 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963 0000 B0B5     		push	{r4, r5, r7, lr}
 964              	.LCFI19:
 965              		.cfi_def_cfa_offset 16
 966              		.cfi_offset 4, -16
 967              		.cfi_offset 5, -12
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0002 82B0     		sub	sp, sp, #8
 971              	.LCFI20:
 972              		.cfi_def_cfa_offset 24
 973 0004 02AF     		add	r7, sp, #8
 974              	.LCFI21:
 975              		.cfi_def_cfa 7, 16
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 408:.\console.c   **** 		   (float)(pan_axis.param.Kif.fnum),(float)convKiTi(pan_axis.param.Kpf.fnum, pan_axis.param.Kif.f
 976              		.loc 1 408 0
 977 0006 40F20003 		movw	r3, #:lower16:pan_axis
 978 000a C0F20003 		movt	r3, #:upper16:pan_axis
 979 000e DB69     		ldr	r3, [r3, #28]	@ float
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 980              		.loc 1 407 0
 981 0010 1846     		mov	r0, r3
 982 0012 FFF7FEFF 		bl	__aeabi_f2d
 983 0016 0446     		mov	r4, r0
 984 0018 0D46     		mov	r5, r1
 985              		.loc 1 408 0
 986 001a 40F20003 		movw	r3, #:lower16:pan_axis
 987 001e C0F20003 		movt	r3, #:upper16:pan_axis
 988 0022 5969     		ldr	r1, [r3, #20]	@ float
 989 0024 40F20003 		movw	r3, #:lower16:pan_axis
 990 0028 C0F20003 		movt	r3, #:upper16:pan_axis
 991 002c DA69     		ldr	r2, [r3, #28]	@ float
 992 002e 40F20003 		movw	r3, #:lower16:fsampling
 993 0032 C0F20003 		movt	r3, #:upper16:fsampling
 994 0036 1B68     		ldr	r3, [r3, #0]	@ float
 995 0038 0846     		mov	r0, r1
 996 003a 1146     		mov	r1, r2
 997 003c 1A46     		mov	r2, r3
 998 003e FFF7FEFF 		bl	convKiTi
 999 0042 0346     		mov	r3, r0
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1000              		.loc 1 407 0
 1001 0044 1846     		mov	r0, r3
 1002 0046 FFF7FEFF 		bl	__aeabi_f2d
 1003 004a 0246     		mov	r2, r0
 1004 004c 0B46     		mov	r3, r1
 1005 004e CDE90023 		strd	r2, [sp]
 1006 0052 40F20000 		movw	r0, #:lower16:.LC54
 1007 0056 C0F20000 		movt	r0, #:upper16:.LC54
 1008 005a 2246     		mov	r2, r4
 1009 005c 2B46     		mov	r3, r5
 1010 005e FFF7FEFF 		bl	printf
 409:.\console.c   **** }
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 29


 1011              		.loc 1 409 0
 1012 0062 BD46     		mov	sp, r7
 1013 0064 B0BD     		pop	{r4, r5, r7, pc}
 1014              		.cfi_endproc
 1015              	.LFE63:
 1016              		.size	ShowParamsKiPan, .-ShowParamsKiPan
 1017 0066 00BF     		.section	.text.ShowParamsKiTilt,"ax",%progbits
 1018              		.align	2
 1019              		.global	ShowParamsKiTilt
 1020              		.thumb
 1021              		.thumb_func
 1022              		.type	ShowParamsKiTilt, %function
 1023              	ShowParamsKiTilt:
 1024              	.LFB64:
 410:.\console.c   **** 
 411:.\console.c   **** void ShowParamsKiTilt(void)
 412:.\console.c   **** {
 1025              		.loc 1 412 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 0000 B0B5     		push	{r4, r5, r7, lr}
 1030              	.LCFI22:
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 4, -16
 1033              		.cfi_offset 5, -12
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 82B0     		sub	sp, sp, #8
 1037              	.LCFI23:
 1038              		.cfi_def_cfa_offset 24
 1039 0004 02AF     		add	r7, sp, #8
 1040              	.LCFI24:
 1041              		.cfi_def_cfa 7, 16
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 414:.\console.c   **** 		   (float)(tilt_axis.param.Kif.fnum),(float)convKiTi(tilt_axis.param.Kpf.fnum, tilt_axis.param.Ki
 1042              		.loc 1 414 0
 1043 0006 40F20003 		movw	r3, #:lower16:tilt_axis
 1044 000a C0F20003 		movt	r3, #:upper16:tilt_axis
 1045 000e DB69     		ldr	r3, [r3, #28]	@ float
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1046              		.loc 1 413 0
 1047 0010 1846     		mov	r0, r3
 1048 0012 FFF7FEFF 		bl	__aeabi_f2d
 1049 0016 0446     		mov	r4, r0
 1050 0018 0D46     		mov	r5, r1
 1051              		.loc 1 414 0
 1052 001a 40F20003 		movw	r3, #:lower16:tilt_axis
 1053 001e C0F20003 		movt	r3, #:upper16:tilt_axis
 1054 0022 5969     		ldr	r1, [r3, #20]	@ float
 1055 0024 40F20003 		movw	r3, #:lower16:tilt_axis
 1056 0028 C0F20003 		movt	r3, #:upper16:tilt_axis
 1057 002c DA69     		ldr	r2, [r3, #28]	@ float
 1058 002e 40F20003 		movw	r3, #:lower16:fsampling
 1059 0032 C0F20003 		movt	r3, #:upper16:fsampling
 1060 0036 1B68     		ldr	r3, [r3, #0]	@ float
 1061 0038 0846     		mov	r0, r1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 30


 1062 003a 1146     		mov	r1, r2
 1063 003c 1A46     		mov	r2, r3
 1064 003e FFF7FEFF 		bl	convKiTi
 1065 0042 0346     		mov	r3, r0
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1066              		.loc 1 413 0
 1067 0044 1846     		mov	r0, r3
 1068 0046 FFF7FEFF 		bl	__aeabi_f2d
 1069 004a 0246     		mov	r2, r0
 1070 004c 0B46     		mov	r3, r1
 1071 004e CDE90023 		strd	r2, [sp]
 1072 0052 40F20000 		movw	r0, #:lower16:.LC54
 1073 0056 C0F20000 		movt	r0, #:upper16:.LC54
 1074 005a 2246     		mov	r2, r4
 1075 005c 2B46     		mov	r3, r5
 1076 005e FFF7FEFF 		bl	printf
 415:.\console.c   **** }
 1077              		.loc 1 415 0
 1078 0062 BD46     		mov	sp, r7
 1079 0064 B0BD     		pop	{r4, r5, r7, pc}
 1080              		.cfi_endproc
 1081              	.LFE64:
 1082              		.size	ShowParamsKiTilt, .-ShowParamsKiTilt
 1083 0066 00BF     		.section	.rodata
 1084 03c1 000000   		.align	2
 1085              	.LC55:
 1086 03c4 2531753A 		.ascii	"%1u:\000"
 1086      00
 1087 03c9 000000   		.align	2
 1088              	.LC56:
 1089 03cc 4759524F 		.ascii	"GYRO RATE\000"
 1089      20524154 
 1089      4500
 1090 03d6 0000     		.align	2
 1091              	.LC57:
 1092 03d8 534C4156 		.ascii	"SLAVE ENCODER POSITION\000"
 1092      4520454E 
 1092      434F4445 
 1092      5220504F 
 1092      53495449 
 1093 03ef 00       		.align	2
 1094              	.LC58:
 1095 03f0 534C4156 		.ascii	"SLAVE ENCODER VELOCITY\000"
 1095      4520454E 
 1095      434F4445 
 1095      52205645 
 1095      4C4F4349 
 1096 0407 00       		.align	2
 1097              	.LC59:
 1098 0408 41535449 		.ascii	"ASTIM INPUT\000"
 1098      4D20494E 
 1098      50555400 
 1099              		.align	2
 1100              	.LC60:
 1101 0414 6572726F 		.ascii	"error(t)\000"
 1101      72287429 
 1101      00
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 31


 1102 041d 000000   		.align	2
 1103              	.LC61:
 1104 0420 64286572 		.ascii	"d(error(t))/dt\000"
 1104      726F7228 
 1104      7429292F 
 1104      647400
 1105 042f 00       		.align	2
 1106              	.LC62:
 1107 0430 696E7465 		.ascii	"integral(error(t)*dt)\000"
 1107      6772616C 
 1107      28657272 
 1107      6F722874 
 1107      292A6474 
 1108 0446 0000     		.align	2
 1109              	.LC63:
 1110 0448 4B69202A 		.ascii	"Ki * integral(e(t)) (fixed 4Vpp Output at PWM MAX)\000"
 1110      20696E74 
 1110      65677261 
 1110      6C286528 
 1110      74292920 
 1111 047b 00       		.align	2
 1112              	.LC64:
 1113 047c 63762874 		.ascii	"cv(t) (fixed 4Vpp Output at PWM MAX)\000"
 1113      29202866 
 1113      69786564 
 1113      20345670 
 1113      70204F75 
 1114 04a1 000000   		.align	2
 1115              	.LC65:
 1116 04a4 494E5445 		.ascii	"INTERNAL FW ERROR!   \000"
 1116      524E414C 
 1116      20465720 
 1116      4552524F 
 1116      52212020 
 1117              		.section	.text.ShowParamsColor,"ax",%progbits
 1118              		.align	2
 1119              		.global	ShowParamsColor
 1120              		.thumb
 1121              		.thumb_func
 1122              		.type	ShowParamsColor, %function
 1123              	ShowParamsColor:
 1124              	.LFB65:
 416:.\console.c   **** 
 417:.\console.c   **** void ShowParamsColor(struct MOTOR_AXIS *paxis)
 418:.\console.c   **** {	
 1125              		.loc 1 418 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 8
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0000 80B5     		push	{r7, lr}
 1130              	.LCFI25:
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 82B0     		sub	sp, sp, #8
 1135              	.LCFI26:
 1136              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 32


 1137 0004 00AF     		add	r7, sp, #0
 1138              	.LCFI27:
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
 419:.\console.c   **** 	printf("%1u:",(uint16)((*paxis).param.color));
 1141              		.loc 1 419 0
 1142 0008 7B68     		ldr	r3, [r7, #4]
 1143 000a 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1144 000e 40F20000 		movw	r0, #:lower16:.LC55
 1145 0012 C0F20000 		movt	r0, #:upper16:.LC55
 1146 0016 1946     		mov	r1, r3
 1147 0018 FFF7FEFF 		bl	printf
 420:.\console.c   **** 	
 421:.\console.c   **** 	if ((*paxis).param.color == GYRO_RATE)
 1148              		.loc 1 421 0
 1149 001c 7B68     		ldr	r3, [r7, #4]
 1150 001e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1151 0022 002B     		cmp	r3, #0
 1152 0024 06D1     		bne	.L73
 422:.\console.c   **** 	{
 423:.\console.c   **** 		printf("GYRO RATE");
 1153              		.loc 1 423 0
 1154 0026 40F20000 		movw	r0, #:lower16:.LC56
 1155 002a C0F20000 		movt	r0, #:upper16:.LC56
 1156 002e FFF7FEFF 		bl	printf
 1157 0032 71E0     		b	.L72
 1158              	.L73:
 424:.\console.c   **** 	}
 425:.\console.c   **** 	else if ((*paxis).param.color == SLAVE_ENC_POS)
 1159              		.loc 1 425 0
 1160 0034 7B68     		ldr	r3, [r7, #4]
 1161 0036 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1162 003a 012B     		cmp	r3, #1
 1163 003c 06D1     		bne	.L75
 426:.\console.c   **** 	{
 427:.\console.c   **** 		printf("SLAVE ENCODER POSITION");
 1164              		.loc 1 427 0
 1165 003e 40F20000 		movw	r0, #:lower16:.LC57
 1166 0042 C0F20000 		movt	r0, #:upper16:.LC57
 1167 0046 FFF7FEFF 		bl	printf
 1168 004a 65E0     		b	.L72
 1169              	.L75:
 428:.\console.c   **** 	}
 429:.\console.c   **** 	else if ((*paxis).param.color == SLAVE_ENC_VEL)
 1170              		.loc 1 429 0
 1171 004c 7B68     		ldr	r3, [r7, #4]
 1172 004e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1173 0052 022B     		cmp	r3, #2
 1174 0054 06D1     		bne	.L76
 430:.\console.c   **** 	{
 431:.\console.c   **** 		printf("SLAVE ENCODER VELOCITY");
 1175              		.loc 1 431 0
 1176 0056 40F20000 		movw	r0, #:lower16:.LC58
 1177 005a C0F20000 		movt	r0, #:upper16:.LC58
 1178 005e FFF7FEFF 		bl	printf
 1179 0062 59E0     		b	.L72
 1180              	.L76:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 33


 432:.\console.c   **** 	}	
 433:.\console.c   **** 	else if ((*paxis).param.color == ASTIM_IN)
 1181              		.loc 1 433 0
 1182 0064 7B68     		ldr	r3, [r7, #4]
 1183 0066 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1184 006a 032B     		cmp	r3, #3
 1185 006c 06D1     		bne	.L77
 434:.\console.c   **** 	{
 435:.\console.c   **** 		printf("ASTIM INPUT");
 1186              		.loc 1 435 0
 1187 006e 40F20000 		movw	r0, #:lower16:.LC59
 1188 0072 C0F20000 		movt	r0, #:upper16:.LC59
 1189 0076 FFF7FEFF 		bl	printf
 1190 007a 4DE0     		b	.L72
 1191              	.L77:
 436:.\console.c   **** 	}	
 437:.\console.c   **** 	else if ((*paxis).param.color == CTRL_ERROR)
 1192              		.loc 1 437 0
 1193 007c 7B68     		ldr	r3, [r7, #4]
 1194 007e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1195 0082 042B     		cmp	r3, #4
 1196 0084 06D1     		bne	.L78
 438:.\console.c   **** 	{
 439:.\console.c   **** 		printf("error(t)");
 1197              		.loc 1 439 0
 1198 0086 40F20000 		movw	r0, #:lower16:.LC60
 1199 008a C0F20000 		movt	r0, #:upper16:.LC60
 1200 008e FFF7FEFF 		bl	printf
 1201 0092 41E0     		b	.L72
 1202              	.L78:
 440:.\console.c   **** 	}	
 441:.\console.c   **** 	else if ((*paxis).param.color == CTRL_DERROR)
 1203              		.loc 1 441 0
 1204 0094 7B68     		ldr	r3, [r7, #4]
 1205 0096 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1206 009a 052B     		cmp	r3, #5
 1207 009c 06D1     		bne	.L79
 442:.\console.c   **** 	{
 443:.\console.c   **** 		printf("d(error(t))/dt");
 1208              		.loc 1 443 0
 1209 009e 40F20000 		movw	r0, #:lower16:.LC61
 1210 00a2 C0F20000 		movt	r0, #:upper16:.LC61
 1211 00a6 FFF7FEFF 		bl	printf
 1212 00aa 35E0     		b	.L72
 1213              	.L79:
 444:.\console.c   **** 	}
 445:.\console.c   **** 	else if ((*paxis).param.color == CTRL_IERROR)
 1214              		.loc 1 445 0
 1215 00ac 7B68     		ldr	r3, [r7, #4]
 1216 00ae 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1217 00b2 062B     		cmp	r3, #6
 1218 00b4 06D1     		bne	.L80
 446:.\console.c   **** 	{
 447:.\console.c   **** 		printf("integral(error(t)*dt)");
 1219              		.loc 1 447 0
 1220 00b6 40F20000 		movw	r0, #:lower16:.LC62
 1221 00ba C0F20000 		movt	r0, #:upper16:.LC62
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 34


 1222 00be FFF7FEFF 		bl	printf
 1223 00c2 29E0     		b	.L72
 1224              	.L80:
 448:.\console.c   **** 	}
 449:.\console.c   **** 	else if ((*paxis).param.color == CTRL_AZIERROR)
 1225              		.loc 1 449 0
 1226 00c4 7B68     		ldr	r3, [r7, #4]
 1227 00c6 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1228 00ca 072B     		cmp	r3, #7
 1229 00cc 06D1     		bne	.L81
 450:.\console.c   **** 	{
 451:.\console.c   **** 		printf("integral(error(t)*dt)");
 1230              		.loc 1 451 0
 1231 00ce 40F20000 		movw	r0, #:lower16:.LC62
 1232 00d2 C0F20000 		movt	r0, #:upper16:.LC62
 1233 00d6 FFF7FEFF 		bl	printf
 1234 00da 1DE0     		b	.L72
 1235              	.L81:
 452:.\console.c   **** 	}
 453:.\console.c   **** 	else if ((*paxis).param.color == CTRL_AZIERROR)
 1236              		.loc 1 453 0
 1237 00dc 7B68     		ldr	r3, [r7, #4]
 1238 00de 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1239 00e2 072B     		cmp	r3, #7
 1240 00e4 06D1     		bne	.L82
 454:.\console.c   **** 	{
 455:.\console.c   **** 		printf("Ki * integral(e(t)) (fixed 4Vpp Output at PWM MAX)");
 1241              		.loc 1 455 0
 1242 00e6 40F20000 		movw	r0, #:lower16:.LC63
 1243 00ea C0F20000 		movt	r0, #:upper16:.LC63
 1244 00ee FFF7FEFF 		bl	printf
 1245 00f2 11E0     		b	.L72
 1246              	.L82:
 456:.\console.c   **** 	}		
 457:.\console.c   **** 	else if ((*paxis).param.color == CTRL_CV)
 1247              		.loc 1 457 0
 1248 00f4 7B68     		ldr	r3, [r7, #4]
 1249 00f6 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1250 00fa 082B     		cmp	r3, #8
 1251 00fc 06D1     		bne	.L83
 458:.\console.c   **** 	{
 459:.\console.c   **** 		printf("cv(t) (fixed 4Vpp Output at PWM MAX)");
 1252              		.loc 1 459 0
 1253 00fe 40F20000 		movw	r0, #:lower16:.LC64
 1254 0102 C0F20000 		movt	r0, #:upper16:.LC64
 1255 0106 FFF7FEFF 		bl	printf
 1256 010a 05E0     		b	.L72
 1257              	.L83:
 460:.\console.c   **** 	}
 461:.\console.c   **** 	else
 462:.\console.c   **** 	{
 463:.\console.c   **** 		printf("INTERNAL FW ERROR!   ");
 1258              		.loc 1 463 0
 1259 010c 40F20000 		movw	r0, #:lower16:.LC65
 1260 0110 C0F20000 		movt	r0, #:upper16:.LC65
 1261 0114 FFF7FEFF 		bl	printf
 1262              	.L72:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 35


 464:.\console.c   **** 	}	
 465:.\console.c   **** }
 1263              		.loc 1 465 0
 1264 0118 07F10807 		add	r7, r7, #8
 1265 011c BD46     		mov	sp, r7
 1266 011e 80BD     		pop	{r7, pc}
 1267              		.cfi_endproc
 1268              	.LFE65:
 1269              		.size	ShowParamsColor, .-ShowParamsColor
 1270              		.section	.rodata
 1271 04ba 0000     		.align	2
 1272              	.LC66:
 1273 04bc 28424554 		.ascii	"(BETWEEN)  \000"
 1273      5745454E 
 1273      29202000 
 1274              		.align	2
 1275              	.LC67:
 1276 04c8 28504F53 		.ascii	"(POS    )  \000"
 1276      20202020 
 1276      29202000 
 1277              		.align	2
 1278              	.LC68:
 1279 04d4 284E4547 		.ascii	"(NEG    )  \000"
 1279      20202020 
 1279      29202000 
 1280              		.align	2
 1281              	.LC69:
 1282 04e0 28494E54 		.ascii	"(INT ERR) \000"
 1282      20455252 
 1282      292000
 1283              		.section	.text.ShowLimits,"ax",%progbits
 1284              		.align	2
 1285              		.global	ShowLimits
 1286              		.thumb
 1287              		.thumb_func
 1288              		.type	ShowLimits, %function
 1289              	ShowLimits:
 1290              	.LFB66:
 466:.\console.c   **** 
 467:.\console.c   **** void ShowLimits(struct MOTOR_AXIS *paxis)
 468:.\console.c   **** {
 1291              		.loc 1 468 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 8
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 80B5     		push	{r7, lr}
 1296              	.LCFI28:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 82B0     		sub	sp, sp, #8
 1301              	.LCFI29:
 1302              		.cfi_def_cfa_offset 16
 1303 0004 00AF     		add	r7, sp, #0
 1304              	.LCFI30:
 1305              		.cfi_def_cfa_register 7
 1306 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 36


 469:.\console.c   **** 	if ((*paxis).lc.status == COARSE_BETWEEN_LIMITS_OK)
 1307              		.loc 1 469 0
 1308 0008 7B68     		ldr	r3, [r7, #4]
 1309 000a 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1310 000e 002B     		cmp	r3, #0
 1311 0010 06D1     		bne	.L85
 470:.\console.c   **** 	{
 471:.\console.c   **** 		printf("(BETWEEN)  ");
 1312              		.loc 1 471 0
 1313 0012 40F20000 		movw	r0, #:lower16:.LC66
 1314 0016 C0F20000 		movt	r0, #:upper16:.LC66
 1315 001a FFF7FEFF 		bl	printf
 1316 001e 1DE0     		b	.L84
 1317              	.L85:
 472:.\console.c   **** 	}
 473:.\console.c   **** 	else if ((*paxis).lc.status == POSITIVE_LIMIT_REACHED)
 1318              		.loc 1 473 0
 1319 0020 7B68     		ldr	r3, [r7, #4]
 1320 0022 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1321 0026 022B     		cmp	r3, #2
 1322 0028 06D1     		bne	.L87
 474:.\console.c   **** 	{
 475:.\console.c   **** 		printf("(POS    )  ");
 1323              		.loc 1 475 0
 1324 002a 40F20000 		movw	r0, #:lower16:.LC67
 1325 002e C0F20000 		movt	r0, #:upper16:.LC67
 1326 0032 FFF7FEFF 		bl	printf
 1327 0036 11E0     		b	.L84
 1328              	.L87:
 476:.\console.c   **** 	}
 477:.\console.c   **** 	else if ((*paxis).lc.status == NEGATIVE_LIMIT_REACHED)
 1329              		.loc 1 477 0
 1330 0038 7B68     		ldr	r3, [r7, #4]
 1331 003a 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1332 003e 012B     		cmp	r3, #1
 1333 0040 06D1     		bne	.L88
 478:.\console.c   **** 	{
 479:.\console.c   **** 		printf("(NEG    )  ");
 1334              		.loc 1 479 0
 1335 0042 40F20000 		movw	r0, #:lower16:.LC68
 1336 0046 C0F20000 		movt	r0, #:upper16:.LC68
 1337 004a FFF7FEFF 		bl	printf
 1338 004e 05E0     		b	.L84
 1339              	.L88:
 480:.\console.c   **** 	}
 481:.\console.c   **** 	else
 482:.\console.c   **** 	{
 483:.\console.c   **** 		printf("(INT ERR) ");
 1340              		.loc 1 483 0
 1341 0050 40F20000 		movw	r0, #:lower16:.LC69
 1342 0054 C0F20000 		movt	r0, #:upper16:.LC69
 1343 0058 FFF7FEFF 		bl	printf
 1344              	.L84:
 484:.\console.c   **** 	}	
 485:.\console.c   **** }
 1345              		.loc 1 485 0
 1346 005c 07F10807 		add	r7, r7, #8
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 37


 1347 0060 BD46     		mov	sp, r7
 1348 0062 80BD     		pop	{r7, pc}
 1349              		.cfi_endproc
 1350              	.LFE66:
 1351              		.size	ShowLimits, .-ShowLimits
 1352              		.section	.text.ReadUSBbuffer,"ax",%progbits
 1353              		.align	2
 1354              		.global	ReadUSBbuffer
 1355              		.thumb
 1356              		.thumb_func
 1357              		.type	ReadUSBbuffer, %function
 1358              	ReadUSBbuffer:
 1359              	.LFB67:
 486:.\console.c   **** 
 487:.\console.c   **** // ****************************************************************
 488:.\console.c   **** // *** BUFFERIZER (pass 1 of 3)								    ***
 489:.\console.c   **** // ****************************************************************
 490:.\console.c   **** // *** Legge l'UART USB e popola il buffer userInputBuffer      ***
 491:.\console.c   **** // ****************************************************************
 492:.\console.c   **** 
 493:.\console.c   **** uint8 ReadUSBbuffer(bit echo, bit timeout)
 494:.\console.c   **** {
 1360              		.loc 1 494 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 24
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364 0000 80B5     		push	{r7, lr}
 1365              	.LCFI31:
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 7, -8
 1368              		.cfi_offset 14, -4
 1369 0002 86B0     		sub	sp, sp, #24
 1370              	.LCFI32:
 1371              		.cfi_def_cfa_offset 32
 1372 0004 00AF     		add	r7, sp, #0
 1373              	.LCFI33:
 1374              		.cfi_def_cfa_register 7
 1375 0006 0246     		mov	r2, r0
 1376 0008 0B46     		mov	r3, r1
 1377 000a FA71     		strb	r2, [r7, #7]
 1378 000c BB71     		strb	r3, [r7, #6]
 495:.\console.c   **** 	uint8 index = 0;
 1379              		.loc 1 495 0
 1380 000e 4FF00003 		mov	r3, #0
 1381 0012 FB75     		strb	r3, [r7, #23]
 496:.\console.c   **** 	uint16 ticks = 0;
 1382              		.loc 1 496 0
 1383 0014 4FF00003 		mov	r3, #0
 1384 0018 BB82     		strh	r3, [r7, #20]	@ movhi
 497:.\console.c   **** 	char charin;
 498:.\console.c   **** 	
 499:.\console.c   **** 	clear_string(userInputBuffer);
 1385              		.loc 1 499 0
 1386 001a 40F20000 		movw	r0, #:lower16:userInputBuffer
 1387 001e C0F20000 		movt	r0, #:upper16:userInputBuffer
 1388 0022 FFF7FEFF 		bl	clear_string
 500:.\console.c   **** 	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 38


 501:.\console.c   **** 	while ((index < sizeof(userInputBuffer)-1)
 1389              		.loc 1 501 0
 1390 0026 37E0     		b	.L90
 1391              	.L96:
 502:.\console.c   **** 			&& ((charin=UART_USB_GetChar()) != '\r')
 503:.\console.c   **** 			&& (ticks < TIMEOUT_TICKS) 
 504:.\console.c   **** 			&& (USB_Check() == USB_INSERTED))
 505:.\console.c   **** 	{
 506:.\console.c   **** 		if ((charin != 0) && (charin != '\n'))
 1392              		.loc 1 506 0
 1393 0028 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1394 002a 002B     		cmp	r3, #0
 1395 002c 2DD0     		beq	.L91
 1396              		.loc 1 506 0 is_stmt 0 discriminator 1
 1397 002e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1398 0030 0A2B     		cmp	r3, #10
 1399 0032 2AD0     		beq	.L91
 507:.\console.c   **** 		{
 508:.\console.c   **** 			userInputBuffer[index] = tolower((int)charin);
 1400              		.loc 1 508 0 is_stmt 1
 1401 0034 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1402              	.LBB2:
 1403 0036 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1404 0038 FB60     		str	r3, [r7, #12]
 1405 003a 40F20003 		movw	r3, #:lower16:__ctype_ptr__
 1406 003e C0F20003 		movt	r3, #:upper16:__ctype_ptr__
 1407 0042 1968     		ldr	r1, [r3, #0]
 1408 0044 FB68     		ldr	r3, [r7, #12]
 1409 0046 03F10103 		add	r3, r3, #1
 1410 004a CB18     		adds	r3, r1, r3
 1411 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1412 004e 03F00303 		and	r3, r3, #3
 1413 0052 012B     		cmp	r3, #1
 1414 0054 03D1     		bne	.L92
 1415              		.loc 1 508 0 is_stmt 0 discriminator 1
 1416 0056 FB68     		ldr	r3, [r7, #12]
 1417 0058 03F12003 		add	r3, r3, #32
 1418 005c 00E0     		b	.L93
 1419              	.L92:
 1420              		.loc 1 508 0 discriminator 2
 1421 005e FB68     		ldr	r3, [r7, #12]
 1422              	.L93:
 1423              	.LBE2:
 1424              		.loc 1 508 0 discriminator 3
 1425 0060 D9B2     		uxtb	r1, r3
 1426 0062 40F20003 		movw	r3, #:lower16:userInputBuffer
 1427 0066 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1428 006a 9954     		strb	r1, [r3, r2]
 509:.\console.c   **** 			index++;
 1429              		.loc 1 509 0 is_stmt 1 discriminator 3
 1430 006c FB7D     		ldrb	r3, [r7, #23]
 1431 006e 03F10103 		add	r3, r3, #1
 1432 0072 FB75     		strb	r3, [r7, #23]
 510:.\console.c   **** 			if (echo == 1)
 1433              		.loc 1 510 0 discriminator 3
 1434 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1435 0076 012B     		cmp	r3, #1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 39


 1436 0078 03D1     		bne	.L94
 511:.\console.c   **** 			{
 512:.\console.c   **** 				printf("%c", charin);
 1437              		.loc 1 512 0
 1438 007a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1439 007c 1846     		mov	r0, r3
 1440 007e FFF7FEFF 		bl	putchar
 1441              	.L94:
 513:.\console.c   **** 			}
 514:.\console.c   **** 			ticks = 0;
 1442              		.loc 1 514 0
 1443 0082 4FF00003 		mov	r3, #0
 1444 0086 BB82     		strh	r3, [r7, #20]	@ movhi
 1445 0088 06E0     		b	.L90
 1446              	.L91:
 515:.\console.c   **** 		}
 516:.\console.c   **** 		else
 517:.\console.c   **** 		{
 518:.\console.c   **** 			if (timeout == 1)
 1447              		.loc 1 518 0
 1448 008a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1449 008c 012B     		cmp	r3, #1
 1450 008e 03D1     		bne	.L90
 519:.\console.c   **** 			{
 520:.\console.c   **** 				ticks++;
 1451              		.loc 1 520 0
 1452 0090 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1453 0092 03F10103 		add	r3, r3, #1
 1454 0096 BB82     		strh	r3, [r7, #20]	@ movhi
 1455              	.L90:
 501:.\console.c   **** 	while ((index < sizeof(userInputBuffer)-1)
 1456              		.loc 1 501 0 discriminator 1
 1457 0098 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1458 009a 262B     		cmp	r3, #38
 1459 009c 10D8     		bhi	.L95
 502:.\console.c   **** 			&& ((charin=UART_USB_GetChar()) != '\r')
 1460              		.loc 1 502 0
 1461 009e FFF7FEFF 		bl	UART_USB_GetChar
 1462 00a2 0346     		mov	r3, r0
 1463 00a4 FB74     		strb	r3, [r7, #19]
 1464 00a6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1465 00a8 0D2B     		cmp	r3, #13
 1466 00aa 09D0     		beq	.L95
 503:.\console.c   **** 			&& (ticks < TIMEOUT_TICKS) 
 1467              		.loc 1 503 0
 1468 00ac BA8A     		ldrh	r2, [r7, #20]
 1469 00ae 4CF24F33 		movw	r3, #49999
 1470 00b2 9A42     		cmp	r2, r3
 1471 00b4 04D8     		bhi	.L95
 504:.\console.c   **** 			&& (USB_Check() == USB_INSERTED))
 1472              		.loc 1 504 0
 1473 00b6 FFF7FEFF 		bl	USB_Check
 1474 00ba 0346     		mov	r3, r0
 1475 00bc 012B     		cmp	r3, #1
 1476 00be B3D0     		beq	.L96
 1477              	.L95:
 521:.\console.c   **** 			}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 40


 522:.\console.c   **** 		}
 523:.\console.c   **** 	}
 524:.\console.c   **** 	userInputBuffer[index] = '\0';
 1478              		.loc 1 524 0
 1479 00c0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1480 00c2 40F20003 		movw	r3, #:lower16:userInputBuffer
 1481 00c6 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1482 00ca 4FF00001 		mov	r1, #0
 1483 00ce 9954     		strb	r1, [r3, r2]
 525:.\console.c   **** 	
 526:.\console.c   **** 	if (index >= sizeof(userInputBuffer)-1)
 1484              		.loc 1 526 0
 1485 00d0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1486 00d2 262B     		cmp	r3, #38
 1487 00d4 02D9     		bls	.L97
 527:.\console.c   **** 	{
 528:.\console.c   **** 		return READ_BUFF_OVERFLOW;
 1488              		.loc 1 528 0
 1489 00d6 4FF00203 		mov	r3, #2
 1490 00da 09E0     		b	.L98
 1491              	.L97:
 529:.\console.c   **** 	}
 530:.\console.c   **** 	else
 531:.\console.c   **** 	{
 532:.\console.c   **** 		if (ticks >= TIMEOUT_TICKS)
 1492              		.loc 1 532 0
 1493 00dc BA8A     		ldrh	r2, [r7, #20]
 1494 00de 4CF24F33 		movw	r3, #49999
 1495 00e2 9A42     		cmp	r2, r3
 1496 00e4 02D9     		bls	.L99
 533:.\console.c   **** 		{
 534:.\console.c   **** 			return READ_TIMEOUT;
 1497              		.loc 1 534 0
 1498 00e6 4FF00103 		mov	r3, #1
 1499 00ea 01E0     		b	.L98
 1500              	.L99:
 535:.\console.c   **** 		}
 536:.\console.c   **** 		else
 537:.\console.c   **** 		{
 538:.\console.c   **** 			return READ_OK;
 1501              		.loc 1 538 0
 1502 00ec 4FF00003 		mov	r3, #0
 1503              	.L98:
 539:.\console.c   **** 		}
 540:.\console.c   **** 	}
 541:.\console.c   **** }	
 1504              		.loc 1 541 0
 1505 00f0 1846     		mov	r0, r3
 1506 00f2 07F11807 		add	r7, r7, #24
 1507 00f6 BD46     		mov	sp, r7
 1508 00f8 80BD     		pop	{r7, pc}
 1509              		.cfi_endproc
 1510              	.LFE67:
 1511              		.size	ReadUSBbuffer, .-ReadUSBbuffer
 1512 00fa 00BF     		.section	.rodata
 1513 04eb 00       		.align	2
 1514              	.LC70:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 41


 1515 04ec 2000     		.ascii	" \000"
 1516 04ee 0000     		.align	2
 1517              	.LC71:
 1518 04f0 62756666 		.ascii	"buff=\000"
 1518      3D00
 1519 04f6 0000     		.align	2
 1520              	.LC72:
 1521 04f8 5B625D00 		.ascii	"[b]\000"
 1522              		.align	2
 1523              	.LC73:
 1524 04fc 5B645D00 		.ascii	"[d]\000"
 1525              		.align	2
 1526              	.LC74:
 1527 0500 20746B31 		.ascii	" tk1=\000"
 1527      3D00
 1528 0506 0000     		.align	2
 1529              	.LC75:
 1530 0508 20746B32 		.ascii	" tk2=\000"
 1530      3D00
 1531 050e 0000     		.align	2
 1532              	.LC76:
 1533 0510 20746B33 		.ascii	" tk3=\000"
 1533      3D00
 1534 0516 0000     		.align	2
 1535              	.LC77:
 1536 0518 20746B34 		.ascii	" tk4=\000"
 1536      3D00
 1537              		.section	.text.scanner2,"ax",%progbits
 1538              		.align	2
 1539              		.global	scanner2
 1540              		.thumb
 1541              		.thumb_func
 1542              		.type	scanner2, %function
 1543              	scanner2:
 1544              	.LFB68:
 542:.\console.c   **** 
 543:.\console.c   **** // ************************************************************************
 544:.\console.c   **** // *** SCANNERIZER (pass 2 of 3)									    ***
 545:.\console.c   **** // ************************************************************************
 546:.\console.c   **** // *** Estrae quattro sottostinghe dallo Standard Input (USB)
 547:.\console.c   **** // *** e le associa ai token di actual_command:
 548:.\console.c   **** // *** actual_command.action    <-- primo token
 549:.\console.c   **** // *** actual_command.parameter <-- secondo token 
 550:.\console.c   **** // *** actual_command.number1   <-- terzo token
 551:.\console.c   **** // *** actual_command.number2   <-- quarto token
 552:.\console.c   **** // *** restituisce:
 553:.\console.c   **** // *** 0: SCAN_OK
 554:.\console.c   **** // *** 1: SCANNING ERROR (tokens > 4)
 555:.\console.c   **** // ************************************************************************
 556:.\console.c   **** 
 557:.\console.c   **** uint8 scanner2(bit verbose)
 558:.\console.c   **** {
 1545              		.loc 1 558 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 64
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 42


 1550              	.LCFI34:
 1551              		.cfi_def_cfa_offset 8
 1552              		.cfi_offset 7, -8
 1553              		.cfi_offset 14, -4
 1554 0002 90B0     		sub	sp, sp, #64
 1555              	.LCFI35:
 1556              		.cfi_def_cfa_offset 72
 1557 0004 00AF     		add	r7, sp, #0
 1558              	.LCFI36:
 1559              		.cfi_def_cfa_register 7
 1560 0006 0346     		mov	r3, r0
 1561 0008 FB71     		strb	r3, [r7, #7]
 559:.\console.c   **** 	uint8 rdstat=0;
 1562              		.loc 1 559 0
 1563 000a 4FF00003 		mov	r3, #0
 1564 000e 87F83730 		strb	r3, [r7, #55]
 560:.\console.c   **** 	uint8 uidx=0, uidy=0;	
 1565              		.loc 1 560 0
 1566 0012 4FF00003 		mov	r3, #0
 1567 0016 87F83F30 		strb	r3, [r7, #63]
 1568 001a 4FF00003 		mov	r3, #0
 1569 001e 87F83E30 		strb	r3, [r7, #62]
 561:.\console.c   **** 	char localBuffer[40];
 562:.\console.c   **** 	char* p;
 563:.\console.c   **** 
 564:.\console.c   **** 	clear_string(actual_cmd.action);
 1570              		.loc 1 564 0
 1571 0022 40F20000 		movw	r0, #:lower16:actual_cmd
 1572 0026 C0F20000 		movt	r0, #:upper16:actual_cmd
 1573 002a FFF7FEFF 		bl	clear_string
 565:.\console.c   **** 	clear_string(actual_cmd.parameter);	
 1574              		.loc 1 565 0
 1575 002e B248     		ldr	r0, .L124
 1576 0030 FFF7FEFF 		bl	clear_string
 566:.\console.c   **** 	clear_string(actual_cmd.number1);	
 1577              		.loc 1 566 0
 1578 0034 B148     		ldr	r0, .L124+4
 1579 0036 FFF7FEFF 		bl	clear_string
 567:.\console.c   **** 	clear_string(actual_cmd.number2);	
 1580              		.loc 1 567 0
 1581 003a B148     		ldr	r0, .L124+8
 1582 003c FFF7FEFF 		bl	clear_string
 568:.\console.c   **** 
 569:.\console.c   **** 	/* Reads from USB buffer (standard input) */
 570:.\console.c   **** 	rdstat=ReadUSBbuffer(ECHO_ON, TIMEOUT_OFF);
 1583              		.loc 1 570 0
 1584 0040 4FF00100 		mov	r0, #1
 1585 0044 4FF00001 		mov	r1, #0
 1586 0048 FFF7FEFF 		bl	ReadUSBbuffer
 1587 004c 0346     		mov	r3, r0
 1588 004e 87F83730 		strb	r3, [r7, #55]
 571:.\console.c   **** 	
 572:.\console.c   **** 	/* Extract 4 Tokens */
 573:.\console.c   **** 	if (rdstat == READ_OK)
 1589              		.loc 1 573 0
 1590 0052 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1591 0056 002B     		cmp	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 43


 1592 0058 40F0BB80 		bne	.L101
 574:.\console.c   **** 	{
 575:.\console.c   **** 		clear_string(localBuffer);
 1593              		.loc 1 575 0
 1594 005c 07F10C03 		add	r3, r7, #12
 1595 0060 1846     		mov	r0, r3
 1596 0062 FFF7FEFF 		bl	clear_string
 576:.\console.c   **** 		//strcpy(localBuffer, userInputBuffer);
 577:.\console.c   **** 
 578:.\console.c   **** 		/*** strcopy with BACKSPACE control	***/
 579:.\console.c   **** 		uidx = 0;												// reset user  buffer pointer
 1597              		.loc 1 579 0
 1598 0066 4FF00003 		mov	r3, #0
 1599 006a 87F83F30 		strb	r3, [r7, #63]
 580:.\console.c   **** 		uidy = 0;									 			// reset local buffer pointer
 1600              		.loc 1 580 0
 1601 006e 4FF00003 		mov	r3, #0
 1602 0072 87F83E30 		strb	r3, [r7, #62]
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1603              		.loc 1 581 0
 1604 0076 36E0     		b	.L102
 1605              	.L105:
 582:.\console.c   **** 		{
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 584:.\console.c   **** 			{
 585:.\console.c   **** 				uidx = uidx + 1;								//		points to the next char
 1606              		.loc 1 585 0
 1607 0078 97F83F30 		ldrb	r3, [r7, #63]
 1608 007c 03F10103 		add	r3, r3, #1
 1609 0080 87F83F30 		strb	r3, [r7, #63]
 586:.\console.c   **** 
 587:.\console.c   **** 				if (uidy>0)										//		if there are characters to cancel
 1610              		.loc 1 587 0
 1611 0084 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1612 0088 002B     		cmp	r3, #0
 1613 008a 05D0     		beq	.L103
 588:.\console.c   **** 				{												//
 589:.\console.c   **** 					uidy = uidy - 1;							//			cancel the previous copied characters
 1614              		.loc 1 589 0
 1615 008c 97F83E30 		ldrb	r3, [r7, #62]
 1616 0090 03F1FF33 		add	r3, r3, #-1
 1617 0094 87F83E30 		strb	r3, [r7, #62]
 1618              	.L103:
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 1619              		.loc 1 583 0 discriminator 1
 1620 0098 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1621 009c 272B     		cmp	r3, #39
 1622 009e 08D8     		bhi	.L104
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 1623              		.loc 1 583 0 is_stmt 0 discriminator 2
 1624 00a0 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1625 00a4 40F20003 		movw	r3, #:lower16:userInputBuffer
 1626 00a8 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1627 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1628 00ae 082B     		cmp	r3, #8
 1629 00b0 E2D0     		beq	.L105
 1630              	.L104:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 44


 590:.\console.c   **** 				}												//		
 591:.\console.c   **** 			}
 592:.\console.c   **** 			localBuffer[uidy] = userInputBuffer[uidx];			//	copy one character from user to local buffer
 1631              		.loc 1 592 0 is_stmt 1
 1632 00b2 97F83E10 		ldrb	r1, [r7, #62]	@ zero_extendqisi2
 1633 00b6 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1634 00ba 40F20003 		movw	r3, #:lower16:userInputBuffer
 1635 00be C0F20003 		movt	r3, #:upper16:userInputBuffer
 1636 00c2 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 1637 00c4 07F14000 		add	r0, r7, #64
 1638 00c8 4318     		adds	r3, r0, r1
 1639 00ca 03F8342C 		strb	r2, [r3, #-52]
 593:.\console.c   **** 			uidx++;												//	increments user  buffer pointer
 1640              		.loc 1 593 0
 1641 00ce 97F83F30 		ldrb	r3, [r7, #63]
 1642 00d2 03F10103 		add	r3, r3, #1
 1643 00d6 87F83F30 		strb	r3, [r7, #63]
 594:.\console.c   **** 			uidy++;												//	increments local buffer pointer
 1644              		.loc 1 594 0
 1645 00da 97F83E30 		ldrb	r3, [r7, #62]
 1646 00de 03F10103 		add	r3, r3, #1
 1647 00e2 87F83E30 		strb	r3, [r7, #62]
 1648              	.L102:
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1649              		.loc 1 581 0 discriminator 1
 1650 00e6 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1651 00ea 272B     		cmp	r3, #39
 1652 00ec 08D8     		bhi	.L106
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1653              		.loc 1 581 0 is_stmt 0 discriminator 2
 1654 00ee 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1655 00f2 40F20003 		movw	r3, #:lower16:userInputBuffer
 1656 00f6 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1657 00fa 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1658 00fc 002B     		cmp	r3, #0
 1659 00fe CBD1     		bne	.L103
 1660              	.L106:
 595:.\console.c   **** 		}
 596:.\console.c   **** 		localBuffer[uidy] = '\0';								//terminate the local buffer string
 1661              		.loc 1 596 0 is_stmt 1
 1662 0100 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1663 0104 07F14002 		add	r2, r7, #64
 1664 0108 D318     		adds	r3, r2, r3
 1665 010a 4FF00002 		mov	r2, #0
 1666 010e 03F8342C 		strb	r2, [r3, #-52]
 597:.\console.c   **** 		/*** strcopy with BACKSPACE control END ***/
 598:.\console.c   **** 		
 599:.\console.c   **** 		p = strtok(localBuffer, " ");
 1667              		.loc 1 599 0
 1668 0112 07F10C03 		add	r3, r7, #12
 1669 0116 1846     		mov	r0, r3
 1670 0118 40F20001 		movw	r1, #:lower16:.LC70
 1671 011c C0F20001 		movt	r1, #:upper16:.LC70
 1672 0120 FFF7FEFF 		bl	strtok
 1673 0124 B863     		str	r0, [r7, #56]
 600:.\console.c   **** 
 601:.\console.c   **** 		if (p != NULL)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 45


 1674              		.loc 1 601 0
 1675 0126 BB6B     		ldr	r3, [r7, #56]
 1676 0128 002B     		cmp	r3, #0
 1677 012a 10D0     		beq	.L108
 602:.\console.c   **** 		{
 603:.\console.c   **** 			strcpy(actual_cmd.action, p);	
 1678              		.loc 1 603 0
 1679 012c 40F20000 		movw	r0, #:lower16:actual_cmd
 1680 0130 C0F20000 		movt	r0, #:upper16:actual_cmd
 1681 0134 B96B     		ldr	r1, [r7, #56]
 1682 0136 FFF7FEFF 		bl	strcpy
 604:.\console.c   **** 			p = strtok(NULL, " ");
 1683              		.loc 1 604 0
 1684 013a 4FF00000 		mov	r0, #0
 1685 013e 40F20001 		movw	r1, #:lower16:.LC70
 1686 0142 C0F20001 		movt	r1, #:upper16:.LC70
 1687 0146 FFF7FEFF 		bl	strtok
 1688 014a B863     		str	r0, [r7, #56]
 1689 014c 05E0     		b	.L109
 1690              	.L108:
 605:.\console.c   **** 		}
 606:.\console.c   **** 		else
 607:.\console.c   **** 		{
 608:.\console.c   **** 			clear_string(actual_cmd.action);
 1691              		.loc 1 608 0
 1692 014e 40F20000 		movw	r0, #:lower16:actual_cmd
 1693 0152 C0F20000 		movt	r0, #:upper16:actual_cmd
 1694 0156 FFF7FEFF 		bl	clear_string
 1695              	.L109:
 609:.\console.c   **** 		}
 610:.\console.c   **** 
 611:.\console.c   **** 		if (p != NULL)
 1696              		.loc 1 611 0
 1697 015a BB6B     		ldr	r3, [r7, #56]
 1698 015c 002B     		cmp	r3, #0
 1699 015e 0DD0     		beq	.L110
 612:.\console.c   **** 		{
 613:.\console.c   **** 			strcpy(actual_cmd.parameter, p);	
 1700              		.loc 1 613 0
 1701 0160 6548     		ldr	r0, .L124
 1702 0162 B96B     		ldr	r1, [r7, #56]
 1703 0164 FFF7FEFF 		bl	strcpy
 614:.\console.c   **** 			p = strtok(NULL, " ");
 1704              		.loc 1 614 0
 1705 0168 4FF00000 		mov	r0, #0
 1706 016c 40F20001 		movw	r1, #:lower16:.LC70
 1707 0170 C0F20001 		movt	r1, #:upper16:.LC70
 1708 0174 FFF7FEFF 		bl	strtok
 1709 0178 B863     		str	r0, [r7, #56]
 1710 017a 02E0     		b	.L111
 1711              	.L110:
 615:.\console.c   **** 		}
 616:.\console.c   **** 		else
 617:.\console.c   **** 		{
 618:.\console.c   **** 			clear_string(actual_cmd.parameter);
 1712              		.loc 1 618 0
 1713 017c 5E48     		ldr	r0, .L124
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 46


 1714 017e FFF7FEFF 		bl	clear_string
 1715              	.L111:
 619:.\console.c   **** 		}
 620:.\console.c   **** 		
 621:.\console.c   **** 		if (p != NULL)
 1716              		.loc 1 621 0
 1717 0182 BB6B     		ldr	r3, [r7, #56]
 1718 0184 002B     		cmp	r3, #0
 1719 0186 0DD0     		beq	.L112
 622:.\console.c   **** 		{
 623:.\console.c   **** 			strcpy(actual_cmd.number1, p);	
 1720              		.loc 1 623 0
 1721 0188 5C48     		ldr	r0, .L124+4
 1722 018a B96B     		ldr	r1, [r7, #56]
 1723 018c FFF7FEFF 		bl	strcpy
 624:.\console.c   **** 			p = strtok(NULL, " ");
 1724              		.loc 1 624 0
 1725 0190 4FF00000 		mov	r0, #0
 1726 0194 40F20001 		movw	r1, #:lower16:.LC70
 1727 0198 C0F20001 		movt	r1, #:upper16:.LC70
 1728 019c FFF7FEFF 		bl	strtok
 1729 01a0 B863     		str	r0, [r7, #56]
 1730 01a2 02E0     		b	.L113
 1731              	.L112:
 625:.\console.c   **** 		}
 626:.\console.c   **** 		else
 627:.\console.c   **** 		{
 628:.\console.c   **** 			clear_string(actual_cmd.number1);
 1732              		.loc 1 628 0
 1733 01a4 5548     		ldr	r0, .L124+4
 1734 01a6 FFF7FEFF 		bl	clear_string
 1735              	.L113:
 629:.\console.c   **** 		}
 630:.\console.c   **** 
 631:.\console.c   **** 		if (p != NULL)
 1736              		.loc 1 631 0
 1737 01aa BB6B     		ldr	r3, [r7, #56]
 1738 01ac 002B     		cmp	r3, #0
 1739 01ae 0DD0     		beq	.L114
 632:.\console.c   **** 		{
 633:.\console.c   **** 			strcpy(actual_cmd.number2, p);	
 1740              		.loc 1 633 0
 1741 01b0 5348     		ldr	r0, .L124+8
 1742 01b2 B96B     		ldr	r1, [r7, #56]
 1743 01b4 FFF7FEFF 		bl	strcpy
 634:.\console.c   **** 			p = strtok(NULL, " ");
 1744              		.loc 1 634 0
 1745 01b8 4FF00000 		mov	r0, #0
 1746 01bc 40F20001 		movw	r1, #:lower16:.LC70
 1747 01c0 C0F20001 		movt	r1, #:upper16:.LC70
 1748 01c4 FFF7FEFF 		bl	strtok
 1749 01c8 B863     		str	r0, [r7, #56]
 1750 01ca 02E0     		b	.L101
 1751              	.L114:
 635:.\console.c   **** 		}
 636:.\console.c   **** 		else
 637:.\console.c   **** 		{
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 47


 638:.\console.c   **** 			clear_string(actual_cmd.number2);
 1752              		.loc 1 638 0
 1753 01cc 4C48     		ldr	r0, .L124+8
 1754 01ce FFF7FEFF 		bl	clear_string
 1755              	.L101:
 639:.\console.c   **** 		}
 640:.\console.c   **** 	
 641:.\console.c   **** 	}
 642:.\console.c   **** 
 643:.\console.c   **** 	if (verbose == VERBOSE_ON)
 1756              		.loc 1 643 0
 1757 01d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1758 01d4 012B     		cmp	r3, #1
 1759 01d6 7BD1     		bne	.L115
 644:.\console.c   **** 	{
 645:.\console.c   **** 		printf("\r\n");
 1760              		.loc 1 645 0
 1761 01d8 40F20000 		movw	r0, #:lower16:.LC42
 1762 01dc C0F20000 		movt	r0, #:upper16:.LC42
 1763 01e0 FFF7FEFF 		bl	puts
 646:.\console.c   **** 		printf("buff=");
 1764              		.loc 1 646 0
 1765 01e4 40F20000 		movw	r0, #:lower16:.LC71
 1766 01e8 C0F20000 		movt	r0, #:upper16:.LC71
 1767 01ec FFF7FEFF 		bl	printf
 647:.\console.c   **** 		//prints user input buffer until string termination
 648:.\console.c   **** 		uidx=0;
 1768              		.loc 1 648 0
 1769 01f0 4FF00003 		mov	r3, #0
 1770 01f4 87F83F30 		strb	r3, [r7, #63]
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1771              		.loc 1 649 0
 1772 01f8 2FE0     		b	.L116
 1773              	.L121:
 650:.\console.c   **** 		{
 651:.\console.c   **** 			if (userInputBuffer[uidx] == 8)			// ASCII BACKSPACE   = 8 (\b, ^H)
 1774              		.loc 1 651 0
 1775 01fa 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1776 01fe 40F20003 		movw	r3, #:lower16:userInputBuffer
 1777 0202 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1778 0206 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1779 0208 082B     		cmp	r3, #8
 1780 020a 06D1     		bne	.L117
 652:.\console.c   **** 			{
 653:.\console.c   **** 				printf("[b]");
 1781              		.loc 1 653 0
 1782 020c 40F20000 		movw	r0, #:lower16:.LC72
 1783 0210 C0F20000 		movt	r0, #:upper16:.LC72
 1784 0214 FFF7FEFF 		bl	printf
 1785 0218 19E0     		b	.L118
 1786              	.L117:
 654:.\console.c   **** 			}
 655:.\console.c   **** 			else if (userInputBuffer[uidx] == 127)	// ASCII DELETE7CANC = 127 (^?)
 1787              		.loc 1 655 0
 1788 021a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1789 021e 40F20003 		movw	r3, #:lower16:userInputBuffer
 1790 0222 C0F20003 		movt	r3, #:upper16:userInputBuffer
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 48


 1791 0226 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1792 0228 7F2B     		cmp	r3, #127
 1793 022a 06D1     		bne	.L119
 656:.\console.c   **** 			{
 657:.\console.c   **** 				printf("[d]");
 1794              		.loc 1 657 0
 1795 022c 40F20000 		movw	r0, #:lower16:.LC73
 1796 0230 C0F20000 		movt	r0, #:upper16:.LC73
 1797 0234 FFF7FEFF 		bl	printf
 1798 0238 09E0     		b	.L118
 1799              	.L119:
 658:.\console.c   **** 			}			
 659:.\console.c   **** 			else
 660:.\console.c   **** 			{
 661:.\console.c   **** 				printf ("%c", userInputBuffer[uidx]);
 1800              		.loc 1 661 0
 1801 023a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1802 023e 40F20003 		movw	r3, #:lower16:userInputBuffer
 1803 0242 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1804 0246 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1805 0248 1846     		mov	r0, r3
 1806 024a FFF7FEFF 		bl	putchar
 1807              	.L118:
 662:.\console.c   **** 			}
 663:.\console.c   **** 			uidx++;
 1808              		.loc 1 663 0
 1809 024e 97F83F30 		ldrb	r3, [r7, #63]
 1810 0252 03F10103 		add	r3, r3, #1
 1811 0256 87F83F30 		strb	r3, [r7, #63]
 1812              	.L116:
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1813              		.loc 1 649 0 discriminator 1
 1814 025a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1815 025e 272B     		cmp	r3, #39
 1816 0260 08D8     		bhi	.L120
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1817              		.loc 1 649 0 is_stmt 0 discriminator 2
 1818 0262 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1819 0266 40F20003 		movw	r3, #:lower16:userInputBuffer
 1820 026a C0F20003 		movt	r3, #:upper16:userInputBuffer
 1821 026e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1822 0270 002B     		cmp	r3, #0
 1823 0272 C2D1     		bne	.L121
 1824              	.L120:
 664:.\console.c   **** 		}
 665:.\console.c   **** //		printf(userInputBuffer);
 666:.\console.c   **** 		
 667:.\console.c   **** 		printf(" tk1=");
 1825              		.loc 1 667 0 is_stmt 1
 1826 0274 40F20000 		movw	r0, #:lower16:.LC74
 1827 0278 C0F20000 		movt	r0, #:upper16:.LC74
 1828 027c FFF7FEFF 		bl	printf
 668:.\console.c   **** 		printf(actual_cmd.action);
 1829              		.loc 1 668 0
 1830 0280 40F20000 		movw	r0, #:lower16:actual_cmd
 1831 0284 C0F20000 		movt	r0, #:upper16:actual_cmd
 1832 0288 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 49


 669:.\console.c   **** 		printf(" tk2=");
 1833              		.loc 1 669 0
 1834 028c 40F20000 		movw	r0, #:lower16:.LC75
 1835 0290 C0F20000 		movt	r0, #:upper16:.LC75
 1836 0294 FFF7FEFF 		bl	printf
 670:.\console.c   **** 		printf(actual_cmd.parameter);
 1837              		.loc 1 670 0
 1838 0298 1748     		ldr	r0, .L124
 1839 029a FFF7FEFF 		bl	printf
 671:.\console.c   **** 		printf(" tk3=");
 1840              		.loc 1 671 0
 1841 029e 40F20000 		movw	r0, #:lower16:.LC76
 1842 02a2 C0F20000 		movt	r0, #:upper16:.LC76
 1843 02a6 FFF7FEFF 		bl	printf
 672:.\console.c   **** 		printf(actual_cmd.number1);
 1844              		.loc 1 672 0
 1845 02aa 1448     		ldr	r0, .L124+4
 1846 02ac FFF7FEFF 		bl	printf
 673:.\console.c   **** 		printf(" tk4=");		
 1847              		.loc 1 673 0
 1848 02b0 40F20000 		movw	r0, #:lower16:.LC77
 1849 02b4 C0F20000 		movt	r0, #:upper16:.LC77
 1850 02b8 FFF7FEFF 		bl	printf
 674:.\console.c   **** 		printf(actual_cmd.number2);
 1851              		.loc 1 674 0
 1852 02bc 1048     		ldr	r0, .L124+8
 1853 02be FFF7FEFF 		bl	printf
 675:.\console.c   **** 		printf("\r\n");		
 1854              		.loc 1 675 0
 1855 02c2 40F20000 		movw	r0, #:lower16:.LC42
 1856 02c6 C0F20000 		movt	r0, #:upper16:.LC42
 1857 02ca FFF7FEFF 		bl	puts
 1858 02ce 0BE0     		b	.L122
 1859              	.L115:
 676:.\console.c   **** 	}
 677:.\console.c   **** 	else
 678:.\console.c   **** 	{
 679:.\console.c   **** 		printf("\r\n");	
 1860              		.loc 1 679 0
 1861 02d0 40F20000 		movw	r0, #:lower16:.LC42
 1862 02d4 C0F20000 		movt	r0, #:upper16:.LC42
 1863 02d8 FFF7FEFF 		bl	puts
 680:.\console.c   **** 		printf("\r\n");
 1864              		.loc 1 680 0
 1865 02dc 40F20000 		movw	r0, #:lower16:.LC42
 1866 02e0 C0F20000 		movt	r0, #:upper16:.LC42
 1867 02e4 FFF7FEFF 		bl	puts
 1868              	.L122:
 681:.\console.c   **** 	}
 682:.\console.c   **** 	
 683:.\console.c   **** 	return 0;	//SCAN_OK//	
 1869              		.loc 1 683 0
 1870 02e8 4FF00003 		mov	r3, #0
 684:.\console.c   **** }
 1871              		.loc 1 684 0
 1872 02ec 1846     		mov	r0, r3
 1873 02ee 07F14007 		add	r7, r7, #64
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 50


 1874 02f2 BD46     		mov	sp, r7
 1875 02f4 80BD     		pop	{r7, pc}
 1876              	.L125:
 1877 02f6 00BF     		.align	2
 1878              	.L124:
 1879 02f8 0F000000 		.word	actual_cmd+15
 1880 02fc 1E000000 		.word	actual_cmd+30
 1881 0300 28000000 		.word	actual_cmd+40
 1882              		.cfi_endproc
 1883              	.LFE68:
 1884              		.size	scanner2, .-scanner2
 1885              		.section	.rodata
 1886 051e 0000     		.align	2
 1887              	.LC78:
 1888 0520 626F6F74 		.ascii	"boot\000"
 1888      00
 1889 0525 000000   		.align	2
 1890              	.LC79:
 1891 0528 0D0A4172 		.ascii	"\015\012Are you sure to start Bootload [Y/N]?\000"
 1891      6520796F 
 1891      75207375 
 1891      72652074 
 1891      6F207374 
 1892              		.align	2
 1893              	.LC80:
 1894 0550 0D0A2121 		.ascii	"\015\012!!!Wait for Bootloading (power off to stop "
 1894      21576169 
 1894      7420666F 
 1894      7220426F 
 1894      6F746C6F 
 1895 057d 626F6F74 		.ascii	"bootloading process)\015\000"
 1895      6C6F6164 
 1895      696E6720 
 1895      70726F63 
 1895      65737329 
 1896 0593 00       		.align	2
 1897              	.LC81:
 1898 0594 0D0A426F 		.ascii	"\015\012Bootloading aborted!\000"
 1898      6F746C6F 
 1898      6164696E 
 1898      67206162 
 1898      6F727465 
 1899 05ab 00       		.align	2
 1900              	.LC82:
 1901 05ac 23455252 		.ascii	"#ERROR1: Too much parameters!\000"
 1901      4F52313A 
 1901      20546F6F 
 1901      206D7563 
 1901      68207061 
 1902 05ca 0000     		.align	2
 1903              	.LC83:
 1904 05cc 707000   		.ascii	"pp\000"
 1905 05cf 00       		.align	2
 1906              	.LC84:
 1907 05d0 2A414E41 		.ascii	"*ANAPOS ZERO +20!\015\000"
 1907      504F5320 
 1907      5A45524F 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 51


 1907      202B3230 
 1907      210D00
 1908 05e3 00       		.align	2
 1909              	.LC85:
 1910 05e4 2A657272 		.ascii	"*err\000"
 1910      00
 1911 05e9 000000   		.align	2
 1912              	.LC86:
 1913 05ec 70707000 		.ascii	"ppp\000"
 1914              		.align	2
 1915              	.LC87:
 1916 05f0 2A414E41 		.ascii	"*ANAPOS ZERO +100!\015\000"
 1916      504F5320 
 1916      5A45524F 
 1916      202B3130 
 1916      30210D00 
 1917              		.align	2
 1918              	.LC88:
 1919 0604 6D6D00   		.ascii	"mm\000"
 1920 0607 00       		.align	2
 1921              	.LC89:
 1922 0608 2A414E41 		.ascii	"*ANAPOS ZERO -20!\015\000"
 1922      504F5320 
 1922      5A45524F 
 1922      202D3230 
 1922      210D00
 1923 061b 00       		.align	2
 1924              	.LC90:
 1925 061c 6D6D6D00 		.ascii	"mmm\000"
 1926              		.align	2
 1927              	.LC91:
 1928 0620 2A414E41 		.ascii	"*ANAPOS ZERO -100!\015\000"
 1928      504F5320 
 1928      5A45524F 
 1928      202D3130 
 1928      30210D00 
 1929              		.align	2
 1930              	.LC92:
 1931 0634 7462757A 		.ascii	"tbuz\000"
 1931      00
 1932 0639 000000   		.align	2
 1933              	.LC93:
 1934 063c 42757A7A 		.ascii	"Buzzer testing!\015\000"
 1934      65722074 
 1934      65737469 
 1934      6E67210D 
 1934      00
 1935 064d 000000   		.align	2
 1936              	.LC94:
 1937 0650 746C6F72 		.ascii	"tlora\000"
 1937      6100
 1938 0656 0000     		.align	2
 1939              	.LC95:
 1940 0658 54657374 		.ascii	"Test LoRa started!\015\000"
 1940      204C6F52 
 1940      61207374 
 1940      61727465 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 52


 1940      64210D00 
 1941              		.align	2
 1942              	.LC96:
 1943 066c 6D797465 		.ascii	"mytest\000"
 1943      737400
 1944 0673 00       		.align	2
 1945              	.LC97:
 1946 0674 4D792074 		.ascii	"My test!\015\000"
 1946      65737421 
 1946      0D00
 1947 067e 0000     		.align	2
 1948              	.LC98:
 1949 0680 73746F70 		.ascii	"stopmapsm\000"
 1949      6D617073 
 1949      6D00
 1950 068a 0000     		.align	2
 1951              	.LC99:
 1952 068c 73746F70 		.ascii	"stopsm\000"
 1952      736D00
 1953 0693 00       		.align	2
 1954              	.LC100:
 1955 0694 4D415050 		.ascii	"MAPPING STATE MACHINE Stopped!\015\000"
 1955      494E4720 
 1955      53544154 
 1955      45204D41 
 1955      4348494E 
 1956              		.align	2
 1957              	.LC101:
 1958 06b4 6465656E 		.ascii	"deenergize\000"
 1958      65726769 
 1958      7A6500
 1959 06bf 00       		.align	2
 1960              	.LC102:
 1961 06c0 6465656E 		.ascii	"deen\000"
 1961      00
 1962 06c5 000000   		.align	2
 1963              	.LC103:
 1964 06c8 4D6F746F 		.ascii	"Motors DEENERGIZED & Driver Sleeped!\015\000"
 1964      72732044 
 1964      45454E45 
 1964      5247495A 
 1964      45442026 
 1965 06ee 0000     		.align	2
 1966              	.LC104:
 1967 06f0 656E6572 		.ascii	"energize\000"
 1967      67697A65 
 1967      00
 1968 06f9 000000   		.align	2
 1969              	.LC105:
 1970 06fc 656E00   		.ascii	"en\000"
 1971 06ff 00       		.align	2
 1972              	.LC106:
 1973 0700 4D6F746F 		.ascii	"Motors ENERGIZED!\015\000"
 1973      72732045 
 1973      4E455247 
 1973      495A4544 
 1973      210D00
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 53


 1974 0713 00       		.align	2
 1975              	.LC107:
 1976 0714 766A6F79 		.ascii	"vjoyp\000"
 1976      7000
 1977 071a 0000     		.align	2
 1978              	.LC108:
 1979 071c 766A7000 		.ascii	"vjp\000"
 1980              		.align	2
 1981              	.LC109:
 1982 0720 50414E3A 		.ascii	"PAN: enc(t)=%+ld [step]\000"
 1982      20656E63 
 1982      2874293D 
 1982      252B6C64 
 1982      205B7374 
 1983              		.global	__aeabi_f2iz
 1984              		.align	2
 1985              	.LC110:
 1986 0738 20202061 		.ascii	"   abs_pos(t)=%+ld [step] \000"
 1986      62735F70 
 1986      6F732874 
 1986      293D252B 
 1986      6C64205B 
 1987              		.global	__aeabi_fmul
 1988 0753 00       		.align	2
 1989              	.LC111:
 1990 0754 20202076 		.ascii	"   vjoy(t)=%4.0f [step/sec]\000"
 1990      6A6F7928 
 1990      74293D25 
 1990      342E3066 
 1990      205B7374 
 1991              		.align	2
 1992              	.LC112:
 1993 0770 20282534 		.ascii	" (%4.3f [deg/sec])\000"
 1993      2E336620 
 1993      5B646567 
 1993      2F736563 
 1993      5D2900
 1994              		.global	__aeabi_fadd
 1995              		.global	__aeabi_fsub
 1996 0783 00       		.align	2
 1997              	.LC113:
 1998 0784 766A6F79 		.ascii	"vjoyt\000"
 1998      7400
 1999 078a 0000     		.align	2
 2000              	.LC114:
 2001 078c 766A7400 		.ascii	"vjt\000"
 2002              		.align	2
 2003              	.LC115:
 2004 0790 54494C54 		.ascii	"TILT: enc(t)=%+ld [step]\000"
 2004      3A20656E 
 2004      63287429 
 2004      3D252B6C 
 2004      64205B73 
 2005 07a9 000000   		.align	2
 2006              	.LC116:
 2007 07ac 766A6F79 		.ascii	"vjoy\000"
 2007      00
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 54


 2008 07b1 000000   		.align	2
 2009              	.LC117:
 2010 07b4 766A00   		.ascii	"vj\000"
 2011 07b7 00       		.align	2
 2012              	.LC118:
 2013 07b8 50414E3A 		.ascii	"PAN: \000"
 2013      2000
 2014 07be 0000     		.align	2
 2015              	.LC119:
 2016 07c0 766A6F79 		.ascii	"vjoy(t)=%4.0f [step/sec]\000"
 2016      2874293D 
 2016      25342E30 
 2016      66205B73 
 2016      7465702F 
 2017 07d9 000000   		.align	2
 2018              	.LC120:
 2019 07dc 20282535 		.ascii	" (%5.4f [A])\000"
 2019      2E346620 
 2019      5B415D29 
 2019      00
 2020 07e9 000000   		.align	2
 2021              	.LC121:
 2022 07ec 20202020 		.ascii	"    TILT: \000"
 2022      54494C54 
 2022      3A2000
 2023              		.global	__aeabi_fcmplt
 2024              		.global	__aeabi_fcmpgt
 2025 07f7 00       		.align	2
 2026              	.LC122:
 2027 07f8 7600     		.ascii	"v\000"
 2028 07fa 0000     		.align	2
 2029              	.LC123:
 2030 07fc 76657273 		.ascii	"version\000"
 2030      696F6E00 
 2031              		.align	2
 2032              	.LC124:
 2033 0804 476F4265 		.ascii	"GoBee Director FW V.0.0B-T34 24/01/19 C3.0\015\000"
 2033      65204469 
 2033      72656374 
 2033      6F722046 
 2033      5720562E 
 2034              		.align	2
 2035              	.LC125:
 2036 0830 28632920 		.ascii	"(c) 2017-2019 Gobee Srl (www.gobee.it)\015\000"
 2036      32303137 
 2036      2D323031 
 2036      3920476F 
 2036      62656520 
 2037              		.align	2
 2038              	.LC126:
 2039 0858 46572061 		.ascii	"FW and HW Designed by Graziano G. Ravizza\015\000"
 2039      6E642048 
 2039      57204465 
 2039      7369676E 
 2039      65642062 
 2040 0883 00       		.align	2
 2041              	.LC127:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 55


 2042 0884 4D454348 		.ascii	"MECHA     Designed by Cy.Pag. Team and Davide Danie"
 2042      41202020 
 2042      20204465 
 2042      7369676E 
 2042      65642062 
 2043 08b7 6C6C690D 		.ascii	"lli\015\000"
 2043      00
 2044              		.align	2
 2045              	.LC128:
 2046 08bc 434C5573 		.ascii	"CLUs      Designed by Gabriele Pisaneschi and Grazi"
 2046      20202020 
 2046      20204465 
 2046      7369676E 
 2046      65642062 
 2047 08ef 616E6F20 		.ascii	"ano G. Ravizza\015\000"
 2047      472E2052 
 2047      6176697A 
 2047      7A610D00 
 2048 08ff 00       		.align	2
 2049              	.LC129:
 2050 0900 20202020 		.ascii	"          Special Thanks to Fabio Allegreni, Claudi"
 2050      20202020 
 2050      20205370 
 2050      65636961 
 2050      6C205468 
 2051 0933 6F205061 		.ascii	"o Palumbo and all Cy.Pag. Team!\015\000"
 2051      6C756D62 
 2051      6F20616E 
 2051      6420616C 
 2051      6C204379 
 2052              		.align	2
 2053              	.LC130:
 2054 0954 70726F6D 		.ascii	"prompt\000"
 2054      707400
 2055 095b 00       		.align	2
 2056              	.LC131:
 2057 095c 50726F6D 		.ascii	"Prompt Flags:\015\000"
 2057      70742046 
 2057      6C616773 
 2057      3A0D00
 2058 096b 00       		.align	2
 2059              	.LC132:
 2060 096c 20205B46 		.ascii	"  [F]                  --> GoBee FAULT\015\000"
 2060      5D202020 
 2060      20202020 
 2060      20202020 
 2060      20202020 
 2061              		.align	2
 2062              	.LC133:
 2063 0994 20205B46 		.ascii	"  [FBK=AGYRO_VEL]      --> Analog Gyroscope Feedbac"
 2063      424B3D41 
 2063      4759524F 
 2063      5F56454C 
 2063      5D202020 
 2064 09c7 6B202856 		.ascii	"k (Velocity - Direct LOS)\015\000"
 2064      656C6F63 
 2064      69747920 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 56


 2064      2D204469 
 2064      72656374 
 2065 09e2 0000     		.align	2
 2066              	.LC134:
 2067 09e4 20205B46 		.ascii	"  [FBK=ENC_POS]        --> Digital Encoder Feedback"
 2067      424B3D45 
 2067      4E435F50 
 2067      4F535D20 
 2067      20202020 
 2068 0a17 2028506F 		.ascii	" (Position - Test Only)\015\000"
 2068      73697469 
 2068      6F6E202D 
 2068      20546573 
 2068      74204F6E 
 2069              		.align	2
 2070              	.LC135:
 2071 0a30 20205B46 		.ascii	"  [FBK=OPEN]           --> No Feedback (Open Loop)\015"
 2071      424B3D4F 
 2071      50454E5D 
 2071      20202020 
 2071      20202020 
 2072 0a63 00       		.ascii	"\000"
 2073              		.align	2
 2074              	.LC136:
 2075 0a64 3F00     		.ascii	"?\000"
 2076 0a66 0000     		.align	2
 2077              	.LC137:
 2078 0a68 6800     		.ascii	"h\000"
 2079 0a6a 0000     		.align	2
 2080              	.LC138:
 2081 0a6c 68656C70 		.ascii	"help\000"
 2081      00
 2082 0a71 000000   		.align	2
 2083              	.LC139:
 2084 0a74 476F4265 		.ascii	"GoBee Director Console Commands:\015\000"
 2084      65204469 
 2084      72656374 
 2084      6F722043 
 2084      6F6E736F 
 2085 0a96 0000     		.align	2
 2086              	.LC140:
 2087 0a98 3D3D3D3D 		.ascii	"=================================================\015"
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2088 0aca 00       		.ascii	"\000"
 2089 0acb 00       		.align	2
 2090              	.LC141:
 2091 0acc 53484F57 		.ascii	"SHOW,S: shows parameters and realtime values\015\000"
 2091      2C533A20 
 2091      73686F77 
 2091      73207061 
 2091      72616D65 
 2092 0afa 0000     		.align	2
 2093              	.LC142:
 2094 0afc 5345543A 		.ascii	"SET:  set GoBee parameters\015\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 57


 2094      20207365 
 2094      7420476F 
 2094      42656520 
 2094      70617261 
 2095              		.align	2
 2096              	.LC143:
 2097 0b18 50524F4D 		.ascii	"PROMPT: shows prompt flags\015\000"
 2097      50543A20 
 2097      73686F77 
 2097      73207072 
 2097      6F6D7074 
 2098              		.align	2
 2099              	.LC144:
 2100 0b34 424F4F54 		.ascii	"BOOT: starts FW Bootloading\015\000"
 2100      3A207374 
 2100      61727473 
 2100      20465720 
 2100      426F6F74 
 2101 0b51 000000   		.align	2
 2102              	.LC145:
 2103 0b54 56455253 		.ascii	"VERSION,V: displays firmware version\015\000"
 2103      494F4E2C 
 2103      563A2064 
 2103      6973706C 
 2103      61797320 
 2104 0b7a 0000     		.align	2
 2105              	.LC146:
 2106 0b7c 48454C50 		.ascii	"HELP Q: helps Q table codes\015\000"
 2106      20513A20 
 2106      68656C70 
 2106      73205120 
 2106      7461626C 
 2107 0b99 000000   		.align	2
 2108              	.LC147:
 2109 0b9c 48454C50 		.ascii	"HELP,H,?: this help\015\000"
 2109      2C482C3F 
 2109      3A207468 
 2109      69732068 
 2109      656C700D 
 2110 0bb1 000000   		.align	2
 2111              	.LC148:
 2112 0bb4 20202874 		.ascii	"  (type HELP <command> for detailed descriptions)\015"
 2112      79706520 
 2112      48454C50 
 2112      203C636F 
 2112      6D6D616E 
 2113 0be6 00       		.ascii	"\000"
 2114 0be7 00       		.align	2
 2115              	.LC149:
 2116 0be8 2D204D6F 		.ascii	"- Motor Control CMDs               -\015\000"
 2116      746F7220 
 2116      436F6E74 
 2116      726F6C20 
 2116      434D4473 
 2117 0c0e 0000     		.align	2
 2118              	.LC150:
 2119 0c10 2D2D2D2D 		.ascii	"------------------------------------\015\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 58


 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2120 0c36 0000     		.align	2
 2121              	.LC151:
 2122 0c38 2020454E 		.ascii	"  EN[ERGIZE]             (Energize motor)\015\000"
 2122      5B455247 
 2122      495A455D 
 2122      20202020 
 2122      20202020 
 2123 0c63 00       		.align	2
 2124              	.LC152:
 2125 0c64 20204445 		.ascii	"  DEEN[ERGIZE]           (Deenergize motor)\015\000"
 2125      454E5B45 
 2125      5247495A 
 2125      455D2020 
 2125      20202020 
 2126 0c91 000000   		.align	2
 2127              	.LC153:
 2128 0c94 2D204D6F 		.ascii	"- Mover CMDs                       -\015\000"
 2128      76657220 
 2128      434D4473 
 2128      20202020 
 2128      20202020 
 2129 0cba 0000     		.align	2
 2130              	.LC154:
 2131 0cbc 20204D4F 		.ascii	"  MOVP[ATH]     <n>      (Start Mover on Path 0..15"
 2131      56505B41 
 2131      54485D20 
 2131      20202020 
 2131      3C6E3E20 
 2132 0cef 290D00   		.ascii	")\015\000"
 2133 0cf2 0000     		.align	2
 2134              	.LC155:
 2135 0cf4 2020474F 		.ascii	"  GOTOH[OME]             (Start Mover to Goto Home)"
 2135      544F485B 
 2135      4F4D455D 
 2135      20202020 
 2135      20202020 
 2136 0d27 0D00     		.ascii	"\015\000"
 2137 0d29 000000   		.align	2
 2138              	.LC156:
 2139 0d2c 2020475B 		.ascii	"  G[OTOQ]       <n> <t>  (Start Mover to Goto Q num"
 2139      4F544F51 
 2139      5D202020 
 2139      20202020 
 2139      3C6E3E20 
 2140 0d5f 62657220 		.ascii	"ber <n> in time <t> sec)\015\000"
 2140      3C6E3E20 
 2140      696E2074 
 2140      696D6520 
 2140      3C743E20 
 2141 0d79 000000   		.align	2
 2142              	.LC157:
 2143 0d7c 2D205379 		.ascii	"- System TEST CMDs                 -\015\000"
 2143      7374656D 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 59


 2143      20544553 
 2143      5420434D 
 2143      44732020 
 2144 0da2 0000     		.align	2
 2145              	.LC158:
 2146 0da4 20205442 		.ascii	"  TBUZ                   (Tests Buzzer)\015\000"
 2146      555A2020 
 2146      20202020 
 2146      20202020 
 2146      20202020 
 2147 0dcd 000000   		.align	2
 2148              	.LC159:
 2149 0dd0 2020544C 		.ascii	"  TLORA                  (Test LoRa HW)\015\000"
 2149      4F524120 
 2149      20202020 
 2149      20202020 
 2149      20202020 
 2150 0df9 000000   		.align	2
 2151              	.LC160:
 2152 0dfc 20205354 		.ascii	"  STOP[MAP]SM            (Stops the MAPPING STATE M"
 2152      4F505B4D 
 2152      41505D53 
 2152      4D202020 
 2152      20202020 
 2153 0e2f 41434849 		.ascii	"ACHINE (energize to restart))\015\000"
 2153      4E452028 
 2153      656E6572 
 2153      67697A65 
 2153      20746F20 
 2154 0e4e 0000     		.align	2
 2155              	.LC161:
 2156 0e50 2020564A 		.ascii	"  VJ[OY]P                (Pan  Virtual Joystick a=c"
 2156      5B4F595D 
 2156      50202020 
 2156      20202020 
 2156      20202020 
 2157 0e83 7720643D 		.ascii	"w d=ccw s=stop)\015\000"
 2157      63637720 
 2157      733D7374 
 2157      6F70290D 
 2157      00
 2158              		.align	2
 2159              	.LC162:
 2160 0e94 2020564A 		.ascii	"  VJ[OY]T                (Tilt Virtual Joystick w=c"
 2160      5B4F595D 
 2160      54202020 
 2160      20202020 
 2160      20202020 
 2161 0ec7 77207A3D 		.ascii	"w z=ccw s=stop)\015\000"
 2161      63637720 
 2161      733D7374 
 2161      6F70290D 
 2161      00
 2162              		.align	2
 2163              	.LC163:
 2164 0ed8 2020564A 		.ascii	"  VJ[OY]                 (Pan+Tilt Virtual Joystick"
 2164      5B4F595D 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 60


 2164      20202020 
 2164      20202020 
 2164      20202020 
 2165 0f0b 290D00   		.ascii	")\015\000"
 2166 0f0e 0000     		.align	2
 2167              	.LC164:
 2168 0f10 2D20434C 		.ascii	"- CLU CMDs                         -\015\000"
 2168      5520434D 
 2168      44732020 
 2168      20202020 
 2168      20202020 
 2169 0f36 0000     		.align	2
 2170              	.LC165:
 2171 0f38 2020434C 		.ascii	"  CLUEXEC <clu_num>      (Start CLU   0 <= clu_num "
 2171      55455845 
 2171      43203C63 
 2171      6C755F6E 
 2171      756D3E20 
 2172 0f6b 3C3D2034 		.ascii	"<= 49)\015\000"
 2172      39290D00 
 2173 0f73 00       		.align	2
 2174              	.LC166:
 2175 0f74 2020434C 		.ascii	"  CLUSEQ  <pause>        (Start CLU sequence with <"
 2175      55534551 
 2175      20203C70 
 2175      61757365 
 2175      3E202020 
 2176 0fa7 70617573 		.ascii	"pause> msec)\015\000"
 2176      653E206D 
 2176      73656329 
 2176      0D00
 2177 0fb5 000000   		.align	2
 2178              	.LC167:
 2179 0fb8 73657400 		.ascii	"set\000"
 2180              		.align	2
 2181              	.LC168:
 2182 0fbc 53796E74 		.ascii	"Syntax:\015\000"
 2182      61783A0D 
 2182      00
 2183 0fc5 000000   		.align	2
 2184              	.LC169:
 2185 0fc8 20205345 		.ascii	"  SET POL[ARITY]P   <polarity> (Sets Pan  Motor Pol"
 2185      5420504F 
 2185      4C5B4152 
 2185      4954595D 
 2185      50202020 
 2186 0ffb 61726974 		.ascii	"arity)\015\000"
 2186      79290D00 
 2187 1003 00       		.align	2
 2188              	.LC170:
 2189 1004 20205345 		.ascii	"  SET POL[ARITY]T   <polarity> (Sets Tilt Motor Pol"
 2189      5420504F 
 2189      4C5B4152 
 2189      4954595D 
 2189      54202020 
 2190 1037 61726974 		.ascii	"arity)\015\000"
 2190      79290D00 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 61


 2191 103f 00       		.align	2
 2192              	.LC171:
 2193 1040 20205345 		.ascii	"  SET KPP           <kpvalue>  (Sets Pan  Motor PID"
 2193      54204B50 
 2193      50202020 
 2193      20202020 
 2193      20202020 
 2194 1073 204B7029 		.ascii	" Kp)\015\000"
 2194      0D00
 2195 1079 000000   		.align	2
 2196              	.LC172:
 2197 107c 20205345 		.ascii	"  SET KPT           <kpvalue>  (Sets Tilt Motor PID"
 2197      54204B50 
 2197      54202020 
 2197      20202020 
 2197      20202020 
 2198 10af 204B7029 		.ascii	" Kp)\015\000"
 2198      0D00
 2199 10b5 000000   		.align	2
 2200              	.LC173:
 2201 10b8 20205345 		.ascii	"  SET KDP           <kdvalue>  (Sets Pan  Motor PID"
 2201      54204B44 
 2201      50202020 
 2201      20202020 
 2201      20202020 
 2202 10eb 204B6429 		.ascii	" Kd)\015\000"
 2202      0D00
 2203 10f1 000000   		.align	2
 2204              	.LC174:
 2205 10f4 20205345 		.ascii	"  SET KDT           <kdvalue>  (Sets Tilt Motor PID"
 2205      54204B44 
 2205      54202020 
 2205      20202020 
 2205      20202020 
 2206 1127 204B6429 		.ascii	" Kd)\015\000"
 2206      0D00
 2207 112d 000000   		.align	2
 2208              	.LC175:
 2209 1130 20205345 		.ascii	"  SET KIP           <kivalue>  (Sets Pan  Motor PID"
 2209      54204B49 
 2209      50202020 
 2209      20202020 
 2209      20202020 
 2210 1163 204B6929 		.ascii	" Ki)\015\000"
 2210      0D00
 2211 1169 000000   		.align	2
 2212              	.LC176:
 2213 116c 20205345 		.ascii	"  SET KIT           <kivalue>  (Sets Tilt Motor PID"
 2213      54204B49 
 2213      54202020 
 2213      20202020 
 2213      20202020 
 2214 119f 204B6929 		.ascii	" Ki)\015\000"
 2214      0D00
 2215 11a5 000000   		.align	2
 2216              	.LC177:
 2217 11a8 20205345 		.ascii	"  SET KSIP          <ksivalue> (Sets Pan  Motor PID"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 62


 2217      54204B53 
 2217      49502020 
 2217      20202020 
 2217      20202020 
 2218 11db 204B7369 		.ascii	" Ksi)\015\000"
 2218      290D00
 2219 11e2 0000     		.align	2
 2220              	.LC178:
 2221 11e4 20205345 		.ascii	"  SET KSIT          <ksivalue> (Sets Tilt Motor PID"
 2221      54204B53 
 2221      49542020 
 2221      20202020 
 2221      20202020 
 2222 1217 204B7369 		.ascii	" Ksi)\015\000"
 2222      290D00
 2223 121e 0000     		.align	2
 2224              	.LC179:
 2225 1220 20205345 		.ascii	"  SET L[IMIT]CP     <onoff>    (Sets Pan  Motor Lim"
 2225      54204C5B 
 2225      494D4954 
 2225      5D435020 
 2225      20202020 
 2226 1253 69742043 		.ascii	"it Control)\015\000"
 2226      6F6E7472 
 2226      6F6C290D 
 2226      00
 2227              		.align	2
 2228              	.LC180:
 2229 1260 20205345 		.ascii	"  SET L[IMIT]CT     <onoff>    (Sets Tilt Motor Lim"
 2229      54204C5B 
 2229      494D4954 
 2229      5D435420 
 2229      20202020 
 2230 1293 69742043 		.ascii	"it Control)\015\000"
 2230      6F6E7472 
 2230      6F6C290D 
 2230      00
 2231              		.align	2
 2232              	.LC181:
 2233 12a0 20205345 		.ascii	"  SET INV[ABS]P     <onoff>    (Pan  Absolute Senso"
 2233      5420494E 
 2233      565B4142 
 2233      535D5020 
 2233      20202020 
 2234 12d3 7220496E 		.ascii	"r Invertion)\015\000"
 2234      76657274 
 2234      696F6E29 
 2234      0D00
 2235 12e1 000000   		.align	2
 2236              	.LC182:
 2237 12e4 20205345 		.ascii	"  SET RATIO[ABS]P   <ratio>    (Pan  Absolute Senso"
 2237      54205241 
 2237      54494F5B 
 2237      4142535D 
 2237      50202020 
 2238 1317 72206F76 		.ascii	"r over Encoder Ratio)\015\000"
 2238      65722045 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 63


 2238      6E636F64 
 2238      65722052 
 2238      6174696F 
 2239 132e 0000     		.align	2
 2240              	.LC183:
 2241 1330 20205345 		.ascii	"  SET Z[EROABS]P               (Pan  Absolute Senso"
 2241      54205A5B 
 2241      45524F41 
 2241      42535D50 
 2241      20202020 
 2242 1363 72205A65 		.ascii	"r Zero calc procedure)\015\000"
 2242      726F2063 
 2242      616C6320 
 2242      70726F63 
 2242      65647572 
 2243 137b 00       		.align	2
 2244              	.LC184:
 2245 137c 20205345 		.ascii	"  SET L[IMIT]MINP              (Pan  Absolute Senso"
 2245      54204C5B 
 2245      494D4954 
 2245      5D4D494E 
 2245      50202020 
 2246 13af 72204C69 		.ascii	"r Limit MIN calc procedure)\015\000"
 2246      6D697420 
 2246      4D494E20 
 2246      63616C63 
 2246      2070726F 
 2247              		.align	2
 2248              	.LC185:
 2249 13cc 20205345 		.ascii	"  SET L[IMIT]MAXP              (Pan  Absolute Senso"
 2249      54204C5B 
 2249      494D4954 
 2249      5D4D4158 
 2249      50202020 
 2250 13ff 72204C69 		.ascii	"r Limit MAX calc procedure)\015\000"
 2250      6D697420 
 2250      4D415820 
 2250      63616C63 
 2250      2070726F 
 2251              		.align	2
 2252              	.LC186:
 2253 141c 20205345 		.ascii	"  SET L[IMIT]HYSTP  <hyst>     (Pan  Absolute Senso"
 2253      54204C5B 
 2253      494D4954 
 2253      5D485953 
 2253      54502020 
 2254 144f 72204C69 		.ascii	"r Limit Hysteresis)\015\000"
 2254      6D697420 
 2254      48797374 
 2254      65726573 
 2254      6973290D 
 2255              		.align	2
 2256              	.LC187:
 2257 1464 20205345 		.ascii	"  SET INV[ABS]T     <onoff>    (Tilt Absolute Senso"
 2257      5420494E 
 2257      565B4142 
 2257      535D5420 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 64


 2257      20202020 
 2258 1497 7220496E 		.ascii	"r Invertion)\015\000"
 2258      76657274 
 2258      696F6E29 
 2258      0D00
 2259 14a5 000000   		.align	2
 2260              	.LC188:
 2261 14a8 20205345 		.ascii	"  SET RATIO[ABS]T   <ratio>    (Tilt Absolute Senso"
 2261      54205241 
 2261      54494F5B 
 2261      4142535D 
 2261      54202020 
 2262 14db 72206F76 		.ascii	"r over Encoder Ratio)\015\000"
 2262      65722045 
 2262      6E636F64 
 2262      65722052 
 2262      6174696F 
 2263 14f2 0000     		.align	2
 2264              	.LC189:
 2265 14f4 20205345 		.ascii	"  SET Z[EROABS]T               (Tilt Absolute Senso"
 2265      54205A5B 
 2265      45524F41 
 2265      42535D54 
 2265      20202020 
 2266 1527 72205A65 		.ascii	"r Zero calc procedure)\015\000"
 2266      726F2063 
 2266      616C6320 
 2266      70726F63 
 2266      65647572 
 2267 153f 00       		.align	2
 2268              	.LC190:
 2269 1540 20205345 		.ascii	"  SET L[IMIT]MINT              (Tilt Absolute Senso"
 2269      54204C5B 
 2269      494D4954 
 2269      5D4D494E 
 2269      54202020 
 2270 1573 72204C69 		.ascii	"r Limit MIN calc procedure)\015\000"
 2270      6D697420 
 2270      4D494E20 
 2270      63616C63 
 2270      2070726F 
 2271              		.align	2
 2272              	.LC191:
 2273 1590 20205345 		.ascii	"  SET L[IMIT]MAXT              (Tilt Absolute Senso"
 2273      54204C5B 
 2273      494D4954 
 2273      5D4D4158 
 2273      54202020 
 2274 15c3 72204C69 		.ascii	"r Limit MAX calc procedure)\015\000"
 2274      6D697420 
 2274      4D415820 
 2274      63616C63 
 2274      2070726F 
 2275              		.align	2
 2276              	.LC192:
 2277 15e0 20205345 		.ascii	"  SET L[IMIT]HYSTT  <hyst>     (Tilt Absolute Senso"
 2277      54204C5B 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 65


 2277      494D4954 
 2277      5D485953 
 2277      54542020 
 2278 1613 72204C69 		.ascii	"r Limit Hysteresis)\015\000"
 2278      6D697420 
 2278      48797374 
 2278      65726573 
 2278      6973290D 
 2279              		.align	2
 2280              	.LC193:
 2281 1628 20205345 		.ascii	"  SET Q|SHOT        <qn> <qm>  (Axis positions Q(SH"
 2281      5420517C 
 2281      53484F54 
 2281      20202020 
 2281      20202020 
 2282 165b 4F542920 		.ascii	"OT) number <qn>  into memory <qm>)\015\000"
 2282      6E756D62 
 2282      6572203C 
 2282      716E3E20 
 2282      20696E74 
 2283 167f 00       		.align	2
 2284              	.LC194:
 2285 1680 20205345 		.ascii	"  SET A[NAOUT]AXIS  <axis>     (Analog Output Axis "
 2285      5420415B 
 2285      4E414F55 
 2285      545D4158 
 2285      49532020 
 2286 16b3 53656C65 		.ascii	"Select)\015\000"
 2286      6374290D 
 2286      00
 2287              		.align	2
 2288              	.LC195:
 2289 16bc 20205345 		.ascii	"  SET AS[TIM]TYPE   <astype>   (Motors Autostimolus"
 2289      54204153 
 2289      5B54494D 
 2289      5D545950 
 2289      45202020 
 2290 16ef 20547970 		.ascii	" Type: VOLATILE!)\015\000"
 2290      653A2056 
 2290      4F4C4154 
 2290      494C4521 
 2290      290D00
 2291 1702 0000     		.align	2
 2292              	.LC196:
 2293 1704 20205345 		.ascii	"  SET ASTIMP        <onoff>    (Pan  Motor Autostim"
 2293      54204153 
 2293      54494D50 
 2293      20202020 
 2293      20202020 
 2294 1737 6F6C6F75 		.ascii	"olous on-off: VOLATILE!)\015\000"
 2294      73206F6E 
 2294      2D6F6666 
 2294      3A20564F 
 2294      4C415449 
 2295 1751 000000   		.align	2
 2296              	.LC197:
 2297 1754 20205345 		.ascii	"  SET KOPFP         <kofvalue> (Pan  Motor Autostim"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 66


 2297      54204B4F 
 2297      50465020 
 2297      20202020 
 2297      20202020 
 2298 1787 6F6C7573 		.ascii	"olus Input Gain)\015\000"
 2298      20496E70 
 2298      75742047 
 2298      61696E29 
 2298      0D00
 2299 1799 000000   		.align	2
 2300              	.LC198:
 2301 179c 20205345 		.ascii	"  SET AGAINP        <anagain>  (Pan  Motor Analog O"
 2301      54204147 
 2301      41494E50 
 2301      20202020 
 2301      20202020 
 2302 17cf 75747075 		.ascii	"utput Gain)\015\000"
 2302      74204761 
 2302      696E290D 
 2302      00
 2303              		.align	2
 2304              	.LC199:
 2305 17dc 20205345 		.ascii	"  SET COLORP        <color>    (Pan  Motor Analog O"
 2305      5420434F 
 2305      4C4F5250 
 2305      20202020 
 2305      20202020 
 2306 180f 75747075 		.ascii	"utput Mux)\015\000"
 2306      74204D75 
 2306      78290D00 
 2307 181b 00       		.align	2
 2308              	.LC200:
 2309 181c 20205345 		.ascii	"  SET ASTIMT        <onoff>    (Tilt Motor Autostim"
 2309      54204153 
 2309      54494D54 
 2309      20202020 
 2309      20202020 
 2310 184f 6F6C6F75 		.ascii	"olous on-off: VOLATILE!)\015\000"
 2310      73206F6E 
 2310      2D6F6666 
 2310      3A20564F 
 2310      4C415449 
 2311 1869 000000   		.align	2
 2312              	.LC201:
 2313 186c 20205345 		.ascii	"  SET KOPFT         <kofvalue> (Tilt Motor Autostim"
 2313      54204B4F 
 2313      50465420 
 2313      20202020 
 2313      20202020 
 2314 189f 6F6C7573 		.ascii	"olus Input Gain)\015\000"
 2314      20496E70 
 2314      75742047 
 2314      61696E29 
 2314      0D00
 2315 18b1 000000   		.align	2
 2316              	.LC202:
 2317 18b4 20205345 		.ascii	"  SET AGAINT        <anagain>  (Tilt Motor Analog O"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 67


 2317      54204147 
 2317      41494E54 
 2317      20202020 
 2317      20202020 
 2318 18e7 75747075 		.ascii	"utput Gain)\015\000"
 2318      74204761 
 2318      696E290D 
 2318      00
 2319              		.align	2
 2320              	.LC203:
 2321 18f4 20205345 		.ascii	"  SET COLORT        <color>    (Tilt Motor Analog O"
 2321      5420434F 
 2321      4C4F5254 
 2321      20202020 
 2321      20202020 
 2322 1927 75747075 		.ascii	"utput Mux)\015\000"
 2322      74204D75 
 2322      78290D00 
 2323 1933 00       		.align	2
 2324              	.LC204:
 2325 1934 20205345 		.ascii	"  SET GAMMA         <avalue>   (IMU Euler Angles Lo"
 2325      54204741 
 2325      4D4D4120 
 2325      20202020 
 2325      20202020 
 2326 1967 77205061 		.ascii	"w Pass Filter)\015\000"
 2326      73732046 
 2326      696C7465 
 2326      72290D00 
 2327 1977 00       		.align	2
 2328              	.LC205:
 2329 1978 20205345 		.ascii	"  SET IMU[INV]Y[AW] <onoff>    (IMU Yaw   Euler Ang"
 2329      5420494D 
 2329      555B494E 
 2329      565D595B 
 2329      41575D20 
 2330 19ab 6C652049 		.ascii	"le Invertion)\015\000"
 2330      6E766572 
 2330      74696F6E 
 2330      290D00
 2331 19ba 0000     		.align	2
 2332              	.LC206:
 2333 19bc 20205345 		.ascii	"  SET IMU[INV]P[ITCH]<onoff>   (IMU Pitch Euler Ang"
 2333      5420494D 
 2333      555B494E 
 2333      565D505B 
 2333      49544348 
 2334 19ef 6C652049 		.ascii	"le Invertion)\015\000"
 2334      6E766572 
 2334      74696F6E 
 2334      290D00
 2335 19fe 0000     		.align	2
 2336              	.LC207:
 2337 1a00 20205345 		.ascii	"  SET IMU[INV]R[OLL] <onoff>   (IMU Roll  Euler Ang"
 2337      5420494D 
 2337      555B494E 
 2337      565D525B 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 68


 2337      4F4C4C5D 
 2338 1a33 6C652049 		.ascii	"le Invertion)\015\000"
 2338      6E766572 
 2338      74696F6E 
 2338      290D00
 2339 1a42 0000     		.align	2
 2340              	.LC208:
 2341 1a44 20205345 		.ascii	"  SET PREX[CHANGE]  <onoff>    (IMU Pitch-Roll Eule"
 2341      54205052 
 2341      45585B43 
 2341      48414E47 
 2341      455D2020 
 2342 1a77 7220416E 		.ascii	"r Angle Exchange)\015\000"
 2342      676C6520 
 2342      45786368 
 2342      616E6765 
 2342      290D00
 2343 1a8a 0000     		.align	2
 2344              	.LC209:
 2345 1a8c 20205345 		.ascii	"  SET BETA          <avalue>   (Analog Acceleromete"
 2345      54204245 
 2345      54412020 
 2345      20202020 
 2345      20202020 
 2346 1abf 72204C6F 		.ascii	"r Low Pass Filter)\015\000"
 2346      77205061 
 2346      73732046 
 2346      696C7465 
 2346      72290D00 
 2347 1ad3 00       		.align	2
 2348              	.LC210:
 2349 1ad4 20205345 		.ascii	"  SET AACXOF[FSET]  <offset>   (Analog Acceleromete"
 2349      54204141 
 2349      43584F46 
 2349      5B465345 
 2349      545D2020 
 2350 1b07 72204178 		.ascii	"r Axis X ADC Offset)\015\000"
 2350      69732058 
 2350      20414443 
 2350      204F6666 
 2350      73657429 
 2351 1b1d 000000   		.align	2
 2352              	.LC211:
 2353 1b20 20205345 		.ascii	"  SET AACYOF[FSET]  <offset>   (Analog Acceleromete"
 2353      54204141 
 2353      43594F46 
 2353      5B465345 
 2353      545D2020 
 2354 1b53 72204178 		.ascii	"r Axis Y ADC Offset)\015\000"
 2354      69732059 
 2354      20414443 
 2354      204F6666 
 2354      73657429 
 2355 1b69 000000   		.align	2
 2356              	.LC212:
 2357 1b6c 20205345 		.ascii	"  SET AACZOF[FSET]  <offset>   (Analog Acceleromete"
 2357      54204141 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 69


 2357      435A4F46 
 2357      5B465345 
 2357      545D2020 
 2358 1b9f 72204178 		.ascii	"r Axis Z ADC Offset)\015\000"
 2358      6973205A 
 2358      20414443 
 2358      204F6666 
 2358      73657429 
 2359 1bb5 000000   		.align	2
 2360              	.LC213:
 2361 1bb8 20205345 		.ascii	"  SET JUMPTH        <avalue>   (EVENT PARAMETER: Ju"
 2361      54204A55 
 2361      4D505448 
 2361      20202020 
 2361      20202020 
 2362 1beb 6D702047 		.ascii	"mp G Threshold)\015\000"
 2362      20546872 
 2362      6573686F 
 2362      6C64290D 
 2362      00
 2363              		.align	2
 2364              	.LC214:
 2365 1bfc 20205345 		.ascii	"  SET ACCTH         <avalue>   (EVENT PARAMETER: Ac"
 2365      54204143 
 2365      43544820 
 2365      20202020 
 2365      20202020 
 2366 1c2f 63656C65 		.ascii	"celeration G Threshold)\015\000"
 2366      72617469 
 2366      6F6E2047 
 2366      20546872 
 2366      6573686F 
 2367              		.align	2
 2368              	.LC215:
 2369 1c48 20205345 		.ascii	"  SET DIR[ECTOR]    <director> (Director Style)\015"
 2369      54204449 
 2369      525B4543 
 2369      544F525D 
 2369      20202020 
 2370 1c78 00       		.ascii	"\000"
 2371 1c79 000000   		.align	2
 2372              	.LC216:
 2373 1c7c 20205345 		.ascii	"  SET MODE          <mode>     (Machine Mode)\015\000"
 2373      54204D4F 
 2373      44452020 
 2373      20202020 
 2373      20202020 
 2374 1cab 00       		.align	2
 2375              	.LC217:
 2376 1cac 20203C70 		.ascii	"  <polarity>   = 0..1 [true | invert]\015\000"
 2376      6F6C6172 
 2376      6974793E 
 2376      2020203D 
 2376      20302E2E 
 2377 1cd3 00       		.align	2
 2378              	.LC218:
 2379 1cd4 20203C6B 		.ascii	"  <kpvalue>    = 0..100     (float n.m)\015\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 70


 2379      7076616C 
 2379      75653E20 
 2379      2020203D 
 2379      20302E2E 
 2380 1cfd 000000   		.align	2
 2381              	.LC219:
 2382 1d00 20203C6B 		.ascii	"  <kdvalue>    = 0..1000    (float n.m)\015\000"
 2382      6476616C 
 2382      75653E20 
 2382      2020203D 
 2382      20302E2E 
 2383 1d29 000000   		.align	2
 2384              	.LC220:
 2385 1d2c 20203C6B 		.ascii	"  <kivalue>    = 0..100     (float n.m)\015\000"
 2385      6976616C 
 2385      75653E20 
 2385      2020203D 
 2385      20302E2E 
 2386 1d55 000000   		.align	2
 2387              	.LC221:
 2388 1d58 20203C6B 		.ascii	"  <ksivalue>   = 0..1000000 (float n.m)\015\000"
 2388      73697661 
 2388      6C75653E 
 2388      2020203D 
 2388      20302E2E 
 2389 1d81 000000   		.align	2
 2390              	.LC222:
 2391 1d84 20203C64 		.ascii	"  <dbvalue>    = 0..1000    (float n.m)\015\000"
 2391      6276616C 
 2391      75653E20 
 2391      2020203D 
 2391      20302E2E 
 2392 1dad 000000   		.align	2
 2393              	.LC223:
 2394 1db0 20203C6B 		.ascii	"  <kofvalue>   = 0..10      (float n.m)\015\000"
 2394      6F667661 
 2394      6C75653E 
 2394      2020203D 
 2394      20302E2E 
 2395 1dd9 000000   		.align	2
 2396              	.LC224:
 2397 1ddc 20203C61 		.ascii	"  <anagain>    = -1000..1000  (float n.m)\015\000"
 2397      6E616761 
 2397      696E3E20 
 2397      2020203D 
 2397      202D3130 
 2398 1e07 00       		.align	2
 2399              	.LC225:
 2400 1e08 20203C61 		.ascii	"  <astype>     = 0(no astim), 1(sine), 2(triangle),"
 2400      73747970 
 2400      653E2020 
 2400      2020203D 
 2400      2030286E 
 2401 1e3b 20332873 		.ascii	" 3(square)\015\000"
 2401      71756172 
 2401      65290D00 
 2402 1e47 00       		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 71


 2403              	.LC226:
 2404 1e48 20203C63 		.ascii	"  <color>      = 0(gyro rate), 1(enc pos), 2(enc ve"
 2404      6F6C6F72 
 2404      3E202020 
 2404      2020203D 
 2404      20302867 
 2405 1e7b 6C292C20 		.ascii	"l), 3(astim), 4(e(t)), 5(d_e(t)/dt),\015\000"
 2405      33286173 
 2405      74696D29 
 2405      2C203428 
 2405      65287429 
 2406 1ea1 000000   		.align	2
 2407              	.LC227:
 2408 1ea4 20202020 		.ascii	"                 6(int_e(t)), 7(Ki*int_e(t)), 8(cv("
 2408      20202020 
 2408      20202020 
 2408      20202020 
 2408      20362869 
 2409 1ed7 7429290D 		.ascii	"t))\015\000"
 2409      00
 2410              		.align	2
 2411              	.LC228:
 2412 1edc 20203C61 		.ascii	"  <axis>       = [PAN | TILT]\015\000"
 2412      7869733E 
 2412      20202020 
 2412      2020203D 
 2412      205B5041 
 2413 1efb 00       		.align	2
 2414              	.LC229:
 2415 1efc 20203C61 		.ascii	"  <avalue>     = 0 .. 1 (float n.m)\015\000"
 2415      76616C75 
 2415      653E2020 
 2415      2020203D 
 2415      2030202E 
 2416 1f21 000000   		.align	2
 2417              	.LC230:
 2418 1f24 20203C6F 		.ascii	"  <onoff>      = 0 .. 1 [off | on]\015\000"
 2418      6E6F6666 
 2418      3E202020 
 2418      2020203D 
 2418      2030202E 
 2419              		.align	2
 2420              	.LC231:
 2421 1f48 20203C6D 		.ascii	"  <mode>       = 0(REMOTE CONTROL), 1(DIRECTOR)\015"
 2421      6F64653E 
 2421      20202020 
 2421      2020203D 
 2421      20302852 
 2422 1f78 00       		.ascii	"\000"
 2423 1f79 000000   		.align	2
 2424              	.LC232:
 2425 1f7c 20203C71 		.ascii	"  <qn>         = 0..99\015\000"
 2425      6E3E2020 
 2425      20202020 
 2425      2020203D 
 2425      20302E2E 
 2426              		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 72


 2427              	.LC233:
 2428 1f94 20203C71 		.ascii	"  <qm>         = 0..32 (\"clear\" or \"c\" to clear"
 2428      6D3E2020 
 2428      20202020 
 2428      2020203D 
 2428      20302E2E 
 2429 1fc3 2051206D 		.ascii	" Q memory)\015\000"
 2429      656D6F72 
 2429      79290D00 
 2430 1fcf 00       		.align	2
 2431              	.LC234:
 2432 1fd0 20203C64 		.ascii	"  <director>   = 0(Kubrick), 1(Hitchcock), 2(De Pal"
 2432      69726563 
 2432      746F723E 
 2432      2020203D 
 2432      2030284B 
 2433 2003 6D61292C 		.ascii	"ma), 3(Chaplin), 4(Linch), 5(Coppola)\015\000"
 2433      20332843 
 2433      6861706C 
 2433      696E292C 
 2433      2034284C 
 2434 202a 0000     		.align	2
 2435              	.LC235:
 2436 202c 20202020 		.ascii	"                 6(Scorsese), 7(Tarantino), 8(Scott"
 2436      20202020 
 2436      20202020 
 2436      20202020 
 2436      20362853 
 2437 205f 292C2039 		.ascii	"), 9(Leone), 10(Spielberg), 11(Burton)\015\000"
 2437      284C656F 
 2437      6E65292C 
 2437      20313028 
 2437      53706965 
 2438 2087 00       		.align	2
 2439              	.LC236:
 2440 2088 20202020 		.ascii	"                 12(Craven), 13(Fellini), 14(Ford),"
 2440      20202020 
 2440      20202020 
 2440      20202020 
 2440      20313228 
 2441 20bb 20313528 		.ascii	" 15(Nolan), 16(Del Toro), 17(Lucas), 18(Abrams)\015"
 2441      4E6F6C61 
 2441      6E292C20 
 2441      31362844 
 2441      656C2054 
 2442 20eb 00       		.ascii	"\000"
 2443              		.align	2
 2444              	.LC237:
 2445 20ec 73686F77 		.ascii	"show\000"
 2445      00
 2446 20f1 000000   		.align	2
 2447              	.LC238:
 2448 20f4 20205348 		.ascii	"  SHOW [P | PARAMS]      (All GoBee Parameters)\015"
 2448      4F57205B 
 2448      50207C20 
 2448      50415241 
 2448      4D535D20 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 73


 2449 2124 00       		.ascii	"\000"
 2450 2125 000000   		.align	2
 2451              	.LC239:
 2452 2128 20204641 		.ascii	"  FAULT[S]               (System Faults or Warnings"
 2452      554C545B 
 2452      535D2020 
 2452      20202020 
 2452      20202020 
 2453 215b 290D00   		.ascii	")\015\000"
 2454 215e 0000     		.align	2
 2455              	.LC240:
 2456 2160 20205348 		.ascii	"  SHOW BUT[TON]          (SW1 pushbutton state) \015"
 2456      4F572042 
 2456      55545B54 
 2456      4F4E5D20 
 2456      20202020 
 2457 2191 00       		.ascii	"\000"
 2458 2192 0000     		.align	2
 2459              	.LC241:
 2460 2194 20205348 		.ascii	"  SHOW ANA[LOGS]         (Analog Inputs as sampled "
 2460      4F572041 
 2460      4E415B4C 
 2460      4F47535D 
 2460      20202020 
 2461 21c7 62792041 		.ascii	"by ADC)\015\000"
 2461      4443290D 
 2461      00
 2462              		.align	2
 2463              	.LC242:
 2464 21d0 20205348 		.ascii	"  SHOW A[NALOG]ACC       (Bike Frame Analog Acceler"
 2464      4F572041 
 2464      5B4E414C 
 2464      4F475D41 
 2464      43432020 
 2465 2203 6F6D6574 		.ascii	"ometer Values)\015\000"
 2465      65722056 
 2465      616C7565 
 2465      73290D00 
 2466 2213 00       		.align	2
 2467              	.LC243:
 2468 2214 20205348 		.ascii	"  SHOW BIKE[ANGLES]      (BIKE Frame Euler Angles)\015"
 2468      4F572042 
 2468      494B455B 
 2468      414E474C 
 2468      45535D20 
 2469 2247 00       		.ascii	"\000"
 2470              		.align	2
 2471              	.LC244:
 2472 2248 20205348 		.ascii	"  SHOW S[YS]DYN          (Real Time System Dynamic "
 2472      4F572053 
 2472      5B59535D 
 2472      44594E20 
 2472      20202020 
 2473 227b 5363616C 		.ascii	"Scalar Value)\015\000"
 2473      61722056 
 2473      616C7565 
 2473      290D00
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 74


 2474 228a 0000     		.align	2
 2475              	.LC245:
 2476 228c 20205348 		.ascii	"  SHOW POS[ITION]        (Real Time relative and ab"
 2476      4F572050 
 2476      4F535B49 
 2476      54494F4E 
 2476      5D202020 
 2477 22bf 736F6C75 		.ascii	"solute position Values)\015\000"
 2477      74652070 
 2477      6F736974 
 2477      696F6E20 
 2477      56616C75 
 2478              		.align	2
 2479              	.LC246:
 2480 22d8 20205348 		.ascii	"  SHOW ENCF[BK]          (Real Time Feedback Encode"
 2480      4F572045 
 2480      4E43465B 
 2480      424B5D20 
 2480      20202020 
 2481 230b 7273290D 		.ascii	"rs)\015\000"
 2481      00
 2482              		.align	2
 2483              	.LC247:
 2484 2310 20205348 		.ascii	"  SHOW P[AN]LIM[ITS]     (Real Time Pan  Limits Ela"
 2484      4F572050 
 2484      5B414E5D 
 2484      4C494D5B 
 2484      4954535D 
 2485 2343 626F7261 		.ascii	"boration)\015\000"
 2485      74696F6E 
 2485      290D00
 2486 234e 0000     		.align	2
 2487              	.LC248:
 2488 2350 20205348 		.ascii	"  SHOW T[ILT]LIM[ITS]    (Real Time Tilt Limits Ela"
 2488      4F572054 
 2488      5B494C54 
 2488      5D4C494D 
 2488      5B495453 
 2489 2383 626F7261 		.ascii	"boration)\015\000"
 2489      74696F6E 
 2489      290D00
 2490 238e 0000     		.align	2
 2491              	.LC249:
 2492 2390 20205348 		.ascii	"  SHOW RATIO[ABS]P       (Pan  Encoder-Absolute Sen"
 2492      4F572052 
 2492      4154494F 
 2492      5B414253 
 2492      5D502020 
 2493 23c3 736F7220 		.ascii	"sor ratio r=reset; s=set; e=save)\015\000"
 2493      72617469 
 2493      6F20723D 
 2493      72657365 
 2493      743B2073 
 2494 23e6 0000     		.align	2
 2495              	.LC250:
 2496 23e8 20205348 		.ascii	"  SHOW RATIO[ABS]T       (Tilt Encoder-Absolute Sen"
 2496      4F572052 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 75


 2496      4154494F 
 2496      5B414253 
 2496      5D542020 
 2497 241b 736F7220 		.ascii	"sor ratio r=reset; s=set; e=save)\015\000"
 2497      72617469 
 2497      6F20723D 
 2497      72657365 
 2497      743B2073 
 2498 243e 0000     		.align	2
 2499              	.LC251:
 2500 2440 20205348 		.ascii	"  SHOW PABS[STATS]       (Pan  Absolute Sensor Stat"
 2500      4F572050 
 2500      4142535B 
 2500      53544154 
 2500      535D2020 
 2501 2473 69737469 		.ascii	"istics results)\015\000"
 2501      63732072 
 2501      6573756C 
 2501      7473290D 
 2501      00
 2502              		.align	2
 2503              	.LC252:
 2504 2484 20205348 		.ascii	"  SHOW TABS[STATS]       (Tilt Absolute Sensor Stat"
 2504      4F572054 
 2504      4142535B 
 2504      53544154 
 2504      535D2020 
 2505 24b7 69737469 		.ascii	"istics results)\015\000"
 2505      63732072 
 2505      6573756C 
 2505      7473290D 
 2505      00
 2506              		.align	2
 2507              	.LC253:
 2508 24c8 20205348 		.ascii	"  SHOW MOT[ORSTATUS]     (Motor Status - Current OK"
 2508      4F57204D 
 2508      4F545B4F 
 2508      52535441 
 2508      5455535D 
 2509 24fb 206F7220 		.ascii	" or PEAK)\015\000"
 2509      5045414B 
 2509      290D00
 2510 2506 0000     		.align	2
 2511              	.LC254:
 2512 2508 20205348 		.ascii	"  SHOW CURRENT|I         (Motor Currents [mA])\015\000"
 2512      4F572043 
 2512      55525245 
 2512      4E547C49 
 2512      20202020 
 2513              		.align	2
 2514              	.LC255:
 2515 2538 20205348 		.ascii	"  SHOW PMT[ORQUE]        (Real Time Pan  Motor  Tor"
 2515      4F572050 
 2515      4D545B4F 
 2515      52515545 
 2515      5D202020 
 2516 256b 71756520 		.ascii	"que Statistics)\015\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 76


 2516      53746174 
 2516      69737469 
 2516      6373290D 
 2516      00
 2517              		.align	2
 2518              	.LC256:
 2519 257c 20205348 		.ascii	"  SHOW POT[ORQUE]        (Real Time Pan  Output Tor"
 2519      4F572050 
 2519      4F545B4F 
 2519      52515545 
 2519      5D202020 
 2520 25af 71756520 		.ascii	"que Statistics)\015\000"
 2520      53746174 
 2520      69737469 
 2520      6373290D 
 2520      00
 2521              		.align	2
 2522              	.LC257:
 2523 25c0 20205348 		.ascii	"  SHOW PMP[OWER]         (Real Time Pan  Motor  Ero"
 2523      4F572050 
 2523      4D505B4F 
 2523      5745525D 
 2523      20202020 
 2524 25f3 67617465 		.ascii	"gated Power Statistics)\015\000"
 2524      6420506F 
 2524      77657220 
 2524      53746174 
 2524      69737469 
 2525              		.align	2
 2526              	.LC258:
 2527 260c 20205348 		.ascii	"  SHOW TMT[ORQUE]        (Real Time Tilt Motor  Tor"
 2527      4F572054 
 2527      4D545B4F 
 2527      52515545 
 2527      5D202020 
 2528 263f 71756520 		.ascii	"que Statistics)\015\000"
 2528      53746174 
 2528      69737469 
 2528      6373290D 
 2528      00
 2529              		.align	2
 2530              	.LC259:
 2531 2650 20205348 		.ascii	"  SHOW TOT[ORQUE]        (Real Time Tilt Output Tor"
 2531      4F572054 
 2531      4F545B4F 
 2531      52515545 
 2531      5D202020 
 2532 2683 71756520 		.ascii	"que Statistics)\015\000"
 2532      53746174 
 2532      69737469 
 2532      6373290D 
 2532      00
 2533              		.align	2
 2534              	.LC260:
 2535 2694 20205348 		.ascii	"  SHOW TMP[OWER]         (Real Time Tilt Motor  Ero"
 2535      4F572054 
 2535      4D505B4F 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 77


 2535      5745525D 
 2535      20202020 
 2536 26c7 67617465 		.ascii	"gated Power Statistics)\015\000"
 2536      6420506F 
 2536      77657220 
 2536      53746174 
 2536      69737469 
 2537              		.align	2
 2538              	.LC261:
 2539 26e0 20205348 		.ascii	"  SHOW VCC               (Input Power Voltage)\015\000"
 2539      4F572056 
 2539      43432020 
 2539      20202020 
 2539      20202020 
 2540              		.align	2
 2541              	.LC262:
 2542 2710 20205348 		.ascii	"  SHOW [CONTROL|CTRL]    (Real Time Control Loop Va"
 2542      4F57205B 
 2542      434F4E54 
 2542      524F4C7C 
 2542      4354524C 
 2543 2743 6C756573 		.ascii	"lues)\015\000"
 2543      290D00
 2544 274a 0000     		.align	2
 2545              	.LC263:
 2546 274c 20205348 		.ascii	"  SHOW ASTIM             (Real Time Autostimolus Va"
 2546      4F572041 
 2546      5354494D 
 2546      20202020 
 2546      20202020 
 2547 277f 6C756573 		.ascii	"lues)\015\000"
 2547      290D00
 2548 2786 0000     		.align	2
 2549              	.LC264:
 2550 2788 20205348 		.ascii	"  SHOW PA[TH]  <n>       (Path Trapezoid Values [n="
 2550      4F572050 
 2550      415B5448 
 2550      5D20203C 
 2550      6E3E2020 
 2551 27bb 302E2E31 		.ascii	"0..15])\015\000"
 2551      355D290D 
 2551      00
 2552              		.align	2
 2553              	.LC265:
 2554 27c4 20205348 		.ascii	"  SHOW MOV[ER] <n>       (Rendering Values of Path "
 2554      4F57204D 
 2554      4F565B45 
 2554      525D203C 
 2554      6E3E2020 
 2555 27f7 6E205B6E 		.ascii	"n [n=0..15])\015\000"
 2555      3D302E2E 
 2555      31355D29 
 2555      0D00
 2556 2805 000000   		.align	2
 2557              	.LC266:
 2558 2808 20205348 		.ascii	"  SHOW MOVERS            (Real time Pan and Tilt Mo"
 2558      4F57204D 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 78


 2558      4F564552 
 2558      53202020 
 2558      20202020 
 2559 283b 76657273 		.ascii	"vers Values)\015\000"
 2559      2056616C 
 2559      75657329 
 2559      0D00
 2560 2849 000000   		.align	2
 2561              	.LC267:
 2562 284c 20205348 		.ascii	"  SHOW CLU     <clu_num> (CLU GML definition [clu_n"
 2562      4F572043 
 2562      4C552020 
 2562      2020203C 
 2562      636C755F 
 2563 287f 756D3D30 		.ascii	"um=0..49])\015\000"
 2563      2E2E3439 
 2563      5D290D00 
 2564 288b 00       		.align	2
 2565              	.LC268:
 2566 288c 20205348 		.ascii	"  SHOW Q|SHOT  <n>       (Axis positions Q(SHOT) nu"
 2566      4F572051 
 2566      7C53484F 
 2566      5420203C 
 2566      6E3E2020 
 2567 28bf 6D626572 		.ascii	"mber <n> or <all>)\015\000"
 2567      203C6E3E 
 2567      206F7220 
 2567      3C616C6C 
 2567      3E290D00 
 2568 28d3 00       		.align	2
 2569              	.LC269:
 2570 28d4 20205348 		.ascii	"  SHOW CLUSM             (CLU Execution State Machi"
 2570      4F572043 
 2570      4C55534D 
 2570      20202020 
 2570      20202020 
 2571 2907 6E65290D 		.ascii	"ne)\015\000"
 2571      00
 2572              		.align	2
 2573              	.LC270:
 2574 290c 20205348 		.ascii	"  SHOW [EVENTS|MAPSM]    (Events & Director's Mappi"
 2574      4F57205B 
 2574      4556454E 
 2574      54537C4D 
 2574      4150534D 
 2575 293f 6E672053 		.ascii	"ng State Machine)\015\000"
 2575      74617465 
 2575      204D6163 
 2575      68696E65 
 2575      290D00
 2576 2952 0000     		.align	2
 2577              	.LC271:
 2578 2954 20202870 		.ascii	"  (press anykey to stop flushing)\015\000"
 2578      72657373 
 2578      20616E79 
 2578      6B657920 
 2578      746F2073 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 79


 2579 2977 00       		.align	2
 2580              	.LC272:
 2581 2978 7100     		.ascii	"q\000"
 2582 297a 0000     		.align	2
 2583              	.LC273:
 2584 297c 51202873 		.ascii	"Q (shot) Table\015\000"
 2584      686F7429 
 2584      20546162 
 2584      6C650D00 
 2585              		.align	2
 2586              	.LC274:
 2587 298c 2D2D2D2D 		.ascii	"--------------\015\000"
 2587      2D2D2D2D 
 2587      2D2D2D2D 
 2587      2D2D0D00 
 2588              		.align	2
 2589              	.LC275:
 2590 299c 5130303A 		.ascii	"Q00: origin\015\000"
 2590      206F7269 
 2590      67696E0D 
 2590      00
 2591 29a9 000000   		.align	2
 2592              	.LC276:
 2593 29ac 5131313A 		.ascii	"Q11: face\015\000"
 2593      20666163 
 2593      650D00
 2594 29b7 00       		.align	2
 2595              	.LC277:
 2596 29b8 5131333A 		.ascii	"Q13: legs\015\000"
 2596      206C6567 
 2596      730D00
 2597 29c3 00       		.align	2
 2598              	.LC278:
 2599 29c4 5131343A 		.ascii	"Q14: hand dx\015\000"
 2599      2068616E 
 2599      64206478 
 2599      0D00
 2600 29d2 0000     		.align	2
 2601              	.LC279:
 2602 29d4 5131353A 		.ascii	"Q15: hand sx\015\000"
 2602      2068616E 
 2602      64207378 
 2602      0D00
 2603 29e2 0000     		.align	2
 2604              	.LC280:
 2605 29e4 5131363A 		.ascii	"Q16: pedal dx\015\000"
 2605      20706564 
 2605      616C2064 
 2605      780D00
 2606 29f3 00       		.align	2
 2607              	.LC281:
 2608 29f4 5131373A 		.ascii	"Q17: pedal sx\015\000"
 2608      20706564 
 2608      616C2073 
 2608      780D00
 2609 2a03 00       		.align	2
 2610              	.LC282:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 80


 2611 2a04 5132313A 		.ascii	"Q21: wheel\015\000"
 2611      20776865 
 2611      656C0D00 
 2612              		.align	2
 2613              	.LC283:
 2614 2a10 5133313A 		.ascii	"Q31: road\015\000"
 2614      20726F61 
 2614      640D00
 2615 2a1b 00       		.align	2
 2616              	.LC284:
 2617 2a1c 5133333A 		.ascii	"Q33: road side dx\015\000"
 2617      20726F61 
 2617      64207369 
 2617      64652064 
 2617      780D00
 2618 2a2f 00       		.align	2
 2619              	.LC285:
 2620 2a30 5133343A 		.ascii	"Q34: road side sx\015\000"
 2620      20726F61 
 2620      64207369 
 2620      64652073 
 2620      780D00
 2621 2a43 00       		.align	2
 2622              	.LC286:
 2623 2a44 5134303A 		.ascii	"Q40: panorama front\015\000"
 2623      2070616E 
 2623      6F72616D 
 2623      61206672 
 2623      6F6E740D 
 2624 2a59 000000   		.align	2
 2625              	.LC287:
 2626 2a5c 5134313A 		.ascii	"Q41: panorama dx\015\000"
 2626      2070616E 
 2626      6F72616D 
 2626      61206478 
 2626      0D00
 2627 2a6e 0000     		.align	2
 2628              	.LC288:
 2629 2a70 5134323A 		.ascii	"Q42: panorama sx\015\000"
 2629      2070616E 
 2629      6F72616D 
 2629      61207378 
 2629      0D00
 2630 2a82 0000     		.align	2
 2631              	.LC289:
 2632 2a84 5134333A 		.ascii	"Q43: panorama dx rear\015\000"
 2632      2070616E 
 2632      6F72616D 
 2632      61206478 
 2632      20726561 
 2633 2a9b 00       		.align	2
 2634              	.LC290:
 2635 2a9c 5134343A 		.ascii	"Q44: panorama sx rear\015\000"
 2635      2070616E 
 2635      6F72616D 
 2635      61207378 
 2635      20726561 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 81


 2636 2ab3 00       		.align	2
 2637              	.LC291:
 2638 2ab4 5135313A 		.ascii	"Q51: sky\015\000"
 2638      20736B79 
 2638      0D00
 2639 2abe 0000     		.align	2
 2640              	.LC292:
 2641 2ac0 5135323A 		.ascii	"Q52: sky sx\015\000"
 2641      20736B79 
 2641      2073780D 
 2641      00
 2642 2acd 000000   		.align	2
 2643              	.LC293:
 2644 2ad0 5135333A 		.ascii	"Q53: sky dx\015\000"
 2644      20736B79 
 2644      2064780D 
 2644      00
 2645 2add 000000   		.align	2
 2646              	.LC294:
 2647 2ae0 74657374 		.ascii	"testdac\000"
 2647      64616300 
 2648              		.align	2
 2649              	.LC295:
 2650 2ae8 54455354 		.ascii	"TESTDAC: tests STEER DAC OUTPUT\015\000"
 2650      4441433A 
 2650      20746573 
 2650      74732053 
 2650      54454552 
 2651 2b09 000000   		.align	2
 2652              	.LC296:
 2653 2b0c 20205445 		.ascii	"  TESTDAC\015\000"
 2653      53544441 
 2653      430D00
 2654 2b17 00       		.align	2
 2655              	.LC297:
 2656 2b18 20205052 		.ascii	"  PROMPT\015\000"
 2656      4F4D5054 
 2656      0D00
 2657 2b22 0000     		.align	2
 2658              	.LC298:
 2659 2b24 20205645 		.ascii	"  VERSION\015\000"
 2659      5253494F 
 2659      4E0D00
 2660 2b2f 00       		.align	2
 2661              	.LC299:
 2662 2b30 2020560D 		.ascii	"  V\015\000"
 2662      00
 2663 2b35 000000   		.align	2
 2664              	.LC300:
 2665 2b38 23455252 		.ascii	"#ERROR3: Bad parameter(s)!\000"
 2665      4F52333A 
 2665      20426164 
 2665      20706172 
 2665      616D6574 
 2666 2b53 00       		.align	2
 2667              	.LC301:
 2668 2b54 7300     		.ascii	"s\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 82


 2669 2b56 0000     		.align	2
 2670              	.LC302:
 2671 2b58 636F6E74 		.ascii	"control\000"
 2671      726F6C00 
 2672              		.align	2
 2673              	.LC303:
 2674 2b60 6374726C 		.ascii	"ctrl\000"
 2674      00
 2675 2b65 000000   		.align	2
 2676              	.LC304:
 2677 2b68 1B5B324A 		.ascii	"\033[2J\000"
 2677      00
 2678 2b6d 000000   		.align	2
 2679              	.LC305:
 2680 2b70 1B5B4800 		.ascii	"\033[H\000"
 2681              		.align	2
 2682              	.LC306:
 2683 2b74 2D2D2D2D 		.ascii	"---------------------------------\015\000"
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2684 2b97 00       		.align	2
 2685              	.LC307:
 2686 2b98 2D2D2D20 		.ascii	"--- GoBee Director RT CONTROL ---\015\000"
 2686      476F4265 
 2686      65204469 
 2686      72656374 
 2686      6F722052 
 2687 2bbb 00       		.align	2
 2688              	.LC308:
 2689 2bbc 61786973 		.ascii	"axis_res(P)=%+1.3f [step/2PI]\000"
 2689      5F726573 
 2689      2850293D 
 2689      252B312E 
 2689      3366205B 
 2690 2bda 0000     		.align	2
 2691              	.LC309:
 2692 2bdc 61786973 		.ascii	"axis_res(T)=%+1.3f [step/2PI]\000"
 2692      5F726573 
 2692      2854293D 
 2692      252B312E 
 2692      3366205B 
 2693              		.global	__aeabi_i2f
 2694 2bfa 0000     		.align	2
 2695              	.LC310:
 2696 2bfc 616E676C 		.ascii	"angle(P)=%+1.4f [deg]\000"
 2696      65285029 
 2696      3D252B31 
 2696      2E346620 
 2696      5B646567 
 2697 2c12 0000     		.align	2
 2698              	.LC311:
 2699 2c14 616E676C 		.ascii	"angle(T)=%+1.4f [deg]\000"
 2699      65285429 
 2699      3D252B31 
 2699      2E346620 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 83


 2699      5B646567 
 2700 2c2a 0000     		.align	2
 2701              	.LC312:
 2702 2c2c 66626B28 		.ascii	"fbk(P)=%+1.4f [step]\000"
 2702      50293D25 
 2702      2B312E34 
 2702      66205B73 
 2702      7465705D 
 2703 2c41 000000   		.align	2
 2704              	.LC313:
 2705 2c44 66626B28 		.ascii	"fbk(T)=%+1.4f [step]\000"
 2705      54293D25 
 2705      2B312E34 
 2705      66205B73 
 2705      7465705D 
 2706 2c59 000000   		.align	2
 2707              	.LC314:
 2708 2c5c 6D617374 		.ascii	"mast_enc(P)=%+1.4f [step]\000"
 2708      5F656E63 
 2708      2850293D 
 2708      252B312E 
 2708      3466205B 
 2709 2c76 0000     		.align	2
 2710              	.LC315:
 2711 2c78 6D617374 		.ascii	"mast_enc(T)=%+1.4f [step]\000"
 2711      5F656E63 
 2711      2854293D 
 2711      252B312E 
 2711      3466205B 
 2712 2c92 0000     		.align	2
 2713              	.LC316:
 2714 2c94 6D617374 		.ascii	"mast_joy(P)=%+1.4f [step]\000"
 2714      5F6A6F79 
 2714      2850293D 
 2714      252B312E 
 2714      3466205B 
 2715 2cae 0000     		.align	2
 2716              	.LC317:
 2717 2cb0 6D617374 		.ascii	"mast_joy(T)=%+1.4f [step]\000"
 2717      5F6A6F79 
 2717      2854293D 
 2717      252B312E 
 2717      3466205B 
 2718 2cca 0000     		.align	2
 2719              	.LC318:
 2720 2ccc 65727228 		.ascii	"err(P)=%+1.4f\000"
 2720      50293D25 
 2720      2B312E34 
 2720      6600
 2721 2cda 0000     		.align	2
 2722              	.LC319:
 2723 2cdc 65727228 		.ascii	"err(T)=%+1.4f\000"
 2723      54293D25 
 2723      2B312E34 
 2723      6600
 2724 2cea 0000     		.align	2
 2725              	.LC320:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 84


 2726 2cec 64657272 		.ascii	"derr(P)=%+1.4f\000"
 2726      2850293D 
 2726      252B312E 
 2726      346600
 2727 2cfb 00       		.align	2
 2728              	.LC321:
 2729 2cfc 64657272 		.ascii	"derr(T)=%+1.4f\000"
 2729      2854293D 
 2729      252B312E 
 2729      346600
 2730 2d0b 00       		.align	2
 2731              	.LC322:
 2732 2d0c 69657272 		.ascii	"ierr(P)=%+1.4f\000"
 2732      2850293D 
 2732      252B312E 
 2732      346600
 2733 2d1b 00       		.align	2
 2734              	.LC323:
 2735 2d1c 69657272 		.ascii	"ierr(T)=%+1.4f\000"
 2735      2854293D 
 2735      252B312E 
 2735      346600
 2736 2d2b 00       		.align	2
 2737              	.LC324:
 2738 2d2c 63762850 		.ascii	"cv(P)=%+1.4f\000"
 2738      293D252B 
 2738      312E3466 
 2738      00
 2739 2d39 000000   		.align	2
 2740              	.LC325:
 2741 2d3c 63762854 		.ascii	"cv(T)=%+1.4f\000"
 2741      293D252B 
 2741      312E3466 
 2741      00
 2742 2d49 000000   		.align	2
 2743              	.LC326:
 2744 2d4c 70776D5F 		.ascii	"pwm_var(P)= %4i\000"
 2744      76617228 
 2744      50293D20 
 2744      25346900 
 2745              		.align	2
 2746              	.LC327:
 2747 2d5c 70776D5F 		.ascii	"pwm_var(T)= %4i\000"
 2747      76617228 
 2747      54293D20 
 2747      25346900 
 2748              		.align	2
 2749              	.LC328:
 2750 2d6c 50414E20 		.ascii	"PAN  TORQUE:\000"
 2750      20544F52 
 2750      5155453A 
 2750      00
 2751 2d79 000000   		.align	2
 2752              	.LC329:
 2753 2d7c 54494C54 		.ascii	"TILT TORQUE:\000"
 2753      20544F52 
 2753      5155453A 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 85


 2753      00
 2754 2d89 000000   		.align	2
 2755              	.LC330:
 2756 2d8c 4D414348 		.ascii	"MACHINE\015\000"
 2756      494E450D 
 2756      00
 2757 2d95 000000   		.align	2
 2758              	.LC331:
 2759 2d98 2D2D2D2D 		.ascii	"-------\015\000"
 2759      2D2D2D0D 
 2759      00
 2760 2da1 000000   		.align	2
 2761              	.LC332:
 2762 2da4 506F7765 		.ascii	"Power Status =\000"
 2762      72205374 
 2762      61747573 
 2762      203D00
 2763 2db3 00       		.align	2
 2764              	.LC333:
 2765 2db4 20476C6F 		.ascii	" Global DEENERGIZED\015\000"
 2765      62616C20 
 2765      4445454E 
 2765      45524749 
 2765      5A45440D 
 2766 2dc9 000000   		.align	2
 2767              	.LC334:
 2768 2dcc 20476C6F 		.ascii	" Global ENERGIZED!\015\000"
 2768      62616C20 
 2768      454E4552 
 2768      47495A45 
 2768      44210D00 
 2769              		.align	2
 2770              	.LC335:
 2771 2de0 2044414E 		.ascii	" DANGER!!! INTERNAL FIRMWARE FAULT\015\000"
 2771      47455221 
 2771      21212049 
 2771      4E544552 
 2771      4E414C20 
 2772              		.align	2
 2773              	.LC336:
 2774 2e04 6374726C 		.ascii	"ctrl isr counters START=%5i STOP=%5i  \015\012\000"
 2774      20697372 
 2774      20636F75 
 2774      6E746572 
 2774      73205354 
 2775 2e2d 000000   		.align	2
 2776              	.LC337:
 2777 2e30 616E616C 		.ascii	"analogs\000"
 2777      6F677300 
 2778              		.align	2
 2779              	.LC338:
 2780 2e38 616E6100 		.ascii	"ana\000"
 2781              		.align	2
 2782              	.LC339:
 2783 2e3c 495F503D 		.ascii	"I_P=%5d\000"
 2783      25356400 
 2784              		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 86


 2785              	.LC340:
 2786 2e44 20495F54 		.ascii	" I_T=%5d\000"
 2786      3D253564 
 2786      00
 2787 2e4d 000000   		.align	2
 2788              	.LC341:
 2789 2e50 20566363 		.ascii	" Vcc=%5d\000"
 2789      3D253564 
 2789      00
 2790 2e59 000000   		.align	2
 2791              	.LC342:
 2792 2e5c 2041783D 		.ascii	" Ax=%5d\000"
 2792      25356400 
 2793              		.align	2
 2794              	.LC343:
 2795 2e64 2041793D 		.ascii	" Ay=%5d\000"
 2795      25356400 
 2796              		.align	2
 2797              	.LC344:
 2798 2e6c 20417A3D 		.ascii	" Az=%5d\000"
 2798      25356400 
 2799              		.align	2
 2800              	.LC345:
 2801 2e74 20414253 		.ascii	" ABS_P=%5d\000"
 2801      5F503D25 
 2801      356400
 2802 2e7f 00       		.align	2
 2803              	.LC346:
 2804 2e80 20414253 		.ascii	" ABS_T=%5d\000"
 2804      5F543D25 
 2804      356400
 2805 2e8b 00       		.align	2
 2806              	.LC347:
 2807 2e8c 20617374 		.ascii	" astim=%5d\000"
 2807      696D3D25 
 2807      356400
 2808 2e97 00       		.align	2
 2809              	.LC348:
 2810 2e98 76636300 		.ascii	"vcc\000"
 2811              		.global	__aeabi_dmul
 2812              		.align	2
 2813              	.LC349:
 2814 2e9c 56434320 		.ascii	"VCC = %3.1f [V]\015\012\000"
 2814      3D202533 
 2814      2E316620 
 2814      5B565D0D 
 2814      0A00
 2815 2eae 0000     		.align	2
 2816              	.LC350:
 2817 2eb0 63757272 		.ascii	"current\000"
 2817      656E7400 
 2818              		.align	2
 2819              	.LC351:
 2820 2eb8 6900     		.ascii	"i\000"
 2821 2eba 0000     		.align	2
 2822              	.LC352:
 2823 2ebc 69287429 		.ascii	"i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 87


 2823      5F50414E 
 2823      203D2025 
 2823      352E3466 
 2823      205B415D 
 2824              		.align	2
 2825              	.LC353:
 2826 2ee8 20202020 		.ascii	"     Drive Status=%2u \000"
 2826      20447269 
 2826      76652053 
 2826      74617475 
 2826      733D2532 
 2827 2eff 00       		.align	2
 2828              	.LC354:
 2829 2f00 28692874 		.ascii	"(i(t)_PAN PEAK!) \000"
 2829      295F5041 
 2829      4E205045 
 2829      414B2129 
 2829      2000
 2830 2f12 0000     		.align	2
 2831              	.LC355:
 2832 2f14 28692874 		.ascii	"(i(t)_PAN OK!)  \000"
 2832      295F5041 
 2832      4E204F4B 
 2832      21292020 
 2832      00
 2833 2f25 000000   		.align	2
 2834              	.LC356:
 2835 2f28 28692874 		.ascii	"(i(t)_TILT PEAK!)\000"
 2835      295F5449 
 2835      4C542050 
 2835      45414B21 
 2835      2900
 2836 2f3a 0000     		.align	2
 2837              	.LC357:
 2838 2f3c 28692874 		.ascii	"(i(t)_TILT OK!)\000"
 2838      295F5449 
 2838      4C54204F 
 2838      4B212900 
 2839              		.align	2
 2840              	.LC358:
 2841 2f4c 706D746F 		.ascii	"pmtorque\000"
 2841      72717565 
 2841      00
 2842 2f55 000000   		.align	2
 2843              	.LC359:
 2844 2f58 706D7400 		.ascii	"pmt\000"
 2845              		.align	2
 2846              	.LC360:
 2847 2f5c 0D0A4178 		.ascii	"\015\012Axis=Pan\015\012\015\000"
 2847      69733D50 
 2847      616E0D0A 
 2847      0D00
 2848 2f6a 0000     		.align	2
 2849              	.LC361:
 2850 2f6c 695F743D 		.ascii	"i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_ma"
 2850      25332E33 
 2850      665B415D 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 88


 2850      20286E6C 
 2850      3D25332E 
 2851 2f9f 783D2533 		.ascii	"x=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_med=%3.2f[A]  TM"
 2851      2E32665B 
 2851      415D2020 
 2851      544D4F54 
 2851      5F6D6178 
 2852 2fd2 4F545F6D 		.ascii	"OT_med=%3.2f[mNm]\015\012\000"
 2852      65643D25 
 2852      332E3266 
 2852      5B6D4E6D 
 2852      5D0D0A00 
 2853 2fe6 0000     		.align	2
 2854              	.LC362:
 2855 2fe8 0D0A4261 		.ascii	"\015\012Battery Capacity Used=%3.2f [mAh]  Percenta"
 2855      74746572 
 2855      79204361 
 2855      70616369 
 2855      74792055 
 2856 3015 67652831 		.ascii	"ge(1000mAh)=%3.2f [%%]\015\012\000"
 2856      3030306D 
 2856      4168293D 
 2856      25332E32 
 2856      66205B25 
 2857 302e 0000     		.align	2
 2858              	.LC363:
 2859 3030 746D746F 		.ascii	"tmtorque\000"
 2859      72717565 
 2859      00
 2860 3039 000000   		.align	2
 2861              	.LC364:
 2862 303c 746D7400 		.ascii	"tmt\000"
 2863              		.align	2
 2864              	.LC365:
 2865 3040 0D0A4178 		.ascii	"\015\012Axis=Tilt\015\012\015\000"
 2865      69733D54 
 2865      696C740D 
 2865      0A0D00
 2866 304f 00       		.align	2
 2867              	.LC366:
 2868 3050 706F746F 		.ascii	"potorque\000"
 2868      72717565 
 2868      00
 2869 3059 000000   		.align	2
 2870              	.LC367:
 2871 305c 706F7400 		.ascii	"pot\000"
 2872              		.align	2
 2873              	.LC368:
 2874 3060 695F743D 		.ascii	"i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_ma"
 2874      25332E33 
 2874      665B415D 
 2874      20286E6C 
 2874      3D25332E 
 2875 3093 783D2533 		.ascii	"x=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_med=%3.2f[A]  TO"
 2875      2E32665B 
 2875      415D2020 
 2875      544F5554 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 89


 2875      5F6D6178 
 2876 30c6 55545F6D 		.ascii	"UT_med=%3.2f[mNm]\015\012\000"
 2876      65643D25 
 2876      332E3266 
 2876      5B6D4E6D 
 2876      5D0D0A00 
 2877 30da 0000     		.align	2
 2878              	.LC369:
 2879 30dc 746F746F 		.ascii	"totorque\000"
 2879      72717565 
 2879      00
 2880 30e5 000000   		.align	2
 2881              	.LC370:
 2882 30e8 746F7400 		.ascii	"tot\000"
 2883              		.align	2
 2884              	.LC371:
 2885 30ec 706D706F 		.ascii	"pmpower\000"
 2885      77657200 
 2886              		.align	2
 2887              	.LC372:
 2888 30f4 706D7000 		.ascii	"pmp\000"
 2889              		.align	2
 2890              	.LC373:
 2891 30f8 54287429 		.ascii	"T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p"
 2891      3D25332E 
 2891      31665B6D 
 2891      4E6D5D20 
 2891      20762874 
 2892 312b 2874293D 		.ascii	"(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed=%3.1f[mW]\015\012"
 2892      25332E31 
 2892      665B6D57 
 2892      5D202070 
 2892      6D61783D 
 2893 315a 00       		.ascii	"\000"
 2894 315b 00       		.align	2
 2895              	.LC374:
 2896 315c 746D706F 		.ascii	"tmpower\000"
 2896      77657200 
 2897              		.align	2
 2898              	.LC375:
 2899 3164 746D7000 		.ascii	"tmp\000"
 2900              		.align	2
 2901              	.LC376:
 2902 3168 70616273 		.ascii	"pabsstats\000"
 2902      73746174 
 2902      7300
 2903 3172 0000     		.align	2
 2904              	.LC377:
 2905 3174 70616273 		.ascii	"pabs\000"
 2905      00
 2906 3179 000000   		.align	2
 2907              	.LC378:
 2908 317c 50414E20 		.ascii	"PAN Absolute Sensor:\000"
 2908      4162736F 
 2908      6C757465 
 2908      2053656E 
 2908      736F723A 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 90


 2909 3191 000000   		.align	2
 2910              	.LC379:
 2911 3194 206D6561 		.ascii	" mean=%+1.1f [raw]\000"
 2911      6E3D252B 
 2911      312E3166 
 2911      205B7261 
 2911      775D00
 2912 31a7 00       		.align	2
 2913              	.LC380:
 2914 31a8 206D6178 		.ascii	" max=%+1.1f [raw]\000"
 2914      3D252B31 
 2914      2E316620 
 2914      5B726177 
 2914      5D00
 2915 31ba 0000     		.align	2
 2916              	.LC381:
 2917 31bc 206D696E 		.ascii	" min=%+1.1f [raw]\000"
 2917      3D252B31 
 2917      2E316620 
 2917      5B726177 
 2917      5D00
 2918 31ce 0000     		.align	2
 2919              	.LC382:
 2920 31d0 2072616E 		.ascii	" range=%+1.1f [raw]\000"
 2920      67653D25 
 2920      2B312E31 
 2920      66205B72 
 2920      61775D00 
 2921              		.align	2
 2922              	.LC383:
 2923 31e4 74616273 		.ascii	"tabsstats\000"
 2923      73746174 
 2923      7300
 2924 31ee 0000     		.align	2
 2925              	.LC384:
 2926 31f0 74616273 		.ascii	"tabs\000"
 2926      00
 2927 31f5 000000   		.align	2
 2928              	.LC385:
 2929 31f8 54494C54 		.ascii	"TILT Absolute Sensor:\000"
 2929      20416273 
 2929      6F6C7574 
 2929      65205365 
 2929      6E736F72 
 2930 320e 0000     		.align	2
 2931              	.LC386:
 2932 3210 61737469 		.ascii	"astim\000"
 2932      6D00
 2933 3216 0000     		.align	2
 2934              	.LC387:
 2935 3218 41535449 		.ascii	"ASTIM(ADC_INPUT) =%+5d [lsb]\000"
 2935      4D284144 
 2935      435F494E 
 2935      50555429 
 2935      203D252B 
 2936 3235 000000   		.align	2
 2937              	.LC388:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 91


 2938 3238 20202041 		.ascii	"   ASTIM(P)=%+5.1f [step]\000"
 2938      5354494D 
 2938      2850293D 
 2938      252B352E 
 2938      3166205B 
 2939 3252 0000     		.align	2
 2940              	.LC389:
 2941 3254 20202041 		.ascii	"   ASTIM(T)=%+5.1f [step]\015\012\000"
 2941      5354494D 
 2941      2854293D 
 2941      252B352E 
 2941      3166205B 
 2942              		.align	2
 2943              	.LC390:
 2944 3270 62696B65 		.ascii	"bikeangles\000"
 2944      616E676C 
 2944      657300
 2945 327b 00       		.align	2
 2946              	.LC391:
 2947 327c 62696B65 		.ascii	"bike\000"
 2947      00
 2948 3281 000000   		.align	2
 2949              	.LC392:
 2950 3284 42494B45 		.ascii	"BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt)"
 2950      2045554C 
 2950      4552204C 
 2950      50462041 
 2950      4E474C45 
 2951 32b7 3A25362E 		.ascii	":%6.3f | ROLL(roll):%6.3f |\015\012\000"
 2951      3366207C 
 2951      20524F4C 
 2951      4C28726F 
 2951      6C6C293A 
 2952 32d5 000000   		.align	2
 2953              	.LC393:
 2954 32d8 616E616C 		.ascii	"analogacc\000"
 2954      6F676163 
 2954      6300
 2955 32e2 0000     		.align	2
 2956              	.LC394:
 2957 32e4 61616363 		.ascii	"aacc\000"
 2957      00
 2958 32e9 000000   		.align	2
 2959              	.LC395:
 2960 32ec 783D252B 		.ascii	"x=%+1.4f[g] (%5i)\000"
 2960      312E3466 
 2960      5B675D20 
 2960      28253569 
 2960      2900
 2961 32fe 0000     		.align	2
 2962              	.LC396:
 2963 3300 20793D25 		.ascii	" y=%+1.4f[g] (%5i)\000"
 2963      2B312E34 
 2963      665B675D 
 2963      20282535 
 2963      692900
 2964 3313 00       		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 92


 2965              	.LC397:
 2966 3314 207A3D25 		.ascii	" z=%+1.4f[g] (%5i)\000"
 2966      2B312E34 
 2966      665B675D 
 2966      20282535 
 2966      692900
 2967 3327 00       		.align	2
 2968              	.LC398:
 2969 3328 206D6F64 		.ascii	" modulo=%+1.4f[g]\000"
 2969      756C6F3D 
 2969      252B312E 
 2969      34665B67 
 2969      5D00
 2970 333a 0000     		.align	2
 2971              	.LC399:
 2972 333c 20736479 		.ascii	" sdyn=%+1.4f[g^2]\000"
 2972      6E3D252B 
 2972      312E3466 
 2972      5B675E32 
 2972      5D00
 2973 334e 0000     		.align	2
 2974              	.LC400:
 2975 3350 6576656E 		.ascii	"events\000"
 2975      747300
 2976 3357 00       		.align	2
 2977              	.LC401:
 2978 3358 6576656E 		.ascii	"event\000"
 2978      7400
 2979 335e 0000     		.align	2
 2980              	.LC402:
 2981 3360 6D617073 		.ascii	"mapsm\000"
 2981      6D00
 2982 3366 0000     		.align	2
 2983              	.LC403:
 2984 3368 4576656E 		.ascii	"Events\000"
 2984      747300
 2985 336f 00       		.align	2
 2986              	.LC404:
 2987 3370 206F6E5F 		.ascii	" on_origin_ticks=%ld\000"
 2987      6F726967 
 2987      696E5F74 
 2987      69636B73 
 2987      3D256C64 
 2988 3385 000000   		.align	2
 2989              	.LC405:
 2990 3388 20616E67 		.ascii	" angle_tilt=%2i\000"
 2990      6C655F74 
 2990      696C743D 
 2990      25326900 
 2991              		.align	2
 2992              	.LC406:
 2993 3398 20766962 		.ascii	" vibration=%2i\000"
 2993      72617469 
 2993      6F6E3D25 
 2993      326900
 2994 33a7 00       		.align	2
 2995              	.LC407:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 93


 2996 33a8 206A756D 		.ascii	" jump=%2i\000"
 2996      703D2532 
 2996      6900
 2997 33b2 0000     		.align	2
 2998              	.LC408:
 2999 33b4 20736D3D 		.ascii	" sm=%3i \000"
 2999      25336920 
 2999      00
 3000 33bd 000000   		.align	2
 3001              	.LC409:
 3002 33c0 636C7573 		.ascii	"clusm\000"
 3002      6D00
 3003 33c6 0000     		.align	2
 3004              	.LC410:
 3005 33c8 434C5520 		.ascii	"CLU SM: \000"
 3005      534D3A20 
 3005      00
 3006 33d1 000000   		.align	2
 3007              	.LC411:
 3008 33d4 206E756D 		.ascii	" number=%3i\000"
 3008      6265723D 
 3008      25336900 
 3009              		.align	2
 3010              	.LC412:
 3011 33e0 206C696E 		.ascii	" line=%3i\000"
 3011      653D2533 
 3011      6900
 3012 33ea 0000     		.align	2
 3013              	.LC413:
 3014 33ec 20706175 		.ascii	" pauseticks=%3i\000"
 3014      73657469 
 3014      636B733D 
 3014      25336900 
 3015              		.align	2
 3016              	.LC414:
 3017 33fc 20737461 		.ascii	" status=%3i \000"
 3017      7475733D 
 3017      25336920 
 3017      00
 3018 3409 000000   		.align	2
 3019              	.LC415:
 3020 340c 62757474 		.ascii	"buttons\000"
 3020      6F6E7300 
 3021              		.align	2
 3022              	.LC416:
 3023 3414 62757400 		.ascii	"but\000"
 3024              		.align	2
 3025              	.LC417:
 3026 3418 42555454 		.ascii	"BUTTONS = %3i\000"
 3026      4F4E5320 
 3026      3D202533 
 3026      6900
 3027 3426 0000     		.align	2
 3028              	.LC418:
 3029 3428 20284F4E 		.ascii	" (ON)\000"
 3029      2900
 3030 342e 0000     		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 94


 3031              	.LC419:
 3032 3430 20284357 		.ascii	" (CW)\000"
 3032      2900
 3033 3436 0000     		.align	2
 3034              	.LC420:
 3035 3438 20284343 		.ascii	" (CCW)\000"
 3035      572900
 3036 343f 00       		.align	2
 3037              	.LC421:
 3038 3440 73797364 		.ascii	"sysdyn\000"
 3038      796E00
 3039 3447 00       		.align	2
 3040              	.LC422:
 3041 3448 7364796E 		.ascii	"sdyn\000"
 3041      00
 3042 344d 000000   		.align	2
 3043              	.LC423:
 3044 3450 53797374 		.ascii	"System Dynamic Scalar=%1.8f  [xacc_ADC^2+yacc_ADC^2"
 3044      656D2044 
 3044      796E616D 
 3044      69632053 
 3044      63616C61 
 3045 3483 2D283167 		.ascii	"-(1g_ADC)^2]\000"
 3045      5F414443 
 3045      295E325D 
 3045      00
 3046              		.align	2
 3047              	.LC424:
 3048 3490 706F7369 		.ascii	"position\000"
 3048      74696F6E 
 3048      00
 3049 3499 000000   		.align	2
 3050              	.LC425:
 3051 349c 706F7300 		.ascii	"pos\000"
 3052              		.align	2
 3053              	.LC426:
 3054 34a0 20616273 		.ascii	" abs_pos(t)=%+ld [step]\000"
 3054      5F706F73 
 3054      2874293D 
 3054      252B6C64 
 3054      205B7374 
 3055              		.align	2
 3056              	.LC427:
 3057 34b8 2028252B 		.ascii	" (%+3.2f [rad])\000"
 3057      332E3266 
 3057      205B7261 
 3057      645D2900 
 3058              		.align	2
 3059              	.LC428:
 3060 34c8 20202020 		.ascii	"    TILT: enc(t)=%+ld [step]\000"
 3060      54494C54 
 3060      3A20656E 
 3060      63287429 
 3060      3D252B6C 
 3061 34e5 000000   		.align	2
 3062              	.LC429:
 3063 34e8 656E6366 		.ascii	"encfbk\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 95


 3063      626B00
 3064 34ef 00       		.align	2
 3065              	.LC430:
 3066 34f0 656E6366 		.ascii	"encf\000"
 3066      00
 3067 34f5 000000   		.align	2
 3068              	.LC431:
 3069 34f8 44414E47 		.ascii	"DANGER!!! THIS COMMAND DISABLES MOTOR CONTROL AND M"
 3069      45522121 
 3069      21205448 
 3069      49532043 
 3069      4F4D4D41 
 3070 352b 41592050 		.ascii	"AY PRODUCE LARGE MOVEMENTS!!!\015\000"
 3070      524F4455 
 3070      4345204C 
 3070      41524745 
 3070      204D4F56 
 3071 354a 0000     		.align	2
 3072              	.LC432:
 3073 354c 41726520 		.ascii	"Are you sure to show feedback encoders [Y/N]?\000"
 3073      796F7520 
 3073      73757265 
 3073      20746F20 
 3073      73686F77 
 3074 357a 0000     		.align	2
 3075              	.LC433:
 3076 357c 50414E5F 		.ascii	"PAN_FBK=%8ld\000"
 3076      46424B3D 
 3076      25386C64 
 3076      00
 3077 3589 000000   		.align	2
 3078              	.LC434:
 3079 358c 20205449 		.ascii	"  TILT_FBK=%8ld\015\012\000"
 3079      4C545F46 
 3079      424B3D25 
 3079      386C640D 
 3079      0A00
 3080 359e 0000     		.align	2
 3081              	.LC435:
 3082 35a0 6D6F746F 		.ascii	"motorstatus\000"
 3082      72737461 
 3082      74757300 
 3083              		.align	2
 3084              	.LC436:
 3085 35ac 6D6F7400 		.ascii	"mot\000"
 3086              		.align	2
 3087              	.LC437:
 3088 35b0 4D6F746F 		.ascii	"Motor Status=%2u \000"
 3088      72205374 
 3088      61747573 
 3088      3D253275 
 3088      2000
 3089 35c2 0000     		.align	2
 3090              	.LC438:
 3091 35c4 50414E20 		.ascii	"PAN CURRENT PEAK!) \000"
 3091      43555252 
 3091      454E5420 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 96


 3091      5045414B 
 3091      21292000 
 3092              		.align	2
 3093              	.LC439:
 3094 35d8 2850414E 		.ascii	"(PAN CURRENT OK!)  \000"
 3094      20435552 
 3094      52454E54 
 3094      204F4B21 
 3094      29202000 
 3095              		.align	2
 3096              	.LC440:
 3097 35ec 2854494C 		.ascii	"(TILT CURRENT PEAK!)\000"
 3097      54204355 
 3097      5252454E 
 3097      54205045 
 3097      414B2129 
 3098 3601 000000   		.align	2
 3099              	.LC441:
 3100 3604 2854494C 		.ascii	"(TILT CURRENT OK!)\000"
 3100      54204355 
 3100      5252454E 
 3100      54204F4B 
 3100      212900
 3101 3617 00       		.align	2
 3102              	.LC442:
 3103 3618 73686F74 		.ascii	"shot\000"
 3103      00
 3104 361d 000000   		.align	2
 3105              	.LC443:
 3106 3620 616C6C00 		.ascii	"all\000"
 3107              		.align	2
 3108              	.LC444:
 3109 3624 514D656D 		.ascii	"QMemory%02d NOT ALLOCATED!\015\012\000"
 3109      6F727925 
 3109      30326420 
 3109      4E4F5420 
 3109      414C4C4F 
 3110 3641 000000   		.align	2
 3111              	.LC445:
 3112 3644 514D656D 		.ascii	"QMemory%02d allocated to Q%02d\015\012\000"
 3112      6F727925 
 3112      30326420 
 3112      616C6C6F 
 3112      63617465 
 3113 3665 000000   		.align	2
 3114              	.LC446:
 3115 3668 51253032 		.ascii	"Q%02d PAN  ABS position=%+8ld [step]  default_param"
 3115      64205041 
 3115      4E202041 
 3115      42532070 
 3115      6F736974 
 3116 369b 3D252B38 		.ascii	"=%+8ld [step]  adjust_param=%+8ld [step]\015\012\000"
 3116      6C64205B 
 3116      73746570 
 3116      5D202061 
 3116      646A7573 
 3117 36c6 0000     		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 97


 3118              	.LC447:
 3119 36c8 51253032 		.ascii	"Q%02d TILT ABS position=%+8ld [step]  default_param"
 3119      64205449 
 3119      4C542041 
 3119      42532070 
 3119      6F736974 
 3120 36fb 3D252B38 		.ascii	"=%+8ld [step]  adjust_param=%+8ld [step]\015\012\000"
 3120      6C64205B 
 3120      73746570 
 3120      5D202061 
 3120      646A7573 
 3121 3726 0000     		.align	2
 3122              	.LC448:
 3123 3728 0D0A2851 		.ascii	"\015\012(Q%02d is allocated in Q memory number %02d"
 3123      25303264 
 3123      20697320 
 3123      616C6C6F 
 3123      63617465 
 3124 3755 290D0A00 		.ascii	")\015\012\000"
 3125 3759 000000   		.align	2
 3126              	.LC449:
 3127 375c 0D0A5125 		.ascii	"\015\012Q%02d is not allocated!\015\012\000"
 3127      30326420 
 3127      6973206E 
 3127      6F742061 
 3127      6C6C6F63 
 3128              		.align	2
 3129              	.LC450:
 3130 3778 23455252 		.ascii	"#ERROR5: Number not allowed!\000"
 3130      4F52353A 
 3130      204E756D 
 3130      62657220 
 3130      6E6F7420 
 3131 3795 000000   		.align	2
 3132              	.LC451:
 3133 3798 70617468 		.ascii	"path\000"
 3133      00
 3134 379d 000000   		.align	2
 3135              	.LC452:
 3136 37a0 706100   		.ascii	"pa\000"
 3137 37a3 00       		.align	2
 3138              	.LC453:
 3139 37a4 20547261 		.ascii	" Trapezoid num =%3i\015\012\000"
 3139      70657A6F 
 3139      6964206E 
 3139      756D203D 
 3139      2533690D 
 3140 37ba 0000     		.align	2
 3141              	.LC454:
 3142 37bc 20416363 		.ascii	" Acc           =%+1.2f [%%]\015\012\000"
 3142      20202020 
 3142      20202020 
 3142      2020203D 
 3142      252B312E 
 3143 37da 0000     		.align	2
 3144              	.LC455:
 3145 37dc 20446563 		.ascii	" Dec           =%+1.2f [%%]\015\012\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 98


 3145      20202020 
 3145      20202020 
 3145      2020203D 
 3145      252B312E 
 3146 37fa 0000     		.align	2
 3147              	.LC456:
 3148 37fc 2054696D 		.ascii	" Time          =%+1.2f [sec]\015\012\000"
 3148      65202020 
 3148      20202020 
 3148      2020203D 
 3148      252B312E 
 3149 381b 00       		.align	2
 3150              	.LC457:
 3151 381c 20537465 		.ascii	" Steps         =%+1.2f [step]\015\012\000"
 3151      70732020 
 3151      20202020 
 3151      2020203D 
 3151      252B312E 
 3152              		.align	2
 3153              	.LC458:
 3154 383c 204C6173 		.ascii	" Last_flg      =%3i [1=last]\015\012\000"
 3154      745F666C 
 3154      67202020 
 3154      2020203D 
 3154      25336920 
 3155 385b 00       		.align	2
 3156              	.LC459:
 3157 385c 2D2D2D2D 		.ascii	"----------------------------\015\000"
 3157      2D2D2D2D 
 3157      2D2D2D2D 
 3157      2D2D2D2D 
 3157      2D2D2D2D 
 3158 387a 0000     		.align	2
 3159              	.LC460:
 3160 387c 20546963 		.ascii	" Ticks Initial =%+ld [ticks]\015\012\000"
 3160      6B732049 
 3160      6E697469 
 3160      616C203D 
 3160      252B6C64 
 3161 389b 00       		.align	2
 3162              	.LC461:
 3163 389c 20416363 		.ascii	" Acc EndPoint  =%+ld [ticks]\015\012\000"
 3163      20456E64 
 3163      506F696E 
 3163      7420203D 
 3163      252B6C64 
 3164 38bb 00       		.align	2
 3165              	.LC462:
 3166 38bc 20446563 		.ascii	" Dec StartPoint=%+ld [ticks]\015\012\000"
 3166      20537461 
 3166      7274506F 
 3166      696E743D 
 3166      252B6C64 
 3167 38db 00       		.align	2
 3168              	.LC463:
 3169 38dc 20446563 		.ascii	" Dec EndPoint  =%+ld [ticks]\015\012\000"
 3169      20456E64 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 99


 3169      506F696E 
 3169      7420203D 
 3169      252B6C64 
 3170 38fb 00       		.align	2
 3171              	.LC464:
 3172 38fc 20546963 		.ascii	" Ticks Final   =%+ld [ticks]\015\012\000"
 3172      6B732046 
 3172      696E616C 
 3172      2020203D 
 3172      252B6C64 
 3173 391b 00       		.align	2
 3174              	.LC465:
 3175 391c 20416363 		.ascii	" Acc Ticks     =%+1.2f [float ticks]\015\012\000"
 3175      20546963 
 3175      6B732020 
 3175      2020203D 
 3175      252B312E 
 3176 3943 00       		.align	2
 3177              	.LC466:
 3178 3944 2056636F 		.ascii	" Vconst Ticks  =%+1.2f [float ticks]\015\012\000"
 3178      6E737420 
 3178      5469636B 
 3178      7320203D 
 3178      252B312E 
 3179 396b 00       		.align	2
 3180              	.LC467:
 3181 396c 20446563 		.ascii	" Dec Ticks     =%+1.2f [float ticks]\015\012\000"
 3181      20546963 
 3181      6B732020 
 3181      2020203D 
 3181      252B312E 
 3182 3993 00       		.align	2
 3183              	.LC468:
 3184 3994 20562069 		.ascii	" V initial     =%+1.8f [step/ticks]\015\012\000"
 3184      6E697469 
 3184      616C2020 
 3184      2020203D 
 3184      252B312E 
 3185 39ba 0000     		.align	2
 3186              	.LC469:
 3187 39bc 20416363 		.ascii	" Acc slope     =%+1.8f [step/ticks^2]\015\012\000"
 3187      20736C6F 
 3187      70652020 
 3187      2020203D 
 3187      252B312E 
 3188              		.align	2
 3189              	.LC470:
 3190 39e4 20562063 		.ascii	" V constant    =%+1.8f [step/ticks]\015\012\000"
 3190      6F6E7374 
 3190      616E7420 
 3190      2020203D 
 3190      252B312E 
 3191 3a0a 0000     		.align	2
 3192              	.LC471:
 3193 3a0c 20446563 		.ascii	" Dec slope     =%+1.8f [step/ticks^2]\015\012\000"
 3193      20736C6F 
 3193      70652020 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 100


 3193      2020203D 
 3193      252B312E 
 3194              		.align	2
 3195              	.LC472:
 3196 3a34 20562066 		.ascii	" V final       =%+1.8f [step/ticks]\015\012\000"
 3196      696E616C 
 3196      20202020 
 3196      2020203D 
 3196      252B312E 
 3197 3a5a 0000     		.align	2
 3198              	.LC473:
 3199 3a5c 6D6F7665 		.ascii	"movers\000"
 3199      727300
 3200 3a63 00       		.align	2
 3201              	.LC474:
 3202 3a64 4D6F7665 		.ascii	"Movers Ticks=%+ld, %+ld [ticks]\000"
 3202      72732054 
 3202      69636B73 
 3202      3D252B6C 
 3202      642C2025 
 3203              		.align	2
 3204              	.LC475:
 3205 3a84 20207374 		.ascii	"  status=%2i, %2i\000"
 3205      61747573 
 3205      3D253269 
 3205      2C202532 
 3205      6900
 3206 3a96 0000     		.align	2
 3207              	.LC476:
 3208 3a98 636C7500 		.ascii	"clu\000"
 3209              		.align	2
 3210              	.LC477:
 3211 3a9c 70616E6C 		.ascii	"panlimits\000"
 3211      696D6974 
 3211      7300
 3212 3aa6 0000     		.align	2
 3213              	.LC478:
 3214 3aa8 706C696D 		.ascii	"plim\000"
 3214      00
 3215 3aad 000000   		.align	2
 3216              	.LC479:
 3217 3ab0 50414E20 		.ascii	"PAN LIMIT=%2u \000"
 3217      4C494D49 
 3217      543D2532 
 3217      752000
 3218 3abf 00       		.align	2
 3219              	.LC480:
 3220 3ac0 74696C74 		.ascii	"tiltlimits\000"
 3220      6C696D69 
 3220      747300
 3221 3acb 00       		.align	2
 3222              	.LC481:
 3223 3acc 746C696D 		.ascii	"tlim\000"
 3223      00
 3224 3ad1 000000   		.align	2
 3225              	.LC482:
 3226 3ad4 54494C54 		.ascii	"TILT LIMIT=%2u \000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 101


 3226      204C494D 
 3226      49543D25 
 3226      32752000 
 3227              		.align	2
 3228              	.LC483:
 3229 3ae4 72617469 		.ascii	"ratioabsp\000"
 3229      6F616273 
 3229      7000
 3230 3aee 0000     		.align	2
 3231              	.LC484:
 3232 3af0 72617469 		.ascii	"ratiop\000"
 3232      6F7000
 3233 3af7 00       		.align	2
 3234              	.LC485:
 3235 3af8 41726520 		.ascii	"Are you sure to show absolute sensor ratios [Y/N]?\000"
 3235      796F7520 
 3235      73757265 
 3235      20746F20 
 3235      73686F77 
 3236 3b2b 00       		.align	2
 3237              	.LC486:
 3238 3b2c 50414E3A 		.ascii	"PAN: ABS_SENSOR=%5i[lsb]\000"
 3238      20414253 
 3238      5F53454E 
 3238      534F523D 
 3238      2535695B 
 3239 3b45 000000   		.align	2
 3240              	.LC487:
 3241 3b48 20454E43 		.ascii	" ENC=%9li[step]\000"
 3241      3D25396C 
 3241      695B7374 
 3241      65705D00 
 3242              		.align	2
 3243              	.LC488:
 3244 3b58 20524154 		.ascii	" RATIO=%1.4f[step/lsb]\000"
 3244      494F3D25 
 3244      312E3466 
 3244      5B737465 
 3244      702F6C73 
 3245 3b6f 00       		.align	2
 3246              	.LC489:
 3247 3b70 0D0A2A21 		.ascii	"\015\012*!point 0 sampling\015\012\015\000"
 3247      706F696E 
 3247      74203020 
 3247      73616D70 
 3247      6C696E67 
 3248              		.align	2
 3249              	.LC490:
 3250 3b88 0D0A2A21 		.ascii	"\015\012*!enc over abs ratio sampled\015\012\015\000"
 3250      656E6320 
 3250      6F766572 
 3250      20616273 
 3250      20726174 
 3251 3baa 0000     		.align	2
 3252              	.LC491:
 3253 3bac 0D0A2A21 		.ascii	"\015\012*!Absolute Sensor ratio PAN eeprom saved\015"
 3253      4162736F 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 102


 3253      6C757465 
 3253      2053656E 
 3253      736F7220 
 3254 3bd7 0A0D00   		.ascii	"\012\015\000"
 3255 3bda 0000     		.align	2
 3256              	.LC492:
 3257 3bdc 72617469 		.ascii	"ratioabst\000"
 3257      6F616273 
 3257      7400
 3258 3be6 0000     		.align	2
 3259              	.LC493:
 3260 3be8 72617469 		.ascii	"ratiot\000"
 3260      6F7400
 3261 3bef 00       		.align	2
 3262              	.LC494:
 3263 3bf0 54494C54 		.ascii	"TILT: ABS_SENSOR=%5i[lsb]\000"
 3263      3A204142 
 3263      535F5345 
 3263      4E534F52 
 3263      3D253569 
 3264 3c0a 0000     		.align	2
 3265              	.LC495:
 3266 3c0c 0D0A2A21 		.ascii	"\015\012*!Absolute Sensor ratio TILT eeprom saved\015"
 3266      4162736F 
 3266      6C757465 
 3266      2053656E 
 3266      736F7220 
 3267 3c38 0A0D00   		.ascii	"\012\015\000"
 3268 3c3b 00       		.align	2
 3269              	.LC496:
 3270 3c3c 6661756C 		.ascii	"faults\000"
 3270      747300
 3271 3c43 00       		.align	2
 3272              	.LC497:
 3273 3c44 6661756C 		.ascii	"fault\000"
 3273      7400
 3274 3c4a 0000     		.align	2
 3275              	.LC498:
 3276 3c4c 4E4F4E45 		.ascii	"NONE: ALL OK!\015\000"
 3276      3A20414C 
 3276      4C204F4B 
 3276      210D00
 3277 3c5b 00       		.align	2
 3278              	.LC499:
 3279 3c5c 40464155 		.ascii	"@FAULT#01: PAN  AXIS HAS PROBLEMS!\015\000"
 3279      4C542330 
 3279      313A2050 
 3279      414E2020 
 3279      41584953 
 3280              		.align	2
 3281              	.LC500:
 3282 3c80 40464155 		.ascii	"@FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!\015"
 3282      4C542331 
 3282      303A2046 
 3282      45454442 
 3282      41434B20 
 3283 3cb1 00       		.ascii	"\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 103


 3284 3cb2 0000     		.align	2
 3285              	.LC501:
 3286 3cb4 40464155 		.ascii	"@FAULT#02: TILT AXIS HAS PROBLEMS!\015\000"
 3286      4C542330 
 3286      323A2054 
 3286      494C5420 
 3286      41584953 
 3287              		.align	2
 3288              	.LC502:
 3289 3cd8 70617261 		.ascii	"params\000"
 3289      6D7300
 3290 3cdf 00       		.align	2
 3291              	.LC503:
 3292 3ce0 7000     		.ascii	"p\000"
 3293 3ce2 0000     		.align	2
 3294              	.LC504:
 3295 3ce4 476F4265 		.ascii	"GoBee DIRECTOR\015\000"
 3295      65204449 
 3295      52454354 
 3295      4F520D00 
 3296              		.align	2
 3297              	.LC505:
 3298 3cf4 3D3D3D3D 		.ascii	"==============\015\000"
 3298      3D3D3D3D 
 3298      3D3D3D3D 
 3298      3D3D0D00 
 3299              		.align	2
 3300              	.LC506:
 3301 3d04 476F6265 		.ascii	"Gobee Mode                   =%2u: \000"
 3301      65204D6F 
 3301      64652020 
 3301      20202020 
 3301      20202020 
 3302              		.align	2
 3303              	.LC507:
 3304 3d28 476F6265 		.ascii	"Gobee Selected Director      =%2u: \000"
 3304      65205365 
 3304      6C656374 
 3304      65642044 
 3304      69726563 
 3305              		.align	2
 3306              	.LC508:
 3307 3d4c 476F4265 		.ascii	"GoBee PARAMETER LIST\015\000"
 3307      65205041 
 3307      52414D45 
 3307      54455220 
 3307      4C495354 
 3308 3d62 0000     		.align	2
 3309              	.LC509:
 3310 3d64 3D3D3D3D 		.ascii	"====================\015\000"
 3310      3D3D3D3D 
 3310      3D3D3D3D 
 3310      3D3D3D3D 
 3310      3D3D3D3D 
 3311 3d7a 0000     		.align	2
 3312              	.LC510:
 3313 3d7c 50616E20 		.ascii	"Pan  Axis Resolution         = \000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 104


 3313      20417869 
 3313      73205265 
 3313      736F6C75 
 3313      74696F6E 
 3314              		.align	2
 3315              	.LC511:
 3316 3d9c 25382E31 		.ascii	"%8.1f [step/2PI]\000"
 3316      66205B73 
 3316      7465702F 
 3316      3250495D 
 3316      00
 3317 3dad 000000   		.align	2
 3318              	.LC512:
 3319 3db0 54696C74 		.ascii	"Tilt Axis Resolution         = \000"
 3319      20417869 
 3319      73205265 
 3319      736F6C75 
 3319      74696F6E 
 3320              		.align	2
 3321              	.LC513:
 3322 3dd0 4D6F746F 		.ascii	"Motor Control\015\000"
 3322      7220436F 
 3322      6E74726F 
 3322      6C0D00
 3323 3ddf 00       		.align	2
 3324              	.LC514:
 3325 3de0 3D3D3D3D 		.ascii	"=============\015\000"
 3325      3D3D3D3D 
 3325      3D3D3D3D 
 3325      3D0D00
 3326 3def 00       		.align	2
 3327              	.LC515:
 3328 3df0 50616E20 		.ascii	"Pan  Motor Polarity          = \000"
 3328      204D6F74 
 3328      6F722050 
 3328      6F6C6172 
 3328      69747920 
 3329              		.align	2
 3330              	.LC516:
 3331 3e10 25317520 		.ascii	"%1u (0=true, 1=invert)\000"
 3331      28303D74 
 3331      7275652C 
 3331      20313D69 
 3331      6E766572 
 3332 3e27 00       		.align	2
 3333              	.LC517:
 3334 3e28 50616E20 		.ascii	"Pan  Motor Kp                = \000"
 3334      204D6F74 
 3334      6F72204B 
 3334      70202020 
 3334      20202020 
 3335              		.align	2
 3336              	.LC518:
 3337 3e48 25386600 		.ascii	"%8f\000"
 3338              		.align	2
 3339              	.LC519:
 3340 3e4c 50616E20 		.ascii	"Pan  Motor Kd                = \000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 105


 3340      204D6F74 
 3340      6F72204B 
 3340      64202020 
 3340      20202020 
 3341              		.align	2
 3342              	.LC520:
 3343 3e6c 50616E20 		.ascii	"Pan  Motor Ki                = \000"
 3343      204D6F74 
 3343      6F72204B 
 3343      69202020 
 3343      20202020 
 3344              		.align	2
 3345              	.LC521:
 3346 3e8c 50616E20 		.ascii	"Pan  Motor Ksi               = \000"
 3346      204D6F74 
 3346      6F72204B 
 3346      73692020 
 3346      20202020 
 3347              		.align	2
 3348              	.LC522:
 3349 3eac 25386620 		.ascii	"%8f (max AZI=%8f)\000"
 3349      286D6178 
 3349      20415A49 
 3349      3D253866 
 3349      2900
 3350 3ebe 0000     		.align	2
 3351              	.LC523:
 3352 3ec0 50616E20 		.ascii	"Pan Limit Control            = \000"
 3352      4C696D69 
 3352      7420436F 
 3352      6E74726F 
 3352      6C202020 
 3353              		.align	2
 3354              	.LC524:
 3355 3ee0 25317520 		.ascii	"%1u (0=disabled, 1=enabled)\000"
 3355      28303D64 
 3355      69736162 
 3355      6C65642C 
 3355      20313D65 
 3356              		.align	2
 3357              	.LC525:
 3358 3efc 54696C74 		.ascii	"Tilt Motor Polarity          = \000"
 3358      204D6F74 
 3358      6F722050 
 3358      6F6C6172 
 3358      69747920 
 3359              		.align	2
 3360              	.LC526:
 3361 3f1c 54696C74 		.ascii	"Tilt Motor Kp                = \000"
 3361      204D6F74 
 3361      6F72204B 
 3361      70202020 
 3361      20202020 
 3362              		.align	2
 3363              	.LC527:
 3364 3f3c 54696C74 		.ascii	"Tilt Motor Kd                = \000"
 3364      204D6F74 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 106


 3364      6F72204B 
 3364      64202020 
 3364      20202020 
 3365              		.align	2
 3366              	.LC528:
 3367 3f5c 54696C74 		.ascii	"Tilt Motor Ki                = \000"
 3367      204D6F74 
 3367      6F72204B 
 3367      69202020 
 3367      20202020 
 3368              		.align	2
 3369              	.LC529:
 3370 3f7c 54696C74 		.ascii	"Tilt Motor Ksi               = \000"
 3370      204D6F74 
 3370      6F72204B 
 3370      73692020 
 3370      20202020 
 3371              		.align	2
 3372              	.LC530:
 3373 3f9c 54696C74 		.ascii	"Tilt Limit Control           = \000"
 3373      204C696D 
 3373      69742043 
 3373      6F6E7472 
 3373      6F6C2020 
 3374              		.align	2
 3375              	.LC531:
 3376 3fbc 4162736F 		.ascii	"Absolute Sensors\015\000"
 3376      6C757465 
 3376      2053656E 
 3376      736F7273 
 3376      0D00
 3377 3fce 0000     		.align	2
 3378              	.LC532:
 3379 3fd0 3D3D3D3D 		.ascii	"================\015\000"
 3379      3D3D3D3D 
 3379      3D3D3D3D 
 3379      3D3D3D3D 
 3379      0D00
 3380 3fe2 0000     		.align	2
 3381              	.LC533:
 3382 3fe4 50616E20 		.ascii	"Pan  Absolute sensor HOME    = \000"
 3382      20416273 
 3382      6F6C7574 
 3382      65207365 
 3382      6E736F72 
 3383              		.align	2
 3384              	.LC534:
 3385 4004 25366920 		.ascii	"%6i [ADC raw]    (invertion=%1d)\000"
 3385      5B414443 
 3385      20726177 
 3385      5D202020 
 3385      2028696E 
 3386 4025 000000   		.align	2
 3387              	.LC535:
 3388 4028 50616E20 		.ascii	"Pan  Absolute sensor LimitMAX= \000"
 3388      20416273 
 3388      6F6C7574 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 107


 3388      65207365 
 3388      6E736F72 
 3389              		.align	2
 3390              	.LC536:
 3391 4048 25366920 		.ascii	"%6i [ADC raw]\000"
 3391      5B414443 
 3391      20726177 
 3391      5D00
 3392 4056 0000     		.align	2
 3393              	.LC537:
 3394 4058 50616E20 		.ascii	"Pan  Absolute sensor Limitmin= \000"
 3394      20416273 
 3394      6F6C7574 
 3394      65207365 
 3394      6E736F72 
 3395              		.align	2
 3396              	.LC538:
 3397 4078 50616E20 		.ascii	"Pan  Absolute sensor Hyster. = \000"
 3397      20416273 
 3397      6F6C7574 
 3397      65207365 
 3397      6E736F72 
 3398              		.align	2
 3399              	.LC539:
 3400 4098 50616E20 		.ascii	"Pan  Absolute sensor Ratio   = \000"
 3400      20416273 
 3400      6F6C7574 
 3400      65207365 
 3400      6E736F72 
 3401              		.align	2
 3402              	.LC540:
 3403 40b8 25332E33 		.ascii	"%3.3f [step/lsb]\000"
 3403      66205B73 
 3403      7465702F 
 3403      6C73625D 
 3403      00
 3404 40c9 000000   		.align	2
 3405              	.LC541:
 3406 40cc 54696C74 		.ascii	"Tilt Absolute sensor HOME    = \000"
 3406      20416273 
 3406      6F6C7574 
 3406      65207365 
 3406      6E736F72 
 3407              		.align	2
 3408              	.LC542:
 3409 40ec 54696C74 		.ascii	"Tilt Absolute sensor LimitMAX= \000"
 3409      20416273 
 3409      6F6C7574 
 3409      65207365 
 3409      6E736F72 
 3410              		.align	2
 3411              	.LC543:
 3412 410c 54696C74 		.ascii	"Tilt Absolute sensor Limitmin= \000"
 3412      20416273 
 3412      6F6C7574 
 3412      65207365 
 3412      6E736F72 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 108


 3413              		.align	2
 3414              	.LC544:
 3415 412c 54696C74 		.ascii	"Tilt Absolute sensor Hyster. = \000"
 3415      20416273 
 3415      6F6C7574 
 3415      65207365 
 3415      6E736F72 
 3416              		.align	2
 3417              	.LC545:
 3418 414c 54696C74 		.ascii	"Tilt Absolute sensor Ratio   = \000"
 3418      20416273 
 3418      6F6C7574 
 3418      65207365 
 3418      6E736F72 
 3419              		.align	2
 3420              	.LC546:
 3421 416c 4D6F746F 		.ascii	"Motor Tuning\015\000"
 3421      72205475 
 3421      6E696E67 
 3421      0D00
 3422 417a 0000     		.align	2
 3423              	.LC547:
 3424 417c 3D3D3D3D 		.ascii	"============\015\000"
 3424      3D3D3D3D 
 3424      3D3D3D3D 
 3424      0D00
 3425 418a 0000     		.align	2
 3426              	.LC548:
 3427 418c 50616E20 		.ascii	"Pan  Motor Kopf              = \000"
 3427      204D6F74 
 3427      6F72204B 
 3427      6F706620 
 3427      20202020 
 3428              		.align	2
 3429              	.LC549:
 3430 41ac 20202041 		.ascii	"   AstimEN=%1u \000"
 3430      7374696D 
 3430      454E3D25 
 3430      31752000 
 3431              		.align	2
 3432              	.LC550:
 3433 41bc 50616E20 		.ascii	"Pan  Anaout GAIN             = \000"
 3433      20416E61 
 3433      6F757420 
 3433      4741494E 
 3433      20202020 
 3434              		.align	2
 3435              	.LC551:
 3436 41dc 50616E20 		.ascii	"Pan  AnaOut Signal (color)   = \000"
 3436      20416E61 
 3436      4F757420 
 3436      5369676E 
 3436      616C2028 
 3437              		.align	2
 3438              	.LC552:
 3439 41fc 54696C74 		.ascii	"Tilt Motor Kopf              = \000"
 3439      204D6F74 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 109


 3439      6F72204B 
 3439      6F706620 
 3439      20202020 
 3440              		.align	2
 3441              	.LC553:
 3442 421c 54696C74 		.ascii	"Tilt Anaout GAIN             = \000"
 3442      20416E61 
 3442      6F757420 
 3442      4741494E 
 3442      20202020 
 3443              		.align	2
 3444              	.LC554:
 3445 423c 54696C74 		.ascii	"Tilt AnaOut Signal (color)   = \000"
 3445      20416E61 
 3445      4F757420 
 3445      5369676E 
 3445      616C2028 
 3446              		.align	2
 3447              	.LC555:
 3448 425c 416E616F 		.ascii	"Anaout Selected Axis         = \000"
 3448      75742053 
 3448      656C6563 
 3448      74656420 
 3448      41786973 
 3449              		.align	2
 3450              	.LC556:
 3451 427c 41636365 		.ascii	"Accelerometer (100Hz)\015\000"
 3451      6C65726F 
 3451      6D657465 
 3451      72202831 
 3451      3030487A 
 3452 4293 00       		.align	2
 3453              	.LC557:
 3454 4294 3D3D3D3D 		.ascii	"=====================\015\000"
 3454      3D3D3D3D 
 3454      3D3D3D3D 
 3454      3D3D3D3D 
 3454      3D3D3D3D 
 3455 42ab 00       		.align	2
 3456              	.LC558:
 3457 42ac 62657461 		.ascii	"beta  (accelerometer LPF)    = \000"
 3457      20202861 
 3457      6363656C 
 3457      65726F6D 
 3457      65746572 
 3458              		.align	2
 3459              	.LC559:
 3460 42cc 25386620 		.ascii	"%8f (tau=%1.4f [msec])\000"
 3460      28746175 
 3460      3D25312E 
 3460      3466205B 
 3460      6D736563 
 3461 42e3 00       		.align	2
 3462              	.LC560:
 3463 42e4 20286663 		.ascii	" (fc=%1.4f [Hz])\015\012\000"
 3463      3D25312E 
 3463      3466205B 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 110


 3463      487A5D29 
 3463      0D0A00
 3464 42f7 00       		.align	2
 3465              	.LC561:
 3466 42f8 416E616C 		.ascii	"Analog Accel. X ADC Offset   = \000"
 3466      6F672041 
 3466      6363656C 
 3466      2E205820 
 3466      41444320 
 3467              		.align	2
 3468              	.LC562:
 3469 4318 25346420 		.ascii	"%4d [lsb]\000"
 3469      5B6C7362 
 3469      5D00
 3470 4322 0000     		.align	2
 3471              	.LC563:
 3472 4324 416E616C 		.ascii	"Analog Accel. Y ADC Offset   = \000"
 3472      6F672041 
 3472      6363656C 
 3472      2E205920 
 3472      41444320 
 3473              		.align	2
 3474              	.LC564:
 3475 4344 416E616C 		.ascii	"Analog Accel. Z ADC Offset   = \000"
 3475      6F672041 
 3475      6363656C 
 3475      2E205A20 
 3475      41444320 
 3476              		.align	2
 3477              	.LC565:
 3478 4364 42696B65 		.ascii	"Bike Frame IMU (1.5kHz)\015\000"
 3478      20467261 
 3478      6D652049 
 3478      4D552028 
 3478      312E356B 
 3479 437d 000000   		.align	2
 3480              	.LC566:
 3481 4380 3D3D3D3D 		.ascii	"=======================\015\000"
 3481      3D3D3D3D 
 3481      3D3D3D3D 
 3481      3D3D3D3D 
 3481      3D3D3D3D 
 3482 4399 000000   		.align	2
 3483              	.LC567:
 3484 439c 67616D6D 		.ascii	"gamma  (IMU LPF)             = \000"
 3484      61202028 
 3484      494D5520 
 3484      4C504629 
 3484      20202020 
 3485              		.align	2
 3486              	.LC568:
 3487 43bc 494D5520 		.ascii	"IMU Yaw angle invertion      = \000"
 3487      59617720 
 3487      616E676C 
 3487      6520696E 
 3487      76657274 
 3488              		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 111


 3489              	.LC569:
 3490 43dc 494D5520 		.ascii	"IMU Pitch angle invertion    = \000"
 3490      50697463 
 3490      6820616E 
 3490      676C6520 
 3490      696E7665 
 3491              		.align	2
 3492              	.LC570:
 3493 43fc 494D5520 		.ascii	"IMU Roll angle invertion     = \000"
 3493      526F6C6C 
 3493      20616E67 
 3493      6C652069 
 3493      6E766572 
 3494              		.align	2
 3495              	.LC571:
 3496 441c 494D5520 		.ascii	"IMU Pith and Roll exchange   = \000"
 3496      50697468 
 3496      20616E64 
 3496      20526F6C 
 3496      6C206578 
 3497              		.align	2
 3498              	.LC572:
 3499 443c 25317520 		.ascii	"%1u (0=true, 1=exchanged)\000"
 3499      28303D74 
 3499      7275652C 
 3499      20313D65 
 3499      78636861 
 3500 4456 0000     		.align	2
 3501              	.LC573:
 3502 4458 4576656E 		.ascii	"Events Parameters\015\000"
 3502      74732050 
 3502      6172616D 
 3502      65746572 
 3502      730D00
 3503 446b 00       		.align	2
 3504              	.LC574:
 3505 446c 3D3D3D3D 		.ascii	"=================\015\000"
 3505      3D3D3D3D 
 3505      3D3D3D3D 
 3505      3D3D3D3D 
 3505      3D0D00
 3506 447f 00       		.align	2
 3507              	.LC575:
 3508 4480 4A756D70 		.ascii	"Jump G Threshold             = \000"
 3508      20472054 
 3508      68726573 
 3508      686F6C64 
 3508      20202020 
 3509              		.align	2
 3510              	.LC576:
 3511 44a0 25386620 		.ascii	"%8f [g]\015\012\000"
 3511      5B675D0D 
 3511      0A00
 3512 44aa 0000     		.align	2
 3513              	.LC577:
 3514 44ac 41636365 		.ascii	"Acceleration G Threshold     = \000"
 3514      6C657261 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 112


 3514      74696F6E 
 3514      20472054 
 3514      68726573 
 3515              		.align	2
 3516              	.LC578:
 3517 44cc 636C7565 		.ascii	"cluexec\000"
 3517      78656300 
 3518              		.align	2
 3519              	.LC579:
 3520 44d4 434C5520 		.ascii	"CLU %2i START!\015\012\000"
 3520      25326920 
 3520      53544152 
 3520      54210D0A 
 3520      00
 3521 44e5 000000   		.align	2
 3522              	.LC580:
 3523 44e8 0D0A434C 		.ascii	"\015\012CLU %2i END!\015\012\000"
 3523      55202532 
 3523      6920454E 
 3523      44210D0A 
 3523      00
 3524 44f9 000000   		.align	2
 3525              	.LC581:
 3526 44fc 434C5520 		.ascii	"CLU not started: selected CLU is empty!\015\000"
 3526      6E6F7420 
 3526      73746172 
 3526      7465643A 
 3526      2073656C 
 3527 4525 000000   		.align	2
 3528              	.LC582:
 3529 4528 434C5520 		.ascii	"CLU not started: energize the Gobee before!\015\000"
 3529      6E6F7420 
 3529      73746172 
 3529      7465643A 
 3529      20656E65 
 3530 4555 000000   		.align	2
 3531              	.LC583:
 3532 4558 636C7573 		.ascii	"cluseq\000"
 3532      657100
 3533 455f 00       		.align	2
 3534              	.LC584:
 3535 4560 0D0A5573 		.ascii	"\015\012User Abort!\015\000"
 3535      65722041 
 3535      626F7274 
 3535      210D00
 3536 456f 00       		.align	2
 3537              	.LC585:
 3538 4570 0D0A434C 		.ascii	"\015\012CLU SEQUENCE END!\015\000"
 3538      55205345 
 3538      5155454E 
 3538      43452045 
 3538      4E44210D 
 3539 4585 000000   		.align	2
 3540              	.LC586:
 3541 4588 434C5553 		.ascii	"CLUSEQ not started: energize the Gobee before!\015\000"
 3541      4551206E 
 3541      6F742073 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 113


 3541      74617274 
 3541      65643A20 
 3542              		.align	2
 3543              	.LC587:
 3544 45b8 676F746F 		.ascii	"gotohome\000"
 3544      686F6D65 
 3544      00
 3545 45c1 000000   		.align	2
 3546              	.LC588:
 3547 45c4 676F746F 		.ascii	"gotoh\000"
 3547      6800
 3548 45ca 0000     		.align	2
 3549              	.LC589:
 3550 45cc 476F746F 		.ascii	"Goto Home Mover START!\015\000"
 3550      20486F6D 
 3550      65204D6F 
 3550      76657220 
 3550      53544152 
 3551              		.align	2
 3552              	.LC590:
 3553 45e4 0D0A476F 		.ascii	"\015\012Goto Home Mover END!\015\000"
 3553      746F2048 
 3553      6F6D6520 
 3553      4D6F7665 
 3553      7220454E 
 3554              		.align	2
 3555              	.LC591:
 3556 45fc 476F746F 		.ascii	"Goto Home Mover Not Started: energize the Gobee bef"
 3556      20486F6D 
 3556      65204D6F 
 3556      76657220 
 3556      4E6F7420 
 3557 462f 6F726521 		.ascii	"ore!\015\000"
 3557      0D00
 3558 4635 000000   		.align	2
 3559              	.LC592:
 3560 4638 676F746F 		.ascii	"gotoq\000"
 3560      7100
 3561 463e 0000     		.align	2
 3562              	.LC593:
 3563 4640 6700     		.ascii	"g\000"
 3564              		.global	__aeabi_fcmpge
 3565              		.global	__aeabi_fcmple
 3566              		.global	__aeabi_fcmpeq
 3567 4642 0000     		.align	2
 3568              	.LC594:
 3569 4644 476F746F 		.ascii	"Goto Q Mover START!\015\000"
 3569      2051204D 
 3569      6F766572 
 3569      20535441 
 3569      5254210D 
 3570 4659 000000   		.align	2
 3571              	.LC595:
 3572 465c 0D0A476F 		.ascii	"\015\012Goto Q Mover END!\015\000"
 3572      746F2051 
 3572      204D6F76 
 3572      65722045 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 114


 3572      4E44210D 
 3573 4671 000000   		.align	2
 3574              	.LC596:
 3575 4674 476F746F 		.ascii	"Goto Q Mover Not Started: QMemory %02d NOT ALLOCATE"
 3575      2051204D 
 3575      6F766572 
 3575      204E6F74 
 3575      20537461 
 3576 46a7 44210D0A 		.ascii	"D!\015\012\000"
 3576      00
 3577              		.align	2
 3578              	.LC597:
 3579 46ac 476F746F 		.ascii	"Goto Q Mover Not Started: energize the Gobee before"
 3579      2051204D 
 3579      6F766572 
 3579      204E6F74 
 3579      20537461 
 3580 46df 210D00   		.ascii	"!\015\000"
 3581 46e2 0000     		.align	2
 3582              	.LC598:
 3583 46e4 476F746F 		.ascii	"Goto Q Mover Not Started: Q maximum is 99!\015\000"
 3583      2051204D 
 3583      6F766572 
 3583      204E6F74 
 3583      20537461 
 3584              		.align	2
 3585              	.LC599:
 3586 4710 23455252 		.ascii	"#ERROR2: More parameters needed!\000"
 3586      4F52323A 
 3586      204D6F72 
 3586      65207061 
 3586      72616D65 
 3587 4731 000000   		.align	2
 3588              	.LC600:
 3589 4734 64697265 		.ascii	"director\000"
 3589      63746F72 
 3589      00
 3590 473d 000000   		.align	2
 3591              	.LC601:
 3592 4740 64697200 		.ascii	"dir\000"
 3593              		.align	2
 3594              	.LC602:
 3595 4744 2A20476F 		.ascii	"* Gobee Director Number setted to %2u: \000"
 3595      62656520 
 3595      44697265 
 3595      63746F72 
 3595      204E756D 
 3596              		.align	2
 3597              	.LC603:
 3598 476c 6D6F6465 		.ascii	"mode\000"
 3598      00
 3599 4771 000000   		.align	2
 3600              	.LC604:
 3601 4774 2A20476F 		.ascii	"* Gobee machine mode setted to %2u\000"
 3601      62656520 
 3601      6D616368 
 3601      696E6520 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 115


 3601      6D6F6465 
 3602 4797 00       		.align	2
 3603              	.LC605:
 3604 4798 706F6C61 		.ascii	"polarityp\000"
 3604      72697479 
 3604      7000
 3605 47a2 0000     		.align	2
 3606              	.LC606:
 3607 47a4 706F6C70 		.ascii	"polp\000"
 3607      00
 3608 47a9 000000   		.align	2
 3609              	.LC607:
 3610 47ac 2A205061 		.ascii	"* Pan Motor Polarity setted to %2u\000"
 3610      6E204D6F 
 3610      746F7220 
 3610      506F6C61 
 3610      72697479 
 3611 47cf 00       		.align	2
 3612              	.LC608:
 3613 47d0 706F6C61 		.ascii	"polarityt\000"
 3613      72697479 
 3613      7400
 3614 47da 0000     		.align	2
 3615              	.LC609:
 3616 47dc 706F6C74 		.ascii	"polt\000"
 3616      00
 3617 47e1 000000   		.align	2
 3618              	.LC610:
 3619 47e4 2A205469 		.ascii	"* Tilt Motor Polarity setted to %2u\000"
 3619      6C74204D 
 3619      6F746F72 
 3619      20506F6C 
 3619      61726974 
 3620              		.align	2
 3621              	.LC611:
 3622 4808 6C696D69 		.ascii	"limitcp\000"
 3622      74637000 
 3623              		.align	2
 3624              	.LC612:
 3625 4810 6C637000 		.ascii	"lcp\000"
 3626              		.align	2
 3627              	.LC613:
 3628 4814 2A205061 		.ascii	"* Pan Motor Limit Control setted to %2u\000"
 3628      6E204D6F 
 3628      746F7220 
 3628      4C696D69 
 3628      7420436F 
 3629              		.align	2
 3630              	.LC614:
 3631 483c 696E7661 		.ascii	"invabsp\000"
 3631      62737000 
 3632              		.align	2
 3633              	.LC615:
 3634 4844 696E7670 		.ascii	"invp\000"
 3634      00
 3635 4849 000000   		.align	2
 3636              	.LC616:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 116


 3637 484c 2A205061 		.ascii	"* Pan Absolute Sensor Invertion setted to %2u\015\012"
 3637      6E204162 
 3637      736F6C75 
 3637      74652053 
 3637      656E736F 
 3638 487b 00       		.ascii	"\000"
 3639              		.align	2
 3640              	.LC617:
 3641 487c 7A65726F 		.ascii	"zeroabsp\000"
 3641      61627370 
 3641      00
 3642 4885 000000   		.align	2
 3643              	.LC618:
 3644 4888 7A7000   		.ascii	"zp\000"
 3645 488b 00       		.align	2
 3646              	.LC619:
 3647 488c 2A205761 		.ascii	"* Warning! Put PAN Axis to zero (HOME) position and"
 3647      726E696E 
 3647      67212050 
 3647      75742050 
 3647      414E2041 
 3648 48bf 20707265 		.ascii	" press y!\000"
 3648      73732079 
 3648      2100
 3649 48c9 000000   		.align	2
 3650              	.LC620:
 3651 48cc 0D0A2A20 		.ascii	"\015\012* Statistics start!\015\000"
 3651      53746174 
 3651      69737469 
 3651      63732073 
 3651      74617274 
 3652 48e3 00       		.align	2
 3653              	.LC621:
 3654 48e4 2A205374 		.ascii	"* Statistics stop!\015\000"
 3654      61746973 
 3654      74696373 
 3654      2073746F 
 3654      70210D00 
 3655              		.align	2
 3656              	.LC622:
 3657 48f8 2A205061 		.ascii	"* Pan Absolute Sensor ZERO POSITION (HOME) setted t"
 3657      6E204162 
 3657      736F6C75 
 3657      74652053 
 3657      656E736F 
 3658 492b 6F20252B 		.ascii	"o %+6d [adc raw]\015\012\000"
 3658      3664205B 
 3658      61646320 
 3658      7261775D 
 3658      0D0A00
 3659 493e 0000     		.align	2
 3660              	.LC623:
 3661 4940 0D0A2A20 		.ascii	"\015\012* Pan Absolute Sensor position not sampled!"
 3661      50616E20 
 3661      4162736F 
 3661      6C757465 
 3661      2053656E 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 117


 3662 496d 0D00     		.ascii	"\015\000"
 3663 496f 00       		.align	2
 3664              	.LC624:
 3665 4970 6C696D69 		.ascii	"limitminp\000"
 3665      746D696E 
 3665      7000
 3666 497a 0000     		.align	2
 3667              	.LC625:
 3668 497c 6C6D696E 		.ascii	"lminp\000"
 3668      7000
 3669 4982 0000     		.align	2
 3670              	.LC626:
 3671 4984 2A205761 		.ascii	"* Warning! Put PAN Axis to limit MIN position and p"
 3671      726E696E 
 3671      67212050 
 3671      75742050 
 3671      414E2041 
 3672 49b7 72657373 		.ascii	"ress y!\000"
 3672      20792100 
 3673 49bf 00       		.align	2
 3674              	.LC627:
 3675 49c0 2A205061 		.ascii	"* Pan Absolute Sensor Limit MIN setted to %+6d [adc"
 3675      6E204162 
 3675      736F6C75 
 3675      74652053 
 3675      656E736F 
 3676 49f3 20726177 		.ascii	" raw]\015\012\000"
 3676      5D0D0A00 
 3677 49fb 00       		.align	2
 3678              	.LC628:
 3679 49fc 6C696D69 		.ascii	"limitmaxp\000"
 3679      746D6178 
 3679      7000
 3680 4a06 0000     		.align	2
 3681              	.LC629:
 3682 4a08 6C6D6178 		.ascii	"lmaxp\000"
 3682      7000
 3683 4a0e 0000     		.align	2
 3684              	.LC630:
 3685 4a10 2A205761 		.ascii	"* Warning! Put PAN Axis to limit MAX position and p"
 3685      726E696E 
 3685      67212050 
 3685      75742050 
 3685      414E2041 
 3686 4a43 72657373 		.ascii	"ress y!\000"
 3686      20792100 
 3687 4a4b 00       		.align	2
 3688              	.LC631:
 3689 4a4c 2A205061 		.ascii	"* Pan Absolute Sensor Limit MAX setted to %+6d [adc"
 3689      6E204162 
 3689      736F6C75 
 3689      74652053 
 3689      656E736F 
 3690 4a7f 20726177 		.ascii	" raw]\015\012\000"
 3690      5D0D0A00 
 3691 4a87 00       		.align	2
 3692              	.LC632:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 118


 3693 4a88 6C696D69 		.ascii	"limithystp\000"
 3693      74687973 
 3693      747000
 3694 4a93 00       		.align	2
 3695              	.LC633:
 3696 4a94 6C687973 		.ascii	"lhystp\000"
 3696      747000
 3697 4a9b 00       		.align	2
 3698              	.LC634:
 3699 4a9c 2A205061 		.ascii	"* Pan Absolute Sensor Limit Hysteresis setted to %+"
 3699      6E204162 
 3699      736F6C75 
 3699      74652053 
 3699      656E736F 
 3700 4acf 3664205B 		.ascii	"6d [adc raw]\015\012\000"
 3700      61646320 
 3700      7261775D 
 3700      0D0A00
 3701 4ade 0000     		.align	2
 3702              	.LC635:
 3703 4ae0 2A205061 		.ascii	"* Pan Encoder over Absolute Sensor ratio setted to "
 3703      6E20456E 
 3703      636F6465 
 3703      72206F76 
 3703      65722041 
 3704 4b13 252B322E 		.ascii	"%+2.6f [adc raw/step]\015\012\000"
 3704      3666205B 
 3704      61646320 
 3704      7261772F 
 3704      73746570 
 3705 4b2b 00       		.align	2
 3706              	.LC636:
 3707 4b2c 6C696D69 		.ascii	"limitct\000"
 3707      74637400 
 3708              		.align	2
 3709              	.LC637:
 3710 4b34 6C637400 		.ascii	"lct\000"
 3711              		.align	2
 3712              	.LC638:
 3713 4b38 2A205469 		.ascii	"* Tilt Motor Limit Control setted to %2u\000"
 3713      6C74204D 
 3713      6F746F72 
 3713      204C696D 
 3713      69742043 
 3714 4b61 000000   		.align	2
 3715              	.LC639:
 3716 4b64 696E7661 		.ascii	"invabst\000"
 3716      62737400 
 3717              		.align	2
 3718              	.LC640:
 3719 4b6c 696E7674 		.ascii	"invt\000"
 3719      00
 3720 4b71 000000   		.align	2
 3721              	.LC641:
 3722 4b74 2A205469 		.ascii	"* Tilt Absolute Sensor Invertion setted to %2u\015\012"
 3722      6C742041 
 3722      62736F6C 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 119


 3722      75746520 
 3722      53656E73 
 3723 4ba4 00       		.ascii	"\000"
 3724 4ba5 000000   		.align	2
 3725              	.LC642:
 3726 4ba8 7A65726F 		.ascii	"zeroabst\000"
 3726      61627374 
 3726      00
 3727 4bb1 000000   		.align	2
 3728              	.LC643:
 3729 4bb4 7A7400   		.ascii	"zt\000"
 3730 4bb7 00       		.align	2
 3731              	.LC644:
 3732 4bb8 2A205761 		.ascii	"* Warning! Put TILT Axis to zero (HOME) position an"
 3732      726E696E 
 3732      67212050 
 3732      75742054 
 3732      494C5420 
 3733 4beb 64207072 		.ascii	"d press y!\000"
 3733      65737320 
 3733      792100
 3734 4bf6 0000     		.align	2
 3735              	.LC645:
 3736 4bf8 2A205469 		.ascii	"* Tilt Absolute Sensor ZERO POSITION (HOME) setted "
 3736      6C742041 
 3736      62736F6C 
 3736      75746520 
 3736      53656E73 
 3737 4c2b 746F2025 		.ascii	"to %+6d [adc raw]\015\012\000"
 3737      2B366420 
 3737      5B616463 
 3737      20726177 
 3737      5D0D0A00 
 3738 4c3f 00       		.align	2
 3739              	.LC646:
 3740 4c40 0D0A2A20 		.ascii	"\015\012* Tilt Absolute Sensor position not sampled"
 3740      54696C74 
 3740      20416273 
 3740      6F6C7574 
 3740      65205365 
 3741 4c6d 210D00   		.ascii	"!\015\000"
 3742              		.align	2
 3743              	.LC647:
 3744 4c70 6C696D69 		.ascii	"limitmint\000"
 3744      746D696E 
 3744      7400
 3745 4c7a 0000     		.align	2
 3746              	.LC648:
 3747 4c7c 6C6D696E 		.ascii	"lmint\000"
 3747      7400
 3748 4c82 0000     		.align	2
 3749              	.LC649:
 3750 4c84 2A205761 		.ascii	"* Warning! Put TILT Axis to limit MIN position and "
 3750      726E696E 
 3750      67212050 
 3750      75742054 
 3750      494C5420 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 120


 3751 4cb7 70726573 		.ascii	"press y!\000"
 3751      73207921 
 3751      00
 3752              		.align	2
 3753              	.LC650:
 3754 4cc0 2A205469 		.ascii	"* Tilt Absolute Sensor Limit MIN setted to %+6d [ad"
 3754      6C742041 
 3754      62736F6C 
 3754      75746520 
 3754      53656E73 
 3755 4cf3 63207261 		.ascii	"c raw]\015\012\000"
 3755      775D0D0A 
 3755      00
 3756              		.align	2
 3757              	.LC651:
 3758 4cfc 6C696D69 		.ascii	"limitmaxt\000"
 3758      746D6178 
 3758      7400
 3759 4d06 0000     		.align	2
 3760              	.LC652:
 3761 4d08 6C6D6178 		.ascii	"lmaxt\000"
 3761      7400
 3762 4d0e 0000     		.align	2
 3763              	.LC653:
 3764 4d10 2A205761 		.ascii	"* Warning! Put TILT Axis to limit MAX position and "
 3764      726E696E 
 3764      67212050 
 3764      75742054 
 3764      494C5420 
 3765 4d43 70726573 		.ascii	"press y!\000"
 3765      73207921 
 3765      00
 3766              		.align	2
 3767              	.LC654:
 3768 4d4c 2A205469 		.ascii	"* Tilt Absolute Sensor Limit MAX setted to %+6d [ad"
 3768      6C742041 
 3768      62736F6C 
 3768      75746520 
 3768      53656E73 
 3769 4d7f 63207261 		.ascii	"c raw]\015\012\000"
 3769      775D0D0A 
 3769      00
 3770              		.align	2
 3771              	.LC655:
 3772 4d88 6C696D69 		.ascii	"limithystt\000"
 3772      74687973 
 3772      747400
 3773 4d93 00       		.align	2
 3774              	.LC656:
 3775 4d94 6C687973 		.ascii	"lhystt\000"
 3775      747400
 3776 4d9b 00       		.align	2
 3777              	.LC657:
 3778 4d9c 2A205469 		.ascii	"* Tilt Absolute Sensor Limit Hysteresis setted to %"
 3778      6C742041 
 3778      62736F6C 
 3778      75746520 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 121


 3778      53656E73 
 3779 4dcf 2B366420 		.ascii	"+6d [adc raw]\015\012\000"
 3779      5B616463 
 3779      20726177 
 3779      5D0D0A00 
 3780 4ddf 00       		.align	2
 3781              	.LC658:
 3782 4de0 2A205469 		.ascii	"* Tilt Encoder over Absolute Sensor ratio setted to"
 3782      6C742045 
 3782      6E636F64 
 3782      6572206F 
 3782      76657220 
 3783 4e13 20252B32 		.ascii	" %+2.6f [adc raw/step]\015\012\000"
 3783      2E366620 
 3783      5B616463 
 3783      20726177 
 3783      2F737465 
 3784              		.align	2
 3785              	.LC659:
 3786 4e2c 696D7569 		.ascii	"imuinvyaw\000"
 3786      6E767961 
 3786      7700
 3787 4e36 0000     		.align	2
 3788              	.LC660:
 3789 4e38 696D7579 		.ascii	"imuy\000"
 3789      00
 3790 4e3d 000000   		.align	2
 3791              	.LC661:
 3792 4e40 2A20496E 		.ascii	"* Invertion Yaw setted to %1u\015\012\000"
 3792      76657274 
 3792      696F6E20 
 3792      59617720 
 3792      73657474 
 3793              		.align	2
 3794              	.LC662:
 3795 4e60 696D7569 		.ascii	"imuinvpitch\000"
 3795      6E767069 
 3795      74636800 
 3796              		.align	2
 3797              	.LC663:
 3798 4e6c 696D7570 		.ascii	"imup\000"
 3798      00
 3799 4e71 000000   		.align	2
 3800              	.LC664:
 3801 4e74 2A20496E 		.ascii	"* Invertion Pitch setted to %1u\015\012\000"
 3801      76657274 
 3801      696F6E20 
 3801      50697463 
 3801      68207365 
 3802 4e96 0000     		.align	2
 3803              	.LC665:
 3804 4e98 696D7569 		.ascii	"imuinvroll\000"
 3804      6E76726F 
 3804      6C6C00
 3805 4ea3 00       		.align	2
 3806              	.LC666:
 3807 4ea4 696D7572 		.ascii	"imur\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 122


 3807      00
 3808 4ea9 000000   		.align	2
 3809              	.LC667:
 3810 4eac 2A20496E 		.ascii	"* Invertion Roll setted to %1u\015\012\000"
 3810      76657274 
 3810      696F6E20 
 3810      526F6C6C 
 3810      20736574 
 3811 4ecd 000000   		.align	2
 3812              	.LC668:
 3813 4ed0 70726578 		.ascii	"prexchange\000"
 3813      6368616E 
 3813      676500
 3814 4edb 00       		.align	2
 3815              	.LC669:
 3816 4edc 70726578 		.ascii	"prex\000"
 3816      00
 3817 4ee1 000000   		.align	2
 3818              	.LC670:
 3819 4ee4 2A204578 		.ascii	"* Exchange Pitch Roll setted to %1u\015\012\000"
 3819      6368616E 
 3819      67652050 
 3819      69746368 
 3819      20526F6C 
 3820 4f0a 0000     		.align	2
 3821              	.LC671:
 3822 4f0c 636C6561 		.ascii	"clear\000"
 3822      7200
 3823 4f12 0000     		.align	2
 3824              	.LC672:
 3825 4f14 6300     		.ascii	"c\000"
 3826 4f16 0000     		.align	2
 3827              	.LC673:
 3828 4f18 0D0A2A20 		.ascii	"\015\012* Q%02d element (shot) Cleared!\015\012\000"
 3828      51253032 
 3828      6420656C 
 3828      656D656E 
 3828      74202873 
 3829              		.align	2
 3830              	.LC674:
 3831 4f3c 23455252 		.ascii	"#ERROR7: EEPROM row out of bounds!\000"
 3831      4F52373A 
 3831      20454550 
 3831      524F4D20 
 3831      726F7720 
 3832 4f5f 00       		.align	2
 3833              	.LC675:
 3834 4f60 0D0A2A20 		.ascii	"\015\012* Nothing to clear: Q element is not alloca"
 3834      4E6F7468 
 3834      696E6720 
 3834      746F2063 
 3834      6C656172 
 3835 4f8d 74656421 		.ascii	"ted!\015\000"
 3835      0D00
 3836 4f93 00       		.align	2
 3837              	.LC676:
 3838 4f94 2A205761 		.ascii	"* Warning! Put All Axes to desired position and pre"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 123


 3838      726E696E 
 3838      67212050 
 3838      75742041 
 3838      6C6C2041 
 3839 4fc7 73732079 		.ascii	"ss y!\000"
 3839      2100
 3840 4fcd 000000   		.align	2
 3841              	.LC677:
 3842 4fd0 0D0A2A20 		.ascii	"\015\012* Q%02d element (shot) ABS position setted "
 3842      51253032 
 3842      6420656C 
 3842      656D656E 
 3842      74202873 
 3843 4ffd 746F3A20 		.ascii	"to: pan=%+ld [step]   tilt=%+ld [step] and saved to"
 3843      70616E3D 
 3843      252B6C64 
 3843      205B7374 
 3843      65705D20 
 3844 5030 204D656D 		.ascii	" Memory%2d\015\012\000"
 3844      6F727925 
 3844      32640D0A 
 3844      00
 3845 503d 000000   		.align	2
 3846              	.LC678:
 3847 5040 0D0A2A20 		.ascii	"\015\012* Q element (shot) position not sampled!\015"
 3847      5120656C 
 3847      656D656E 
 3847      74202873 
 3847      686F7429 
 3848 506b 00       		.ascii	"\000"
 3849              		.align	2
 3850              	.LC679:
 3851 506c 6B707000 		.ascii	"kpp\000"
 3852              		.align	2
 3853              	.LC680:
 3854 5070 2A205061 		.ascii	"* Pan Motor Kp setted to %1.4f\000"
 3854      6E204D6F 
 3854      746F7220 
 3854      4B702073 
 3854      65747465 
 3855 508f 00       		.align	2
 3856              	.LC681:
 3857 5090 6B707400 		.ascii	"kpt\000"
 3858              		.align	2
 3859              	.LC682:
 3860 5094 2A205469 		.ascii	"* Tilt Motor Kp setted to %1.4f\000"
 3860      6C74204D 
 3860      6F746F72 
 3860      204B7020 
 3860      73657474 
 3861              		.align	2
 3862              	.LC683:
 3863 50b4 6B647000 		.ascii	"kdp\000"
 3864              		.align	2
 3865              	.LC684:
 3866 50b8 2A205061 		.ascii	"* Pan Motor Kd setted to %1.4f\000"
 3866      6E204D6F 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 124


 3866      746F7220 
 3866      4B642073 
 3866      65747465 
 3867 50d7 00       		.align	2
 3868              	.LC685:
 3869 50d8 6B647400 		.ascii	"kdt\000"
 3870              		.align	2
 3871              	.LC686:
 3872 50dc 2A205469 		.ascii	"* Tilt Motor Kd setted to %1.4f\000"
 3872      6C74204D 
 3872      6F746F72 
 3872      204B6420 
 3872      73657474 
 3873              		.align	2
 3874              	.LC687:
 3875 50fc 6B697000 		.ascii	"kip\000"
 3876              		.align	2
 3877              	.LC688:
 3878 5100 2A205061 		.ascii	"* Pan Motor Ki setted to %1.4f\000"
 3878      6E204D6F 
 3878      746F7220 
 3878      4B692073 
 3878      65747465 
 3879 511f 00       		.align	2
 3880              	.LC689:
 3881 5120 6B697400 		.ascii	"kit\000"
 3882              		.align	2
 3883              	.LC690:
 3884 5124 2A205469 		.ascii	"* Tilt Motor Ki setted to %1.4f\000"
 3884      6C74204D 
 3884      6F746F72 
 3884      204B6920 
 3884      73657474 
 3885              		.align	2
 3886              	.LC691:
 3887 5144 6B736970 		.ascii	"ksip\000"
 3887      00
 3888 5149 000000   		.align	2
 3889              	.LC692:
 3890 514c 2A205061 		.ascii	"* Pan Motor Ksi setted to %1.4f\000"
 3890      6E204D6F 
 3890      746F7220 
 3890      4B736920 
 3890      73657474 
 3891              		.align	2
 3892              	.LC693:
 3893 516c 6B736974 		.ascii	"ksit\000"
 3893      00
 3894 5171 000000   		.align	2
 3895              	.LC694:
 3896 5174 2A205469 		.ascii	"* Tilt Motor Ksi setted to %1.4f\000"
 3896      6C74204D 
 3896      6F746F72 
 3896      204B7369 
 3896      20736574 
 3897 5195 000000   		.align	2
 3898              	.LC695:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 125


 3899 5198 616E616F 		.ascii	"anaoutaxis\000"
 3899      75746178 
 3899      697300
 3900 51a3 00       		.align	2
 3901              	.LC696:
 3902 51a4 61617869 		.ascii	"aaxis\000"
 3902      7300
 3903 51aa 0000     		.align	2
 3904              	.LC697:
 3905 51ac 70616E00 		.ascii	"pan\000"
 3906              		.align	2
 3907              	.LC698:
 3908 51b0 74696C74 		.ascii	"tilt\000"
 3908      00
 3909 51b5 000000   		.align	2
 3910              	.LC699:
 3911 51b8 2A20416E 		.ascii	"* Anaout Axis setted to PAN\015\000"
 3911      616F7574 
 3911      20417869 
 3911      73207365 
 3911      74746564 
 3912 51d5 000000   		.align	2
 3913              	.LC700:
 3914 51d8 2A20414E 		.ascii	"* ANAPOS ZERO!\015\000"
 3914      41504F53 
 3914      205A4552 
 3914      4F210D00 
 3915              		.align	2
 3916              	.LC701:
 3917 51e8 2A20416E 		.ascii	"* Anaout Axis setted to TILT\015\000"
 3917      616F7574 
 3917      20417869 
 3917      73207365 
 3917      74746564 
 3918 5206 0000     		.align	2
 3919              	.LC702:
 3920 5208 23455252 		.ascii	"#ERROR6: Axis may be [pan,tilt]!\000"
 3920      4F52363A 
 3920      20417869 
 3920      73206D61 
 3920      79206265 
 3921 5229 000000   		.align	2
 3922              	.LC703:
 3923 522c 636F6C6F 		.ascii	"colorp\000"
 3923      727000
 3924 5233 00       		.align	2
 3925              	.LC704:
 3926 5234 2A205061 		.ascii	"* Pan Motor Analog Output Color setted to \000"
 3926      6E204D6F 
 3926      746F7220 
 3926      416E616C 
 3926      6F67204F 
 3927 525f 00       		.align	2
 3928              	.LC705:
 3929 5260 636F6C6F 		.ascii	"colort\000"
 3929      727400
 3930 5267 00       		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 126


 3931              	.LC706:
 3932 5268 2A205469 		.ascii	"* Tilt Motor Analog Output Color setted to \000"
 3932      6C74204D 
 3932      6F746F72 
 3932      20416E61 
 3932      6C6F6720 
 3933              		.align	2
 3934              	.LC707:
 3935 5294 6B6F7066 		.ascii	"kopfp\000"
 3935      7000
 3936 529a 0000     		.align	2
 3937              	.LC708:
 3938 529c 2A205061 		.ascii	"* Pan Motor Kopf setted to %1.4f\000"
 3938      6E204D6F 
 3938      746F7220 
 3938      4B6F7066 
 3938      20736574 
 3939 52bd 000000   		.align	2
 3940              	.LC709:
 3941 52c0 6B6F7066 		.ascii	"kopft\000"
 3941      7400
 3942 52c6 0000     		.align	2
 3943              	.LC710:
 3944 52c8 2A205469 		.ascii	"* Tilt Motor Kopf setted to %1.4f\000"
 3944      6C74204D 
 3944      6F746F72 
 3944      204B6F70 
 3944      66207365 
 3945 52ea 0000     		.align	2
 3946              	.LC711:
 3947 52ec 61676169 		.ascii	"againp\000"
 3947      6E7000
 3948 52f3 00       		.align	2
 3949              	.LC712:
 3950 52f4 2A205061 		.ascii	"* Pan Motor Analog Output Gain setted to %1.4f\000"
 3950      6E204D6F 
 3950      746F7220 
 3950      416E616C 
 3950      6F67204F 
 3951 5323 00       		.align	2
 3952              	.LC713:
 3953 5324 61676169 		.ascii	"againt\000"
 3953      6E7400
 3954 532b 00       		.align	2
 3955              	.LC714:
 3956 532c 2A205469 		.ascii	"* Tilt Motor Analog Output Gain setted to %1.4f\000"
 3956      6C74204D 
 3956      6F746F72 
 3956      20416E61 
 3956      6C6F6720 
 3957              		.align	2
 3958              	.LC715:
 3959 535c 61616378 		.ascii	"aacxoffset\000"
 3959      6F666673 
 3959      657400
 3960 5367 00       		.align	2
 3961              	.LC716:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 127


 3962 5368 61616378 		.ascii	"aacxof\000"
 3962      6F6600
 3963 536f 00       		.align	2
 3964              	.LC717:
 3965 5370 2A20416E 		.ascii	"* Analog Accel. X Axis ADC Offset setted to %4i\000"
 3965      616C6F67 
 3965      20416363 
 3965      656C2E20 
 3965      58204178 
 3966              		.align	2
 3967              	.LC718:
 3968 53a0 61616379 		.ascii	"aacyoffset\000"
 3968      6F666673 
 3968      657400
 3969 53ab 00       		.align	2
 3970              	.LC719:
 3971 53ac 61616379 		.ascii	"aacyof\000"
 3971      6F6600
 3972 53b3 00       		.align	2
 3973              	.LC720:
 3974 53b4 2A20416E 		.ascii	"* Analog Accel. Y Axis ADC Offset setted to %4i\000"
 3974      616C6F67 
 3974      20416363 
 3974      656C2E20 
 3974      59204178 
 3975              		.align	2
 3976              	.LC721:
 3977 53e4 6161637A 		.ascii	"aaczoffset\000"
 3977      6F666673 
 3977      657400
 3978 53ef 00       		.align	2
 3979              	.LC722:
 3980 53f0 6161637A 		.ascii	"aaczof\000"
 3980      6F6600
 3981 53f7 00       		.align	2
 3982              	.LC723:
 3983 53f8 2A20416E 		.ascii	"* Analog Accel. Z Axis ADC Offset setted to %4i\000"
 3983      616C6F67 
 3983      20416363 
 3983      656C2E20 
 3983      5A204178 
 3984              		.align	2
 3985              	.LC724:
 3986 5428 62657461 		.ascii	"beta\000"
 3986      00
 3987 542d 000000   		.align	2
 3988              	.LC725:
 3989 5430 2A206265 		.ascii	"* beta (accelerometer LPF) setted to %+1.9f\000"
 3989      74612028 
 3989      61636365 
 3989      6C65726F 
 3989      6D657465 
 3990              		.align	2
 3991              	.LC726:
 3992 545c 67616D6D 		.ascii	"gamma\000"
 3992      6100
 3993 5462 0000     		.align	2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 128


 3994              	.LC727:
 3995 5464 2A206761 		.ascii	"* gamma (IMU LPF) setted to %+1.9f\000"
 3995      6D6D6120 
 3995      28494D55 
 3995      204C5046 
 3995      29207365 
 3996 5487 00       		.align	2
 3997              	.LC728:
 3998 5488 6A756D70 		.ascii	"jumpth\000"
 3998      746800
 3999 548f 00       		.align	2
 4000              	.LC729:
 4001 5490 2A204A75 		.ascii	"* Jump G Threshold setted to %+1.4f[g]\000"
 4001      6D702047 
 4001      20546872 
 4001      6573686F 
 4001      6C642073 
 4002 54b7 00       		.align	2
 4003              	.LC730:
 4004 54b8 61636374 		.ascii	"accth\000"
 4004      6800
 4005 54be 0000     		.align	2
 4006              	.LC731:
 4007 54c0 2A204163 		.ascii	"* Acceleration G Threshold setted to %+1.4f[g]\000"
 4007      63656C65 
 4007      72617469 
 4007      6F6E2047 
 4007      20546872 
 4008 54ef 00       		.align	2
 4009              	.LC732:
 4010 54f0 61737479 		.ascii	"astype\000"
 4010      706500
 4011 54f7 00       		.align	2
 4012              	.LC733:
 4013 54f8 61737469 		.ascii	"astimtype\000"
 4013      6D747970 
 4013      6500
 4014 5502 0000     		.align	2
 4015              	.LC734:
 4016 5504 2A205061 		.ascii	"* Pan  Astim Type setted to %1u\015\012\000"
 4016      6E202041 
 4016      7374696D 
 4016      20547970 
 4016      65207365 
 4017 5526 0000     		.align	2
 4018              	.LC735:
 4019 5528 2A205469 		.ascii	"* Tilt Astim Type setted to %1u\015\012\000"
 4019      6C742041 
 4019      7374696D 
 4019      20547970 
 4019      65207365 
 4020 554a 0000     		.align	2
 4021              	.LC736:
 4022 554c 53696E65 		.ascii	"Sine Wave Astim Started!\015\000"
 4022      20576176 
 4022      65204173 
 4022      74696D20 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 129


 4022      53746172 
 4023 5566 0000     		.align	2
 4024              	.LC737:
 4025 5568 54726961 		.ascii	"Triangle Wave Astim Started!\015\000"
 4025      6E676C65 
 4025      20576176 
 4025      65204173 
 4025      74696D20 
 4026 5586 0000     		.align	2
 4027              	.LC738:
 4028 5588 53717561 		.ascii	"Square Wave Astim Started!\015\000"
 4028      72652057 
 4028      61766520 
 4028      41737469 
 4028      6D205374 
 4029              		.align	2
 4030              	.LC739:
 4031 55a4 57617665 		.ascii	"Wave Astim Stopped!\015\000"
 4031      20417374 
 4031      696D2053 
 4031      746F7070 
 4031      6564210D 
 4032 55b9 000000   		.align	2
 4033              	.LC740:
 4034 55bc 61737469 		.ascii	"astimp\000"
 4034      6D7000
 4035 55c3 00       		.align	2
 4036              	.LC741:
 4037 55c4 44414E47 		.ascii	"DANGER!!! THIS COMMAND MAY PRODUCE LARGE MOVEMENTS!"
 4037      45522121 
 4037      21205448 
 4037      49532043 
 4037      4F4D4D41 
 4038 55f7 21210D00 		.ascii	"!!\015\000"
 4039 55fb 00       		.align	2
 4040              	.LC742:
 4041 55fc 41726520 		.ascii	"Are you sure to apply auto-stimulus [Y/N]?\000"
 4041      796F7520 
 4041      73757265 
 4041      20746F20 
 4041      6170706C 
 4042 5627 00       		.align	2
 4043              	.LC743:
 4044 5628 2A205061 		.ascii	"* Pan Astim Enable setted to %1u\015\012\000"
 4044      6E204173 
 4044      74696D20 
 4044      456E6162 
 4044      6C652073 
 4045 564b 00       		.align	2
 4046              	.LC744:
 4047 564c 61737469 		.ascii	"astimt\000"
 4047      6D7400
 4048 5653 00       		.align	2
 4049              	.LC745:
 4050 5654 2A205469 		.ascii	"* Tilt Astim Enable setted to %1u\015\012\000"
 4050      6C742041 
 4050      7374696D 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 130


 4050      20456E61 
 4050      626C6520 
 4051              		.align	2
 4052              	.LC746:
 4053 5678 23455252 		.ascii	"#ERROR4: Bad command!\000"
 4053      4F52343A 
 4053      20426164 
 4053      20636F6D 
 4053      6D616E64 
 4054 568e 0000     		.section	.text.parser,"ax",%progbits
 4055              		.align	2
 4056              		.global	parser
 4057              		.thumb
 4058              		.thumb_func
 4059              		.type	parser, %function
 4060              	parser:
 4061              	.LFB69:
 685:.\console.c   **** 
 686:.\console.c   **** 
 687:.\console.c   **** 
 688:.\console.c   **** 
 689:.\console.c   **** // ************************************************************************
 690:.\console.c   **** // *** PARSERIZER (pass 3 of 3)										    ***
 691:.\console.c   **** // ************************************************************************
 692:.\console.c   **** uint8 parser()
 693:.\console.c   **** {
 4062              		.loc 1 693 0
 4063              		.cfi_startproc
 4064              		@ args = 0, pretend = 0, frame = 280
 4065              		@ frame_needed = 1, uses_anonymous_args = 0
 4066 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4067              	.LCFI37:
 4068              		.cfi_def_cfa_offset 36
 4069              		.cfi_offset 4, -36
 4070              		.cfi_offset 5, -32
 4071              		.cfi_offset 6, -28
 4072              		.cfi_offset 7, -24
 4073              		.cfi_offset 8, -20
 4074              		.cfi_offset 9, -16
 4075              		.cfi_offset 10, -12
 4076              		.cfi_offset 11, -8
 4077              		.cfi_offset 14, -4
 4078 0004 D3B0     		sub	sp, sp, #332
 4079              	.LCFI38:
 4080              		.cfi_def_cfa_offset 368
 4081 0006 0CAF     		add	r7, sp, #48
 4082              	.LCFI39:
 4083              		.cfi_def_cfa 7, 320
 694:.\console.c   **** 	uint8 scanstat __attribute__ ((unused));
 695:.\console.c   **** 	
 696:.\console.c   **** 	uint8 director;			/* Director local								*/
 697:.\console.c   **** 	uint8 mode_loc;			/* Machine mode local							*/
 698:.\console.c   **** 	float beta=0;			/* beta local									*/	
 4084              		.loc 1 698 0
 4085 0008 4FF00003 		mov	r3, #0
 4086 000c C7F8F830 		str	r3, [r7, #248]	@ float
 699:.\console.c   **** 	float gamma=0;			/* gamma local									*/
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 131


 4087              		.loc 1 699 0
 4088 0010 4FF00003 		mov	r3, #0
 4089 0014 C7F8F430 		str	r3, [r7, #244]	@ float
 700:.\console.c   **** 	uint8 polarity=0;		/* Motor Polarity local							*/
 4090              		.loc 1 700 0
 4091 0018 4FF00003 		mov	r3, #0
 4092 001c 87F8F330 		strb	r3, [r7, #243]
 701:.\console.c   **** 	uint8 invertion=0;		/* IMU Invertion local							*/
 4093              		.loc 1 701 0
 4094 0020 4FF00003 		mov	r3, #0
 4095 0024 87F8F230 		strb	r3, [r7, #242]
 702:.\console.c   **** 	uint8 exchange=0;		/* IMU Exchange local							*/
 4096              		.loc 1 702 0
 4097 0028 4FF00003 		mov	r3, #0
 4098 002c 87F8F130 		strb	r3, [r7, #241]
 703:.\console.c   **** 	int16 offset=0;			/* generic int16 Offset							*/
 4099              		.loc 1 703 0
 4100 0030 4FF00003 		mov	r3, #0
 4101 0034 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 704:.\console.c   **** 	
 705:.\console.c   **** 	float Kp;				/* Kp local										*/
 706:.\console.c   **** 	float Kd;				/* Kd local										*/	
 707:.\console.c   **** 	float Ki;				/* Ki local										*/
 708:.\console.c   **** 	float Ksi;				/* Ksi local									*/	
 709:.\console.c   **** 	uint8 limit_control;	/* Limit Control local							*/
 710:.\console.c   **** 	uint8 raw_invertion;	/* raw invertion local							*/
 711:.\console.c   **** 	uint16 raw_limit_hyst; 	/* raw limit hysteresis local 					*/
 712:.\console.c   **** 	float step_abs_ratio;	/* encoder step/absolute sensor ratio local		*/
 713:.\console.c   **** 	float Kopf;				/* Kopf local									*/	
 714:.\console.c   **** 	float anaout_gain;		/* Analog Output Gain local						*/
 715:.\console.c   **** 	uint8 color;			/* color local									*/
 716:.\console.c   **** 	uint8 astim_type=0;		/* astim type loc								*/
 4102              		.loc 1 716 0
 4103 0038 4FF00003 		mov	r3, #0
 4104 003c 87F8ED30 		strb	r3, [r7, #237]
 717:.\console.c   **** 	uint8 astim_enable=0;	/* astim enable loc 							*/
 4105              		.loc 1 717 0
 4106 0040 4FF00003 		mov	r3, #0
 4107 0044 87F8EC30 		strb	r3, [r7, #236]
 718:.\console.c   **** 	uint8 path_n=0;			/* path number local							*/
 4108              		.loc 1 718 0
 4109 0048 4FF00003 		mov	r3, #0
 4110 004c 87F8EB30 		strb	r3, [r7, #235]
 719:.\console.c   **** 	uint8 clu_number=0;		/* clu number local								*/
 4111              		.loc 1 719 0
 4112 0050 4FF00003 		mov	r3, #0
 4113 0054 87F8EA30 		strb	r3, [r7, #234]
 720:.\console.c   **** 	uint8 clu_pause=0;		/* clu pause local								*/	
 4114              		.loc 1 720 0
 4115 0058 4FF00003 		mov	r3, #0
 4116 005c 87F8E930 		strb	r3, [r7, #233]
 721:.\console.c   **** 	uint16 memory_number=0;	/* memory number local							*/
 4117              		.loc 1 721 0
 4118 0060 4FF00003 		mov	r3, #0
 4119 0064 A7F8E630 		strh	r3, [r7, #230]	@ movhi
 722:.\console.c   **** 	uint8 q_number=0;		/* q number local								*/	
 4120              		.loc 1 722 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 132


 4121 0068 4FF00003 		mov	r3, #0
 4122 006c 87F8E530 		strb	r3, [r7, #229]
 723:.\console.c   **** 	float time_loc=0;		/* time float local								*/
 4123              		.loc 1 723 0
 4124 0070 4FF00003 		mov	r3, #0
 4125 0074 C7F81431 		str	r3, [r7, #276]	@ float
 724:.\console.c   **** 	float jump_g_th=0;		/* jump G threshold local						*/
 4126              		.loc 1 724 0
 4127 0078 4FF00003 		mov	r3, #0
 4128 007c C7F8E030 		str	r3, [r7, #224]	@ float
 725:.\console.c   **** 	float acc_g_th=0;		/* acceleration G threshold local				*/
 4129              		.loc 1 725 0
 4130 0080 4FF00003 		mov	r3, #0
 4131 0084 C7F8DC30 		str	r3, [r7, #220]	@ float
 726:.\console.c   **** 	
 727:.\console.c   **** 
 728:.\console.c   **** 	uint8 dummy __attribute__ ((unused));
 729:.\console.c   **** 	uint8 idx=0;
 4132              		.loc 1 729 0
 4133 0088 4FF00003 		mov	r3, #0
 4134 008c 87F81331 		strb	r3, [r7, #275]
 730:.\console.c   **** 	uint8 get_key=0;
 4135              		.loc 1 730 0
 4136 0090 4FF00003 		mov	r3, #0
 4137 0094 87F81231 		strb	r3, [r7, #274]
 731:.\console.c   **** 
 732:.\console.c   **** 	
 733:.\console.c   **** 	/* Scanner */
 734:.\console.c   **** 	scanstat = scanner2(VERBOSE_OFF);
 4138              		.loc 1 734 0
 4139 0098 4FF00000 		mov	r0, #0
 4140 009c FFF7FEFF 		bl	scanner2
 4141 00a0 0346     		mov	r3, r0
 4142 00a2 87F8DB30 		strb	r3, [r7, #219]
 735:.\console.c   **** 
 736:.\console.c   **** 	
 737:.\console.c   **** 	//=====================================================================//
 738:.\console.c   **** 	//=== COMMANDS PARSING 												===//
 739:.\console.c   **** 	//=====================================================================//
 740:.\console.c   **** 
 741:.\console.c   **** 	/* CMD 'BOOT' */	
 742:.\console.c   **** 	if (strcmp(actual_cmd.action, "boot") == 0)
 4143              		.loc 1 742 0
 4144 00a6 40F20000 		movw	r0, #:lower16:actual_cmd
 4145 00aa C0F20000 		movt	r0, #:upper16:actual_cmd
 4146 00ae 40F20001 		movw	r1, #:lower16:.LC78
 4147 00b2 C0F20001 		movt	r1, #:upper16:.LC78
 4148 00b6 FFF7FEFF 		bl	strcmp
 4149 00ba 0346     		mov	r3, r0
 4150 00bc 002B     		cmp	r3, #0
 4151 00be 2CD1     		bne	.L127
 743:.\console.c   **** 	{
 744:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4152              		.loc 1 744 0
 4153 00c0 DC4B     		ldr	r3, .L719
 4154 00c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4155 00c4 002B     		cmp	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 133


 4156 00c6 20D1     		bne	.L128
 745:.\console.c   **** 		{
 746:.\console.c   **** 			printf("\r\nAre you sure to start Bootload [Y/N]?");		
 4157              		.loc 1 746 0
 4158 00c8 40F20000 		movw	r0, #:lower16:.LC79
 4159 00cc C0F20000 		movt	r0, #:upper16:.LC79
 4160 00d0 FFF7FEFF 		bl	printf
 747:.\console.c   **** 			if (ButtonYNChoice(ECHO_OFF) == _YES)
 4161              		.loc 1 747 0
 4162 00d4 4FF00000 		mov	r0, #0
 4163 00d8 FFF7FEFF 		bl	ButtonYNChoice
 4164 00dc 0346     		mov	r3, r0
 4165 00de 012B     		cmp	r3, #1
 4166 00e0 0BD1     		bne	.L129
 748:.\console.c   **** 			{
 749:.\console.c   **** 				printf("\r\n!!!Wait for Bootloading (power off to stop bootloading process)\r\n");
 4167              		.loc 1 749 0
 4168 00e2 40F20000 		movw	r0, #:lower16:.LC80
 4169 00e6 C0F20000 		movt	r0, #:upper16:.LC80
 4170 00ea FFF7FEFF 		bl	puts
 750:.\console.c   **** 				CyDelay(100);
 4171              		.loc 1 750 0
 4172 00ee 4FF06400 		mov	r0, #100
 4173 00f2 FFF7FEFF 		bl	CyDelay
 751:.\console.c   **** 				/* This API will pass the program control to the Bootloader portion of the flash.
 752:.\console.c   **** 			   	It will also cause the Bootloader to wait indefinitely for the host to start communication *
 753:.\console.c   **** 				//Bootloadable_Load();
 754:.\console.c   **** 			}
 755:.\console.c   **** 			else
 756:.\console.c   **** 			{
 757:.\console.c   **** 				printf("\r\nBootloading aborted!");
 758:.\console.c   **** 			}
 759:.\console.c   **** 		}
 760:.\console.c   **** 		else
 761:.\console.c   **** 		{
 762:.\console.c   **** 			printf(STR_ERROR1);
 763:.\console.c   **** 		}
 764:.\console.c   **** 	goto exitpars;
 4174              		.loc 1 764 0
 4175 00f6 07F0EDB9 		b	.L131
 4176              	.L129:
 757:.\console.c   **** 				printf("\r\nBootloading aborted!");
 4177              		.loc 1 757 0
 4178 00fa 40F20000 		movw	r0, #:lower16:.LC81
 4179 00fe C0F20000 		movt	r0, #:upper16:.LC81
 4180 0102 FFF7FEFF 		bl	printf
 4181              		.loc 1 764 0
 4182 0106 07F0E5B9 		b	.L131
 4183              	.L128:
 762:.\console.c   **** 			printf(STR_ERROR1);
 4184              		.loc 1 762 0
 4185 010a 40F20000 		movw	r0, #:lower16:.LC82
 4186 010e C0F20000 		movt	r0, #:upper16:.LC82
 4187 0112 FFF7FEFF 		bl	printf
 4188              		.loc 1 764 0
 4189 0116 07F0DDB9 		b	.L131
 4190              	.L127:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 134


 765:.\console.c   **** 	}
 766:.\console.c   **** 	/* END CMD BOOT */
 767:.\console.c   **** 
 768:.\console.c   **** 	
 769:.\console.c   **** 	/* CMD ANAPOS +20 */
 770:.\console.c   **** 	if (strcmp(actual_cmd.action, "pp") == 0)
 4191              		.loc 1 770 0
 4192 011a 40F20000 		movw	r0, #:lower16:actual_cmd
 4193 011e C0F20000 		movt	r0, #:upper16:actual_cmd
 4194 0122 40F20001 		movw	r1, #:lower16:.LC83
 4195 0126 C0F20001 		movt	r1, #:upper16:.LC83
 4196 012a FFF7FEFF 		bl	strcmp
 4197 012e 0346     		mov	r3, r0
 4198 0130 002B     		cmp	r3, #0
 4199 0132 23D1     		bne	.L132
 771:.\console.c   **** 	{
 772:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4200              		.loc 1 772 0
 4201 0134 BF4B     		ldr	r3, .L719
 4202 0136 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4203 0138 002B     		cmp	r3, #0
 4204 013a 17D1     		bne	.L133
 773:.\console.c   **** 		{
 774:.\console.c   **** 			printf ("*ANAPOS ZERO +20!\r\n");
 4205              		.loc 1 774 0
 4206 013c 40F20000 		movw	r0, #:lower16:.LC84
 4207 0140 C0F20000 		movt	r0, #:upper16:.LC84
 4208 0144 FFF7FEFF 		bl	puts
 775:.\console.c   **** 			anapos_offset = anapos_offset + 20;
 4209              		.loc 1 775 0
 4210 0148 40F20003 		movw	r3, #:lower16:anapos_offset
 4211 014c C0F20003 		movt	r3, #:upper16:anapos_offset
 4212 0150 1B68     		ldr	r3, [r3, #0]
 4213 0152 03F11402 		add	r2, r3, #20
 4214 0156 40F20003 		movw	r3, #:lower16:anapos_offset
 4215 015a C0F20003 		movt	r3, #:upper16:anapos_offset
 4216 015e 1A60     		str	r2, [r3, #0]
 776:.\console.c   **** 			CyDelay(100);
 4217              		.loc 1 776 0
 4218 0160 4FF06400 		mov	r0, #100
 4219 0164 FFF7FEFF 		bl	CyDelay
 777:.\console.c   **** 		}
 778:.\console.c   **** 		else
 779:.\console.c   **** 		{
 780:.\console.c   **** 			printf ("*err\n");
 781:.\console.c   **** 		}
 782:.\console.c   **** 	goto exitpars;
 4220              		.loc 1 782 0
 4221 0168 07F0B4B9 		b	.L131
 4222              	.L133:
 780:.\console.c   **** 			printf ("*err\n");
 4223              		.loc 1 780 0
 4224 016c 40F20000 		movw	r0, #:lower16:.LC85
 4225 0170 C0F20000 		movt	r0, #:upper16:.LC85
 4226 0174 FFF7FEFF 		bl	puts
 4227              		.loc 1 782 0
 4228 0178 07F0ACB9 		b	.L131
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 135


 4229              	.L132:
 783:.\console.c   **** 	}
 784:.\console.c   **** 	/* END ANAPOS +20 */
 785:.\console.c   **** 
 786:.\console.c   **** 
 787:.\console.c   **** 	/* CMD ANAPOS +100 */
 788:.\console.c   **** 	if (strcmp(actual_cmd.action, "ppp") == 0)
 4230              		.loc 1 788 0
 4231 017c 40F20000 		movw	r0, #:lower16:actual_cmd
 4232 0180 C0F20000 		movt	r0, #:upper16:actual_cmd
 4233 0184 40F20001 		movw	r1, #:lower16:.LC86
 4234 0188 C0F20001 		movt	r1, #:upper16:.LC86
 4235 018c FFF7FEFF 		bl	strcmp
 4236 0190 0346     		mov	r3, r0
 4237 0192 002B     		cmp	r3, #0
 4238 0194 23D1     		bne	.L135
 789:.\console.c   **** 	{
 790:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4239              		.loc 1 790 0
 4240 0196 A74B     		ldr	r3, .L719
 4241 0198 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4242 019a 002B     		cmp	r3, #0
 4243 019c 17D1     		bne	.L136
 791:.\console.c   **** 		{
 792:.\console.c   **** 			printf ("*ANAPOS ZERO +100!\r\n");
 4244              		.loc 1 792 0
 4245 019e 40F20000 		movw	r0, #:lower16:.LC87
 4246 01a2 C0F20000 		movt	r0, #:upper16:.LC87
 4247 01a6 FFF7FEFF 		bl	puts
 793:.\console.c   **** 			anapos_offset = anapos_offset + 100;
 4248              		.loc 1 793 0
 4249 01aa 40F20003 		movw	r3, #:lower16:anapos_offset
 4250 01ae C0F20003 		movt	r3, #:upper16:anapos_offset
 4251 01b2 1B68     		ldr	r3, [r3, #0]
 4252 01b4 03F16402 		add	r2, r3, #100
 4253 01b8 40F20003 		movw	r3, #:lower16:anapos_offset
 4254 01bc C0F20003 		movt	r3, #:upper16:anapos_offset
 4255 01c0 1A60     		str	r2, [r3, #0]
 794:.\console.c   **** 			CyDelay(100);
 4256              		.loc 1 794 0
 4257 01c2 4FF06400 		mov	r0, #100
 4258 01c6 FFF7FEFF 		bl	CyDelay
 795:.\console.c   **** 		}
 796:.\console.c   **** 		else
 797:.\console.c   **** 		{
 798:.\console.c   **** 			printf ("*err\n");
 799:.\console.c   **** 		}
 800:.\console.c   **** 	goto exitpars;
 4259              		.loc 1 800 0
 4260 01ca 07F083B9 		b	.L131
 4261              	.L136:
 798:.\console.c   **** 			printf ("*err\n");
 4262              		.loc 1 798 0
 4263 01ce 40F20000 		movw	r0, #:lower16:.LC85
 4264 01d2 C0F20000 		movt	r0, #:upper16:.LC85
 4265 01d6 FFF7FEFF 		bl	puts
 4266              		.loc 1 800 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 136


 4267 01da 07F07BB9 		b	.L131
 4268              	.L135:
 801:.\console.c   **** 	}
 802:.\console.c   **** 	/* END ANAPOS +100 */
 803:.\console.c   **** 
 804:.\console.c   **** 
 805:.\console.c   **** 	/* CMD ANAPOS -20 */
 806:.\console.c   **** 	if (strcmp(actual_cmd.action, "mm") == 0)
 4269              		.loc 1 806 0
 4270 01de 40F20000 		movw	r0, #:lower16:actual_cmd
 4271 01e2 C0F20000 		movt	r0, #:upper16:actual_cmd
 4272 01e6 40F20001 		movw	r1, #:lower16:.LC88
 4273 01ea C0F20001 		movt	r1, #:upper16:.LC88
 4274 01ee FFF7FEFF 		bl	strcmp
 4275 01f2 0346     		mov	r3, r0
 4276 01f4 002B     		cmp	r3, #0
 4277 01f6 23D1     		bne	.L138
 807:.\console.c   **** 	{
 808:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4278              		.loc 1 808 0
 4279 01f8 8E4B     		ldr	r3, .L719
 4280 01fa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4281 01fc 002B     		cmp	r3, #0
 4282 01fe 17D1     		bne	.L139
 809:.\console.c   **** 		{
 810:.\console.c   **** 			printf ("*ANAPOS ZERO -20!\r\n");
 4283              		.loc 1 810 0
 4284 0200 40F20000 		movw	r0, #:lower16:.LC89
 4285 0204 C0F20000 		movt	r0, #:upper16:.LC89
 4286 0208 FFF7FEFF 		bl	puts
 811:.\console.c   **** 			anapos_offset = anapos_offset - 20;
 4287              		.loc 1 811 0
 4288 020c 40F20003 		movw	r3, #:lower16:anapos_offset
 4289 0210 C0F20003 		movt	r3, #:upper16:anapos_offset
 4290 0214 1B68     		ldr	r3, [r3, #0]
 4291 0216 A3F11402 		sub	r2, r3, #20
 4292 021a 40F20003 		movw	r3, #:lower16:anapos_offset
 4293 021e C0F20003 		movt	r3, #:upper16:anapos_offset
 4294 0222 1A60     		str	r2, [r3, #0]
 812:.\console.c   **** 			CyDelay(100);
 4295              		.loc 1 812 0
 4296 0224 4FF06400 		mov	r0, #100
 4297 0228 FFF7FEFF 		bl	CyDelay
 813:.\console.c   **** 		}
 814:.\console.c   **** 		else
 815:.\console.c   **** 		{
 816:.\console.c   **** 			printf ("*err\n");
 817:.\console.c   **** 		}
 818:.\console.c   **** 	goto exitpars;
 4298              		.loc 1 818 0
 4299 022c 07F052B9 		b	.L131
 4300              	.L139:
 816:.\console.c   **** 			printf ("*err\n");
 4301              		.loc 1 816 0
 4302 0230 40F20000 		movw	r0, #:lower16:.LC85
 4303 0234 C0F20000 		movt	r0, #:upper16:.LC85
 4304 0238 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 137


 4305              		.loc 1 818 0
 4306 023c 07F04AB9 		b	.L131
 4307              	.L138:
 819:.\console.c   **** 	}
 820:.\console.c   **** 	/* END ANAPOS -20 */
 821:.\console.c   **** 
 822:.\console.c   **** 
 823:.\console.c   **** 	/* CMD ANAPOS -100 */
 824:.\console.c   **** 	if (strcmp(actual_cmd.action, "mmm") == 0)
 4308              		.loc 1 824 0
 4309 0240 40F20000 		movw	r0, #:lower16:actual_cmd
 4310 0244 C0F20000 		movt	r0, #:upper16:actual_cmd
 4311 0248 40F20001 		movw	r1, #:lower16:.LC90
 4312 024c C0F20001 		movt	r1, #:upper16:.LC90
 4313 0250 FFF7FEFF 		bl	strcmp
 4314 0254 0346     		mov	r3, r0
 4315 0256 002B     		cmp	r3, #0
 4316 0258 23D1     		bne	.L141
 825:.\console.c   **** 	{
 826:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4317              		.loc 1 826 0
 4318 025a 764B     		ldr	r3, .L719
 4319 025c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4320 025e 002B     		cmp	r3, #0
 4321 0260 17D1     		bne	.L142
 827:.\console.c   **** 		{
 828:.\console.c   **** 			printf ("*ANAPOS ZERO -100!\r\n");
 4322              		.loc 1 828 0
 4323 0262 40F20000 		movw	r0, #:lower16:.LC91
 4324 0266 C0F20000 		movt	r0, #:upper16:.LC91
 4325 026a FFF7FEFF 		bl	puts
 829:.\console.c   **** 			anapos_offset = anapos_offset - 100;
 4326              		.loc 1 829 0
 4327 026e 40F20003 		movw	r3, #:lower16:anapos_offset
 4328 0272 C0F20003 		movt	r3, #:upper16:anapos_offset
 4329 0276 1B68     		ldr	r3, [r3, #0]
 4330 0278 A3F16402 		sub	r2, r3, #100
 4331 027c 40F20003 		movw	r3, #:lower16:anapos_offset
 4332 0280 C0F20003 		movt	r3, #:upper16:anapos_offset
 4333 0284 1A60     		str	r2, [r3, #0]
 830:.\console.c   **** 			CyDelay(100);
 4334              		.loc 1 830 0
 4335 0286 4FF06400 		mov	r0, #100
 4336 028a FFF7FEFF 		bl	CyDelay
 831:.\console.c   **** 		}
 832:.\console.c   **** 		else
 833:.\console.c   **** 		{
 834:.\console.c   **** 			printf ("*err\n");
 835:.\console.c   **** 		}
 836:.\console.c   **** 	goto exitpars;
 4337              		.loc 1 836 0
 4338 028e 07F021B9 		b	.L131
 4339              	.L142:
 834:.\console.c   **** 			printf ("*err\n");
 4340              		.loc 1 834 0
 4341 0292 40F20000 		movw	r0, #:lower16:.LC85
 4342 0296 C0F20000 		movt	r0, #:upper16:.LC85
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 138


 4343 029a FFF7FEFF 		bl	puts
 4344              		.loc 1 836 0
 4345 029e 07F019B9 		b	.L131
 4346              	.L141:
 837:.\console.c   **** 	}
 838:.\console.c   **** 	/* END ANAPOS -100 */	
 839:.\console.c   **** 	
 840:.\console.c   **** 	
 841:.\console.c   **** 	/* CMD TEST BUZZER */
 842:.\console.c   **** 	if (strcmp(actual_cmd.action, "tbuz") == 0)
 4347              		.loc 1 842 0
 4348 02a2 40F20000 		movw	r0, #:lower16:actual_cmd
 4349 02a6 C0F20000 		movt	r0, #:upper16:actual_cmd
 4350 02aa 40F20001 		movw	r1, #:lower16:.LC92
 4351 02ae C0F20001 		movt	r1, #:upper16:.LC92
 4352 02b2 FFF7FEFF 		bl	strcmp
 4353 02b6 0346     		mov	r3, r0
 4354 02b8 002B     		cmp	r3, #0
 4355 02ba 26D1     		bne	.L144
 843:.\console.c   **** 	{
 844:.\console.c   **** 		printf("Buzzer testing!\r\n");
 4356              		.loc 1 844 0
 4357 02bc 40F20000 		movw	r0, #:lower16:.LC93
 4358 02c0 C0F20000 		movt	r0, #:upper16:.LC93
 4359 02c4 FFF7FEFF 		bl	puts
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4360              		.loc 1 845 0
 4361 02c8 4FF00003 		mov	r3, #0
 4362 02cc 87F81331 		strb	r3, [r7, #275]
 4363 02d0 15E0     		b	.L145
 4364              	.L146:
 846:.\console.c   ****  		{			
 847:.\console.c   **** 			Control_Reg_BUZ_Write(BUZZER_ON);	/* buzzer on			*/
 4365              		.loc 1 847 0 discriminator 2
 4366 02d2 4FF00100 		mov	r0, #1
 4367 02d6 FFF7FEFF 		bl	Control_Reg_BUZ_Write
 848:.\console.c   **** 			CyDelay(250);						/* 250msec sec delay	*/
 4368              		.loc 1 848 0 discriminator 2
 4369 02da 4FF0FA00 		mov	r0, #250
 4370 02de FFF7FEFF 		bl	CyDelay
 849:.\console.c   **** 			Control_Reg_BUZ_Write(BUZZER_OFF);	/* buzzer off			*/
 4371              		.loc 1 849 0 discriminator 2
 4372 02e2 4FF00000 		mov	r0, #0
 4373 02e6 FFF7FEFF 		bl	Control_Reg_BUZ_Write
 850:.\console.c   **** 			CyDelay(125);						/* 125msec sec delay	*/			
 4374              		.loc 1 850 0 discriminator 2
 4375 02ea 4FF07D00 		mov	r0, #125
 4376 02ee FFF7FEFF 		bl	CyDelay
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4377              		.loc 1 845 0 discriminator 2
 4378 02f2 97F81331 		ldrb	r3, [r7, #275]
 4379 02f6 03F10103 		add	r3, r3, #1
 4380 02fa 87F81331 		strb	r3, [r7, #275]
 4381              	.L145:
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4382              		.loc 1 845 0 is_stmt 0 discriminator 1
 4383 02fe 97F81331 		ldrb	r3, [r7, #275]	@ zero_extendqisi2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 139


 4384 0302 022B     		cmp	r3, #2
 4385 0304 E5D9     		bls	.L146
 851:.\console.c   **** 		}
 852:.\console.c   **** 	
 853:.\console.c   **** 		goto exitpars;
 4386              		.loc 1 853 0 is_stmt 1
 4387 0306 07F0E5B8 		b	.L131
 4388              	.L144:
 854:.\console.c   **** 	}
 855:.\console.c   **** 	/* END CMD TEST BUZZER */	
 856:.\console.c   **** 	
 857:.\console.c   **** 	
 858:.\console.c   **** 	/* HIDDEN CMD TEST LORA */	
 859:.\console.c   **** 	if (strcmp(actual_cmd.action, "tlora") == 0)
 4389              		.loc 1 859 0
 4390 030a 40F20000 		movw	r0, #:lower16:actual_cmd
 4391 030e C0F20000 		movt	r0, #:upper16:actual_cmd
 4392 0312 40F20001 		movw	r1, #:lower16:.LC94
 4393 0316 C0F20001 		movt	r1, #:upper16:.LC94
 4394 031a FFF7FEFF 		bl	strcmp
 4395 031e 0346     		mov	r3, r0
 4396 0320 002B     		cmp	r3, #0
 4397 0322 1BD1     		bne	.L147
 860:.\console.c   **** 	{
 861:.\console.c   **** 		printf("Test LoRa started!\r\n");
 4398              		.loc 1 861 0
 4399 0324 40F20000 		movw	r0, #:lower16:.LC95
 4400 0328 C0F20000 		movt	r0, #:upper16:.LC95
 4401 032c FFF7FEFF 		bl	puts
 862:.\console.c   **** 			
 863:.\console.c   **** 		sendLoRaATcmd(CMD_AT);					/* Send AT Command */
 4402              		.loc 1 863 0
 4403 0330 40F20000 		movw	r0, #:lower16:CMD_AT
 4404 0334 C0F20000 		movt	r0, #:upper16:CMD_AT
 4405 0338 FFF7FEFF 		bl	sendLoRaATcmd
 864:.\console.c   **** 		
 865:.\console.c   **** 		CyDelay(500);							/* delay waiting XTR-8LR100 chars */
 4406              		.loc 1 865 0
 4407 033c 4FF4FA70 		mov	r0, #500
 4408 0340 FFF7FEFF 		bl	CyDelay
 866:.\console.c   **** 						
 867:.\console.c   **** 		sendLoRaATcmd(CMD_AT_SHOWVERSION);		/* Send SHOW VERSION Command */
 4409              		.loc 1 867 0
 4410 0344 40F20000 		movw	r0, #:lower16:CMD_AT_SHOWVERSION
 4411 0348 C0F20000 		movt	r0, #:upper16:CMD_AT_SHOWVERSION
 4412 034c FFF7FEFF 		bl	sendLoRaATcmd
 868:.\console.c   **** 		
 869:.\console.c   **** 		CyDelay(500);							/* delay waiting XTR-8LR100 chars */
 4413              		.loc 1 869 0
 4414 0350 4FF4FA70 		mov	r0, #500
 4415 0354 FFF7FEFF 		bl	CyDelay
 870:.\console.c   **** 		
 871:.\console.c   **** 		goto exitpars;
 4416              		.loc 1 871 0
 4417 0358 07F0BCB8 		b	.L131
 4418              	.L147:
 872:.\console.c   **** 	}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 140


 873:.\console.c   **** 	/* END HIDDEN CMD TEST LORA */ 	
 874:.\console.c   **** 	
 875:.\console.c   **** 	
 876:.\console.c   **** //	/* HIDDEN CMD TEST LORA 2 (PINS) */	
 877:.\console.c   **** //	if (strcmp(actual_cmd.action, "tlora2") == 0)
 878:.\console.c   **** //	{
 879:.\console.c   **** //		printf("Test LoRa 2 (pins) started!\r\n");
 880:.\console.c   **** //			
 881:.\console.c   **** //		while (AnyButtonPressed() == NO_PRESSED)
 882:.\console.c   **** //		{	
 883:.\console.c   **** //			printf("RESET=L\r\n");
 884:.\console.c   **** //			Control_Reg_LORA_RESET_Write(0x00);		/* SET_A = L 		*/						
 885:.\console.c   **** //			CyDelay(100);						/* 0.5 sec delay 	*/
 886:.\console.c   **** //			printf("RESET=H\r\n");
 887:.\console.c   **** //			Control_Reg_LORA_RESET_Write(0xFF);		/* SET_A = L 		*/						
 888:.\console.c   **** //			CyDelay(100);						/* 0.5 sec delay 	*/			
 889:.\console.c   **** //		}
 890:.\console.c   **** //		
 891:.\console.c   **** //		Control_Reg_LORA_Write(0xFF);		/* SET_A = H */
 892:.\console.c   **** //		Control_Reg_LORA_RESET_Write(0xFF);	/* RESET = H */
 893:.\console.c   **** //		
 894:.\console.c   **** //		goto exitpars;
 895:.\console.c   **** //	}
 896:.\console.c   **** //	/* END HIDDEN CMD TEST LORA 2 (PINS) */ 	
 897:.\console.c   **** 	
 898:.\console.c   **** 	
 899:.\console.c   **** 	/* CMD MYTEST */
 900:.\console.c   **** 	if (strcmp(actual_cmd.action, "mytest") == 0)
 4419              		.loc 1 900 0
 4420 035c 40F20000 		movw	r0, #:lower16:actual_cmd
 4421 0360 C0F20000 		movt	r0, #:upper16:actual_cmd
 4422 0364 40F20001 		movw	r1, #:lower16:.LC96
 4423 0368 C0F20001 		movt	r1, #:upper16:.LC96
 4424 036c FFF7FEFF 		bl	strcmp
 4425 0370 0346     		mov	r3, r0
 4426 0372 002B     		cmp	r3, #0
 4427 0374 2DD1     		bne	.L148
 901:.\console.c   **** 	{
 902:.\console.c   **** 		printf("My test!\r\n");
 4428              		.loc 1 902 0
 4429 0376 40F20000 		movw	r0, #:lower16:.LC97
 4430 037a C0F20000 		movt	r0, #:upper16:.LC97
 4431 037e FFF7FEFF 		bl	puts
 903:.\console.c   **** 		while (AnyButtonPressed() == NO_PRESSED)
 4432              		.loc 1 903 0
 4433 0382 1FE0     		b	.L149
 4434              	.L150:
 904:.\console.c   **** 		{
 905:.\console.c   **** #if MEASURE_MYTEST
 906:.\console.c   **** 	Control_Reg_LED_Write(0x01);
 4435              		.loc 1 906 0
 4436 0384 4FF00100 		mov	r0, #1
 4437 0388 FFF7FEFF 		bl	Control_Reg_LED_Write
 907:.\console.c   **** #endif					
 908:.\console.c   **** 			InitPanGotoQPath(11, 0.2);				/* initialize the Pan Goto Q Path					*/
 4438              		.loc 1 908 0
 4439 038c 4FF00B00 		mov	r0, #11
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 141


 4440 0390 4CF6CD41 		movw	r1, #52429
 4441 0394 C3F64C61 		movt	r1, 15948
 4442 0398 FFF7FEFF 		bl	InitPanGotoQPath
 909:.\console.c   **** 			InitTiltGotoQPath(11, 0.2);				/* initialize the Tilt Goto Q Path					*/			
 4443              		.loc 1 909 0
 4444 039c 4FF00B00 		mov	r0, #11
 4445 03a0 4CF6CD41 		movw	r1, #52429
 4446 03a4 C3F64C61 		movt	r1, 15948
 4447 03a8 FFF7FEFF 		bl	InitTiltGotoQPath
 910:.\console.c   **** 			CalculatePanGotoQPath();				/* Calculate the  Pan Goto Q Path 					*/
 4448              		.loc 1 910 0
 4449 03ac FFF7FEFF 		bl	CalculatePanGotoQPath
 911:.\console.c   **** 			CalculateTiltGotoQPath();				/* Calculate the  Tilt Goto Q Path 					*/						
 4450              		.loc 1 911 0
 4451 03b0 FFF7FEFF 		bl	CalculateTiltGotoQPath
 912:.\console.c   **** #if MEASURE_MYTEST
 913:.\console.c   **** 	Control_Reg_LED_Write(0x00);
 4452              		.loc 1 913 0
 4453 03b4 4FF00000 		mov	r0, #0
 4454 03b8 FFF7FEFF 		bl	Control_Reg_LED_Write
 914:.\console.c   **** #endif					
 915:.\console.c   **** 			CyDelayUs(500);
 4455              		.loc 1 915 0
 4456 03bc 4FF4FA70 		mov	r0, #500
 4457 03c0 FFF7FEFF 		bl	CyDelayUs
 4458              	.L149:
 903:.\console.c   **** 		while (AnyButtonPressed() == NO_PRESSED)
 4459              		.loc 1 903 0 discriminator 1
 4460 03c4 FFF7FEFF 		bl	AnyButtonPressed
 4461 03c8 0346     		mov	r3, r0
 4462 03ca 002B     		cmp	r3, #0
 4463 03cc DAD0     		beq	.L150
 916:.\console.c   **** 		}
 917:.\console.c   **** 				
 918:.\console.c   **** 		goto exitpars;
 4464              		.loc 1 918 0
 4465 03ce 07F081B8 		b	.L131
 4466              	.L148:
 919:.\console.c   **** 	}
 920:.\console.c   **** 	/* END CMD MYTEST */
 921:.\console.c   **** 	
 922:.\console.c   **** 	
 923:.\console.c   **** #if ITG_3701_ENABLED	
 924:.\console.c   **** 	/* CMD TEST INVENSENSE ITG3701 */
 925:.\console.c   **** 	if ((strcmp(actual_cmd.action, "titg3701") == 0) ||
 926:.\console.c   **** 	   (strcmp(actual_cmd.action, "t3701") == 0))
 927:.\console.c   **** 	{
 928:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 929:.\console.c   **** 		{
 930:.\console.c   **** 			printf("Invensense ITG-3701 testing!\r\n");
 931:.\console.c   **** 			ITG3701_test();
 932:.\console.c   **** 		}
 933:.\console.c   **** 		else
 934:.\console.c   **** 		{
 935:.\console.c   **** 			printf ("*err\n");
 936:.\console.c   **** 		}
 937:.\console.c   **** 	goto exitpars;
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 142


 938:.\console.c   **** 	}
 939:.\console.c   **** 	/* END CMD TEST INVENSENSE ITG3701 */	
 940:.\console.c   **** #endif
 941:.\console.c   **** 
 942:.\console.c   **** 	
 943:.\console.c   **** 	/* CMD STOP MAPPING STATE MACHINE */
 944:.\console.c   **** 	if ((strcmp(actual_cmd.action, "stopmapsm") == 0) ||
 4467              		.loc 1 944 0
 4468 03d2 40F20000 		movw	r0, #:lower16:actual_cmd
 4469 03d6 C0F20000 		movt	r0, #:upper16:actual_cmd
 4470 03da 40F20001 		movw	r1, #:lower16:.LC98
 4471 03de C0F20001 		movt	r1, #:upper16:.LC98
 4472 03e2 FFF7FEFF 		bl	strcmp
 4473 03e6 0346     		mov	r3, r0
 4474 03e8 002B     		cmp	r3, #0
 4475 03ea 0CD0     		beq	.L151
 945:.\console.c   **** 	   (strcmp(actual_cmd.action, "stopsm") == 0))
 4476              		.loc 1 945 0 discriminator 1
 4477 03ec 40F20000 		movw	r0, #:lower16:actual_cmd
 4478 03f0 C0F20000 		movt	r0, #:upper16:actual_cmd
 4479 03f4 40F20001 		movw	r1, #:lower16:.LC99
 4480 03f8 C0F20001 		movt	r1, #:upper16:.LC99
 4481 03fc FFF7FEFF 		bl	strcmp
 4482 0400 0346     		mov	r3, r0
 944:.\console.c   **** 	if ((strcmp(actual_cmd.action, "stopmapsm") == 0) ||
 4483              		.loc 1 944 0 discriminator 1
 4484 0402 002B     		cmp	r3, #0
 4485 0404 18D1     		bne	.L152
 4486              	.L151:
 946:.\console.c   **** 	{
 947:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4487              		.loc 1 947 0
 4488 0406 0B4B     		ldr	r3, .L719
 4489 0408 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4490 040a 002B     		cmp	r3, #0
 4491 040c 09D1     		bne	.L153
 948:.\console.c   **** 		{
 949:.\console.c   **** 			printf("MAPPING STATE MACHINE Stopped!\r\n");
 4492              		.loc 1 949 0
 4493 040e 40F20000 		movw	r0, #:lower16:.LC100
 4494 0412 C0F20000 		movt	r0, #:upper16:.LC100
 4495 0416 FFF7FEFF 		bl	puts
 950:.\console.c   **** 			
 951:.\console.c   **** 			/* Mapping State Machine Initialization */
 952:.\console.c   **** 			MappingStateMachineInit();
 4496              		.loc 1 952 0
 4497 041a FFF7FEFF 		bl	MappingStateMachineInit
 953:.\console.c   **** 		}
 954:.\console.c   **** 		else
 955:.\console.c   **** 		{
 956:.\console.c   **** 			printf ("*err\n");
 957:.\console.c   **** 		}
 958:.\console.c   **** 	goto exitpars;
 4498              		.loc 1 958 0
 4499 041e 07F059B8 		b	.L131
 4500              	.L153:
 956:.\console.c   **** 			printf ("*err\n");
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 143


 4501              		.loc 1 956 0
 4502 0422 40F20000 		movw	r0, #:lower16:.LC85
 4503 0426 C0F20000 		movt	r0, #:upper16:.LC85
 4504 042a FFF7FEFF 		bl	puts
 4505              		.loc 1 958 0
 4506 042e 07F051B8 		b	.L131
 4507              	.L720:
 4508 0432 00BF     		.align	2
 4509              	.L719:
 4510 0434 0F000000 		.word	actual_cmd+15
 4511              	.L152:
 959:.\console.c   **** 	}
 960:.\console.c   **** 	/* END CMD STOP MAPPING STATE MACHINE */
 961:.\console.c   **** 
 962:.\console.c   **** 	
 963:.\console.c   **** 	/* CMD DEENERGIZE */
 964:.\console.c   **** 	if ((strcmp(actual_cmd.action, "deenergize") == 0) ||
 4512              		.loc 1 964 0
 4513 0438 40F20000 		movw	r0, #:lower16:actual_cmd
 4514 043c C0F20000 		movt	r0, #:upper16:actual_cmd
 4515 0440 40F20001 		movw	r1, #:lower16:.LC101
 4516 0444 C0F20001 		movt	r1, #:upper16:.LC101
 4517 0448 FFF7FEFF 		bl	strcmp
 4518 044c 0346     		mov	r3, r0
 4519 044e 002B     		cmp	r3, #0
 4520 0450 0CD0     		beq	.L155
 965:.\console.c   **** 	   (strcmp(actual_cmd.action, "deen") == 0))
 4521              		.loc 1 965 0 discriminator 1
 4522 0452 40F20000 		movw	r0, #:lower16:actual_cmd
 4523 0456 C0F20000 		movt	r0, #:upper16:actual_cmd
 4524 045a 40F20001 		movw	r1, #:lower16:.LC102
 4525 045e C0F20001 		movt	r1, #:upper16:.LC102
 4526 0462 FFF7FEFF 		bl	strcmp
 4527 0466 0346     		mov	r3, r0
 964:.\console.c   **** 	if ((strcmp(actual_cmd.action, "deenergize") == 0) ||
 4528              		.loc 1 964 0 discriminator 1
 4529 0468 002B     		cmp	r3, #0
 4530 046a 4BD1     		bne	.L156
 4531              	.L155:
 966:.\console.c   **** 	{
 967:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4532              		.loc 1 967 0
 4533 046c CE4B     		ldr	r3, .L721
 4534 046e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4535 0470 002B     		cmp	r3, #0
 4536 0472 3FD1     		bne	.L157
 968:.\console.c   **** 		{
 969:.\console.c   **** 			printf("Motors DEENERGIZED & Driver Sleeped!\r\n");
 4537              		.loc 1 969 0
 4538 0474 40F20000 		movw	r0, #:lower16:.LC103
 4539 0478 C0F20000 		movt	r0, #:upper16:.LC103
 4540 047c FFF7FEFF 		bl	puts
 970:.\console.c   **** 			machine_state = GOBEE_DEENERGIZED;
 4541              		.loc 1 970 0
 4542 0480 40F20003 		movw	r3, #:lower16:machine_state
 4543 0484 C0F20003 		movt	r3, #:upper16:machine_state
 4544 0488 4FF00602 		mov	r2, #6
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 144


 4545 048c 1A70     		strb	r2, [r3, #0]
 971:.\console.c   **** 			
 972:.\console.c   **** 			/* Mapping State Machine Initialization & STOP */
 973:.\console.c   **** 			MappingStateMachineInit();
 4546              		.loc 1 973 0
 4547 048e FFF7FEFF 		bl	MappingStateMachineInit
 974:.\console.c   **** 			
 975:.\console.c   **** 			/* CLU State Machine STOP */
 976:.\console.c   **** 			clu_sm.status = CLUSM_END;
 4548              		.loc 1 976 0
 4549 0492 40F20003 		movw	r3, #:lower16:clu_sm
 4550 0496 C0F20003 		movt	r3, #:upper16:clu_sm
 4551 049a 4FF00C02 		mov	r2, #12
 4552 049e 1A70     		strb	r2, [r3, #0]
 977:.\console.c   **** 			
 978:.\console.c   **** 			/* Movers STOP */
 979:.\console.c   **** 			mover_pan.status = MOVER_ENDED;
 4553              		.loc 1 979 0
 4554 04a0 40F20003 		movw	r3, #:lower16:mover_pan
 4555 04a4 C0F20003 		movt	r3, #:upper16:mover_pan
 4556 04a8 4FF00202 		mov	r2, #2
 4557 04ac 1A70     		strb	r2, [r3, #0]
 980:.\console.c   **** 			mover_pan.steps_to_move = 0;
 4558              		.loc 1 980 0
 4559 04ae 40F20003 		movw	r3, #:lower16:mover_pan
 4560 04b2 C0F20003 		movt	r3, #:upper16:mover_pan
 4561 04b6 4FF00002 		mov	r2, #0
 4562 04ba 1A62     		str	r2, [r3, #32]
 981:.\console.c   **** 			mover_tilt.status = MOVER_ENDED;
 4563              		.loc 1 981 0
 4564 04bc 40F20003 		movw	r3, #:lower16:mover_tilt
 4565 04c0 C0F20003 		movt	r3, #:upper16:mover_tilt
 4566 04c4 4FF00202 		mov	r2, #2
 4567 04c8 1A70     		strb	r2, [r3, #0]
 982:.\console.c   **** 			mover_tilt.steps_to_move = 0;			
 4568              		.loc 1 982 0
 4569 04ca 40F20003 		movw	r3, #:lower16:mover_tilt
 4570 04ce C0F20003 		movt	r3, #:upper16:mover_tilt
 4571 04d2 4FF00002 		mov	r2, #0
 4572 04d6 1A62     		str	r2, [r3, #32]
 983:.\console.c   **** 			
 984:.\console.c   **** 			/* Sleep the Machine*/
 985:.\console.c   **** 			motor_sleep(&pan_axis);
 4573              		.loc 1 985 0
 4574 04d8 40F20000 		movw	r0, #:lower16:pan_axis
 4575 04dc C0F20000 		movt	r0, #:upper16:pan_axis
 4576 04e0 FFF7FEFF 		bl	motor_sleep
 986:.\console.c   **** 			motor_sleep(&tilt_axis);				
 4577              		.loc 1 986 0
 4578 04e4 40F20000 		movw	r0, #:lower16:tilt_axis
 4579 04e8 C0F20000 		movt	r0, #:upper16:tilt_axis
 4580 04ec FFF7FEFF 		bl	motor_sleep
 987:.\console.c   **** 		}
 988:.\console.c   **** 		else
 989:.\console.c   **** 		{
 990:.\console.c   **** 			printf ("*err\n");
 991:.\console.c   **** 		}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 145


 992:.\console.c   **** 	goto exitpars;
 4581              		.loc 1 992 0
 4582 04f0 06F0F0BF 		b	.L131
 4583              	.L157:
 990:.\console.c   **** 			printf ("*err\n");
 4584              		.loc 1 990 0
 4585 04f4 40F20000 		movw	r0, #:lower16:.LC85
 4586 04f8 C0F20000 		movt	r0, #:upper16:.LC85
 4587 04fc FFF7FEFF 		bl	puts
 4588              		.loc 1 992 0
 4589 0500 06F0E8BF 		b	.L131
 4590              	.L156:
 993:.\console.c   **** 	}
 994:.\console.c   **** 	/* END CMD DEENERGIZE */	
 995:.\console.c   **** 
 996:.\console.c   **** 	
 997:.\console.c   **** 	/* CMD ENERGIZE */
 998:.\console.c   **** 	if ((strcmp(actual_cmd.action, "energize") == 0) ||
 4591              		.loc 1 998 0
 4592 0504 40F20000 		movw	r0, #:lower16:actual_cmd
 4593 0508 C0F20000 		movt	r0, #:upper16:actual_cmd
 4594 050c 40F20001 		movw	r1, #:lower16:.LC104
 4595 0510 C0F20001 		movt	r1, #:upper16:.LC104
 4596 0514 FFF7FEFF 		bl	strcmp
 4597 0518 0346     		mov	r3, r0
 4598 051a 002B     		cmp	r3, #0
 4599 051c 0CD0     		beq	.L159
 999:.\console.c   **** 	   (strcmp(actual_cmd.action, "en") == 0))
 4600              		.loc 1 999 0 discriminator 1
 4601 051e 40F20000 		movw	r0, #:lower16:actual_cmd
 4602 0522 C0F20000 		movt	r0, #:upper16:actual_cmd
 4603 0526 40F20001 		movw	r1, #:lower16:.LC105
 4604 052a C0F20001 		movt	r1, #:upper16:.LC105
 4605 052e FFF7FEFF 		bl	strcmp
 4606 0532 0346     		mov	r3, r0
 998:.\console.c   **** 	if ((strcmp(actual_cmd.action, "energize") == 0) ||
 4607              		.loc 1 998 0 discriminator 1
 4608 0534 002B     		cmp	r3, #0
 4609 0536 3AD1     		bne	.L160
 4610              	.L159:
1000:.\console.c   **** 	{
1001:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4611              		.loc 1 1001 0
 4612 0538 9B4B     		ldr	r3, .L721
 4613 053a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4614 053c 002B     		cmp	r3, #0
 4615 053e 2ED1     		bne	.L161
1002:.\console.c   **** 		{
1003:.\console.c   **** 			printf("Motors ENERGIZED!\r\n");
 4616              		.loc 1 1003 0
 4617 0540 40F20000 		movw	r0, #:lower16:.LC106
 4618 0544 C0F20000 		movt	r0, #:upper16:.LC106
 4619 0548 FFF7FEFF 		bl	puts
1004:.\console.c   **** //			printf("CLU state machine init!\r\n");
1005:.\console.c   **** //			printf("Mapping state machine start!\r\n");			
1006:.\console.c   **** 			
1007:.\console.c   **** 			motor_init(&pan_axis);						/* Initialize Pan Axis  */
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 146


 4620              		.loc 1 1007 0
 4621 054c 40F20000 		movw	r0, #:lower16:pan_axis
 4622 0550 C0F20000 		movt	r0, #:upper16:pan_axis
 4623 0554 FFF7FEFF 		bl	motor_init
1008:.\console.c   **** 			motor_init(&tilt_axis);						/* Initialize Tilt Axis */			
 4624              		.loc 1 1008 0
 4625 0558 40F20000 		movw	r0, #:lower16:tilt_axis
 4626 055c C0F20000 		movt	r0, #:upper16:tilt_axis
 4627 0560 FFF7FEFF 		bl	motor_init
1009:.\console.c   **** 			
1010:.\console.c   **** #if PAN_PSEUDOABS
1011:.\console.c   **** #else
1012:.\console.c   **** 			QuadDec_PAN_Start();						/* Reset PAN Feedback Encoder Counter	*/
 4628              		.loc 1 1012 0
 4629 0564 FFF7FEFF 		bl	QuadDec_PAN_Start
1013:.\console.c   **** 			QuadDec_TILT_Start();						/* Reset TILT Feedback Encoder Counter	*/
 4630              		.loc 1 1013 0
 4631 0568 FFF7FEFF 		bl	QuadDec_TILT_Start
1014:.\console.c   **** #endif
1015:.\console.c   **** 
1016:.\console.c   **** //			/* CLU state machine Init */
1017:.\console.c   **** //			clu_sm_init();
1018:.\console.c   **** //
1019:.\console.c   **** //			/* Mapping State Machine START */
1020:.\console.c   **** //			MappingStateMachineStart();
1021:.\console.c   **** 			
1022:.\console.c   **** 			CyDelay(100);
 4632              		.loc 1 1022 0
 4633 056c 4FF06400 		mov	r0, #100
 4634 0570 FFF7FEFF 		bl	CyDelay
1023:.\console.c   **** 			machine_state = GOBEE_ENERGIZED;			
 4635              		.loc 1 1023 0
 4636 0574 40F20003 		movw	r3, #:lower16:machine_state
 4637 0578 C0F20003 		movt	r3, #:upper16:machine_state
 4638 057c 4FF00502 		mov	r2, #5
 4639 0580 1A70     		strb	r2, [r3, #0]
1024:.\console.c   **** 			motor_energize(&pan_axis);
 4640              		.loc 1 1024 0
 4641 0582 40F20000 		movw	r0, #:lower16:pan_axis
 4642 0586 C0F20000 		movt	r0, #:upper16:pan_axis
 4643 058a FFF7FEFF 		bl	motor_energize
1025:.\console.c   **** 			motor_energize(&tilt_axis);			
 4644              		.loc 1 1025 0
 4645 058e 40F20000 		movw	r0, #:lower16:tilt_axis
 4646 0592 C0F20000 		movt	r0, #:upper16:tilt_axis
 4647 0596 FFF7FEFF 		bl	motor_energize
1026:.\console.c   **** 		}
1027:.\console.c   **** 		else
1028:.\console.c   **** 		{
1029:.\console.c   **** 			printf ("*err\n");
1030:.\console.c   **** 		}
1031:.\console.c   **** 	goto exitpars;
 4648              		.loc 1 1031 0
 4649 059a 06F09BBF 		b	.L131
 4650              	.L161:
1029:.\console.c   **** 			printf ("*err\n");
 4651              		.loc 1 1029 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 147


 4652 059e 40F20000 		movw	r0, #:lower16:.LC85
 4653 05a2 C0F20000 		movt	r0, #:upper16:.LC85
 4654 05a6 FFF7FEFF 		bl	puts
 4655              		.loc 1 1031 0
 4656 05aa 06F093BF 		b	.L131
 4657              	.L160:
1032:.\console.c   **** 	}
1033:.\console.c   **** 	/* END CMD ENERGIZE */	
1034:.\console.c   **** 
1035:.\console.c   **** 	
1036:.\console.c   **** 	/* CMD VIRTUAL PAN JOYSTICK */
1037:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyp") == 0) ||
 4658              		.loc 1 1037 0
 4659 05ae 40F20000 		movw	r0, #:lower16:actual_cmd
 4660 05b2 C0F20000 		movt	r0, #:upper16:actual_cmd
 4661 05b6 40F20001 		movw	r1, #:lower16:.LC107
 4662 05ba C0F20001 		movt	r1, #:upper16:.LC107
 4663 05be FFF7FEFF 		bl	strcmp
 4664 05c2 0346     		mov	r3, r0
 4665 05c4 002B     		cmp	r3, #0
 4666 05c6 0DD0     		beq	.L163
1038:.\console.c   **** 		(strcmp(actual_cmd.action, "vjp") == 0))
 4667              		.loc 1 1038 0 discriminator 1
 4668 05c8 40F20000 		movw	r0, #:lower16:actual_cmd
 4669 05cc C0F20000 		movt	r0, #:upper16:actual_cmd
 4670 05d0 40F20001 		movw	r1, #:lower16:.LC108
 4671 05d4 C0F20001 		movt	r1, #:upper16:.LC108
 4672 05d8 FFF7FEFF 		bl	strcmp
 4673 05dc 0346     		mov	r3, r0
1037:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyp") == 0) ||
 4674              		.loc 1 1037 0 discriminator 1
 4675 05de 002B     		cmp	r3, #0
 4676 05e0 40F0BD80 		bne	.L164
 4677              	.L163:
 4678              	.LBB3:
1039:.\console.c   **** 	{
1040:.\console.c   **** 		float pan_joy_delta = 0;
 4679              		.loc 1 1040 0
 4680 05e4 4FF00003 		mov	r3, #0
 4681 05e8 C7F80C31 		str	r3, [r7, #268]	@ float
1041:.\console.c   **** 		
1042:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 4682              		.loc 1 1042 0
 4683 05ec 4FF00003 		mov	r3, #0
 4684 05f0 87F81231 		strb	r3, [r7, #274]
1043:.\console.c   **** 		while (get_key == 0)						
 4685              		.loc 1 1043 0
 4686 05f4 A5E0     		b	.L165
 4687              	.L172:
1044:.\console.c   **** 		{	
1045:.\console.c   **** 			printf("PAN: enc(t)=%+ld [step]", (int32)pan_axis.mc.slave_enc.position);
 4688              		.loc 1 1045 0
 4689 05f6 40F20003 		movw	r3, #:lower16:pan_axis
 4690 05fa C0F20003 		movt	r3, #:upper16:pan_axis
 4691 05fe 5B6C     		ldr	r3, [r3, #68]
 4692 0600 40F20000 		movw	r0, #:lower16:.LC109
 4693 0604 C0F20000 		movt	r0, #:upper16:.LC109
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 148


 4694 0608 1946     		mov	r1, r3
 4695 060a FFF7FEFF 		bl	printf
1046:.\console.c   **** 			printf("   abs_pos(t)=%+ld [step] ", (int32)pan_absolute_sensor.position);	
 4696              		.loc 1 1046 0
 4697 060e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 4698 0612 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 4699 0616 5B68     		ldr	r3, [r3, #4]	@ float
 4700 0618 1846     		mov	r0, r3
 4701 061a FFF7FEFF 		bl	__aeabi_f2iz
 4702 061e 0346     		mov	r3, r0
 4703 0620 40F20000 		movw	r0, #:lower16:.LC110
 4704 0624 C0F20000 		movt	r0, #:upper16:.LC110
 4705 0628 1946     		mov	r1, r3
 4706 062a FFF7FEFF 		bl	printf
1047:.\console.c   **** 			ShowLimits(&pan_axis);
 4707              		.loc 1 1047 0
 4708 062e 40F20000 		movw	r0, #:lower16:pan_axis
 4709 0632 C0F20000 		movt	r0, #:upper16:pan_axis
 4710 0636 FFF7FEFF 		bl	ShowLimits
1048:.\console.c   **** 			printf("   vjoy(t)=%4.0f [step/sec]", (float)pan_joy_delta * SAMPLING_FREQ);
 4711              		.loc 1 1048 0
 4712 063a D7F80C01 		ldr	r0, [r7, #268]	@ float
 4713 063e 4FF40041 		mov	r1, #32768
 4714 0642 C4F2BB41 		movt	r1, 17595
 4715 0646 FFF7FEFF 		bl	__aeabi_fmul
 4716 064a 0346     		mov	r3, r0
 4717 064c 1846     		mov	r0, r3
 4718 064e FFF7FEFF 		bl	__aeabi_f2d
 4719 0652 0246     		mov	r2, r0
 4720 0654 0B46     		mov	r3, r1
 4721 0656 40F20000 		movw	r0, #:lower16:.LC111
 4722 065a C0F20000 		movt	r0, #:upper16:.LC111
 4723 065e FFF7FEFF 		bl	printf
1049:.\console.c   **** 			printf(" (%4.3f [deg/sec])", (float)(pan_joy_delta * SAMPLING_FREQ) / pan_axis.param.resolution.
 4724              		.loc 1 1049 0
 4725 0662 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4726 0666 4FF40041 		mov	r1, #32768
 4727 066a C4F2BB41 		movt	r1, 17595
 4728 066e FFF7FEFF 		bl	__aeabi_fmul
 4729 0672 0346     		mov	r3, r0
 4730 0674 1A46     		mov	r2, r3
 4731 0676 40F20003 		movw	r3, #:lower16:pan_axis
 4732 067a C0F20003 		movt	r3, #:upper16:pan_axis
 4733 067e DB68     		ldr	r3, [r3, #12]	@ float
 4734 0680 1046     		mov	r0, r2
 4735 0682 1946     		mov	r1, r3
 4736 0684 FFF7FEFF 		bl	__aeabi_fdiv
 4737 0688 0346     		mov	r3, r0
 4738 068a 1846     		mov	r0, r3
 4739 068c FFF7FEFF 		bl	__aeabi_f2d
 4740 0690 0246     		mov	r2, r0
 4741 0692 0B46     		mov	r3, r1
 4742 0694 40F20000 		movw	r0, #:lower16:.LC112
 4743 0698 C0F20000 		movt	r0, #:upper16:.LC112
 4744 069c FFF7FEFF 		bl	printf
1050:.\console.c   **** 			printf("\r\n");
 4745              		.loc 1 1050 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 149


 4746 06a0 40F20000 		movw	r0, #:lower16:.LC42
 4747 06a4 C0F20000 		movt	r0, #:upper16:.LC42
 4748 06a8 FFF7FEFF 		bl	puts
1051:.\console.c   **** 			
1052:.\console.c   **** 			/* internal one-key getchar */
1053:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 4749              		.loc 1 1053 0
 4750 06ac FFF7FEFF 		bl	UART_USB_GetChar
 4751 06b0 0346     		mov	r3, r0
 4752 06b2 87F81231 		strb	r3, [r7, #274]
1054:.\console.c   **** 			
1055:.\console.c   **** 			if 	((get_key == 'a') || (get_key == 'A'))
 4753              		.loc 1 1055 0
 4754 06b6 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4755 06ba 612B     		cmp	r3, #97
 4756 06bc 03D0     		beq	.L166
 4757              		.loc 1 1055 0 is_stmt 0 discriminator 1
 4758 06be 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4759 06c2 412B     		cmp	r3, #65
 4760 06c4 0DD1     		bne	.L167
 4761              	.L166:
1056:.\console.c   **** 			{	
1057:.\console.c   **** 				pan_joy_delta = pan_joy_delta + VJOYSTICK_SPEED;
 4762              		.loc 1 1057 0 is_stmt 1
 4763 06c6 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4764 06ca 4FF07E51 		mov	r1, #1065353216
 4765 06ce FFF7FEFF 		bl	__aeabi_fadd
 4766 06d2 0346     		mov	r3, r0
 4767 06d4 C7F80C31 		str	r3, [r7, #268]	@ float
1058:.\console.c   **** 				get_key = 0; //stay in while loop
 4768              		.loc 1 1058 0
 4769 06d8 4FF00003 		mov	r3, #0
 4770 06dc 87F81231 		strb	r3, [r7, #274]
 4771 06e0 25E0     		b	.L168
 4772              	.L167:
1059:.\console.c   **** 			}
1060:.\console.c   **** 			else if 	((get_key == 'd') || (get_key == 'D'))
 4773              		.loc 1 1060 0
 4774 06e2 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4775 06e6 642B     		cmp	r3, #100
 4776 06e8 03D0     		beq	.L169
 4777              		.loc 1 1060 0 is_stmt 0 discriminator 1
 4778 06ea 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4779 06ee 442B     		cmp	r3, #68
 4780 06f0 0DD1     		bne	.L170
 4781              	.L169:
1061:.\console.c   **** 			{	
1062:.\console.c   **** 				pan_joy_delta = pan_joy_delta - VJOYSTICK_SPEED;
 4782              		.loc 1 1062 0 is_stmt 1
 4783 06f2 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4784 06f6 4FF07E51 		mov	r1, #1065353216
 4785 06fa FFF7FEFF 		bl	__aeabi_fsub
 4786 06fe 0346     		mov	r3, r0
 4787 0700 C7F80C31 		str	r3, [r7, #268]	@ float
1063:.\console.c   **** 				get_key = 0; //stay in while loop
 4788              		.loc 1 1063 0
 4789 0704 4FF00003 		mov	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 150


 4790 0708 87F81231 		strb	r3, [r7, #274]
 4791 070c 0FE0     		b	.L168
 4792              	.L170:
1064:.\console.c   **** 			}
1065:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 4793              		.loc 1 1065 0
 4794 070e 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4795 0712 732B     		cmp	r3, #115
 4796 0714 03D0     		beq	.L171
 4797              		.loc 1 1065 0 is_stmt 0 discriminator 1
 4798 0716 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4799 071a 532B     		cmp	r3, #83
 4800 071c 07D1     		bne	.L168
 4801              	.L171:
1066:.\console.c   **** 			{	
1067:.\console.c   **** 				pan_joy_delta  = 0;
 4802              		.loc 1 1067 0 is_stmt 1
 4803 071e 4FF00003 		mov	r3, #0
 4804 0722 C7F80C31 		str	r3, [r7, #268]	@ float
1068:.\console.c   **** 				get_key = 0; //stay in while loop
 4805              		.loc 1 1068 0
 4806 0726 4FF00003 		mov	r3, #0
 4807 072a 87F81231 		strb	r3, [r7, #274]
 4808              	.L168:
1069:.\console.c   **** 			}
1070:.\console.c   **** 			
1071:.\console.c   **** 			pan_axis.mc.master_joy_sample_delta = (int32)pan_joy_delta;	//Make Pan Virtual Joystick
 4809              		.loc 1 1071 0
 4810 072e D7F80C01 		ldr	r0, [r7, #268]	@ float
 4811 0732 FFF7FEFF 		bl	__aeabi_f2iz
 4812 0736 0246     		mov	r2, r0
 4813 0738 40F20003 		movw	r3, #:lower16:pan_axis
 4814 073c C0F20003 		movt	r3, #:upper16:pan_axis
 4815 0740 1A64     		str	r2, [r3, #64]
 4816              	.L165:
1043:.\console.c   **** 		while (get_key == 0)						
 4817              		.loc 1 1043 0 discriminator 1
 4818 0742 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4819 0746 002B     		cmp	r3, #0
 4820 0748 3FF455AF 		beq	.L172
1072:.\console.c   **** 		}
1073:.\console.c   **** 
1074:.\console.c   **** 		pan_axis.mc.master_joy_sample_delta = 0;							//stop Pan Virtual Joystick
 4821              		.loc 1 1074 0
 4822 074c 40F20003 		movw	r3, #:lower16:pan_axis
 4823 0750 C0F20003 		movt	r3, #:upper16:pan_axis
 4824 0754 4FF00002 		mov	r2, #0
 4825 0758 1A64     		str	r2, [r3, #64]
1075:.\console.c   **** 	
1076:.\console.c   **** 		goto exitpars;
 4826              		.loc 1 1076 0
 4827 075a 06F0BBBE 		b	.L131
 4828              	.L164:
 4829              	.LBE3:
1077:.\console.c   **** 	}
1078:.\console.c   **** 	/* END CMD VIRTUAL PAN JOYSTICK */
1079:.\console.c   **** 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 151


1080:.\console.c   **** 	
1081:.\console.c   **** 	/* CMD VIRTUAL TILT JOYSTICK */
1082:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyt") == 0) ||
 4830              		.loc 1 1082 0
 4831 075e 40F20000 		movw	r0, #:lower16:actual_cmd
 4832 0762 C0F20000 		movt	r0, #:upper16:actual_cmd
 4833 0766 40F20001 		movw	r1, #:lower16:.LC113
 4834 076a C0F20001 		movt	r1, #:upper16:.LC113
 4835 076e FFF7FEFF 		bl	strcmp
 4836 0772 0346     		mov	r3, r0
 4837 0774 002B     		cmp	r3, #0
 4838 0776 0DD0     		beq	.L173
1083:.\console.c   **** 		(strcmp(actual_cmd.action, "vjt") == 0))
 4839              		.loc 1 1083 0 discriminator 1
 4840 0778 40F20000 		movw	r0, #:lower16:actual_cmd
 4841 077c C0F20000 		movt	r0, #:upper16:actual_cmd
 4842 0780 40F20001 		movw	r1, #:lower16:.LC114
 4843 0784 C0F20001 		movt	r1, #:upper16:.LC114
 4844 0788 FFF7FEFF 		bl	strcmp
 4845 078c 0346     		mov	r3, r0
1082:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyt") == 0) ||
 4846              		.loc 1 1082 0 discriminator 1
 4847 078e 002B     		cmp	r3, #0
 4848 0790 40F0C880 		bne	.L174
 4849              	.L173:
 4850              	.LBB4:
1084:.\console.c   **** 	{
1085:.\console.c   **** 		float tilt_joy_delta = 0;
 4851              		.loc 1 1085 0
 4852 0794 4FF00003 		mov	r3, #0
 4853 0798 C7F80831 		str	r3, [r7, #264]	@ float
1086:.\console.c   **** 		
1087:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 4854              		.loc 1 1087 0
 4855 079c 4FF00003 		mov	r3, #0
 4856 07a0 87F81231 		strb	r3, [r7, #274]
1088:.\console.c   **** 		while (get_key == 0)						
 4857              		.loc 1 1088 0
 4858 07a4 B0E0     		b	.L175
 4859              	.L722:
 4860 07a6 00BF     		.align	2
 4861              	.L721:
 4862 07a8 0F000000 		.word	actual_cmd+15
 4863              	.L182:
1089:.\console.c   **** 		{	
1090:.\console.c   **** 			printf("TILT: enc(t)=%+ld [step]", (int32)tilt_axis.mc.slave_enc.position);
 4864              		.loc 1 1090 0
 4865 07ac 40F20003 		movw	r3, #:lower16:tilt_axis
 4866 07b0 C0F20003 		movt	r3, #:upper16:tilt_axis
 4867 07b4 5B6C     		ldr	r3, [r3, #68]
 4868 07b6 40F20000 		movw	r0, #:lower16:.LC115
 4869 07ba C0F20000 		movt	r0, #:upper16:.LC115
 4870 07be 1946     		mov	r1, r3
 4871 07c0 FFF7FEFF 		bl	printf
1091:.\console.c   **** 			printf("   abs_pos(t)=%+ld [step] ", (int32)tilt_absolute_sensor.position);	
 4872              		.loc 1 1091 0
 4873 07c4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 152


 4874 07c8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 4875 07cc 5B68     		ldr	r3, [r3, #4]	@ float
 4876 07ce 1846     		mov	r0, r3
 4877 07d0 FFF7FEFF 		bl	__aeabi_f2iz
 4878 07d4 0346     		mov	r3, r0
 4879 07d6 40F20000 		movw	r0, #:lower16:.LC110
 4880 07da C0F20000 		movt	r0, #:upper16:.LC110
 4881 07de 1946     		mov	r1, r3
 4882 07e0 FFF7FEFF 		bl	printf
1092:.\console.c   **** 			ShowLimits(&tilt_axis);
 4883              		.loc 1 1092 0
 4884 07e4 40F20000 		movw	r0, #:lower16:tilt_axis
 4885 07e8 C0F20000 		movt	r0, #:upper16:tilt_axis
 4886 07ec FFF7FEFF 		bl	ShowLimits
1093:.\console.c   **** 			printf("   vjoy(t)=%4.0f [step/sec]", (float)tilt_joy_delta * SAMPLING_FREQ);
 4887              		.loc 1 1093 0
 4888 07f0 D7F80801 		ldr	r0, [r7, #264]	@ float
 4889 07f4 4FF40041 		mov	r1, #32768
 4890 07f8 C4F2BB41 		movt	r1, 17595
 4891 07fc FFF7FEFF 		bl	__aeabi_fmul
 4892 0800 0346     		mov	r3, r0
 4893 0802 1846     		mov	r0, r3
 4894 0804 FFF7FEFF 		bl	__aeabi_f2d
 4895 0808 0246     		mov	r2, r0
 4896 080a 0B46     		mov	r3, r1
 4897 080c 40F20000 		movw	r0, #:lower16:.LC111
 4898 0810 C0F20000 		movt	r0, #:upper16:.LC111
 4899 0814 FFF7FEFF 		bl	printf
1094:.\console.c   **** 			printf(" (%4.3f [deg/sec])", (float)(tilt_joy_delta * SAMPLING_FREQ * 360) / tilt_axis.param.res
 4900              		.loc 1 1094 0
 4901 0818 D7F80801 		ldr	r0, [r7, #264]	@ float
 4902 081c 4FF40041 		mov	r1, #32768
 4903 0820 C4F2BB41 		movt	r1, 17595
 4904 0824 FFF7FEFF 		bl	__aeabi_fmul
 4905 0828 0346     		mov	r3, r0
 4906 082a 1846     		mov	r0, r3
 4907 082c 4FF00001 		mov	r1, #0
 4908 0830 C4F2B431 		movt	r1, 17332
 4909 0834 FFF7FEFF 		bl	__aeabi_fmul
 4910 0838 0346     		mov	r3, r0
 4911 083a 1A46     		mov	r2, r3
 4912 083c 40F20003 		movw	r3, #:lower16:tilt_axis
 4913 0840 C0F20003 		movt	r3, #:upper16:tilt_axis
 4914 0844 DB68     		ldr	r3, [r3, #12]	@ float
 4915 0846 1046     		mov	r0, r2
 4916 0848 1946     		mov	r1, r3
 4917 084a FFF7FEFF 		bl	__aeabi_fdiv
 4918 084e 0346     		mov	r3, r0
 4919 0850 1846     		mov	r0, r3
 4920 0852 FFF7FEFF 		bl	__aeabi_f2d
 4921 0856 0246     		mov	r2, r0
 4922 0858 0B46     		mov	r3, r1
 4923 085a 40F20000 		movw	r0, #:lower16:.LC112
 4924 085e C0F20000 		movt	r0, #:upper16:.LC112
 4925 0862 FFF7FEFF 		bl	printf
1095:.\console.c   **** 			printf("\r\n");
 4926              		.loc 1 1095 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 153


 4927 0866 40F20000 		movw	r0, #:lower16:.LC42
 4928 086a C0F20000 		movt	r0, #:upper16:.LC42
 4929 086e FFF7FEFF 		bl	puts
1096:.\console.c   **** 			
1097:.\console.c   **** 			/* internal one-key getchar */
1098:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 4930              		.loc 1 1098 0
 4931 0872 FFF7FEFF 		bl	UART_USB_GetChar
 4932 0876 0346     		mov	r3, r0
 4933 0878 87F81231 		strb	r3, [r7, #274]
1099:.\console.c   **** 			
1100:.\console.c   **** 			if 	((get_key == 'w') || (get_key == 'W'))
 4934              		.loc 1 1100 0
 4935 087c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4936 0880 772B     		cmp	r3, #119
 4937 0882 03D0     		beq	.L176
 4938              		.loc 1 1100 0 is_stmt 0 discriminator 1
 4939 0884 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4940 0888 572B     		cmp	r3, #87
 4941 088a 0DD1     		bne	.L177
 4942              	.L176:
1101:.\console.c   **** 			{	
1102:.\console.c   **** 				tilt_joy_delta = tilt_joy_delta + VJOYSTICK_SPEED;
 4943              		.loc 1 1102 0 is_stmt 1
 4944 088c D7F80801 		ldr	r0, [r7, #264]	@ float
 4945 0890 4FF07E51 		mov	r1, #1065353216
 4946 0894 FFF7FEFF 		bl	__aeabi_fadd
 4947 0898 0346     		mov	r3, r0
 4948 089a C7F80831 		str	r3, [r7, #264]	@ float
1103:.\console.c   **** 				get_key = 0; //stay in while loop
 4949              		.loc 1 1103 0
 4950 089e 4FF00003 		mov	r3, #0
 4951 08a2 87F81231 		strb	r3, [r7, #274]
 4952 08a6 25E0     		b	.L178
 4953              	.L177:
1104:.\console.c   **** 			}
1105:.\console.c   **** 			else if 	((get_key == 'z') || (get_key == 'Z'))
 4954              		.loc 1 1105 0
 4955 08a8 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4956 08ac 7A2B     		cmp	r3, #122
 4957 08ae 03D0     		beq	.L179
 4958              		.loc 1 1105 0 is_stmt 0 discriminator 1
 4959 08b0 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4960 08b4 5A2B     		cmp	r3, #90
 4961 08b6 0DD1     		bne	.L180
 4962              	.L179:
1106:.\console.c   **** 			{	
1107:.\console.c   **** 				tilt_joy_delta = tilt_joy_delta - VJOYSTICK_SPEED;
 4963              		.loc 1 1107 0 is_stmt 1
 4964 08b8 D7F80801 		ldr	r0, [r7, #264]	@ float
 4965 08bc 4FF07E51 		mov	r1, #1065353216
 4966 08c0 FFF7FEFF 		bl	__aeabi_fsub
 4967 08c4 0346     		mov	r3, r0
 4968 08c6 C7F80831 		str	r3, [r7, #264]	@ float
1108:.\console.c   **** 				get_key = 0; //stay in while loop
 4969              		.loc 1 1108 0
 4970 08ca 4FF00003 		mov	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 154


 4971 08ce 87F81231 		strb	r3, [r7, #274]
 4972 08d2 0FE0     		b	.L178
 4973              	.L180:
1109:.\console.c   **** 			}
1110:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 4974              		.loc 1 1110 0
 4975 08d4 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4976 08d8 732B     		cmp	r3, #115
 4977 08da 03D0     		beq	.L181
 4978              		.loc 1 1110 0 is_stmt 0 discriminator 1
 4979 08dc 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4980 08e0 532B     		cmp	r3, #83
 4981 08e2 07D1     		bne	.L178
 4982              	.L181:
1111:.\console.c   **** 			{	
1112:.\console.c   **** 				tilt_joy_delta  = 0;
 4983              		.loc 1 1112 0 is_stmt 1
 4984 08e4 4FF00003 		mov	r3, #0
 4985 08e8 C7F80831 		str	r3, [r7, #264]	@ float
1113:.\console.c   **** 				get_key = 0; //stay in while loop
 4986              		.loc 1 1113 0
 4987 08ec 4FF00003 		mov	r3, #0
 4988 08f0 87F81231 		strb	r3, [r7, #274]
 4989              	.L178:
1114:.\console.c   **** 			}
1115:.\console.c   **** 			
1116:.\console.c   **** 			tilt_axis.mc.master_joy_sample_delta = (int32)tilt_joy_delta;	//Make Tilt Virtual Joystick
 4990              		.loc 1 1116 0
 4991 08f4 D7F80801 		ldr	r0, [r7, #264]	@ float
 4992 08f8 FFF7FEFF 		bl	__aeabi_f2iz
 4993 08fc 0246     		mov	r2, r0
 4994 08fe 40F20003 		movw	r3, #:lower16:tilt_axis
 4995 0902 C0F20003 		movt	r3, #:upper16:tilt_axis
 4996 0906 1A64     		str	r2, [r3, #64]
 4997              	.L175:
1088:.\console.c   **** 		while (get_key == 0)						
 4998              		.loc 1 1088 0 discriminator 1
 4999 0908 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5000 090c 002B     		cmp	r3, #0
 5001 090e 3FF44DAF 		beq	.L182
1117:.\console.c   **** 		}
1118:.\console.c   **** 
1119:.\console.c   **** 		tilt_axis.mc.master_joy_sample_delta = 0;							//stop Tilt Virtual Joystick
 5002              		.loc 1 1119 0
 5003 0912 40F20003 		movw	r3, #:lower16:tilt_axis
 5004 0916 C0F20003 		movt	r3, #:upper16:tilt_axis
 5005 091a 4FF00002 		mov	r2, #0
 5006 091e 1A64     		str	r2, [r3, #64]
1120:.\console.c   **** 	
1121:.\console.c   **** 		goto exitpars;
 5007              		.loc 1 1121 0
 5008 0920 06F0D8BD 		b	.L131
 5009              	.L174:
 5010              	.LBE4:
1122:.\console.c   **** 	}
1123:.\console.c   **** 	/* END CMD VIRTUAL TILT JOYSTICK */
1124:.\console.c   **** 	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 155


1125:.\console.c   **** 	
1126:.\console.c   **** 	/* CMD VIRTUAL PAN + TILT JOYSTICK */
1127:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoy") == 0) ||
 5011              		.loc 1 1127 0
 5012 0924 40F20000 		movw	r0, #:lower16:actual_cmd
 5013 0928 C0F20000 		movt	r0, #:upper16:actual_cmd
 5014 092c 40F20001 		movw	r1, #:lower16:.LC116
 5015 0930 C0F20001 		movt	r1, #:upper16:.LC116
 5016 0934 FFF7FEFF 		bl	strcmp
 5017 0938 0346     		mov	r3, r0
 5018 093a 002B     		cmp	r3, #0
 5019 093c 0DD0     		beq	.L183
1128:.\console.c   **** 		(strcmp(actual_cmd.action, "vj") == 0))
 5020              		.loc 1 1128 0 discriminator 1
 5021 093e 40F20000 		movw	r0, #:lower16:actual_cmd
 5022 0942 C0F20000 		movt	r0, #:upper16:actual_cmd
 5023 0946 40F20001 		movw	r1, #:lower16:.LC117
 5024 094a C0F20001 		movt	r1, #:upper16:.LC117
 5025 094e FFF7FEFF 		bl	strcmp
 5026 0952 0346     		mov	r3, r0
1127:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoy") == 0) ||
 5027              		.loc 1 1127 0 discriminator 1
 5028 0954 002B     		cmp	r3, #0
 5029 0956 40F03981 		bne	.L184
 5030              	.L183:
 5031              	.LBB5:
1129:.\console.c   **** 	{
1130:.\console.c   **** 		float pan_joy_delta = 0;		
 5032              		.loc 1 1130 0
 5033 095a 4FF00003 		mov	r3, #0
 5034 095e C7F80431 		str	r3, [r7, #260]	@ float
1131:.\console.c   **** 		float tilt_joy_delta = 0;
 5035              		.loc 1 1131 0
 5036 0962 4FF00003 		mov	r3, #0
 5037 0966 C7F80031 		str	r3, [r7, #256]	@ float
1132:.\console.c   **** 		
1133:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 5038              		.loc 1 1133 0
 5039 096a 4FF00003 		mov	r3, #0
 5040 096e 87F81231 		strb	r3, [r7, #274]
1134:.\console.c   **** 		while (get_key == 0)						
 5041              		.loc 1 1134 0
 5042 0972 16E1     		b	.L185
 5043              	.L204:
1135:.\console.c   **** 		{						
1136:.\console.c   **** 			printf("PAN: ");
 5044              		.loc 1 1136 0
 5045 0974 40F20000 		movw	r0, #:lower16:.LC118
 5046 0978 C0F20000 		movt	r0, #:upper16:.LC118
 5047 097c FFF7FEFF 		bl	printf
1137:.\console.c   **** 			ShowLimits(&pan_axis);
 5048              		.loc 1 1137 0
 5049 0980 40F20000 		movw	r0, #:lower16:pan_axis
 5050 0984 C0F20000 		movt	r0, #:upper16:pan_axis
 5051 0988 FFF7FEFF 		bl	ShowLimits
1138:.\console.c   **** 			printf("vjoy(t)=%4.0f [step/sec]", (float)pan_joy_delta * SAMPLING_FREQ);
 5052              		.loc 1 1138 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 156


 5053 098c D7F80401 		ldr	r0, [r7, #260]	@ float
 5054 0990 4FF40041 		mov	r1, #32768
 5055 0994 C4F2BB41 		movt	r1, 17595
 5056 0998 FFF7FEFF 		bl	__aeabi_fmul
 5057 099c 0346     		mov	r3, r0
 5058 099e 1846     		mov	r0, r3
 5059 09a0 FFF7FEFF 		bl	__aeabi_f2d
 5060 09a4 0246     		mov	r2, r0
 5061 09a6 0B46     		mov	r3, r1
 5062 09a8 40F20000 		movw	r0, #:lower16:.LC119
 5063 09ac C0F20000 		movt	r0, #:upper16:.LC119
 5064 09b0 FFF7FEFF 		bl	printf
1139:.\console.c   **** 			printf(" (%5.4f [A])", (float)pan_axis.mc.current);	
 5065              		.loc 1 1139 0
 5066 09b4 40F20003 		movw	r3, #:lower16:pan_axis
 5067 09b8 C0F20003 		movt	r3, #:upper16:pan_axis
 5068 09bc 9B6F     		ldr	r3, [r3, #120]	@ float
 5069 09be 1846     		mov	r0, r3
 5070 09c0 FFF7FEFF 		bl	__aeabi_f2d
 5071 09c4 0246     		mov	r2, r0
 5072 09c6 0B46     		mov	r3, r1
 5073 09c8 40F20000 		movw	r0, #:lower16:.LC120
 5074 09cc C0F20000 		movt	r0, #:upper16:.LC120
 5075 09d0 FFF7FEFF 		bl	printf
1140:.\console.c   **** 			
1141:.\console.c   **** 			printf("    TILT: ");
 5076              		.loc 1 1141 0
 5077 09d4 40F20000 		movw	r0, #:lower16:.LC121
 5078 09d8 C0F20000 		movt	r0, #:upper16:.LC121
 5079 09dc FFF7FEFF 		bl	printf
1142:.\console.c   **** 			ShowLimits(&tilt_axis);
 5080              		.loc 1 1142 0
 5081 09e0 40F20000 		movw	r0, #:lower16:tilt_axis
 5082 09e4 C0F20000 		movt	r0, #:upper16:tilt_axis
 5083 09e8 FFF7FEFF 		bl	ShowLimits
1143:.\console.c   **** 			printf("vjoy(t)=%4.0f [step/sec]", (float)tilt_joy_delta * SAMPLING_FREQ);
 5084              		.loc 1 1143 0
 5085 09ec D7F80001 		ldr	r0, [r7, #256]	@ float
 5086 09f0 4FF40041 		mov	r1, #32768
 5087 09f4 C4F2BB41 		movt	r1, 17595
 5088 09f8 FFF7FEFF 		bl	__aeabi_fmul
 5089 09fc 0346     		mov	r3, r0
 5090 09fe 1846     		mov	r0, r3
 5091 0a00 FFF7FEFF 		bl	__aeabi_f2d
 5092 0a04 0246     		mov	r2, r0
 5093 0a06 0B46     		mov	r3, r1
 5094 0a08 40F20000 		movw	r0, #:lower16:.LC119
 5095 0a0c C0F20000 		movt	r0, #:upper16:.LC119
 5096 0a10 FFF7FEFF 		bl	printf
1144:.\console.c   **** 			printf(" (%5.4f [A])", (float)tilt_axis.mc.current);			
 5097              		.loc 1 1144 0
 5098 0a14 40F20003 		movw	r3, #:lower16:tilt_axis
 5099 0a18 C0F20003 		movt	r3, #:upper16:tilt_axis
 5100 0a1c 9B6F     		ldr	r3, [r3, #120]	@ float
 5101 0a1e 1846     		mov	r0, r3
 5102 0a20 FFF7FEFF 		bl	__aeabi_f2d
 5103 0a24 0246     		mov	r2, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 157


 5104 0a26 0B46     		mov	r3, r1
 5105 0a28 40F20000 		movw	r0, #:lower16:.LC120
 5106 0a2c C0F20000 		movt	r0, #:upper16:.LC120
 5107 0a30 FFF7FEFF 		bl	printf
1145:.\console.c   **** 			printf("\r\n");
 5108              		.loc 1 1145 0
 5109 0a34 40F20000 		movw	r0, #:lower16:.LC42
 5110 0a38 C0F20000 		movt	r0, #:upper16:.LC42
 5111 0a3c FFF7FEFF 		bl	puts
1146:.\console.c   **** 			
1147:.\console.c   **** 			/* internal one-key getchar */
1148:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 5112              		.loc 1 1148 0
 5113 0a40 FFF7FEFF 		bl	UART_USB_GetChar
 5114 0a44 0346     		mov	r3, r0
 5115 0a46 87F81231 		strb	r3, [r7, #274]
1149:.\console.c   **** 			
1150:.\console.c   **** 			if 	((get_key == 'a') || (get_key == 'A'))
 5116              		.loc 1 1150 0
 5117 0a4a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5118 0a4e 612B     		cmp	r3, #97
 5119 0a50 03D0     		beq	.L186
 5120              		.loc 1 1150 0 is_stmt 0 discriminator 1
 5121 0a52 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5122 0a56 412B     		cmp	r3, #65
 5123 0a58 18D1     		bne	.L187
 5124              	.L186:
1151:.\console.c   **** 			{	
1152:.\console.c   **** 				//risoluzione encoder = 4096 step/giro
1153:.\console.c   **** 				//1330rpm/V  (a vuoto) --> 9310rpm su 7V --> 155 giri/sec * 4096 step/giro --> 635562 step/sec 
1154:.\console.c   **** 				//però sembrano troppi quindi metto 30 (30*1500=45000)
1155:.\console.c   **** 				if (pan_joy_delta < 100)
 5125              		.loc 1 1155 0 is_stmt 1
 5126 0a5a D7F80401 		ldr	r0, [r7, #260]	@ float
 5127 0a5e 4FF00001 		mov	r1, #0
 5128 0a62 C4F2C821 		movt	r1, 17096
 5129 0a66 FFF7FEFF 		bl	__aeabi_fcmplt
 5130 0a6a 0346     		mov	r3, r0
 5131 0a6c 002B     		cmp	r3, #0
 5132 0a6e 08D0     		beq	.L188
 5133              	.L651:
1156:.\console.c   **** 				{
1157:.\console.c   **** 					pan_joy_delta = pan_joy_delta + VJOYSTICK_SPEED;
 5134              		.loc 1 1157 0
 5135 0a70 D7F80401 		ldr	r0, [r7, #260]	@ float
 5136 0a74 4FF07E51 		mov	r1, #1065353216
 5137 0a78 FFF7FEFF 		bl	__aeabi_fadd
 5138 0a7c 0346     		mov	r3, r0
 5139 0a7e C7F80431 		str	r3, [r7, #260]	@ float
 5140              	.L188:
1158:.\console.c   **** 				}
1159:.\console.c   **** 				get_key = 0; //stay in while loop
 5141              		.loc 1 1159 0
 5142 0a82 4FF00003 		mov	r3, #0
 5143 0a86 87F81231 		strb	r3, [r7, #274]
 5144 0a8a 76E0     		b	.L190
 5145              	.L187:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 158


1160:.\console.c   **** 			}
1161:.\console.c   **** 			else if 	((get_key == 'd') || (get_key == 'D'))
 5146              		.loc 1 1161 0
 5147 0a8c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5148 0a90 642B     		cmp	r3, #100
 5149 0a92 03D0     		beq	.L191
 5150              		.loc 1 1161 0 is_stmt 0 discriminator 1
 5151 0a94 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5152 0a98 442B     		cmp	r3, #68
 5153 0a9a 18D1     		bne	.L192
 5154              	.L191:
1162:.\console.c   **** 			{	
1163:.\console.c   **** 				if (pan_joy_delta > -100)
 5155              		.loc 1 1163 0 is_stmt 1
 5156 0a9c D7F80401 		ldr	r0, [r7, #260]	@ float
 5157 0aa0 4FF00001 		mov	r1, #0
 5158 0aa4 CCF2C821 		movt	r1, 49864
 5159 0aa8 FFF7FEFF 		bl	__aeabi_fcmpgt
 5160 0aac 0346     		mov	r3, r0
 5161 0aae 002B     		cmp	r3, #0
 5162 0ab0 08D0     		beq	.L193
 5163              	.L652:
1164:.\console.c   **** 				{
1165:.\console.c   **** 					pan_joy_delta = pan_joy_delta - VJOYSTICK_SPEED;
 5164              		.loc 1 1165 0
 5165 0ab2 D7F80401 		ldr	r0, [r7, #260]	@ float
 5166 0ab6 4FF07E51 		mov	r1, #1065353216
 5167 0aba FFF7FEFF 		bl	__aeabi_fsub
 5168 0abe 0346     		mov	r3, r0
 5169 0ac0 C7F80431 		str	r3, [r7, #260]	@ float
 5170              	.L193:
1166:.\console.c   **** 				}
1167:.\console.c   **** 				get_key = 0; //stay in while loop
 5171              		.loc 1 1167 0
 5172 0ac4 4FF00003 		mov	r3, #0
 5173 0ac8 87F81231 		strb	r3, [r7, #274]
 5174 0acc 55E0     		b	.L190
 5175              	.L192:
1168:.\console.c   **** 			}			
1169:.\console.c   **** 			else if 	((get_key == 'w') || (get_key == 'W'))
 5176              		.loc 1 1169 0
 5177 0ace 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5178 0ad2 772B     		cmp	r3, #119
 5179 0ad4 03D0     		beq	.L195
 5180              		.loc 1 1169 0 is_stmt 0 discriminator 1
 5181 0ad6 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5182 0ada 572B     		cmp	r3, #87
 5183 0adc 18D1     		bne	.L196
 5184              	.L195:
1170:.\console.c   **** 			{	
1171:.\console.c   **** 				if (tilt_joy_delta < 100)
 5185              		.loc 1 1171 0 is_stmt 1
 5186 0ade D7F80001 		ldr	r0, [r7, #256]	@ float
 5187 0ae2 4FF00001 		mov	r1, #0
 5188 0ae6 C4F2C821 		movt	r1, 17096
 5189 0aea FFF7FEFF 		bl	__aeabi_fcmplt
 5190 0aee 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 159


 5191 0af0 002B     		cmp	r3, #0
 5192 0af2 08D0     		beq	.L197
 5193              	.L653:
1172:.\console.c   **** 				{				
1173:.\console.c   **** 					tilt_joy_delta = tilt_joy_delta + VJOYSTICK_SPEED;
 5194              		.loc 1 1173 0
 5195 0af4 D7F80001 		ldr	r0, [r7, #256]	@ float
 5196 0af8 4FF07E51 		mov	r1, #1065353216
 5197 0afc FFF7FEFF 		bl	__aeabi_fadd
 5198 0b00 0346     		mov	r3, r0
 5199 0b02 C7F80031 		str	r3, [r7, #256]	@ float
 5200              	.L197:
1174:.\console.c   **** 				}
1175:.\console.c   **** 				get_key = 0; //stay in while loop
 5201              		.loc 1 1175 0
 5202 0b06 4FF00003 		mov	r3, #0
 5203 0b0a 87F81231 		strb	r3, [r7, #274]
 5204 0b0e 34E0     		b	.L190
 5205              	.L196:
1176:.\console.c   **** 			}
1177:.\console.c   **** 			else if 	((get_key == 'z') || (get_key == 'Z'))
 5206              		.loc 1 1177 0
 5207 0b10 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5208 0b14 7A2B     		cmp	r3, #122
 5209 0b16 03D0     		beq	.L199
 5210              		.loc 1 1177 0 is_stmt 0 discriminator 1
 5211 0b18 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5212 0b1c 5A2B     		cmp	r3, #90
 5213 0b1e 18D1     		bne	.L200
 5214              	.L199:
1178:.\console.c   **** 			{	
1179:.\console.c   **** 				if (tilt_joy_delta > -100)
 5215              		.loc 1 1179 0 is_stmt 1
 5216 0b20 D7F80001 		ldr	r0, [r7, #256]	@ float
 5217 0b24 4FF00001 		mov	r1, #0
 5218 0b28 CCF2C821 		movt	r1, 49864
 5219 0b2c FFF7FEFF 		bl	__aeabi_fcmpgt
 5220 0b30 0346     		mov	r3, r0
 5221 0b32 002B     		cmp	r3, #0
 5222 0b34 08D0     		beq	.L201
 5223              	.L654:
1180:.\console.c   **** 				{					
1181:.\console.c   **** 					tilt_joy_delta = tilt_joy_delta - VJOYSTICK_SPEED;
 5224              		.loc 1 1181 0
 5225 0b36 D7F80001 		ldr	r0, [r7, #256]	@ float
 5226 0b3a 4FF07E51 		mov	r1, #1065353216
 5227 0b3e FFF7FEFF 		bl	__aeabi_fsub
 5228 0b42 0346     		mov	r3, r0
 5229 0b44 C7F80031 		str	r3, [r7, #256]	@ float
 5230              	.L201:
1182:.\console.c   **** 				}
1183:.\console.c   **** 				get_key = 0; //stay in while loop
 5231              		.loc 1 1183 0
 5232 0b48 4FF00003 		mov	r3, #0
 5233 0b4c 87F81231 		strb	r3, [r7, #274]
 5234 0b50 13E0     		b	.L190
 5235              	.L200:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 160


1184:.\console.c   **** 			}
1185:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 5236              		.loc 1 1185 0
 5237 0b52 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5238 0b56 732B     		cmp	r3, #115
 5239 0b58 03D0     		beq	.L203
 5240              		.loc 1 1185 0 is_stmt 0 discriminator 1
 5241 0b5a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5242 0b5e 532B     		cmp	r3, #83
 5243 0b60 0BD1     		bne	.L190
 5244              	.L203:
1186:.\console.c   **** 			{	
1187:.\console.c   **** 				pan_joy_delta   = 0;
 5245              		.loc 1 1187 0 is_stmt 1
 5246 0b62 4FF00003 		mov	r3, #0
 5247 0b66 C7F80431 		str	r3, [r7, #260]	@ float
1188:.\console.c   **** 				tilt_joy_delta  = 0;
 5248              		.loc 1 1188 0
 5249 0b6a 4FF00003 		mov	r3, #0
 5250 0b6e C7F80031 		str	r3, [r7, #256]	@ float
1189:.\console.c   **** 				get_key = 0; //stay in while loop
 5251              		.loc 1 1189 0
 5252 0b72 4FF00003 		mov	r3, #0
 5253 0b76 87F81231 		strb	r3, [r7, #274]
 5254              	.L190:
1190:.\console.c   **** 			}
1191:.\console.c   **** 			
1192:.\console.c   **** 			pan_axis.mc.master_joy_sample_delta  = (int32)pan_joy_delta;	//Make Pan  Virtual Joystick			
 5255              		.loc 1 1192 0
 5256 0b7a D7F80401 		ldr	r0, [r7, #260]	@ float
 5257 0b7e FFF7FEFF 		bl	__aeabi_f2iz
 5258 0b82 0246     		mov	r2, r0
 5259 0b84 40F20003 		movw	r3, #:lower16:pan_axis
 5260 0b88 C0F20003 		movt	r3, #:upper16:pan_axis
 5261 0b8c 1A64     		str	r2, [r3, #64]
1193:.\console.c   **** 			tilt_axis.mc.master_joy_sample_delta = (int32)tilt_joy_delta;	//Make Tilt Virtual Joystick
 5262              		.loc 1 1193 0
 5263 0b8e D7F80001 		ldr	r0, [r7, #256]	@ float
 5264 0b92 FFF7FEFF 		bl	__aeabi_f2iz
 5265 0b96 0246     		mov	r2, r0
 5266 0b98 40F20003 		movw	r3, #:lower16:tilt_axis
 5267 0b9c C0F20003 		movt	r3, #:upper16:tilt_axis
 5268 0ba0 1A64     		str	r2, [r3, #64]
 5269              	.L185:
1134:.\console.c   **** 		while (get_key == 0)						
 5270              		.loc 1 1134 0 discriminator 1
 5271 0ba2 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5272 0ba6 002B     		cmp	r3, #0
 5273 0ba8 3FF4E4AE 		beq	.L204
1194:.\console.c   **** 		}
1195:.\console.c   **** 		
1196:.\console.c   **** 		pan_axis.mc.master_joy_sample_delta  = 0;							//stop Pan  Virtual Joystick
 5274              		.loc 1 1196 0
 5275 0bac 40F20003 		movw	r3, #:lower16:pan_axis
 5276 0bb0 C0F20003 		movt	r3, #:upper16:pan_axis
 5277 0bb4 4FF00002 		mov	r2, #0
 5278 0bb8 1A64     		str	r2, [r3, #64]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 161


1197:.\console.c   **** 		tilt_axis.mc.master_joy_sample_delta = 0;							//stop Tilt Virtual Joystick
 5279              		.loc 1 1197 0
 5280 0bba 40F20003 		movw	r3, #:lower16:tilt_axis
 5281 0bbe C0F20003 		movt	r3, #:upper16:tilt_axis
 5282 0bc2 4FF00002 		mov	r2, #0
 5283 0bc6 1A64     		str	r2, [r3, #64]
1198:.\console.c   **** 	
1199:.\console.c   **** 		goto exitpars;
 5284              		.loc 1 1199 0
 5285 0bc8 06F084BC 		b	.L131
 5286              	.L184:
 5287              	.LBE5:
1200:.\console.c   **** 	}
1201:.\console.c   **** 	/* END CMD VIRTUAL PAN+TILT JOYSTICK */	
1202:.\console.c   **** 
1203:.\console.c   **** 	
1204:.\console.c   **** 	/* NOP CMD */	
1205:.\console.c   **** 	if (strlen(actual_cmd.action) == 0)
 5288              		.loc 1 1205 0
 5289 0bcc 40F20003 		movw	r3, #:lower16:actual_cmd
 5290 0bd0 C0F20003 		movt	r3, #:upper16:actual_cmd
 5291 0bd4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5292 0bd6 002B     		cmp	r3, #0
 5293 0bd8 06F06F84 		beq	.L698
 5294              	.L205:
1206:.\console.c   **** 	{
1207:.\console.c   **** 	goto exitpars;
1208:.\console.c   **** 	}
1209:.\console.c   **** 	/* END NOP CMD */
1210:.\console.c   **** 
1211:.\console.c   **** 	
1212:.\console.c   **** 	/* CMD 'VERSION' (alias V) */	
1213:.\console.c   **** 	if (((strcmp(actual_cmd.action, "v") == 0)
 5295              		.loc 1 1213 0
 5296 0bdc 40F20000 		movw	r0, #:lower16:actual_cmd
 5297 0be0 C0F20000 		movt	r0, #:upper16:actual_cmd
 5298 0be4 40F20001 		movw	r1, #:lower16:.LC122
 5299 0be8 C0F20001 		movt	r1, #:upper16:.LC122
 5300 0bec FFF7FEFF 		bl	strcmp
 5301 0bf0 0346     		mov	r3, r0
 5302 0bf2 002B     		cmp	r3, #0
 5303 0bf4 0CD0     		beq	.L206
1214:.\console.c   **** 		|| (strcmp(actual_cmd.action, "version") == 0)))
 5304              		.loc 1 1214 0
 5305 0bf6 40F20000 		movw	r0, #:lower16:actual_cmd
 5306 0bfa C0F20000 		movt	r0, #:upper16:actual_cmd
 5307 0bfe 40F20001 		movw	r1, #:lower16:.LC123
 5308 0c02 C0F20001 		movt	r1, #:upper16:.LC123
 5309 0c06 FFF7FEFF 		bl	strcmp
 5310 0c0a 0346     		mov	r3, r0
 5311 0c0c 002B     		cmp	r3, #0
 5312 0c0e 31D1     		bne	.L207
 5313              	.L206:
1215:.\console.c   **** 	{
1216:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 5314              		.loc 1 1216 0
 5315 0c10 B84B     		ldr	r3, .L723
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 162


 5316 0c12 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5317 0c14 002B     		cmp	r3, #0
 5318 0c16 25D1     		bne	.L208
1217:.\console.c   **** 		{
1218:.\console.c   **** 			printf(STR_FW_VERS);
 5319              		.loc 1 1218 0
 5320 0c18 40F20000 		movw	r0, #:lower16:.LC124
 5321 0c1c C0F20000 		movt	r0, #:upper16:.LC124
 5322 0c20 FFF7FEFF 		bl	puts
1219:.\console.c   **** 			printf(STR_COPY);
 5323              		.loc 1 1219 0
 5324 0c24 40F20000 		movw	r0, #:lower16:.LC125
 5325 0c28 C0F20000 		movt	r0, #:upper16:.LC125
 5326 0c2c FFF7FEFF 		bl	puts
1220:.\console.c   **** 			printf(STR_AUTHOR1);
 5327              		.loc 1 1220 0
 5328 0c30 40F20000 		movw	r0, #:lower16:.LC126
 5329 0c34 C0F20000 		movt	r0, #:upper16:.LC126
 5330 0c38 FFF7FEFF 		bl	puts
1221:.\console.c   **** 			printf(STR_AUTHOR2);
 5331              		.loc 1 1221 0
 5332 0c3c 40F20000 		movw	r0, #:lower16:.LC127
 5333 0c40 C0F20000 		movt	r0, #:upper16:.LC127
 5334 0c44 FFF7FEFF 		bl	puts
1222:.\console.c   **** 			printf(STR_AUTHOR3);
 5335              		.loc 1 1222 0
 5336 0c48 40F20000 		movw	r0, #:lower16:.LC128
 5337 0c4c C0F20000 		movt	r0, #:upper16:.LC128
 5338 0c50 FFF7FEFF 		bl	puts
1223:.\console.c   **** 			printf(STR_AUTHOR4);			
 5339              		.loc 1 1223 0
 5340 0c54 40F20000 		movw	r0, #:lower16:.LC129
 5341 0c58 C0F20000 		movt	r0, #:upper16:.LC129
 5342 0c5c FFF7FEFF 		bl	puts
1224:.\console.c   **** 		}
1225:.\console.c   **** 		else
1226:.\console.c   **** 		{
1227:.\console.c   **** 			printf(STR_ERROR1);
1228:.\console.c   **** 		}
1229:.\console.c   **** 	goto exitpars;
 5343              		.loc 1 1229 0
 5344 0c60 06F038BC 		b	.L131
 5345              	.L208:
1227:.\console.c   **** 			printf(STR_ERROR1);
 5346              		.loc 1 1227 0
 5347 0c64 40F20000 		movw	r0, #:lower16:.LC82
 5348 0c68 C0F20000 		movt	r0, #:upper16:.LC82
 5349 0c6c FFF7FEFF 		bl	printf
 5350              		.loc 1 1229 0
 5351 0c70 06F030BC 		b	.L131
 5352              	.L207:
1230:.\console.c   **** 	}
1231:.\console.c   **** 	/* END CMD VERSION */ 
1232:.\console.c   **** 
1233:.\console.c   **** 
1234:.\console.c   **** 	/* CMD 'PROMPT' */	
1235:.\console.c   **** 	if (strcmp(actual_cmd.action, "prompt") == 0)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 163


 5353              		.loc 1 1235 0
 5354 0c74 40F20000 		movw	r0, #:lower16:actual_cmd
 5355 0c78 C0F20000 		movt	r0, #:upper16:actual_cmd
 5356 0c7c 40F20001 		movw	r1, #:lower16:.LC130
 5357 0c80 C0F20001 		movt	r1, #:upper16:.LC130
 5358 0c84 FFF7FEFF 		bl	strcmp
 5359 0c88 0346     		mov	r3, r0
 5360 0c8a 002B     		cmp	r3, #0
 5361 0c8c 2BD1     		bne	.L210
1236:.\console.c   **** 	{
1237:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 5362              		.loc 1 1237 0
 5363 0c8e 994B     		ldr	r3, .L723
 5364 0c90 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5365 0c92 002B     		cmp	r3, #0
 5366 0c94 1FD1     		bne	.L211
1238:.\console.c   **** 		{
1239:.\console.c   **** 			printf(STR_PROMPT0);
 5367              		.loc 1 1239 0
 5368 0c96 40F20000 		movw	r0, #:lower16:.LC131
 5369 0c9a C0F20000 		movt	r0, #:upper16:.LC131
 5370 0c9e FFF7FEFF 		bl	puts
1240:.\console.c   **** 			printf(STR_PROMPT1);
 5371              		.loc 1 1240 0
 5372 0ca2 40F20000 		movw	r0, #:lower16:.LC132
 5373 0ca6 C0F20000 		movt	r0, #:upper16:.LC132
 5374 0caa FFF7FEFF 		bl	puts
1241:.\console.c   **** 			printf(STR_PROMPT2);
 5375              		.loc 1 1241 0
 5376 0cae 40F20000 		movw	r0, #:lower16:.LC133
 5377 0cb2 C0F20000 		movt	r0, #:upper16:.LC133
 5378 0cb6 FFF7FEFF 		bl	puts
1242:.\console.c   **** 			printf(STR_PROMPT3);
 5379              		.loc 1 1242 0
 5380 0cba 40F20000 		movw	r0, #:lower16:.LC134
 5381 0cbe C0F20000 		movt	r0, #:upper16:.LC134
 5382 0cc2 FFF7FEFF 		bl	puts
1243:.\console.c   **** 			printf(STR_PROMPT4);			
 5383              		.loc 1 1243 0
 5384 0cc6 40F20000 		movw	r0, #:lower16:.LC135
 5385 0cca C0F20000 		movt	r0, #:upper16:.LC135
 5386 0cce FFF7FEFF 		bl	puts
1244:.\console.c   **** 		}
1245:.\console.c   **** 		else
1246:.\console.c   **** 		{
1247:.\console.c   **** 			printf(STR_ERROR1);
1248:.\console.c   **** 		}
1249:.\console.c   **** 	goto exitpars;
 5387              		.loc 1 1249 0
 5388 0cd2 06F0FFBB 		b	.L131
 5389              	.L211:
1247:.\console.c   **** 			printf(STR_ERROR1);
 5390              		.loc 1 1247 0
 5391 0cd6 40F20000 		movw	r0, #:lower16:.LC82
 5392 0cda C0F20000 		movt	r0, #:upper16:.LC82
 5393 0cde FFF7FEFF 		bl	printf
 5394              		.loc 1 1249 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 164


 5395 0ce2 06F0F7BB 		b	.L131
 5396              	.L210:
1250:.\console.c   **** 	}
1251:.\console.c   **** 	/* END CMD PROMPT */ 
1252:.\console.c   **** 
1253:.\console.c   **** 		
1254:.\console.c   **** 	
1255:.\console.c   **** 		/* CMD 'HELP' (alias ?) */
1256:.\console.c   **** 		if ((strcmp(actual_cmd.action, "?") == 0)
 5397              		.loc 1 1256 0
 5398 0ce6 40F20000 		movw	r0, #:lower16:actual_cmd
 5399 0cea C0F20000 		movt	r0, #:upper16:actual_cmd
 5400 0cee 40F20001 		movw	r1, #:lower16:.LC136
 5401 0cf2 C0F20001 		movt	r1, #:upper16:.LC136
 5402 0cf6 FFF7FEFF 		bl	strcmp
 5403 0cfa 0346     		mov	r3, r0
 5404 0cfc 002B     		cmp	r3, #0
 5405 0cfe 1AD0     		beq	.L213
1257:.\console.c   **** 			||(strcmp(actual_cmd.action, "h") == 0)
 5406              		.loc 1 1257 0
 5407 0d00 40F20000 		movw	r0, #:lower16:actual_cmd
 5408 0d04 C0F20000 		movt	r0, #:upper16:actual_cmd
 5409 0d08 40F20001 		movw	r1, #:lower16:.LC137
 5410 0d0c C0F20001 		movt	r1, #:upper16:.LC137
 5411 0d10 FFF7FEFF 		bl	strcmp
 5412 0d14 0346     		mov	r3, r0
 5413 0d16 002B     		cmp	r3, #0
 5414 0d18 0DD0     		beq	.L213
1258:.\console.c   **** 			||(strcmp(actual_cmd.action, "help") == 0))
 5415              		.loc 1 1258 0
 5416 0d1a 40F20000 		movw	r0, #:lower16:actual_cmd
 5417 0d1e C0F20000 		movt	r0, #:upper16:actual_cmd
 5418 0d22 40F20001 		movw	r1, #:lower16:.LC138
 5419 0d26 C0F20001 		movt	r1, #:upper16:.LC138
 5420 0d2a FFF7FEFF 		bl	strcmp
 5421 0d2e 0346     		mov	r3, r0
 5422 0d30 002B     		cmp	r3, #0
 5423 0d32 40F07F84 		bne	.L214
 5424              	.L213:
1259:.\console.c   **** 		{
1260:.\console.c   **** 			if (strlen(actual_cmd.parameter) == 0)
 5425              		.loc 1 1260 0
 5426 0d36 6F4B     		ldr	r3, .L723
 5427 0d38 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5428 0d3a 002B     		cmp	r3, #0
 5429 0d3c 40F0DC80 		bne	.L215
1261:.\console.c   **** 			{
1262:.\console.c   **** 				// HELP "standard" command list
1263:.\console.c   **** 				printf(STR_HELP_PRES1);
 5430              		.loc 1 1263 0
 5431 0d40 40F20000 		movw	r0, #:lower16:.LC139
 5432 0d44 C0F20000 		movt	r0, #:upper16:.LC139
 5433 0d48 FFF7FEFF 		bl	puts
1264:.\console.c   **** 				printf(STR_HELP_PRES4);
 5434              		.loc 1 1264 0
 5435 0d4c 40F20000 		movw	r0, #:lower16:.LC140
 5436 0d50 C0F20000 		movt	r0, #:upper16:.LC140
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 165


 5437 0d54 FFF7FEFF 		bl	puts
1265:.\console.c   **** 				printf(STR_HELP_SHOW1);
 5438              		.loc 1 1265 0
 5439 0d58 40F20000 		movw	r0, #:lower16:.LC141
 5440 0d5c C0F20000 		movt	r0, #:upper16:.LC141
 5441 0d60 FFF7FEFF 		bl	puts
1266:.\console.c   **** 				printf(STR_HELP_SETT1);
 5442              		.loc 1 1266 0
 5443 0d64 40F20000 		movw	r0, #:lower16:.LC142
 5444 0d68 C0F20000 		movt	r0, #:upper16:.LC142
 5445 0d6c FFF7FEFF 		bl	puts
1267:.\console.c   **** 				printf(STR_HELP_PROM1);
 5446              		.loc 1 1267 0
 5447 0d70 40F20000 		movw	r0, #:lower16:.LC143
 5448 0d74 C0F20000 		movt	r0, #:upper16:.LC143
 5449 0d78 FFF7FEFF 		bl	puts
1268:.\console.c   **** 				printf(STR_HELP_BOOT1);				
 5450              		.loc 1 1268 0
 5451 0d7c 40F20000 		movw	r0, #:lower16:.LC144
 5452 0d80 C0F20000 		movt	r0, #:upper16:.LC144
 5453 0d84 FFF7FEFF 		bl	puts
1269:.\console.c   **** 				printf(STR_HELP_VERS1);
 5454              		.loc 1 1269 0
 5455 0d88 40F20000 		movw	r0, #:lower16:.LC145
 5456 0d8c C0F20000 		movt	r0, #:upper16:.LC145
 5457 0d90 FFF7FEFF 		bl	puts
1270:.\console.c   **** 				printf(STR_HELP_HELP0);				
 5458              		.loc 1 1270 0
 5459 0d94 40F20000 		movw	r0, #:lower16:.LC146
 5460 0d98 C0F20000 		movt	r0, #:upper16:.LC146
 5461 0d9c FFF7FEFF 		bl	puts
1271:.\console.c   **** 				printf(STR_HELP_HELP1);						
 5462              		.loc 1 1271 0
 5463 0da0 40F20000 		movw	r0, #:lower16:.LC147
 5464 0da4 C0F20000 		movt	r0, #:upper16:.LC147
 5465 0da8 FFF7FEFF 		bl	puts
1272:.\console.c   **** 				printf(STR_HELP_PRES2);
 5466              		.loc 1 1272 0
 5467 0dac 40F20000 		movw	r0, #:lower16:.LC148
 5468 0db0 C0F20000 		movt	r0, #:upper16:.LC148
 5469 0db4 FFF7FEFF 		bl	puts
1273:.\console.c   **** 				printf("\r\n");		
 5470              		.loc 1 1273 0
 5471 0db8 40F20000 		movw	r0, #:lower16:.LC42
 5472 0dbc C0F20000 		movt	r0, #:upper16:.LC42
 5473 0dc0 FFF7FEFF 		bl	puts
1274:.\console.c   **** 				
1275:.\console.c   **** 				/* Motor Control Command List */
1276:.\console.c   **** 				printf(STR_HELP_PRES5);
 5474              		.loc 1 1276 0
 5475 0dc4 40F20000 		movw	r0, #:lower16:.LC149
 5476 0dc8 C0F20000 		movt	r0, #:upper16:.LC149
 5477 0dcc FFF7FEFF 		bl	puts
1277:.\console.c   **** 				printf(STR_HELP_PRES6);
 5478              		.loc 1 1277 0
 5479 0dd0 40F20000 		movw	r0, #:lower16:.LC150
 5480 0dd4 C0F20000 		movt	r0, #:upper16:.LC150
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 166


 5481 0dd8 FFF7FEFF 		bl	puts
1278:.\console.c   **** 				printf(STR_HELP_ENERG);
 5482              		.loc 1 1278 0
 5483 0ddc 40F20000 		movw	r0, #:lower16:.LC151
 5484 0de0 C0F20000 		movt	r0, #:upper16:.LC151
 5485 0de4 FFF7FEFF 		bl	puts
1279:.\console.c   **** 				printf(STR_HELP_DEENE);				
 5486              		.loc 1 1279 0
 5487 0de8 40F20000 		movw	r0, #:lower16:.LC152
 5488 0dec C0F20000 		movt	r0, #:upper16:.LC152
 5489 0df0 FFF7FEFF 		bl	puts
1280:.\console.c   **** 				printf("\r\n");	
 5490              		.loc 1 1280 0
 5491 0df4 40F20000 		movw	r0, #:lower16:.LC42
 5492 0df8 C0F20000 		movt	r0, #:upper16:.LC42
 5493 0dfc FFF7FEFF 		bl	puts
1281:.\console.c   **** 
1282:.\console.c   **** 				/* Mover Command List		 */
1283:.\console.c   **** 				printf(STR_HELP_MOV01);
 5494              		.loc 1 1283 0
 5495 0e00 40F20000 		movw	r0, #:lower16:.LC153
 5496 0e04 C0F20000 		movt	r0, #:upper16:.LC153
 5497 0e08 FFF7FEFF 		bl	puts
1284:.\console.c   **** 				printf(STR_HELP_MOV02);
 5498              		.loc 1 1284 0
 5499 0e0c 40F20000 		movw	r0, #:lower16:.LC150
 5500 0e10 C0F20000 		movt	r0, #:upper16:.LC150
 5501 0e14 FFF7FEFF 		bl	puts
1285:.\console.c   **** 				printf(STR_HELP_MOV03);
 5502              		.loc 1 1285 0
 5503 0e18 40F20000 		movw	r0, #:lower16:.LC154
 5504 0e1c C0F20000 		movt	r0, #:upper16:.LC154
 5505 0e20 FFF7FEFF 		bl	puts
1286:.\console.c   **** 				printf(STR_HELP_MOV04);
 5506              		.loc 1 1286 0
 5507 0e24 40F20000 		movw	r0, #:lower16:.LC155
 5508 0e28 C0F20000 		movt	r0, #:upper16:.LC155
 5509 0e2c FFF7FEFF 		bl	puts
1287:.\console.c   **** 				printf(STR_HELP_MOV05);				
 5510              		.loc 1 1287 0
 5511 0e30 40F20000 		movw	r0, #:lower16:.LC156
 5512 0e34 C0F20000 		movt	r0, #:upper16:.LC156
 5513 0e38 FFF7FEFF 		bl	puts
1288:.\console.c   **** 				printf("\r\n");					
 5514              		.loc 1 1288 0
 5515 0e3c 40F20000 		movw	r0, #:lower16:.LC42
 5516 0e40 C0F20000 		movt	r0, #:upper16:.LC42
 5517 0e44 FFF7FEFF 		bl	puts
1289:.\console.c   **** 				
1290:.\console.c   **** 				/* System Test Command List  */
1291:.\console.c   **** 				printf(STR_HELP_PRES7);
 5518              		.loc 1 1291 0
 5519 0e48 40F20000 		movw	r0, #:lower16:.LC157
 5520 0e4c C0F20000 		movt	r0, #:upper16:.LC157
 5521 0e50 FFF7FEFF 		bl	puts
1292:.\console.c   **** 				printf(STR_HELP_PRES8);	
 5522              		.loc 1 1292 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 167


 5523 0e54 40F20000 		movw	r0, #:lower16:.LC150
 5524 0e58 C0F20000 		movt	r0, #:upper16:.LC150
 5525 0e5c FFF7FEFF 		bl	puts
1293:.\console.c   **** 				printf(STR_HELP_TBUZZ);	
 5526              		.loc 1 1293 0
 5527 0e60 40F20000 		movw	r0, #:lower16:.LC158
 5528 0e64 C0F20000 		movt	r0, #:upper16:.LC158
 5529 0e68 FFF7FEFF 		bl	puts
1294:.\console.c   **** 				printf(STR_HELP_TLORA);
 5530              		.loc 1 1294 0
 5531 0e6c 40F20000 		movw	r0, #:lower16:.LC159
 5532 0e70 C0F20000 		movt	r0, #:upper16:.LC159
 5533 0e74 FFF7FEFF 		bl	puts
1295:.\console.c   **** #if ITG_3701_ENABLED				
1296:.\console.c   **** 				printf(STR_HELP_TINV);
1297:.\console.c   **** #endif
1298:.\console.c   **** 				printf(STR_HELP_STSM);
 5534              		.loc 1 1298 0
 5535 0e78 40F20000 		movw	r0, #:lower16:.LC160
 5536 0e7c C0F20000 		movt	r0, #:upper16:.LC160
 5537 0e80 FFF7FEFF 		bl	puts
1299:.\console.c   **** 				printf(STR_HELP_DMAP);
 5538              		.loc 1 1299 0
 5539 0e84 40F20000 		movw	r0, #:lower16:.LC161
 5540 0e88 C0F20000 		movt	r0, #:upper16:.LC161
 5541 0e8c FFF7FEFF 		bl	puts
1300:.\console.c   **** 				printf(STR_HELP_DMAT);
 5542              		.loc 1 1300 0
 5543 0e90 40F20000 		movw	r0, #:lower16:.LC162
 5544 0e94 C0F20000 		movt	r0, #:upper16:.LC162
 5545 0e98 FFF7FEFF 		bl	puts
1301:.\console.c   **** 				printf(STR_HELP_DMPT);				
 5546              		.loc 1 1301 0
 5547 0e9c 40F20000 		movw	r0, #:lower16:.LC163
 5548 0ea0 C0F20000 		movt	r0, #:upper16:.LC163
 5549 0ea4 FFF7FEFF 		bl	puts
1302:.\console.c   **** 				printf("\r\n");	
 5550              		.loc 1 1302 0
 5551 0ea8 40F20000 		movw	r0, #:lower16:.LC42
 5552 0eac C0F20000 		movt	r0, #:upper16:.LC42
 5553 0eb0 FFF7FEFF 		bl	puts
1303:.\console.c   **** 				
1304:.\console.c   **** 				/* Mean Values & Statistics Measurments Command List */
1305:.\console.c   **** 				printf(STR_HELP_PRES9);
 5554              		.loc 1 1305 0
 5555 0eb4 40F20000 		movw	r0, #:lower16:.LC164
 5556 0eb8 C0F20000 		movt	r0, #:upper16:.LC164
 5557 0ebc FFF7FEFF 		bl	puts
1306:.\console.c   **** 				printf(STR_HELP_PRESA);
 5558              		.loc 1 1306 0
 5559 0ec0 40F20000 		movw	r0, #:lower16:.LC150
 5560 0ec4 C0F20000 		movt	r0, #:upper16:.LC150
 5561 0ec8 FFF7FEFF 		bl	puts
1307:.\console.c   **** 				printf(STR_HELP_AGSTA);
 5562              		.loc 1 1307 0
 5563 0ecc 40F20000 		movw	r0, #:lower16:.LC165
 5564 0ed0 C0F20000 		movt	r0, #:upper16:.LC165
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 168


 5565 0ed4 FFF7FEFF 		bl	puts
1308:.\console.c   **** 				printf(STR_HELP_AGSTO);				
 5566              		.loc 1 1308 0
 5567 0ed8 40F20000 		movw	r0, #:lower16:.LC166
 5568 0edc C0F20000 		movt	r0, #:upper16:.LC166
 5569 0ee0 FFF7FEFF 		bl	puts
1309:.\console.c   **** 				printf("\r\n");				
 5570              		.loc 1 1309 0
 5571 0ee4 40F20000 		movw	r0, #:lower16:.LC42
 5572 0ee8 C0F20000 		movt	r0, #:upper16:.LC42
 5573 0eec FFF7FEFF 		bl	puts
1310:.\console.c   **** 				
1311:.\console.c   **** //				/* DAS Command List */
1312:.\console.c   **** //				printf(STR_HELP_DAS01);
1313:.\console.c   **** //				printf(STR_HELP_DAS02);
1314:.\console.c   **** //				printf(STR_HELP_DAS03);				
1315:.\console.c   **** //				printf(STR_HELP_DAS04);
1316:.\console.c   **** //				printf(STR_HELP_DAS05);
1317:.\console.c   **** //				printf(STR_HELP_DAS06);
1318:.\console.c   **** //				printf(STR_HELP_DAS07);
1319:.\console.c   **** //				printf(STR_HELP_DAS08);
1320:.\console.c   **** //				printf(STR_HELP_DAS09);
1321:.\console.c   **** //				printf(STR_HELP_DAS0A);				
1322:.\console.c   **** 			}
1323:.\console.c   **** 			else
1324:.\console.c   **** 			{
1325:.\console.c   **** 				// SET command details
1326:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "set") == 0)
1327:.\console.c   **** 				{
1328:.\console.c   **** 					printf(STR_HELP_SETT1);
1329:.\console.c   **** 					printf(STR_HELP_SYNTX);			
1330:.\console.c   **** 					printf(STR_HELP_SETT2);
1331:.\console.c   **** 					printf(STR_HELP_SETT2T);					
1332:.\console.c   **** 					printf(STR_HELP_SETT3);
1333:.\console.c   **** 					printf(STR_HELP_SETT3T);					
1334:.\console.c   **** 					printf(STR_HELP_SETT4);
1335:.\console.c   **** 					printf(STR_HELP_SETT4T);					
1336:.\console.c   **** 					printf(STR_HELP_SETT5);
1337:.\console.c   **** 					printf(STR_HELP_SETT5T);					
1338:.\console.c   **** 					printf(STR_HELP_SETT6);
1339:.\console.c   **** 					printf(STR_HELP_SETT6T);
1340:.\console.c   **** 					printf(STR_HELP_SETT6U);
1341:.\console.c   **** 					printf(STR_HELP_SETT6V);					
1342:.\console.c   **** 					printf(STR_HELP_SET61);
1343:.\console.c   **** 					printf(STR_HELP_SET62);
1344:.\console.c   **** 					printf(STR_HELP_SET63);
1345:.\console.c   **** 					printf(STR_HELP_SET64);
1346:.\console.c   **** 					printf(STR_HELP_SET65);
1347:.\console.c   **** 					printf(STR_HELP_SET66);	
1348:.\console.c   **** 					printf(STR_HELP_SET67);
1349:.\console.c   **** 					printf(STR_HELP_SET68);
1350:.\console.c   **** 					printf(STR_HELP_SET69);
1351:.\console.c   **** 					printf(STR_HELP_SET70);					
1352:.\console.c   **** 					printf(STR_HELP_SET71);
1353:.\console.c   **** 					printf(STR_HELP_SET72);
1354:.\console.c   **** 					printf(STR_HELP_SET73);					
1355:.\console.c   **** 					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 169


1356:.\console.c   **** 					printf(STR_HELP_SET80);
1357:.\console.c   **** 					printf(STR_HELP_SET81);	
1358:.\console.c   **** 					printf(STR_HELP_SET82);
1359:.\console.c   **** 					printf(STR_HELP_SET83);
1360:.\console.c   **** 					printf(STR_HELP_SET84);
1361:.\console.c   **** 					printf(STR_HELP_SET85);
1362:.\console.c   **** 					printf(STR_HELP_SET86);
1363:.\console.c   **** 					printf(STR_HELP_SET87);					
1364:.\console.c   **** 					printf(STR_HELP_SET88);
1365:.\console.c   **** 					printf(STR_HELP_SET89);		
1366:.\console.c   **** 					
1367:.\console.c   **** 					printf(STR_HELP_SETTC);					
1368:.\console.c   **** 					printf(STR_HELP_SETC1);	
1369:.\console.c   **** 					printf(STR_HELP_SETC2);	
1370:.\console.c   **** 					printf(STR_HELP_SETC3);	
1371:.\console.c   **** 					printf(STR_HELP_SETC4);	
1372:.\console.c   **** 					printf(STR_HELP_SETC5);	
1373:.\console.c   **** 					
1374:.\console.c   **** 					printf(STR_HELP_SETTF);
1375:.\console.c   **** 					printf(STR_HELP_SETTG);
1376:.\console.c   **** 					printf(STR_HELP_SETTH);
1377:.\console.c   **** 					printf(STR_HELP_SETTI);
1378:.\console.c   **** 					printf(STR_HELP_SETI1);					
1379:.\console.c   **** 					printf(STR_HELP_SETTJ);
1380:.\console.c   **** 					printf(STR_HELP_SETTK);
1381:.\console.c   **** 					
1382:.\console.c   **** 					printf("\r\n");		
1383:.\console.c   **** 					printf(STR_HELP_polar); 
1384:.\console.c   **** 					printf(STR_HELP_kpval);
1385:.\console.c   **** 					printf(STR_HELP_kdval);
1386:.\console.c   **** 					printf(STR_HELP_kival);					
1387:.\console.c   **** 					printf(STR_HELP_ksivl);
1388:.\console.c   **** 					printf(STR_HELP_dbval);					
1389:.\console.c   **** 					printf(STR_HELP_kofvl);	
1390:.\console.c   **** 					printf(STR_HELP_again);
1391:.\console.c   **** 					printf(STR_HELP_astyp);					
1392:.\console.c   **** 					printf(STR_HELP_color);
1393:.\console.c   **** 					printf(STR_HELP_colo1);
1394:.\console.c   **** 					printf(STR_HELP_axis);					
1395:.\console.c   **** 					printf(STR_HELP_avalu);					
1396:.\console.c   **** 					printf(STR_HELP_onoff);
1397:.\console.c   **** 					printf(STR_HELP_mode);
1398:.\console.c   **** 					printf(STR_HELP_qn);
1399:.\console.c   **** 					printf(STR_HELP_qm);
1400:.\console.c   **** 					printf(STR_HELP_dir);					
1401:.\console.c   **** 					printf(STR_HELP_dir1);
1402:.\console.c   **** 					printf(STR_HELP_dir2);					
1403:.\console.c   **** 					
1404:.\console.c   **** 					goto exitpars;
1405:.\console.c   **** 				}
1406:.\console.c   **** 	
1407:.\console.c   **** 	
1408:.\console.c   **** 				// HELP SHOW command details
1409:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "show") == 0)
1410:.\console.c   **** 				{
1411:.\console.c   **** 					printf(STR_HELP_SHOW1);
1412:.\console.c   **** 					printf(STR_HELP_SYNTX);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 170


1413:.\console.c   **** 					printf(STR_HELP_SHOW2);
1414:.\console.c   **** 					printf(STR_HELP_SHO21);					
1415:.\console.c   **** 					printf(STR_HELP_SHOW3);					
1416:.\console.c   **** 					printf(STR_HELP_SHOW4);
1417:.\console.c   **** 					//printf(STR_HELP_SHOW5);						
1418:.\console.c   **** 					printf(STR_HELP_SHOW6);
1419:.\console.c   **** #if IMU_UM7_ENABLED
1420:.\console.c   **** 					printf(STR_HELP_SHW70);					
1421:.\console.c   **** 					printf(STR_HELP_SHW71);					
1422:.\console.c   **** 					printf(STR_HELP_SHW72);
1423:.\console.c   **** #endif					
1424:.\console.c   **** 					printf(STR_HELP_SHW73);
1425:.\console.c   **** 
1426:.\console.c   **** 					printf(STR_HELP_SHOW8);
1427:.\console.c   **** 					printf(STR_HELP_SHOW9);
1428:.\console.c   **** 					printf(STR_HELP_SHW90);					
1429:.\console.c   **** 					printf(STR_HELP_SHW91);
1430:.\console.c   **** 					printf(STR_HELP_SHW92);
1431:.\console.c   **** 					printf(STR_HELP_SHW93);
1432:.\console.c   **** 					printf(STR_HELP_SHW94);
1433:.\console.c   **** 					printf(STR_HELP_SHW95);
1434:.\console.c   **** 					printf(STR_HELP_SHW96);					
1435:.\console.c   **** 					printf(STR_HELP_SHOWA);
1436:.\console.c   **** 					printf(STR_HELP_SHWA1);
1437:.\console.c   **** 					printf(STR_HELP_SHWA2);	
1438:.\console.c   **** 					printf(STR_HELP_SHWA3);
1439:.\console.c   **** 					printf(STR_HELP_SHWA4);	
1440:.\console.c   **** 					printf(STR_HELP_SHWA5);	
1441:.\console.c   **** 					printf(STR_HELP_SHWA6);						
1442:.\console.c   **** 					printf(STR_HELP_SHWA7);						
1443:.\console.c   **** 					printf(STR_HELP_SHOWB);
1444:.\console.c   **** 					printf(STR_HELP_SHOWC);
1445:.\console.c   **** 					printf(STR_HELP_SHOWD);	
1446:.\console.c   **** 					printf(STR_HELP_SHOWE);
1447:.\console.c   **** 					printf(STR_HELP_SHOWF);	
1448:.\console.c   **** 					printf(STR_HELP_SHOF1);
1449:.\console.c   **** 					printf(STR_HELP_SHOF2);
1450:.\console.c   **** 					printf(STR_HELP_SHOF3);					
1451:.\console.c   **** 					printf(STR_HELP_SHOWG);
1452:.\console.c   **** 					printf(STR_HELP_SHOWH);					
1453:.\console.c   **** 					printf(STR_HELP_SHOWZ);
1454:.\console.c   **** 					goto exitpars;
1455:.\console.c   **** 				}
1456:.\console.c   **** 	
1457:.\console.c   **** 				
1458:.\console.c   **** 				// HELP GOTOQ command details
1459:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "q") == 0)
1460:.\console.c   **** 				{					
1461:.\console.c   **** 					//Qtable
1462:.\console.c   **** 					printf(STR_QTAB0);
1463:.\console.c   **** 					printf(STR_QTAB1);
1464:.\console.c   **** 					printf(STR_Q000);
1465:.\console.c   **** 					printf(STR_Q011);					
1466:.\console.c   **** 					printf(STR_Q013);					
1467:.\console.c   **** 					printf(STR_Q014);			
1468:.\console.c   **** 					printf(STR_Q015);					
1469:.\console.c   **** 					printf(STR_Q016);					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 171


1470:.\console.c   **** 					printf(STR_Q017);
1471:.\console.c   **** 					printf(STR_Q021);
1472:.\console.c   **** 					printf(STR_Q031);
1473:.\console.c   **** 					printf(STR_Q033);
1474:.\console.c   **** 					printf(STR_Q034);
1475:.\console.c   **** 					printf(STR_Q040);					
1476:.\console.c   **** 					printf(STR_Q041);					
1477:.\console.c   **** 					printf(STR_Q042);
1478:.\console.c   **** 					printf(STR_Q043);
1479:.\console.c   **** 					printf(STR_Q044);					
1480:.\console.c   **** 					printf(STR_Q051);
1481:.\console.c   **** 					printf(STR_Q052);
1482:.\console.c   **** 					printf(STR_Q053);					
1483:.\console.c   **** 					
1484:.\console.c   **** 					goto exitpars;
1485:.\console.c   **** 				}			
1486:.\console.c   **** 				
1487:.\console.c   **** 				
1488:.\console.c   **** 				// HELP TESTDAC command details
1489:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "testdac") == 0)
1490:.\console.c   **** 				{
1491:.\console.c   **** 					printf(STR_HELP_TDAC1);
1492:.\console.c   **** 					printf(STR_HELP_SYNTX);
1493:.\console.c   **** 					printf(STR_HELP_TDAC2);
1494:.\console.c   **** 					goto exitpars;
1495:.\console.c   **** 				}			
1496:.\console.c   **** 
1497:.\console.c   **** 
1498:.\console.c   **** 				// HELP PROMPT command details
1499:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "prompt") == 0)
1500:.\console.c   **** 				{
1501:.\console.c   **** 					printf(STR_HELP_PROM1);
1502:.\console.c   **** 					printf(STR_HELP_SYNTX);
1503:.\console.c   **** 					printf(STR_HELP_PROM2);
1504:.\console.c   **** 					goto exitpars;
1505:.\console.c   **** 				}			
1506:.\console.c   **** 				
1507:.\console.c   **** 				
1508:.\console.c   **** 				// HELP VERSION command details
1509:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "version") == 0)
1510:.\console.c   **** 				||(strcmp(actual_cmd.parameter, "v") == 0))
1511:.\console.c   **** 				{
1512:.\console.c   **** 					printf(STR_HELP_VERS1);
1513:.\console.c   **** 					printf(STR_HELP_SYNTX);
1514:.\console.c   **** 					printf(STR_HELP_VERS2);
1515:.\console.c   **** 					printf(STR_HELP_VERS3);				
1516:.\console.c   **** 					goto exitpars;
1517:.\console.c   **** 				}
1518:.\console.c   **** 				printf(STR_ERROR3);	/* Bad Parameter(s) */
1519:.\console.c   **** 				goto exitpars;
1520:.\console.c   **** 			}
1521:.\console.c   **** 		goto exitpars;		
 5574              		.loc 1 1521 0
 5575 0ef0 06F0F0BA 		b	.L131
 5576              	.L724:
 5577              		.align	2
 5578              	.L723:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 172


 5579 0ef4 0F000000 		.word	actual_cmd+15
 5580              	.L215:
1326:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "set") == 0)
 5581              		.loc 1 1326 0
 5582 0ef8 DB48     		ldr	r0, .L725
 5583 0efa 40F20001 		movw	r1, #:lower16:.LC167
 5584 0efe C0F20001 		movt	r1, #:upper16:.LC167
 5585 0f02 FFF7FEFF 		bl	strcmp
 5586 0f06 0346     		mov	r3, r0
 5587 0f08 002B     		cmp	r3, #0
 5588 0f0a 40F0AF81 		bne	.L216
1328:.\console.c   **** 					printf(STR_HELP_SETT1);
 5589              		.loc 1 1328 0
 5590 0f0e 40F20000 		movw	r0, #:lower16:.LC142
 5591 0f12 C0F20000 		movt	r0, #:upper16:.LC142
 5592 0f16 FFF7FEFF 		bl	puts
1329:.\console.c   **** 					printf(STR_HELP_SYNTX);			
 5593              		.loc 1 1329 0
 5594 0f1a 40F20000 		movw	r0, #:lower16:.LC168
 5595 0f1e C0F20000 		movt	r0, #:upper16:.LC168
 5596 0f22 FFF7FEFF 		bl	puts
1330:.\console.c   **** 					printf(STR_HELP_SETT2);
 5597              		.loc 1 1330 0
 5598 0f26 40F20000 		movw	r0, #:lower16:.LC169
 5599 0f2a C0F20000 		movt	r0, #:upper16:.LC169
 5600 0f2e FFF7FEFF 		bl	puts
1331:.\console.c   **** 					printf(STR_HELP_SETT2T);					
 5601              		.loc 1 1331 0
 5602 0f32 40F20000 		movw	r0, #:lower16:.LC170
 5603 0f36 C0F20000 		movt	r0, #:upper16:.LC170
 5604 0f3a FFF7FEFF 		bl	puts
1332:.\console.c   **** 					printf(STR_HELP_SETT3);
 5605              		.loc 1 1332 0
 5606 0f3e 40F20000 		movw	r0, #:lower16:.LC171
 5607 0f42 C0F20000 		movt	r0, #:upper16:.LC171
 5608 0f46 FFF7FEFF 		bl	puts
1333:.\console.c   **** 					printf(STR_HELP_SETT3T);					
 5609              		.loc 1 1333 0
 5610 0f4a 40F20000 		movw	r0, #:lower16:.LC172
 5611 0f4e C0F20000 		movt	r0, #:upper16:.LC172
 5612 0f52 FFF7FEFF 		bl	puts
1334:.\console.c   **** 					printf(STR_HELP_SETT4);
 5613              		.loc 1 1334 0
 5614 0f56 40F20000 		movw	r0, #:lower16:.LC173
 5615 0f5a C0F20000 		movt	r0, #:upper16:.LC173
 5616 0f5e FFF7FEFF 		bl	puts
1335:.\console.c   **** 					printf(STR_HELP_SETT4T);					
 5617              		.loc 1 1335 0
 5618 0f62 40F20000 		movw	r0, #:lower16:.LC174
 5619 0f66 C0F20000 		movt	r0, #:upper16:.LC174
 5620 0f6a FFF7FEFF 		bl	puts
1336:.\console.c   **** 					printf(STR_HELP_SETT5);
 5621              		.loc 1 1336 0
 5622 0f6e 40F20000 		movw	r0, #:lower16:.LC175
 5623 0f72 C0F20000 		movt	r0, #:upper16:.LC175
 5624 0f76 FFF7FEFF 		bl	puts
1337:.\console.c   **** 					printf(STR_HELP_SETT5T);					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 173


 5625              		.loc 1 1337 0
 5626 0f7a 40F20000 		movw	r0, #:lower16:.LC176
 5627 0f7e C0F20000 		movt	r0, #:upper16:.LC176
 5628 0f82 FFF7FEFF 		bl	puts
1338:.\console.c   **** 					printf(STR_HELP_SETT6);
 5629              		.loc 1 1338 0
 5630 0f86 40F20000 		movw	r0, #:lower16:.LC177
 5631 0f8a C0F20000 		movt	r0, #:upper16:.LC177
 5632 0f8e FFF7FEFF 		bl	puts
1339:.\console.c   **** 					printf(STR_HELP_SETT6T);
 5633              		.loc 1 1339 0
 5634 0f92 40F20000 		movw	r0, #:lower16:.LC178
 5635 0f96 C0F20000 		movt	r0, #:upper16:.LC178
 5636 0f9a FFF7FEFF 		bl	puts
1340:.\console.c   **** 					printf(STR_HELP_SETT6U);
 5637              		.loc 1 1340 0
 5638 0f9e 40F20000 		movw	r0, #:lower16:.LC179
 5639 0fa2 C0F20000 		movt	r0, #:upper16:.LC179
 5640 0fa6 FFF7FEFF 		bl	puts
1341:.\console.c   **** 					printf(STR_HELP_SETT6V);					
 5641              		.loc 1 1341 0
 5642 0faa 40F20000 		movw	r0, #:lower16:.LC180
 5643 0fae C0F20000 		movt	r0, #:upper16:.LC180
 5644 0fb2 FFF7FEFF 		bl	puts
1342:.\console.c   **** 					printf(STR_HELP_SET61);
 5645              		.loc 1 1342 0
 5646 0fb6 40F20000 		movw	r0, #:lower16:.LC181
 5647 0fba C0F20000 		movt	r0, #:upper16:.LC181
 5648 0fbe FFF7FEFF 		bl	puts
1343:.\console.c   **** 					printf(STR_HELP_SET62);
 5649              		.loc 1 1343 0
 5650 0fc2 40F20000 		movw	r0, #:lower16:.LC182
 5651 0fc6 C0F20000 		movt	r0, #:upper16:.LC182
 5652 0fca FFF7FEFF 		bl	puts
1344:.\console.c   **** 					printf(STR_HELP_SET63);
 5653              		.loc 1 1344 0
 5654 0fce 40F20000 		movw	r0, #:lower16:.LC183
 5655 0fd2 C0F20000 		movt	r0, #:upper16:.LC183
 5656 0fd6 FFF7FEFF 		bl	puts
1345:.\console.c   **** 					printf(STR_HELP_SET64);
 5657              		.loc 1 1345 0
 5658 0fda 40F20000 		movw	r0, #:lower16:.LC184
 5659 0fde C0F20000 		movt	r0, #:upper16:.LC184
 5660 0fe2 FFF7FEFF 		bl	puts
1346:.\console.c   **** 					printf(STR_HELP_SET65);
 5661              		.loc 1 1346 0
 5662 0fe6 40F20000 		movw	r0, #:lower16:.LC185
 5663 0fea C0F20000 		movt	r0, #:upper16:.LC185
 5664 0fee FFF7FEFF 		bl	puts
1347:.\console.c   **** 					printf(STR_HELP_SET66);	
 5665              		.loc 1 1347 0
 5666 0ff2 40F20000 		movw	r0, #:lower16:.LC186
 5667 0ff6 C0F20000 		movt	r0, #:upper16:.LC186
 5668 0ffa FFF7FEFF 		bl	puts
1348:.\console.c   **** 					printf(STR_HELP_SET67);
 5669              		.loc 1 1348 0
 5670 0ffe 40F20000 		movw	r0, #:lower16:.LC187
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 174


 5671 1002 C0F20000 		movt	r0, #:upper16:.LC187
 5672 1006 FFF7FEFF 		bl	puts
1349:.\console.c   **** 					printf(STR_HELP_SET68);
 5673              		.loc 1 1349 0
 5674 100a 40F20000 		movw	r0, #:lower16:.LC188
 5675 100e C0F20000 		movt	r0, #:upper16:.LC188
 5676 1012 FFF7FEFF 		bl	puts
1350:.\console.c   **** 					printf(STR_HELP_SET69);
 5677              		.loc 1 1350 0
 5678 1016 40F20000 		movw	r0, #:lower16:.LC189
 5679 101a C0F20000 		movt	r0, #:upper16:.LC189
 5680 101e FFF7FEFF 		bl	puts
1351:.\console.c   **** 					printf(STR_HELP_SET70);					
 5681              		.loc 1 1351 0
 5682 1022 40F20000 		movw	r0, #:lower16:.LC190
 5683 1026 C0F20000 		movt	r0, #:upper16:.LC190
 5684 102a FFF7FEFF 		bl	puts
1352:.\console.c   **** 					printf(STR_HELP_SET71);
 5685              		.loc 1 1352 0
 5686 102e 40F20000 		movw	r0, #:lower16:.LC191
 5687 1032 C0F20000 		movt	r0, #:upper16:.LC191
 5688 1036 FFF7FEFF 		bl	puts
1353:.\console.c   **** 					printf(STR_HELP_SET72);
 5689              		.loc 1 1353 0
 5690 103a 40F20000 		movw	r0, #:lower16:.LC192
 5691 103e C0F20000 		movt	r0, #:upper16:.LC192
 5692 1042 FFF7FEFF 		bl	puts
1354:.\console.c   **** 					printf(STR_HELP_SET73);					
 5693              		.loc 1 1354 0
 5694 1046 40F20000 		movw	r0, #:lower16:.LC193
 5695 104a C0F20000 		movt	r0, #:upper16:.LC193
 5696 104e FFF7FEFF 		bl	puts
1356:.\console.c   **** 					printf(STR_HELP_SET80);
 5697              		.loc 1 1356 0
 5698 1052 40F20000 		movw	r0, #:lower16:.LC194
 5699 1056 C0F20000 		movt	r0, #:upper16:.LC194
 5700 105a FFF7FEFF 		bl	puts
1357:.\console.c   **** 					printf(STR_HELP_SET81);	
 5701              		.loc 1 1357 0
 5702 105e 40F20000 		movw	r0, #:lower16:.LC195
 5703 1062 C0F20000 		movt	r0, #:upper16:.LC195
 5704 1066 FFF7FEFF 		bl	puts
1358:.\console.c   **** 					printf(STR_HELP_SET82);
 5705              		.loc 1 1358 0
 5706 106a 40F20000 		movw	r0, #:lower16:.LC196
 5707 106e C0F20000 		movt	r0, #:upper16:.LC196
 5708 1072 FFF7FEFF 		bl	puts
1359:.\console.c   **** 					printf(STR_HELP_SET83);
 5709              		.loc 1 1359 0
 5710 1076 40F20000 		movw	r0, #:lower16:.LC197
 5711 107a C0F20000 		movt	r0, #:upper16:.LC197
 5712 107e FFF7FEFF 		bl	puts
1360:.\console.c   **** 					printf(STR_HELP_SET84);
 5713              		.loc 1 1360 0
 5714 1082 40F20000 		movw	r0, #:lower16:.LC198
 5715 1086 C0F20000 		movt	r0, #:upper16:.LC198
 5716 108a FFF7FEFF 		bl	puts
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 175


1361:.\console.c   **** 					printf(STR_HELP_SET85);
 5717              		.loc 1 1361 0
 5718 108e 40F20000 		movw	r0, #:lower16:.LC199
 5719 1092 C0F20000 		movt	r0, #:upper16:.LC199
 5720 1096 FFF7FEFF 		bl	puts
1362:.\console.c   **** 					printf(STR_HELP_SET86);
 5721              		.loc 1 1362 0
 5722 109a 40F20000 		movw	r0, #:lower16:.LC200
 5723 109e C0F20000 		movt	r0, #:upper16:.LC200
 5724 10a2 FFF7FEFF 		bl	puts
1363:.\console.c   **** 					printf(STR_HELP_SET87);					
 5725              		.loc 1 1363 0
 5726 10a6 40F20000 		movw	r0, #:lower16:.LC201
 5727 10aa C0F20000 		movt	r0, #:upper16:.LC201
 5728 10ae FFF7FEFF 		bl	puts
1364:.\console.c   **** 					printf(STR_HELP_SET88);
 5729              		.loc 1 1364 0
 5730 10b2 40F20000 		movw	r0, #:lower16:.LC202
 5731 10b6 C0F20000 		movt	r0, #:upper16:.LC202
 5732 10ba FFF7FEFF 		bl	puts
1365:.\console.c   **** 					printf(STR_HELP_SET89);		
 5733              		.loc 1 1365 0
 5734 10be 40F20000 		movw	r0, #:lower16:.LC203
 5735 10c2 C0F20000 		movt	r0, #:upper16:.LC203
 5736 10c6 FFF7FEFF 		bl	puts
1367:.\console.c   **** 					printf(STR_HELP_SETTC);					
 5737              		.loc 1 1367 0
 5738 10ca 40F20000 		movw	r0, #:lower16:.LC204
 5739 10ce C0F20000 		movt	r0, #:upper16:.LC204
 5740 10d2 FFF7FEFF 		bl	puts
1368:.\console.c   **** 					printf(STR_HELP_SETC1);	
 5741              		.loc 1 1368 0
 5742 10d6 40F20000 		movw	r0, #:lower16:.LC205
 5743 10da C0F20000 		movt	r0, #:upper16:.LC205
 5744 10de FFF7FEFF 		bl	puts
1369:.\console.c   **** 					printf(STR_HELP_SETC2);	
 5745              		.loc 1 1369 0
 5746 10e2 40F20000 		movw	r0, #:lower16:.LC206
 5747 10e6 C0F20000 		movt	r0, #:upper16:.LC206
 5748 10ea FFF7FEFF 		bl	puts
1370:.\console.c   **** 					printf(STR_HELP_SETC3);	
 5749              		.loc 1 1370 0
 5750 10ee 40F20000 		movw	r0, #:lower16:.LC207
 5751 10f2 C0F20000 		movt	r0, #:upper16:.LC207
 5752 10f6 FFF7FEFF 		bl	puts
1371:.\console.c   **** 					printf(STR_HELP_SETC4);	
 5753              		.loc 1 1371 0
 5754 10fa 40F20000 		movw	r0, #:lower16:.LC208
 5755 10fe C0F20000 		movt	r0, #:upper16:.LC208
 5756 1102 FFF7FEFF 		bl	puts
1372:.\console.c   **** 					printf(STR_HELP_SETC5);	
 5757              		.loc 1 1372 0
 5758 1106 40F20000 		movw	r0, #:lower16:.LC209
 5759 110a C0F20000 		movt	r0, #:upper16:.LC209
 5760 110e FFF7FEFF 		bl	puts
1374:.\console.c   **** 					printf(STR_HELP_SETTF);
 5761              		.loc 1 1374 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 176


 5762 1112 40F20000 		movw	r0, #:lower16:.LC210
 5763 1116 C0F20000 		movt	r0, #:upper16:.LC210
 5764 111a FFF7FEFF 		bl	puts
1375:.\console.c   **** 					printf(STR_HELP_SETTG);
 5765              		.loc 1 1375 0
 5766 111e 40F20000 		movw	r0, #:lower16:.LC211
 5767 1122 C0F20000 		movt	r0, #:upper16:.LC211
 5768 1126 FFF7FEFF 		bl	puts
1376:.\console.c   **** 					printf(STR_HELP_SETTH);
 5769              		.loc 1 1376 0
 5770 112a 40F20000 		movw	r0, #:lower16:.LC212
 5771 112e C0F20000 		movt	r0, #:upper16:.LC212
 5772 1132 FFF7FEFF 		bl	puts
1377:.\console.c   **** 					printf(STR_HELP_SETTI);
 5773              		.loc 1 1377 0
 5774 1136 40F20000 		movw	r0, #:lower16:.LC213
 5775 113a C0F20000 		movt	r0, #:upper16:.LC213
 5776 113e FFF7FEFF 		bl	puts
1378:.\console.c   **** 					printf(STR_HELP_SETI1);					
 5777              		.loc 1 1378 0
 5778 1142 40F20000 		movw	r0, #:lower16:.LC214
 5779 1146 C0F20000 		movt	r0, #:upper16:.LC214
 5780 114a FFF7FEFF 		bl	puts
1379:.\console.c   **** 					printf(STR_HELP_SETTJ);
 5781              		.loc 1 1379 0
 5782 114e 40F20000 		movw	r0, #:lower16:.LC215
 5783 1152 C0F20000 		movt	r0, #:upper16:.LC215
 5784 1156 FFF7FEFF 		bl	puts
1380:.\console.c   **** 					printf(STR_HELP_SETTK);
 5785              		.loc 1 1380 0
 5786 115a 40F20000 		movw	r0, #:lower16:.LC216
 5787 115e C0F20000 		movt	r0, #:upper16:.LC216
 5788 1162 FFF7FEFF 		bl	puts
1382:.\console.c   **** 					printf("\r\n");		
 5789              		.loc 1 1382 0
 5790 1166 40F20000 		movw	r0, #:lower16:.LC42
 5791 116a C0F20000 		movt	r0, #:upper16:.LC42
 5792 116e FFF7FEFF 		bl	puts
1383:.\console.c   **** 					printf(STR_HELP_polar); 
 5793              		.loc 1 1383 0
 5794 1172 40F20000 		movw	r0, #:lower16:.LC217
 5795 1176 C0F20000 		movt	r0, #:upper16:.LC217
 5796 117a FFF7FEFF 		bl	puts
1384:.\console.c   **** 					printf(STR_HELP_kpval);
 5797              		.loc 1 1384 0
 5798 117e 40F20000 		movw	r0, #:lower16:.LC218
 5799 1182 C0F20000 		movt	r0, #:upper16:.LC218
 5800 1186 FFF7FEFF 		bl	puts
1385:.\console.c   **** 					printf(STR_HELP_kdval);
 5801              		.loc 1 1385 0
 5802 118a 40F20000 		movw	r0, #:lower16:.LC219
 5803 118e C0F20000 		movt	r0, #:upper16:.LC219
 5804 1192 FFF7FEFF 		bl	puts
1386:.\console.c   **** 					printf(STR_HELP_kival);					
 5805              		.loc 1 1386 0
 5806 1196 40F20000 		movw	r0, #:lower16:.LC220
 5807 119a C0F20000 		movt	r0, #:upper16:.LC220
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 177


 5808 119e FFF7FEFF 		bl	puts
1387:.\console.c   **** 					printf(STR_HELP_ksivl);
 5809              		.loc 1 1387 0
 5810 11a2 40F20000 		movw	r0, #:lower16:.LC221
 5811 11a6 C0F20000 		movt	r0, #:upper16:.LC221
 5812 11aa FFF7FEFF 		bl	puts
1388:.\console.c   **** 					printf(STR_HELP_dbval);					
 5813              		.loc 1 1388 0
 5814 11ae 40F20000 		movw	r0, #:lower16:.LC222
 5815 11b2 C0F20000 		movt	r0, #:upper16:.LC222
 5816 11b6 FFF7FEFF 		bl	puts
1389:.\console.c   **** 					printf(STR_HELP_kofvl);	
 5817              		.loc 1 1389 0
 5818 11ba 40F20000 		movw	r0, #:lower16:.LC223
 5819 11be C0F20000 		movt	r0, #:upper16:.LC223
 5820 11c2 FFF7FEFF 		bl	puts
1390:.\console.c   **** 					printf(STR_HELP_again);
 5821              		.loc 1 1390 0
 5822 11c6 40F20000 		movw	r0, #:lower16:.LC224
 5823 11ca C0F20000 		movt	r0, #:upper16:.LC224
 5824 11ce FFF7FEFF 		bl	puts
1391:.\console.c   **** 					printf(STR_HELP_astyp);					
 5825              		.loc 1 1391 0
 5826 11d2 40F20000 		movw	r0, #:lower16:.LC225
 5827 11d6 C0F20000 		movt	r0, #:upper16:.LC225
 5828 11da FFF7FEFF 		bl	puts
1392:.\console.c   **** 					printf(STR_HELP_color);
 5829              		.loc 1 1392 0
 5830 11de 40F20000 		movw	r0, #:lower16:.LC226
 5831 11e2 C0F20000 		movt	r0, #:upper16:.LC226
 5832 11e6 FFF7FEFF 		bl	puts
1393:.\console.c   **** 					printf(STR_HELP_colo1);
 5833              		.loc 1 1393 0
 5834 11ea 40F20000 		movw	r0, #:lower16:.LC227
 5835 11ee C0F20000 		movt	r0, #:upper16:.LC227
 5836 11f2 FFF7FEFF 		bl	puts
1394:.\console.c   **** 					printf(STR_HELP_axis);					
 5837              		.loc 1 1394 0
 5838 11f6 40F20000 		movw	r0, #:lower16:.LC228
 5839 11fa C0F20000 		movt	r0, #:upper16:.LC228
 5840 11fe FFF7FEFF 		bl	puts
1395:.\console.c   **** 					printf(STR_HELP_avalu);					
 5841              		.loc 1 1395 0
 5842 1202 40F20000 		movw	r0, #:lower16:.LC229
 5843 1206 C0F20000 		movt	r0, #:upper16:.LC229
 5844 120a FFF7FEFF 		bl	puts
1396:.\console.c   **** 					printf(STR_HELP_onoff);
 5845              		.loc 1 1396 0
 5846 120e 40F20000 		movw	r0, #:lower16:.LC230
 5847 1212 C0F20000 		movt	r0, #:upper16:.LC230
 5848 1216 FFF7FEFF 		bl	puts
1397:.\console.c   **** 					printf(STR_HELP_mode);
 5849              		.loc 1 1397 0
 5850 121a 40F20000 		movw	r0, #:lower16:.LC231
 5851 121e C0F20000 		movt	r0, #:upper16:.LC231
 5852 1222 FFF7FEFF 		bl	puts
1398:.\console.c   **** 					printf(STR_HELP_qn);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 178


 5853              		.loc 1 1398 0
 5854 1226 40F20000 		movw	r0, #:lower16:.LC232
 5855 122a C0F20000 		movt	r0, #:upper16:.LC232
 5856 122e FFF7FEFF 		bl	puts
1399:.\console.c   **** 					printf(STR_HELP_qm);
 5857              		.loc 1 1399 0
 5858 1232 40F20000 		movw	r0, #:lower16:.LC233
 5859 1236 C0F20000 		movt	r0, #:upper16:.LC233
 5860 123a FFF7FEFF 		bl	puts
1400:.\console.c   **** 					printf(STR_HELP_dir);					
 5861              		.loc 1 1400 0
 5862 123e 40F20000 		movw	r0, #:lower16:.LC234
 5863 1242 C0F20000 		movt	r0, #:upper16:.LC234
 5864 1246 FFF7FEFF 		bl	puts
1401:.\console.c   **** 					printf(STR_HELP_dir1);
 5865              		.loc 1 1401 0
 5866 124a 40F20000 		movw	r0, #:lower16:.LC235
 5867 124e C0F20000 		movt	r0, #:upper16:.LC235
 5868 1252 FFF7FEFF 		bl	puts
1402:.\console.c   **** 					printf(STR_HELP_dir2);					
 5869              		.loc 1 1402 0
 5870 1256 40F20000 		movw	r0, #:lower16:.LC236
 5871 125a C0F20000 		movt	r0, #:upper16:.LC236
 5872 125e FFF7FEFF 		bl	puts
1404:.\console.c   **** 					goto exitpars;
 5873              		.loc 1 1404 0
 5874 1262 06F037B9 		b	.L131
 5875              	.L726:
 5876 1266 00BF     		.align	2
 5877              	.L725:
 5878 1268 0F000000 		.word	actual_cmd+15
 5879              	.L216:
1409:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "show") == 0)
 5880              		.loc 1 1409 0
 5881 126c F048     		ldr	r0, .L727
 5882 126e 40F20001 		movw	r1, #:lower16:.LC237
 5883 1272 C0F20001 		movt	r1, #:upper16:.LC237
 5884 1276 FFF7FEFF 		bl	strcmp
 5885 127a 0346     		mov	r3, r0
 5886 127c 002B     		cmp	r3, #0
 5887 127e 40F0DA80 		bne	.L217
1411:.\console.c   **** 					printf(STR_HELP_SHOW1);
 5888              		.loc 1 1411 0
 5889 1282 40F20000 		movw	r0, #:lower16:.LC141
 5890 1286 C0F20000 		movt	r0, #:upper16:.LC141
 5891 128a FFF7FEFF 		bl	puts
1412:.\console.c   **** 					printf(STR_HELP_SYNTX);
 5892              		.loc 1 1412 0
 5893 128e 40F20000 		movw	r0, #:lower16:.LC168
 5894 1292 C0F20000 		movt	r0, #:upper16:.LC168
 5895 1296 FFF7FEFF 		bl	puts
1413:.\console.c   **** 					printf(STR_HELP_SHOW2);
 5896              		.loc 1 1413 0
 5897 129a 40F20000 		movw	r0, #:lower16:.LC238
 5898 129e C0F20000 		movt	r0, #:upper16:.LC238
 5899 12a2 FFF7FEFF 		bl	puts
1414:.\console.c   **** 					printf(STR_HELP_SHO21);					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 179


 5900              		.loc 1 1414 0
 5901 12a6 40F20000 		movw	r0, #:lower16:.LC239
 5902 12aa C0F20000 		movt	r0, #:upper16:.LC239
 5903 12ae FFF7FEFF 		bl	puts
1415:.\console.c   **** 					printf(STR_HELP_SHOW3);					
 5904              		.loc 1 1415 0
 5905 12b2 40F20000 		movw	r0, #:lower16:.LC240
 5906 12b6 C0F20000 		movt	r0, #:upper16:.LC240
 5907 12ba FFF7FEFF 		bl	puts
1416:.\console.c   **** 					printf(STR_HELP_SHOW4);
 5908              		.loc 1 1416 0
 5909 12be 40F20000 		movw	r0, #:lower16:.LC241
 5910 12c2 C0F20000 		movt	r0, #:upper16:.LC241
 5911 12c6 FFF7FEFF 		bl	puts
1418:.\console.c   **** 					printf(STR_HELP_SHOW6);
 5912              		.loc 1 1418 0
 5913 12ca 40F20000 		movw	r0, #:lower16:.LC242
 5914 12ce C0F20000 		movt	r0, #:upper16:.LC242
 5915 12d2 FFF7FEFF 		bl	puts
1424:.\console.c   **** 					printf(STR_HELP_SHW73);
 5916              		.loc 1 1424 0
 5917 12d6 40F20000 		movw	r0, #:lower16:.LC243
 5918 12da C0F20000 		movt	r0, #:upper16:.LC243
 5919 12de FFF7FEFF 		bl	puts
1426:.\console.c   **** 					printf(STR_HELP_SHOW8);
 5920              		.loc 1 1426 0
 5921 12e2 40F20000 		movw	r0, #:lower16:.LC244
 5922 12e6 C0F20000 		movt	r0, #:upper16:.LC244
 5923 12ea FFF7FEFF 		bl	puts
1427:.\console.c   **** 					printf(STR_HELP_SHOW9);
 5924              		.loc 1 1427 0
 5925 12ee 40F20000 		movw	r0, #:lower16:.LC245
 5926 12f2 C0F20000 		movt	r0, #:upper16:.LC245
 5927 12f6 FFF7FEFF 		bl	puts
1428:.\console.c   **** 					printf(STR_HELP_SHW90);					
 5928              		.loc 1 1428 0
 5929 12fa 40F20000 		movw	r0, #:lower16:.LC246
 5930 12fe C0F20000 		movt	r0, #:upper16:.LC246
 5931 1302 FFF7FEFF 		bl	puts
1429:.\console.c   **** 					printf(STR_HELP_SHW91);
 5932              		.loc 1 1429 0
 5933 1306 40F20000 		movw	r0, #:lower16:.LC247
 5934 130a C0F20000 		movt	r0, #:upper16:.LC247
 5935 130e FFF7FEFF 		bl	puts
1430:.\console.c   **** 					printf(STR_HELP_SHW92);
 5936              		.loc 1 1430 0
 5937 1312 40F20000 		movw	r0, #:lower16:.LC248
 5938 1316 C0F20000 		movt	r0, #:upper16:.LC248
 5939 131a FFF7FEFF 		bl	puts
1431:.\console.c   **** 					printf(STR_HELP_SHW93);
 5940              		.loc 1 1431 0
 5941 131e 40F20000 		movw	r0, #:lower16:.LC249
 5942 1322 C0F20000 		movt	r0, #:upper16:.LC249
 5943 1326 FFF7FEFF 		bl	puts
1432:.\console.c   **** 					printf(STR_HELP_SHW94);
 5944              		.loc 1 1432 0
 5945 132a 40F20000 		movw	r0, #:lower16:.LC250
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 180


 5946 132e C0F20000 		movt	r0, #:upper16:.LC250
 5947 1332 FFF7FEFF 		bl	puts
1433:.\console.c   **** 					printf(STR_HELP_SHW95);
 5948              		.loc 1 1433 0
 5949 1336 40F20000 		movw	r0, #:lower16:.LC251
 5950 133a C0F20000 		movt	r0, #:upper16:.LC251
 5951 133e FFF7FEFF 		bl	puts
1434:.\console.c   **** 					printf(STR_HELP_SHW96);					
 5952              		.loc 1 1434 0
 5953 1342 40F20000 		movw	r0, #:lower16:.LC252
 5954 1346 C0F20000 		movt	r0, #:upper16:.LC252
 5955 134a FFF7FEFF 		bl	puts
1435:.\console.c   **** 					printf(STR_HELP_SHOWA);
 5956              		.loc 1 1435 0
 5957 134e 40F20000 		movw	r0, #:lower16:.LC253
 5958 1352 C0F20000 		movt	r0, #:upper16:.LC253
 5959 1356 FFF7FEFF 		bl	puts
1436:.\console.c   **** 					printf(STR_HELP_SHWA1);
 5960              		.loc 1 1436 0
 5961 135a 40F20000 		movw	r0, #:lower16:.LC254
 5962 135e C0F20000 		movt	r0, #:upper16:.LC254
 5963 1362 FFF7FEFF 		bl	puts
1437:.\console.c   **** 					printf(STR_HELP_SHWA2);	
 5964              		.loc 1 1437 0
 5965 1366 40F20000 		movw	r0, #:lower16:.LC255
 5966 136a C0F20000 		movt	r0, #:upper16:.LC255
 5967 136e FFF7FEFF 		bl	puts
1438:.\console.c   **** 					printf(STR_HELP_SHWA3);
 5968              		.loc 1 1438 0
 5969 1372 40F20000 		movw	r0, #:lower16:.LC256
 5970 1376 C0F20000 		movt	r0, #:upper16:.LC256
 5971 137a FFF7FEFF 		bl	puts
1439:.\console.c   **** 					printf(STR_HELP_SHWA4);	
 5972              		.loc 1 1439 0
 5973 137e 40F20000 		movw	r0, #:lower16:.LC257
 5974 1382 C0F20000 		movt	r0, #:upper16:.LC257
 5975 1386 FFF7FEFF 		bl	puts
1440:.\console.c   **** 					printf(STR_HELP_SHWA5);	
 5976              		.loc 1 1440 0
 5977 138a 40F20000 		movw	r0, #:lower16:.LC258
 5978 138e C0F20000 		movt	r0, #:upper16:.LC258
 5979 1392 FFF7FEFF 		bl	puts
1441:.\console.c   **** 					printf(STR_HELP_SHWA6);						
 5980              		.loc 1 1441 0
 5981 1396 40F20000 		movw	r0, #:lower16:.LC259
 5982 139a C0F20000 		movt	r0, #:upper16:.LC259
 5983 139e FFF7FEFF 		bl	puts
1442:.\console.c   **** 					printf(STR_HELP_SHWA7);						
 5984              		.loc 1 1442 0
 5985 13a2 40F20000 		movw	r0, #:lower16:.LC260
 5986 13a6 C0F20000 		movt	r0, #:upper16:.LC260
 5987 13aa FFF7FEFF 		bl	puts
1443:.\console.c   **** 					printf(STR_HELP_SHOWB);
 5988              		.loc 1 1443 0
 5989 13ae 40F20000 		movw	r0, #:lower16:.LC261
 5990 13b2 C0F20000 		movt	r0, #:upper16:.LC261
 5991 13b6 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 181


1444:.\console.c   **** 					printf(STR_HELP_SHOWC);
 5992              		.loc 1 1444 0
 5993 13ba 40F20000 		movw	r0, #:lower16:.LC262
 5994 13be C0F20000 		movt	r0, #:upper16:.LC262
 5995 13c2 FFF7FEFF 		bl	puts
1445:.\console.c   **** 					printf(STR_HELP_SHOWD);	
 5996              		.loc 1 1445 0
 5997 13c6 40F20000 		movw	r0, #:lower16:.LC263
 5998 13ca C0F20000 		movt	r0, #:upper16:.LC263
 5999 13ce FFF7FEFF 		bl	puts
1446:.\console.c   **** 					printf(STR_HELP_SHOWE);
 6000              		.loc 1 1446 0
 6001 13d2 40F20000 		movw	r0, #:lower16:.LC264
 6002 13d6 C0F20000 		movt	r0, #:upper16:.LC264
 6003 13da FFF7FEFF 		bl	puts
1447:.\console.c   **** 					printf(STR_HELP_SHOWF);	
 6004              		.loc 1 1447 0
 6005 13de 40F20000 		movw	r0, #:lower16:.LC265
 6006 13e2 C0F20000 		movt	r0, #:upper16:.LC265
 6007 13e6 FFF7FEFF 		bl	puts
1448:.\console.c   **** 					printf(STR_HELP_SHOF1);
 6008              		.loc 1 1448 0
 6009 13ea 40F20000 		movw	r0, #:lower16:.LC266
 6010 13ee C0F20000 		movt	r0, #:upper16:.LC266
 6011 13f2 FFF7FEFF 		bl	puts
1449:.\console.c   **** 					printf(STR_HELP_SHOF2);
 6012              		.loc 1 1449 0
 6013 13f6 40F20000 		movw	r0, #:lower16:.LC267
 6014 13fa C0F20000 		movt	r0, #:upper16:.LC267
 6015 13fe FFF7FEFF 		bl	puts
1450:.\console.c   **** 					printf(STR_HELP_SHOF3);					
 6016              		.loc 1 1450 0
 6017 1402 40F20000 		movw	r0, #:lower16:.LC268
 6018 1406 C0F20000 		movt	r0, #:upper16:.LC268
 6019 140a FFF7FEFF 		bl	puts
1451:.\console.c   **** 					printf(STR_HELP_SHOWG);
 6020              		.loc 1 1451 0
 6021 140e 40F20000 		movw	r0, #:lower16:.LC269
 6022 1412 C0F20000 		movt	r0, #:upper16:.LC269
 6023 1416 FFF7FEFF 		bl	puts
1452:.\console.c   **** 					printf(STR_HELP_SHOWH);					
 6024              		.loc 1 1452 0
 6025 141a 40F20000 		movw	r0, #:lower16:.LC270
 6026 141e C0F20000 		movt	r0, #:upper16:.LC270
 6027 1422 FFF7FEFF 		bl	puts
1453:.\console.c   **** 					printf(STR_HELP_SHOWZ);
 6028              		.loc 1 1453 0
 6029 1426 40F20000 		movw	r0, #:lower16:.LC271
 6030 142a C0F20000 		movt	r0, #:upper16:.LC271
 6031 142e FFF7FEFF 		bl	puts
1454:.\console.c   **** 					goto exitpars;
 6032              		.loc 1 1454 0
 6033 1432 06F04FB8 		b	.L131
 6034              	.L217:
1459:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "q") == 0)
 6035              		.loc 1 1459 0
 6036 1436 7E48     		ldr	r0, .L727
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 182


 6037 1438 40F20001 		movw	r1, #:lower16:.LC272
 6038 143c C0F20001 		movt	r1, #:upper16:.LC272
 6039 1440 FFF7FEFF 		bl	strcmp
 6040 1444 0346     		mov	r3, r0
 6041 1446 002B     		cmp	r3, #0
 6042 1448 7FD1     		bne	.L218
1462:.\console.c   **** 					printf(STR_QTAB0);
 6043              		.loc 1 1462 0
 6044 144a 40F20000 		movw	r0, #:lower16:.LC273
 6045 144e C0F20000 		movt	r0, #:upper16:.LC273
 6046 1452 FFF7FEFF 		bl	puts
1463:.\console.c   **** 					printf(STR_QTAB1);
 6047              		.loc 1 1463 0
 6048 1456 40F20000 		movw	r0, #:lower16:.LC274
 6049 145a C0F20000 		movt	r0, #:upper16:.LC274
 6050 145e FFF7FEFF 		bl	puts
1464:.\console.c   **** 					printf(STR_Q000);
 6051              		.loc 1 1464 0
 6052 1462 40F20000 		movw	r0, #:lower16:.LC275
 6053 1466 C0F20000 		movt	r0, #:upper16:.LC275
 6054 146a FFF7FEFF 		bl	puts
1465:.\console.c   **** 					printf(STR_Q011);					
 6055              		.loc 1 1465 0
 6056 146e 40F20000 		movw	r0, #:lower16:.LC276
 6057 1472 C0F20000 		movt	r0, #:upper16:.LC276
 6058 1476 FFF7FEFF 		bl	puts
1466:.\console.c   **** 					printf(STR_Q013);					
 6059              		.loc 1 1466 0
 6060 147a 40F20000 		movw	r0, #:lower16:.LC277
 6061 147e C0F20000 		movt	r0, #:upper16:.LC277
 6062 1482 FFF7FEFF 		bl	puts
1467:.\console.c   **** 					printf(STR_Q014);			
 6063              		.loc 1 1467 0
 6064 1486 40F20000 		movw	r0, #:lower16:.LC278
 6065 148a C0F20000 		movt	r0, #:upper16:.LC278
 6066 148e FFF7FEFF 		bl	puts
1468:.\console.c   **** 					printf(STR_Q015);					
 6067              		.loc 1 1468 0
 6068 1492 40F20000 		movw	r0, #:lower16:.LC279
 6069 1496 C0F20000 		movt	r0, #:upper16:.LC279
 6070 149a FFF7FEFF 		bl	puts
1469:.\console.c   **** 					printf(STR_Q016);					
 6071              		.loc 1 1469 0
 6072 149e 40F20000 		movw	r0, #:lower16:.LC280
 6073 14a2 C0F20000 		movt	r0, #:upper16:.LC280
 6074 14a6 FFF7FEFF 		bl	puts
1470:.\console.c   **** 					printf(STR_Q017);
 6075              		.loc 1 1470 0
 6076 14aa 40F20000 		movw	r0, #:lower16:.LC281
 6077 14ae C0F20000 		movt	r0, #:upper16:.LC281
 6078 14b2 FFF7FEFF 		bl	puts
1471:.\console.c   **** 					printf(STR_Q021);
 6079              		.loc 1 1471 0
 6080 14b6 40F20000 		movw	r0, #:lower16:.LC282
 6081 14ba C0F20000 		movt	r0, #:upper16:.LC282
 6082 14be FFF7FEFF 		bl	puts
1472:.\console.c   **** 					printf(STR_Q031);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 183


 6083              		.loc 1 1472 0
 6084 14c2 40F20000 		movw	r0, #:lower16:.LC283
 6085 14c6 C0F20000 		movt	r0, #:upper16:.LC283
 6086 14ca FFF7FEFF 		bl	puts
1473:.\console.c   **** 					printf(STR_Q033);
 6087              		.loc 1 1473 0
 6088 14ce 40F20000 		movw	r0, #:lower16:.LC284
 6089 14d2 C0F20000 		movt	r0, #:upper16:.LC284
 6090 14d6 FFF7FEFF 		bl	puts
1474:.\console.c   **** 					printf(STR_Q034);
 6091              		.loc 1 1474 0
 6092 14da 40F20000 		movw	r0, #:lower16:.LC285
 6093 14de C0F20000 		movt	r0, #:upper16:.LC285
 6094 14e2 FFF7FEFF 		bl	puts
1475:.\console.c   **** 					printf(STR_Q040);					
 6095              		.loc 1 1475 0
 6096 14e6 40F20000 		movw	r0, #:lower16:.LC286
 6097 14ea C0F20000 		movt	r0, #:upper16:.LC286
 6098 14ee FFF7FEFF 		bl	puts
1476:.\console.c   **** 					printf(STR_Q041);					
 6099              		.loc 1 1476 0
 6100 14f2 40F20000 		movw	r0, #:lower16:.LC287
 6101 14f6 C0F20000 		movt	r0, #:upper16:.LC287
 6102 14fa FFF7FEFF 		bl	puts
1477:.\console.c   **** 					printf(STR_Q042);
 6103              		.loc 1 1477 0
 6104 14fe 40F20000 		movw	r0, #:lower16:.LC288
 6105 1502 C0F20000 		movt	r0, #:upper16:.LC288
 6106 1506 FFF7FEFF 		bl	puts
1478:.\console.c   **** 					printf(STR_Q043);
 6107              		.loc 1 1478 0
 6108 150a 40F20000 		movw	r0, #:lower16:.LC289
 6109 150e C0F20000 		movt	r0, #:upper16:.LC289
 6110 1512 FFF7FEFF 		bl	puts
1479:.\console.c   **** 					printf(STR_Q044);					
 6111              		.loc 1 1479 0
 6112 1516 40F20000 		movw	r0, #:lower16:.LC290
 6113 151a C0F20000 		movt	r0, #:upper16:.LC290
 6114 151e FFF7FEFF 		bl	puts
1480:.\console.c   **** 					printf(STR_Q051);
 6115              		.loc 1 1480 0
 6116 1522 40F20000 		movw	r0, #:lower16:.LC291
 6117 1526 C0F20000 		movt	r0, #:upper16:.LC291
 6118 152a FFF7FEFF 		bl	puts
1481:.\console.c   **** 					printf(STR_Q052);
 6119              		.loc 1 1481 0
 6120 152e 40F20000 		movw	r0, #:lower16:.LC292
 6121 1532 C0F20000 		movt	r0, #:upper16:.LC292
 6122 1536 FFF7FEFF 		bl	puts
1482:.\console.c   **** 					printf(STR_Q053);					
 6123              		.loc 1 1482 0
 6124 153a 40F20000 		movw	r0, #:lower16:.LC293
 6125 153e C0F20000 		movt	r0, #:upper16:.LC293
 6126 1542 FFF7FEFF 		bl	puts
1484:.\console.c   **** 					goto exitpars;
 6127              		.loc 1 1484 0
 6128 1546 05F0C5BF 		b	.L131
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 184


 6129              	.L218:
1489:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "testdac") == 0)
 6130              		.loc 1 1489 0
 6131 154a 3948     		ldr	r0, .L727
 6132 154c 40F20001 		movw	r1, #:lower16:.LC294
 6133 1550 C0F20001 		movt	r1, #:upper16:.LC294
 6134 1554 FFF7FEFF 		bl	strcmp
 6135 1558 0346     		mov	r3, r0
 6136 155a 002B     		cmp	r3, #0
 6137 155c 13D1     		bne	.L219
1491:.\console.c   **** 					printf(STR_HELP_TDAC1);
 6138              		.loc 1 1491 0
 6139 155e 40F20000 		movw	r0, #:lower16:.LC295
 6140 1562 C0F20000 		movt	r0, #:upper16:.LC295
 6141 1566 FFF7FEFF 		bl	puts
1492:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6142              		.loc 1 1492 0
 6143 156a 40F20000 		movw	r0, #:lower16:.LC168
 6144 156e C0F20000 		movt	r0, #:upper16:.LC168
 6145 1572 FFF7FEFF 		bl	puts
1493:.\console.c   **** 					printf(STR_HELP_TDAC2);
 6146              		.loc 1 1493 0
 6147 1576 40F20000 		movw	r0, #:lower16:.LC296
 6148 157a C0F20000 		movt	r0, #:upper16:.LC296
 6149 157e FFF7FEFF 		bl	puts
1494:.\console.c   **** 					goto exitpars;
 6150              		.loc 1 1494 0
 6151 1582 05F0A7BF 		b	.L131
 6152              	.L219:
1499:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "prompt") == 0)
 6153              		.loc 1 1499 0
 6154 1586 2A48     		ldr	r0, .L727
 6155 1588 40F20001 		movw	r1, #:lower16:.LC130
 6156 158c C0F20001 		movt	r1, #:upper16:.LC130
 6157 1590 FFF7FEFF 		bl	strcmp
 6158 1594 0346     		mov	r3, r0
 6159 1596 002B     		cmp	r3, #0
 6160 1598 13D1     		bne	.L220
1501:.\console.c   **** 					printf(STR_HELP_PROM1);
 6161              		.loc 1 1501 0
 6162 159a 40F20000 		movw	r0, #:lower16:.LC143
 6163 159e C0F20000 		movt	r0, #:upper16:.LC143
 6164 15a2 FFF7FEFF 		bl	puts
1502:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6165              		.loc 1 1502 0
 6166 15a6 40F20000 		movw	r0, #:lower16:.LC168
 6167 15aa C0F20000 		movt	r0, #:upper16:.LC168
 6168 15ae FFF7FEFF 		bl	puts
1503:.\console.c   **** 					printf(STR_HELP_PROM2);
 6169              		.loc 1 1503 0
 6170 15b2 40F20000 		movw	r0, #:lower16:.LC297
 6171 15b6 C0F20000 		movt	r0, #:upper16:.LC297
 6172 15ba FFF7FEFF 		bl	puts
1504:.\console.c   **** 					goto exitpars;
 6173              		.loc 1 1504 0
 6174 15be 05F089BF 		b	.L131
 6175              	.L220:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 185


1509:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "version") == 0)
 6176              		.loc 1 1509 0
 6177 15c2 1B48     		ldr	r0, .L727
 6178 15c4 40F20001 		movw	r1, #:lower16:.LC123
 6179 15c8 C0F20001 		movt	r1, #:upper16:.LC123
 6180 15cc FFF7FEFF 		bl	strcmp
 6181 15d0 0346     		mov	r3, r0
 6182 15d2 002B     		cmp	r3, #0
 6183 15d4 09D0     		beq	.L221
1510:.\console.c   **** 				||(strcmp(actual_cmd.parameter, "v") == 0))
 6184              		.loc 1 1510 0
 6185 15d6 1648     		ldr	r0, .L727
 6186 15d8 40F20001 		movw	r1, #:lower16:.LC122
 6187 15dc C0F20001 		movt	r1, #:upper16:.LC122
 6188 15e0 FFF7FEFF 		bl	strcmp
 6189 15e4 0346     		mov	r3, r0
 6190 15e6 002B     		cmp	r3, #0
 6191 15e8 19D1     		bne	.L222
 6192              	.L221:
1512:.\console.c   **** 					printf(STR_HELP_VERS1);
 6193              		.loc 1 1512 0
 6194 15ea 40F20000 		movw	r0, #:lower16:.LC145
 6195 15ee C0F20000 		movt	r0, #:upper16:.LC145
 6196 15f2 FFF7FEFF 		bl	puts
1513:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6197              		.loc 1 1513 0
 6198 15f6 40F20000 		movw	r0, #:lower16:.LC168
 6199 15fa C0F20000 		movt	r0, #:upper16:.LC168
 6200 15fe FFF7FEFF 		bl	puts
1514:.\console.c   **** 					printf(STR_HELP_VERS2);
 6201              		.loc 1 1514 0
 6202 1602 40F20000 		movw	r0, #:lower16:.LC298
 6203 1606 C0F20000 		movt	r0, #:upper16:.LC298
 6204 160a FFF7FEFF 		bl	puts
1515:.\console.c   **** 					printf(STR_HELP_VERS3);				
 6205              		.loc 1 1515 0
 6206 160e 40F20000 		movw	r0, #:lower16:.LC299
 6207 1612 C0F20000 		movt	r0, #:upper16:.LC299
 6208 1616 FFF7FEFF 		bl	puts
1516:.\console.c   **** 					goto exitpars;
 6209              		.loc 1 1516 0
 6210 161a 05F05BBF 		b	.L131
 6211              	.L222:
1518:.\console.c   **** 				printf(STR_ERROR3);	/* Bad Parameter(s) */
 6212              		.loc 1 1518 0
 6213 161e 40F20000 		movw	r0, #:lower16:.LC300
 6214 1622 C0F20000 		movt	r0, #:upper16:.LC300
 6215 1626 FFF7FEFF 		bl	printf
1519:.\console.c   **** 				goto exitpars;
 6216              		.loc 1 1519 0
 6217 162a 05F053BF 		b	.L131
 6218              	.L728:
 6219 162e 00BF     		.align	2
 6220              	.L727:
 6221 1630 0F000000 		.word	actual_cmd+15
 6222              	.L214:
1522:.\console.c   **** 		}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 186


1523:.\console.c   **** 		/* END CMD HELP */
1524:.\console.c   **** 	
1525:.\console.c   **** 	
1526:.\console.c   **** 		/* CMD SHOW */
1527:.\console.c   **** 		if ((strcmp(actual_cmd.action, "show") == 0) ||
 6223              		.loc 1 1527 0
 6224 1634 40F20000 		movw	r0, #:lower16:actual_cmd
 6225 1638 C0F20000 		movt	r0, #:upper16:actual_cmd
 6226 163c 40F20001 		movw	r1, #:lower16:.LC237
 6227 1640 C0F20001 		movt	r1, #:upper16:.LC237
 6228 1644 FFF7FEFF 		bl	strcmp
 6229 1648 0346     		mov	r3, r0
 6230 164a 002B     		cmp	r3, #0
 6231 164c 0DD0     		beq	.L223
1528:.\console.c   **** 		   (strcmp(actual_cmd.action, "s") == 0))
 6232              		.loc 1 1528 0 discriminator 1
 6233 164e 40F20000 		movw	r0, #:lower16:actual_cmd
 6234 1652 C0F20000 		movt	r0, #:upper16:actual_cmd
 6235 1656 40F20001 		movw	r1, #:lower16:.LC301
 6236 165a C0F20001 		movt	r1, #:upper16:.LC301
 6237 165e FFF7FEFF 		bl	strcmp
 6238 1662 0346     		mov	r3, r0
1527:.\console.c   **** 		if ((strcmp(actual_cmd.action, "show") == 0) ||
 6239              		.loc 1 1527 0 discriminator 1
 6240 1664 002B     		cmp	r3, #0
 6241 1666 43F0AC82 		bne	.L224
 6242              	.L223:
1529:.\console.c   **** 		{
1530:.\console.c   **** 			// SHOW CONTROL
1531:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "control") == 0)	
 6243              		.loc 1 1531 0
 6244 166a 1048     		ldr	r0, .L729
 6245 166c 40F20001 		movw	r1, #:lower16:.LC302
 6246 1670 C0F20001 		movt	r1, #:upper16:.LC302
 6247 1674 FFF7FEFF 		bl	strcmp
 6248 1678 0346     		mov	r3, r0
 6249 167a 002B     		cmp	r3, #0
 6250 167c 0ED0     		beq	.L225
1532:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ctrl") == 0) 
 6251              		.loc 1 1532 0
 6252 167e 0B48     		ldr	r0, .L729
 6253 1680 40F20001 		movw	r1, #:lower16:.LC303
 6254 1684 C0F20001 		movt	r1, #:upper16:.LC303
 6255 1688 FFF7FEFF 		bl	strcmp
 6256 168c 0346     		mov	r3, r0
 6257 168e 002B     		cmp	r3, #0
 6258 1690 04D0     		beq	.L225
1533:.\console.c   **** 			|| (strlen(actual_cmd.parameter) == 0))
 6259              		.loc 1 1533 0
 6260 1692 064B     		ldr	r3, .L729
 6261 1694 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6262 1696 002B     		cmp	r3, #0
 6263 1698 40F0D382 		bne	.L226
 6264              	.L225:
1534:.\console.c   **** 			{
1535:.\console.c   **** 				printf("\x1B[2J");			/* Erase Screen (ESC=\x1B) 	*/
 6265              		.loc 1 1535 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 187


 6266 169c 40F20000 		movw	r0, #:lower16:.LC304
 6267 16a0 C0F20000 		movt	r0, #:upper16:.LC304
 6268 16a4 FFF7FEFF 		bl	printf
1536:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6269              		.loc 1 1536 0
 6270 16a8 BDE2     		b	.L227
 6271              	.L730:
 6272 16aa 00BF     		.align	2
 6273              	.L729:
 6274 16ac 0F000000 		.word	actual_cmd+15
 6275              	.L231:
1537:.\console.c   **** 				{
1538:.\console.c   **** 					printf("\x1B[H");		/* Cursor Home (ESC=\x1B)	*/
 6276              		.loc 1 1538 0
 6277 16b0 40F20000 		movw	r0, #:lower16:.LC305
 6278 16b4 C0F20000 		movt	r0, #:upper16:.LC305
 6279 16b8 FFF7FEFF 		bl	printf
1539:.\console.c   **** 					printf("---------------------------------\r\n");
 6280              		.loc 1 1539 0
 6281 16bc 40F20000 		movw	r0, #:lower16:.LC306
 6282 16c0 C0F20000 		movt	r0, #:upper16:.LC306
 6283 16c4 FFF7FEFF 		bl	puts
1540:.\console.c   **** 					printf("--- GoBee Director RT CONTROL ---\r\n");
 6284              		.loc 1 1540 0
 6285 16c8 40F20000 		movw	r0, #:lower16:.LC307
 6286 16cc C0F20000 		movt	r0, #:upper16:.LC307
 6287 16d0 FFF7FEFF 		bl	puts
1541:.\console.c   **** 					printf("---------------------------------\r\n");
 6288              		.loc 1 1541 0
 6289 16d4 40F20000 		movw	r0, #:lower16:.LC306
 6290 16d8 C0F20000 		movt	r0, #:upper16:.LC306
 6291 16dc FFF7FEFF 		bl	puts
1542:.\console.c   **** 					printf("\r\n");
 6292              		.loc 1 1542 0
 6293 16e0 40F20000 		movw	r0, #:lower16:.LC42
 6294 16e4 C0F20000 		movt	r0, #:upper16:.LC42
 6295 16e8 FFF7FEFF 		bl	puts
1543:.\console.c   **** 									
1544:.\console.c   **** //					printf("agyro rate=%1.4f", (float)agyro.rate);
1545:.\console.c   **** //					printf_spc(7);
1546:.\console.c   **** //					printf("  lpf(rate)=%1.4f [deg/s]", (float)agyro.rate_lowpass);
1547:.\console.c   **** //					printf_spc(7);
1548:.\console.c   **** //					printf("  angle=%1.4f [deg]", (float)agyro.angle);
1549:.\console.c   **** //					printf_spc(7);							
1550:.\console.c   **** //					printf("\r\n");	
1551:.\console.c   **** //					printf("\r\n");	
1552:.\console.c   **** 
1553:.\console.c   **** //					printf("fbk enc rate=%1.4f [deg/s]", (float)pan_feedback_encoder.angular_velocity);
1554:.\console.c   **** //					printf_spc(7);
1555:.\console.c   **** //					printf("  angle=%1.4f [deg]", (float)pan_feedback_encoder.angle);	
1556:.\console.c   **** 
1557:.\console.c   **** 					printf("axis_res(P)=%+1.3f [step/2PI]", (float)pan_axis.param.resolution.fnum);
 6296              		.loc 1 1557 0
 6297 16ec 40F20003 		movw	r3, #:lower16:pan_axis
 6298 16f0 C0F20003 		movt	r3, #:upper16:pan_axis
 6299 16f4 DB68     		ldr	r3, [r3, #12]	@ float
 6300 16f6 1846     		mov	r0, r3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 188


 6301 16f8 FFF7FEFF 		bl	__aeabi_f2d
 6302 16fc 0246     		mov	r2, r0
 6303 16fe 0B46     		mov	r3, r1
 6304 1700 40F20000 		movw	r0, #:lower16:.LC308
 6305 1704 C0F20000 		movt	r0, #:upper16:.LC308
 6306 1708 FFF7FEFF 		bl	printf
1558:.\console.c   **** 					printf_spc(1);					
 6307              		.loc 1 1558 0
 6308 170c 4FF00100 		mov	r0, #1
 6309 1710 FFF7FEFF 		bl	printf_spc
1559:.\console.c   **** 					printf("axis_res(T)=%+1.3f [step/2PI]", (float)tilt_axis.param.resolution.fnum);
 6310              		.loc 1 1559 0
 6311 1714 40F20003 		movw	r3, #:lower16:tilt_axis
 6312 1718 C0F20003 		movt	r3, #:upper16:tilt_axis
 6313 171c DB68     		ldr	r3, [r3, #12]	@ float
 6314 171e 1846     		mov	r0, r3
 6315 1720 FFF7FEFF 		bl	__aeabi_f2d
 6316 1724 0246     		mov	r2, r0
 6317 1726 0B46     		mov	r3, r1
 6318 1728 40F20000 		movw	r0, #:lower16:.LC309
 6319 172c C0F20000 		movt	r0, #:upper16:.LC309
 6320 1730 FFF7FEFF 		bl	printf
1560:.\console.c   **** 					printf("\r\n");							
 6321              		.loc 1 1560 0
 6322 1734 40F20000 		movw	r0, #:lower16:.LC42
 6323 1738 C0F20000 		movt	r0, #:upper16:.LC42
 6324 173c FFF7FEFF 		bl	puts
1561:.\console.c   **** 					
1562:.\console.c   **** 					printf("angle(P)=%+1.4f [deg]", (float)pan_axis.mc.slave_enc.position * 360/pan_axis.param.res
 6325              		.loc 1 1562 0
 6326 1740 40F20003 		movw	r3, #:lower16:pan_axis
 6327 1744 C0F20003 		movt	r3, #:upper16:pan_axis
 6328 1748 5B6C     		ldr	r3, [r3, #68]
 6329 174a 1846     		mov	r0, r3
 6330 174c FFF7FEFF 		bl	__aeabi_i2f
 6331 1750 0346     		mov	r3, r0
 6332 1752 1846     		mov	r0, r3
 6333 1754 4FF00001 		mov	r1, #0
 6334 1758 C4F2B431 		movt	r1, 17332
 6335 175c FFF7FEFF 		bl	__aeabi_fmul
 6336 1760 0346     		mov	r3, r0
 6337 1762 1A46     		mov	r2, r3
 6338 1764 40F20003 		movw	r3, #:lower16:pan_axis
 6339 1768 C0F20003 		movt	r3, #:upper16:pan_axis
 6340 176c DB68     		ldr	r3, [r3, #12]	@ float
 6341 176e 1046     		mov	r0, r2
 6342 1770 1946     		mov	r1, r3
 6343 1772 FFF7FEFF 		bl	__aeabi_fdiv
 6344 1776 0346     		mov	r3, r0
 6345 1778 1846     		mov	r0, r3
 6346 177a FFF7FEFF 		bl	__aeabi_f2d
 6347 177e 0246     		mov	r2, r0
 6348 1780 0B46     		mov	r3, r1
 6349 1782 40F20000 		movw	r0, #:lower16:.LC310
 6350 1786 C0F20000 		movt	r0, #:upper16:.LC310
 6351 178a FFF7FEFF 		bl	printf
1563:.\console.c   **** 					printf_spc(13);					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 189


 6352              		.loc 1 1563 0
 6353 178e 4FF00D00 		mov	r0, #13
 6354 1792 FFF7FEFF 		bl	printf_spc
1564:.\console.c   **** 					printf("angle(T)=%+1.4f [deg]", (float)tilt_axis.mc.slave_enc.position * 360/tilt_axis.param.r
 6355              		.loc 1 1564 0
 6356 1796 40F20003 		movw	r3, #:lower16:tilt_axis
 6357 179a C0F20003 		movt	r3, #:upper16:tilt_axis
 6358 179e 5B6C     		ldr	r3, [r3, #68]
 6359 17a0 1846     		mov	r0, r3
 6360 17a2 FFF7FEFF 		bl	__aeabi_i2f
 6361 17a6 0346     		mov	r3, r0
 6362 17a8 1846     		mov	r0, r3
 6363 17aa 4FF00001 		mov	r1, #0
 6364 17ae C4F2B431 		movt	r1, 17332
 6365 17b2 FFF7FEFF 		bl	__aeabi_fmul
 6366 17b6 0346     		mov	r3, r0
 6367 17b8 1A46     		mov	r2, r3
 6368 17ba 40F20003 		movw	r3, #:lower16:tilt_axis
 6369 17be C0F20003 		movt	r3, #:upper16:tilt_axis
 6370 17c2 DB68     		ldr	r3, [r3, #12]	@ float
 6371 17c4 1046     		mov	r0, r2
 6372 17c6 1946     		mov	r1, r3
 6373 17c8 FFF7FEFF 		bl	__aeabi_fdiv
 6374 17cc 0346     		mov	r3, r0
 6375 17ce 1846     		mov	r0, r3
 6376 17d0 FFF7FEFF 		bl	__aeabi_f2d
 6377 17d4 0246     		mov	r2, r0
 6378 17d6 0B46     		mov	r3, r1
 6379 17d8 40F20000 		movw	r0, #:lower16:.LC311
 6380 17dc C0F20000 		movt	r0, #:upper16:.LC311
 6381 17e0 FFF7FEFF 		bl	printf
1565:.\console.c   **** 					printf("\r\n");						
 6382              		.loc 1 1565 0
 6383 17e4 40F20000 		movw	r0, #:lower16:.LC42
 6384 17e8 C0F20000 		movt	r0, #:upper16:.LC42
 6385 17ec FFF7FEFF 		bl	puts
1566:.\console.c   **** 					printf("\r\n");		
 6386              		.loc 1 1566 0
 6387 17f0 40F20000 		movw	r0, #:lower16:.LC42
 6388 17f4 C0F20000 		movt	r0, #:upper16:.LC42
 6389 17f8 FFF7FEFF 		bl	puts
1567:.\console.c   **** 					
1568:.\console.c   **** 					printf("fbk(P)=%+1.4f [step]", (float)pan_axis.mc.slave_enc.position);
 6390              		.loc 1 1568 0
 6391 17fc 40F20003 		movw	r3, #:lower16:pan_axis
 6392 1800 C0F20003 		movt	r3, #:upper16:pan_axis
 6393 1804 5B6C     		ldr	r3, [r3, #68]
 6394 1806 1846     		mov	r0, r3
 6395 1808 FFF7FEFF 		bl	__aeabi_i2f
 6396 180c 0346     		mov	r3, r0
 6397 180e 1846     		mov	r0, r3
 6398 1810 FFF7FEFF 		bl	__aeabi_f2d
 6399 1814 0246     		mov	r2, r0
 6400 1816 0B46     		mov	r3, r1
 6401 1818 40F20000 		movw	r0, #:lower16:.LC312
 6402 181c C0F20000 		movt	r0, #:upper16:.LC312
 6403 1820 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 190


1569:.\console.c   **** 					printf_spc(14);					
 6404              		.loc 1 1569 0
 6405 1824 4FF00E00 		mov	r0, #14
 6406 1828 FFF7FEFF 		bl	printf_spc
1570:.\console.c   **** 					printf("fbk(T)=%+1.4f [step]", (float)tilt_axis.mc.slave_enc.position);
 6407              		.loc 1 1570 0
 6408 182c 40F20003 		movw	r3, #:lower16:tilt_axis
 6409 1830 C0F20003 		movt	r3, #:upper16:tilt_axis
 6410 1834 5B6C     		ldr	r3, [r3, #68]
 6411 1836 1846     		mov	r0, r3
 6412 1838 FFF7FEFF 		bl	__aeabi_i2f
 6413 183c 0346     		mov	r3, r0
 6414 183e 1846     		mov	r0, r3
 6415 1840 FFF7FEFF 		bl	__aeabi_f2d
 6416 1844 0246     		mov	r2, r0
 6417 1846 0B46     		mov	r3, r1
 6418 1848 40F20000 		movw	r0, #:lower16:.LC313
 6419 184c C0F20000 		movt	r0, #:upper16:.LC313
 6420 1850 FFF7FEFF 		bl	printf
1571:.\console.c   **** 					printf("\r\n");						
 6421              		.loc 1 1571 0
 6422 1854 40F20000 		movw	r0, #:lower16:.LC42
 6423 1858 C0F20000 		movt	r0, #:upper16:.LC42
 6424 185c FFF7FEFF 		bl	puts
1572:.\console.c   **** 
1573:.\console.c   **** 					printf("mast_enc(P)=%+1.4f [step]", (float)pan_axis.mc.master_enc_position);
 6425              		.loc 1 1573 0
 6426 1860 40F20003 		movw	r3, #:lower16:pan_axis
 6427 1864 C0F20003 		movt	r3, #:upper16:pan_axis
 6428 1868 5B6B     		ldr	r3, [r3, #52]
 6429 186a 1846     		mov	r0, r3
 6430 186c FFF7FEFF 		bl	__aeabi_i2f
 6431 1870 0346     		mov	r3, r0
 6432 1872 1846     		mov	r0, r3
 6433 1874 FFF7FEFF 		bl	__aeabi_f2d
 6434 1878 0246     		mov	r2, r0
 6435 187a 0B46     		mov	r3, r1
 6436 187c 40F20000 		movw	r0, #:lower16:.LC314
 6437 1880 C0F20000 		movt	r0, #:upper16:.LC314
 6438 1884 FFF7FEFF 		bl	printf
1574:.\console.c   **** 					printf_spc(9);					
 6439              		.loc 1 1574 0
 6440 1888 4FF00900 		mov	r0, #9
 6441 188c FFF7FEFF 		bl	printf_spc
1575:.\console.c   **** 					printf("mast_enc(T)=%+1.4f [step]", (float)tilt_axis.mc.master_enc_position);
 6442              		.loc 1 1575 0
 6443 1890 40F20003 		movw	r3, #:lower16:tilt_axis
 6444 1894 C0F20003 		movt	r3, #:upper16:tilt_axis
 6445 1898 5B6B     		ldr	r3, [r3, #52]
 6446 189a 1846     		mov	r0, r3
 6447 189c FFF7FEFF 		bl	__aeabi_i2f
 6448 18a0 0346     		mov	r3, r0
 6449 18a2 1846     		mov	r0, r3
 6450 18a4 FFF7FEFF 		bl	__aeabi_f2d
 6451 18a8 0246     		mov	r2, r0
 6452 18aa 0B46     		mov	r3, r1
 6453 18ac 40F20000 		movw	r0, #:lower16:.LC315
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 191


 6454 18b0 C0F20000 		movt	r0, #:upper16:.LC315
 6455 18b4 FFF7FEFF 		bl	printf
1576:.\console.c   **** 					printf("\r\n");
 6456              		.loc 1 1576 0
 6457 18b8 40F20000 		movw	r0, #:lower16:.LC42
 6458 18bc C0F20000 		movt	r0, #:upper16:.LC42
 6459 18c0 FFF7FEFF 		bl	puts
1577:.\console.c   **** 					
1578:.\console.c   **** 					printf("mast_joy(P)=%+1.4f [step]", (float)pan_axis.mc.master_joy_position);
 6460              		.loc 1 1578 0
 6461 18c4 40F20003 		movw	r3, #:lower16:pan_axis
 6462 18c8 C0F20003 		movt	r3, #:upper16:pan_axis
 6463 18cc DB6B     		ldr	r3, [r3, #60]
 6464 18ce 1846     		mov	r0, r3
 6465 18d0 FFF7FEFF 		bl	__aeabi_i2f
 6466 18d4 0346     		mov	r3, r0
 6467 18d6 1846     		mov	r0, r3
 6468 18d8 FFF7FEFF 		bl	__aeabi_f2d
 6469 18dc 0246     		mov	r2, r0
 6470 18de 0B46     		mov	r3, r1
 6471 18e0 40F20000 		movw	r0, #:lower16:.LC316
 6472 18e4 C0F20000 		movt	r0, #:upper16:.LC316
 6473 18e8 FFF7FEFF 		bl	printf
1579:.\console.c   **** 					printf_spc(9);					
 6474              		.loc 1 1579 0
 6475 18ec 4FF00900 		mov	r0, #9
 6476 18f0 FFF7FEFF 		bl	printf_spc
1580:.\console.c   **** 					printf("mast_joy(T)=%+1.4f [step]", (float)tilt_axis.mc.master_joy_position);					
 6477              		.loc 1 1580 0
 6478 18f4 40F20003 		movw	r3, #:lower16:tilt_axis
 6479 18f8 C0F20003 		movt	r3, #:upper16:tilt_axis
 6480 18fc DB6B     		ldr	r3, [r3, #60]
 6481 18fe 1846     		mov	r0, r3
 6482 1900 FFF7FEFF 		bl	__aeabi_i2f
 6483 1904 0346     		mov	r3, r0
 6484 1906 1846     		mov	r0, r3
 6485 1908 FFF7FEFF 		bl	__aeabi_f2d
 6486 190c 0246     		mov	r2, r0
 6487 190e 0B46     		mov	r3, r1
 6488 1910 40F20000 		movw	r0, #:lower16:.LC317
 6489 1914 C0F20000 		movt	r0, #:upper16:.LC317
 6490 1918 FFF7FEFF 		bl	printf
1581:.\console.c   **** 					
1582:.\console.c   **** 					printf("\r\n");
 6491              		.loc 1 1582 0
 6492 191c 40F20000 		movw	r0, #:lower16:.LC42
 6493 1920 C0F20000 		movt	r0, #:upper16:.LC42
 6494 1924 FFF7FEFF 		bl	puts
1583:.\console.c   **** 					printf("\r\n");
 6495              		.loc 1 1583 0
 6496 1928 40F20000 		movw	r0, #:lower16:.LC42
 6497 192c C0F20000 		movt	r0, #:upper16:.LC42
 6498 1930 FFF7FEFF 		bl	puts
1584:.\console.c   **** 					
1585:.\console.c   **** 					printf("err(P)=%+1.4f", (float)pan_axis.mc.error);
 6499              		.loc 1 1585 0
 6500 1934 40F20003 		movw	r3, #:lower16:pan_axis
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 192


 6501 1938 C0F20003 		movt	r3, #:upper16:pan_axis
 6502 193c 9B6D     		ldr	r3, [r3, #88]	@ float
 6503 193e 1846     		mov	r0, r3
 6504 1940 FFF7FEFF 		bl	__aeabi_f2d
 6505 1944 0246     		mov	r2, r0
 6506 1946 0B46     		mov	r3, r1
 6507 1948 40F20000 		movw	r0, #:lower16:.LC318
 6508 194c C0F20000 		movt	r0, #:upper16:.LC318
 6509 1950 FFF7FEFF 		bl	printf
1586:.\console.c   **** 					printf_spc(21);					
 6510              		.loc 1 1586 0
 6511 1954 4FF01500 		mov	r0, #21
 6512 1958 FFF7FEFF 		bl	printf_spc
1587:.\console.c   **** 					printf("err(T)=%+1.4f", (float)tilt_axis.mc.error);
 6513              		.loc 1 1587 0
 6514 195c 40F20003 		movw	r3, #:lower16:tilt_axis
 6515 1960 C0F20003 		movt	r3, #:upper16:tilt_axis
 6516 1964 9B6D     		ldr	r3, [r3, #88]	@ float
 6517 1966 1846     		mov	r0, r3
 6518 1968 FFF7FEFF 		bl	__aeabi_f2d
 6519 196c 0246     		mov	r2, r0
 6520 196e 0B46     		mov	r3, r1
 6521 1970 40F20000 		movw	r0, #:lower16:.LC319
 6522 1974 C0F20000 		movt	r0, #:upper16:.LC319
 6523 1978 FFF7FEFF 		bl	printf
1588:.\console.c   **** 					printf("\r\n");	
 6524              		.loc 1 1588 0
 6525 197c 40F20000 		movw	r0, #:lower16:.LC42
 6526 1980 C0F20000 		movt	r0, #:upper16:.LC42
 6527 1984 FFF7FEFF 		bl	puts
1589:.\console.c   **** 					
1590:.\console.c   **** 					printf("derr(P)=%+1.4f", (float)pan_axis.mc.derror);
 6528              		.loc 1 1590 0
 6529 1988 40F20003 		movw	r3, #:lower16:pan_axis
 6530 198c C0F20003 		movt	r3, #:upper16:pan_axis
 6531 1990 5B6E     		ldr	r3, [r3, #100]	@ float
 6532 1992 1846     		mov	r0, r3
 6533 1994 FFF7FEFF 		bl	__aeabi_f2d
 6534 1998 0246     		mov	r2, r0
 6535 199a 0B46     		mov	r3, r1
 6536 199c 40F20000 		movw	r0, #:lower16:.LC320
 6537 19a0 C0F20000 		movt	r0, #:upper16:.LC320
 6538 19a4 FFF7FEFF 		bl	printf
1591:.\console.c   **** 					printf_spc(20);
 6539              		.loc 1 1591 0
 6540 19a8 4FF01400 		mov	r0, #20
 6541 19ac FFF7FEFF 		bl	printf_spc
1592:.\console.c   **** 					printf("derr(T)=%+1.4f", (float)tilt_axis.mc.derror);
 6542              		.loc 1 1592 0
 6543 19b0 40F20003 		movw	r3, #:lower16:tilt_axis
 6544 19b4 C0F20003 		movt	r3, #:upper16:tilt_axis
 6545 19b8 5B6E     		ldr	r3, [r3, #100]	@ float
 6546 19ba 1846     		mov	r0, r3
 6547 19bc FFF7FEFF 		bl	__aeabi_f2d
 6548 19c0 0246     		mov	r2, r0
 6549 19c2 0B46     		mov	r3, r1
 6550 19c4 40F20000 		movw	r0, #:lower16:.LC321
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 193


 6551 19c8 C0F20000 		movt	r0, #:upper16:.LC321
 6552 19cc FFF7FEFF 		bl	printf
1593:.\console.c   **** 					printf("\r\n");	
 6553              		.loc 1 1593 0
 6554 19d0 40F20000 		movw	r0, #:lower16:.LC42
 6555 19d4 C0F20000 		movt	r0, #:upper16:.LC42
 6556 19d8 FFF7FEFF 		bl	puts
1594:.\console.c   **** 
1595:.\console.c   **** 					printf("ierr(P)=%+1.4f", (float)pan_axis.mc.ierror);
 6557              		.loc 1 1595 0
 6558 19dc 40F20003 		movw	r3, #:lower16:pan_axis
 6559 19e0 C0F20003 		movt	r3, #:upper16:pan_axis
 6560 19e4 1B6E     		ldr	r3, [r3, #96]	@ float
 6561 19e6 1846     		mov	r0, r3
 6562 19e8 FFF7FEFF 		bl	__aeabi_f2d
 6563 19ec 0246     		mov	r2, r0
 6564 19ee 0B46     		mov	r3, r1
 6565 19f0 40F20000 		movw	r0, #:lower16:.LC322
 6566 19f4 C0F20000 		movt	r0, #:upper16:.LC322
 6567 19f8 FFF7FEFF 		bl	printf
1596:.\console.c   **** 					printf_spc(20);
 6568              		.loc 1 1596 0
 6569 19fc 4FF01400 		mov	r0, #20
 6570 1a00 FFF7FEFF 		bl	printf_spc
1597:.\console.c   **** 					printf("ierr(T)=%+1.4f", (float)tilt_axis.mc.ierror);
 6571              		.loc 1 1597 0
 6572 1a04 40F20003 		movw	r3, #:lower16:tilt_axis
 6573 1a08 C0F20003 		movt	r3, #:upper16:tilt_axis
 6574 1a0c 1B6E     		ldr	r3, [r3, #96]	@ float
 6575 1a0e 1846     		mov	r0, r3
 6576 1a10 FFF7FEFF 		bl	__aeabi_f2d
 6577 1a14 0246     		mov	r2, r0
 6578 1a16 0B46     		mov	r3, r1
 6579 1a18 40F20000 		movw	r0, #:lower16:.LC323
 6580 1a1c C0F20000 		movt	r0, #:upper16:.LC323
 6581 1a20 FFF7FEFF 		bl	printf
1598:.\console.c   **** 					printf("\r\n");	
 6582              		.loc 1 1598 0
 6583 1a24 40F20000 		movw	r0, #:lower16:.LC42
 6584 1a28 C0F20000 		movt	r0, #:upper16:.LC42
 6585 1a2c FFF7FEFF 		bl	puts
1599:.\console.c   **** 					
1600:.\console.c   **** 					printf("cv(P)=%+1.4f", (float)pan_axis.mc.ctrl_var);
 6586              		.loc 1 1600 0
 6587 1a30 40F20003 		movw	r3, #:lower16:pan_axis
 6588 1a34 C0F20003 		movt	r3, #:upper16:pan_axis
 6589 1a38 1B6F     		ldr	r3, [r3, #112]	@ float
 6590 1a3a 1846     		mov	r0, r3
 6591 1a3c FFF7FEFF 		bl	__aeabi_f2d
 6592 1a40 0246     		mov	r2, r0
 6593 1a42 0B46     		mov	r3, r1
 6594 1a44 40F20000 		movw	r0, #:lower16:.LC324
 6595 1a48 C0F20000 		movt	r0, #:upper16:.LC324
 6596 1a4c FFF7FEFF 		bl	printf
1601:.\console.c   **** 					printf_spc(22);
 6597              		.loc 1 1601 0
 6598 1a50 4FF01600 		mov	r0, #22
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 194


 6599 1a54 FFF7FEFF 		bl	printf_spc
1602:.\console.c   **** 					printf("cv(T)=%+1.4f", (float)tilt_axis.mc.ctrl_var);
 6600              		.loc 1 1602 0
 6601 1a58 40F20003 		movw	r3, #:lower16:tilt_axis
 6602 1a5c C0F20003 		movt	r3, #:upper16:tilt_axis
 6603 1a60 1B6F     		ldr	r3, [r3, #112]	@ float
 6604 1a62 1846     		mov	r0, r3
 6605 1a64 FFF7FEFF 		bl	__aeabi_f2d
 6606 1a68 0246     		mov	r2, r0
 6607 1a6a 0B46     		mov	r3, r1
 6608 1a6c 40F20000 		movw	r0, #:lower16:.LC325
 6609 1a70 C0F20000 		movt	r0, #:upper16:.LC325
 6610 1a74 FFF7FEFF 		bl	printf
1603:.\console.c   **** 					printf("\r\n");	
 6611              		.loc 1 1603 0
 6612 1a78 40F20000 		movw	r0, #:lower16:.LC42
 6613 1a7c C0F20000 		movt	r0, #:upper16:.LC42
 6614 1a80 FFF7FEFF 		bl	puts
1604:.\console.c   **** 					
1605:.\console.c   **** 					printf("pwm_var(P)= %4i", (uint16)pan_axis.mc.pwm_var);
 6615              		.loc 1 1605 0
 6616 1a84 40F20003 		movw	r3, #:lower16:pan_axis
 6617 1a88 C0F20003 		movt	r3, #:upper16:pan_axis
 6618 1a8c B3F87430 		ldrh	r3, [r3, #116]
 6619 1a90 9BB2     		uxth	r3, r3
 6620 1a92 40F20000 		movw	r0, #:lower16:.LC326
 6621 1a96 C0F20000 		movt	r0, #:upper16:.LC326
 6622 1a9a 1946     		mov	r1, r3
 6623 1a9c FFF7FEFF 		bl	printf
1606:.\console.c   **** 					printf_spc(19);
 6624              		.loc 1 1606 0
 6625 1aa0 4FF01300 		mov	r0, #19
 6626 1aa4 FFF7FEFF 		bl	printf_spc
1607:.\console.c   **** 					printf("pwm_var(T)= %4i", (uint16)tilt_axis.mc.pwm_var);
 6627              		.loc 1 1607 0
 6628 1aa8 40F20003 		movw	r3, #:lower16:tilt_axis
 6629 1aac C0F20003 		movt	r3, #:upper16:tilt_axis
 6630 1ab0 B3F87430 		ldrh	r3, [r3, #116]
 6631 1ab4 9BB2     		uxth	r3, r3
 6632 1ab6 40F20000 		movw	r0, #:lower16:.LC327
 6633 1aba C0F20000 		movt	r0, #:upper16:.LC327
 6634 1abe 1946     		mov	r1, r3
 6635 1ac0 FFF7FEFF 		bl	printf
1608:.\console.c   **** 					printf("\r\n");					
 6636              		.loc 1 1608 0
 6637 1ac4 40F20000 		movw	r0, #:lower16:.LC42
 6638 1ac8 C0F20000 		movt	r0, #:upper16:.LC42
 6639 1acc FFF7FEFF 		bl	puts
1609:.\console.c   **** 
1610:.\console.c   **** 					strcpy(slegenda,"PAN  TORQUE:"); 
 6640              		.loc 1 1610 0
 6641 1ad0 40F20002 		movw	r2, #:lower16:slegenda
 6642 1ad4 C0F20002 		movt	r2, #:upper16:slegenda
 6643 1ad8 40F20003 		movw	r3, #:lower16:.LC328
 6644 1adc C0F20003 		movt	r3, #:upper16:.LC328
 6645 1ae0 1446     		mov	r4, r2
 6646 1ae2 0FCB     		ldmia	r3, {r0, r1, r2, r3}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 195


 6647 1ae4 07C4     		stmia	r4!, {r0, r1, r2}
 6648 1ae6 2370     		strb	r3, [r4, #0]
1611:.\console.c   **** 					print_hystogram_border(50, &slegenda[0]);    
 6649              		.loc 1 1611 0
 6650 1ae8 4FF03200 		mov	r0, #50
 6651 1aec 40F20001 		movw	r1, #:lower16:slegenda
 6652 1af0 C0F20001 		movt	r1, #:upper16:slegenda
 6653 1af4 FFF7FEFF 		bl	print_hystogram_border
1612:.\console.c   **** 					print_abs_linear_hystogram((int16)pan_axis.mc.ctrl_var, MOTOR_PWM_PERIOD_HALF, 50, &slegenda[0
 6654              		.loc 1 1612 0
 6655 1af8 40F20003 		movw	r3, #:lower16:pan_axis
 6656 1afc C0F20003 		movt	r3, #:upper16:pan_axis
 6657 1b00 1B6F     		ldr	r3, [r3, #112]	@ float
 6658 1b02 1846     		mov	r0, r3
 6659 1b04 FFF7FEFF 		bl	__aeabi_f2iz
 6660 1b08 0346     		mov	r3, r0
 6661 1b0a 9BB2     		uxth	r3, r3
 6662 1b0c 1BB2     		sxth	r3, r3
 6663 1b0e 1846     		mov	r0, r3
 6664 1b10 4FF40071 		mov	r1, #512
 6665 1b14 4FF03202 		mov	r2, #50
 6666 1b18 40F20003 		movw	r3, #:lower16:slegenda
 6667 1b1c C0F20003 		movt	r3, #:upper16:slegenda
 6668 1b20 FFF7FEFF 		bl	print_abs_linear_hystogram
1613:.\console.c   **** //					print_hystogram_border(50, &slegenda[0]);					
1614:.\console.c   **** //					printf("\r\n");
1615:.\console.c   **** 					
1616:.\console.c   **** 					strcpy(slegenda,"TILT TORQUE:"); 
 6669              		.loc 1 1616 0
 6670 1b24 40F20002 		movw	r2, #:lower16:slegenda
 6671 1b28 C0F20002 		movt	r2, #:upper16:slegenda
 6672 1b2c 40F20003 		movw	r3, #:lower16:.LC329
 6673 1b30 C0F20003 		movt	r3, #:upper16:.LC329
 6674 1b34 1446     		mov	r4, r2
 6675 1b36 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 6676 1b38 07C4     		stmia	r4!, {r0, r1, r2}
 6677 1b3a 2370     		strb	r3, [r4, #0]
1617:.\console.c   **** 					print_abs_linear_hystogram((int16)tilt_axis.mc.ctrl_var, MOTOR_PWM_PERIOD_HALF, 50, &slegenda[
 6678              		.loc 1 1617 0
 6679 1b3c 40F20003 		movw	r3, #:lower16:tilt_axis
 6680 1b40 C0F20003 		movt	r3, #:upper16:tilt_axis
 6681 1b44 1B6F     		ldr	r3, [r3, #112]	@ float
 6682 1b46 1846     		mov	r0, r3
 6683 1b48 FFF7FEFF 		bl	__aeabi_f2iz
 6684 1b4c 0346     		mov	r3, r0
 6685 1b4e 9BB2     		uxth	r3, r3
 6686 1b50 1BB2     		sxth	r3, r3
 6687 1b52 1846     		mov	r0, r3
 6688 1b54 4FF40071 		mov	r1, #512
 6689 1b58 4FF03202 		mov	r2, #50
 6690 1b5c 40F20003 		movw	r3, #:lower16:slegenda
 6691 1b60 C0F20003 		movt	r3, #:upper16:slegenda
 6692 1b64 FFF7FEFF 		bl	print_abs_linear_hystogram
1618:.\console.c   **** 					print_hystogram_border(50, &slegenda[0]); 		
 6693              		.loc 1 1618 0
 6694 1b68 4FF03200 		mov	r0, #50
 6695 1b6c 40F20001 		movw	r1, #:lower16:slegenda
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 196


 6696 1b70 C0F20001 		movt	r1, #:upper16:slegenda
 6697 1b74 FFF7FEFF 		bl	print_hystogram_border
1619:.\console.c   **** 					
1620:.\console.c   **** 					printf("\r\n");
 6698              		.loc 1 1620 0
 6699 1b78 40F20000 		movw	r0, #:lower16:.LC42
 6700 1b7c C0F20000 		movt	r0, #:upper16:.LC42
 6701 1b80 FFF7FEFF 		bl	puts
1621:.\console.c   **** 					printf("MACHINE\r\n");
 6702              		.loc 1 1621 0
 6703 1b84 40F20000 		movw	r0, #:lower16:.LC330
 6704 1b88 C0F20000 		movt	r0, #:upper16:.LC330
 6705 1b8c FFF7FEFF 		bl	puts
1622:.\console.c   **** 					printf("-------\r\n");					
 6706              		.loc 1 1622 0
 6707 1b90 40F20000 		movw	r0, #:lower16:.LC331
 6708 1b94 C0F20000 		movt	r0, #:upper16:.LC331
 6709 1b98 FFF7FEFF 		bl	puts
1623:.\console.c   **** 					printf("Power Status =");
 6710              		.loc 1 1623 0
 6711 1b9c 40F20000 		movw	r0, #:lower16:.LC332
 6712 1ba0 C0F20000 		movt	r0, #:upper16:.LC332
 6713 1ba4 FFF7FEFF 		bl	printf
1624:.\console.c   **** 					if (machine_state == GOBEE_DEENERGIZED)
 6714              		.loc 1 1624 0
 6715 1ba8 40F20003 		movw	r3, #:lower16:machine_state
 6716 1bac C0F20003 		movt	r3, #:upper16:machine_state
 6717 1bb0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6718 1bb2 062B     		cmp	r3, #6
 6719 1bb4 06D1     		bne	.L228
1625:.\console.c   **** 					{
1626:.\console.c   **** 						printf(" Global DEENERGIZED\r\n");	/* Motor Control Power Global Deenergized */				
 6720              		.loc 1 1626 0
 6721 1bb6 40F20000 		movw	r0, #:lower16:.LC333
 6722 1bba C0F20000 		movt	r0, #:upper16:.LC333
 6723 1bbe FFF7FEFF 		bl	puts
 6724 1bc2 13E0     		b	.L229
 6725              	.L228:
1627:.\console.c   **** 					}		
1628:.\console.c   **** 					else if (machine_state == GOBEE_ENERGIZED)
 6726              		.loc 1 1628 0
 6727 1bc4 40F20003 		movw	r3, #:lower16:machine_state
 6728 1bc8 C0F20003 		movt	r3, #:upper16:machine_state
 6729 1bcc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6730 1bce 052B     		cmp	r3, #5
 6731 1bd0 06D1     		bne	.L230
1629:.\console.c   **** 					{
1630:.\console.c   **** 						printf(" Global ENERGIZED!\r\n");	/* Motor Control Power Global Energized */		
 6732              		.loc 1 1630 0
 6733 1bd2 40F20000 		movw	r0, #:lower16:.LC334
 6734 1bd6 C0F20000 		movt	r0, #:upper16:.LC334
 6735 1bda FFF7FEFF 		bl	puts
 6736 1bde 05E0     		b	.L229
 6737              	.L230:
1631:.\console.c   **** 					}			
1632:.\console.c   **** 					else
1633:.\console.c   **** 					{
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 197


1634:.\console.c   **** 						printf(" DANGER!!! INTERNAL FIRMWARE FAULT\r\n");	/* Firmware Fault */		
 6738              		.loc 1 1634 0
 6739 1be0 40F20000 		movw	r0, #:lower16:.LC335
 6740 1be4 C0F20000 		movt	r0, #:upper16:.LC335
 6741 1be8 FFF7FEFF 		bl	puts
 6742              	.L229:
1635:.\console.c   **** 					}	
1636:.\console.c   **** 					printf("ctrl isr counters START=%5i STOP=%5i  \r\n", (uint16)isr_START_check_counter,(uint16)i
 6743              		.loc 1 1636 0
 6744 1bec 40F20003 		movw	r3, #:lower16:isr_START_check_counter
 6745 1bf0 C0F20003 		movt	r3, #:upper16:isr_START_check_counter
 6746 1bf4 1B88     		ldrh	r3, [r3, #0]
 6747 1bf6 1A46     		mov	r2, r3
 6748 1bf8 40F20003 		movw	r3, #:lower16:isr_STOP_check_counter
 6749 1bfc C0F20003 		movt	r3, #:upper16:isr_STOP_check_counter
 6750 1c00 1B88     		ldrh	r3, [r3, #0]
 6751 1c02 40F20000 		movw	r0, #:lower16:.LC336
 6752 1c06 C0F20000 		movt	r0, #:upper16:.LC336
 6753 1c0a 1146     		mov	r1, r2
 6754 1c0c 1A46     		mov	r2, r3
 6755 1c0e FFF7FEFF 		bl	printf
1637:.\console.c   **** 	
1638:.\console.c   **** 					printf("\r\n");						
 6756              		.loc 1 1638 0
 6757 1c12 40F20000 		movw	r0, #:lower16:.LC42
 6758 1c16 C0F20000 		movt	r0, #:upper16:.LC42
 6759 1c1a FFF7FEFF 		bl	puts
1639:.\console.c   **** 					CyDelay(50);
 6760              		.loc 1 1639 0
 6761 1c1e 4FF03200 		mov	r0, #50
 6762 1c22 FFF7FEFF 		bl	CyDelay
 6763              	.L227:
1536:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6764              		.loc 1 1536 0 discriminator 1
 6765 1c26 FFF7FEFF 		bl	AnyButtonPressed
 6766 1c2a 0346     		mov	r3, r0
 6767 1c2c 002B     		cmp	r3, #0
 6768 1c2e 3FF43FAD 		beq	.L231
1640:.\console.c   **** 				}
1641:.\console.c   **** 				printf("\r\n");	
 6769              		.loc 1 1641 0
 6770 1c32 40F20000 		movw	r0, #:lower16:.LC42
 6771 1c36 C0F20000 		movt	r0, #:upper16:.LC42
 6772 1c3a FFF7FEFF 		bl	puts
1642:.\console.c   **** 				goto exitpars;	
 6773              		.loc 1 1642 0
 6774 1c3e 05F049BC 		b	.L131
 6775              	.L226:
1643:.\console.c   **** 			}
1644:.\console.c   **** 			// SHOW CONTROL END
1645:.\console.c   **** 			
1646:.\console.c   **** 			
1647:.\console.c   **** 			// SHOW ANALOG INPUTS
1648:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "analogs") == 0)	
 6776              		.loc 1 1648 0
 6777 1c42 C548     		ldr	r0, .L731+8
 6778 1c44 40F20001 		movw	r1, #:lower16:.LC337
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 198


 6779 1c48 C0F20001 		movt	r1, #:upper16:.LC337
 6780 1c4c FFF7FEFF 		bl	strcmp
 6781 1c50 0346     		mov	r3, r0
 6782 1c52 002B     		cmp	r3, #0
 6783 1c54 00F08C80 		beq	.L699
1649:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ana") == 0))
 6784              		.loc 1 1649 0
 6785 1c58 BF48     		ldr	r0, .L731+8
 6786 1c5a 40F20001 		movw	r1, #:lower16:.LC338
 6787 1c5e C0F20001 		movt	r1, #:upper16:.LC338
 6788 1c62 FFF7FEFF 		bl	strcmp
 6789 1c66 0346     		mov	r3, r0
 6790 1c68 002B     		cmp	r3, #0
 6791 1c6a 40F08A80 		bne	.L233
1650:.\console.c   **** 			{
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6792              		.loc 1 1651 0
 6793 1c6e 7FE0     		b	.L699
 6794              	.L235:
1652:.\console.c   **** 				{			
1653:.\console.c   **** 					printf("I_P=%5d",     (int16)AdcValue[SENSE_IPAN]);
 6795              		.loc 1 1653 0
 6796 1c70 40F20003 		movw	r3, #:lower16:AdcValue
 6797 1c74 C0F20003 		movt	r3, #:upper16:AdcValue
 6798 1c78 1B88     		ldrh	r3, [r3, #0]
 6799 1c7a 1BB2     		sxth	r3, r3
 6800 1c7c 40F20000 		movw	r0, #:lower16:.LC339
 6801 1c80 C0F20000 		movt	r0, #:upper16:.LC339
 6802 1c84 1946     		mov	r1, r3
 6803 1c86 FFF7FEFF 		bl	printf
1654:.\console.c   **** 					printf(" I_T=%5d", (int16)AdcValue[SENSE_ITILT]);					
 6804              		.loc 1 1654 0
 6805 1c8a 40F20003 		movw	r3, #:lower16:AdcValue
 6806 1c8e C0F20003 		movt	r3, #:upper16:AdcValue
 6807 1c92 5B88     		ldrh	r3, [r3, #2]
 6808 1c94 1BB2     		sxth	r3, r3
 6809 1c96 40F20000 		movw	r0, #:lower16:.LC340
 6810 1c9a C0F20000 		movt	r0, #:upper16:.LC340
 6811 1c9e 1946     		mov	r1, r3
 6812 1ca0 FFF7FEFF 		bl	printf
1655:.\console.c   **** 					printf(" Vcc=%5d",    (int16)AdcValue[SENSE_VCC]);
 6813              		.loc 1 1655 0
 6814 1ca4 40F20003 		movw	r3, #:lower16:AdcValue
 6815 1ca8 C0F20003 		movt	r3, #:upper16:AdcValue
 6816 1cac 9B88     		ldrh	r3, [r3, #4]
 6817 1cae 1BB2     		sxth	r3, r3
 6818 1cb0 40F20000 		movw	r0, #:lower16:.LC341
 6819 1cb4 C0F20000 		movt	r0, #:upper16:.LC341
 6820 1cb8 1946     		mov	r1, r3
 6821 1cba FFF7FEFF 		bl	printf
1656:.\console.c   **** 					printf(" Ax=%5d",     (int16)AdcValue[ADXL_X]);
 6822              		.loc 1 1656 0
 6823 1cbe 40F20003 		movw	r3, #:lower16:AdcValue
 6824 1cc2 C0F20003 		movt	r3, #:upper16:AdcValue
 6825 1cc6 DB88     		ldrh	r3, [r3, #6]
 6826 1cc8 1BB2     		sxth	r3, r3
 6827 1cca 40F20000 		movw	r0, #:lower16:.LC342
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 199


 6828 1cce C0F20000 		movt	r0, #:upper16:.LC342
 6829 1cd2 1946     		mov	r1, r3
 6830 1cd4 FFF7FEFF 		bl	printf
1657:.\console.c   **** 					printf(" Ay=%5d",     (int16)AdcValue[ADXL_Y]);
 6831              		.loc 1 1657 0
 6832 1cd8 40F20003 		movw	r3, #:lower16:AdcValue
 6833 1cdc C0F20003 		movt	r3, #:upper16:AdcValue
 6834 1ce0 1B89     		ldrh	r3, [r3, #8]
 6835 1ce2 1BB2     		sxth	r3, r3
 6836 1ce4 40F20000 		movw	r0, #:lower16:.LC343
 6837 1ce8 C0F20000 		movt	r0, #:upper16:.LC343
 6838 1cec 1946     		mov	r1, r3
 6839 1cee FFF7FEFF 		bl	printf
1658:.\console.c   **** 					printf(" Az=%5d",     (int16)AdcValue[ADXL_Z]);
 6840              		.loc 1 1658 0
 6841 1cf2 40F20003 		movw	r3, #:lower16:AdcValue
 6842 1cf6 C0F20003 		movt	r3, #:upper16:AdcValue
 6843 1cfa 5B89     		ldrh	r3, [r3, #10]
 6844 1cfc 1BB2     		sxth	r3, r3
 6845 1cfe 40F20000 		movw	r0, #:lower16:.LC344
 6846 1d02 C0F20000 		movt	r0, #:upper16:.LC344
 6847 1d06 1946     		mov	r1, r3
 6848 1d08 FFF7FEFF 		bl	printf
1659:.\console.c   **** 					printf(" ABS_P=%5d",     (int16)AdcValue[HOME_PAN_ABSV]);
 6849              		.loc 1 1659 0
 6850 1d0c 40F20003 		movw	r3, #:lower16:AdcValue
 6851 1d10 C0F20003 		movt	r3, #:upper16:AdcValue
 6852 1d14 9B89     		ldrh	r3, [r3, #12]
 6853 1d16 1BB2     		sxth	r3, r3
 6854 1d18 40F20000 		movw	r0, #:lower16:.LC345
 6855 1d1c C0F20000 		movt	r0, #:upper16:.LC345
 6856 1d20 1946     		mov	r1, r3
 6857 1d22 FFF7FEFF 		bl	printf
1660:.\console.c   **** 					printf(" ABS_T=%5d",     (int16)AdcValue[HOME_TILT_ABSV]);
 6858              		.loc 1 1660 0
 6859 1d26 40F20003 		movw	r3, #:lower16:AdcValue
 6860 1d2a C0F20003 		movt	r3, #:upper16:AdcValue
 6861 1d2e DB89     		ldrh	r3, [r3, #14]
 6862 1d30 1BB2     		sxth	r3, r3
 6863 1d32 40F20000 		movw	r0, #:lower16:.LC346
 6864 1d36 C0F20000 		movt	r0, #:upper16:.LC346
 6865 1d3a 1946     		mov	r1, r3
 6866 1d3c FFF7FEFF 		bl	printf
1661:.\console.c   **** 					printf(" astim=%5d",     (int16)AdcValue[CTRL_IN_ASTIM]);
 6867              		.loc 1 1661 0
 6868 1d40 40F20003 		movw	r3, #:lower16:AdcValue
 6869 1d44 C0F20003 		movt	r3, #:upper16:AdcValue
 6870 1d48 1B8A     		ldrh	r3, [r3, #16]
 6871 1d4a 1BB2     		sxth	r3, r3
 6872 1d4c 40F20000 		movw	r0, #:lower16:.LC347
 6873 1d50 C0F20000 		movt	r0, #:upper16:.LC347
 6874 1d54 1946     		mov	r1, r3
 6875 1d56 FFF7FEFF 		bl	printf
1662:.\console.c   **** 					
1663:.\console.c   **** 					printf("\r\n");	
 6876              		.loc 1 1663 0
 6877 1d5a 40F20000 		movw	r0, #:lower16:.LC42
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 200


 6878 1d5e C0F20000 		movt	r0, #:upper16:.LC42
 6879 1d62 FFF7FEFF 		bl	puts
1664:.\console.c   **** 					CyDelay(50);
 6880              		.loc 1 1664 0
 6881 1d66 4FF03200 		mov	r0, #50
 6882 1d6a FFF7FEFF 		bl	CyDelay
 6883 1d6e 00E0     		b	.L234
 6884              	.L699:
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6885              		.loc 1 1651 0
 6886 1d70 00BF     		nop
 6887              	.L234:
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6888              		.loc 1 1651 0 is_stmt 0 discriminator 1
 6889 1d72 FFF7FEFF 		bl	AnyButtonPressed
 6890 1d76 0346     		mov	r3, r0
 6891 1d78 002B     		cmp	r3, #0
 6892 1d7a 3FF479AF 		beq	.L235
1665:.\console.c   **** 				}
1666:.\console.c   **** 				goto exitpars;	
 6893              		.loc 1 1666 0 is_stmt 1
 6894 1d7e 05F0A9BB 		b	.L131
 6895              	.L233:
1667:.\console.c   **** 			}
1668:.\console.c   **** 			// END SHOW ANALOG INPUTS
1669:.\console.c   **** 
1670:.\console.c   **** 			
1671:.\console.c   **** 			// SHOW VCC
1672:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "vcc") == 0)	
 6896              		.loc 1 1672 0
 6897 1d82 7548     		ldr	r0, .L731+8
 6898 1d84 40F20001 		movw	r1, #:lower16:.LC348
 6899 1d88 C0F20001 		movt	r1, #:upper16:.LC348
 6900 1d8c FFF7FEFF 		bl	strcmp
 6901 1d90 0346     		mov	r3, r0
 6902 1d92 002B     		cmp	r3, #0
 6903 1d94 35D1     		bne	.L236
1673:.\console.c   **** 			{
1674:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6904              		.loc 1 1674 0
 6905 1d96 2DE0     		b	.L237
 6906              	.L238:
1675:.\console.c   **** 				{
1676:.\console.c   **** 					// ADC_Count = VCC[V] * 5k/55k * (1+100/1000) * ADC_MAX_UNSGN/5  (14 bit resolution)
1677:.\console.c   **** 					// VCC[V] = ADC_Count * 50/ADC_MAX_UNSGN
1678:.\console.c   **** 					printf("VCC = %3.1f [V]\r\n", (float)AdcValue[SENSE_VCC]*5.0/ADC_MAX_COUNTS);
 6907              		.loc 1 1678 0
 6908 1d98 40F20003 		movw	r3, #:lower16:AdcValue
 6909 1d9c C0F20003 		movt	r3, #:upper16:AdcValue
 6910 1da0 9B88     		ldrh	r3, [r3, #4]
 6911 1da2 1BB2     		sxth	r3, r3
 6912 1da4 1846     		mov	r0, r3
 6913 1da6 FFF7FEFF 		bl	__aeabi_i2f
 6914 1daa 0346     		mov	r3, r0
 6915 1dac 1846     		mov	r0, r3
 6916 1dae FFF7FEFF 		bl	__aeabi_f2d
 6917 1db2 0246     		mov	r2, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 201


 6918 1db4 0B46     		mov	r3, r1
 6919 1db6 1046     		mov	r0, r2
 6920 1db8 1946     		mov	r1, r3
 6921 1dba 4FF00002 		mov	r2, #0
 6922 1dbe 4FF00003 		mov	r3, #0
 6923 1dc2 C4F21403 		movt	r3, 16404
 6924 1dc6 FFF7FEFF 		bl	__aeabi_dmul
 6925 1dca 0246     		mov	r2, r0
 6926 1dcc 0B46     		mov	r3, r1
 6927 1dce 1046     		mov	r0, r2
 6928 1dd0 1946     		mov	r1, r3
 6929 1dd2 5FA3     		adr	r3, .L731
 6930 1dd4 D3E90023 		ldrd	r2, [r3]
 6931 1dd8 FFF7FEFF 		bl	__aeabi_ddiv
 6932 1ddc 0246     		mov	r2, r0
 6933 1dde 0B46     		mov	r3, r1
 6934 1de0 40F20000 		movw	r0, #:lower16:.LC349
 6935 1de4 C0F20000 		movt	r0, #:upper16:.LC349
 6936 1de8 FFF7FEFF 		bl	printf
1679:.\console.c   **** 					CyDelay(100);
 6937              		.loc 1 1679 0
 6938 1dec 4FF06400 		mov	r0, #100
 6939 1df0 FFF7FEFF 		bl	CyDelay
 6940              	.L237:
1674:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6941              		.loc 1 1674 0 discriminator 1
 6942 1df4 FFF7FEFF 		bl	AnyButtonPressed
 6943 1df8 0346     		mov	r3, r0
 6944 1dfa 002B     		cmp	r3, #0
 6945 1dfc CCD0     		beq	.L238
1680:.\console.c   **** 				}
1681:.\console.c   **** 				goto exitpars;	
 6946              		.loc 1 1681 0
 6947 1dfe 05F069BB 		b	.L131
 6948              	.L236:
1682:.\console.c   **** 			}
1683:.\console.c   **** 			// END SHOW VCC
1684:.\console.c   **** 			
1685:.\console.c   **** 			// SHOW CURRENT
1686:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "current") == 0) ||
 6949              		.loc 1 1686 0
 6950 1e02 5548     		ldr	r0, .L731+8
 6951 1e04 40F20001 		movw	r1, #:lower16:.LC350
 6952 1e08 C0F20001 		movt	r1, #:upper16:.LC350
 6953 1e0c FFF7FEFF 		bl	strcmp
 6954 1e10 0346     		mov	r3, r0
 6955 1e12 002B     		cmp	r3, #0
 6956 1e14 65D0     		beq	.L700
1687:.\console.c   **** 				(strcmp(actual_cmd.parameter, "i") == 0))
 6957              		.loc 1 1687 0 discriminator 1
 6958 1e16 5048     		ldr	r0, .L731+8
 6959 1e18 40F20001 		movw	r1, #:lower16:.LC351
 6960 1e1c C0F20001 		movt	r1, #:upper16:.LC351
 6961 1e20 FFF7FEFF 		bl	strcmp
 6962 1e24 0346     		mov	r3, r0
1686:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "current") == 0) ||
 6963              		.loc 1 1686 0 discriminator 1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 202


 6964 1e26 002B     		cmp	r3, #0
 6965 1e28 63D1     		bne	.L240
1688:.\console.c   **** 			{
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6966              		.loc 1 1689 0
 6967 1e2a 5AE0     		b	.L700
 6968              	.L246:
1690:.\console.c   **** 				{					
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
1692:.\console.c   **** 							(float)pan_axis.mc.current,
 6969              		.loc 1 1692 0
 6970 1e2c 40F20003 		movw	r3, #:lower16:pan_axis
 6971 1e30 C0F20003 		movt	r3, #:upper16:pan_axis
 6972 1e34 9B6F     		ldr	r3, [r3, #120]	@ float
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
 6973              		.loc 1 1691 0
 6974 1e36 1846     		mov	r0, r3
 6975 1e38 FFF7FEFF 		bl	__aeabi_f2d
 6976 1e3c 0446     		mov	r4, r0
 6977 1e3e 0D46     		mov	r5, r1
1693:.\console.c   **** 							(float)tilt_axis.mc.current);
 6978              		.loc 1 1693 0
 6979 1e40 40F20003 		movw	r3, #:lower16:tilt_axis
 6980 1e44 C0F20003 		movt	r3, #:upper16:tilt_axis
 6981 1e48 9B6F     		ldr	r3, [r3, #120]	@ float
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
 6982              		.loc 1 1691 0
 6983 1e4a 1846     		mov	r0, r3
 6984 1e4c FFF7FEFF 		bl	__aeabi_f2d
 6985 1e50 0246     		mov	r2, r0
 6986 1e52 0B46     		mov	r3, r1
 6987 1e54 CDE90023 		strd	r2, [sp]
 6988 1e58 40F20000 		movw	r0, #:lower16:.LC352
 6989 1e5c C0F20000 		movt	r0, #:upper16:.LC352
 6990 1e60 2246     		mov	r2, r4
 6991 1e62 2B46     		mov	r3, r5
 6992 1e64 FFF7FEFF 		bl	printf
1694:.\console.c   **** 					
1695:.\console.c   **** 					printf("     Drive Status=%2u ", (int16)Status_Reg_MOTORS_Read());
 6993              		.loc 1 1695 0
 6994 1e68 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 6995 1e6c 0346     		mov	r3, r0
 6996 1e6e 40F20000 		movw	r0, #:lower16:.LC353
 6997 1e72 C0F20000 		movt	r0, #:upper16:.LC353
 6998 1e76 1946     		mov	r1, r3
 6999 1e78 FFF7FEFF 		bl	printf
1696:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_PAN_MOT_FL) == 0)
 7000              		.loc 1 1696 0
 7001 1e7c FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 7002 1e80 0346     		mov	r3, r0
 7003 1e82 03F00103 		and	r3, r3, #1
 7004 1e86 002B     		cmp	r3, #0
 7005 1e88 06D1     		bne	.L242
1697:.\console.c   **** 					{
1698:.\console.c   **** 						printf("(i(t)_PAN PEAK!) ");	
 7006              		.loc 1 1698 0
 7007 1e8a 40F20000 		movw	r0, #:lower16:.LC354
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 203


 7008 1e8e C0F20000 		movt	r0, #:upper16:.LC354
 7009 1e92 FFF7FEFF 		bl	printf
 7010 1e96 05E0     		b	.L243
 7011              	.L242:
1699:.\console.c   **** 					}
1700:.\console.c   **** 					else
1701:.\console.c   **** 					{
1702:.\console.c   **** 						printf("(i(t)_PAN OK!)  ");						
 7012              		.loc 1 1702 0
 7013 1e98 40F20000 		movw	r0, #:lower16:.LC355
 7014 1e9c C0F20000 		movt	r0, #:upper16:.LC355
 7015 1ea0 FFF7FEFF 		bl	printf
 7016              	.L243:
1703:.\console.c   **** 					}
1704:.\console.c   **** 					
1705:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_TILT_MOT_FL) == 0)
 7017              		.loc 1 1705 0
 7018 1ea4 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 7019 1ea8 0346     		mov	r3, r0
 7020 1eaa 03F00203 		and	r3, r3, #2
 7021 1eae 002B     		cmp	r3, #0
 7022 1eb0 06D1     		bne	.L244
1706:.\console.c   **** 					{
1707:.\console.c   **** 						printf("(i(t)_TILT PEAK!)");	
 7023              		.loc 1 1707 0
 7024 1eb2 40F20000 		movw	r0, #:lower16:.LC356
 7025 1eb6 C0F20000 		movt	r0, #:upper16:.LC356
 7026 1eba FFF7FEFF 		bl	printf
 7027 1ebe 05E0     		b	.L245
 7028              	.L244:
1708:.\console.c   **** 					}
1709:.\console.c   **** 					else
1710:.\console.c   **** 					{
1711:.\console.c   **** 						printf("(i(t)_TILT OK!)");						
 7029              		.loc 1 1711 0
 7030 1ec0 40F20000 		movw	r0, #:lower16:.LC357
 7031 1ec4 C0F20000 		movt	r0, #:upper16:.LC357
 7032 1ec8 FFF7FEFF 		bl	printf
 7033              	.L245:
1712:.\console.c   **** 					}	
1713:.\console.c   **** 					CyDelay(100);
 7034              		.loc 1 1713 0
 7035 1ecc 4FF06400 		mov	r0, #100
 7036 1ed0 FFF7FEFF 		bl	CyDelay
1714:.\console.c   **** 					printf("\r\n");
 7037              		.loc 1 1714 0
 7038 1ed4 40F20000 		movw	r0, #:lower16:.LC42
 7039 1ed8 C0F20000 		movt	r0, #:upper16:.LC42
 7040 1edc FFF7FEFF 		bl	puts
 7041 1ee0 00E0     		b	.L241
 7042              	.L700:
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7043              		.loc 1 1689 0
 7044 1ee2 00BF     		nop
 7045              	.L241:
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7046              		.loc 1 1689 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 204


 7047 1ee4 FFF7FEFF 		bl	AnyButtonPressed
 7048 1ee8 0346     		mov	r3, r0
 7049 1eea 002B     		cmp	r3, #0
 7050 1eec 9ED0     		beq	.L246
1715:.\console.c   **** 				}
1716:.\console.c   **** 				goto exitpars;	
 7051              		.loc 1 1716 0 is_stmt 1
 7052 1eee 05F0F1BA 		b	.L131
 7053              	.L240:
1717:.\console.c   **** 			}
1718:.\console.c   **** 			// END SHOW CURRENT
1719:.\console.c   **** 
1720:.\console.c   **** 			
1721:.\console.c   **** 			// SHOW PAN MOTOR TORQUE STATISTICS
1722:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmtorque") == 0) ||
 7054              		.loc 1 1722 0
 7055 1ef2 1948     		ldr	r0, .L731+8
 7056 1ef4 40F20001 		movw	r1, #:lower16:.LC358
 7057 1ef8 C0F20001 		movt	r1, #:upper16:.LC358
 7058 1efc FFF7FEFF 		bl	strcmp
 7059 1f00 0346     		mov	r3, r0
 7060 1f02 002B     		cmp	r3, #0
 7061 1f04 0AD0     		beq	.L247
1723:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pmt") == 0))
 7062              		.loc 1 1723 0 discriminator 1
 7063 1f06 1448     		ldr	r0, .L731+8
 7064 1f08 40F20001 		movw	r1, #:lower16:.LC359
 7065 1f0c C0F20001 		movt	r1, #:upper16:.LC359
 7066 1f10 FFF7FEFF 		bl	strcmp
 7067 1f14 0346     		mov	r3, r0
1722:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmtorque") == 0) ||
 7068              		.loc 1 1722 0 discriminator 1
 7069 1f16 002B     		cmp	r3, #0
 7070 1f18 40F0CB80 		bne	.L248
 7071              	.L247:
1724:.\console.c   **** 			{
1725:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7072              		.loc 1 1725 0
 7073 1f1c FFF7FEFF 		bl	isr_TORQUESTAT_Start
1726:.\console.c   **** 				
1727:.\console.c   **** 				current_statistics_start(&pan_current_stat);		/* start Pan current  statistics			*/
 7074              		.loc 1 1727 0
 7075 1f20 40F20000 		movw	r0, #:lower16:pan_current_stat
 7076 1f24 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7077 1f28 FFF7FEFF 		bl	current_statistics_start
1728:.\console.c   **** 				Battery_Energy_Integral_Reset(&pan_torque_stat);	/* Battery Energy Integral Reset 			*/
 7078              		.loc 1 1728 0
 7079 1f2c 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7080 1f30 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7081 1f34 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1729:.\console.c   **** 				
1730:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7082              		.loc 1 1730 0
 7083 1f38 40F20000 		movw	r0, #:lower16:.LC360
 7084 1f3c C0F20000 		movt	r0, #:upper16:.LC360
 7085 1f40 FFF7FEFF 		bl	puts
1731:.\console.c   **** 				CyDelay(500);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 205


 7086              		.loc 1 1731 0
 7087 1f44 4FF4FA70 		mov	r0, #500
 7088 1f48 FFF7FEFF 		bl	CyDelay
1732:.\console.c   **** 				
1733:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7089              		.loc 1 1733 0
 7090 1f4c 74E0     		b	.L249
 7091              	.L732:
 7092 1f4e 00BF     		.align	3
 7093              	.L731:
 7094 1f50 00000000 		.word	0
 7095 1f54 00FEAF40 		.word	1085275648
 7096 1f58 0F000000 		.word	actual_cmd+15
 7097              	.L250:
1734:.\console.c   **** 				{
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
1736:.\console.c   **** 							(float)i_t(&pan_torque_stat),
 7098              		.loc 1 1736 0
 7099 1f5c 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7100 1f60 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7101 1f64 FFF7FEFF 		bl	i_t
 7102 1f68 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7103              		.loc 1 1735 0
 7104 1f6a 1846     		mov	r0, r3
 7105 1f6c FFF7FEFF 		bl	__aeabi_f2d
 7106 1f70 0446     		mov	r4, r0
 7107 1f72 0D46     		mov	r5, r1
1737:.\console.c   **** 							(float)i_noload(),
 7108              		.loc 1 1737 0
 7109 1f74 FFF7FEFF 		bl	i_noload
 7110 1f78 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7111              		.loc 1 1735 0
 7112 1f7a 1846     		mov	r0, r3
 7113 1f7c FFF7FEFF 		bl	__aeabi_f2d
 7114 1f80 C7E90401 		strd	r0, [r7, #16]
1738:.\console.c   **** 							(float)TMOT_t(&pan_torque_stat),							
 7115              		.loc 1 1738 0
 7116 1f84 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7117 1f88 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7118 1f8c FFF7FEFF 		bl	TMOT_t
 7119 1f90 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7120              		.loc 1 1735 0
 7121 1f92 1846     		mov	r0, r3
 7122 1f94 FFF7FEFF 		bl	__aeabi_f2d
 7123 1f98 C7E90201 		strd	r0, [r7, #8]
1739:.\console.c   **** 							(float)i_max(&pan_current_stat),
 7124              		.loc 1 1739 0
 7125 1f9c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7126 1fa0 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7127 1fa4 FFF7FEFF 		bl	i_max
 7128 1fa8 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7129              		.loc 1 1735 0
 7130 1faa 1846     		mov	r0, r3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 206


 7131 1fac FFF7FEFF 		bl	__aeabi_f2d
 7132 1fb0 C7E90001 		strd	r0, [r7]
1740:.\console.c   **** 							(float)TMOT_max(&pan_current_stat),
 7133              		.loc 1 1740 0
 7134 1fb4 40F20000 		movw	r0, #:lower16:pan_current_stat
 7135 1fb8 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7136 1fbc FFF7FEFF 		bl	TMOT_max
 7137 1fc0 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7138              		.loc 1 1735 0
 7139 1fc2 1846     		mov	r0, r3
 7140 1fc4 FFF7FEFF 		bl	__aeabi_f2d
 7141 1fc8 8246     		mov	sl, r0
 7142 1fca 8B46     		mov	fp, r1
1741:.\console.c   **** 							(float)i_mean(&pan_current_stat),
 7143              		.loc 1 1741 0
 7144 1fcc 40F20000 		movw	r0, #:lower16:pan_current_stat
 7145 1fd0 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7146 1fd4 FFF7FEFF 		bl	i_mean
 7147 1fd8 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7148              		.loc 1 1735 0
 7149 1fda 1846     		mov	r0, r3
 7150 1fdc FFF7FEFF 		bl	__aeabi_f2d
 7151 1fe0 8046     		mov	r8, r0
 7152 1fe2 8946     		mov	r9, r1
1742:.\console.c   **** 							(float)TMOT_mean(&pan_current_stat));
 7153              		.loc 1 1742 0
 7154 1fe4 40F20000 		movw	r0, #:lower16:pan_current_stat
 7155 1fe8 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7156 1fec FFF7FEFF 		bl	TMOT_mean
 7157 1ff0 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7158              		.loc 1 1735 0
 7159 1ff2 1846     		mov	r0, r3
 7160 1ff4 FFF7FEFF 		bl	__aeabi_f2d
 7161 1ff8 0246     		mov	r2, r0
 7162 1ffa 0B46     		mov	r3, r1
 7163 1ffc D7E90401 		ldrd	r0, [r7, #16]
 7164 2000 CDE90001 		strd	r0, [sp]
 7165 2004 D7E90201 		ldrd	r0, [r7, #8]
 7166 2008 CDE90201 		strd	r0, [sp, #8]
 7167 200c D7E90001 		ldrd	r0, [r7]
 7168 2010 CDE90401 		strd	r0, [sp, #16]
 7169 2014 CDE906AB 		strd	sl, [sp, #24]
 7170 2018 CDE90889 		strd	r8, [sp, #32]
 7171 201c CDE90A23 		strd	r2, [sp, #40]
 7172 2020 40F20000 		movw	r0, #:lower16:.LC361
 7173 2024 C0F20000 		movt	r0, #:upper16:.LC361
 7174 2028 2246     		mov	r2, r4
 7175 202a 2B46     		mov	r3, r5
 7176 202c FFF7FEFF 		bl	printf
1743:.\console.c   **** 					
1744:.\console.c   **** 					CyDelay(30);
 7177              		.loc 1 1744 0
 7178 2030 4FF01E00 		mov	r0, #30
 7179 2034 FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 207


 7180              	.L249:
1733:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7181              		.loc 1 1733 0 discriminator 1
 7182 2038 FFF7FEFF 		bl	AnyButtonPressed
 7183 203c 0346     		mov	r3, r0
 7184 203e 002B     		cmp	r3, #0
 7185 2040 8CD0     		beq	.L250
1745:.\console.c   **** 				}
1746:.\console.c   **** 				current_statistics_stop(&pan_current_stat);		/* stop Pan current  statistics			*/
 7186              		.loc 1 1746 0
 7187 2042 40F20000 		movw	r0, #:lower16:pan_current_stat
 7188 2046 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7189 204a FFF7FEFF 		bl	current_statistics_stop
1747:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr			*/
 7190              		.loc 1 1747 0
 7191 204e FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1748:.\console.c   **** 				
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1750:.\console.c   **** 					(float)Battery_Energy(&pan_torque_stat, &pan_current_stat),
 7192              		.loc 1 1750 0
 7193 2052 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7194 2056 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7195 205a 40F20001 		movw	r1, #:lower16:pan_current_stat
 7196 205e C0F20001 		movt	r1, #:upper16:pan_current_stat
 7197 2062 FFF7FEFF 		bl	Battery_Energy
 7198 2066 0346     		mov	r3, r0
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7199              		.loc 1 1749 0
 7200 2068 1846     		mov	r0, r3
 7201 206a FFF7FEFF 		bl	__aeabi_f2d
 7202 206e 0446     		mov	r4, r0
 7203 2070 0D46     		mov	r5, r1
1751:.\console.c   **** 					(float)Battery_Energy_Meter(&pan_torque_stat, &pan_current_stat, 1000));
 7204              		.loc 1 1751 0
 7205 2072 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7206 2076 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7207 207a 40F20001 		movw	r1, #:lower16:pan_current_stat
 7208 207e C0F20001 		movt	r1, #:upper16:pan_current_stat
 7209 2082 4FF00002 		mov	r2, #0
 7210 2086 C4F27A42 		movt	r2, 17530
 7211 208a FFF7FEFF 		bl	Battery_Energy_Meter
 7212 208e 0346     		mov	r3, r0
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7213              		.loc 1 1749 0
 7214 2090 1846     		mov	r0, r3
 7215 2092 FFF7FEFF 		bl	__aeabi_f2d
 7216 2096 0246     		mov	r2, r0
 7217 2098 0B46     		mov	r3, r1
 7218 209a CDE90023 		strd	r2, [sp]
 7219 209e 40F20000 		movw	r0, #:lower16:.LC362
 7220 20a2 C0F20000 		movt	r0, #:upper16:.LC362
 7221 20a6 2246     		mov	r2, r4
 7222 20a8 2B46     		mov	r3, r5
 7223 20aa FFF7FEFF 		bl	printf
1752:.\console.c   **** 				
1753:.\console.c   **** 				goto exitpars;	
 7224              		.loc 1 1753 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 208


 7225 20ae 05F011BA 		b	.L131
 7226              	.L248:
1754:.\console.c   **** 			}
1755:.\console.c   **** 			// END SHOW PAN MOTOR TORQUE STATISTICS
1756:.\console.c   **** 			
1757:.\console.c   **** 			
1758:.\console.c   **** 			// SHOW TILT MOTOR TORQUE STATISTICS
1759:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmtorque") == 0) ||
 7227              		.loc 1 1759 0
 7228 20b2 8348     		ldr	r0, .L733
 7229 20b4 40F20001 		movw	r1, #:lower16:.LC363
 7230 20b8 C0F20001 		movt	r1, #:upper16:.LC363
 7231 20bc FFF7FEFF 		bl	strcmp
 7232 20c0 0346     		mov	r3, r0
 7233 20c2 002B     		cmp	r3, #0
 7234 20c4 0AD0     		beq	.L251
1760:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tmt") == 0))
 7235              		.loc 1 1760 0 discriminator 1
 7236 20c6 7E48     		ldr	r0, .L733
 7237 20c8 40F20001 		movw	r1, #:lower16:.LC364
 7238 20cc C0F20001 		movt	r1, #:upper16:.LC364
 7239 20d0 FFF7FEFF 		bl	strcmp
 7240 20d4 0346     		mov	r3, r0
1759:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmtorque") == 0) ||
 7241              		.loc 1 1759 0 discriminator 1
 7242 20d6 002B     		cmp	r3, #0
 7243 20d8 40F0C480 		bne	.L252
 7244              	.L251:
1761:.\console.c   **** 			{
1762:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7245              		.loc 1 1762 0
 7246 20dc FFF7FEFF 		bl	isr_TORQUESTAT_Start
1763:.\console.c   **** 				
1764:.\console.c   **** 				current_statistics_start(&tilt_current_stat);		/* start Tilt current  statistics			*/
 7247              		.loc 1 1764 0
 7248 20e0 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7249 20e4 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7250 20e8 FFF7FEFF 		bl	current_statistics_start
1765:.\console.c   **** 				Battery_Energy_Integral_Reset(&tilt_torque_stat);	/* Battery Energy Integral Reset 			*/
 7251              		.loc 1 1765 0
 7252 20ec 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7253 20f0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7254 20f4 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1766:.\console.c   **** 				
1767:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7255              		.loc 1 1767 0
 7256 20f8 40F20000 		movw	r0, #:lower16:.LC365
 7257 20fc C0F20000 		movt	r0, #:upper16:.LC365
 7258 2100 FFF7FEFF 		bl	puts
1768:.\console.c   **** 				CyDelay(500);
 7259              		.loc 1 1768 0
 7260 2104 4FF4FA70 		mov	r0, #500
 7261 2108 FFF7FEFF 		bl	CyDelay
1769:.\console.c   **** 				
1770:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7262              		.loc 1 1770 0
 7263 210c 6DE0     		b	.L253
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 209


 7264              	.L254:
1771:.\console.c   **** 				{
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
1773:.\console.c   **** 							(float)i_t(&tilt_torque_stat),
 7265              		.loc 1 1773 0
 7266 210e 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7267 2112 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7268 2116 FFF7FEFF 		bl	i_t
 7269 211a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7270              		.loc 1 1772 0
 7271 211c 1846     		mov	r0, r3
 7272 211e FFF7FEFF 		bl	__aeabi_f2d
 7273 2122 0446     		mov	r4, r0
 7274 2124 0D46     		mov	r5, r1
1774:.\console.c   **** 							(float)i_noload(),							
 7275              		.loc 1 1774 0
 7276 2126 FFF7FEFF 		bl	i_noload
 7277 212a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7278              		.loc 1 1772 0
 7279 212c 1846     		mov	r0, r3
 7280 212e FFF7FEFF 		bl	__aeabi_f2d
 7281 2132 C7E90A01 		strd	r0, [r7, #40]
1775:.\console.c   **** 							(float)TMOT_t(&tilt_torque_stat),							
 7282              		.loc 1 1775 0
 7283 2136 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7284 213a C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7285 213e FFF7FEFF 		bl	TMOT_t
 7286 2142 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7287              		.loc 1 1772 0
 7288 2144 1846     		mov	r0, r3
 7289 2146 FFF7FEFF 		bl	__aeabi_f2d
 7290 214a C7E90801 		strd	r0, [r7, #32]
1776:.\console.c   **** 							(float)i_max(&tilt_current_stat),
 7291              		.loc 1 1776 0
 7292 214e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7293 2152 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7294 2156 FFF7FEFF 		bl	i_max
 7295 215a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7296              		.loc 1 1772 0
 7297 215c 1846     		mov	r0, r3
 7298 215e FFF7FEFF 		bl	__aeabi_f2d
 7299 2162 C7E90601 		strd	r0, [r7, #24]
1777:.\console.c   **** 							(float)TMOT_max(&tilt_current_stat),
 7300              		.loc 1 1777 0
 7301 2166 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7302 216a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7303 216e FFF7FEFF 		bl	TMOT_max
 7304 2172 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7305              		.loc 1 1772 0
 7306 2174 1846     		mov	r0, r3
 7307 2176 FFF7FEFF 		bl	__aeabi_f2d
 7308 217a 8246     		mov	sl, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 210


 7309 217c 8B46     		mov	fp, r1
1778:.\console.c   **** 							(float)i_mean(&tilt_current_stat),
 7310              		.loc 1 1778 0
 7311 217e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7312 2182 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7313 2186 FFF7FEFF 		bl	i_mean
 7314 218a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7315              		.loc 1 1772 0
 7316 218c 1846     		mov	r0, r3
 7317 218e FFF7FEFF 		bl	__aeabi_f2d
 7318 2192 8046     		mov	r8, r0
 7319 2194 8946     		mov	r9, r1
1779:.\console.c   **** 							(float)TMOT_mean(&tilt_current_stat));
 7320              		.loc 1 1779 0
 7321 2196 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7322 219a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7323 219e FFF7FEFF 		bl	TMOT_mean
 7324 21a2 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7325              		.loc 1 1772 0
 7326 21a4 1846     		mov	r0, r3
 7327 21a6 FFF7FEFF 		bl	__aeabi_f2d
 7328 21aa 0246     		mov	r2, r0
 7329 21ac 0B46     		mov	r3, r1
 7330 21ae D7E90A01 		ldrd	r0, [r7, #40]
 7331 21b2 CDE90001 		strd	r0, [sp]
 7332 21b6 D7E90801 		ldrd	r0, [r7, #32]
 7333 21ba CDE90201 		strd	r0, [sp, #8]
 7334 21be D7E90601 		ldrd	r0, [r7, #24]
 7335 21c2 CDE90401 		strd	r0, [sp, #16]
 7336 21c6 CDE906AB 		strd	sl, [sp, #24]
 7337 21ca CDE90889 		strd	r8, [sp, #32]
 7338 21ce CDE90A23 		strd	r2, [sp, #40]
 7339 21d2 40F20000 		movw	r0, #:lower16:.LC361
 7340 21d6 C0F20000 		movt	r0, #:upper16:.LC361
 7341 21da 2246     		mov	r2, r4
 7342 21dc 2B46     		mov	r3, r5
 7343 21de FFF7FEFF 		bl	printf
1780:.\console.c   **** 					
1781:.\console.c   **** 					CyDelay(30);
 7344              		.loc 1 1781 0
 7345 21e2 4FF01E00 		mov	r0, #30
 7346 21e6 FFF7FEFF 		bl	CyDelay
 7347              	.L253:
1770:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7348              		.loc 1 1770 0 discriminator 1
 7349 21ea FFF7FEFF 		bl	AnyButtonPressed
 7350 21ee 0346     		mov	r3, r0
 7351 21f0 002B     		cmp	r3, #0
 7352 21f2 8CD0     		beq	.L254
1782:.\console.c   **** 				}
1783:.\console.c   **** 				current_statistics_stop(&tilt_current_stat);	/* stop Tilt current  statistics			*/				
 7353              		.loc 1 1783 0
 7354 21f4 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7355 21f8 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7356 21fc FFF7FEFF 		bl	current_statistics_stop
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 211


1784:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr				*/
 7357              		.loc 1 1784 0
 7358 2200 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1785:.\console.c   **** 				
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1787:.\console.c   **** 					(float)Battery_Energy(&tilt_torque_stat, &tilt_current_stat),
 7359              		.loc 1 1787 0
 7360 2204 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7361 2208 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7362 220c 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7363 2210 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7364 2214 FFF7FEFF 		bl	Battery_Energy
 7365 2218 0346     		mov	r3, r0
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7366              		.loc 1 1786 0
 7367 221a 1846     		mov	r0, r3
 7368 221c FFF7FEFF 		bl	__aeabi_f2d
 7369 2220 0446     		mov	r4, r0
 7370 2222 0D46     		mov	r5, r1
1788:.\console.c   **** 					(float)Battery_Energy_Meter(&tilt_torque_stat, &tilt_current_stat, 1000));
 7371              		.loc 1 1788 0
 7372 2224 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7373 2228 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7374 222c 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7375 2230 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7376 2234 4FF00002 		mov	r2, #0
 7377 2238 C4F27A42 		movt	r2, 17530
 7378 223c FFF7FEFF 		bl	Battery_Energy_Meter
 7379 2240 0346     		mov	r3, r0
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7380              		.loc 1 1786 0
 7381 2242 1846     		mov	r0, r3
 7382 2244 FFF7FEFF 		bl	__aeabi_f2d
 7383 2248 0246     		mov	r2, r0
 7384 224a 0B46     		mov	r3, r1
 7385 224c CDE90023 		strd	r2, [sp]
 7386 2250 40F20000 		movw	r0, #:lower16:.LC362
 7387 2254 C0F20000 		movt	r0, #:upper16:.LC362
 7388 2258 2246     		mov	r2, r4
 7389 225a 2B46     		mov	r3, r5
 7390 225c FFF7FEFF 		bl	printf
1789:.\console.c   **** 				
1790:.\console.c   **** 				goto exitpars;	
 7391              		.loc 1 1790 0
 7392 2260 05F038B9 		b	.L131
 7393              	.L252:
1791:.\console.c   **** 			}
1792:.\console.c   **** 			// END SHOW TILT MOTOR TORQUE STATISTICS
1793:.\console.c   **** 			
1794:.\console.c   **** 			
1795:.\console.c   **** 			// SHOW PAN OUTPUT TORQUE STATISTICS
1796:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "potorque") == 0) ||
 7394              		.loc 1 1796 0
 7395 2264 1648     		ldr	r0, .L733
 7396 2266 40F20001 		movw	r1, #:lower16:.LC366
 7397 226a C0F20001 		movt	r1, #:upper16:.LC366
 7398 226e FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 212


 7399 2272 0346     		mov	r3, r0
 7400 2274 002B     		cmp	r3, #0
 7401 2276 0AD0     		beq	.L255
1797:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pot") == 0))
 7402              		.loc 1 1797 0 discriminator 1
 7403 2278 1148     		ldr	r0, .L733
 7404 227a 40F20001 		movw	r1, #:lower16:.LC367
 7405 227e C0F20001 		movt	r1, #:upper16:.LC367
 7406 2282 FFF7FEFF 		bl	strcmp
 7407 2286 0346     		mov	r3, r0
1796:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "potorque") == 0) ||
 7408              		.loc 1 1796 0 discriminator 1
 7409 2288 002B     		cmp	r3, #0
 7410 228a 40F0D280 		bne	.L256
 7411              	.L255:
1798:.\console.c   **** 			{
1799:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7412              		.loc 1 1799 0
 7413 228e FFF7FEFF 		bl	isr_TORQUESTAT_Start
1800:.\console.c   **** 				
1801:.\console.c   **** 				current_statistics_start(&pan_current_stat);		/* start Pan current  statistics			*/
 7414              		.loc 1 1801 0
 7415 2292 40F20000 		movw	r0, #:lower16:pan_current_stat
 7416 2296 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7417 229a FFF7FEFF 		bl	current_statistics_start
1802:.\console.c   **** 				Battery_Energy_Integral_Reset(&pan_torque_stat);	/* Battery Energy Integral Reset 			*/
 7418              		.loc 1 1802 0
 7419 229e 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7420 22a2 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7421 22a6 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1803:.\console.c   **** 				
1804:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7422              		.loc 1 1804 0
 7423 22aa 40F20000 		movw	r0, #:lower16:.LC360
 7424 22ae C0F20000 		movt	r0, #:upper16:.LC360
 7425 22b2 FFF7FEFF 		bl	puts
1805:.\console.c   **** 				CyDelay(500);
 7426              		.loc 1 1805 0
 7427 22b6 4FF4FA70 		mov	r0, #500
 7428 22ba FFF7FEFF 		bl	CyDelay
1806:.\console.c   **** 				
1807:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7429              		.loc 1 1807 0
 7430 22be 7BE0     		b	.L257
 7431              	.L734:
 7432              		.align	2
 7433              	.L733:
 7434 22c0 0F000000 		.word	actual_cmd+15
 7435              	.L258:
1808:.\console.c   **** 				{
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
1810:.\console.c   **** 							(float)i_t(&pan_torque_stat),
 7436              		.loc 1 1810 0
 7437 22c4 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7438 22c8 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7439 22cc FFF7FEFF 		bl	i_t
 7440 22d0 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 213


1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7441              		.loc 1 1809 0
 7442 22d2 1846     		mov	r0, r3
 7443 22d4 FFF7FEFF 		bl	__aeabi_f2d
 7444 22d8 0446     		mov	r4, r0
 7445 22da 0D46     		mov	r5, r1
1811:.\console.c   **** 							(float)i_noload(),
 7446              		.loc 1 1811 0
 7447 22dc FFF7FEFF 		bl	i_noload
 7448 22e0 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7449              		.loc 1 1809 0
 7450 22e2 1846     		mov	r0, r3
 7451 22e4 FFF7FEFF 		bl	__aeabi_f2d
 7452 22e8 C7E91001 		strd	r0, [r7, #64]
1812:.\console.c   **** 							(float)TOUT_t(&pan_torque_stat, N_pan),							
 7453              		.loc 1 1812 0
 7454 22ec 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7455 22f0 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7456 22f4 4FF00001 		mov	r1, #0
 7457 22f8 C4F27821 		movt	r1, 17016
 7458 22fc FFF7FEFF 		bl	TOUT_t
 7459 2300 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7460              		.loc 1 1809 0
 7461 2302 1846     		mov	r0, r3
 7462 2304 FFF7FEFF 		bl	__aeabi_f2d
 7463 2308 C7E90E01 		strd	r0, [r7, #56]
1813:.\console.c   **** 							(float)i_max(&pan_current_stat),
 7464              		.loc 1 1813 0
 7465 230c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7466 2310 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7467 2314 FFF7FEFF 		bl	i_max
 7468 2318 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7469              		.loc 1 1809 0
 7470 231a 1846     		mov	r0, r3
 7471 231c FFF7FEFF 		bl	__aeabi_f2d
 7472 2320 C7E90C01 		strd	r0, [r7, #48]
1814:.\console.c   **** 							(float)TOUT_max(&pan_current_stat, N_pan),
 7473              		.loc 1 1814 0
 7474 2324 40F20000 		movw	r0, #:lower16:pan_current_stat
 7475 2328 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7476 232c 4FF00001 		mov	r1, #0
 7477 2330 C4F27821 		movt	r1, 17016
 7478 2334 FFF7FEFF 		bl	TOUT_max
 7479 2338 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7480              		.loc 1 1809 0
 7481 233a 1846     		mov	r0, r3
 7482 233c FFF7FEFF 		bl	__aeabi_f2d
 7483 2340 8246     		mov	sl, r0
 7484 2342 8B46     		mov	fp, r1
1815:.\console.c   **** 							(float)i_mean(&pan_current_stat),
 7485              		.loc 1 1815 0
 7486 2344 40F20000 		movw	r0, #:lower16:pan_current_stat
 7487 2348 C0F20000 		movt	r0, #:upper16:pan_current_stat
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 214


 7488 234c FFF7FEFF 		bl	i_mean
 7489 2350 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7490              		.loc 1 1809 0
 7491 2352 1846     		mov	r0, r3
 7492 2354 FFF7FEFF 		bl	__aeabi_f2d
 7493 2358 8046     		mov	r8, r0
 7494 235a 8946     		mov	r9, r1
1816:.\console.c   **** 							(float)TOUT_mean(&pan_current_stat, N_pan));
 7495              		.loc 1 1816 0
 7496 235c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7497 2360 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7498 2364 4FF00001 		mov	r1, #0
 7499 2368 C4F27821 		movt	r1, 17016
 7500 236c FFF7FEFF 		bl	TOUT_mean
 7501 2370 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7502              		.loc 1 1809 0
 7503 2372 1846     		mov	r0, r3
 7504 2374 FFF7FEFF 		bl	__aeabi_f2d
 7505 2378 0246     		mov	r2, r0
 7506 237a 0B46     		mov	r3, r1
 7507 237c D7E91001 		ldrd	r0, [r7, #64]
 7508 2380 CDE90001 		strd	r0, [sp]
 7509 2384 D7E90E01 		ldrd	r0, [r7, #56]
 7510 2388 CDE90201 		strd	r0, [sp, #8]
 7511 238c D7E90C01 		ldrd	r0, [r7, #48]
 7512 2390 CDE90401 		strd	r0, [sp, #16]
 7513 2394 CDE906AB 		strd	sl, [sp, #24]
 7514 2398 CDE90889 		strd	r8, [sp, #32]
 7515 239c CDE90A23 		strd	r2, [sp, #40]
 7516 23a0 40F20000 		movw	r0, #:lower16:.LC368
 7517 23a4 C0F20000 		movt	r0, #:upper16:.LC368
 7518 23a8 2246     		mov	r2, r4
 7519 23aa 2B46     		mov	r3, r5
 7520 23ac FFF7FEFF 		bl	printf
1817:.\console.c   **** 					
1818:.\console.c   **** 					CyDelay(30);
 7521              		.loc 1 1818 0
 7522 23b0 4FF01E00 		mov	r0, #30
 7523 23b4 FFF7FEFF 		bl	CyDelay
 7524              	.L257:
1807:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7525              		.loc 1 1807 0 discriminator 1
 7526 23b8 FFF7FEFF 		bl	AnyButtonPressed
 7527 23bc 0346     		mov	r3, r0
 7528 23be 002B     		cmp	r3, #0
 7529 23c0 80D0     		beq	.L258
1819:.\console.c   **** 				}
1820:.\console.c   **** 				current_statistics_stop(&pan_current_stat);			/* stop Pan current  statistics			*/				
 7530              		.loc 1 1820 0
 7531 23c2 40F20000 		movw	r0, #:lower16:pan_current_stat
 7532 23c6 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7533 23ca FFF7FEFF 		bl	current_statistics_stop
1821:.\console.c   **** 				isr_TORQUESTAT_Stop();								/* stop torque statistics isr			*/
 7534              		.loc 1 1821 0
 7535 23ce FFF7FEFF 		bl	isr_TORQUESTAT_Stop
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 215


1822:.\console.c   **** 				
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1824:.\console.c   **** 					(float)Battery_Energy(&pan_torque_stat, &pan_current_stat),
 7536              		.loc 1 1824 0
 7537 23d2 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7538 23d6 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7539 23da 40F20001 		movw	r1, #:lower16:pan_current_stat
 7540 23de C0F20001 		movt	r1, #:upper16:pan_current_stat
 7541 23e2 FFF7FEFF 		bl	Battery_Energy
 7542 23e6 0346     		mov	r3, r0
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7543              		.loc 1 1823 0
 7544 23e8 1846     		mov	r0, r3
 7545 23ea FFF7FEFF 		bl	__aeabi_f2d
 7546 23ee 0446     		mov	r4, r0
 7547 23f0 0D46     		mov	r5, r1
1825:.\console.c   **** 					(float)Battery_Energy_Meter(&pan_torque_stat, &pan_current_stat, 1000));
 7548              		.loc 1 1825 0
 7549 23f2 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7550 23f6 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7551 23fa 40F20001 		movw	r1, #:lower16:pan_current_stat
 7552 23fe C0F20001 		movt	r1, #:upper16:pan_current_stat
 7553 2402 4FF00002 		mov	r2, #0
 7554 2406 C4F27A42 		movt	r2, 17530
 7555 240a FFF7FEFF 		bl	Battery_Energy_Meter
 7556 240e 0346     		mov	r3, r0
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7557              		.loc 1 1823 0
 7558 2410 1846     		mov	r0, r3
 7559 2412 FFF7FEFF 		bl	__aeabi_f2d
 7560 2416 0246     		mov	r2, r0
 7561 2418 0B46     		mov	r3, r1
 7562 241a CDE90023 		strd	r2, [sp]
 7563 241e 40F20000 		movw	r0, #:lower16:.LC362
 7564 2422 C0F20000 		movt	r0, #:upper16:.LC362
 7565 2426 2246     		mov	r2, r4
 7566 2428 2B46     		mov	r3, r5
 7567 242a FFF7FEFF 		bl	printf
1826:.\console.c   **** 				
1827:.\console.c   **** 				goto exitpars;	
 7568              		.loc 1 1827 0
 7569 242e 05F051B8 		b	.L131
 7570              	.L256:
1828:.\console.c   **** 			}
1829:.\console.c   **** 			// END SHOW PAN OUTPUT TORQUE STATISTICS
1830:.\console.c   **** 			
1831:.\console.c   **** 			
1832:.\console.c   **** 			// SHOW TILT OUTPUT TORQUE STATISTICS
1833:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "totorque") == 0) ||
 7571              		.loc 1 1833 0
 7572 2432 C848     		ldr	r0, .L735
 7573 2434 40F20001 		movw	r1, #:lower16:.LC369
 7574 2438 C0F20001 		movt	r1, #:upper16:.LC369
 7575 243c FFF7FEFF 		bl	strcmp
 7576 2440 0346     		mov	r3, r0
 7577 2442 002B     		cmp	r3, #0
 7578 2444 0AD0     		beq	.L259
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 216


1834:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tot") == 0))
 7579              		.loc 1 1834 0 discriminator 1
 7580 2446 C348     		ldr	r0, .L735
 7581 2448 40F20001 		movw	r1, #:lower16:.LC370
 7582 244c C0F20001 		movt	r1, #:upper16:.LC370
 7583 2450 FFF7FEFF 		bl	strcmp
 7584 2454 0346     		mov	r3, r0
1833:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "totorque") == 0) ||
 7585              		.loc 1 1833 0 discriminator 1
 7586 2456 002B     		cmp	r3, #0
 7587 2458 40F0D080 		bne	.L260
 7588              	.L259:
1835:.\console.c   **** 			{
1836:.\console.c   **** 				isr_TORQUESTAT_Start();							/* start torque statistics isr	 			*/
 7589              		.loc 1 1836 0
 7590 245c FFF7FEFF 		bl	isr_TORQUESTAT_Start
1837:.\console.c   **** 				
1838:.\console.c   **** 				current_statistics_start(&tilt_current_stat);	/* start Tilt current  statistics			*/
 7591              		.loc 1 1838 0
 7592 2460 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7593 2464 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7594 2468 FFF7FEFF 		bl	current_statistics_start
1839:.\console.c   **** 				Battery_Energy_Integral_Reset(&tilt_torque_stat);	/* Battery Energy Integral Reset 			*/
 7595              		.loc 1 1839 0
 7596 246c 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7597 2470 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7598 2474 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1840:.\console.c   **** 				
1841:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7599              		.loc 1 1841 0
 7600 2478 40F20000 		movw	r0, #:lower16:.LC365
 7601 247c C0F20000 		movt	r0, #:upper16:.LC365
 7602 2480 FFF7FEFF 		bl	puts
1842:.\console.c   **** 				CyDelay(500);
 7603              		.loc 1 1842 0
 7604 2484 4FF4FA70 		mov	r0, #500
 7605 2488 FFF7FEFF 		bl	CyDelay
1843:.\console.c   **** 				
1844:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7606              		.loc 1 1844 0
 7607 248c 79E0     		b	.L261
 7608              	.L262:
1845:.\console.c   **** 				{
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
1847:.\console.c   **** 							(float)i_t(&tilt_torque_stat),
 7609              		.loc 1 1847 0
 7610 248e 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7611 2492 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7612 2496 FFF7FEFF 		bl	i_t
 7613 249a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7614              		.loc 1 1846 0
 7615 249c 1846     		mov	r0, r3
 7616 249e FFF7FEFF 		bl	__aeabi_f2d
 7617 24a2 0446     		mov	r4, r0
 7618 24a4 0D46     		mov	r5, r1
1848:.\console.c   **** 							(float)i_noload(),							
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 217


 7619              		.loc 1 1848 0
 7620 24a6 FFF7FEFF 		bl	i_noload
 7621 24aa 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7622              		.loc 1 1846 0
 7623 24ac 1846     		mov	r0, r3
 7624 24ae FFF7FEFF 		bl	__aeabi_f2d
 7625 24b2 C7E91601 		strd	r0, [r7, #88]
1849:.\console.c   **** 							(float)TOUT_t(&tilt_torque_stat, N_tilt),							
 7626              		.loc 1 1849 0
 7627 24b6 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7628 24ba C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7629 24be 4FF00001 		mov	r1, #0
 7630 24c2 C4F22C31 		movt	r1, 17196
 7631 24c6 FFF7FEFF 		bl	TOUT_t
 7632 24ca 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7633              		.loc 1 1846 0
 7634 24cc 1846     		mov	r0, r3
 7635 24ce FFF7FEFF 		bl	__aeabi_f2d
 7636 24d2 C7E91401 		strd	r0, [r7, #80]
1850:.\console.c   **** 							(float)i_max(&tilt_current_stat),
 7637              		.loc 1 1850 0
 7638 24d6 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7639 24da C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7640 24de FFF7FEFF 		bl	i_max
 7641 24e2 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7642              		.loc 1 1846 0
 7643 24e4 1846     		mov	r0, r3
 7644 24e6 FFF7FEFF 		bl	__aeabi_f2d
 7645 24ea C7E91201 		strd	r0, [r7, #72]
1851:.\console.c   **** 							(float)TOUT_max(&tilt_current_stat, N_tilt),
 7646              		.loc 1 1851 0
 7647 24ee 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7648 24f2 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7649 24f6 4FF00001 		mov	r1, #0
 7650 24fa C4F22C31 		movt	r1, 17196
 7651 24fe FFF7FEFF 		bl	TOUT_max
 7652 2502 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7653              		.loc 1 1846 0
 7654 2504 1846     		mov	r0, r3
 7655 2506 FFF7FEFF 		bl	__aeabi_f2d
 7656 250a 8246     		mov	sl, r0
 7657 250c 8B46     		mov	fp, r1
1852:.\console.c   **** 							(float)i_mean(&tilt_current_stat),
 7658              		.loc 1 1852 0
 7659 250e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7660 2512 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7661 2516 FFF7FEFF 		bl	i_mean
 7662 251a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7663              		.loc 1 1846 0
 7664 251c 1846     		mov	r0, r3
 7665 251e FFF7FEFF 		bl	__aeabi_f2d
 7666 2522 8046     		mov	r8, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 218


 7667 2524 8946     		mov	r9, r1
1853:.\console.c   **** 							(float)TOUT_mean(&tilt_current_stat, N_tilt));					
 7668              		.loc 1 1853 0
 7669 2526 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7670 252a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7671 252e 4FF00001 		mov	r1, #0
 7672 2532 C4F22C31 		movt	r1, 17196
 7673 2536 FFF7FEFF 		bl	TOUT_mean
 7674 253a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7675              		.loc 1 1846 0
 7676 253c 1846     		mov	r0, r3
 7677 253e FFF7FEFF 		bl	__aeabi_f2d
 7678 2542 0246     		mov	r2, r0
 7679 2544 0B46     		mov	r3, r1
 7680 2546 D7E91601 		ldrd	r0, [r7, #88]
 7681 254a CDE90001 		strd	r0, [sp]
 7682 254e D7E91401 		ldrd	r0, [r7, #80]
 7683 2552 CDE90201 		strd	r0, [sp, #8]
 7684 2556 D7E91201 		ldrd	r0, [r7, #72]
 7685 255a CDE90401 		strd	r0, [sp, #16]
 7686 255e CDE906AB 		strd	sl, [sp, #24]
 7687 2562 CDE90889 		strd	r8, [sp, #32]
 7688 2566 CDE90A23 		strd	r2, [sp, #40]
 7689 256a 40F20000 		movw	r0, #:lower16:.LC368
 7690 256e C0F20000 		movt	r0, #:upper16:.LC368
 7691 2572 2246     		mov	r2, r4
 7692 2574 2B46     		mov	r3, r5
 7693 2576 FFF7FEFF 		bl	printf
1854:.\console.c   **** 					
1855:.\console.c   **** 					CyDelay(30);
 7694              		.loc 1 1855 0
 7695 257a 4FF01E00 		mov	r0, #30
 7696 257e FFF7FEFF 		bl	CyDelay
 7697              	.L261:
1844:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7698              		.loc 1 1844 0 discriminator 1
 7699 2582 FFF7FEFF 		bl	AnyButtonPressed
 7700 2586 0346     		mov	r3, r0
 7701 2588 002B     		cmp	r3, #0
 7702 258a 80D0     		beq	.L262
1856:.\console.c   **** 				}
1857:.\console.c   **** 				current_statistics_stop(&tilt_current_stat);	/* stop Tilt current  statistics			*/				
 7703              		.loc 1 1857 0
 7704 258c 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7705 2590 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7706 2594 FFF7FEFF 		bl	current_statistics_stop
1858:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr				*/
 7707              		.loc 1 1858 0
 7708 2598 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1859:.\console.c   **** 				
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1861:.\console.c   **** 					(float)Battery_Energy(&tilt_torque_stat, &tilt_current_stat),
 7709              		.loc 1 1861 0
 7710 259c 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7711 25a0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7712 25a4 40F20001 		movw	r1, #:lower16:tilt_current_stat
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 219


 7713 25a8 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7714 25ac FFF7FEFF 		bl	Battery_Energy
 7715 25b0 0346     		mov	r3, r0
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7716              		.loc 1 1860 0
 7717 25b2 1846     		mov	r0, r3
 7718 25b4 FFF7FEFF 		bl	__aeabi_f2d
 7719 25b8 0446     		mov	r4, r0
 7720 25ba 0D46     		mov	r5, r1
1862:.\console.c   **** 					(float)Battery_Energy_Meter(&tilt_torque_stat, &tilt_current_stat, 1000));
 7721              		.loc 1 1862 0
 7722 25bc 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7723 25c0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7724 25c4 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7725 25c8 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7726 25cc 4FF00002 		mov	r2, #0
 7727 25d0 C4F27A42 		movt	r2, 17530
 7728 25d4 FFF7FEFF 		bl	Battery_Energy_Meter
 7729 25d8 0346     		mov	r3, r0
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7730              		.loc 1 1860 0
 7731 25da 1846     		mov	r0, r3
 7732 25dc FFF7FEFF 		bl	__aeabi_f2d
 7733 25e0 0246     		mov	r2, r0
 7734 25e2 0B46     		mov	r3, r1
 7735 25e4 CDE90023 		strd	r2, [sp]
 7736 25e8 40F20000 		movw	r0, #:lower16:.LC362
 7737 25ec C0F20000 		movt	r0, #:upper16:.LC362
 7738 25f0 2246     		mov	r2, r4
 7739 25f2 2B46     		mov	r3, r5
 7740 25f4 FFF7FEFF 		bl	printf
1863:.\console.c   **** 				
1864:.\console.c   **** 				goto exitpars;	
 7741              		.loc 1 1864 0
 7742 25f8 04F06CBF 		b	.L131
 7743              	.L260:
1865:.\console.c   **** 			}
1866:.\console.c   **** 			// END SHOW TILT OUTPUT TORQUE STATISTICS			
1867:.\console.c   **** 	
1868:.\console.c   **** 
1869:.\console.c   **** 			// SHOW PAN MOTOR EROGATED POWER STATISTICS
1870:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmpower") == 0) ||
 7744              		.loc 1 1870 0
 7745 25fc 5548     		ldr	r0, .L735
 7746 25fe 40F20001 		movw	r1, #:lower16:.LC371
 7747 2602 C0F20001 		movt	r1, #:upper16:.LC371
 7748 2606 FFF7FEFF 		bl	strcmp
 7749 260a 0346     		mov	r3, r0
 7750 260c 002B     		cmp	r3, #0
 7751 260e 0AD0     		beq	.L263
1871:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pmp") == 0))
 7752              		.loc 1 1871 0 discriminator 1
 7753 2610 5048     		ldr	r0, .L735
 7754 2612 40F20001 		movw	r1, #:lower16:.LC372
 7755 2616 C0F20001 		movt	r1, #:upper16:.LC372
 7756 261a FFF7FEFF 		bl	strcmp
 7757 261e 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 220


1870:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmpower") == 0) ||
 7758              		.loc 1 1870 0 discriminator 1
 7759 2620 002B     		cmp	r3, #0
 7760 2622 40F09980 		bne	.L264
 7761              	.L263:
1872:.\console.c   **** 			{
1873:.\console.c   **** 				isr_TORQUESTAT_Start();									/* start torque statistics isr	 						*/
 7762              		.loc 1 1873 0
 7763 2626 FFF7FEFF 		bl	isr_TORQUESTAT_Start
1874:.\console.c   **** 	
1875:.\console.c   **** 				motor_abs_velocity_sampling_init(&pan_torque_stat);		/* initialize Pan Motor abs(Angular Veloci
 7764              		.loc 1 1875 0
 7765 262a 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7766 262e C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7767 2632 FFF7FEFF 		bl	motor_abs_velocity_sampling_init
1876:.\console.c   **** 				qpower_statistics_start(&pan_qpower_stat);				/* start quasi-power Statistics							*/
 7768              		.loc 1 1876 0
 7769 2636 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7770 263a C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7771 263e FFF7FEFF 		bl	qpower_statistics_start
1877:.\console.c   **** 				
1878:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7772              		.loc 1 1878 0
 7773 2642 40F20000 		movw	r0, #:lower16:.LC360
 7774 2646 C0F20000 		movt	r0, #:upper16:.LC360
 7775 264a FFF7FEFF 		bl	puts
1879:.\console.c   **** 				CyDelay(500);
 7776              		.loc 1 1879 0
 7777 264e 4FF4FA70 		mov	r0, #500
 7778 2652 FFF7FEFF 		bl	CyDelay
1880:.\console.c   **** 				
1881:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7779              		.loc 1 1881 0
 7780 2656 6DE0     		b	.L265
 7781              	.L266:
 7782              	.LBB6:
1882:.\console.c   **** 				{
1883:.\console.c   **** 					//simultaneous sampling
1884:.\console.c   **** 					float my_torque = TMOT_t(&pan_torque_stat);
 7783              		.loc 1 1884 0
 7784 2658 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7785 265c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7786 2660 FFF7FEFF 		bl	TMOT_t
 7787 2664 C7F89400 		str	r0, [r7, #148]	@ float
1885:.\console.c   **** 					float my_omega  = omega_t(&pan_torque_stat);
 7788              		.loc 1 1885 0
 7789 2668 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7790 266c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7791 2670 FFF7FEFF 		bl	omega_t
 7792 2674 C7F89000 		str	r0, [r7, #144]	@ float
1886:.\console.c   **** 					float my_rpm    = rpm_t(&pan_torque_stat);
 7793              		.loc 1 1886 0
 7794 2678 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7795 267c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7796 2680 FFF7FEFF 		bl	rpm_t
 7797 2684 C7F88C00 		str	r0, [r7, #140]	@ float
1887:.\console.c   **** 					float my_pm_t   = PMOTE_t(&pan_torque_stat);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 221


 7798              		.loc 1 1887 0
 7799 2688 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7800 268c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7801 2690 FFF7FEFF 		bl	PMOTE_t
 7802 2694 C7F88800 		str	r0, [r7, #136]	@ float
1888:.\console.c   **** 					float my_pm_max = PMOTE_max(&pan_qpower_stat);
 7803              		.loc 1 1888 0
 7804 2698 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7805 269c C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7806 26a0 FFF7FEFF 		bl	PMOTE_max
 7807 26a4 C7F88400 		str	r0, [r7, #132]	@ float
1889:.\console.c   **** 					float my_pm_med = PMOTE_mean(&pan_qpower_stat);
 7808              		.loc 1 1889 0
 7809 26a8 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7810 26ac C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7811 26b0 FFF7FEFF 		bl	PMOTE_mean
 7812 26b4 C7F88000 		str	r0, [r7, #128]	@ float
1890:.\console.c   **** 					
1891:.\console.c   **** 					printf("T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed
 7813              		.loc 1 1891 0
 7814 26b8 D7F89400 		ldr	r0, [r7, #148]	@ float
 7815 26bc FFF7FEFF 		bl	__aeabi_f2d
 7816 26c0 0446     		mov	r4, r0
 7817 26c2 0D46     		mov	r5, r1
 7818 26c4 D7F89000 		ldr	r0, [r7, #144]	@ float
 7819 26c8 FFF7FEFF 		bl	__aeabi_f2d
 7820 26cc C7E91A01 		strd	r0, [r7, #104]
 7821 26d0 D7F88C00 		ldr	r0, [r7, #140]	@ float
 7822 26d4 FFF7FEFF 		bl	__aeabi_f2d
 7823 26d8 C7E91801 		strd	r0, [r7, #96]
 7824 26dc D7F88800 		ldr	r0, [r7, #136]	@ float
 7825 26e0 FFF7FEFF 		bl	__aeabi_f2d
 7826 26e4 8246     		mov	sl, r0
 7827 26e6 8B46     		mov	fp, r1
 7828 26e8 D7F88400 		ldr	r0, [r7, #132]	@ float
 7829 26ec FFF7FEFF 		bl	__aeabi_f2d
 7830 26f0 8046     		mov	r8, r0
 7831 26f2 8946     		mov	r9, r1
 7832 26f4 D7F88000 		ldr	r0, [r7, #128]	@ float
 7833 26f8 FFF7FEFF 		bl	__aeabi_f2d
 7834 26fc 0246     		mov	r2, r0
 7835 26fe 0B46     		mov	r3, r1
 7836 2700 D7E91A01 		ldrd	r0, [r7, #104]
 7837 2704 CDE90001 		strd	r0, [sp]
 7838 2708 D7E91801 		ldrd	r0, [r7, #96]
 7839 270c CDE90201 		strd	r0, [sp, #8]
 7840 2710 CDE904AB 		strd	sl, [sp, #16]
 7841 2714 CDE90689 		strd	r8, [sp, #24]
 7842 2718 CDE90823 		strd	r2, [sp, #32]
 7843 271c 40F20000 		movw	r0, #:lower16:.LC373
 7844 2720 C0F20000 		movt	r0, #:upper16:.LC373
 7845 2724 2246     		mov	r2, r4
 7846 2726 2B46     		mov	r3, r5
 7847 2728 FFF7FEFF 		bl	printf
1892:.\console.c   **** 							(float)my_torque,
1893:.\console.c   **** 							(float)my_omega,
1894:.\console.c   **** 							(float)my_rpm,							
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 222


1895:.\console.c   **** 							(float)my_pm_t,
1896:.\console.c   **** 							(float)my_pm_max,
1897:.\console.c   **** 							(float)my_pm_med);
1898:.\console.c   **** 					
1899:.\console.c   **** 					CyDelay(30);
 7848              		.loc 1 1899 0
 7849 272c 4FF01E00 		mov	r0, #30
 7850 2730 FFF7FEFF 		bl	CyDelay
 7851              	.L265:
 7852              	.LBE6:
1881:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7853              		.loc 1 1881 0 discriminator 1
 7854 2734 FFF7FEFF 		bl	AnyButtonPressed
 7855 2738 0346     		mov	r3, r0
 7856 273a 002B     		cmp	r3, #0
 7857 273c 8CD0     		beq	.L266
1900:.\console.c   **** 				}
1901:.\console.c   **** 				qpower_statistics_stop(&pan_qpower_stat);				/* stop quasi-power Statistics	   						*/				
 7858              		.loc 1 1901 0
 7859 273e 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7860 2742 C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7861 2746 FFF7FEFF 		bl	qpower_statistics_stop
1902:.\console.c   **** 				isr_TORQUESTAT_Stop();									/* stop torque statistics isr							*/
 7862              		.loc 1 1902 0
 7863 274a FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1903:.\console.c   **** 								
1904:.\console.c   **** 				goto exitpars;	
 7864              		.loc 1 1904 0
 7865 274e 04F0C1BE 		b	.L131
 7866              	.L736:
 7867 2752 00BF     		.align	2
 7868              	.L735:
 7869 2754 0F000000 		.word	actual_cmd+15
 7870              	.L264:
1905:.\console.c   **** 			}
1906:.\console.c   **** 			// END SHOW PAN MOTOR EROGATED POWER STATISTICS			
1907:.\console.c   **** 		
1908:.\console.c   **** 			
1909:.\console.c   **** 			// SHOW TILT MOTOR EROGATED POWER STATISTICS
1910:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmpower") == 0) ||
 7871              		.loc 1 1910 0
 7872 2758 BC48     		ldr	r0, .L737
 7873 275a 40F20001 		movw	r1, #:lower16:.LC374
 7874 275e C0F20001 		movt	r1, #:upper16:.LC374
 7875 2762 FFF7FEFF 		bl	strcmp
 7876 2766 0346     		mov	r3, r0
 7877 2768 002B     		cmp	r3, #0
 7878 276a 0AD0     		beq	.L267
1911:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tmp") == 0))
 7879              		.loc 1 1911 0 discriminator 1
 7880 276c B748     		ldr	r0, .L737
 7881 276e 40F20001 		movw	r1, #:lower16:.LC375
 7882 2772 C0F20001 		movt	r1, #:upper16:.LC375
 7883 2776 FFF7FEFF 		bl	strcmp
 7884 277a 0346     		mov	r3, r0
1910:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmpower") == 0) ||
 7885              		.loc 1 1910 0 discriminator 1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 223


 7886 277c 002B     		cmp	r3, #0
 7887 277e 40F09680 		bne	.L268
 7888              	.L267:
1912:.\console.c   **** 			{
1913:.\console.c   **** 				isr_TORQUESTAT_Start();									/* start torque statistics isr	 						*/
 7889              		.loc 1 1913 0
 7890 2782 FFF7FEFF 		bl	isr_TORQUESTAT_Start
1914:.\console.c   **** 	
1915:.\console.c   **** 				motor_abs_velocity_sampling_init(&tilt_torque_stat);	/* Initialize Tilt Motor abs(Angular Veloc
 7891              		.loc 1 1915 0
 7892 2786 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7893 278a C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7894 278e FFF7FEFF 		bl	motor_abs_velocity_sampling_init
1916:.\console.c   **** 				qpower_statistics_start(&tilt_qpower_stat);				/* initialize quasi-power Statistics					*/
 7895              		.loc 1 1916 0
 7896 2792 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7897 2796 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7898 279a FFF7FEFF 		bl	qpower_statistics_start
1917:.\console.c   **** 				
1918:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7899              		.loc 1 1918 0
 7900 279e 40F20000 		movw	r0, #:lower16:.LC365
 7901 27a2 C0F20000 		movt	r0, #:upper16:.LC365
 7902 27a6 FFF7FEFF 		bl	puts
1919:.\console.c   **** 				CyDelay(500);
 7903              		.loc 1 1919 0
 7904 27aa 4FF4FA70 		mov	r0, #500
 7905 27ae FFF7FEFF 		bl	CyDelay
1920:.\console.c   **** 				
1921:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7906              		.loc 1 1921 0
 7907 27b2 6DE0     		b	.L269
 7908              	.L270:
 7909              	.LBB7:
1922:.\console.c   **** 				{
1923:.\console.c   **** 					//simultaneous sampling
1924:.\console.c   **** 					float my_torque = TMOT_t(&tilt_torque_stat);
 7910              		.loc 1 1924 0
 7911 27b4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7912 27b8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7913 27bc FFF7FEFF 		bl	TMOT_t
 7914 27c0 C7F8AC00 		str	r0, [r7, #172]	@ float
1925:.\console.c   **** 					float my_omega  = omega_t(&tilt_torque_stat);
 7915              		.loc 1 1925 0
 7916 27c4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7917 27c8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7918 27cc FFF7FEFF 		bl	omega_t
 7919 27d0 C7F8A800 		str	r0, [r7, #168]	@ float
1926:.\console.c   **** 					float my_rpm    = rpm_t(&tilt_torque_stat);
 7920              		.loc 1 1926 0
 7921 27d4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7922 27d8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7923 27dc FFF7FEFF 		bl	rpm_t
 7924 27e0 C7F8A400 		str	r0, [r7, #164]	@ float
1927:.\console.c   **** 					float my_pm_t   = PMOTE_t(&tilt_torque_stat);
 7925              		.loc 1 1927 0
 7926 27e4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 224


 7927 27e8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7928 27ec FFF7FEFF 		bl	PMOTE_t
 7929 27f0 C7F8A000 		str	r0, [r7, #160]	@ float
1928:.\console.c   **** 					float my_pm_max = PMOTE_max(&tilt_qpower_stat);
 7930              		.loc 1 1928 0
 7931 27f4 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7932 27f8 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7933 27fc FFF7FEFF 		bl	PMOTE_max
 7934 2800 C7F89C00 		str	r0, [r7, #156]	@ float
1929:.\console.c   **** 					float my_pm_med = PMOTE_mean(&tilt_qpower_stat);
 7935              		.loc 1 1929 0
 7936 2804 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7937 2808 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7938 280c FFF7FEFF 		bl	PMOTE_mean
 7939 2810 C7F89800 		str	r0, [r7, #152]	@ float
1930:.\console.c   **** 					
1931:.\console.c   **** 					printf("T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed
 7940              		.loc 1 1931 0
 7941 2814 D7F8AC00 		ldr	r0, [r7, #172]	@ float
 7942 2818 FFF7FEFF 		bl	__aeabi_f2d
 7943 281c 0446     		mov	r4, r0
 7944 281e 0D46     		mov	r5, r1
 7945 2820 D7F8A800 		ldr	r0, [r7, #168]	@ float
 7946 2824 FFF7FEFF 		bl	__aeabi_f2d
 7947 2828 C7E91E01 		strd	r0, [r7, #120]
 7948 282c D7F8A400 		ldr	r0, [r7, #164]	@ float
 7949 2830 FFF7FEFF 		bl	__aeabi_f2d
 7950 2834 C7E91C01 		strd	r0, [r7, #112]
 7951 2838 D7F8A000 		ldr	r0, [r7, #160]	@ float
 7952 283c FFF7FEFF 		bl	__aeabi_f2d
 7953 2840 8246     		mov	sl, r0
 7954 2842 8B46     		mov	fp, r1
 7955 2844 D7F89C00 		ldr	r0, [r7, #156]	@ float
 7956 2848 FFF7FEFF 		bl	__aeabi_f2d
 7957 284c 8046     		mov	r8, r0
 7958 284e 8946     		mov	r9, r1
 7959 2850 D7F89800 		ldr	r0, [r7, #152]	@ float
 7960 2854 FFF7FEFF 		bl	__aeabi_f2d
 7961 2858 0246     		mov	r2, r0
 7962 285a 0B46     		mov	r3, r1
 7963 285c D7E91E01 		ldrd	r0, [r7, #120]
 7964 2860 CDE90001 		strd	r0, [sp]
 7965 2864 D7E91C01 		ldrd	r0, [r7, #112]
 7966 2868 CDE90201 		strd	r0, [sp, #8]
 7967 286c CDE904AB 		strd	sl, [sp, #16]
 7968 2870 CDE90689 		strd	r8, [sp, #24]
 7969 2874 CDE90823 		strd	r2, [sp, #32]
 7970 2878 40F20000 		movw	r0, #:lower16:.LC373
 7971 287c C0F20000 		movt	r0, #:upper16:.LC373
 7972 2880 2246     		mov	r2, r4
 7973 2882 2B46     		mov	r3, r5
 7974 2884 FFF7FEFF 		bl	printf
1932:.\console.c   **** 							(float)my_torque,
1933:.\console.c   **** 							(float)my_omega,
1934:.\console.c   **** 							(float)my_rpm,							
1935:.\console.c   **** 							(float)my_pm_t,
1936:.\console.c   **** 							(float)my_pm_max,
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 225


1937:.\console.c   **** 							(float)my_pm_med);
1938:.\console.c   **** 					
1939:.\console.c   **** 					CyDelay(30);
 7975              		.loc 1 1939 0
 7976 2888 4FF01E00 		mov	r0, #30
 7977 288c FFF7FEFF 		bl	CyDelay
 7978              	.L269:
 7979              	.LBE7:
1921:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7980              		.loc 1 1921 0 discriminator 1
 7981 2890 FFF7FEFF 		bl	AnyButtonPressed
 7982 2894 0346     		mov	r3, r0
 7983 2896 002B     		cmp	r3, #0
 7984 2898 8CD0     		beq	.L270
1940:.\console.c   **** 				}
1941:.\console.c   **** 				qpower_statistics_stop(&tilt_qpower_stat);	/* stops quasi-power Statistics							*/				
 7985              		.loc 1 1941 0
 7986 289a 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7987 289e C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7988 28a2 FFF7FEFF 		bl	qpower_statistics_stop
1942:.\console.c   **** 				isr_TORQUESTAT_Stop();						/* stop torque statistics isr							*/
 7989              		.loc 1 1942 0
 7990 28a6 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1943:.\console.c   **** 				
1944:.\console.c   **** 				goto exitpars;	
 7991              		.loc 1 1944 0
 7992 28aa 04F013BE 		b	.L131
 7993              	.L268:
1945:.\console.c   **** 			}
1946:.\console.c   **** 			// END SHOW TILT MOTOR EROGATED POWER STATISTICS				
1947:.\console.c   **** 			
1948:.\console.c   **** 			
1949:.\console.c   **** 			// SHOW PAN ABSOLUTE SENSOR STATS
1950:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pabsstats") == 0)	
 7994              		.loc 1 1950 0
 7995 28ae 6748     		ldr	r0, .L737
 7996 28b0 40F20001 		movw	r1, #:lower16:.LC376
 7997 28b4 C0F20001 		movt	r1, #:upper16:.LC376
 7998 28b8 FFF7FEFF 		bl	strcmp
 7999 28bc 0346     		mov	r3, r0
 8000 28be 002B     		cmp	r3, #0
 8001 28c0 09D0     		beq	.L271
1951:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "pabs") == 0))
 8002              		.loc 1 1951 0
 8003 28c2 6248     		ldr	r0, .L737
 8004 28c4 40F20001 		movw	r1, #:lower16:.LC377
 8005 28c8 C0F20001 		movt	r1, #:upper16:.LC377
 8006 28cc FFF7FEFF 		bl	strcmp
 8007 28d0 0346     		mov	r3, r0
 8008 28d2 002B     		cmp	r3, #0
 8009 28d4 4DD1     		bne	.L272
 8010              	.L271:
1952:.\console.c   **** 			{			
1953:.\console.c   **** 				printf("PAN Absolute Sensor:");					
 8011              		.loc 1 1953 0
 8012 28d6 40F20000 		movw	r0, #:lower16:.LC378
 8013 28da C0F20000 		movt	r0, #:upper16:.LC378
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 226


 8014 28de FFF7FEFF 		bl	printf
1954:.\console.c   **** 				printf(" mean=%+1.1f [raw]", (float) pan_absolute_sensor_stat.mean);
 8015              		.loc 1 1954 0
 8016 28e2 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 8017 28e6 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 8018 28ea 5B68     		ldr	r3, [r3, #4]	@ float
 8019 28ec 1846     		mov	r0, r3
 8020 28ee FFF7FEFF 		bl	__aeabi_f2d
 8021 28f2 0246     		mov	r2, r0
 8022 28f4 0B46     		mov	r3, r1
 8023 28f6 40F20000 		movw	r0, #:lower16:.LC379
 8024 28fa C0F20000 		movt	r0, #:upper16:.LC379
 8025 28fe FFF7FEFF 		bl	printf
1955:.\console.c   **** 				printf(" max=%+1.1f [raw]", (float) pan_absolute_sensor_stat.max);
 8026              		.loc 1 1955 0
 8027 2902 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 8028 2906 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 8029 290a 1B69     		ldr	r3, [r3, #16]	@ float
 8030 290c 1846     		mov	r0, r3
 8031 290e FFF7FEFF 		bl	__aeabi_f2d
 8032 2912 0246     		mov	r2, r0
 8033 2914 0B46     		mov	r3, r1
 8034 2916 40F20000 		movw	r0, #:lower16:.LC380
 8035 291a C0F20000 		movt	r0, #:upper16:.LC380
 8036 291e FFF7FEFF 		bl	printf
1956:.\console.c   **** 				printf(" min=%+1.1f [raw]", (float) pan_absolute_sensor_stat.min);					
 8037              		.loc 1 1956 0
 8038 2922 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 8039 2926 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 8040 292a DB68     		ldr	r3, [r3, #12]	@ float
 8041 292c 1846     		mov	r0, r3
 8042 292e FFF7FEFF 		bl	__aeabi_f2d
 8043 2932 0246     		mov	r2, r0
 8044 2934 0B46     		mov	r3, r1
 8045 2936 40F20000 		movw	r0, #:lower16:.LC381
 8046 293a C0F20000 		movt	r0, #:upper16:.LC381
 8047 293e FFF7FEFF 		bl	printf
1957:.\console.c   **** 				printf(" range=%+1.1f [raw]", (float) pan_absolute_sensor_stat.range);						
 8048              		.loc 1 1957 0
 8049 2942 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 8050 2946 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 8051 294a 5B69     		ldr	r3, [r3, #20]	@ float
 8052 294c 1846     		mov	r0, r3
 8053 294e FFF7FEFF 		bl	__aeabi_f2d
 8054 2952 0246     		mov	r2, r0
 8055 2954 0B46     		mov	r3, r1
 8056 2956 40F20000 		movw	r0, #:lower16:.LC382
 8057 295a C0F20000 		movt	r0, #:upper16:.LC382
 8058 295e FFF7FEFF 		bl	printf
1958:.\console.c   **** 					
1959:.\console.c   **** 				printf("\r\n");	
 8059              		.loc 1 1959 0
 8060 2962 40F20000 		movw	r0, #:lower16:.LC42
 8061 2966 C0F20000 		movt	r0, #:upper16:.LC42
 8062 296a FFF7FEFF 		bl	puts
1960:.\console.c   **** 
1961:.\console.c   **** 				goto exitpars;	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 227


 8063              		.loc 1 1961 0
 8064 296e 04F0B1BD 		b	.L131
 8065              	.L272:
1962:.\console.c   **** 			}
1963:.\console.c   **** 			// SHOW PAN ABSOLUTE SENSOR STATS END	
1964:.\console.c   **** 			
1965:.\console.c   **** 			
1966:.\console.c   **** 			// SHOW TILT ABSOLUTE SENSOR STATS
1967:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tabsstats") == 0)	
 8066              		.loc 1 1967 0
 8067 2972 3648     		ldr	r0, .L737
 8068 2974 40F20001 		movw	r1, #:lower16:.LC383
 8069 2978 C0F20001 		movt	r1, #:upper16:.LC383
 8070 297c FFF7FEFF 		bl	strcmp
 8071 2980 0346     		mov	r3, r0
 8072 2982 002B     		cmp	r3, #0
 8073 2984 09D0     		beq	.L273
1968:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "tabs") == 0))
 8074              		.loc 1 1968 0
 8075 2986 3148     		ldr	r0, .L737
 8076 2988 40F20001 		movw	r1, #:lower16:.LC384
 8077 298c C0F20001 		movt	r1, #:upper16:.LC384
 8078 2990 FFF7FEFF 		bl	strcmp
 8079 2994 0346     		mov	r3, r0
 8080 2996 002B     		cmp	r3, #0
 8081 2998 4DD1     		bne	.L274
 8082              	.L273:
1969:.\console.c   **** 			{			
1970:.\console.c   **** 				printf("TILT Absolute Sensor:");					
 8083              		.loc 1 1970 0
 8084 299a 40F20000 		movw	r0, #:lower16:.LC385
 8085 299e C0F20000 		movt	r0, #:upper16:.LC385
 8086 29a2 FFF7FEFF 		bl	printf
1971:.\console.c   **** 				printf(" mean=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.mean);
 8087              		.loc 1 1971 0
 8088 29a6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8089 29aa C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8090 29ae 5B68     		ldr	r3, [r3, #4]	@ float
 8091 29b0 1846     		mov	r0, r3
 8092 29b2 FFF7FEFF 		bl	__aeabi_f2d
 8093 29b6 0246     		mov	r2, r0
 8094 29b8 0B46     		mov	r3, r1
 8095 29ba 40F20000 		movw	r0, #:lower16:.LC379
 8096 29be C0F20000 		movt	r0, #:upper16:.LC379
 8097 29c2 FFF7FEFF 		bl	printf
1972:.\console.c   **** 				printf(" max=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.max);
 8098              		.loc 1 1972 0
 8099 29c6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8100 29ca C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8101 29ce 1B69     		ldr	r3, [r3, #16]	@ float
 8102 29d0 1846     		mov	r0, r3
 8103 29d2 FFF7FEFF 		bl	__aeabi_f2d
 8104 29d6 0246     		mov	r2, r0
 8105 29d8 0B46     		mov	r3, r1
 8106 29da 40F20000 		movw	r0, #:lower16:.LC380
 8107 29de C0F20000 		movt	r0, #:upper16:.LC380
 8108 29e2 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 228


1973:.\console.c   **** 				printf(" min=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.min);					
 8109              		.loc 1 1973 0
 8110 29e6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8111 29ea C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8112 29ee DB68     		ldr	r3, [r3, #12]	@ float
 8113 29f0 1846     		mov	r0, r3
 8114 29f2 FFF7FEFF 		bl	__aeabi_f2d
 8115 29f6 0246     		mov	r2, r0
 8116 29f8 0B46     		mov	r3, r1
 8117 29fa 40F20000 		movw	r0, #:lower16:.LC381
 8118 29fe C0F20000 		movt	r0, #:upper16:.LC381
 8119 2a02 FFF7FEFF 		bl	printf
1974:.\console.c   **** 				printf(" range=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.range);						
 8120              		.loc 1 1974 0
 8121 2a06 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8122 2a0a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8123 2a0e 5B69     		ldr	r3, [r3, #20]	@ float
 8124 2a10 1846     		mov	r0, r3
 8125 2a12 FFF7FEFF 		bl	__aeabi_f2d
 8126 2a16 0246     		mov	r2, r0
 8127 2a18 0B46     		mov	r3, r1
 8128 2a1a 40F20000 		movw	r0, #:lower16:.LC382
 8129 2a1e C0F20000 		movt	r0, #:upper16:.LC382
 8130 2a22 FFF7FEFF 		bl	printf
1975:.\console.c   **** 					
1976:.\console.c   **** 				printf("\r\n");	
 8131              		.loc 1 1976 0
 8132 2a26 40F20000 		movw	r0, #:lower16:.LC42
 8133 2a2a C0F20000 		movt	r0, #:upper16:.LC42
 8134 2a2e FFF7FEFF 		bl	puts
1977:.\console.c   **** 
1978:.\console.c   **** 				goto exitpars;	
 8135              		.loc 1 1978 0
 8136 2a32 04F04FBD 		b	.L131
 8137              	.L274:
1979:.\console.c   **** 			}
1980:.\console.c   **** 			// SHOW TILT ABSOLUTE SENSOR STATS END	
1981:.\console.c   **** 
1982:.\console.c   **** 			
1983:.\console.c   **** 			// SHOW ASTIM
1984:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "astim") == 0)	
 8138              		.loc 1 1984 0
 8139 2a36 0548     		ldr	r0, .L737
 8140 2a38 40F20001 		movw	r1, #:lower16:.LC386
 8141 2a3c C0F20001 		movt	r1, #:upper16:.LC386
 8142 2a40 FFF7FEFF 		bl	strcmp
 8143 2a44 0346     		mov	r3, r0
 8144 2a46 002B     		cmp	r3, #0
 8145 2a48 3AD1     		bne	.L275
1985:.\console.c   **** 			{
1986:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8146              		.loc 1 1986 0
 8147 2a4a 32E0     		b	.L276
 8148              	.L738:
 8149              		.align	2
 8150              	.L737:
 8151 2a4c 0F000000 		.word	actual_cmd+15
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 229


 8152              	.L277:
1987:.\console.c   **** 				{					
1988:.\console.c   **** 					printf("ASTIM(ADC_INPUT) =%+5d [lsb]", (int16)AdcValue[CTRL_IN_ASTIM]);					
 8153              		.loc 1 1988 0
 8154 2a50 40F20003 		movw	r3, #:lower16:AdcValue
 8155 2a54 C0F20003 		movt	r3, #:upper16:AdcValue
 8156 2a58 1B8A     		ldrh	r3, [r3, #16]
 8157 2a5a 1BB2     		sxth	r3, r3
 8158 2a5c 40F20000 		movw	r0, #:lower16:.LC387
 8159 2a60 C0F20000 		movt	r0, #:upper16:.LC387
 8160 2a64 1946     		mov	r1, r3
 8161 2a66 FFF7FEFF 		bl	printf
1989:.\console.c   **** 					printf("   ASTIM(P)=%+5.1f [step]", (float)pan_axis.mc.Float_ASTIM);
 8162              		.loc 1 1989 0
 8163 2a6a 40F20003 		movw	r3, #:lower16:pan_axis
 8164 2a6e C0F20003 		movt	r3, #:upper16:pan_axis
 8165 2a72 DB6F     		ldr	r3, [r3, #124]	@ float
 8166 2a74 1846     		mov	r0, r3
 8167 2a76 FFF7FEFF 		bl	__aeabi_f2d
 8168 2a7a 0246     		mov	r2, r0
 8169 2a7c 0B46     		mov	r3, r1
 8170 2a7e 40F20000 		movw	r0, #:lower16:.LC388
 8171 2a82 C0F20000 		movt	r0, #:upper16:.LC388
 8172 2a86 FFF7FEFF 		bl	printf
1990:.\console.c   **** 					printf("   ASTIM(T)=%+5.1f [step]\r\n", (float)tilt_axis.mc.Float_ASTIM);
 8173              		.loc 1 1990 0
 8174 2a8a 40F20003 		movw	r3, #:lower16:tilt_axis
 8175 2a8e C0F20003 		movt	r3, #:upper16:tilt_axis
 8176 2a92 DB6F     		ldr	r3, [r3, #124]	@ float
 8177 2a94 1846     		mov	r0, r3
 8178 2a96 FFF7FEFF 		bl	__aeabi_f2d
 8179 2a9a 0246     		mov	r2, r0
 8180 2a9c 0B46     		mov	r3, r1
 8181 2a9e 40F20000 		movw	r0, #:lower16:.LC389
 8182 2aa2 C0F20000 		movt	r0, #:upper16:.LC389
 8183 2aa6 FFF7FEFF 		bl	printf
1991:.\console.c   **** 					CyDelay(10);
 8184              		.loc 1 1991 0
 8185 2aaa 4FF00A00 		mov	r0, #10
 8186 2aae FFF7FEFF 		bl	CyDelay
 8187              	.L276:
1986:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8188              		.loc 1 1986 0 discriminator 1
 8189 2ab2 FFF7FEFF 		bl	AnyButtonPressed
 8190 2ab6 0346     		mov	r3, r0
 8191 2ab8 002B     		cmp	r3, #0
 8192 2aba C9D0     		beq	.L277
1992:.\console.c   **** 				}
1993:.\console.c   **** 				goto exitpars;	
 8193              		.loc 1 1993 0
 8194 2abc 04F00ABD 		b	.L131
 8195              	.L275:
1994:.\console.c   **** 			}
1995:.\console.c   **** 			// END SHOW astim			
1996:.\console.c   **** 			
1997:.\console.c   **** 			
1998:.\console.c   **** #if ITG_3701_ENABLED			
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 230


1999:.\console.c   **** 			// SHOW ITG-3701 DIGITAL GYRO
2000:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "itg3701") == 0)	
2001:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "3701") == 0))
2002:.\console.c   **** 			{
2003:.\console.c   **** 				// Verify HW connection
2004:.\console.c   **** 				dummy = ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_WHO_AM_I);  // Read WHO_AM_I register for ITG
2005:.\console.c   **** 			  	printf("ITG3701 gyro; I AM 0x%02X (should be 0x68)\r\n",(uint16)dummy);
2006:.\console.c   **** 				CyDelay(1);
2007:.\console.c   **** 				
2008:.\console.c   **** //				// Initialize ITG-3701 gyro
2009:.\console.c   **** //				initITG3701();
2010:.\console.c   **** 
2011:.\console.c   **** //			    // Calibrate gyro loading biases in bias registers
2012:.\console.c   **** //			    gyrocalITG3701(gyroBias);
2013:.\console.c   **** 
2014:.\console.c   **** //				// get sensor resolutions, only need to do this once (calculates gRes)
2015:.\console.c   **** //			   	getGres();	
2016:.\console.c   **** 			   	printf("ITG3701 gyro sensitivity is %1.4f LSB/dps\r\n", (float)1.0/(gRes));	
2017:.\console.c   **** 				
2018:.\console.c   **** 				// verify and print sensor resolution HW register
2019:.\console.c   **** 				dummy = ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_GYRO_CONFIG); // Read ITG3701_GYRO_CONFIG reg
2020:.\console.c   **** 				printf("ITG3701_GYRO_CONFIG = 0x%02X\r\n\r\n",(uint16)dummy);
2021:.\console.c   **** 				
2022:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2023:.\console.c   **** 				{
2024:.\console.c   **** 					if (ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_INT_STATUS) & 0x01)  // check if new gyro data i
2025:.\console.c   **** 					{
2026:.\console.c   **** 						readGyroData(gyroCount);  // Read the x/y/z adc values
2027:.\console.c   **** 
2028:.\console.c   **** 					    // Calculate the gyro value into actual degrees per second
2029:.\console.c   **** 					    gx = (float)gyroCount[0]*gRes - gyroBias[0];  // get actual gyro value, this depends on sc
2030:.\console.c   **** 					    gy = (float)gyroCount[1]*gRes - gyroBias[1];  
2031:.\console.c   **** 					    gz = (float)gyroCount[2]*gRes - gyroBias[2]; 
2032:.\console.c   **** 					}
2033:.\console.c   **** 					printf("gx=%1.4f gy=%1.4f gz=%1.4f\r\n",(float)gx, (float)gy, (float)gz);
2034:.\console.c   **** 					CyDelay(50);
2035:.\console.c   **** 				}
2036:.\console.c   **** 				goto exitpars;	
2037:.\console.c   **** 			}
2038:.\console.c   **** 			// SHOW ITG-3701 DIGITAL GYRO END			
2039:.\console.c   **** #endif
2040:.\console.c   **** 
2041:.\console.c   **** #if IMU_UM7_ENABLED
2042:.\console.c   **** 			// SHOW IMU CHR-UM7-LT CH ROBOTICS (rgatti code)
2043:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuum7") == 0)	
2044:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imu") == 0))
2045:.\console.c   **** 			{
2046:.\console.c   **** 				//IMU_UM7_PACKETIZER_Debug(true);
2047:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2048:.\console.c   **** 				{	
2049:.\console.c   **** 					print_euler_angles(&euler_angles);
2050:.\console.c   **** 					
2051:.\console.c   **** //					if(IMU_UM7_Error())
2052:.\console.c   **** //					{
2053:.\console.c   **** 						printf(" Serial errors=%d", IMU_UM7_serial_errors_count);
2054:.\console.c   **** //					}
2055:.\console.c   **** 					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 231


2056:.\console.c   **** 					printf("\r\n");	
2057:.\console.c   **** 					CyDelay(50);
2058:.\console.c   **** 				}
2059:.\console.c   **** 				goto exitpars;	
2060:.\console.c   **** 			}
2061:.\console.c   **** 			// SHOW IMU CHR-UM7-LT CH ROBOTICS (rgatti code) END
2062:.\console.c   **** 			
2063:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SETTINGS (rgatti code)
2064:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuset") == 0)	
2065:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imusettings") == 0))
2066:.\console.c   **** 			{	
2067:.\console.c   **** //				isr_CTRL_Stop();				/* Stop Control ISR						 	 	 */
2068:.\console.c   **** //				CyDelay(10);	
2069:.\console.c   **** 				
2070:.\console.c   **** 				IMU_UM7_Stop();					/* Stop CH ROBOTICS UM7-LT IMU (rgatti code) 	 */				
2071:.\console.c   **** 				IMU_UM7_UART_ClearRxBuffer();	/* Clear IMU-UM7 Psoc HW Component RX Buffer	 */				
2072:.\console.c   **** 				IMU_UM7_InitAndStart();			/* Re-Start CH ROBOTICS UM7-LT IMU (rgatti code) */	
2073:.\console.c   **** 				CyDelay(10);					
2074:.\console.c   **** 				IMU_UM7_PrintSettings();
2075:.\console.c   **** 				
2076:.\console.c   **** 				printf("\r\nERRORS:");
2077:.\console.c   **** 				printf("\r\n  Serial errors=%d", IMU_UM7_serial_errors_count);
2078:.\console.c   **** 				
2079:.\console.c   **** 				printf("\r\n");	
2080:.\console.c   **** 				CyDelay(50);
2081:.\console.c   **** 			
2082:.\console.c   **** 				IMU_UM7_Stop();					/* Stop CH ROBOTICS UM7-LT IMU (rgatti code) 	*/
2083:.\console.c   **** 				IMU_UM7_UART_ClearRxBuffer();	/* Clear IMU-UM7 Psoc HW Component RX Buffer	*/				
2084:.\console.c   **** 				IMU_UM7_InitAndStart();			/* Re-Start CH ROBOTICS UM7-LT IMU (rgatti code)*/
2085:.\console.c   **** 				
2086:.\console.c   **** //				CyDelay(10);				
2087:.\console.c   **** //				isr_CTRL_Start();				/* Re-Start Control ISR				 	 	 	*/
2088:.\console.c   **** 					
2089:.\console.c   **** 				goto exitpars;	
2090:.\console.c   **** 			}
2091:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SETTINGS (rgatti code) END	
2092:.\console.c   **** 			
2093:.\console.c   **** 			
2094:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SERIAL ERRORS (rgatti code)
2095:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuerr") == 0)	
2096:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imuerrors") == 0))
2097:.\console.c   **** 			{	
2098:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2099:.\console.c   **** 				{					
2100:.\console.c   **** 					printf("\r\nIMU UM7-LT Serial errors=%d", IMU_UM7_serial_errors_count);
2101:.\console.c   **** 					CyDelay(50);
2102:.\console.c   **** 				}
2103:.\console.c   **** 				printf("\r\n");	
2104:.\console.c   **** 
2105:.\console.c   **** 				goto exitpars;	
2106:.\console.c   **** 			}
2107:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SERIAL ERRORS (rgatti code) END				
2108:.\console.c   **** #endif			
2109:.\console.c   **** 
2110:.\console.c   **** 			// SHOW BIKE EULER ANGLES
2111:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "bikeangles") == 0)	
 8196              		.loc 1 2111 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 232


 8197 2ac0 B348     		ldr	r0, .L739
 8198 2ac2 40F20001 		movw	r1, #:lower16:.LC390
 8199 2ac6 C0F20001 		movt	r1, #:upper16:.LC390
 8200 2aca FFF7FEFF 		bl	strcmp
 8201 2ace 0346     		mov	r3, r0
 8202 2ad0 002B     		cmp	r3, #0
 8203 2ad2 39D0     		beq	.L701
2112:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "bike") == 0))
 8204              		.loc 1 2112 0
 8205 2ad4 AE48     		ldr	r0, .L739
 8206 2ad6 40F20001 		movw	r1, #:lower16:.LC391
 8207 2ada C0F20001 		movt	r1, #:upper16:.LC391
 8208 2ade FFF7FEFF 		bl	strcmp
 8209 2ae2 0346     		mov	r3, r0
 8210 2ae4 002B     		cmp	r3, #0
 8211 2ae6 37D1     		bne	.L279
2113:.\console.c   **** 			{
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8212              		.loc 1 2114 0
 8213 2ae8 2EE0     		b	.L701
 8214              	.L281:
2115:.\console.c   **** 				{	
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
2117:.\console.c   **** 							(float)IMU_sensor.bike_yaw_lpf,
 8215              		.loc 1 2117 0
 8216 2aea 40F20003 		movw	r3, #:lower16:IMU_sensor
 8217 2aee C0F20003 		movt	r3, #:upper16:IMU_sensor
 8218 2af2 DB68     		ldr	r3, [r3, #12]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8219              		.loc 1 2116 0
 8220 2af4 1846     		mov	r0, r3
 8221 2af6 FFF7FEFF 		bl	__aeabi_f2d
 8222 2afa 0446     		mov	r4, r0
 8223 2afc 0D46     		mov	r5, r1
2118:.\console.c   **** 							(float)IMU_sensor.bike_pitch_lpf,
 8224              		.loc 1 2118 0
 8225 2afe 40F20003 		movw	r3, #:lower16:IMU_sensor
 8226 2b02 C0F20003 		movt	r3, #:upper16:IMU_sensor
 8227 2b06 1B69     		ldr	r3, [r3, #16]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8228              		.loc 1 2116 0
 8229 2b08 1846     		mov	r0, r3
 8230 2b0a FFF7FEFF 		bl	__aeabi_f2d
 8231 2b0e 8046     		mov	r8, r0
 8232 2b10 8946     		mov	r9, r1
2119:.\console.c   **** 							(float)IMU_sensor.bike_roll_lpf);
 8233              		.loc 1 2119 0
 8234 2b12 40F20003 		movw	r3, #:lower16:IMU_sensor
 8235 2b16 C0F20003 		movt	r3, #:upper16:IMU_sensor
 8236 2b1a 5B69     		ldr	r3, [r3, #20]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8237              		.loc 1 2116 0
 8238 2b1c 1846     		mov	r0, r3
 8239 2b1e FFF7FEFF 		bl	__aeabi_f2d
 8240 2b22 0246     		mov	r2, r0
 8241 2b24 0B46     		mov	r3, r1
 8242 2b26 CDE90089 		strd	r8, [sp]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 233


 8243 2b2a CDE90223 		strd	r2, [sp, #8]
 8244 2b2e 40F20000 		movw	r0, #:lower16:.LC392
 8245 2b32 C0F20000 		movt	r0, #:upper16:.LC392
 8246 2b36 2246     		mov	r2, r4
 8247 2b38 2B46     		mov	r3, r5
 8248 2b3a FFF7FEFF 		bl	printf
2120:.\console.c   **** 					CyDelay(50);
 8249              		.loc 1 2120 0
 8250 2b3e 4FF03200 		mov	r0, #50
 8251 2b42 FFF7FEFF 		bl	CyDelay
 8252 2b46 00E0     		b	.L280
 8253              	.L701:
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8254              		.loc 1 2114 0
 8255 2b48 00BF     		nop
 8256              	.L280:
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8257              		.loc 1 2114 0 is_stmt 0 discriminator 1
 8258 2b4a FFF7FEFF 		bl	AnyButtonPressed
 8259 2b4e 0346     		mov	r3, r0
 8260 2b50 002B     		cmp	r3, #0
 8261 2b52 CAD0     		beq	.L281
2121:.\console.c   **** 				}
2122:.\console.c   **** 				goto exitpars;	
 8262              		.loc 1 2122 0 is_stmt 1
 8263 2b54 04F0BEBC 		b	.L131
 8264              	.L279:
2123:.\console.c   **** 			}
2124:.\console.c   **** 			// BIKE EULER ANGLES END			
2125:.\console.c   **** 
2126:.\console.c   **** 			
2127:.\console.c   **** 			// SHOW ANALOG 3D ACCELEROMETER
2128:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "analogacc") == 0)	
 8265              		.loc 1 2128 0
 8266 2b58 8D48     		ldr	r0, .L739
 8267 2b5a 40F20001 		movw	r1, #:lower16:.LC393
 8268 2b5e C0F20001 		movt	r1, #:upper16:.LC393
 8269 2b62 FFF7FEFF 		bl	strcmp
 8270 2b66 0346     		mov	r3, r0
 8271 2b68 002B     		cmp	r3, #0
 8272 2b6a 00F08180 		beq	.L702
2129:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "aacc") == 0))
 8273              		.loc 1 2129 0
 8274 2b6e 8848     		ldr	r0, .L739
 8275 2b70 40F20001 		movw	r1, #:lower16:.LC394
 8276 2b74 C0F20001 		movt	r1, #:upper16:.LC394
 8277 2b78 FFF7FEFF 		bl	strcmp
 8278 2b7c 0346     		mov	r3, r0
 8279 2b7e 002B     		cmp	r3, #0
 8280 2b80 7ED1     		bne	.L283
2130:.\console.c   **** 			{
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8281              		.loc 1 2131 0
 8282 2b82 75E0     		b	.L702
 8283              	.L285:
2132:.\console.c   **** 				{
2133:.\console.c   **** 					printf("x=%+1.4f[g] (%5i)", (float) aacc.x_axis.acceleration_lpf, (int16)aacc.x_axis.ADC);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 234


 8284              		.loc 1 2133 0
 8285 2b84 40F20003 		movw	r3, #:lower16:aacc
 8286 2b88 C0F20003 		movt	r3, #:upper16:aacc
 8287 2b8c DB68     		ldr	r3, [r3, #12]	@ float
 8288 2b8e 1846     		mov	r0, r3
 8289 2b90 FFF7FEFF 		bl	__aeabi_f2d
 8290 2b94 0446     		mov	r4, r0
 8291 2b96 0D46     		mov	r5, r1
 8292 2b98 40F20003 		movw	r3, #:lower16:aacc
 8293 2b9c C0F20003 		movt	r3, #:upper16:aacc
 8294 2ba0 1B88     		ldrh	r3, [r3, #0]
 8295 2ba2 1BB2     		sxth	r3, r3
 8296 2ba4 0093     		str	r3, [sp, #0]
 8297 2ba6 40F20000 		movw	r0, #:lower16:.LC395
 8298 2baa C0F20000 		movt	r0, #:upper16:.LC395
 8299 2bae 2246     		mov	r2, r4
 8300 2bb0 2B46     		mov	r3, r5
 8301 2bb2 FFF7FEFF 		bl	printf
2134:.\console.c   **** 					printf(" y=%+1.4f[g] (%5i)", (float) aacc.y_axis.acceleration_lpf, (int16)aacc.y_axis.ADC);			
 8302              		.loc 1 2134 0
 8303 2bb6 40F20003 		movw	r3, #:lower16:aacc
 8304 2bba C0F20003 		movt	r3, #:upper16:aacc
 8305 2bbe DB69     		ldr	r3, [r3, #28]	@ float
 8306 2bc0 1846     		mov	r0, r3
 8307 2bc2 FFF7FEFF 		bl	__aeabi_f2d
 8308 2bc6 0446     		mov	r4, r0
 8309 2bc8 0D46     		mov	r5, r1
 8310 2bca 40F20003 		movw	r3, #:lower16:aacc
 8311 2bce C0F20003 		movt	r3, #:upper16:aacc
 8312 2bd2 1B8A     		ldrh	r3, [r3, #16]
 8313 2bd4 1BB2     		sxth	r3, r3
 8314 2bd6 0093     		str	r3, [sp, #0]
 8315 2bd8 40F20000 		movw	r0, #:lower16:.LC396
 8316 2bdc C0F20000 		movt	r0, #:upper16:.LC396
 8317 2be0 2246     		mov	r2, r4
 8318 2be2 2B46     		mov	r3, r5
 8319 2be4 FFF7FEFF 		bl	printf
2135:.\console.c   **** 					printf(" z=%+1.4f[g] (%5i)", (float) aacc.z_axis.acceleration_lpf, (int16)aacc.z_axis.ADC);
 8320              		.loc 1 2135 0
 8321 2be8 40F20003 		movw	r3, #:lower16:aacc
 8322 2bec C0F20003 		movt	r3, #:upper16:aacc
 8323 2bf0 DB6A     		ldr	r3, [r3, #44]	@ float
 8324 2bf2 1846     		mov	r0, r3
 8325 2bf4 FFF7FEFF 		bl	__aeabi_f2d
 8326 2bf8 0446     		mov	r4, r0
 8327 2bfa 0D46     		mov	r5, r1
 8328 2bfc 40F20003 		movw	r3, #:lower16:aacc
 8329 2c00 C0F20003 		movt	r3, #:upper16:aacc
 8330 2c04 1B8C     		ldrh	r3, [r3, #32]
 8331 2c06 1BB2     		sxth	r3, r3
 8332 2c08 0093     		str	r3, [sp, #0]
 8333 2c0a 40F20000 		movw	r0, #:lower16:.LC397
 8334 2c0e C0F20000 		movt	r0, #:upper16:.LC397
 8335 2c12 2246     		mov	r2, r4
 8336 2c14 2B46     		mov	r3, r5
 8337 2c16 FFF7FEFF 		bl	printf
2136:.\console.c   **** 					printf(" modulo=%+1.4f[g]", (float) aacc.modulo);					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 235


 8338              		.loc 1 2136 0
 8339 2c1a 40F20003 		movw	r3, #:lower16:aacc
 8340 2c1e C0F20003 		movt	r3, #:upper16:aacc
 8341 2c22 5B6B     		ldr	r3, [r3, #52]	@ float
 8342 2c24 1846     		mov	r0, r3
 8343 2c26 FFF7FEFF 		bl	__aeabi_f2d
 8344 2c2a 0246     		mov	r2, r0
 8345 2c2c 0B46     		mov	r3, r1
 8346 2c2e 40F20000 		movw	r0, #:lower16:.LC398
 8347 2c32 C0F20000 		movt	r0, #:upper16:.LC398
 8348 2c36 FFF7FEFF 		bl	printf
2137:.\console.c   **** 					printf(" sdyn=%+1.4f[g^2]", (float) aacc.system_dynamic_scalar);
 8349              		.loc 1 2137 0
 8350 2c3a 40F20003 		movw	r3, #:lower16:aacc
 8351 2c3e C0F20003 		movt	r3, #:upper16:aacc
 8352 2c42 9B6B     		ldr	r3, [r3, #56]	@ float
 8353 2c44 1846     		mov	r0, r3
 8354 2c46 FFF7FEFF 		bl	__aeabi_f2d
 8355 2c4a 0246     		mov	r2, r0
 8356 2c4c 0B46     		mov	r3, r1
 8357 2c4e 40F20000 		movw	r0, #:lower16:.LC399
 8358 2c52 C0F20000 		movt	r0, #:upper16:.LC399
 8359 2c56 FFF7FEFF 		bl	printf
2138:.\console.c   **** 
2139:.\console.c   **** 					printf("\r\n");	
 8360              		.loc 1 2139 0
 8361 2c5a 40F20000 		movw	r0, #:lower16:.LC42
 8362 2c5e C0F20000 		movt	r0, #:upper16:.LC42
 8363 2c62 FFF7FEFF 		bl	puts
2140:.\console.c   **** 					CyDelay(50);
 8364              		.loc 1 2140 0
 8365 2c66 4FF03200 		mov	r0, #50
 8366 2c6a FFF7FEFF 		bl	CyDelay
 8367 2c6e 00E0     		b	.L284
 8368              	.L702:
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8369              		.loc 1 2131 0
 8370 2c70 00BF     		nop
 8371              	.L284:
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8372              		.loc 1 2131 0 is_stmt 0 discriminator 1
 8373 2c72 FFF7FEFF 		bl	AnyButtonPressed
 8374 2c76 0346     		mov	r3, r0
 8375 2c78 002B     		cmp	r3, #0
 8376 2c7a 83D0     		beq	.L285
2141:.\console.c   **** 				}
2142:.\console.c   **** 				goto exitpars;	
 8377              		.loc 1 2142 0 is_stmt 1
 8378 2c7c 04F02ABC 		b	.L131
 8379              	.L283:
2143:.\console.c   **** 			}
2144:.\console.c   **** 			// SHOW ANALOG 3D ACCELEROMETER END
2145:.\console.c   **** 
2146:.\console.c   **** 			
2147:.\console.c   **** 			// SHOW ESTIMATED EVENTS
2148:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "events") == 0)	
 8380              		.loc 1 2148 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 236


 8381 2c80 4348     		ldr	r0, .L739
 8382 2c82 40F20001 		movw	r1, #:lower16:.LC400
 8383 2c86 C0F20001 		movt	r1, #:upper16:.LC400
 8384 2c8a FFF7FEFF 		bl	strcmp
 8385 2c8e 0346     		mov	r3, r0
 8386 2c90 002B     		cmp	r3, #0
 8387 2c92 69D0     		beq	.L703
2149:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "event") == 0)
 8388              		.loc 1 2149 0
 8389 2c94 3E48     		ldr	r0, .L739
 8390 2c96 40F20001 		movw	r1, #:lower16:.LC401
 8391 2c9a C0F20001 		movt	r1, #:upper16:.LC401
 8392 2c9e FFF7FEFF 		bl	strcmp
 8393 2ca2 0346     		mov	r3, r0
 8394 2ca4 002B     		cmp	r3, #0
 8395 2ca6 5FD0     		beq	.L703
2150:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "mapsm") == 0))			
 8396              		.loc 1 2150 0
 8397 2ca8 3948     		ldr	r0, .L739
 8398 2caa 40F20001 		movw	r1, #:lower16:.LC402
 8399 2cae C0F20001 		movt	r1, #:upper16:.LC402
 8400 2cb2 FFF7FEFF 		bl	strcmp
 8401 2cb6 0346     		mov	r3, r0
 8402 2cb8 002B     		cmp	r3, #0
 8403 2cba 5DD1     		bne	.L287
2151:.\console.c   **** 			{
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8404              		.loc 1 2152 0
 8405 2cbc 54E0     		b	.L703
 8406              	.L289:
2153:.\console.c   **** 				{
2154:.\console.c   **** 					printf("Events");
 8407              		.loc 1 2154 0
 8408 2cbe 40F20000 		movw	r0, #:lower16:.LC403
 8409 2cc2 C0F20000 		movt	r0, #:upper16:.LC403
 8410 2cc6 FFF7FEFF 		bl	printf
2155:.\console.c   **** 					printf(" on_origin_ticks=%ld", (uint32)events.timecode.on_origin_ticks);					
 8411              		.loc 1 2155 0
 8412 2cca 40F20003 		movw	r3, #:lower16:events
 8413 2cce C0F20003 		movt	r3, #:upper16:events
 8414 2cd2 DB68     		ldr	r3, [r3, #12]
 8415 2cd4 40F20000 		movw	r0, #:lower16:.LC404
 8416 2cd8 C0F20000 		movt	r0, #:upper16:.LC404
 8417 2cdc 1946     		mov	r1, r3
 8418 2cde FFF7FEFF 		bl	printf
2156:.\console.c   **** 					printf(" angle_tilt=%2i", (uint16)events.inertial.tilt_angle);
 8419              		.loc 1 2156 0
 8420 2ce2 40F20003 		movw	r3, #:lower16:events
 8421 2ce6 C0F20003 		movt	r3, #:upper16:events
 8422 2cea 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 8423 2cec 40F20000 		movw	r0, #:lower16:.LC405
 8424 2cf0 C0F20000 		movt	r0, #:upper16:.LC405
 8425 2cf4 1946     		mov	r1, r3
 8426 2cf6 FFF7FEFF 		bl	printf
2157:.\console.c   **** 					printf(" vibration=%2i", (uint16)events.inertial.vibration);	
 8427              		.loc 1 2157 0
 8428 2cfa 40F20003 		movw	r3, #:lower16:events
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 237


 8429 2cfe C0F20003 		movt	r3, #:upper16:events
 8430 2d02 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8431 2d04 40F20000 		movw	r0, #:lower16:.LC406
 8432 2d08 C0F20000 		movt	r0, #:upper16:.LC406
 8433 2d0c 1946     		mov	r1, r3
 8434 2d0e FFF7FEFF 		bl	printf
2158:.\console.c   **** 					printf(" jump=%2i", (uint16)events.inertial.jump);						
 8435              		.loc 1 2158 0
 8436 2d12 40F20003 		movw	r3, #:lower16:events
 8437 2d16 C0F20003 		movt	r3, #:upper16:events
 8438 2d1a 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 8439 2d1c 40F20000 		movw	r0, #:lower16:.LC407
 8440 2d20 C0F20000 		movt	r0, #:upper16:.LC407
 8441 2d24 1946     		mov	r1, r3
 8442 2d26 FFF7FEFF 		bl	printf
2159:.\console.c   **** 					printf(" sm=%3i ", (uint16)events.mapping_sm_status);
 8443              		.loc 1 2159 0
 8444 2d2a 40F20003 		movw	r3, #:lower16:events
 8445 2d2e C0F20003 		movt	r3, #:upper16:events
 8446 2d32 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8447 2d34 40F20000 		movw	r0, #:lower16:.LC408
 8448 2d38 C0F20000 		movt	r0, #:upper16:.LC408
 8449 2d3c 1946     		mov	r1, r3
 8450 2d3e FFF7FEFF 		bl	printf
2160:.\console.c   **** 					ShowStatusMappingSM(events.mapping_sm_status);
 8451              		.loc 1 2160 0
 8452 2d42 40F20003 		movw	r3, #:lower16:events
 8453 2d46 C0F20003 		movt	r3, #:upper16:events
 8454 2d4a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8455 2d4c 1846     		mov	r0, r3
 8456 2d4e FFF7FEFF 		bl	ShowStatusMappingSM
2161:.\console.c   **** 					printf("\r\n");	
 8457              		.loc 1 2161 0
 8458 2d52 40F20000 		movw	r0, #:lower16:.LC42
 8459 2d56 C0F20000 		movt	r0, #:upper16:.LC42
 8460 2d5a FFF7FEFF 		bl	puts
2162:.\console.c   **** 					CyDelay(50);
 8461              		.loc 1 2162 0
 8462 2d5e 4FF03200 		mov	r0, #50
 8463 2d62 FFF7FEFF 		bl	CyDelay
 8464 2d66 00E0     		b	.L288
 8465              	.L703:
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8466              		.loc 1 2152 0
 8467 2d68 00BF     		nop
 8468              	.L288:
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8469              		.loc 1 2152 0 is_stmt 0 discriminator 1
 8470 2d6a FFF7FEFF 		bl	AnyButtonPressed
 8471 2d6e 0346     		mov	r3, r0
 8472 2d70 002B     		cmp	r3, #0
 8473 2d72 A4D0     		beq	.L289
2163:.\console.c   **** 				}
2164:.\console.c   **** 				goto exitpars;	
 8474              		.loc 1 2164 0 is_stmt 1
 8475 2d74 04F0AEBB 		b	.L131
 8476              	.L287:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 238


2165:.\console.c   **** 			}
2166:.\console.c   **** 			// SHOW ESTIMATED EVENTS END			
2167:.\console.c   **** 
2168:.\console.c   **** 			
2169:.\console.c   **** 			// SHOW CLU STATE MACHINE
2170:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "clusm") == 0)
 8477              		.loc 1 2170 0
 8478 2d78 0548     		ldr	r0, .L739
 8479 2d7a 40F20001 		movw	r1, #:lower16:.LC409
 8480 2d7e C0F20001 		movt	r1, #:upper16:.LC409
 8481 2d82 FFF7FEFF 		bl	strcmp
 8482 2d86 0346     		mov	r3, r0
 8483 2d88 002B     		cmp	r3, #0
 8484 2d8a 52D1     		bne	.L290
2171:.\console.c   **** 			{
2172:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8485              		.loc 1 2172 0
 8486 2d8c 4AE0     		b	.L291
 8487              	.L740:
 8488 2d8e 00BF     		.align	2
 8489              	.L739:
 8490 2d90 0F000000 		.word	actual_cmd+15
 8491              	.L292:
2173:.\console.c   **** 				{
2174:.\console.c   **** 					printf("CLU SM: ");					
 8492              		.loc 1 2174 0
 8493 2d94 40F20000 		movw	r0, #:lower16:.LC410
 8494 2d98 C0F20000 		movt	r0, #:upper16:.LC410
 8495 2d9c FFF7FEFF 		bl	printf
2175:.\console.c   **** 					printf(" number=%3i", (uint16)clu_sm.clunumber);
 8496              		.loc 1 2175 0
 8497 2da0 40F20003 		movw	r3, #:lower16:clu_sm
 8498 2da4 C0F20003 		movt	r3, #:upper16:clu_sm
 8499 2da8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 8500 2daa 40F20000 		movw	r0, #:lower16:.LC411
 8501 2dae C0F20000 		movt	r0, #:upper16:.LC411
 8502 2db2 1946     		mov	r1, r3
 8503 2db4 FFF7FEFF 		bl	printf
2176:.\console.c   **** 					printf(" line=%3i", (uint16)clu_sm.cluline);
 8504              		.loc 1 2176 0
 8505 2db8 40F20003 		movw	r3, #:lower16:clu_sm
 8506 2dbc C0F20003 		movt	r3, #:upper16:clu_sm
 8507 2dc0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 8508 2dc2 40F20000 		movw	r0, #:lower16:.LC412
 8509 2dc6 C0F20000 		movt	r0, #:upper16:.LC412
 8510 2dca 1946     		mov	r1, r3
 8511 2dcc FFF7FEFF 		bl	printf
2177:.\console.c   **** 					printf(" pauseticks=%3i", (uint16)clu_sm.pauseticks);					
 8512              		.loc 1 2177 0
 8513 2dd0 40F20003 		movw	r3, #:lower16:clu_sm
 8514 2dd4 C0F20003 		movt	r3, #:upper16:clu_sm
 8515 2dd8 9B88     		ldrh	r3, [r3, #4]
 8516 2dda 40F20000 		movw	r0, #:lower16:.LC413
 8517 2dde C0F20000 		movt	r0, #:upper16:.LC413
 8518 2de2 1946     		mov	r1, r3
 8519 2de4 FFF7FEFF 		bl	printf
2178:.\console.c   **** 					printf(" status=%3i ", (uint16)clu_sm.status);	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 239


 8520              		.loc 1 2178 0
 8521 2de8 40F20003 		movw	r3, #:lower16:clu_sm
 8522 2dec C0F20003 		movt	r3, #:upper16:clu_sm
 8523 2df0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8524 2df2 40F20000 		movw	r0, #:lower16:.LC414
 8525 2df6 C0F20000 		movt	r0, #:upper16:.LC414
 8526 2dfa 1946     		mov	r1, r3
 8527 2dfc FFF7FEFF 		bl	printf
2179:.\console.c   **** 					ShowCLUSM(clu_sm.status);					
 8528              		.loc 1 2179 0
 8529 2e00 40F20003 		movw	r3, #:lower16:clu_sm
 8530 2e04 C0F20003 		movt	r3, #:upper16:clu_sm
 8531 2e08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8532 2e0a 1846     		mov	r0, r3
 8533 2e0c FFF7FEFF 		bl	ShowCLUSM
2180:.\console.c   **** 					printf("\r\n");	
 8534              		.loc 1 2180 0
 8535 2e10 40F20000 		movw	r0, #:lower16:.LC42
 8536 2e14 C0F20000 		movt	r0, #:upper16:.LC42
 8537 2e18 FFF7FEFF 		bl	puts
2181:.\console.c   **** 					CyDelay(50);
 8538              		.loc 1 2181 0
 8539 2e1c 4FF03200 		mov	r0, #50
 8540 2e20 FFF7FEFF 		bl	CyDelay
 8541              	.L291:
2172:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8542              		.loc 1 2172 0 discriminator 1
 8543 2e24 FFF7FEFF 		bl	AnyButtonPressed
 8544 2e28 0346     		mov	r3, r0
 8545 2e2a 002B     		cmp	r3, #0
 8546 2e2c B2D0     		beq	.L292
2182:.\console.c   **** 				}
2183:.\console.c   **** 				goto exitpars;	
 8547              		.loc 1 2183 0
 8548 2e2e 04F051BB 		b	.L131
 8549              	.L290:
2184:.\console.c   **** 			}
2185:.\console.c   **** 			// SHOW CLU STATE MACHINE END
2186:.\console.c   **** 			
2187:.\console.c   **** 			
2188:.\console.c   **** 			// SHOW BUTTONS
2189:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "buttons") == 0)	
 8550              		.loc 1 2189 0
 8551 2e32 C848     		ldr	r0, .L741
 8552 2e34 40F20001 		movw	r1, #:lower16:.LC415
 8553 2e38 C0F20001 		movt	r1, #:upper16:.LC415
 8554 2e3c FFF7FEFF 		bl	strcmp
 8555 2e40 0346     		mov	r3, r0
 8556 2e42 002B     		cmp	r3, #0
 8557 2e44 42D0     		beq	.L704
2190:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "but") == 0))
 8558              		.loc 1 2190 0
 8559 2e46 C348     		ldr	r0, .L741
 8560 2e48 40F20001 		movw	r1, #:lower16:.LC416
 8561 2e4c C0F20001 		movt	r1, #:upper16:.LC416
 8562 2e50 FFF7FEFF 		bl	strcmp
 8563 2e54 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 240


 8564 2e56 002B     		cmp	r3, #0
 8565 2e58 40D1     		bne	.L294
2191:.\console.c   **** 			{
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8566              		.loc 1 2192 0
 8567 2e5a 37E0     		b	.L704
 8568              	.L299:
2193:.\console.c   **** 				{
2194:.\console.c   **** 					printf("BUTTONS = %3i", (uint16)Status_Reg_BUTTON_Read());
 8569              		.loc 1 2194 0
 8570 2e5c FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8571 2e60 0346     		mov	r3, r0
 8572 2e62 40F20000 		movw	r0, #:lower16:.LC417
 8573 2e66 C0F20000 		movt	r0, #:upper16:.LC417
 8574 2e6a 1946     		mov	r1, r3
 8575 2e6c FFF7FEFF 		bl	printf
2195:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_ON)
 8576              		.loc 1 2195 0
 8577 2e70 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8578 2e74 0346     		mov	r3, r0
 8579 2e76 012B     		cmp	r3, #1
 8580 2e78 06D1     		bne	.L296
2196:.\console.c   **** 					{
2197:.\console.c   **** 						printf(" (ON)");
 8581              		.loc 1 2197 0
 8582 2e7a 40F20000 		movw	r0, #:lower16:.LC418
 8583 2e7e C0F20000 		movt	r0, #:upper16:.LC418
 8584 2e82 FFF7FEFF 		bl	printf
 8585 2e86 16E0     		b	.L297
 8586              	.L296:
2198:.\console.c   **** 					}
2199:.\console.c   **** 					else
2200:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_CW)					
 8587              		.loc 1 2200 0
 8588 2e88 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8589 2e8c 0346     		mov	r3, r0
 8590 2e8e 022B     		cmp	r3, #2
 8591 2e90 06D1     		bne	.L298
2201:.\console.c   **** 					{
2202:.\console.c   **** 						printf(" (CW)");
 8592              		.loc 1 2202 0
 8593 2e92 40F20000 		movw	r0, #:lower16:.LC419
 8594 2e96 C0F20000 		movt	r0, #:upper16:.LC419
 8595 2e9a FFF7FEFF 		bl	printf
 8596 2e9e 0AE0     		b	.L297
 8597              	.L298:
2203:.\console.c   **** 					}
2204:.\console.c   **** 					else
2205:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_CCW)					
 8598              		.loc 1 2205 0
 8599 2ea0 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8600 2ea4 0346     		mov	r3, r0
 8601 2ea6 042B     		cmp	r3, #4
 8602 2ea8 05D1     		bne	.L297
2206:.\console.c   **** 					{
2207:.\console.c   **** 						printf(" (CCW)");
 8603              		.loc 1 2207 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 241


 8604 2eaa 40F20000 		movw	r0, #:lower16:.LC420
 8605 2eae C0F20000 		movt	r0, #:upper16:.LC420
 8606 2eb2 FFF7FEFF 		bl	printf
 8607              	.L297:
2208:.\console.c   **** 					}	
2209:.\console.c   **** 					printf("\r\n");	
 8608              		.loc 1 2209 0
 8609 2eb6 40F20000 		movw	r0, #:lower16:.LC42
 8610 2eba C0F20000 		movt	r0, #:upper16:.LC42
 8611 2ebe FFF7FEFF 		bl	puts
2210:.\console.c   **** 					CyDelay(50);
 8612              		.loc 1 2210 0
 8613 2ec2 4FF03200 		mov	r0, #50
 8614 2ec6 FFF7FEFF 		bl	CyDelay
 8615 2eca 00E0     		b	.L295
 8616              	.L704:
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8617              		.loc 1 2192 0
 8618 2ecc 00BF     		nop
 8619              	.L295:
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8620              		.loc 1 2192 0 is_stmt 0 discriminator 1
 8621 2ece FFF7FEFF 		bl	AnyButtonPressed
 8622 2ed2 0346     		mov	r3, r0
 8623 2ed4 002B     		cmp	r3, #0
 8624 2ed6 C1D0     		beq	.L299
2211:.\console.c   **** 				}
2212:.\console.c   **** 				goto exitpars;	
 8625              		.loc 1 2212 0 is_stmt 1
 8626 2ed8 04F0FCBA 		b	.L131
 8627              	.L294:
2213:.\console.c   **** 			}
2214:.\console.c   **** 			// SHOW BUTTONS END
2215:.\console.c   **** 
2216:.\console.c   **** 
2217:.\console.c   **** 			// SHOW SYSDYN (SYSTEM DYNAMIC ACCELERATION SCALAR)
2218:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "sysdyn") == 0)	
 8628              		.loc 1 2218 0
 8629 2edc 9D48     		ldr	r0, .L741
 8630 2ede 40F20001 		movw	r1, #:lower16:.LC421
 8631 2ee2 C0F20001 		movt	r1, #:upper16:.LC421
 8632 2ee6 FFF7FEFF 		bl	strcmp
 8633 2eea 0346     		mov	r3, r0
 8634 2eec 002B     		cmp	r3, #0
 8635 2eee 25D0     		beq	.L705
2219:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "sdyn") == 0))
 8636              		.loc 1 2219 0
 8637 2ef0 9848     		ldr	r0, .L741
 8638 2ef2 40F20001 		movw	r1, #:lower16:.LC422
 8639 2ef6 C0F20001 		movt	r1, #:upper16:.LC422
 8640 2efa FFF7FEFF 		bl	strcmp
 8641 2efe 0346     		mov	r3, r0
 8642 2f00 002B     		cmp	r3, #0
 8643 2f02 23D1     		bne	.L301
2220:.\console.c   **** 			{
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8644              		.loc 1 2221 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 242


 8645 2f04 1AE0     		b	.L705
 8646              	.L303:
2222:.\console.c   **** 				{
2223:.\console.c   **** 					printf("System Dynamic Scalar=%1.8f  [xacc_ADC^2+yacc_ADC^2-(1g_ADC)^2]", (float)aacc.system_d
 8647              		.loc 1 2223 0
 8648 2f06 40F20003 		movw	r3, #:lower16:aacc
 8649 2f0a C0F20003 		movt	r3, #:upper16:aacc
 8650 2f0e 9B6B     		ldr	r3, [r3, #56]	@ float
 8651 2f10 1846     		mov	r0, r3
 8652 2f12 FFF7FEFF 		bl	__aeabi_f2d
 8653 2f16 0246     		mov	r2, r0
 8654 2f18 0B46     		mov	r3, r1
 8655 2f1a 40F20000 		movw	r0, #:lower16:.LC423
 8656 2f1e C0F20000 		movt	r0, #:upper16:.LC423
 8657 2f22 FFF7FEFF 		bl	printf
2224:.\console.c   **** 					printf("\r\n");	
 8658              		.loc 1 2224 0
 8659 2f26 40F20000 		movw	r0, #:lower16:.LC42
 8660 2f2a C0F20000 		movt	r0, #:upper16:.LC42
 8661 2f2e FFF7FEFF 		bl	puts
2225:.\console.c   **** 					CyDelay(50);
 8662              		.loc 1 2225 0
 8663 2f32 4FF03200 		mov	r0, #50
 8664 2f36 FFF7FEFF 		bl	CyDelay
 8665 2f3a 00E0     		b	.L302
 8666              	.L705:
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8667              		.loc 1 2221 0
 8668 2f3c 00BF     		nop
 8669              	.L302:
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8670              		.loc 1 2221 0 is_stmt 0 discriminator 1
 8671 2f3e FFF7FEFF 		bl	AnyButtonPressed
 8672 2f42 0346     		mov	r3, r0
 8673 2f44 002B     		cmp	r3, #0
 8674 2f46 DED0     		beq	.L303
2226:.\console.c   **** 				}
2227:.\console.c   **** 				goto exitpars;	
 8675              		.loc 1 2227 0 is_stmt 1
 8676 2f48 04F0C4BA 		b	.L131
 8677              	.L301:
2228:.\console.c   **** 			}
2229:.\console.c   **** 			// END SHOW SYSDYN (SYSTEM DYNAMIC ACCELERATION SCALAR)
2230:.\console.c   **** 
2231:.\console.c   **** 			
2232:.\console.c   **** 			// SHOW RELATIVE AND ABSOLUTE POSITION
2233:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "position") == 0)	
 8678              		.loc 1 2233 0
 8679 2f4c 8148     		ldr	r0, .L741
 8680 2f4e 40F20001 		movw	r1, #:lower16:.LC424
 8681 2f52 C0F20001 		movt	r1, #:upper16:.LC424
 8682 2f56 FFF7FEFF 		bl	strcmp
 8683 2f5a 0346     		mov	r3, r0
 8684 2f5c 002B     		cmp	r3, #0
 8685 2f5e 6DD0     		beq	.L706
2234:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "pos") == 0))
 8686              		.loc 1 2234 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 243


 8687 2f60 7C48     		ldr	r0, .L741
 8688 2f62 40F20001 		movw	r1, #:lower16:.LC425
 8689 2f66 C0F20001 		movt	r1, #:upper16:.LC425
 8690 2f6a FFF7FEFF 		bl	strcmp
 8691 2f6e 0346     		mov	r3, r0
 8692 2f70 002B     		cmp	r3, #0
 8693 2f72 6BD1     		bne	.L305
2235:.\console.c   **** 			{
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8694              		.loc 1 2236 0
 8695 2f74 62E0     		b	.L706
 8696              	.L307:
2237:.\console.c   **** 				{
2238:.\console.c   **** 					printf("PAN: enc(t)=%+ld [step]", (int32)pan_axis.mc.slave_enc.position);
 8697              		.loc 1 2238 0
 8698 2f76 40F20003 		movw	r3, #:lower16:pan_axis
 8699 2f7a C0F20003 		movt	r3, #:upper16:pan_axis
 8700 2f7e 5B6C     		ldr	r3, [r3, #68]
 8701 2f80 40F20000 		movw	r0, #:lower16:.LC109
 8702 2f84 C0F20000 		movt	r0, #:upper16:.LC109
 8703 2f88 1946     		mov	r1, r3
 8704 2f8a FFF7FEFF 		bl	printf
2239:.\console.c   **** 					printf(" abs_pos(t)=%+ld [step]", (int32)pan_absolute_sensor.position);
 8705              		.loc 1 2239 0
 8706 2f8e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 8707 2f92 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 8708 2f96 5B68     		ldr	r3, [r3, #4]	@ float
 8709 2f98 1846     		mov	r0, r3
 8710 2f9a FFF7FEFF 		bl	__aeabi_f2iz
 8711 2f9e 0346     		mov	r3, r0
 8712 2fa0 40F20000 		movw	r0, #:lower16:.LC426
 8713 2fa4 C0F20000 		movt	r0, #:upper16:.LC426
 8714 2fa8 1946     		mov	r1, r3
 8715 2faa FFF7FEFF 		bl	printf
2240:.\console.c   **** 					printf(" (%+3.2f [rad])", (float)pan_absolute_sensor.angle_rad);
 8716              		.loc 1 2240 0
 8717 2fae 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 8718 2fb2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 8719 2fb6 1B69     		ldr	r3, [r3, #16]	@ float
 8720 2fb8 1846     		mov	r0, r3
 8721 2fba FFF7FEFF 		bl	__aeabi_f2d
 8722 2fbe 0246     		mov	r2, r0
 8723 2fc0 0B46     		mov	r3, r1
 8724 2fc2 40F20000 		movw	r0, #:lower16:.LC427
 8725 2fc6 C0F20000 		movt	r0, #:upper16:.LC427
 8726 2fca FFF7FEFF 		bl	printf
2241:.\console.c   **** 					printf("    TILT: enc(t)=%+ld [step]", (int32)tilt_axis.mc.slave_enc.position);
 8727              		.loc 1 2241 0
 8728 2fce 40F20003 		movw	r3, #:lower16:tilt_axis
 8729 2fd2 C0F20003 		movt	r3, #:upper16:tilt_axis
 8730 2fd6 5B6C     		ldr	r3, [r3, #68]
 8731 2fd8 40F20000 		movw	r0, #:lower16:.LC428
 8732 2fdc C0F20000 		movt	r0, #:upper16:.LC428
 8733 2fe0 1946     		mov	r1, r3
 8734 2fe2 FFF7FEFF 		bl	printf
2242:.\console.c   **** 					printf(" abs_pos(t)=%+ld [step]", (int32)tilt_absolute_sensor.position);					
 8735              		.loc 1 2242 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 244


 8736 2fe6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 8737 2fea C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 8738 2fee 5B68     		ldr	r3, [r3, #4]	@ float
 8739 2ff0 1846     		mov	r0, r3
 8740 2ff2 FFF7FEFF 		bl	__aeabi_f2iz
 8741 2ff6 0346     		mov	r3, r0
 8742 2ff8 40F20000 		movw	r0, #:lower16:.LC426
 8743 2ffc C0F20000 		movt	r0, #:upper16:.LC426
 8744 3000 1946     		mov	r1, r3
 8745 3002 FFF7FEFF 		bl	printf
2243:.\console.c   **** 					printf(" (%+3.2f [rad])", (float)tilt_absolute_sensor.angle_rad);
 8746              		.loc 1 2243 0
 8747 3006 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 8748 300a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 8749 300e 1B69     		ldr	r3, [r3, #16]	@ float
 8750 3010 1846     		mov	r0, r3
 8751 3012 FFF7FEFF 		bl	__aeabi_f2d
 8752 3016 0246     		mov	r2, r0
 8753 3018 0B46     		mov	r3, r1
 8754 301a 40F20000 		movw	r0, #:lower16:.LC427
 8755 301e C0F20000 		movt	r0, #:upper16:.LC427
 8756 3022 FFF7FEFF 		bl	printf
2244:.\console.c   **** 					printf("\r\n");	
 8757              		.loc 1 2244 0
 8758 3026 40F20000 		movw	r0, #:lower16:.LC42
 8759 302a C0F20000 		movt	r0, #:upper16:.LC42
 8760 302e FFF7FEFF 		bl	puts
2245:.\console.c   **** 					CyDelay(50);
 8761              		.loc 1 2245 0
 8762 3032 4FF03200 		mov	r0, #50
 8763 3036 FFF7FEFF 		bl	CyDelay
 8764 303a 00E0     		b	.L306
 8765              	.L706:
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8766              		.loc 1 2236 0
 8767 303c 00BF     		nop
 8768              	.L306:
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8769              		.loc 1 2236 0 is_stmt 0 discriminator 1
 8770 303e FFF7FEFF 		bl	AnyButtonPressed
 8771 3042 0346     		mov	r3, r0
 8772 3044 002B     		cmp	r3, #0
 8773 3046 96D0     		beq	.L307
2246:.\console.c   **** 				}
2247:.\console.c   **** 				goto exitpars;	
 8774              		.loc 1 2247 0 is_stmt 1
 8775 3048 04F044BA 		b	.L131
 8776              	.L305:
2248:.\console.c   **** 			}
2249:.\console.c   **** 			// END SHOW RELATIVE AND ABSOLUTE POSITION
2250:.\console.c   **** 
2251:.\console.c   **** 			
2252:.\console.c   **** 			// SHOW ENCODERS FEEDBACK
2253:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "encfbk") == 0)	
 8777              		.loc 1 2253 0
 8778 304c 4148     		ldr	r0, .L741
 8779 304e 40F20001 		movw	r1, #:lower16:.LC429
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 245


 8780 3052 C0F20001 		movt	r1, #:upper16:.LC429
 8781 3056 FFF7FEFF 		bl	strcmp
 8782 305a 0346     		mov	r3, r0
 8783 305c 002B     		cmp	r3, #0
 8784 305e 09D0     		beq	.L308
2254:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "encf") == 0))
 8785              		.loc 1 2254 0
 8786 3060 3C48     		ldr	r0, .L741
 8787 3062 40F20001 		movw	r1, #:lower16:.LC430
 8788 3066 C0F20001 		movt	r1, #:upper16:.LC430
 8789 306a FFF7FEFF 		bl	strcmp
 8790 306e 0346     		mov	r3, r0
 8791 3070 002B     		cmp	r3, #0
 8792 3072 42D1     		bne	.L309
 8793              	.L308:
2255:.\console.c   **** 			{
2256:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 8794              		.loc 1 2256 0
 8795 3074 40F20000 		movw	r0, #:lower16:.LC431
 8796 3078 C0F20000 		movt	r0, #:upper16:.LC431
 8797 307c FFF7FEFF 		bl	puts
2257:.\console.c   **** 				printf(STR_SHOWENCFB);			//
 8798              		.loc 1 2257 0
 8799 3080 40F20000 		movw	r0, #:lower16:.LC432
 8800 3084 C0F20000 		movt	r0, #:upper16:.LC432
 8801 3088 FFF7FEFF 		bl	printf
2258:.\console.c   **** 			
2259:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 8802              		.loc 1 2259 0
 8803 308c 4FF00100 		mov	r0, #1
 8804 3090 FFF7FEFF 		bl	ButtonYNChoice
 8805 3094 0346     		mov	r3, r0
 8806 3096 012B     		cmp	r3, #1
 8807 3098 44F01182 		bne	.L707
2260:.\console.c   **** 				{
2261:.\console.c   **** 					isr_CTRL_Stop();				/* Stop Control ISR					*/
 8808              		.loc 1 2261 0
 8809 309c FFF7FEFF 		bl	isr_CTRL_Stop
2262:.\console.c   **** 
2263:.\console.c   **** 					PWM_MOTOR_PAN_WriteCompare(MOTOR_PWM_PERIOD_HALF);
 8810              		.loc 1 2263 0
 8811 30a0 4FF40070 		mov	r0, #512
 8812 30a4 FFF7FEFF 		bl	PWM_MOTOR_PAN_WriteCompare
2264:.\console.c   **** 					PWM_MOTOR_TILT_WriteCompare(MOTOR_PWM_PERIOD_HALF);
 8813              		.loc 1 2264 0
 8814 30a8 4FF40070 		mov	r0, #512
 8815 30ac FFF7FEFF 		bl	PWM_MOTOR_TILT_WriteCompare
2265:.\console.c   **** 					
2266:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 8816              		.loc 1 2266 0
 8817 30b0 18E0     		b	.L311
 8818              	.L313:
2267:.\console.c   **** 					{
2268:.\console.c   **** 						printf("PAN_FBK=%8ld", (int32)QuadDec_PAN_GetCounter());
 8819              		.loc 1 2268 0
 8820 30b2 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 8821 30b6 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 246


 8822 30b8 40F20000 		movw	r0, #:lower16:.LC433
 8823 30bc C0F20000 		movt	r0, #:upper16:.LC433
 8824 30c0 1946     		mov	r1, r3
 8825 30c2 FFF7FEFF 		bl	printf
2269:.\console.c   **** 						printf("  TILT_FBK=%8ld\r\n", (int32)QuadDec_TILT_GetCounter());
 8826              		.loc 1 2269 0
 8827 30c6 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 8828 30ca 0346     		mov	r3, r0
 8829 30cc 40F20000 		movw	r0, #:lower16:.LC434
 8830 30d0 C0F20000 		movt	r0, #:upper16:.LC434
 8831 30d4 1946     		mov	r1, r3
 8832 30d6 FFF7FEFF 		bl	printf
2270:.\console.c   **** 						//printf("  ROLL_FBK=%8ld \r\n", (int32)QuadDec_ROLL_GetCounter());							
2271:.\console.c   **** 
2272:.\console.c   **** 						if (AnyButtonPressed() == PRESSED)
 8833              		.loc 1 2272 0
 8834 30da FFF7FEFF 		bl	AnyButtonPressed
 8835 30de 0346     		mov	r3, r0
 8836 30e0 012B     		cmp	r3, #1
 8837 30e2 05D0     		beq	.L708
 8838              	.L311:
2266:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 8839              		.loc 1 2266 0 discriminator 1
 8840 30e4 FFF7FEFF 		bl	AnyButtonPressed
 8841 30e8 0346     		mov	r3, r0
 8842 30ea 002B     		cmp	r3, #0
 8843 30ec E1D0     		beq	.L313
 8844 30ee 00E0     		b	.L312
 8845              	.L708:
2273:.\console.c   **** 							goto exit_showencf;
 8846              		.loc 1 2273 0
 8847 30f0 00BF     		nop
 8848              	.L312:
2274:.\console.c   **** 					}
2275:.\console.c   **** exit_showencf:					
2276:.\console.c   **** 					isr_CTRL_Start();				/* RESTART Control ISR				*/	
 8849              		.loc 1 2276 0
 8850 30f2 FFF7FEFF 		bl	isr_CTRL_Start
2277:.\console.c   **** 				}	
2278:.\console.c   **** 				
2279:.\console.c   **** 				goto exitpars;	
 8851              		.loc 1 2279 0
 8852 30f6 04F0E2B9 		b	.L707
 8853              	.L309:
2280:.\console.c   **** 			}
2281:.\console.c   **** 			// SHOW ENCODERS FEEDBACK END			
2282:.\console.c   **** 			
2283:.\console.c   **** 			
2284:.\console.c   **** 			// SHOW MOTOR STATUS
2285:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "motorstatus") == 0)	
 8854              		.loc 1 2285 0
 8855 30fa 1648     		ldr	r0, .L741
 8856 30fc 40F20001 		movw	r1, #:lower16:.LC435
 8857 3100 C0F20001 		movt	r1, #:upper16:.LC435
 8858 3104 FFF7FEFF 		bl	strcmp
 8859 3108 0346     		mov	r3, r0
 8860 310a 002B     		cmp	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 247


 8861 310c 49D0     		beq	.L709
2286:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "mot") == 0))
 8862              		.loc 1 2286 0
 8863 310e 1148     		ldr	r0, .L741
 8864 3110 40F20001 		movw	r1, #:lower16:.LC436
 8865 3114 C0F20001 		movt	r1, #:upper16:.LC436
 8866 3118 FFF7FEFF 		bl	strcmp
 8867 311c 0346     		mov	r3, r0
 8868 311e 002B     		cmp	r3, #0
 8869 3120 47D1     		bne	.L315
2287:.\console.c   **** 			{
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8870              		.loc 1 2288 0
 8871 3122 3EE0     		b	.L709
 8872              	.L321:
2289:.\console.c   **** 				{
2290:.\console.c   **** 					printf("Motor Status=%2u ", (int16)Status_Reg_MOTORS_Read());
 8873              		.loc 1 2290 0
 8874 3124 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8875 3128 0346     		mov	r3, r0
 8876 312a 40F20000 		movw	r0, #:lower16:.LC437
 8877 312e C0F20000 		movt	r0, #:upper16:.LC437
 8878 3132 1946     		mov	r1, r3
 8879 3134 FFF7FEFF 		bl	printf
2291:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_PAN_MOT_FL) == 0)
 8880              		.loc 1 2291 0
 8881 3138 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8882 313c 0346     		mov	r3, r0
 8883 313e 03F00103 		and	r3, r3, #1
 8884 3142 002B     		cmp	r3, #0
 8885 3144 08D1     		bne	.L317
2292:.\console.c   **** 					{
2293:.\console.c   **** 						printf("PAN CURRENT PEAK!) ");	
 8886              		.loc 1 2293 0
 8887 3146 40F20000 		movw	r0, #:lower16:.LC438
 8888 314a C0F20000 		movt	r0, #:upper16:.LC438
 8889 314e FFF7FEFF 		bl	printf
 8890 3152 07E0     		b	.L318
 8891              	.L742:
 8892              		.align	2
 8893              	.L741:
 8894 3154 0F000000 		.word	actual_cmd+15
 8895              	.L317:
2294:.\console.c   **** 					}
2295:.\console.c   **** 					else
2296:.\console.c   **** 					{
2297:.\console.c   **** 						printf("(PAN CURRENT OK!)  ");						
 8896              		.loc 1 2297 0
 8897 3158 40F20000 		movw	r0, #:lower16:.LC439
 8898 315c C0F20000 		movt	r0, #:upper16:.LC439
 8899 3160 FFF7FEFF 		bl	printf
 8900              	.L318:
2298:.\console.c   **** 					}
2299:.\console.c   **** 					
2300:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_TILT_MOT_FL) == 0)
 8901              		.loc 1 2300 0
 8902 3164 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 248


 8903 3168 0346     		mov	r3, r0
 8904 316a 03F00203 		and	r3, r3, #2
 8905 316e 002B     		cmp	r3, #0
 8906 3170 06D1     		bne	.L319
2301:.\console.c   **** 					{
2302:.\console.c   **** 						printf("(TILT CURRENT PEAK!)");	
 8907              		.loc 1 2302 0
 8908 3172 40F20000 		movw	r0, #:lower16:.LC440
 8909 3176 C0F20000 		movt	r0, #:upper16:.LC440
 8910 317a FFF7FEFF 		bl	printf
 8911 317e 05E0     		b	.L320
 8912              	.L319:
2303:.\console.c   **** 					}
2304:.\console.c   **** 					else
2305:.\console.c   **** 					{
2306:.\console.c   **** 						printf("(TILT CURRENT OK!)");						
 8913              		.loc 1 2306 0
 8914 3180 40F20000 		movw	r0, #:lower16:.LC441
 8915 3184 C0F20000 		movt	r0, #:upper16:.LC441
 8916 3188 FFF7FEFF 		bl	printf
 8917              	.L320:
2307:.\console.c   **** 					}					
2308:.\console.c   **** 					
2309:.\console.c   **** 					printf("\r\n");	
 8918              		.loc 1 2309 0
 8919 318c 40F20000 		movw	r0, #:lower16:.LC42
 8920 3190 C0F20000 		movt	r0, #:upper16:.LC42
 8921 3194 FFF7FEFF 		bl	puts
2310:.\console.c   **** 					CyDelay(50);
 8922              		.loc 1 2310 0
 8923 3198 4FF03200 		mov	r0, #50
 8924 319c FFF7FEFF 		bl	CyDelay
 8925 31a0 00E0     		b	.L316
 8926              	.L709:
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8927              		.loc 1 2288 0
 8928 31a2 00BF     		nop
 8929              	.L316:
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8930              		.loc 1 2288 0 is_stmt 0 discriminator 1
 8931 31a4 FFF7FEFF 		bl	AnyButtonPressed
 8932 31a8 0346     		mov	r3, r0
 8933 31aa 002B     		cmp	r3, #0
 8934 31ac BAD0     		beq	.L321
2311:.\console.c   **** 				}
2312:.\console.c   **** 				goto exitpars;	
 8935              		.loc 1 2312 0 is_stmt 1
 8936 31ae 04F091B9 		b	.L131
 8937              	.L315:
2313:.\console.c   **** 			}
2314:.\console.c   **** 			// END SHOW MOTOR STATUS			
2315:.\console.c   **** 
2316:.\console.c   **** 			
2317:.\console.c   **** //			// SHOW HOME SENSORS
2318:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "homesens") == 0)	
2319:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "hsens") == 0))
2320:.\console.c   **** //			{
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 249


2321:.\console.c   **** //				while (AnyButtonPressed() == NO_PRESSED)
2322:.\console.c   **** //				{
2323:.\console.c   **** //					//2 --> home pan (HOME_PAN = 4)
2324:.\console.c   **** //					//3 --> home tilt (HOME_TILT = 8)
2325:.\console.c   **** //					printf("R=%0x2; ", (int16)Status_Reg_MOTORS_Read());
2326:.\console.c   **** //					if ((Status_Reg_MOTORS_Read() & SR_HOME_PAN) == SR_HOME_PAN)
2327:.\console.c   **** //					{
2328:.\console.c   **** //						printf("HOME PAN=H; ");	
2329:.\console.c   **** //					}
2330:.\console.c   **** //					else
2331:.\console.c   **** //					{
2332:.\console.c   **** //						printf("HOME PAN=L; ");						
2333:.\console.c   **** //					}
2334:.\console.c   **** //
2335:.\console.c   **** //					if ((Status_Reg_MOTORS_Read() & SR_HOME_TILT) == SR_HOME_TILT)
2336:.\console.c   **** //					{
2337:.\console.c   **** //						printf("HOME TILT=H");	
2338:.\console.c   **** //					}
2339:.\console.c   **** //					else
2340:.\console.c   **** //					{
2341:.\console.c   **** //						printf("HOME TILT=L");						
2342:.\console.c   **** //					}
2343:.\console.c   **** //					
2344:.\console.c   **** //					printf("\r\n");	
2345:.\console.c   **** //					CyDelay(50);
2346:.\console.c   **** //				}
2347:.\console.c   **** //				goto exitpars;	
2348:.\console.c   **** //			}
2349:.\console.c   **** //			// END SHOW MOTOR STATUS			
2350:.\console.c   **** 			
2351:.\console.c   **** 			
2352:.\console.c   **** 			// SHOW Q (SHOT) N
2353:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "q") == 0)	
 8938              		.loc 1 2353 0
 8939 31b2 C148     		ldr	r0, .L743
 8940 31b4 40F20001 		movw	r1, #:lower16:.LC272
 8941 31b8 C0F20001 		movt	r1, #:upper16:.LC272
 8942 31bc FFF7FEFF 		bl	strcmp
 8943 31c0 0346     		mov	r3, r0
 8944 31c2 002B     		cmp	r3, #0
 8945 31c4 0AD0     		beq	.L322
2354:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "shot") == 0))
 8946              		.loc 1 2354 0
 8947 31c6 BC48     		ldr	r0, .L743
 8948 31c8 40F20001 		movw	r1, #:lower16:.LC442
 8949 31cc C0F20001 		movt	r1, #:upper16:.LC442
 8950 31d0 FFF7FEFF 		bl	strcmp
 8951 31d4 0346     		mov	r3, r0
 8952 31d6 002B     		cmp	r3, #0
 8953 31d8 40F04381 		bne	.L323
 8954              	.L322:
2355:.\console.c   **** 			{
2356:.\console.c   **** 				if (strcmp(actual_cmd.number1, "all") == 0)
 8955              		.loc 1 2356 0
 8956 31dc B748     		ldr	r0, .L743+4
 8957 31de 40F20001 		movw	r1, #:lower16:.LC443
 8958 31e2 C0F20001 		movt	r1, #:upper16:.LC443
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 250


 8959 31e6 FFF7FEFF 		bl	strcmp
 8960 31ea 0346     		mov	r3, r0
 8961 31ec 002B     		cmp	r3, #0
 8962 31ee 44D1     		bne	.L324
 8963              	.LBB8:
2357:.\console.c   **** 				{
2358:.\console.c   **** 					int8 memory_num;
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8964              		.loc 1 2359 0
 8965 31f0 4FF00003 		mov	r3, #0
 8966 31f4 87F8FF30 		strb	r3, [r7, #255]
 8967 31f8 3AE0     		b	.L325
 8968              	.L328:
2360:.\console.c   **** 					{
2361:.\console.c   **** 						if (q[memory_num].number == Q_NUMBER_UNUSED)
 8969              		.loc 1 2361 0
 8970 31fa 97F9FF10 		ldrsb	r1, [r7, #255]
 8971 31fe 40F20002 		movw	r2, #:lower16:q
 8972 3202 C0F20002 		movt	r2, #:upper16:q
 8973 3206 0B46     		mov	r3, r1
 8974 3208 4FEAC303 		lsl	r3, r3, #3
 8975 320c 5B18     		adds	r3, r3, r1
 8976 320e 4FEA8303 		lsl	r3, r3, #2
 8977 3212 D318     		adds	r3, r2, r3
 8978 3214 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8979 3216 002B     		cmp	r3, #0
 8980 3218 0AD1     		bne	.L326
2362:.\console.c   **** 						{
2363:.\console.c   **** 							printf("QMemory%02d NOT ALLOCATED!\r\n",(uint16)memory_num);
 8981              		.loc 1 2363 0
 8982 321a 97F9FF30 		ldrsb	r3, [r7, #255]
 8983 321e 9BB2     		uxth	r3, r3
 8984 3220 40F20000 		movw	r0, #:lower16:.LC444
 8985 3224 C0F20000 		movt	r0, #:upper16:.LC444
 8986 3228 1946     		mov	r1, r3
 8987 322a FFF7FEFF 		bl	printf
 8988 322e 19E0     		b	.L327
 8989              	.L326:
2364:.\console.c   **** 						}
2365:.\console.c   **** 						else
2366:.\console.c   **** 						{
2367:.\console.c   **** 							printf("QMemory%02d allocated to Q%02d\r\n",(uint16)memory_num, (uint16)q[memory_num].number
 8990              		.loc 1 2367 0
 8991 3230 97F9FF30 		ldrsb	r3, [r7, #255]
 8992 3234 9BB2     		uxth	r3, r3
 8993 3236 1C46     		mov	r4, r3
 8994 3238 97F9FF10 		ldrsb	r1, [r7, #255]
 8995 323c 40F20002 		movw	r2, #:lower16:q
 8996 3240 C0F20002 		movt	r2, #:upper16:q
 8997 3244 0B46     		mov	r3, r1
 8998 3246 4FEAC303 		lsl	r3, r3, #3
 8999 324a 5B18     		adds	r3, r3, r1
 9000 324c 4FEA8303 		lsl	r3, r3, #2
 9001 3250 D318     		adds	r3, r2, r3
 9002 3252 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9003 3254 40F20000 		movw	r0, #:lower16:.LC445
 9004 3258 C0F20000 		movt	r0, #:upper16:.LC445
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 251


 9005 325c 2146     		mov	r1, r4
 9006 325e 1A46     		mov	r2, r3
 9007 3260 FFF7FEFF 		bl	printf
 9008              	.L327:
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 9009              		.loc 1 2359 0
 9010 3264 97F8FF30 		ldrb	r3, [r7, #255]
 9011 3268 03F10103 		add	r3, r3, #1
 9012 326c 87F8FF30 		strb	r3, [r7, #255]
 9013              	.L325:
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 9014              		.loc 1 2359 0 is_stmt 0 discriminator 1
 9015 3270 97F9FF30 		ldrsb	r3, [r7, #255]
 9016 3274 202B     		cmp	r3, #32
 9017 3276 C0DD     		ble	.L328
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 9018              		.loc 1 2359 0
 9019 3278 F1E0     		b	.L329
 9020              	.L324:
 9021              	.LBE8:
2368:.\console.c   **** 						}
2369:.\console.c   **** 					}
2370:.\console.c   **** 				}
2371:.\console.c   **** 				else if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 9022              		.loc 1 2371 0 is_stmt 1
 9023 327a 9048     		ldr	r0, .L743+4
 9024 327c FFF7FEFF 		bl	atoi
 9025 3280 0346     		mov	r3, r0
 9026 3282 87F8E530 		strb	r3, [r7, #229]
 9027 3286 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 9028 328a 002B     		cmp	r3, #0
 9029 328c 00F0DF80 		beq	.L330
2372:.\console.c   **** 				&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 9030              		.loc 1 2372 0
 9031 3290 8A48     		ldr	r0, .L743+4
 9032 3292 FFF7FEFF 		bl	atoi
 9033 3296 0346     		mov	r3, r0
 9034 3298 87F8E530 		strb	r3, [r7, #229]
 9035 329c 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 9036 32a0 632B     		cmp	r3, #99
 9037 32a2 00F2D480 		bhi	.L330
2373:.\console.c   **** 				{	
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 9038              		.loc 1 2374 0
 9039 32a6 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9040 32aa 40F20003 		movw	r3, #:lower16:q_table
 9041 32ae C0F20003 		movt	r3, #:upper16:q_table
 9042 32b2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9043 32b4 FF2B     		cmp	r3, #255
 9044 32b6 00F0C080 		beq	.L331
2375:.\console.c   **** 					{
2376:.\console.c   **** 						//PAN 
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9045              		.loc 1 2377 0
 9046 32ba 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
2378:.\console.c   **** 							(uint16)q_number,
2379:.\console.c   **** 							(int32)q[q_table[q_number]].mc.position[PAN_AXIS],							
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 252


 9047              		.loc 1 2379 0
 9048 32be 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9049 32c2 40F20003 		movw	r3, #:lower16:q_table
 9050 32c6 C0F20003 		movt	r3, #:upper16:q_table
 9051 32ca 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9052 32cc 1946     		mov	r1, r3
 9053 32ce 40F20002 		movw	r2, #:lower16:q
 9054 32d2 C0F20002 		movt	r2, #:upper16:q
 9055 32d6 0B46     		mov	r3, r1
 9056 32d8 4FEAC303 		lsl	r3, r3, #3
 9057 32dc 5B18     		adds	r3, r3, r1
 9058 32de 4FEA8303 		lsl	r3, r3, #2
 9059 32e2 D318     		adds	r3, r2, r3
 9060 32e4 03F11803 		add	r3, r3, #24
 9061 32e8 1B68     		ldr	r3, [r3, #0]	@ float
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9062              		.loc 1 2377 0
 9063 32ea 1846     		mov	r0, r3
 9064 32ec FFF7FEFF 		bl	__aeabi_f2iz
 9065 32f0 0546     		mov	r5, r0
2380:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_default[PAN_AXIS].fnum,
 9066              		.loc 1 2380 0
 9067 32f2 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9068 32f6 40F20003 		movw	r3, #:lower16:q_table
 9069 32fa C0F20003 		movt	r3, #:upper16:q_table
 9070 32fe 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9071 3300 1946     		mov	r1, r3
 9072 3302 40F20002 		movw	r2, #:lower16:q
 9073 3306 C0F20002 		movt	r2, #:upper16:q
 9074 330a 0B46     		mov	r3, r1
 9075 330c 4FEAC303 		lsl	r3, r3, #3
 9076 3310 5B18     		adds	r3, r3, r1
 9077 3312 4FEA8303 		lsl	r3, r3, #2
 9078 3316 D318     		adds	r3, r2, r3
 9079 3318 03F10403 		add	r3, r3, #4
 9080 331c 1B68     		ldr	r3, [r3, #0]	@ float
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9081              		.loc 1 2377 0
 9082 331e 1846     		mov	r0, r3
 9083 3320 FFF7FEFF 		bl	__aeabi_f2iz
 9084 3324 0446     		mov	r4, r0
2381:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_adjust[PAN_AXIS]);
 9085              		.loc 1 2381 0
 9086 3326 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9087 332a 40F20003 		movw	r3, #:lower16:q_table
 9088 332e C0F20003 		movt	r3, #:upper16:q_table
 9089 3332 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9090 3334 1946     		mov	r1, r3
 9091 3336 40F20002 		movw	r2, #:lower16:q
 9092 333a C0F20002 		movt	r2, #:upper16:q
 9093 333e 0B46     		mov	r3, r1
 9094 3340 4FEAC303 		lsl	r3, r3, #3
 9095 3344 5B18     		adds	r3, r3, r1
 9096 3346 4FEA8303 		lsl	r3, r3, #2
 9097 334a D318     		adds	r3, r2, r3
 9098 334c 03F10803 		add	r3, r3, #8
 9099 3350 1B89     		ldrh	r3, [r3, #8]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 253


2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9100              		.loc 1 2377 0
 9101 3352 1BB2     		sxth	r3, r3
 9102 3354 0093     		str	r3, [sp, #0]
 9103 3356 40F20000 		movw	r0, #:lower16:.LC446
 9104 335a C0F20000 		movt	r0, #:upper16:.LC446
 9105 335e 3146     		mov	r1, r6
 9106 3360 2A46     		mov	r2, r5
 9107 3362 2346     		mov	r3, r4
 9108 3364 FFF7FEFF 		bl	printf
2382:.\console.c   **** 						
2383:.\console.c   **** 						//TILT
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9109              		.loc 1 2384 0
 9110 3368 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
2385:.\console.c   **** 							(uint16)q_number,
2386:.\console.c   **** 							(int32)q[q_table[q_number]].mc.position[TILT_AXIS],            							
 9111              		.loc 1 2386 0
 9112 336c 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9113 3370 40F20003 		movw	r3, #:lower16:q_table
 9114 3374 C0F20003 		movt	r3, #:upper16:q_table
 9115 3378 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9116 337a 1946     		mov	r1, r3
 9117 337c 40F20002 		movw	r2, #:lower16:q
 9118 3380 C0F20002 		movt	r2, #:upper16:q
 9119 3384 0B46     		mov	r3, r1
 9120 3386 4FEAC303 		lsl	r3, r3, #3
 9121 338a 5B18     		adds	r3, r3, r1
 9122 338c 4FEA8303 		lsl	r3, r3, #2
 9123 3390 D318     		adds	r3, r2, r3
 9124 3392 03F11C03 		add	r3, r3, #28
 9125 3396 1B68     		ldr	r3, [r3, #0]	@ float
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9126              		.loc 1 2384 0
 9127 3398 1846     		mov	r0, r3
 9128 339a FFF7FEFF 		bl	__aeabi_f2iz
 9129 339e 0546     		mov	r5, r0
2387:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_default[TILT_AXIS].fnum,
 9130              		.loc 1 2387 0
 9131 33a0 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9132 33a4 40F20003 		movw	r3, #:lower16:q_table
 9133 33a8 C0F20003 		movt	r3, #:upper16:q_table
 9134 33ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9135 33ae 1946     		mov	r1, r3
 9136 33b0 40F20002 		movw	r2, #:lower16:q
 9137 33b4 C0F20002 		movt	r2, #:upper16:q
 9138 33b8 0B46     		mov	r3, r1
 9139 33ba 4FEAC303 		lsl	r3, r3, #3
 9140 33be 5B18     		adds	r3, r3, r1
 9141 33c0 4FEA8303 		lsl	r3, r3, #2
 9142 33c4 D318     		adds	r3, r2, r3
 9143 33c6 03F10803 		add	r3, r3, #8
 9144 33ca 1B68     		ldr	r3, [r3, #0]	@ float
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9145              		.loc 1 2384 0
 9146 33cc 1846     		mov	r0, r3
 9147 33ce FFF7FEFF 		bl	__aeabi_f2iz
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 254


 9148 33d2 0446     		mov	r4, r0
2388:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_adjust[TILT_AXIS]);	
 9149              		.loc 1 2388 0
 9150 33d4 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9151 33d8 40F20003 		movw	r3, #:lower16:q_table
 9152 33dc C0F20003 		movt	r3, #:upper16:q_table
 9153 33e0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9154 33e2 1946     		mov	r1, r3
 9155 33e4 40F20002 		movw	r2, #:lower16:q
 9156 33e8 C0F20002 		movt	r2, #:upper16:q
 9157 33ec 0B46     		mov	r3, r1
 9158 33ee 4FEAC303 		lsl	r3, r3, #3
 9159 33f2 5B18     		adds	r3, r3, r1
 9160 33f4 4FEA8303 		lsl	r3, r3, #2
 9161 33f8 D318     		adds	r3, r2, r3
 9162 33fa 03F10A03 		add	r3, r3, #10
 9163 33fe 1B89     		ldrh	r3, [r3, #8]
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9164              		.loc 1 2384 0
 9165 3400 1BB2     		sxth	r3, r3
 9166 3402 0093     		str	r3, [sp, #0]
 9167 3404 40F20000 		movw	r0, #:lower16:.LC447
 9168 3408 C0F20000 		movt	r0, #:upper16:.LC447
 9169 340c 3146     		mov	r1, r6
 9170 340e 2A46     		mov	r2, r5
 9171 3410 2346     		mov	r3, r4
 9172 3412 FFF7FEFF 		bl	printf
2389:.\console.c   **** 						
2390:.\console.c   **** 						//Memory number
2391:.\console.c   **** 						printf("\r\n(Q%02d is allocated in Q memory number %02d)\r\n", (uint16)q_number, (int16)q_tab
 9173              		.loc 1 2391 0
 9174 3416 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9175 341a 97F8E510 		ldrb	r1, [r7, #229]	@ zero_extendqisi2
 9176 341e 40F20003 		movw	r3, #:lower16:q_table
 9177 3422 C0F20003 		movt	r3, #:upper16:q_table
 9178 3426 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 9179 3428 40F20000 		movw	r0, #:lower16:.LC448
 9180 342c C0F20000 		movt	r0, #:upper16:.LC448
 9181 3430 1146     		mov	r1, r2
 9182 3432 1A46     		mov	r2, r3
 9183 3434 FFF7FEFF 		bl	printf
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 9184              		.loc 1 2374 0
 9185 3438 11E0     		b	.L329
 9186              	.L331:
2392:.\console.c   **** 					}
2393:.\console.c   **** 					else
2394:.\console.c   **** 					{
2395:.\console.c   **** 						printf("\r\nQ%02d is not allocated!\r\n", (uint16)q_number);
 9187              		.loc 1 2395 0
 9188 343a 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 9189 343e 40F20000 		movw	r0, #:lower16:.LC449
 9190 3442 C0F20000 		movt	r0, #:upper16:.LC449
 9191 3446 1946     		mov	r1, r3
 9192 3448 FFF7FEFF 		bl	printf
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 9193              		.loc 1 2374 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 255


 9194 344c 07E0     		b	.L329
 9195              	.L330:
2396:.\console.c   **** 					}
2397:.\console.c   **** 				}
2398:.\console.c   **** 				else
2399:.\console.c   **** 				{
2400:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9196              		.loc 1 2400 0
 9197 344e 40F20000 		movw	r0, #:lower16:.LC450
 9198 3452 C0F20000 		movt	r0, #:upper16:.LC450
 9199 3456 FFF7FEFF 		bl	printf
2401:.\console.c   **** 				}
2402:.\console.c   **** 				goto exitpars;	
 9200              		.loc 1 2402 0
 9201 345a 04F03BB8 		b	.L131
 9202              	.L329:
 9203 345e 04F039B8 		b	.L131
 9204              	.L323:
2403:.\console.c   **** 			}
2404:.\console.c   **** 			// END SHOW Q (SHOT) N
2405:.\console.c   **** 			
2406:.\console.c   **** 			
2407:.\console.c   **** 			// SHOW PATH N
2408:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "path") == 0)	
 9205              		.loc 1 2408 0
 9206 3462 1548     		ldr	r0, .L743
 9207 3464 40F20001 		movw	r1, #:lower16:.LC451
 9208 3468 C0F20001 		movt	r1, #:upper16:.LC451
 9209 346c FFF7FEFF 		bl	strcmp
 9210 3470 0346     		mov	r3, r0
 9211 3472 002B     		cmp	r3, #0
 9212 3474 0AD0     		beq	.L333
2409:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "pa") == 0))
 9213              		.loc 1 2409 0
 9214 3476 1048     		ldr	r0, .L743
 9215 3478 40F20001 		movw	r1, #:lower16:.LC452
 9216 347c C0F20001 		movt	r1, #:upper16:.LC452
 9217 3480 FFF7FEFF 		bl	strcmp
 9218 3484 0346     		mov	r3, r0
 9219 3486 002B     		cmp	r3, #0
 9220 3488 40F0B182 		bne	.L334
 9221              	.L333:
2410:.\console.c   **** 			{
2411:.\console.c   **** 				if (((path_n = atoi(actual_cmd.number1)) >= 0)
 9222              		.loc 1 2411 0
 9223 348c 0B48     		ldr	r0, .L743+4
 9224 348e FFF7FEFF 		bl	atoi
 9225 3492 0346     		mov	r3, r0
 9226 3494 87F8EB30 		strb	r3, [r7, #235]
2412:.\console.c   **** 				&& (path_n = atoi(actual_cmd.number1)) <= 64)
 9227              		.loc 1 2412 0
 9228 3498 0848     		ldr	r0, .L743+4
 9229 349a FFF7FEFF 		bl	atoi
 9230 349e 0346     		mov	r3, r0
 9231 34a0 87F8EB30 		strb	r3, [r7, #235]
 9232 34a4 97F8EB30 		ldrb	r3, [r7, #235]	@ zero_extendqisi2
 9233 34a8 402B     		cmp	r3, #64
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 256


 9234 34aa 00F29682 		bhi	.L335
2413:.\console.c   **** 				{
2414:.\console.c   **** 					for (idx=0; idx<path[path_n].param.Trapezoid_Number; idx++)
 9235              		.loc 1 2414 0
 9236 34ae 4FF00003 		mov	r3, #0
 9237 34b2 87F81331 		strb	r3, [r7, #275]
 9238 34b6 7EE2     		b	.L336
 9239              	.L744:
 9240              		.align	2
 9241              	.L743:
 9242 34b8 0F000000 		.word	actual_cmd+15
 9243 34bc 1E000000 		.word	actual_cmd+30
 9244              	.L337:
2415:.\console.c   **** 					{
2416:.\console.c   **** 						printf(" Trapezoid num =%3i\r\n", (int16)idx);	
 9245              		.loc 1 2416 0 discriminator 2
 9246 34c0 97F81331 		ldrb	r3, [r7, #275]	@ zero_extendqisi2
 9247 34c4 40F20000 		movw	r0, #:lower16:.LC453
 9248 34c8 C0F20000 		movt	r0, #:upper16:.LC453
 9249 34cc 1946     		mov	r1, r3
 9250 34ce FFF7FEFF 		bl	printf
2417:.\console.c   **** 						printf(" Acc           =%+1.2f [%%]\r\n", (float)path[path_n].trapezoid[idx].param.acc_pc.fnu
 9251              		.loc 1 2417 0 discriminator 2
 9252 34d2 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9253 34d6 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9254 34da 40F20003 		movw	r3, #:lower16:path
 9255 34de C0F20003 		movt	r3, #:upper16:path
 9256 34e2 4FF06800 		mov	r0, #104
 9257 34e6 00FB01F1 		mul	r1, r0, r1
 9258 34ea 4FF43C70 		mov	r0, #752
 9259 34ee 00FB02F2 		mul	r2, r0, r2
 9260 34f2 8A18     		adds	r2, r1, r2
 9261 34f4 9B18     		adds	r3, r3, r2
 9262 34f6 03F10803 		add	r3, r3, #8
 9263 34fa 1B68     		ldr	r3, [r3, #0]	@ float
 9264 34fc 1846     		mov	r0, r3
 9265 34fe 4FF00001 		mov	r1, #0
 9266 3502 C4F2C821 		movt	r1, 17096
 9267 3506 FFF7FEFF 		bl	__aeabi_fmul
 9268 350a 0346     		mov	r3, r0
 9269 350c 1846     		mov	r0, r3
 9270 350e FFF7FEFF 		bl	__aeabi_f2d
 9271 3512 0246     		mov	r2, r0
 9272 3514 0B46     		mov	r3, r1
 9273 3516 40F20000 		movw	r0, #:lower16:.LC454
 9274 351a C0F20000 		movt	r0, #:upper16:.LC454
 9275 351e FFF7FEFF 		bl	printf
2418:.\console.c   **** 						printf(" Dec           =%+1.2f [%%]\r\n", (float)path[path_n].trapezoid[idx].param.dec_pc.fnu
 9276              		.loc 1 2418 0 discriminator 2
 9277 3522 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9278 3526 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9279 352a 40F20003 		movw	r3, #:lower16:path
 9280 352e C0F20003 		movt	r3, #:upper16:path
 9281 3532 4FF06800 		mov	r0, #104
 9282 3536 00FB01F1 		mul	r1, r0, r1
 9283 353a 4FF43C70 		mov	r0, #752
 9284 353e 00FB02F2 		mul	r2, r0, r2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 257


 9285 3542 8A18     		adds	r2, r1, r2
 9286 3544 9B18     		adds	r3, r3, r2
 9287 3546 03F10803 		add	r3, r3, #8
 9288 354a 5B68     		ldr	r3, [r3, #4]	@ float
 9289 354c 1846     		mov	r0, r3
 9290 354e 4FF00001 		mov	r1, #0
 9291 3552 C4F2C821 		movt	r1, 17096
 9292 3556 FFF7FEFF 		bl	__aeabi_fmul
 9293 355a 0346     		mov	r3, r0
 9294 355c 1846     		mov	r0, r3
 9295 355e FFF7FEFF 		bl	__aeabi_f2d
 9296 3562 0246     		mov	r2, r0
 9297 3564 0B46     		mov	r3, r1
 9298 3566 40F20000 		movw	r0, #:lower16:.LC455
 9299 356a C0F20000 		movt	r0, #:upper16:.LC455
 9300 356e FFF7FEFF 		bl	printf
2419:.\console.c   **** 						printf(" Time          =%+1.2f [sec]\r\n", (float)path[path_n].trapezoid[idx].param.time_sec.
 9301              		.loc 1 2419 0 discriminator 2
 9302 3572 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9303 3576 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9304 357a 40F20003 		movw	r3, #:lower16:path
 9305 357e C0F20003 		movt	r3, #:upper16:path
 9306 3582 4FF06800 		mov	r0, #104
 9307 3586 00FB01F1 		mul	r1, r0, r1
 9308 358a 4FF43C70 		mov	r0, #752
 9309 358e 00FB02F2 		mul	r2, r0, r2
 9310 3592 8A18     		adds	r2, r1, r2
 9311 3594 9B18     		adds	r3, r3, r2
 9312 3596 03F11003 		add	r3, r3, #16
 9313 359a 1B68     		ldr	r3, [r3, #0]	@ float
 9314 359c 1846     		mov	r0, r3
 9315 359e FFF7FEFF 		bl	__aeabi_f2d
 9316 35a2 0246     		mov	r2, r0
 9317 35a4 0B46     		mov	r3, r1
 9318 35a6 40F20000 		movw	r0, #:lower16:.LC456
 9319 35aa C0F20000 		movt	r0, #:upper16:.LC456
 9320 35ae FFF7FEFF 		bl	printf
2420:.\console.c   **** 						printf(" Steps         =%+1.2f [step]\r\n", (float)path[path_n].trapezoid[idx].param.steps);
 9321              		.loc 1 2420 0 discriminator 2
 9322 35b2 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9323 35b6 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9324 35ba 40F20003 		movw	r3, #:lower16:path
 9325 35be C0F20003 		movt	r3, #:upper16:path
 9326 35c2 4FF06800 		mov	r0, #104
 9327 35c6 00FB01F1 		mul	r1, r0, r1
 9328 35ca 4FF43C70 		mov	r0, #752
 9329 35ce 00FB02F2 		mul	r2, r0, r2
 9330 35d2 8A18     		adds	r2, r1, r2
 9331 35d4 9B18     		adds	r3, r3, r2
 9332 35d6 03F11003 		add	r3, r3, #16
 9333 35da 5B68     		ldr	r3, [r3, #4]
 9334 35dc 1846     		mov	r0, r3
 9335 35de FFF7FEFF 		bl	__aeabi_i2f
 9336 35e2 0346     		mov	r3, r0
 9337 35e4 1846     		mov	r0, r3
 9338 35e6 FFF7FEFF 		bl	__aeabi_f2d
 9339 35ea 0246     		mov	r2, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 258


 9340 35ec 0B46     		mov	r3, r1
 9341 35ee 40F20000 		movw	r0, #:lower16:.LC457
 9342 35f2 C0F20000 		movt	r0, #:upper16:.LC457
 9343 35f6 FFF7FEFF 		bl	printf
2421:.\console.c   **** 						printf(" Last_flg      =%3i [1=last]\r\n", (int16)path[path_n].trapezoid[idx].param.last_flg)
 9344              		.loc 1 2421 0 discriminator 2
 9345 35fa 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9346 35fe 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9347 3602 40F20003 		movw	r3, #:lower16:path
 9348 3606 C0F20003 		movt	r3, #:upper16:path
 9349 360a 4FF06800 		mov	r0, #104
 9350 360e 00FB01F1 		mul	r1, r0, r1
 9351 3612 4FF43C70 		mov	r0, #752
 9352 3616 00FB02F2 		mul	r2, r0, r2
 9353 361a 8A18     		adds	r2, r1, r2
 9354 361c 9B18     		adds	r3, r3, r2
 9355 361e 03F11803 		add	r3, r3, #24
 9356 3622 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9357 3624 40F20000 		movw	r0, #:lower16:.LC458
 9358 3628 C0F20000 		movt	r0, #:upper16:.LC458
 9359 362c 1946     		mov	r1, r3
 9360 362e FFF7FEFF 		bl	printf
2422:.\console.c   **** 						printf("----------------------------\r\n");
 9361              		.loc 1 2422 0 discriminator 2
 9362 3632 40F20000 		movw	r0, #:lower16:.LC459
 9363 3636 C0F20000 		movt	r0, #:upper16:.LC459
 9364 363a FFF7FEFF 		bl	puts
2423:.\console.c   **** 						printf(" Ticks Initial =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.ticks_ini
 9365              		.loc 1 2423 0 discriminator 2
 9366 363e 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9367 3642 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9368 3646 40F20003 		movw	r3, #:lower16:path
 9369 364a C0F20003 		movt	r3, #:upper16:path
 9370 364e 4FF06800 		mov	r0, #104
 9371 3652 00FB01F1 		mul	r1, r0, r1
 9372 3656 4FF43C70 		mov	r0, #752
 9373 365a 00FB02F2 		mul	r2, r0, r2
 9374 365e 8A18     		adds	r2, r1, r2
 9375 3660 9B18     		adds	r3, r3, r2
 9376 3662 03F14003 		add	r3, r3, #64
 9377 3666 5B68     		ldr	r3, [r3, #4]
 9378 3668 40F20000 		movw	r0, #:lower16:.LC460
 9379 366c C0F20000 		movt	r0, #:upper16:.LC460
 9380 3670 1946     		mov	r1, r3
 9381 3672 FFF7FEFF 		bl	printf
2424:.\console.c   **** 						printf(" Acc EndPoint  =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.acc_end_t
 9382              		.loc 1 2424 0 discriminator 2
 9383 3676 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9384 367a 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9385 367e 40F20003 		movw	r3, #:lower16:path
 9386 3682 C0F20003 		movt	r3, #:upper16:path
 9387 3686 4FF06800 		mov	r0, #104
 9388 368a 00FB01F1 		mul	r1, r0, r1
 9389 368e 4FF43C70 		mov	r0, #752
 9390 3692 00FB02F2 		mul	r2, r0, r2
 9391 3696 8A18     		adds	r2, r1, r2
 9392 3698 9B18     		adds	r3, r3, r2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 259


 9393 369a 03F13803 		add	r3, r3, #56
 9394 369e 1B68     		ldr	r3, [r3, #0]
 9395 36a0 40F20000 		movw	r0, #:lower16:.LC461
 9396 36a4 C0F20000 		movt	r0, #:upper16:.LC461
 9397 36a8 1946     		mov	r1, r3
 9398 36aa FFF7FEFF 		bl	printf
2425:.\console.c   **** 						printf(" Dec StartPoint=%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.dec_start
 9399              		.loc 1 2425 0 discriminator 2
 9400 36ae 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9401 36b2 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9402 36b6 40F20003 		movw	r3, #:lower16:path
 9403 36ba C0F20003 		movt	r3, #:upper16:path
 9404 36be 4FF06800 		mov	r0, #104
 9405 36c2 00FB01F1 		mul	r1, r0, r1
 9406 36c6 4FF43C70 		mov	r0, #752
 9407 36ca 00FB02F2 		mul	r2, r0, r2
 9408 36ce 8A18     		adds	r2, r1, r2
 9409 36d0 9B18     		adds	r3, r3, r2
 9410 36d2 03F13803 		add	r3, r3, #56
 9411 36d6 5B68     		ldr	r3, [r3, #4]
 9412 36d8 40F20000 		movw	r0, #:lower16:.LC462
 9413 36dc C0F20000 		movt	r0, #:upper16:.LC462
 9414 36e0 1946     		mov	r1, r3
 9415 36e2 FFF7FEFF 		bl	printf
2426:.\console.c   **** 						printf(" Dec EndPoint  =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.dec_end_t
 9416              		.loc 1 2426 0 discriminator 2
 9417 36e6 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9418 36ea 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9419 36ee 40F20003 		movw	r3, #:lower16:path
 9420 36f2 C0F20003 		movt	r3, #:upper16:path
 9421 36f6 4FF06800 		mov	r0, #104
 9422 36fa 00FB01F1 		mul	r1, r0, r1
 9423 36fe 4FF43C70 		mov	r0, #752
 9424 3702 00FB02F2 		mul	r2, r0, r2
 9425 3706 8A18     		adds	r2, r1, r2
 9426 3708 9B18     		adds	r3, r3, r2
 9427 370a 03F14003 		add	r3, r3, #64
 9428 370e 1B68     		ldr	r3, [r3, #0]
 9429 3710 40F20000 		movw	r0, #:lower16:.LC463
 9430 3714 C0F20000 		movt	r0, #:upper16:.LC463
 9431 3718 1946     		mov	r1, r3
 9432 371a FFF7FEFF 		bl	printf
2427:.\console.c   **** 						printf(" Ticks Final   =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.ticks_fin
 9433              		.loc 1 2427 0 discriminator 2
 9434 371e 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9435 3722 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9436 3726 40F20003 		movw	r3, #:lower16:path
 9437 372a C0F20003 		movt	r3, #:upper16:path
 9438 372e 4FF06800 		mov	r0, #104
 9439 3732 00FB01F1 		mul	r1, r0, r1
 9440 3736 4FF43C70 		mov	r0, #752
 9441 373a 00FB02F2 		mul	r2, r0, r2
 9442 373e 8A18     		adds	r2, r1, r2
 9443 3740 9B18     		adds	r3, r3, r2
 9444 3742 03F14803 		add	r3, r3, #72
 9445 3746 1B68     		ldr	r3, [r3, #0]
 9446 3748 40F20000 		movw	r0, #:lower16:.LC464
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 260


 9447 374c C0F20000 		movt	r0, #:upper16:.LC464
 9448 3750 1946     		mov	r1, r3
 9449 3752 FFF7FEFF 		bl	printf
2428:.\console.c   **** 						printf(" Acc Ticks     =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.a
 9450              		.loc 1 2428 0 discriminator 2
 9451 3756 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9452 375a 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9453 375e 40F20003 		movw	r3, #:lower16:path
 9454 3762 C0F20003 		movt	r3, #:upper16:path
 9455 3766 4FF06800 		mov	r0, #104
 9456 376a 00FB01F1 		mul	r1, r0, r1
 9457 376e 4FF43C70 		mov	r0, #752
 9458 3772 00FB02F2 		mul	r2, r0, r2
 9459 3776 8A18     		adds	r2, r1, r2
 9460 3778 9B18     		adds	r3, r3, r2
 9461 377a 03F12003 		add	r3, r3, #32
 9462 377e D3E90023 		ldrd	r2, [r3]
 9463 3782 1046     		mov	r0, r2
 9464 3784 1946     		mov	r1, r3
 9465 3786 FFF7FEFF 		bl	__aeabi_d2f
 9466 378a 0346     		mov	r3, r0
 9467 378c 1846     		mov	r0, r3
 9468 378e FFF7FEFF 		bl	__aeabi_f2d
 9469 3792 0246     		mov	r2, r0
 9470 3794 0B46     		mov	r3, r1
 9471 3796 40F20000 		movw	r0, #:lower16:.LC465
 9472 379a C0F20000 		movt	r0, #:upper16:.LC465
 9473 379e FFF7FEFF 		bl	printf
2429:.\console.c   **** 						printf(" Vconst Ticks  =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.v
 9474              		.loc 1 2429 0 discriminator 2
 9475 37a2 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9476 37a6 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9477 37aa 40F20003 		movw	r3, #:lower16:path
 9478 37ae C0F20003 		movt	r3, #:upper16:path
 9479 37b2 4FF06800 		mov	r0, #104
 9480 37b6 00FB01F1 		mul	r1, r0, r1
 9481 37ba 4FF43C70 		mov	r0, #752
 9482 37be 00FB02F2 		mul	r2, r0, r2
 9483 37c2 8A18     		adds	r2, r1, r2
 9484 37c4 9B18     		adds	r3, r3, r2
 9485 37c6 03F13003 		add	r3, r3, #48
 9486 37ca D3E90023 		ldrd	r2, [r3]
 9487 37ce 1046     		mov	r0, r2
 9488 37d0 1946     		mov	r1, r3
 9489 37d2 FFF7FEFF 		bl	__aeabi_d2f
 9490 37d6 0346     		mov	r3, r0
 9491 37d8 1846     		mov	r0, r3
 9492 37da FFF7FEFF 		bl	__aeabi_f2d
 9493 37de 0246     		mov	r2, r0
 9494 37e0 0B46     		mov	r3, r1
 9495 37e2 40F20000 		movw	r0, #:lower16:.LC466
 9496 37e6 C0F20000 		movt	r0, #:upper16:.LC466
 9497 37ea FFF7FEFF 		bl	printf
2430:.\console.c   **** 						printf(" Dec Ticks     =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.d
 9498              		.loc 1 2430 0 discriminator 2
 9499 37ee 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9500 37f2 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 261


 9501 37f6 40F20003 		movw	r3, #:lower16:path
 9502 37fa C0F20003 		movt	r3, #:upper16:path
 9503 37fe 4FF06800 		mov	r0, #104
 9504 3802 00FB01F1 		mul	r1, r0, r1
 9505 3806 4FF43C70 		mov	r0, #752
 9506 380a 00FB02F2 		mul	r2, r0, r2
 9507 380e 8A18     		adds	r2, r1, r2
 9508 3810 9B18     		adds	r3, r3, r2
 9509 3812 03F12803 		add	r3, r3, #40
 9510 3816 D3E90023 		ldrd	r2, [r3]
 9511 381a 1046     		mov	r0, r2
 9512 381c 1946     		mov	r1, r3
 9513 381e FFF7FEFF 		bl	__aeabi_d2f
 9514 3822 0346     		mov	r3, r0
 9515 3824 1846     		mov	r0, r3
 9516 3826 FFF7FEFF 		bl	__aeabi_f2d
 9517 382a 0246     		mov	r2, r0
 9518 382c 0B46     		mov	r3, r1
 9519 382e 40F20000 		movw	r0, #:lower16:.LC467
 9520 3832 C0F20000 		movt	r0, #:upper16:.LC467
 9521 3836 FFF7FEFF 		bl	printf
2431:.\console.c   **** 						printf(" V initial     =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.v_
 9522              		.loc 1 2431 0 discriminator 2
 9523 383a 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9524 383e 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9525 3842 40F20003 		movw	r3, #:lower16:path
 9526 3846 C0F20003 		movt	r3, #:upper16:path
 9527 384a 4FF06800 		mov	r0, #104
 9528 384e 00FB01F1 		mul	r1, r0, r1
 9529 3852 4FF43C70 		mov	r0, #752
 9530 3856 00FB02F2 		mul	r2, r0, r2
 9531 385a 8A18     		adds	r2, r1, r2
 9532 385c 9B18     		adds	r3, r3, r2
 9533 385e 03F15803 		add	r3, r3, #88
 9534 3862 D3E90023 		ldrd	r2, [r3]
 9535 3866 1046     		mov	r0, r2
 9536 3868 1946     		mov	r1, r3
 9537 386a FFF7FEFF 		bl	__aeabi_d2f
 9538 386e 0346     		mov	r3, r0
 9539 3870 1846     		mov	r0, r3
 9540 3872 FFF7FEFF 		bl	__aeabi_f2d
 9541 3876 0246     		mov	r2, r0
 9542 3878 0B46     		mov	r3, r1
 9543 387a 40F20000 		movw	r0, #:lower16:.LC468
 9544 387e C0F20000 		movt	r0, #:upper16:.LC468
 9545 3882 FFF7FEFF 		bl	printf
2432:.\console.c   **** 						printf(" Acc slope     =%+1.8f [step/ticks^2]\r\n", (float)path[path_n].trapezoid[idx].mover.
 9546              		.loc 1 2432 0 discriminator 2
 9547 3886 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9548 388a 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9549 388e 40F20003 		movw	r3, #:lower16:path
 9550 3892 C0F20003 		movt	r3, #:upper16:path
 9551 3896 01F10101 		add	r1, r1, #1
 9552 389a 4FF06800 		mov	r0, #104
 9553 389e 00FB01F1 		mul	r1, r0, r1
 9554 38a2 4FF43C70 		mov	r0, #752
 9555 38a6 00FB02F2 		mul	r2, r0, r2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 262


 9556 38aa 8A18     		adds	r2, r1, r2
 9557 38ac 9B18     		adds	r3, r3, r2
 9558 38ae 1B68     		ldr	r3, [r3, #0]	@ float
 9559 38b0 1846     		mov	r0, r3
 9560 38b2 FFF7FEFF 		bl	__aeabi_f2d
 9561 38b6 0246     		mov	r2, r0
 9562 38b8 0B46     		mov	r3, r1
 9563 38ba 40F20000 		movw	r0, #:lower16:.LC469
 9564 38be C0F20000 		movt	r0, #:upper16:.LC469
 9565 38c2 FFF7FEFF 		bl	printf
2433:.\console.c   **** 						printf(" V constant    =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.v_
 9566              		.loc 1 2433 0 discriminator 2
 9567 38c6 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9568 38ca 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9569 38ce 40F20003 		movw	r3, #:lower16:path
 9570 38d2 C0F20003 		movt	r3, #:upper16:path
 9571 38d6 4FF06800 		mov	r0, #104
 9572 38da 00FB01F1 		mul	r1, r0, r1
 9573 38de 4FF43C70 		mov	r0, #752
 9574 38e2 00FB02F2 		mul	r2, r0, r2
 9575 38e6 8A18     		adds	r2, r1, r2
 9576 38e8 9B18     		adds	r3, r3, r2
 9577 38ea 03F15003 		add	r3, r3, #80
 9578 38ee D3E90023 		ldrd	r2, [r3]
 9579 38f2 1046     		mov	r0, r2
 9580 38f4 1946     		mov	r1, r3
 9581 38f6 FFF7FEFF 		bl	__aeabi_d2f
 9582 38fa 0346     		mov	r3, r0
 9583 38fc 1846     		mov	r0, r3
 9584 38fe FFF7FEFF 		bl	__aeabi_f2d
 9585 3902 0246     		mov	r2, r0
 9586 3904 0B46     		mov	r3, r1
 9587 3906 40F20000 		movw	r0, #:lower16:.LC470
 9588 390a C0F20000 		movt	r0, #:upper16:.LC470
 9589 390e FFF7FEFF 		bl	printf
2434:.\console.c   **** 						printf(" Dec slope     =%+1.8f [step/ticks^2]\r\n", (float)path[path_n].trapezoid[idx].mover.
 9590              		.loc 1 2434 0 discriminator 2
 9591 3912 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9592 3916 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9593 391a 40F20003 		movw	r3, #:lower16:path
 9594 391e C0F20003 		movt	r3, #:upper16:path
 9595 3922 01F10101 		add	r1, r1, #1
 9596 3926 4FF06800 		mov	r0, #104
 9597 392a 00FB01F1 		mul	r1, r0, r1
 9598 392e 4FF43C70 		mov	r0, #752
 9599 3932 00FB02F2 		mul	r2, r0, r2
 9600 3936 8A18     		adds	r2, r1, r2
 9601 3938 9B18     		adds	r3, r3, r2
 9602 393a 5B68     		ldr	r3, [r3, #4]	@ float
 9603 393c 1846     		mov	r0, r3
 9604 393e FFF7FEFF 		bl	__aeabi_f2d
 9605 3942 0246     		mov	r2, r0
 9606 3944 0B46     		mov	r3, r1
 9607 3946 40F20000 		movw	r0, #:lower16:.LC471
 9608 394a C0F20000 		movt	r0, #:upper16:.LC471
 9609 394e FFF7FEFF 		bl	printf
2435:.\console.c   **** 						printf(" V final       =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.v_
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 263


 9610              		.loc 1 2435 0 discriminator 2
 9611 3952 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9612 3956 97F81311 		ldrb	r1, [r7, #275]	@ zero_extendqisi2
 9613 395a 40F20003 		movw	r3, #:lower16:path
 9614 395e C0F20003 		movt	r3, #:upper16:path
 9615 3962 4FF06800 		mov	r0, #104
 9616 3966 00FB01F1 		mul	r1, r0, r1
 9617 396a 4FF43C70 		mov	r0, #752
 9618 396e 00FB02F2 		mul	r2, r0, r2
 9619 3972 8A18     		adds	r2, r1, r2
 9620 3974 9B18     		adds	r3, r3, r2
 9621 3976 03F16003 		add	r3, r3, #96
 9622 397a D3E90023 		ldrd	r2, [r3]
 9623 397e 1046     		mov	r0, r2
 9624 3980 1946     		mov	r1, r3
 9625 3982 FFF7FEFF 		bl	__aeabi_d2f
 9626 3986 0346     		mov	r3, r0
 9627 3988 1846     		mov	r0, r3
 9628 398a FFF7FEFF 		bl	__aeabi_f2d
 9629 398e 0246     		mov	r2, r0
 9630 3990 0B46     		mov	r3, r1
 9631 3992 40F20000 		movw	r0, #:lower16:.LC472
 9632 3996 C0F20000 		movt	r0, #:upper16:.LC472
 9633 399a FFF7FEFF 		bl	printf
2436:.\console.c   **** 						printf("\r\n");						
 9634              		.loc 1 2436 0 discriminator 2
 9635 399e 40F20000 		movw	r0, #:lower16:.LC42
 9636 39a2 C0F20000 		movt	r0, #:upper16:.LC42
 9637 39a6 FFF7FEFF 		bl	puts
2414:.\console.c   **** 					for (idx=0; idx<path[path_n].param.Trapezoid_Number; idx++)
 9638              		.loc 1 2414 0 discriminator 2
 9639 39aa 97F81331 		ldrb	r3, [r7, #275]
 9640 39ae 03F10103 		add	r3, r3, #1
 9641 39b2 87F81331 		strb	r3, [r7, #275]
 9642              	.L336:
2414:.\console.c   **** 					for (idx=0; idx<path[path_n].param.Trapezoid_Number; idx++)
 9643              		.loc 1 2414 0 is_stmt 0 discriminator 1
 9644 39b6 97F8EB20 		ldrb	r2, [r7, #235]	@ zero_extendqisi2
 9645 39ba 40F20003 		movw	r3, #:lower16:path
 9646 39be C0F20003 		movt	r3, #:upper16:path
 9647 39c2 4FF43C71 		mov	r1, #752
 9648 39c6 01FB02F2 		mul	r2, r1, r2
 9649 39ca 9B18     		adds	r3, r3, r2
 9650 39cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9651 39ce 97F81321 		ldrb	r2, [r7, #275]	@ zero_extendqisi2
 9652 39d2 9A42     		cmp	r2, r3
 9653 39d4 FFF474AD 		bcc	.L337
2411:.\console.c   **** 				if (((path_n = atoi(actual_cmd.number1)) >= 0)
 9654              		.loc 1 2411 0 is_stmt 1
 9655 39d8 07E0     		b	.L694
 9656              	.L335:
2437:.\console.c   **** 					}				
2438:.\console.c   **** 				}
2439:.\console.c   **** 				else
2440:.\console.c   **** 				{
2441:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9657              		.loc 1 2441 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 264


 9658 39da 40F20000 		movw	r0, #:lower16:.LC450
 9659 39de C0F20000 		movt	r0, #:upper16:.LC450
 9660 39e2 FFF7FEFF 		bl	printf
2442:.\console.c   **** 				}
2443:.\console.c   **** 				goto exitpars;	
 9661              		.loc 1 2443 0
 9662 39e6 03F075BD 		b	.L131
 9663              	.L694:
 9664 39ea 03F073BD 		b	.L131
 9665              	.L334:
2444:.\console.c   **** 			}
2445:.\console.c   **** 			// END SHOW PATH N				
2446:.\console.c   **** 
2447:.\console.c   **** 			
2448:.\console.c   **** //			// SHOW MOVER N
2449:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "mover") == 0)	
2450:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "mov") == 0))
2451:.\console.c   **** //			{	
2452:.\console.c   **** //				if (((path_n = atoi(actual_cmd.number1)) >= 0)
2453:.\console.c   **** //				&& (path_n = atoi(actual_cmd.number1)) <= 64)
2454:.\console.c   **** //				{				
2455:.\console.c   **** //					int32 steps_loc;
2456:.\console.c   **** //					int32 steps_integral_loc=0;
2457:.\console.c   **** //					
2458:.\console.c   **** //					MoverInit();	/* Initialize the Mover */
2459:.\console.c   **** //					
2460:.\console.c   **** //					while ((mover.ticks <= path[path_n].path_ticks_MAX) &&
2461:.\console.c   **** //						  (AnyButtonPressed() == NO_PRESSED))
2462:.\console.c   **** //					{
2463:.\console.c   **** //						steps_loc = MoverGeneratedSteps(&path[path_n], mover.ticks);
2464:.\console.c   **** //						steps_integral_loc = steps_integral_loc + steps_loc;
2465:.\console.c   **** //						
2466:.\console.c   **** //						printf("Ticks=%+ld [ticks]", (int32)mover.ticks);
2467:.\console.c   **** //						printf("  Steps=%+ld [step]", (int32)steps_loc);	
2468:.\console.c   **** //						printf("  Int(Steps)=%+ld [step]", (int32)steps_integral_loc);
2469:.\console.c   **** //						printf("  Mover_status=%2i", (int16)mover.status);							
2470:.\console.c   **** //						printf("\r\n");
2471:.\console.c   **** //						
2472:.\console.c   **** //						mover.ticks++;
2473:.\console.c   **** //					}
2474:.\console.c   **** //				}
2475:.\console.c   **** //				else
2476:.\console.c   **** //				{
2477:.\console.c   **** //					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2478:.\console.c   **** //				}					
2479:.\console.c   **** //				goto exitpars;	
2480:.\console.c   **** //			}
2481:.\console.c   **** //			// END SHOW MOVER N			
2482:.\console.c   **** 
2483:.\console.c   **** 			
2484:.\console.c   **** 			// SHOW MOVERS
2485:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "movers") == 0)
 9666              		.loc 1 2485 0
 9667 39ee 9848     		ldr	r0, .L745
 9668 39f0 40F20001 		movw	r1, #:lower16:.LC473
 9669 39f4 C0F20001 		movt	r1, #:upper16:.LC473
 9670 39f8 FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 265


 9671 39fc 0346     		mov	r3, r0
 9672 39fe 002B     		cmp	r3, #0
 9673 3a00 44D1     		bne	.L339
2486:.\console.c   **** 			{	
2487:.\console.c   **** 				if (strlen(actual_cmd.number1) == 0)
 9674              		.loc 1 2487 0
 9675 3a02 944B     		ldr	r3, .L745+4
 9676 3a04 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9677 3a06 002B     		cmp	r3, #0
 9678 3a08 36D1     		bne	.L340
2488:.\console.c   **** 				{			
2489:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 9679              		.loc 1 2489 0
 9680 3a0a 2FE0     		b	.L341
 9681              	.L342:
2490:.\console.c   **** 					{
2491:.\console.c   **** 						printf("Movers Ticks=%+ld, %+ld [ticks]", (int32)mover_pan.ticks, (int32)mover_tilt.ticks);
 9682              		.loc 1 2491 0
 9683 3a0c 40F20003 		movw	r3, #:lower16:mover_pan
 9684 3a10 C0F20003 		movt	r3, #:upper16:mover_pan
 9685 3a14 5B68     		ldr	r3, [r3, #4]
 9686 3a16 1A46     		mov	r2, r3
 9687 3a18 40F20003 		movw	r3, #:lower16:mover_tilt
 9688 3a1c C0F20003 		movt	r3, #:upper16:mover_tilt
 9689 3a20 5B68     		ldr	r3, [r3, #4]
 9690 3a22 40F20000 		movw	r0, #:lower16:.LC474
 9691 3a26 C0F20000 		movt	r0, #:upper16:.LC474
 9692 3a2a 1146     		mov	r1, r2
 9693 3a2c 1A46     		mov	r2, r3
 9694 3a2e FFF7FEFF 		bl	printf
2492:.\console.c   **** //						printf("  Steps=%+ld [step]", (int32)steps_loc);	
2493:.\console.c   **** //						printf("  Int(Steps)=%+ld [step]", (int32)steps_integral_loc);
2494:.\console.c   **** 						printf("  status=%2i, %2i", (int16)mover_pan.status, (int16)mover_tilt.status);							
 9695              		.loc 1 2494 0
 9696 3a32 40F20003 		movw	r3, #:lower16:mover_pan
 9697 3a36 C0F20003 		movt	r3, #:upper16:mover_pan
 9698 3a3a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9699 3a3c 1A46     		mov	r2, r3
 9700 3a3e 40F20003 		movw	r3, #:lower16:mover_tilt
 9701 3a42 C0F20003 		movt	r3, #:upper16:mover_tilt
 9702 3a46 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9703 3a48 40F20000 		movw	r0, #:lower16:.LC475
 9704 3a4c C0F20000 		movt	r0, #:upper16:.LC475
 9705 3a50 1146     		mov	r1, r2
 9706 3a52 1A46     		mov	r2, r3
 9707 3a54 FFF7FEFF 		bl	printf
2495:.\console.c   **** 						printf("\r\n");
 9708              		.loc 1 2495 0
 9709 3a58 40F20000 		movw	r0, #:lower16:.LC42
 9710 3a5c C0F20000 		movt	r0, #:upper16:.LC42
 9711 3a60 FFF7FEFF 		bl	puts
2496:.\console.c   **** 						CyDelay(50);						
 9712              		.loc 1 2496 0
 9713 3a64 4FF03200 		mov	r0, #50
 9714 3a68 FFF7FEFF 		bl	CyDelay
 9715              	.L341:
2489:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 266


 9716              		.loc 1 2489 0 discriminator 1
 9717 3a6c FFF7FEFF 		bl	AnyButtonPressed
 9718 3a70 0346     		mov	r3, r0
 9719 3a72 002B     		cmp	r3, #0
 9720 3a74 CAD0     		beq	.L342
2489:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 9721              		.loc 1 2489 0 is_stmt 0
 9722 3a76 07E0     		b	.L695
 9723              	.L340:
2497:.\console.c   **** 					}
2498:.\console.c   **** 				}
2499:.\console.c   **** 				else
2500:.\console.c   **** 				{
2501:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9724              		.loc 1 2501 0 is_stmt 1
 9725 3a78 40F20000 		movw	r0, #:lower16:.LC450
 9726 3a7c C0F20000 		movt	r0, #:upper16:.LC450
 9727 3a80 FFF7FEFF 		bl	printf
2502:.\console.c   **** 				}					
2503:.\console.c   **** 				goto exitpars;	
 9728              		.loc 1 2503 0
 9729 3a84 03F026BD 		b	.L131
 9730              	.L695:
 9731 3a88 03F024BD 		b	.L131
 9732              	.L339:
2504:.\console.c   **** 			}
2505:.\console.c   **** 			// END SHOW MOVERS		
2506:.\console.c   **** 			
2507:.\console.c   **** 			// SHOW CLU N
2508:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "clu") == 0)
 9733              		.loc 1 2508 0
 9734 3a8c 7048     		ldr	r0, .L745
 9735 3a8e 40F20001 		movw	r1, #:lower16:.LC476
 9736 3a92 C0F20001 		movt	r1, #:upper16:.LC476
 9737 3a96 FFF7FEFF 		bl	strcmp
 9738 3a9a 0346     		mov	r3, r0
 9739 3a9c 002B     		cmp	r3, #0
 9740 3a9e 1ED1     		bne	.L344
2509:.\console.c   **** 			{	
2510:.\console.c   **** 				if (((clu_number = atoi(actual_cmd.number1)) >= 0)
 9741              		.loc 1 2510 0
 9742 3aa0 6C48     		ldr	r0, .L745+4
 9743 3aa2 FFF7FEFF 		bl	atoi
 9744 3aa6 0346     		mov	r3, r0
 9745 3aa8 87F8EA30 		strb	r3, [r7, #234]
2511:.\console.c   **** 				&& (clu_number = atoi(actual_cmd.number1)) < MAX_CLU_NUMBER)
 9746              		.loc 1 2511 0
 9747 3aac 6948     		ldr	r0, .L745+4
 9748 3aae FFF7FEFF 		bl	atoi
 9749 3ab2 0346     		mov	r3, r0
 9750 3ab4 87F8EA30 		strb	r3, [r7, #234]
 9751 3ab8 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 9752 3abc 312B     		cmp	r3, #49
 9753 3abe 06D8     		bhi	.L345
2512:.\console.c   **** 				{				
2513:.\console.c   **** 					PrintClu(clu_number);
 9754              		.loc 1 2513 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 267


 9755 3ac0 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 9756 3ac4 1846     		mov	r0, r3
 9757 3ac6 FFF7FEFF 		bl	PrintClu
2514:.\console.c   **** 				}
2515:.\console.c   **** 				else
2516:.\console.c   **** 				{
2517:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2518:.\console.c   **** 				}					
2519:.\console.c   **** 				goto exitpars;	
 9758              		.loc 1 2519 0
 9759 3aca 03F003BD 		b	.L131
 9760              	.L345:
2517:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9761              		.loc 1 2517 0
 9762 3ace 40F20000 		movw	r0, #:lower16:.LC450
 9763 3ad2 C0F20000 		movt	r0, #:upper16:.LC450
 9764 3ad6 FFF7FEFF 		bl	printf
 9765              		.loc 1 2519 0
 9766 3ada 03F0FBBC 		b	.L131
 9767              	.L344:
2520:.\console.c   **** 			}
2521:.\console.c   **** 			// END SHOW CLU N			
2522:.\console.c   **** 			
2523:.\console.c   **** 			
2524:.\console.c   **** 			// SHOW PAN LIMITS
2525:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "panlimits") == 0)	
 9768              		.loc 1 2525 0
 9769 3ade 5C48     		ldr	r0, .L745
 9770 3ae0 40F20001 		movw	r1, #:lower16:.LC477
 9771 3ae4 C0F20001 		movt	r1, #:upper16:.LC477
 9772 3ae8 FFF7FEFF 		bl	strcmp
 9773 3aec 0346     		mov	r3, r0
 9774 3aee 002B     		cmp	r3, #0
 9775 3af0 28D0     		beq	.L710
2526:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "plim") == 0))
 9776              		.loc 1 2526 0
 9777 3af2 5748     		ldr	r0, .L745
 9778 3af4 40F20001 		movw	r1, #:lower16:.LC478
 9779 3af8 C0F20001 		movt	r1, #:upper16:.LC478
 9780 3afc FFF7FEFF 		bl	strcmp
 9781 3b00 0346     		mov	r3, r0
 9782 3b02 002B     		cmp	r3, #0
 9783 3b04 26D1     		bne	.L348
2527:.\console.c   **** 			{
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9784              		.loc 1 2528 0
 9785 3b06 1DE0     		b	.L710
 9786              	.L350:
2529:.\console.c   **** 				{
2530:.\console.c   **** 			        printf("PAN LIMIT=%2u ", (uint16)pan_axis.lc.status);					
 9787              		.loc 1 2530 0
 9788 3b08 40F20003 		movw	r3, #:lower16:pan_axis
 9789 3b0c C0F20003 		movt	r3, #:upper16:pan_axis
 9790 3b10 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 9791 3b14 40F20000 		movw	r0, #:lower16:.LC479
 9792 3b18 C0F20000 		movt	r0, #:upper16:.LC479
 9793 3b1c 1946     		mov	r1, r3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 268


 9794 3b1e FFF7FEFF 		bl	printf
2531:.\console.c   **** 					ShowLimits(&pan_axis);
 9795              		.loc 1 2531 0
 9796 3b22 40F20000 		movw	r0, #:lower16:pan_axis
 9797 3b26 C0F20000 		movt	r0, #:upper16:pan_axis
 9798 3b2a FFF7FEFF 		bl	ShowLimits
2532:.\console.c   **** 					printf("\r\n");
 9799              		.loc 1 2532 0
 9800 3b2e 40F20000 		movw	r0, #:lower16:.LC42
 9801 3b32 C0F20000 		movt	r0, #:upper16:.LC42
 9802 3b36 FFF7FEFF 		bl	puts
2533:.\console.c   **** 					
2534:.\console.c   **** 					CyDelay(50);
 9803              		.loc 1 2534 0
 9804 3b3a 4FF03200 		mov	r0, #50
 9805 3b3e FFF7FEFF 		bl	CyDelay
 9806 3b42 00E0     		b	.L349
 9807              	.L710:
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9808              		.loc 1 2528 0
 9809 3b44 00BF     		nop
 9810              	.L349:
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9811              		.loc 1 2528 0 is_stmt 0 discriminator 1
 9812 3b46 FFF7FEFF 		bl	AnyButtonPressed
 9813 3b4a 0346     		mov	r3, r0
 9814 3b4c 002B     		cmp	r3, #0
 9815 3b4e DBD0     		beq	.L350
2535:.\console.c   **** 				}
2536:.\console.c   **** 				goto exitpars;	
 9816              		.loc 1 2536 0 is_stmt 1
 9817 3b50 03F0C0BC 		b	.L131
 9818              	.L348:
2537:.\console.c   **** 			}
2538:.\console.c   **** 			// SHOW PAN LIMITS END			
2539:.\console.c   **** 
2540:.\console.c   **** 			
2541:.\console.c   **** 			// SHOW TILT LIMITS
2542:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tiltlimits") == 0)	
 9819              		.loc 1 2542 0
 9820 3b54 3E48     		ldr	r0, .L745
 9821 3b56 40F20001 		movw	r1, #:lower16:.LC480
 9822 3b5a C0F20001 		movt	r1, #:upper16:.LC480
 9823 3b5e FFF7FEFF 		bl	strcmp
 9824 3b62 0346     		mov	r3, r0
 9825 3b64 002B     		cmp	r3, #0
 9826 3b66 28D0     		beq	.L711
2543:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "tlim") == 0))
 9827              		.loc 1 2543 0
 9828 3b68 3948     		ldr	r0, .L745
 9829 3b6a 40F20001 		movw	r1, #:lower16:.LC481
 9830 3b6e C0F20001 		movt	r1, #:upper16:.LC481
 9831 3b72 FFF7FEFF 		bl	strcmp
 9832 3b76 0346     		mov	r3, r0
 9833 3b78 002B     		cmp	r3, #0
 9834 3b7a 26D1     		bne	.L352
2544:.\console.c   **** 			{
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 269


2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9835              		.loc 1 2545 0
 9836 3b7c 1DE0     		b	.L711
 9837              	.L354:
2546:.\console.c   **** 				{
2547:.\console.c   **** 			        printf("TILT LIMIT=%2u ", (uint16)tilt_axis.lc.status);
 9838              		.loc 1 2547 0
 9839 3b7e 40F20003 		movw	r3, #:lower16:tilt_axis
 9840 3b82 C0F20003 		movt	r3, #:upper16:tilt_axis
 9841 3b86 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 9842 3b8a 40F20000 		movw	r0, #:lower16:.LC482
 9843 3b8e C0F20000 		movt	r0, #:upper16:.LC482
 9844 3b92 1946     		mov	r1, r3
 9845 3b94 FFF7FEFF 		bl	printf
2548:.\console.c   **** 					ShowLimits(&tilt_axis);		
 9846              		.loc 1 2548 0
 9847 3b98 40F20000 		movw	r0, #:lower16:tilt_axis
 9848 3b9c C0F20000 		movt	r0, #:upper16:tilt_axis
 9849 3ba0 FFF7FEFF 		bl	ShowLimits
2549:.\console.c   **** 					printf("\r\n");
 9850              		.loc 1 2549 0
 9851 3ba4 40F20000 		movw	r0, #:lower16:.LC42
 9852 3ba8 C0F20000 		movt	r0, #:upper16:.LC42
 9853 3bac FFF7FEFF 		bl	puts
2550:.\console.c   **** 					
2551:.\console.c   **** 					CyDelay(50);
 9854              		.loc 1 2551 0
 9855 3bb0 4FF03200 		mov	r0, #50
 9856 3bb4 FFF7FEFF 		bl	CyDelay
 9857 3bb8 00E0     		b	.L353
 9858              	.L711:
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9859              		.loc 1 2545 0
 9860 3bba 00BF     		nop
 9861              	.L353:
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9862              		.loc 1 2545 0 is_stmt 0 discriminator 1
 9863 3bbc FFF7FEFF 		bl	AnyButtonPressed
 9864 3bc0 0346     		mov	r3, r0
 9865 3bc2 002B     		cmp	r3, #0
 9866 3bc4 DBD0     		beq	.L354
2552:.\console.c   **** 				}
2553:.\console.c   **** 				goto exitpars;	
 9867              		.loc 1 2553 0 is_stmt 1
 9868 3bc6 03F085BC 		b	.L131
 9869              	.L352:
2554:.\console.c   **** 			}
2555:.\console.c   **** 			// SHOW TILT LIMITS END					
2556:.\console.c   **** 			
2557:.\console.c   **** 			
2558:.\console.c   **** 			// SHOW ABS RATIO PAN
2559:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0)	
 9870              		.loc 1 2559 0
 9871 3bca 2148     		ldr	r0, .L745
 9872 3bcc 40F20001 		movw	r1, #:lower16:.LC483
 9873 3bd0 C0F20001 		movt	r1, #:upper16:.LC483
 9874 3bd4 FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 270


 9875 3bd8 0346     		mov	r3, r0
 9876 3bda 002B     		cmp	r3, #0
 9877 3bdc 0AD0     		beq	.L355
2560:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ratiop") == 0))
 9878              		.loc 1 2560 0
 9879 3bde 1C48     		ldr	r0, .L745
 9880 3be0 40F20001 		movw	r1, #:lower16:.LC484
 9881 3be4 C0F20001 		movt	r1, #:upper16:.LC484
 9882 3be8 FFF7FEFF 		bl	strcmp
 9883 3bec 0346     		mov	r3, r0
 9884 3bee 002B     		cmp	r3, #0
 9885 3bf0 40F00381 		bne	.L356
 9886              	.L355:
2561:.\console.c   **** 			{
2562:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 9887              		.loc 1 2562 0
 9888 3bf4 40F20000 		movw	r0, #:lower16:.LC431
 9889 3bf8 C0F20000 		movt	r0, #:upper16:.LC431
 9890 3bfc FFF7FEFF 		bl	puts
2563:.\console.c   **** 				printf(STR_SHOWENCFC);			//
 9891              		.loc 1 2563 0
 9892 3c00 40F20000 		movw	r0, #:lower16:.LC485
 9893 3c04 C0F20000 		movt	r0, #:upper16:.LC485
 9894 3c08 FFF7FEFF 		bl	printf
2564:.\console.c   **** 			
2565:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 9895              		.loc 1 2565 0
 9896 3c0c 4FF00100 		mov	r0, #1
 9897 3c10 FFF7FEFF 		bl	ButtonYNChoice
 9898 3c14 0346     		mov	r3, r0
 9899 3c16 012B     		cmp	r3, #1
 9900 3c18 40F0EB80 		bne	.L357
2566:.\console.c   **** 				{
2567:.\console.c   **** 					isr_CTRL_Stop();					/* Stop Control ISR			*/	
 9901              		.loc 1 2567 0
 9902 3c1c FFF7FEFF 		bl	isr_CTRL_Stop
2568:.\console.c   **** 					motor_init(&pan_axis);				/* Initialize Pan Axis  	*/
 9903              		.loc 1 2568 0
 9904 3c20 40F20000 		movw	r0, #:lower16:pan_axis
 9905 3c24 C0F20000 		movt	r0, #:upper16:pan_axis
 9906 3c28 FFF7FEFF 		bl	motor_init
2569:.\console.c   **** 					motor_init(&tilt_axis);				/* Initialize Tilt Axis 	*/
 9907              		.loc 1 2569 0
 9908 3c2c 40F20000 		movw	r0, #:lower16:tilt_axis
 9909 3c30 C0F20000 		movt	r0, #:upper16:tilt_axis
 9910 3c34 FFF7FEFF 		bl	motor_init
2570:.\console.c   **** 					
2571:.\console.c   **** 					pan_absolute_sensor.ratio_tmp = 0;	//clear temporary ratio value
 9911              		.loc 1 2571 0
 9912 3c38 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9913 3c3c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9914 3c40 4FF00002 		mov	r2, #0
 9915 3c44 9A62     		str	r2, [r3, #40]	@ float
2572:.\console.c   **** 					get_key = 0;						//clear internal loop getted char
 9916              		.loc 1 2572 0
 9917 3c46 4FF00003 		mov	r3, #0
 9918 3c4a 87F81231 		strb	r3, [r7, #274]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 271


2573:.\console.c   **** 					
2574:.\console.c   **** 					while (get_key == 0)						
 9919              		.loc 1 2574 0
 9920 3c4e CBE0     		b	.L358
 9921              	.L746:
 9922              		.align	2
 9923              	.L745:
 9924 3c50 0F000000 		.word	actual_cmd+15
 9925 3c54 1E000000 		.word	actual_cmd+30
 9926              	.L365:
2575:.\console.c   **** 					{						
2576:.\console.c   **** 						printf("PAN: ABS_SENSOR=%5i[lsb]", (int16)AdcValue[HOME_PAN_ABSV]);
 9927              		.loc 1 2576 0
 9928 3c58 40F20003 		movw	r3, #:lower16:AdcValue
 9929 3c5c C0F20003 		movt	r3, #:upper16:AdcValue
 9930 3c60 9B89     		ldrh	r3, [r3, #12]
 9931 3c62 1BB2     		sxth	r3, r3
 9932 3c64 40F20000 		movw	r0, #:lower16:.LC486
 9933 3c68 C0F20000 		movt	r0, #:upper16:.LC486
 9934 3c6c 1946     		mov	r1, r3
 9935 3c6e FFF7FEFF 		bl	printf
2577:.\console.c   **** 						printf(" ENC=%9li[step]", (int32)QuadDec_PAN_GetCounter());	
 9936              		.loc 1 2577 0
 9937 3c72 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9938 3c76 0346     		mov	r3, r0
 9939 3c78 40F20000 		movw	r0, #:lower16:.LC487
 9940 3c7c C0F20000 		movt	r0, #:upper16:.LC487
 9941 3c80 1946     		mov	r1, r3
 9942 3c82 FFF7FEFF 		bl	printf
2578:.\console.c   **** 						printf(" RATIO=%1.4f[step/lsb]",(float)pan_absolute_sensor.ratio_tmp);
 9943              		.loc 1 2578 0
 9944 3c86 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9945 3c8a C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9946 3c8e 9B6A     		ldr	r3, [r3, #40]	@ float
 9947 3c90 1846     		mov	r0, r3
 9948 3c92 FFF7FEFF 		bl	__aeabi_f2d
 9949 3c96 0246     		mov	r2, r0
 9950 3c98 0B46     		mov	r3, r1
 9951 3c9a 40F20000 		movw	r0, #:lower16:.LC488
 9952 3c9e C0F20000 		movt	r0, #:upper16:.LC488
 9953 3ca2 FFF7FEFF 		bl	printf
2579:.\console.c   **** 						printf("\r\n");
 9954              		.loc 1 2579 0
 9955 3ca6 40F20000 		movw	r0, #:lower16:.LC42
 9956 3caa C0F20000 		movt	r0, #:upper16:.LC42
 9957 3cae FFF7FEFF 		bl	puts
2580:.\console.c   **** 						
2581:.\console.c   **** //						/******************************************************/
2582:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2583:.\console.c   **** //						/******************************************************/
2584:.\console.c   **** //						CyWdtClear();						
2585:.\console.c   **** 					
2586:.\console.c   **** 						/* internal one-key reset & sample */
2587:.\console.c   **** 						get_key = UART_USB_GetChar();	/* get the char */
 9958              		.loc 1 2587 0
 9959 3cb2 FFF7FEFF 		bl	UART_USB_GetChar
 9960 3cb6 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 272


 9961 3cb8 87F81231 		strb	r3, [r7, #274]
2588:.\console.c   **** 						if 	((get_key == 'r') || (get_key == 'R'))
 9962              		.loc 1 2588 0
 9963 3cbc 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9964 3cc0 722B     		cmp	r3, #114
 9965 3cc2 03D0     		beq	.L359
 9966              		.loc 1 2588 0 is_stmt 0 discriminator 1
 9967 3cc4 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9968 3cc8 522B     		cmp	r3, #82
 9969 3cca 1CD1     		bne	.L360
 9970              	.L359:
2589:.\console.c   **** 						{	
2590:.\console.c   **** 							pan_absolute_sensor.slave_encoder_step_p0 = (int32)QuadDec_PAN_GetCounter();/* Encoder Point
 9971              		.loc 1 2590 0 is_stmt 1
 9972 3ccc FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9973 3cd0 0246     		mov	r2, r0
 9974 3cd2 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9975 3cd6 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9976 3cda 9A61     		str	r2, [r3, #24]
2591:.\console.c   **** 							pan_absolute_sensor.raw_adc_p0            = (int32)AdcValue[HOME_PAN_ABSV];	/* ABS Sensor AD
 9977              		.loc 1 2591 0
 9978 3cdc 40F20003 		movw	r3, #:lower16:AdcValue
 9979 3ce0 C0F20003 		movt	r3, #:upper16:AdcValue
 9980 3ce4 9B89     		ldrh	r3, [r3, #12]
 9981 3ce6 1AB2     		sxth	r2, r3
 9982 3ce8 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9983 3cec C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9984 3cf0 DA61     		str	r2, [r3, #28]
2592:.\console.c   **** 						
2593:.\console.c   **** 							printf("\r\n*!point 0 sampling\r\n\r\n");	
 9985              		.loc 1 2593 0
 9986 3cf2 40F20000 		movw	r0, #:lower16:.LC489
 9987 3cf6 C0F20000 		movt	r0, #:upper16:.LC489
 9988 3cfa FFF7FEFF 		bl	puts
2594:.\console.c   **** 							get_key = 0; //stay in while loop
 9989              		.loc 1 2594 0
 9990 3cfe 4FF00003 		mov	r3, #0
 9991 3d02 87F81231 		strb	r3, [r7, #274]
 9992              	.L360:
2595:.\console.c   **** 						}
2596:.\console.c   **** 						
2597:.\console.c   **** //						/******************************************************/
2598:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2599:.\console.c   **** //						/******************************************************/
2600:.\console.c   **** //						CyWdtClear();							
2601:.\console.c   **** 						
2602:.\console.c   **** 						/* internal one-key pot ratio calc */
2603:.\console.c   **** 						if 	((get_key == 's') || (get_key == 'S'))
 9993              		.loc 1 2603 0
 9994 3d06 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9995 3d0a 732B     		cmp	r3, #115
 9996 3d0c 03D0     		beq	.L361
 9997              		.loc 1 2603 0 is_stmt 0 discriminator 1
 9998 3d0e 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9999 3d12 532B     		cmp	r3, #83
 10000 3d14 46D1     		bne	.L362
 10001              	.L361:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 273


2604:.\console.c   **** 						{							
2605:.\console.c   **** 							pan_absolute_sensor.sample_d1 = (float)((int32)QuadDec_PAN_GetCounter() - pan_absolute_senso
 10002              		.loc 1 2605 0 is_stmt 1
 10003 3d16 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 10004 3d1a 0246     		mov	r2, r0
 10005 3d1c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10006 3d20 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10007 3d24 9B69     		ldr	r3, [r3, #24]
 10008 3d26 D31A     		subs	r3, r2, r3
 10009 3d28 1846     		mov	r0, r3
 10010 3d2a FFF7FEFF 		bl	__aeabi_i2f
 10011 3d2e 0246     		mov	r2, r0
 10012 3d30 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10013 3d34 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10014 3d38 1A62     		str	r2, [r3, #32]	@ float
2606:.\console.c   **** 							pan_absolute_sensor.sample_d2 = (float)((int32)AdcValue[HOME_PAN_ABSV]  - pan_absolute_senso
 10015              		.loc 1 2606 0
 10016 3d3a 40F20003 		movw	r3, #:lower16:AdcValue
 10017 3d3e C0F20003 		movt	r3, #:upper16:AdcValue
 10018 3d42 9B89     		ldrh	r3, [r3, #12]
 10019 3d44 1AB2     		sxth	r2, r3
 10020 3d46 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10021 3d4a C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10022 3d4e DB69     		ldr	r3, [r3, #28]
 10023 3d50 D31A     		subs	r3, r2, r3
 10024 3d52 1846     		mov	r0, r3
 10025 3d54 FFF7FEFF 		bl	__aeabi_i2f
 10026 3d58 0246     		mov	r2, r0
 10027 3d5a 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10028 3d5e C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10029 3d62 5A62     		str	r2, [r3, #36]	@ float
2607:.\console.c   **** 							pan_absolute_sensor.ratio_tmp = fabs(pan_absolute_sensor.sample_d1 / pan_absolute_sensor.sam
 10030              		.loc 1 2607 0
 10031 3d64 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10032 3d68 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10033 3d6c 1A6A     		ldr	r2, [r3, #32]	@ float
 10034 3d6e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10035 3d72 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10036 3d76 5B6A     		ldr	r3, [r3, #36]	@ float
 10037 3d78 1046     		mov	r0, r2
 10038 3d7a 1946     		mov	r1, r3
 10039 3d7c FFF7FEFF 		bl	__aeabi_fdiv
 10040 3d80 0346     		mov	r3, r0
 10041 3d82 23F00042 		bic	r2, r3, #-2147483648
 10042 3d86 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10043 3d8a C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10044 3d8e 9A62     		str	r2, [r3, #40]	@ float
2608:.\console.c   **** 						
2609:.\console.c   **** 							printf("\r\n*!enc over abs ratio sampled\r\n\r\n");	
 10045              		.loc 1 2609 0
 10046 3d90 40F20000 		movw	r0, #:lower16:.LC490
 10047 3d94 C0F20000 		movt	r0, #:upper16:.LC490
 10048 3d98 FFF7FEFF 		bl	puts
2610:.\console.c   **** 							get_key = 0; //stay in while loop
 10049              		.loc 1 2610 0
 10050 3d9c 4FF00003 		mov	r3, #0
 10051 3da0 87F81231 		strb	r3, [r7, #274]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 274


 10052              	.L362:
2611:.\console.c   **** 						}
2612:.\console.c   **** 						
2613:.\console.c   **** //						/******************************************************/
2614:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2615:.\console.c   **** //						/******************************************************/
2616:.\console.c   **** //						CyWdtClear();	
2617:.\console.c   **** 						
2618:.\console.c   **** 						/* internal one-key pot ratio eeprom save */
2619:.\console.c   **** 						if 	((get_key == 'e') || (get_key == 'E'))
 10053              		.loc 1 2619 0
 10054 3da4 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10055 3da8 652B     		cmp	r3, #101
 10056 3daa 03D0     		beq	.L363
 10057              		.loc 1 2619 0 is_stmt 0 discriminator 1
 10058 3dac 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10059 3db0 452B     		cmp	r3, #69
 10060 3db2 19D1     		bne	.L358
 10061              	.L363:
2620:.\console.c   **** 						{	
2621:.\console.c   **** 							/* update global parameters */
2622:.\console.c   **** 							pan_absolute_sensor.param.step_over_abs_ratio.fnum = pan_absolute_sensor.ratio_tmp;
 10062              		.loc 1 2622 0 is_stmt 1
 10063 3db4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10064 3db8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10065 3dbc 9A6A     		ldr	r2, [r3, #40]	@ float
 10066 3dbe 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10067 3dc2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10068 3dc6 9A63     		str	r2, [r3, #56]	@ float
2623:.\console.c   **** 							
2624:.\console.c   **** 							goto PsavetoEE;
 10069              		.loc 1 2624 0
 10070 3dc8 00BF     		nop
 10071              	.L364:
2625:.\console.c   **** 						}						
2626:.\console.c   **** 					}
2627:.\console.c   **** 				}				
2628:.\console.c   **** 				
2629:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
2630:.\console.c   **** 		
2631:.\console.c   **** 				goto exitpars;	
2632:.\console.c   **** PsavetoEE:
2633:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/	
 10072              		.loc 1 2633 0
 10073 3dca FFF7FEFF 		bl	isr_CTRL_Start
2634:.\console.c   **** 				
2635:.\console.c   **** 				/* Update EEPROM */
2636:.\console.c   **** 				dummy = WriteAllEEparams();
 10074              		.loc 1 2636 0
 10075 3dce FFF7FEFF 		bl	WriteAllEEparams
 10076 3dd2 0346     		mov	r3, r0
 10077 3dd4 87F8D930 		strb	r3, [r7, #217]
2637:.\console.c   **** 										
2638:.\console.c   **** 				printf("\r\n*!Absolute Sensor ratio PAN eeprom saved\r\n\r\n");	
 10078              		.loc 1 2638 0
 10079 3dd8 40F20000 		movw	r0, #:lower16:.LC491
 10080 3ddc C0F20000 		movt	r0, #:upper16:.LC491
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 275


 10081 3de0 FFF7FEFF 		bl	puts
2639:.\console.c   **** 				goto exitpars;				
 10082              		.loc 1 2639 0
 10083 3de4 03F076BB 		b	.L131
 10084              	.L358:
2574:.\console.c   **** 					while (get_key == 0)						
 10085              		.loc 1 2574 0 discriminator 1
 10086 3de8 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10087 3dec 002B     		cmp	r3, #0
 10088 3dee 3FF433AF 		beq	.L365
 10089              	.L357:
2629:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
 10090              		.loc 1 2629 0
 10091 3df2 FFF7FEFF 		bl	isr_CTRL_Start
2631:.\console.c   **** 				goto exitpars;	
 10092              		.loc 1 2631 0
 10093 3df6 03F06DBB 		b	.L131
 10094              	.L356:
2640:.\console.c   **** 			}		
2641:.\console.c   **** 			// END SHOW ABS RATIO PAN				
2642:.\console.c   **** 			
2643:.\console.c   **** 			
2644:.\console.c   **** 			// SHOW ABS RATIO TILT
2645:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "ratioabst") == 0)	
 10095              		.loc 1 2645 0
 10096 3dfa BB48     		ldr	r0, .L747
 10097 3dfc 40F20001 		movw	r1, #:lower16:.LC492
 10098 3e00 C0F20001 		movt	r1, #:upper16:.LC492
 10099 3e04 FFF7FEFF 		bl	strcmp
 10100 3e08 0346     		mov	r3, r0
 10101 3e0a 002B     		cmp	r3, #0
 10102 3e0c 0AD0     		beq	.L366
2646:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ratiot") == 0))
 10103              		.loc 1 2646 0
 10104 3e0e B648     		ldr	r0, .L747
 10105 3e10 40F20001 		movw	r1, #:lower16:.LC493
 10106 3e14 C0F20001 		movt	r1, #:upper16:.LC493
 10107 3e18 FFF7FEFF 		bl	strcmp
 10108 3e1c 0346     		mov	r3, r0
 10109 3e1e 002B     		cmp	r3, #0
 10110 3e20 40F0FF80 		bne	.L367
 10111              	.L366:
2647:.\console.c   **** 			{
2648:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 10112              		.loc 1 2648 0
 10113 3e24 40F20000 		movw	r0, #:lower16:.LC431
 10114 3e28 C0F20000 		movt	r0, #:upper16:.LC431
 10115 3e2c FFF7FEFF 		bl	puts
2649:.\console.c   **** 				printf(STR_SHOWENCFC);			//
 10116              		.loc 1 2649 0
 10117 3e30 40F20000 		movw	r0, #:lower16:.LC485
 10118 3e34 C0F20000 		movt	r0, #:upper16:.LC485
 10119 3e38 FFF7FEFF 		bl	printf
2650:.\console.c   **** 			
2651:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 10120              		.loc 1 2651 0
 10121 3e3c 4FF00100 		mov	r0, #1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 276


 10122 3e40 FFF7FEFF 		bl	ButtonYNChoice
 10123 3e44 0346     		mov	r3, r0
 10124 3e46 012B     		cmp	r3, #1
 10125 3e48 40F0E780 		bne	.L368
2652:.\console.c   **** 				{
2653:.\console.c   **** 					isr_CTRL_Stop();					/* Stop Control ISR			*/	
 10126              		.loc 1 2653 0
 10127 3e4c FFF7FEFF 		bl	isr_CTRL_Stop
2654:.\console.c   **** 					motor_init(&pan_axis);				/* Initialize Pan Axis  	*/
 10128              		.loc 1 2654 0
 10129 3e50 40F20000 		movw	r0, #:lower16:pan_axis
 10130 3e54 C0F20000 		movt	r0, #:upper16:pan_axis
 10131 3e58 FFF7FEFF 		bl	motor_init
2655:.\console.c   **** 					motor_init(&tilt_axis);				/* Initialize Tilt Axis 	*/
 10132              		.loc 1 2655 0
 10133 3e5c 40F20000 		movw	r0, #:lower16:tilt_axis
 10134 3e60 C0F20000 		movt	r0, #:upper16:tilt_axis
 10135 3e64 FFF7FEFF 		bl	motor_init
2656:.\console.c   **** 					
2657:.\console.c   **** 					tilt_absolute_sensor.ratio_tmp = 0;	//clear temporary ratio value
 10136              		.loc 1 2657 0
 10137 3e68 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10138 3e6c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10139 3e70 4FF00002 		mov	r2, #0
 10140 3e74 9A62     		str	r2, [r3, #40]	@ float
2658:.\console.c   **** 					get_key = 0;						//clear internal loop getted char
 10141              		.loc 1 2658 0
 10142 3e76 4FF00003 		mov	r3, #0
 10143 3e7a 87F81231 		strb	r3, [r7, #274]
2659:.\console.c   **** 					
2660:.\console.c   **** 					while (get_key == 0)						
 10144              		.loc 1 2660 0
 10145 3e7e C7E0     		b	.L369
 10146              	.L376:
2661:.\console.c   **** 					{						
2662:.\console.c   **** 						printf("TILT: ABS_SENSOR=%5i[lsb]", (int16)AdcValue[HOME_TILT_ABSV]);
 10147              		.loc 1 2662 0
 10148 3e80 40F20003 		movw	r3, #:lower16:AdcValue
 10149 3e84 C0F20003 		movt	r3, #:upper16:AdcValue
 10150 3e88 DB89     		ldrh	r3, [r3, #14]
 10151 3e8a 1BB2     		sxth	r3, r3
 10152 3e8c 40F20000 		movw	r0, #:lower16:.LC494
 10153 3e90 C0F20000 		movt	r0, #:upper16:.LC494
 10154 3e94 1946     		mov	r1, r3
 10155 3e96 FFF7FEFF 		bl	printf
2663:.\console.c   **** 						printf(" ENC=%9li[step]", (int32)QuadDec_TILT_GetCounter());	
 10156              		.loc 1 2663 0
 10157 3e9a FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 10158 3e9e 0346     		mov	r3, r0
 10159 3ea0 40F20000 		movw	r0, #:lower16:.LC487
 10160 3ea4 C0F20000 		movt	r0, #:upper16:.LC487
 10161 3ea8 1946     		mov	r1, r3
 10162 3eaa FFF7FEFF 		bl	printf
2664:.\console.c   **** 						printf(" RATIO=%1.4f[step/lsb]",(float)tilt_absolute_sensor.ratio_tmp);
 10163              		.loc 1 2664 0
 10164 3eae 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10165 3eb2 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 277


 10166 3eb6 9B6A     		ldr	r3, [r3, #40]	@ float
 10167 3eb8 1846     		mov	r0, r3
 10168 3eba FFF7FEFF 		bl	__aeabi_f2d
 10169 3ebe 0246     		mov	r2, r0
 10170 3ec0 0B46     		mov	r3, r1
 10171 3ec2 40F20000 		movw	r0, #:lower16:.LC488
 10172 3ec6 C0F20000 		movt	r0, #:upper16:.LC488
 10173 3eca FFF7FEFF 		bl	printf
2665:.\console.c   **** 						printf("\r\n");
 10174              		.loc 1 2665 0
 10175 3ece 40F20000 		movw	r0, #:lower16:.LC42
 10176 3ed2 C0F20000 		movt	r0, #:upper16:.LC42
 10177 3ed6 FFF7FEFF 		bl	puts
2666:.\console.c   **** 						
2667:.\console.c   **** //						/******************************************************/
2668:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2669:.\console.c   **** //						/******************************************************/
2670:.\console.c   **** //						CyWdtClear();						
2671:.\console.c   **** 					
2672:.\console.c   **** 						/* internal one-key reset & sample */
2673:.\console.c   **** 						get_key = UART_USB_GetChar();	/* get the char */
 10178              		.loc 1 2673 0
 10179 3eda FFF7FEFF 		bl	UART_USB_GetChar
 10180 3ede 0346     		mov	r3, r0
 10181 3ee0 87F81231 		strb	r3, [r7, #274]
2674:.\console.c   **** 						if 	((get_key == 'r') || (get_key == 'R'))
 10182              		.loc 1 2674 0
 10183 3ee4 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10184 3ee8 722B     		cmp	r3, #114
 10185 3eea 03D0     		beq	.L370
 10186              		.loc 1 2674 0 is_stmt 0 discriminator 1
 10187 3eec 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10188 3ef0 522B     		cmp	r3, #82
 10189 3ef2 1CD1     		bne	.L371
 10190              	.L370:
2675:.\console.c   **** 						{	
2676:.\console.c   **** 							tilt_absolute_sensor.slave_encoder_step_p0 = (int32)QuadDec_TILT_GetCounter();	/* Encoder Po
 10191              		.loc 1 2676 0 is_stmt 1
 10192 3ef4 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 10193 3ef8 0246     		mov	r2, r0
 10194 3efa 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10195 3efe C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10196 3f02 9A61     		str	r2, [r3, #24]
2677:.\console.c   **** 							tilt_absolute_sensor.raw_adc_p0            = (int32)AdcValue[HOME_TILT_ABSV];	/* ABS Sensor 
 10197              		.loc 1 2677 0
 10198 3f04 40F20003 		movw	r3, #:lower16:AdcValue
 10199 3f08 C0F20003 		movt	r3, #:upper16:AdcValue
 10200 3f0c DB89     		ldrh	r3, [r3, #14]
 10201 3f0e 1AB2     		sxth	r2, r3
 10202 3f10 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10203 3f14 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10204 3f18 DA61     		str	r2, [r3, #28]
2678:.\console.c   **** 						
2679:.\console.c   **** 							printf("\r\n*!point 0 sampling\r\n\r\n");	
 10205              		.loc 1 2679 0
 10206 3f1a 40F20000 		movw	r0, #:lower16:.LC489
 10207 3f1e C0F20000 		movt	r0, #:upper16:.LC489
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 278


 10208 3f22 FFF7FEFF 		bl	puts
2680:.\console.c   **** 							get_key = 0; //stay in while loop
 10209              		.loc 1 2680 0
 10210 3f26 4FF00003 		mov	r3, #0
 10211 3f2a 87F81231 		strb	r3, [r7, #274]
 10212              	.L371:
2681:.\console.c   **** 						}
2682:.\console.c   **** 						
2683:.\console.c   **** //						/******************************************************/
2684:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2685:.\console.c   **** //						/******************************************************/
2686:.\console.c   **** //						CyWdtClear();							
2687:.\console.c   **** 						
2688:.\console.c   **** 						/* internal one-key pot ratio calc */
2689:.\console.c   **** 						if 	((get_key == 's') || (get_key == 'S'))
 10213              		.loc 1 2689 0
 10214 3f2e 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10215 3f32 732B     		cmp	r3, #115
 10216 3f34 03D0     		beq	.L372
 10217              		.loc 1 2689 0 is_stmt 0 discriminator 1
 10218 3f36 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10219 3f3a 532B     		cmp	r3, #83
 10220 3f3c 46D1     		bne	.L373
 10221              	.L372:
2690:.\console.c   **** 						{							
2691:.\console.c   **** 							tilt_absolute_sensor.sample_d1 = (float)((int32)QuadDec_TILT_GetCounter() - tilt_absolute_se
 10222              		.loc 1 2691 0 is_stmt 1
 10223 3f3e FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 10224 3f42 0246     		mov	r2, r0
 10225 3f44 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10226 3f48 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10227 3f4c 9B69     		ldr	r3, [r3, #24]
 10228 3f4e D31A     		subs	r3, r2, r3
 10229 3f50 1846     		mov	r0, r3
 10230 3f52 FFF7FEFF 		bl	__aeabi_i2f
 10231 3f56 0246     		mov	r2, r0
 10232 3f58 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10233 3f5c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10234 3f60 1A62     		str	r2, [r3, #32]	@ float
2692:.\console.c   **** 							tilt_absolute_sensor.sample_d2 = (float)((int32)AdcValue[HOME_TILT_ABSV]  - tilt_absolute_se
 10235              		.loc 1 2692 0
 10236 3f62 40F20003 		movw	r3, #:lower16:AdcValue
 10237 3f66 C0F20003 		movt	r3, #:upper16:AdcValue
 10238 3f6a DB89     		ldrh	r3, [r3, #14]
 10239 3f6c 1AB2     		sxth	r2, r3
 10240 3f6e 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10241 3f72 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10242 3f76 DB69     		ldr	r3, [r3, #28]
 10243 3f78 D31A     		subs	r3, r2, r3
 10244 3f7a 1846     		mov	r0, r3
 10245 3f7c FFF7FEFF 		bl	__aeabi_i2f
 10246 3f80 0246     		mov	r2, r0
 10247 3f82 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10248 3f86 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10249 3f8a 5A62     		str	r2, [r3, #36]	@ float
2693:.\console.c   **** 							tilt_absolute_sensor.ratio_tmp = fabs(tilt_absolute_sensor.sample_d1 / tilt_absolute_sensor.
 10250              		.loc 1 2693 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 279


 10251 3f8c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10252 3f90 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10253 3f94 1A6A     		ldr	r2, [r3, #32]	@ float
 10254 3f96 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10255 3f9a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10256 3f9e 5B6A     		ldr	r3, [r3, #36]	@ float
 10257 3fa0 1046     		mov	r0, r2
 10258 3fa2 1946     		mov	r1, r3
 10259 3fa4 FFF7FEFF 		bl	__aeabi_fdiv
 10260 3fa8 0346     		mov	r3, r0
 10261 3faa 23F00042 		bic	r2, r3, #-2147483648
 10262 3fae 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10263 3fb2 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10264 3fb6 9A62     		str	r2, [r3, #40]	@ float
2694:.\console.c   **** 						
2695:.\console.c   **** 							printf("\r\n*!enc over abs ratio sampled\r\n\r\n");	
 10265              		.loc 1 2695 0
 10266 3fb8 40F20000 		movw	r0, #:lower16:.LC490
 10267 3fbc C0F20000 		movt	r0, #:upper16:.LC490
 10268 3fc0 FFF7FEFF 		bl	puts
2696:.\console.c   **** 							get_key = 0; //stay in while loop
 10269              		.loc 1 2696 0
 10270 3fc4 4FF00003 		mov	r3, #0
 10271 3fc8 87F81231 		strb	r3, [r7, #274]
 10272              	.L373:
2697:.\console.c   **** 						}
2698:.\console.c   **** 						
2699:.\console.c   **** //						/******************************************************/
2700:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2701:.\console.c   **** //						/******************************************************/
2702:.\console.c   **** //						CyWdtClear();	
2703:.\console.c   **** 						
2704:.\console.c   **** 						/* internal one-key pot ratio eeprom save */
2705:.\console.c   **** 						if 	((get_key == 'e') || (get_key == 'E'))
 10273              		.loc 1 2705 0
 10274 3fcc 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10275 3fd0 652B     		cmp	r3, #101
 10276 3fd2 03D0     		beq	.L374
 10277              		.loc 1 2705 0 is_stmt 0 discriminator 1
 10278 3fd4 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10279 3fd8 452B     		cmp	r3, #69
 10280 3fda 19D1     		bne	.L369
 10281              	.L374:
2706:.\console.c   **** 						{	
2707:.\console.c   **** 							/* update global parameters */
2708:.\console.c   **** 							tilt_absolute_sensor.param.step_over_abs_ratio.fnum = tilt_absolute_sensor.ratio_tmp;
 10282              		.loc 1 2708 0 is_stmt 1
 10283 3fdc 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10284 3fe0 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10285 3fe4 9A6A     		ldr	r2, [r3, #40]	@ float
 10286 3fe6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10287 3fea C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10288 3fee 9A63     		str	r2, [r3, #56]	@ float
2709:.\console.c   **** 							
2710:.\console.c   **** 							goto TsavetoEE;
 10289              		.loc 1 2710 0
 10290 3ff0 00BF     		nop
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 280


 10291              	.L375:
2711:.\console.c   **** 						}						
2712:.\console.c   **** 					}
2713:.\console.c   **** 				}				
2714:.\console.c   **** 				
2715:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
2716:.\console.c   **** 		
2717:.\console.c   **** 				goto exitpars;	
2718:.\console.c   **** TsavetoEE:
2719:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/	
 10292              		.loc 1 2719 0
 10293 3ff2 FFF7FEFF 		bl	isr_CTRL_Start
2720:.\console.c   **** 				
2721:.\console.c   **** 				/* Update EEPROM */
2722:.\console.c   **** 				dummy = WriteAllEEparams();
 10294              		.loc 1 2722 0
 10295 3ff6 FFF7FEFF 		bl	WriteAllEEparams
 10296 3ffa 0346     		mov	r3, r0
 10297 3ffc 87F8D930 		strb	r3, [r7, #217]
2723:.\console.c   **** 										
2724:.\console.c   **** 				printf("\r\n*!Absolute Sensor ratio TILT eeprom saved\r\n\r\n");	
 10298              		.loc 1 2724 0
 10299 4000 40F20000 		movw	r0, #:lower16:.LC495
 10300 4004 C0F20000 		movt	r0, #:upper16:.LC495
 10301 4008 FFF7FEFF 		bl	puts
2725:.\console.c   **** 				goto exitpars;				
 10302              		.loc 1 2725 0
 10303 400c 03F062BA 		b	.L131
 10304              	.L369:
2660:.\console.c   **** 					while (get_key == 0)						
 10305              		.loc 1 2660 0 discriminator 1
 10306 4010 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 10307 4014 002B     		cmp	r3, #0
 10308 4016 3FF433AF 		beq	.L376
 10309              	.L368:
2715:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
 10310              		.loc 1 2715 0
 10311 401a FFF7FEFF 		bl	isr_CTRL_Start
2717:.\console.c   **** 				goto exitpars;	
 10312              		.loc 1 2717 0
 10313 401e 03F059BA 		b	.L131
 10314              	.L367:
2726:.\console.c   **** 			}		
2727:.\console.c   **** 			// END SHOW ABS RATIO TILT	
2728:.\console.c   **** 			
2729:.\console.c   **** 			
2730:.\console.c   **** 			// SHOW FAULTS
2731:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "faults") == 0)	
 10315              		.loc 1 2731 0
 10316 4022 3148     		ldr	r0, .L747
 10317 4024 40F20001 		movw	r1, #:lower16:.LC496
 10318 4028 C0F20001 		movt	r1, #:upper16:.LC496
 10319 402c FFF7FEFF 		bl	strcmp
 10320 4030 0346     		mov	r3, r0
 10321 4032 002B     		cmp	r3, #0
 10322 4034 09D0     		beq	.L377
2732:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "fault") == 0))	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 281


 10323              		.loc 1 2732 0
 10324 4036 2C48     		ldr	r0, .L747
 10325 4038 40F20001 		movw	r1, #:lower16:.LC497
 10326 403c C0F20001 		movt	r1, #:upper16:.LC497
 10327 4040 FFF7FEFF 		bl	strcmp
 10328 4044 0346     		mov	r3, r0
 10329 4046 002B     		cmp	r3, #0
 10330 4048 50D1     		bne	.L378
 10331              	.L377:
2733:.\console.c   **** 			{
2734:.\console.c   **** 				if (gobeeFaults.general == GEN_NOFAULTS)
 10332              		.loc 1 2734 0
 10333 404a 40F20003 		movw	r3, #:lower16:gobeeFaults
 10334 404e C0F20003 		movt	r3, #:upper16:gobeeFaults
 10335 4052 1B88     		ldrh	r3, [r3, #0]
 10336 4054 002B     		cmp	r3, #0
 10337 4056 07D1     		bne	.L379
2735:.\console.c   **** 				{
2736:.\console.c   **** 					printf(STR_FULT0);   /* NONE: ALL OK! */
 10338              		.loc 1 2736 0
 10339 4058 40F20000 		movw	r0, #:lower16:.LC498
 10340 405c C0F20000 		movt	r0, #:upper16:.LC498
 10341 4060 FFF7FEFF 		bl	puts
2737:.\console.c   **** 				}
2738:.\console.c   **** 				else
2739:.\console.c   **** 				{
2740:.\console.c   **** //					if ((sysFaults.general & GEN_FUSE_FAULT) == GEN_FUSE_FAULT)
2741:.\console.c   **** //					{
2742:.\console.c   **** //						printf(STR_FULT1);   /* @FAULT: FUSE OPEN! */
2743:.\console.c   **** //					}
2744:.\console.c   **** //					else
2745:.\console.c   **** //					{
2746:.\console.c   **** //						if ((sysFaults.general & GEN_LOWVCC_FAULT) == GEN_LOWVCC_FAULT)
2747:.\console.c   **** //						{
2748:.\console.c   **** //							printf(STR_FULT2);   /* @FAULT: LOW VCC! (VCC<11V) */
2749:.\console.c   **** //						}
2750:.\console.c   **** //					}
2751:.\console.c   **** 					
2752:.\console.c   **** 					if ((gobeeFaults.general & GEN_PAN_FAULT) == GEN_PAN_FAULT)
2753:.\console.c   **** 					{
2754:.\console.c   **** 						printf(STR_FULTP);   		/* @FAULT#01: GENERAL PAN FAULT */
2755:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
2756:.\console.c   **** 						{
2757:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
2758:.\console.c   **** 						}							
2759:.\console.c   **** 					}		
2760:.\console.c   **** 					
2761:.\console.c   **** 					if ((gobeeFaults.general & GEN_TILT_FAULT) == GEN_TILT_FAULT)
2762:.\console.c   **** 					{
2763:.\console.c   **** 						printf(STR_FULTT);   		/* @FAULT#02: GENERAL TILT FAULT */
2764:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
2765:.\console.c   **** 						{
2766:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
2767:.\console.c   **** 						}							
2768:.\console.c   **** 					}					
2769:.\console.c   **** 				}
2770:.\console.c   **** 				goto exitpars;
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 282


 10342              		.loc 1 2770 0
 10343 4064 03F02DBA 		b	.L712
 10344              	.L379:
2752:.\console.c   **** 					if ((gobeeFaults.general & GEN_PAN_FAULT) == GEN_PAN_FAULT)
 10345              		.loc 1 2752 0
 10346 4068 40F20003 		movw	r3, #:lower16:gobeeFaults
 10347 406c C0F20003 		movt	r3, #:upper16:gobeeFaults
 10348 4070 1B88     		ldrh	r3, [r3, #0]
 10349 4072 03F00803 		and	r3, r3, #8
 10350 4076 002B     		cmp	r3, #0
 10351 4078 14D0     		beq	.L381
2754:.\console.c   **** 						printf(STR_FULTP);   		/* @FAULT#01: GENERAL PAN FAULT */
 10352              		.loc 1 2754 0
 10353 407a 40F20000 		movw	r0, #:lower16:.LC499
 10354 407e C0F20000 		movt	r0, #:upper16:.LC499
 10355 4082 FFF7FEFF 		bl	puts
2755:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
 10356              		.loc 1 2755 0
 10357 4086 40F20003 		movw	r3, #:lower16:gobeeFaults
 10358 408a C0F20003 		movt	r3, #:upper16:gobeeFaults
 10359 408e 1B88     		ldrh	r3, [r3, #0]
 10360 4090 03F00203 		and	r3, r3, #2
 10361 4094 002B     		cmp	r3, #0
 10362 4096 05D0     		beq	.L381
2757:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
 10363              		.loc 1 2757 0
 10364 4098 40F20000 		movw	r0, #:lower16:.LC500
 10365 409c C0F20000 		movt	r0, #:upper16:.LC500
 10366 40a0 FFF7FEFF 		bl	puts
 10367              	.L381:
2761:.\console.c   **** 					if ((gobeeFaults.general & GEN_TILT_FAULT) == GEN_TILT_FAULT)
 10368              		.loc 1 2761 0
 10369 40a4 40F20003 		movw	r3, #:lower16:gobeeFaults
 10370 40a8 C0F20003 		movt	r3, #:upper16:gobeeFaults
 10371 40ac 1B88     		ldrh	r3, [r3, #0]
 10372 40ae 03F01003 		and	r3, r3, #16
 10373 40b2 002B     		cmp	r3, #0
 10374 40b4 03F00582 		beq	.L712
2763:.\console.c   **** 						printf(STR_FULTT);   		/* @FAULT#02: GENERAL TILT FAULT */
 10375              		.loc 1 2763 0
 10376 40b8 40F20000 		movw	r0, #:lower16:.LC501
 10377 40bc C0F20000 		movt	r0, #:upper16:.LC501
 10378 40c0 FFF7FEFF 		bl	puts
2764:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
 10379              		.loc 1 2764 0
 10380 40c4 40F20003 		movw	r3, #:lower16:gobeeFaults
 10381 40c8 C0F20003 		movt	r3, #:upper16:gobeeFaults
 10382 40cc 1B88     		ldrh	r3, [r3, #0]
 10383 40ce 03F00203 		and	r3, r3, #2
 10384 40d2 002B     		cmp	r3, #0
 10385 40d4 03F0F581 		beq	.L712
2766:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
 10386              		.loc 1 2766 0
 10387 40d8 40F20000 		movw	r0, #:lower16:.LC500
 10388 40dc C0F20000 		movt	r0, #:upper16:.LC500
 10389 40e0 FFF7FEFF 		bl	puts
 10390              		.loc 1 2770 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 283


 10391 40e4 03F0EDB9 		b	.L712
 10392              	.L748:
 10393              		.align	2
 10394              	.L747:
 10395 40e8 0F000000 		.word	actual_cmd+15
 10396              	.L378:
2771:.\console.c   **** 			}
2772:.\console.c   **** 			
2773:.\console.c   **** 			
2774:.\console.c   **** 			// SHOW PARAMS
2775:.\console.c   **** 			if (((strcmp(actual_cmd.parameter, "params") == 0))
 10397              		.loc 1 2775 0
 10398 40ec 0A48     		ldr	r0, .L749
 10399 40ee 40F20001 		movw	r1, #:lower16:.LC502
 10400 40f2 C0F20001 		movt	r1, #:upper16:.LC502
 10401 40f6 FFF7FEFF 		bl	strcmp
 10402 40fa 0346     		mov	r3, r0
 10403 40fc 002B     		cmp	r3, #0
 10404 40fe 0DD0     		beq	.L382
2776:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "p") == 0))
 10405              		.loc 1 2776 0
 10406 4100 0548     		ldr	r0, .L749
 10407 4102 40F20001 		movw	r1, #:lower16:.LC503
 10408 4106 C0F20001 		movt	r1, #:upper16:.LC503
 10409 410a FFF7FEFF 		bl	strcmp
 10410 410e 0346     		mov	r3, r0
 10411 4110 002B     		cmp	r3, #0
 10412 4112 43F0D881 		bne	.L713
 10413 4116 01E0     		b	.L750
 10414              	.L751:
 10415              		.align	2
 10416              	.L749:
 10417 4118 0F000000 		.word	actual_cmd+15
 10418              	.L750:
 10419              	.L382:
2777:.\console.c   **** 			{
2778:.\console.c   **** 				printf("GoBee DIRECTOR\r\n");
 10420              		.loc 1 2778 0
 10421 411c 40F20000 		movw	r0, #:lower16:.LC504
 10422 4120 C0F20000 		movt	r0, #:upper16:.LC504
 10423 4124 FFF7FEFF 		bl	puts
2779:.\console.c   **** 				printf("==============\r\n");
 10424              		.loc 1 2779 0
 10425 4128 40F20000 		movw	r0, #:lower16:.LC505
 10426 412c C0F20000 		movt	r0, #:upper16:.LC505
 10427 4130 FFF7FEFF 		bl	puts
2780:.\console.c   **** 				printf("Gobee Mode                   =%2u: ", gobee_param.mode);
 10428              		.loc 1 2780 0
 10429 4134 40F20003 		movw	r3, #:lower16:gobee_param
 10430 4138 C0F20003 		movt	r3, #:upper16:gobee_param
 10431 413c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10432 413e 40F20000 		movw	r0, #:lower16:.LC506
 10433 4142 C0F20000 		movt	r0, #:upper16:.LC506
 10434 4146 1946     		mov	r1, r3
 10435 4148 FFF7FEFF 		bl	printf
2781:.\console.c   **** 				ShowParamsMode();				
 10436              		.loc 1 2781 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 284


 10437 414c FFF7FEFF 		bl	ShowParamsMode
2782:.\console.c   **** 				printf("Gobee Selected Director      =%2u: ", gobee_param.director);
 10438              		.loc 1 2782 0
 10439 4150 40F20003 		movw	r3, #:lower16:gobee_param
 10440 4154 C0F20003 		movt	r3, #:upper16:gobee_param
 10441 4158 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 10442 415a 40F20000 		movw	r0, #:lower16:.LC507
 10443 415e C0F20000 		movt	r0, #:upper16:.LC507
 10444 4162 1946     		mov	r1, r3
 10445 4164 FFF7FEFF 		bl	printf
2783:.\console.c   **** 				ShowParamsDirector();			
 10446              		.loc 1 2783 0
 10447 4168 FFF7FEFF 		bl	ShowParamsDirector
2784:.\console.c   **** 				printf("\r\n");		
 10448              		.loc 1 2784 0
 10449 416c 40F20000 		movw	r0, #:lower16:.LC42
 10450 4170 C0F20000 		movt	r0, #:upper16:.LC42
 10451 4174 FFF7FEFF 		bl	puts
2785:.\console.c   **** 				printf("\r\n");					
 10452              		.loc 1 2785 0
 10453 4178 40F20000 		movw	r0, #:lower16:.LC42
 10454 417c C0F20000 		movt	r0, #:upper16:.LC42
 10455 4180 FFF7FEFF 		bl	puts
2786:.\console.c   **** 				
2787:.\console.c   **** 				printf("GoBee PARAMETER LIST\r\n");
 10456              		.loc 1 2787 0
 10457 4184 40F20000 		movw	r0, #:lower16:.LC508
 10458 4188 C0F20000 		movt	r0, #:upper16:.LC508
 10459 418c FFF7FEFF 		bl	puts
2788:.\console.c   **** 				printf("====================\r\n");
 10460              		.loc 1 2788 0
 10461 4190 40F20000 		movw	r0, #:lower16:.LC509
 10462 4194 C0F20000 		movt	r0, #:upper16:.LC509
 10463 4198 FFF7FEFF 		bl	puts
2789:.\console.c   **** 					
2790:.\console.c   **** 				//axis main params
2791:.\console.c   **** 				printf("Pan  Axis Resolution         = ");
 10464              		.loc 1 2791 0
 10465 419c 40F20000 		movw	r0, #:lower16:.LC510
 10466 41a0 C0F20000 		movt	r0, #:upper16:.LC510
 10467 41a4 FFF7FEFF 		bl	printf
2792:.\console.c   **** 				printf("%8.1f [step/2PI]",(float)(pan_axis.param.resolution.fnum));
 10468              		.loc 1 2792 0
 10469 41a8 40F20003 		movw	r3, #:lower16:pan_axis
 10470 41ac C0F20003 		movt	r3, #:upper16:pan_axis
 10471 41b0 DB68     		ldr	r3, [r3, #12]	@ float
 10472 41b2 1846     		mov	r0, r3
 10473 41b4 FFF7FEFF 		bl	__aeabi_f2d
 10474 41b8 0246     		mov	r2, r0
 10475 41ba 0B46     		mov	r3, r1
 10476 41bc 40F20000 		movw	r0, #:lower16:.LC511
 10477 41c0 C0F20000 		movt	r0, #:upper16:.LC511
 10478 41c4 FFF7FEFF 		bl	printf
2793:.\console.c   **** 				printf("\r\n");
 10479              		.loc 1 2793 0
 10480 41c8 40F20000 		movw	r0, #:lower16:.LC42
 10481 41cc C0F20000 		movt	r0, #:upper16:.LC42
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 285


 10482 41d0 FFF7FEFF 		bl	puts
2794:.\console.c   **** 				
2795:.\console.c   **** 				printf("Tilt Axis Resolution         = ");
 10483              		.loc 1 2795 0
 10484 41d4 40F20000 		movw	r0, #:lower16:.LC512
 10485 41d8 C0F20000 		movt	r0, #:upper16:.LC512
 10486 41dc FFF7FEFF 		bl	printf
2796:.\console.c   **** 				printf("%8.1f [step/2PI]",(float)(tilt_axis.param.resolution.fnum));
 10487              		.loc 1 2796 0
 10488 41e0 40F20003 		movw	r3, #:lower16:tilt_axis
 10489 41e4 C0F20003 		movt	r3, #:upper16:tilt_axis
 10490 41e8 DB68     		ldr	r3, [r3, #12]	@ float
 10491 41ea 1846     		mov	r0, r3
 10492 41ec FFF7FEFF 		bl	__aeabi_f2d
 10493 41f0 0246     		mov	r2, r0
 10494 41f2 0B46     		mov	r3, r1
 10495 41f4 40F20000 		movw	r0, #:lower16:.LC511
 10496 41f8 C0F20000 		movt	r0, #:upper16:.LC511
 10497 41fc FFF7FEFF 		bl	printf
2797:.\console.c   **** 				printf("\r\n");	
 10498              		.loc 1 2797 0
 10499 4200 40F20000 		movw	r0, #:lower16:.LC42
 10500 4204 C0F20000 		movt	r0, #:upper16:.LC42
 10501 4208 FFF7FEFF 		bl	puts
2798:.\console.c   **** 				printf("\r\n");
 10502              		.loc 1 2798 0
 10503 420c 40F20000 		movw	r0, #:lower16:.LC42
 10504 4210 C0F20000 		movt	r0, #:upper16:.LC42
 10505 4214 FFF7FEFF 		bl	puts
2799:.\console.c   **** 				
2800:.\console.c   **** 				
2801:.\console.c   **** 				printf("Motor Control\r\n");
 10506              		.loc 1 2801 0
 10507 4218 40F20000 		movw	r0, #:lower16:.LC513
 10508 421c C0F20000 		movt	r0, #:upper16:.LC513
 10509 4220 FFF7FEFF 		bl	puts
2802:.\console.c   **** 				printf("=============\r\n");		
 10510              		.loc 1 2802 0
 10511 4224 40F20000 		movw	r0, #:lower16:.LC514
 10512 4228 C0F20000 		movt	r0, #:upper16:.LC514
 10513 422c FFF7FEFF 		bl	puts
2803:.\console.c   **** 				
2804:.\console.c   **** 				//pan motor main params
2805:.\console.c   **** 				printf("Pan  Motor Polarity          = ");
 10514              		.loc 1 2805 0
 10515 4230 40F20000 		movw	r0, #:lower16:.LC515
 10516 4234 C0F20000 		movt	r0, #:upper16:.LC515
 10517 4238 FFF7FEFF 		bl	printf
2806:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(pan_axis.param.polarity));
 10518              		.loc 1 2806 0
 10519 423c 40F20003 		movw	r3, #:lower16:pan_axis
 10520 4240 C0F20003 		movt	r3, #:upper16:pan_axis
 10521 4244 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 10522 4246 40F20000 		movw	r0, #:lower16:.LC516
 10523 424a C0F20000 		movt	r0, #:upper16:.LC516
 10524 424e 1946     		mov	r1, r3
 10525 4250 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 286


2807:.\console.c   **** 				printf("\r\n");
 10526              		.loc 1 2807 0
 10527 4254 40F20000 		movw	r0, #:lower16:.LC42
 10528 4258 C0F20000 		movt	r0, #:upper16:.LC42
 10529 425c FFF7FEFF 		bl	puts
2808:.\console.c   **** 
2809:.\console.c   **** 				printf("Pan  Motor Kp                = ");
 10530              		.loc 1 2809 0
 10531 4260 40F20000 		movw	r0, #:lower16:.LC517
 10532 4264 C0F20000 		movt	r0, #:upper16:.LC517
 10533 4268 FFF7FEFF 		bl	printf
2810:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kpf.fnum));
 10534              		.loc 1 2810 0
 10535 426c 40F20003 		movw	r3, #:lower16:pan_axis
 10536 4270 C0F20003 		movt	r3, #:upper16:pan_axis
 10537 4274 5B69     		ldr	r3, [r3, #20]	@ float
 10538 4276 1846     		mov	r0, r3
 10539 4278 FFF7FEFF 		bl	__aeabi_f2d
 10540 427c 0246     		mov	r2, r0
 10541 427e 0B46     		mov	r3, r1
 10542 4280 40F20000 		movw	r0, #:lower16:.LC518
 10543 4284 C0F20000 		movt	r0, #:upper16:.LC518
 10544 4288 FFF7FEFF 		bl	printf
2811:.\console.c   **** 				printf("\r\n");
 10545              		.loc 1 2811 0
 10546 428c 40F20000 		movw	r0, #:lower16:.LC42
 10547 4290 C0F20000 		movt	r0, #:upper16:.LC42
 10548 4294 FFF7FEFF 		bl	puts
2812:.\console.c   **** 
2813:.\console.c   **** 				printf("Pan  Motor Kd                = ");
 10549              		.loc 1 2813 0
 10550 4298 40F20000 		movw	r0, #:lower16:.LC519
 10551 429c C0F20000 		movt	r0, #:upper16:.LC519
 10552 42a0 FFF7FEFF 		bl	printf
2814:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kdf.fnum));
 10553              		.loc 1 2814 0
 10554 42a4 40F20003 		movw	r3, #:lower16:pan_axis
 10555 42a8 C0F20003 		movt	r3, #:upper16:pan_axis
 10556 42ac 9B69     		ldr	r3, [r3, #24]	@ float
 10557 42ae 1846     		mov	r0, r3
 10558 42b0 FFF7FEFF 		bl	__aeabi_f2d
 10559 42b4 0246     		mov	r2, r0
 10560 42b6 0B46     		mov	r3, r1
 10561 42b8 40F20000 		movw	r0, #:lower16:.LC518
 10562 42bc C0F20000 		movt	r0, #:upper16:.LC518
 10563 42c0 FFF7FEFF 		bl	printf
2815:.\console.c   **** 				printf("\r\n");
 10564              		.loc 1 2815 0
 10565 42c4 40F20000 		movw	r0, #:lower16:.LC42
 10566 42c8 C0F20000 		movt	r0, #:upper16:.LC42
 10567 42cc FFF7FEFF 		bl	puts
2816:.\console.c   **** 
2817:.\console.c   **** 				printf("Pan  Motor Ki                = ");
 10568              		.loc 1 2817 0
 10569 42d0 40F20000 		movw	r0, #:lower16:.LC520
 10570 42d4 C0F20000 		movt	r0, #:upper16:.LC520
 10571 42d8 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 287


2818:.\console.c   **** 				ShowParamsKiPan();
 10572              		.loc 1 2818 0
 10573 42dc FFF7FEFF 		bl	ShowParamsKiPan
2819:.\console.c   **** 				printf("\r\n");
 10574              		.loc 1 2819 0
 10575 42e0 40F20000 		movw	r0, #:lower16:.LC42
 10576 42e4 C0F20000 		movt	r0, #:upper16:.LC42
 10577 42e8 FFF7FEFF 		bl	puts
2820:.\console.c   **** 				
2821:.\console.c   **** 				printf("Pan  Motor Ksi               = ");
 10578              		.loc 1 2821 0
 10579 42ec 40F20000 		movw	r0, #:lower16:.LC521
 10580 42f0 C0F20000 		movt	r0, #:upper16:.LC521
 10581 42f4 FFF7FEFF 		bl	printf
2822:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(pan_axis.param.Ksif.fnum),
 10582              		.loc 1 2822 0
 10583 42f8 40F20003 		movw	r3, #:lower16:pan_axis
 10584 42fc C0F20003 		movt	r3, #:upper16:pan_axis
 10585 4300 1B6A     		ldr	r3, [r3, #32]	@ float
 10586 4302 1846     		mov	r0, r3
 10587 4304 FFF7FEFF 		bl	__aeabi_f2d
 10588 4308 0446     		mov	r4, r0
 10589 430a 0D46     		mov	r5, r1
2823:.\console.c   **** 										   (float)(pan_axis.param.Ksif.fnum * pan_axis.param.Kif.fnum));
 10590              		.loc 1 2823 0
 10591 430c 40F20003 		movw	r3, #:lower16:pan_axis
 10592 4310 C0F20003 		movt	r3, #:upper16:pan_axis
 10593 4314 1A6A     		ldr	r2, [r3, #32]	@ float
 10594 4316 40F20003 		movw	r3, #:lower16:pan_axis
 10595 431a C0F20003 		movt	r3, #:upper16:pan_axis
 10596 431e DB69     		ldr	r3, [r3, #28]	@ float
 10597 4320 1046     		mov	r0, r2
 10598 4322 1946     		mov	r1, r3
 10599 4324 FFF7FEFF 		bl	__aeabi_fmul
 10600 4328 0346     		mov	r3, r0
2822:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(pan_axis.param.Ksif.fnum),
 10601              		.loc 1 2822 0
 10602 432a 1846     		mov	r0, r3
 10603 432c FFF7FEFF 		bl	__aeabi_f2d
 10604 4330 0246     		mov	r2, r0
 10605 4332 0B46     		mov	r3, r1
 10606 4334 CDE90023 		strd	r2, [sp]
 10607 4338 40F20000 		movw	r0, #:lower16:.LC522
 10608 433c C0F20000 		movt	r0, #:upper16:.LC522
 10609 4340 2246     		mov	r2, r4
 10610 4342 2B46     		mov	r3, r5
 10611 4344 FFF7FEFF 		bl	printf
2824:.\console.c   **** 				printf("\r\n");	
 10612              		.loc 1 2824 0
 10613 4348 40F20000 		movw	r0, #:lower16:.LC42
 10614 434c C0F20000 		movt	r0, #:upper16:.LC42
 10615 4350 FFF7FEFF 		bl	puts
2825:.\console.c   **** 				
2826:.\console.c   **** 				printf("Pan Limit Control            = ");
 10616              		.loc 1 2826 0
 10617 4354 40F20000 		movw	r0, #:lower16:.LC523
 10618 4358 C0F20000 		movt	r0, #:upper16:.LC523
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 288


 10619 435c FFF7FEFF 		bl	printf
2827:.\console.c   **** 				printf("%1u (0=disabled, 1=enabled)",(int16)(pan_axis.param.limit_control));
 10620              		.loc 1 2827 0
 10621 4360 40F20003 		movw	r3, #:lower16:pan_axis
 10622 4364 C0F20003 		movt	r3, #:upper16:pan_axis
 10623 4368 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 10624 436c 40F20000 		movw	r0, #:lower16:.LC524
 10625 4370 C0F20000 		movt	r0, #:upper16:.LC524
 10626 4374 1946     		mov	r1, r3
 10627 4376 FFF7FEFF 		bl	printf
2828:.\console.c   **** 				printf("\r\n");				
 10628              		.loc 1 2828 0
 10629 437a 40F20000 		movw	r0, #:lower16:.LC42
 10630 437e C0F20000 		movt	r0, #:upper16:.LC42
 10631 4382 FFF7FEFF 		bl	puts
2829:.\console.c   **** 				
2830:.\console.c   **** 	
2831:.\console.c   **** 				//tilt motor main params	
2832:.\console.c   **** 				printf("Tilt Motor Polarity          = ");
 10632              		.loc 1 2832 0
 10633 4386 40F20000 		movw	r0, #:lower16:.LC525
 10634 438a C0F20000 		movt	r0, #:upper16:.LC525
 10635 438e FFF7FEFF 		bl	printf
2833:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(tilt_axis.param.polarity));
 10636              		.loc 1 2833 0
 10637 4392 40F20003 		movw	r3, #:lower16:tilt_axis
 10638 4396 C0F20003 		movt	r3, #:upper16:tilt_axis
 10639 439a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 10640 439c 40F20000 		movw	r0, #:lower16:.LC516
 10641 43a0 C0F20000 		movt	r0, #:upper16:.LC516
 10642 43a4 1946     		mov	r1, r3
 10643 43a6 FFF7FEFF 		bl	printf
2834:.\console.c   **** 				printf("\r\n");
 10644              		.loc 1 2834 0
 10645 43aa 40F20000 		movw	r0, #:lower16:.LC42
 10646 43ae C0F20000 		movt	r0, #:upper16:.LC42
 10647 43b2 FFF7FEFF 		bl	puts
2835:.\console.c   **** 
2836:.\console.c   **** 				printf("Tilt Motor Kp                = ");
 10648              		.loc 1 2836 0
 10649 43b6 40F20000 		movw	r0, #:lower16:.LC526
 10650 43ba C0F20000 		movt	r0, #:upper16:.LC526
 10651 43be FFF7FEFF 		bl	printf
2837:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kpf.fnum));
 10652              		.loc 1 2837 0
 10653 43c2 40F20003 		movw	r3, #:lower16:tilt_axis
 10654 43c6 C0F20003 		movt	r3, #:upper16:tilt_axis
 10655 43ca 5B69     		ldr	r3, [r3, #20]	@ float
 10656 43cc 1846     		mov	r0, r3
 10657 43ce FFF7FEFF 		bl	__aeabi_f2d
 10658 43d2 0246     		mov	r2, r0
 10659 43d4 0B46     		mov	r3, r1
 10660 43d6 40F20000 		movw	r0, #:lower16:.LC518
 10661 43da C0F20000 		movt	r0, #:upper16:.LC518
 10662 43de FFF7FEFF 		bl	printf
2838:.\console.c   **** 				printf("\r\n");
 10663              		.loc 1 2838 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 289


 10664 43e2 40F20000 		movw	r0, #:lower16:.LC42
 10665 43e6 C0F20000 		movt	r0, #:upper16:.LC42
 10666 43ea FFF7FEFF 		bl	puts
2839:.\console.c   **** 
2840:.\console.c   **** 				printf("Tilt Motor Kd                = ");
 10667              		.loc 1 2840 0
 10668 43ee 40F20000 		movw	r0, #:lower16:.LC527
 10669 43f2 C0F20000 		movt	r0, #:upper16:.LC527
 10670 43f6 FFF7FEFF 		bl	printf
2841:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kdf.fnum));
 10671              		.loc 1 2841 0
 10672 43fa 40F20003 		movw	r3, #:lower16:tilt_axis
 10673 43fe C0F20003 		movt	r3, #:upper16:tilt_axis
 10674 4402 9B69     		ldr	r3, [r3, #24]	@ float
 10675 4404 1846     		mov	r0, r3
 10676 4406 FFF7FEFF 		bl	__aeabi_f2d
 10677 440a 0246     		mov	r2, r0
 10678 440c 0B46     		mov	r3, r1
 10679 440e 40F20000 		movw	r0, #:lower16:.LC518
 10680 4412 C0F20000 		movt	r0, #:upper16:.LC518
 10681 4416 FFF7FEFF 		bl	printf
2842:.\console.c   **** 				printf("\r\n");
 10682              		.loc 1 2842 0
 10683 441a 40F20000 		movw	r0, #:lower16:.LC42
 10684 441e C0F20000 		movt	r0, #:upper16:.LC42
 10685 4422 FFF7FEFF 		bl	puts
2843:.\console.c   **** 
2844:.\console.c   **** 				printf("Tilt Motor Ki                = ");
 10686              		.loc 1 2844 0
 10687 4426 40F20000 		movw	r0, #:lower16:.LC528
 10688 442a C0F20000 		movt	r0, #:upper16:.LC528
 10689 442e FFF7FEFF 		bl	printf
2845:.\console.c   **** 				ShowParamsKiTilt();
 10690              		.loc 1 2845 0
 10691 4432 FFF7FEFF 		bl	ShowParamsKiTilt
2846:.\console.c   **** 				printf("\r\n");
 10692              		.loc 1 2846 0
 10693 4436 40F20000 		movw	r0, #:lower16:.LC42
 10694 443a C0F20000 		movt	r0, #:upper16:.LC42
 10695 443e FFF7FEFF 		bl	puts
2847:.\console.c   **** 				
2848:.\console.c   **** 				printf("Tilt Motor Ksi               = ");
 10696              		.loc 1 2848 0
 10697 4442 40F20000 		movw	r0, #:lower16:.LC529
 10698 4446 C0F20000 		movt	r0, #:upper16:.LC529
 10699 444a FFF7FEFF 		bl	printf
2849:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(tilt_axis.param.Ksif.fnum),
 10700              		.loc 1 2849 0
 10701 444e 40F20003 		movw	r3, #:lower16:tilt_axis
 10702 4452 C0F20003 		movt	r3, #:upper16:tilt_axis
 10703 4456 1B6A     		ldr	r3, [r3, #32]	@ float
 10704 4458 1846     		mov	r0, r3
 10705 445a FFF7FEFF 		bl	__aeabi_f2d
 10706 445e 0446     		mov	r4, r0
 10707 4460 0D46     		mov	r5, r1
2850:.\console.c   **** 										   (float)(tilt_axis.param.Ksif.fnum * tilt_axis.param.Kif.fnum));
 10708              		.loc 1 2850 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 290


 10709 4462 40F20003 		movw	r3, #:lower16:tilt_axis
 10710 4466 C0F20003 		movt	r3, #:upper16:tilt_axis
 10711 446a 1A6A     		ldr	r2, [r3, #32]	@ float
 10712 446c 40F20003 		movw	r3, #:lower16:tilt_axis
 10713 4470 C0F20003 		movt	r3, #:upper16:tilt_axis
 10714 4474 DB69     		ldr	r3, [r3, #28]	@ float
 10715 4476 1046     		mov	r0, r2
 10716 4478 1946     		mov	r1, r3
 10717 447a FFF7FEFF 		bl	__aeabi_fmul
 10718 447e 0346     		mov	r3, r0
2849:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(tilt_axis.param.Ksif.fnum),
 10719              		.loc 1 2849 0
 10720 4480 1846     		mov	r0, r3
 10721 4482 FFF7FEFF 		bl	__aeabi_f2d
 10722 4486 0246     		mov	r2, r0
 10723 4488 0B46     		mov	r3, r1
 10724 448a CDE90023 		strd	r2, [sp]
 10725 448e 40F20000 		movw	r0, #:lower16:.LC522
 10726 4492 C0F20000 		movt	r0, #:upper16:.LC522
 10727 4496 2246     		mov	r2, r4
 10728 4498 2B46     		mov	r3, r5
 10729 449a FFF7FEFF 		bl	printf
2851:.\console.c   **** 				printf("\r\n");		
 10730              		.loc 1 2851 0
 10731 449e 40F20000 		movw	r0, #:lower16:.LC42
 10732 44a2 C0F20000 		movt	r0, #:upper16:.LC42
 10733 44a6 FFF7FEFF 		bl	puts
2852:.\console.c   **** 				
2853:.\console.c   **** 				printf("Tilt Limit Control           = ");
 10734              		.loc 1 2853 0
 10735 44aa 40F20000 		movw	r0, #:lower16:.LC530
 10736 44ae C0F20000 		movt	r0, #:upper16:.LC530
 10737 44b2 FFF7FEFF 		bl	printf
2854:.\console.c   **** 				printf("%1u (0=disabled, 1=enabled)",(int16)(tilt_axis.param.limit_control));
 10738              		.loc 1 2854 0
 10739 44b6 40F20003 		movw	r3, #:lower16:tilt_axis
 10740 44ba C0F20003 		movt	r3, #:upper16:tilt_axis
 10741 44be 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 10742 44c2 40F20000 		movw	r0, #:lower16:.LC524
 10743 44c6 C0F20000 		movt	r0, #:upper16:.LC524
 10744 44ca 1946     		mov	r1, r3
 10745 44cc FFF7FEFF 		bl	printf
2855:.\console.c   **** 				printf("\r\n");						
 10746              		.loc 1 2855 0
 10747 44d0 40F20000 		movw	r0, #:lower16:.LC42
 10748 44d4 C0F20000 		movt	r0, #:upper16:.LC42
 10749 44d8 FFF7FEFF 		bl	puts
2856:.\console.c   **** 				printf("\r\n");					
 10750              		.loc 1 2856 0
 10751 44dc 40F20000 		movw	r0, #:lower16:.LC42
 10752 44e0 C0F20000 		movt	r0, #:upper16:.LC42
 10753 44e4 FFF7FEFF 		bl	puts
2857:.\console.c   **** 				
2858:.\console.c   **** 				printf("Absolute Sensors\r\n");
 10754              		.loc 1 2858 0
 10755 44e8 40F20000 		movw	r0, #:lower16:.LC531
 10756 44ec C0F20000 		movt	r0, #:upper16:.LC531
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 291


 10757 44f0 FFF7FEFF 		bl	puts
2859:.\console.c   **** 				printf("================\r\n");			
 10758              		.loc 1 2859 0
 10759 44f4 40F20000 		movw	r0, #:lower16:.LC532
 10760 44f8 C0F20000 		movt	r0, #:upper16:.LC532
 10761 44fc FFF7FEFF 		bl	puts
2860:.\console.c   **** 
2861:.\console.c   **** 				//pan absolute sensor main params
2862:.\console.c   **** 				printf("Pan  Absolute sensor HOME    = ");
 10762              		.loc 1 2862 0
 10763 4500 40F20000 		movw	r0, #:lower16:.LC533
 10764 4504 C0F20000 		movt	r0, #:upper16:.LC533
 10765 4508 FFF7FEFF 		bl	printf
2863:.\console.c   **** 				printf("%6i [ADC raw]    (invertion=%1d)",(int16)(pan_absolute_sensor.param.raw_home), (int16)p
 10766              		.loc 1 2863 0
 10767 450c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10768 4510 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10769 4514 DB8D     		ldrh	r3, [r3, #46]
 10770 4516 1AB2     		sxth	r2, r3
 10771 4518 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10772 451c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10773 4520 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 10774 4524 40F20000 		movw	r0, #:lower16:.LC534
 10775 4528 C0F20000 		movt	r0, #:upper16:.LC534
 10776 452c 1146     		mov	r1, r2
 10777 452e 1A46     		mov	r2, r3
 10778 4530 FFF7FEFF 		bl	printf
2864:.\console.c   **** 				printf("\r\n");
 10779              		.loc 1 2864 0
 10780 4534 40F20000 		movw	r0, #:lower16:.LC42
 10781 4538 C0F20000 		movt	r0, #:upper16:.LC42
 10782 453c FFF7FEFF 		bl	puts
2865:.\console.c   **** 				
2866:.\console.c   **** 				printf("Pan  Absolute sensor LimitMAX= ");
 10783              		.loc 1 2866 0
 10784 4540 40F20000 		movw	r0, #:lower16:.LC535
 10785 4544 C0F20000 		movt	r0, #:upper16:.LC535
 10786 4548 FFF7FEFF 		bl	printf
2867:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_max));
 10787              		.loc 1 2867 0
 10788 454c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10789 4550 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10790 4554 1B8E     		ldrh	r3, [r3, #48]
 10791 4556 1BB2     		sxth	r3, r3
 10792 4558 40F20000 		movw	r0, #:lower16:.LC536
 10793 455c C0F20000 		movt	r0, #:upper16:.LC536
 10794 4560 1946     		mov	r1, r3
 10795 4562 FFF7FEFF 		bl	printf
2868:.\console.c   **** 				printf("\r\n");
 10796              		.loc 1 2868 0
 10797 4566 40F20000 		movw	r0, #:lower16:.LC42
 10798 456a C0F20000 		movt	r0, #:upper16:.LC42
 10799 456e FFF7FEFF 		bl	puts
2869:.\console.c   **** 				
2870:.\console.c   **** 				printf("Pan  Absolute sensor Limitmin= ");
 10800              		.loc 1 2870 0
 10801 4572 40F20000 		movw	r0, #:lower16:.LC537
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 292


 10802 4576 C0F20000 		movt	r0, #:upper16:.LC537
 10803 457a FFF7FEFF 		bl	printf
2871:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_min));
 10804              		.loc 1 2871 0
 10805 457e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10806 4582 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10807 4586 5B8E     		ldrh	r3, [r3, #50]
 10808 4588 1BB2     		sxth	r3, r3
 10809 458a 40F20000 		movw	r0, #:lower16:.LC536
 10810 458e C0F20000 		movt	r0, #:upper16:.LC536
 10811 4592 1946     		mov	r1, r3
 10812 4594 FFF7FEFF 		bl	printf
2872:.\console.c   **** 				printf("\r\n");				
 10813              		.loc 1 2872 0
 10814 4598 40F20000 		movw	r0, #:lower16:.LC42
 10815 459c C0F20000 		movt	r0, #:upper16:.LC42
 10816 45a0 FFF7FEFF 		bl	puts
2873:.\console.c   **** 
2874:.\console.c   **** 				printf("Pan  Absolute sensor Hyster. = ");
 10817              		.loc 1 2874 0
 10818 45a4 40F20000 		movw	r0, #:lower16:.LC538
 10819 45a8 C0F20000 		movt	r0, #:upper16:.LC538
 10820 45ac FFF7FEFF 		bl	printf
2875:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_hysteresis));
 10821              		.loc 1 2875 0
 10822 45b0 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10823 45b4 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10824 45b8 9B8E     		ldrh	r3, [r3, #52]
 10825 45ba 1BB2     		sxth	r3, r3
 10826 45bc 40F20000 		movw	r0, #:lower16:.LC536
 10827 45c0 C0F20000 		movt	r0, #:upper16:.LC536
 10828 45c4 1946     		mov	r1, r3
 10829 45c6 FFF7FEFF 		bl	printf
2876:.\console.c   **** 				printf("\r\n");	
 10830              		.loc 1 2876 0
 10831 45ca 40F20000 		movw	r0, #:lower16:.LC42
 10832 45ce C0F20000 		movt	r0, #:upper16:.LC42
 10833 45d2 FFF7FEFF 		bl	puts
2877:.\console.c   **** 				
2878:.\console.c   **** 				printf("Pan  Absolute sensor Ratio   = ");
 10834              		.loc 1 2878 0
 10835 45d6 40F20000 		movw	r0, #:lower16:.LC539
 10836 45da C0F20000 		movt	r0, #:upper16:.LC539
 10837 45de FFF7FEFF 		bl	printf
2879:.\console.c   **** 				printf("%3.3f [step/lsb]",(float)(pan_absolute_sensor.param.step_over_abs_ratio.fnum));
 10838              		.loc 1 2879 0
 10839 45e2 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10840 45e6 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10841 45ea 9B6B     		ldr	r3, [r3, #56]	@ float
 10842 45ec 1846     		mov	r0, r3
 10843 45ee FFF7FEFF 		bl	__aeabi_f2d
 10844 45f2 0246     		mov	r2, r0
 10845 45f4 0B46     		mov	r3, r1
 10846 45f6 40F20000 		movw	r0, #:lower16:.LC540
 10847 45fa C0F20000 		movt	r0, #:upper16:.LC540
 10848 45fe FFF7FEFF 		bl	printf
2880:.\console.c   **** 				printf("\r\n");					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 293


 10849              		.loc 1 2880 0
 10850 4602 40F20000 		movw	r0, #:lower16:.LC42
 10851 4606 C0F20000 		movt	r0, #:upper16:.LC42
 10852 460a FFF7FEFF 		bl	puts
2881:.\console.c   **** 				
2882:.\console.c   **** 
2883:.\console.c   **** 				//tilt absolute sensor main params
2884:.\console.c   **** 				printf("Tilt Absolute sensor HOME    = ");
 10853              		.loc 1 2884 0
 10854 460e 40F20000 		movw	r0, #:lower16:.LC541
 10855 4612 C0F20000 		movt	r0, #:upper16:.LC541
 10856 4616 FFF7FEFF 		bl	printf
2885:.\console.c   **** 				printf("%6i [ADC raw]    (invertion=%1d)",(int16)(tilt_absolute_sensor.param.raw_home), (int16)
 10857              		.loc 1 2885 0
 10858 461a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10859 461e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10860 4622 DB8D     		ldrh	r3, [r3, #46]
 10861 4624 1AB2     		sxth	r2, r3
 10862 4626 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10863 462a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10864 462e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 10865 4632 40F20000 		movw	r0, #:lower16:.LC534
 10866 4636 C0F20000 		movt	r0, #:upper16:.LC534
 10867 463a 1146     		mov	r1, r2
 10868 463c 1A46     		mov	r2, r3
 10869 463e FFF7FEFF 		bl	printf
2886:.\console.c   **** 				printf("\r\n");	
 10870              		.loc 1 2886 0
 10871 4642 40F20000 		movw	r0, #:lower16:.LC42
 10872 4646 C0F20000 		movt	r0, #:upper16:.LC42
 10873 464a FFF7FEFF 		bl	puts
2887:.\console.c   **** 				
2888:.\console.c   **** 				printf("Tilt Absolute sensor LimitMAX= ");
 10874              		.loc 1 2888 0
 10875 464e 40F20000 		movw	r0, #:lower16:.LC542
 10876 4652 C0F20000 		movt	r0, #:upper16:.LC542
 10877 4656 FFF7FEFF 		bl	printf
2889:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_max));
 10878              		.loc 1 2889 0
 10879 465a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10880 465e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10881 4662 1B8E     		ldrh	r3, [r3, #48]
 10882 4664 1BB2     		sxth	r3, r3
 10883 4666 40F20000 		movw	r0, #:lower16:.LC536
 10884 466a C0F20000 		movt	r0, #:upper16:.LC536
 10885 466e 1946     		mov	r1, r3
 10886 4670 FFF7FEFF 		bl	printf
2890:.\console.c   **** 				printf("\r\n");
 10887              		.loc 1 2890 0
 10888 4674 40F20000 		movw	r0, #:lower16:.LC42
 10889 4678 C0F20000 		movt	r0, #:upper16:.LC42
 10890 467c FFF7FEFF 		bl	puts
2891:.\console.c   **** 				
2892:.\console.c   **** 				printf("Tilt Absolute sensor Limitmin= ");
 10891              		.loc 1 2892 0
 10892 4680 40F20000 		movw	r0, #:lower16:.LC543
 10893 4684 C0F20000 		movt	r0, #:upper16:.LC543
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 294


 10894 4688 FFF7FEFF 		bl	printf
2893:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_min));
 10895              		.loc 1 2893 0
 10896 468c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10897 4690 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10898 4694 5B8E     		ldrh	r3, [r3, #50]
 10899 4696 1BB2     		sxth	r3, r3
 10900 4698 40F20000 		movw	r0, #:lower16:.LC536
 10901 469c C0F20000 		movt	r0, #:upper16:.LC536
 10902 46a0 1946     		mov	r1, r3
 10903 46a2 FFF7FEFF 		bl	printf
2894:.\console.c   **** 				printf("\r\n");				
 10904              		.loc 1 2894 0
 10905 46a6 40F20000 		movw	r0, #:lower16:.LC42
 10906 46aa C0F20000 		movt	r0, #:upper16:.LC42
 10907 46ae FFF7FEFF 		bl	puts
2895:.\console.c   **** 
2896:.\console.c   **** 				printf("Tilt Absolute sensor Hyster. = ");
 10908              		.loc 1 2896 0
 10909 46b2 40F20000 		movw	r0, #:lower16:.LC544
 10910 46b6 C0F20000 		movt	r0, #:upper16:.LC544
 10911 46ba FFF7FEFF 		bl	printf
2897:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_hysteresis));
 10912              		.loc 1 2897 0
 10913 46be 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10914 46c2 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10915 46c6 9B8E     		ldrh	r3, [r3, #52]
 10916 46c8 1BB2     		sxth	r3, r3
 10917 46ca 40F20000 		movw	r0, #:lower16:.LC536
 10918 46ce C0F20000 		movt	r0, #:upper16:.LC536
 10919 46d2 1946     		mov	r1, r3
 10920 46d4 FFF7FEFF 		bl	printf
2898:.\console.c   **** 				printf("\r\n");
 10921              		.loc 1 2898 0
 10922 46d8 40F20000 		movw	r0, #:lower16:.LC42
 10923 46dc C0F20000 		movt	r0, #:upper16:.LC42
 10924 46e0 FFF7FEFF 		bl	puts
2899:.\console.c   **** 				
2900:.\console.c   **** 				printf("Tilt Absolute sensor Ratio   = ");
 10925              		.loc 1 2900 0
 10926 46e4 40F20000 		movw	r0, #:lower16:.LC545
 10927 46e8 C0F20000 		movt	r0, #:upper16:.LC545
 10928 46ec FFF7FEFF 		bl	printf
2901:.\console.c   **** 				printf("%3.3f [step/lsb]",(float)(tilt_absolute_sensor.param.step_over_abs_ratio.fnum));	
 10929              		.loc 1 2901 0
 10930 46f0 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10931 46f4 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10932 46f8 9B6B     		ldr	r3, [r3, #56]	@ float
 10933 46fa 1846     		mov	r0, r3
 10934 46fc FFF7FEFF 		bl	__aeabi_f2d
 10935 4700 0246     		mov	r2, r0
 10936 4702 0B46     		mov	r3, r1
 10937 4704 40F20000 		movw	r0, #:lower16:.LC540
 10938 4708 C0F20000 		movt	r0, #:upper16:.LC540
 10939 470c FFF7FEFF 		bl	printf
2902:.\console.c   **** 				printf("\r\n");					
 10940              		.loc 1 2902 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 295


 10941 4710 40F20000 		movw	r0, #:lower16:.LC42
 10942 4714 C0F20000 		movt	r0, #:upper16:.LC42
 10943 4718 FFF7FEFF 		bl	puts
2903:.\console.c   **** 				printf("\r\n");	
 10944              		.loc 1 2903 0
 10945 471c 40F20000 		movw	r0, #:lower16:.LC42
 10946 4720 C0F20000 		movt	r0, #:upper16:.LC42
 10947 4724 FFF7FEFF 		bl	puts
2904:.\console.c   **** 				
2905:.\console.c   **** 				
2906:.\console.c   **** 				printf("Motor Tuning\r\n");
 10948              		.loc 1 2906 0
 10949 4728 40F20000 		movw	r0, #:lower16:.LC546
 10950 472c C0F20000 		movt	r0, #:upper16:.LC546
 10951 4730 FFF7FEFF 		bl	puts
2907:.\console.c   **** 				printf("============\r\n");					
 10952              		.loc 1 2907 0
 10953 4734 40F20000 		movw	r0, #:lower16:.LC547
 10954 4738 C0F20000 		movt	r0, #:upper16:.LC547
 10955 473c FFF7FEFF 		bl	puts
2908:.\console.c   **** 				printf("Pan  Motor Kopf              = ");
 10956              		.loc 1 2908 0
 10957 4740 40F20000 		movw	r0, #:lower16:.LC548
 10958 4744 C0F20000 		movt	r0, #:upper16:.LC548
 10959 4748 FFF7FEFF 		bl	printf
2909:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kopf.fnum));
 10960              		.loc 1 2909 0
 10961 474c 40F20003 		movw	r3, #:lower16:pan_axis
 10962 4750 C0F20003 		movt	r3, #:upper16:pan_axis
 10963 4754 5B6A     		ldr	r3, [r3, #36]	@ float
 10964 4756 1846     		mov	r0, r3
 10965 4758 FFF7FEFF 		bl	__aeabi_f2d
 10966 475c 0246     		mov	r2, r0
 10967 475e 0B46     		mov	r3, r1
 10968 4760 40F20000 		movw	r0, #:lower16:.LC518
 10969 4764 C0F20000 		movt	r0, #:upper16:.LC518
 10970 4768 FFF7FEFF 		bl	printf
2910:.\console.c   **** 				printf("   AstimEN=%1u ",(int16)(pan_axis.vparam.astim_enable));
 10971              		.loc 1 2910 0
 10972 476c 40F20003 		movw	r3, #:lower16:pan_axis
 10973 4770 C0F20003 		movt	r3, #:upper16:pan_axis
 10974 4774 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10975 4776 40F20000 		movw	r0, #:lower16:.LC549
 10976 477a C0F20000 		movt	r0, #:upper16:.LC549
 10977 477e 1946     		mov	r1, r3
 10978 4780 FFF7FEFF 		bl	printf
2911:.\console.c   **** 				ShowParamsAstim(&pan_axis);
 10979              		.loc 1 2911 0
 10980 4784 40F20000 		movw	r0, #:lower16:pan_axis
 10981 4788 C0F20000 		movt	r0, #:upper16:pan_axis
 10982 478c FFF7FEFF 		bl	ShowParamsAstim
2912:.\console.c   **** 				
2913:.\console.c   **** 				printf("Pan  Anaout GAIN             = ");
 10983              		.loc 1 2913 0
 10984 4790 40F20000 		movw	r0, #:lower16:.LC550
 10985 4794 C0F20000 		movt	r0, #:upper16:.LC550
 10986 4798 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 296


2914:.\console.c   **** 				ShowParamsGainAnaout(&pan_axis);			
 10987              		.loc 1 2914 0
 10988 479c 40F20000 		movw	r0, #:lower16:pan_axis
 10989 47a0 C0F20000 		movt	r0, #:upper16:pan_axis
 10990 47a4 FFF7FEFF 		bl	ShowParamsGainAnaout
2915:.\console.c   **** 				
2916:.\console.c   **** 				printf("Pan  AnaOut Signal (color)   = ");
 10991              		.loc 1 2916 0
 10992 47a8 40F20000 		movw	r0, #:lower16:.LC551
 10993 47ac C0F20000 		movt	r0, #:upper16:.LC551
 10994 47b0 FFF7FEFF 		bl	printf
2917:.\console.c   **** 				ShowParamsColor(&pan_axis);						
 10995              		.loc 1 2917 0
 10996 47b4 40F20000 		movw	r0, #:lower16:pan_axis
 10997 47b8 C0F20000 		movt	r0, #:upper16:pan_axis
 10998 47bc FFF7FEFF 		bl	ShowParamsColor
2918:.\console.c   **** 				printf("\r\n");				
 10999              		.loc 1 2918 0
 11000 47c0 40F20000 		movw	r0, #:lower16:.LC42
 11001 47c4 C0F20000 		movt	r0, #:upper16:.LC42
 11002 47c8 FFF7FEFF 		bl	puts
2919:.\console.c   **** 
2920:.\console.c   **** 				printf("Tilt Motor Kopf              = ");
 11003              		.loc 1 2920 0
 11004 47cc 40F20000 		movw	r0, #:lower16:.LC552
 11005 47d0 C0F20000 		movt	r0, #:upper16:.LC552
 11006 47d4 FFF7FEFF 		bl	printf
2921:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kopf.fnum));
 11007              		.loc 1 2921 0
 11008 47d8 40F20003 		movw	r3, #:lower16:tilt_axis
 11009 47dc C0F20003 		movt	r3, #:upper16:tilt_axis
 11010 47e0 5B6A     		ldr	r3, [r3, #36]	@ float
 11011 47e2 1846     		mov	r0, r3
 11012 47e4 FFF7FEFF 		bl	__aeabi_f2d
 11013 47e8 0246     		mov	r2, r0
 11014 47ea 0B46     		mov	r3, r1
 11015 47ec 40F20000 		movw	r0, #:lower16:.LC518
 11016 47f0 C0F20000 		movt	r0, #:upper16:.LC518
 11017 47f4 FFF7FEFF 		bl	printf
2922:.\console.c   **** 				printf("   AstimEN=%1u ",(int16)(tilt_axis.vparam.astim_enable));
 11018              		.loc 1 2922 0
 11019 47f8 40F20003 		movw	r3, #:lower16:tilt_axis
 11020 47fc C0F20003 		movt	r3, #:upper16:tilt_axis
 11021 4800 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11022 4802 40F20000 		movw	r0, #:lower16:.LC549
 11023 4806 C0F20000 		movt	r0, #:upper16:.LC549
 11024 480a 1946     		mov	r1, r3
 11025 480c FFF7FEFF 		bl	printf
2923:.\console.c   **** 				ShowParamsAstim(&pan_axis);
 11026              		.loc 1 2923 0
 11027 4810 40F20000 		movw	r0, #:lower16:pan_axis
 11028 4814 C0F20000 		movt	r0, #:upper16:pan_axis
 11029 4818 FFF7FEFF 		bl	ShowParamsAstim
2924:.\console.c   **** 				
2925:.\console.c   **** 				printf("Tilt Anaout GAIN             = ");
 11030              		.loc 1 2925 0
 11031 481c 40F20000 		movw	r0, #:lower16:.LC553
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 297


 11032 4820 C0F20000 		movt	r0, #:upper16:.LC553
 11033 4824 FFF7FEFF 		bl	printf
2926:.\console.c   **** 				ShowParamsGainAnaout(&tilt_axis);			
 11034              		.loc 1 2926 0
 11035 4828 40F20000 		movw	r0, #:lower16:tilt_axis
 11036 482c C0F20000 		movt	r0, #:upper16:tilt_axis
 11037 4830 FFF7FEFF 		bl	ShowParamsGainAnaout
2927:.\console.c   **** 				
2928:.\console.c   **** 				printf("Tilt AnaOut Signal (color)   = ");
 11038              		.loc 1 2928 0
 11039 4834 40F20000 		movw	r0, #:lower16:.LC554
 11040 4838 C0F20000 		movt	r0, #:upper16:.LC554
 11041 483c FFF7FEFF 		bl	printf
2929:.\console.c   **** 				ShowParamsColor(&tilt_axis);						
 11042              		.loc 1 2929 0
 11043 4840 40F20000 		movw	r0, #:lower16:tilt_axis
 11044 4844 C0F20000 		movt	r0, #:upper16:tilt_axis
 11045 4848 FFF7FEFF 		bl	ShowParamsColor
2930:.\console.c   **** 				printf("\r\n");				
 11046              		.loc 1 2930 0
 11047 484c 40F20000 		movw	r0, #:lower16:.LC42
 11048 4850 C0F20000 		movt	r0, #:upper16:.LC42
 11049 4854 FFF7FEFF 		bl	puts
2931:.\console.c   **** 				
2932:.\console.c   **** 				printf("Anaout Selected Axis         = ");
 11050              		.loc 1 2932 0
 11051 4858 40F20000 		movw	r0, #:lower16:.LC555
 11052 485c C0F20000 		movt	r0, #:upper16:.LC555
 11053 4860 FFF7FEFF 		bl	printf
2933:.\console.c   **** 				ShowParamsAnaoutSelectedAxis(Selected_ANAOUT);	
 11054              		.loc 1 2933 0
 11055 4864 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 11056 4868 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 11057 486c 1B68     		ldr	r3, [r3, #0]
 11058 486e 1846     		mov	r0, r3
 11059 4870 FFF7FEFF 		bl	ShowParamsAnaoutSelectedAxis
2934:.\console.c   **** 				printf("\r\n");
 11060              		.loc 1 2934 0
 11061 4874 40F20000 		movw	r0, #:lower16:.LC42
 11062 4878 C0F20000 		movt	r0, #:upper16:.LC42
 11063 487c FFF7FEFF 		bl	puts
2935:.\console.c   **** 				printf("\r\n");				
 11064              		.loc 1 2935 0
 11065 4880 40F20000 		movw	r0, #:lower16:.LC42
 11066 4884 C0F20000 		movt	r0, #:upper16:.LC42
 11067 4888 FFF7FEFF 		bl	puts
2936:.\console.c   **** 
2937:.\console.c   **** 				printf("Accelerometer (100Hz)\r\n");
 11068              		.loc 1 2937 0
 11069 488c 40F20000 		movw	r0, #:lower16:.LC556
 11070 4890 C0F20000 		movt	r0, #:upper16:.LC556
 11071 4894 FFF7FEFF 		bl	puts
2938:.\console.c   **** 				printf("=====================\r\n");					
 11072              		.loc 1 2938 0
 11073 4898 40F20000 		movw	r0, #:lower16:.LC557
 11074 489c C0F20000 		movt	r0, #:upper16:.LC557
 11075 48a0 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 298


2939:.\console.c   **** 				printf("beta  (accelerometer LPF)    = ");
 11076              		.loc 1 2939 0
 11077 48a4 40F20000 		movw	r0, #:lower16:.LC558
 11078 48a8 C0F20000 		movt	r0, #:upper16:.LC558
 11079 48ac FFF7FEFF 		bl	printf
2940:.\console.c   **** 				printf("%8f (tau=%1.4f [msec])",(float)(gobee_param.beta.fnum), (float)LPFtau(gobee_param.beta.
 11080              		.loc 1 2940 0
 11081 48b0 40F20003 		movw	r3, #:lower16:gobee_param
 11082 48b4 C0F20003 		movt	r3, #:upper16:gobee_param
 11083 48b8 5B68     		ldr	r3, [r3, #4]	@ float
 11084 48ba 1846     		mov	r0, r3
 11085 48bc FFF7FEFF 		bl	__aeabi_f2d
 11086 48c0 0446     		mov	r4, r0
 11087 48c2 0D46     		mov	r5, r1
 11088 48c4 40F20003 		movw	r3, #:lower16:gobee_param
 11089 48c8 C0F20003 		movt	r3, #:upper16:gobee_param
 11090 48cc 5B68     		ldr	r3, [r3, #4]	@ float
 11091 48ce 1846     		mov	r0, r3
 11092 48d0 4DF20A71 		movw	r1, #55050
 11093 48d4 C3F62341 		movt	r1, 15395
 11094 48d8 FFF7FEFF 		bl	LPFtau
 11095 48dc 0346     		mov	r3, r0
 11096 48de 1846     		mov	r0, r3
 11097 48e0 FFF7FEFF 		bl	__aeabi_f2d
 11098 48e4 0246     		mov	r2, r0
 11099 48e6 0B46     		mov	r3, r1
 11100 48e8 CDE90023 		strd	r2, [sp]
 11101 48ec 40F20000 		movw	r0, #:lower16:.LC559
 11102 48f0 C0F20000 		movt	r0, #:upper16:.LC559
 11103 48f4 2246     		mov	r2, r4
 11104 48f6 2B46     		mov	r3, r5
 11105 48f8 FFF7FEFF 		bl	printf
2941:.\console.c   **** 				printf(" (fc=%1.4f [Hz])\r\n", (float)LPFfreq(gobee_param.beta.fnum, H_DeltaT_const));				
 11106              		.loc 1 2941 0
 11107 48fc 40F20003 		movw	r3, #:lower16:gobee_param
 11108 4900 C0F20003 		movt	r3, #:upper16:gobee_param
 11109 4904 5B68     		ldr	r3, [r3, #4]	@ float
 11110 4906 1846     		mov	r0, r3
 11111 4908 4DF20A71 		movw	r1, #55050
 11112 490c C3F62341 		movt	r1, 15395
 11113 4910 FFF7FEFF 		bl	LPFfreq
 11114 4914 0346     		mov	r3, r0
 11115 4916 1846     		mov	r0, r3
 11116 4918 FFF7FEFF 		bl	__aeabi_f2d
 11117 491c 0246     		mov	r2, r0
 11118 491e 0B46     		mov	r3, r1
 11119 4920 40F20000 		movw	r0, #:lower16:.LC560
 11120 4924 C0F20000 		movt	r0, #:upper16:.LC560
 11121 4928 FFF7FEFF 		bl	printf
2942:.\console.c   **** 
2943:.\console.c   **** 				printf("Analog Accel. X ADC Offset   = ");
 11122              		.loc 1 2943 0
 11123 492c 40F20000 		movw	r0, #:lower16:.LC561
 11124 4930 C0F20000 		movt	r0, #:upper16:.LC561
 11125 4934 FFF7FEFF 		bl	printf
2944:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.x_acc_ADC_offset));
 11126              		.loc 1 2944 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 299


 11127 4938 40F20003 		movw	r3, #:lower16:gobee_param
 11128 493c C0F20003 		movt	r3, #:upper16:gobee_param
 11129 4940 1B89     		ldrh	r3, [r3, #8]
 11130 4942 1BB2     		sxth	r3, r3
 11131 4944 40F20000 		movw	r0, #:lower16:.LC562
 11132 4948 C0F20000 		movt	r0, #:upper16:.LC562
 11133 494c 1946     		mov	r1, r3
 11134 494e FFF7FEFF 		bl	printf
2945:.\console.c   **** 				printf("\r\n");	
 11135              		.loc 1 2945 0
 11136 4952 40F20000 		movw	r0, #:lower16:.LC42
 11137 4956 C0F20000 		movt	r0, #:upper16:.LC42
 11138 495a FFF7FEFF 		bl	puts
2946:.\console.c   **** 				
2947:.\console.c   **** 				printf("Analog Accel. Y ADC Offset   = ");
 11139              		.loc 1 2947 0
 11140 495e 40F20000 		movw	r0, #:lower16:.LC563
 11141 4962 C0F20000 		movt	r0, #:upper16:.LC563
 11142 4966 FFF7FEFF 		bl	printf
2948:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.y_acc_ADC_offset));
 11143              		.loc 1 2948 0
 11144 496a 40F20003 		movw	r3, #:lower16:gobee_param
 11145 496e C0F20003 		movt	r3, #:upper16:gobee_param
 11146 4972 5B89     		ldrh	r3, [r3, #10]
 11147 4974 1BB2     		sxth	r3, r3
 11148 4976 40F20000 		movw	r0, #:lower16:.LC562
 11149 497a C0F20000 		movt	r0, #:upper16:.LC562
 11150 497e 1946     		mov	r1, r3
 11151 4980 FFF7FEFF 		bl	printf
2949:.\console.c   **** 				printf("\r\n");
 11152              		.loc 1 2949 0
 11153 4984 40F20000 		movw	r0, #:lower16:.LC42
 11154 4988 C0F20000 		movt	r0, #:upper16:.LC42
 11155 498c FFF7FEFF 		bl	puts
2950:.\console.c   **** 				
2951:.\console.c   **** 				printf("Analog Accel. Z ADC Offset   = ");
 11156              		.loc 1 2951 0
 11157 4990 40F20000 		movw	r0, #:lower16:.LC564
 11158 4994 C0F20000 		movt	r0, #:upper16:.LC564
 11159 4998 FFF7FEFF 		bl	printf
2952:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.z_acc_ADC_offset));
 11160              		.loc 1 2952 0
 11161 499c 40F20003 		movw	r3, #:lower16:gobee_param
 11162 49a0 C0F20003 		movt	r3, #:upper16:gobee_param
 11163 49a4 9B89     		ldrh	r3, [r3, #12]
 11164 49a6 1BB2     		sxth	r3, r3
 11165 49a8 40F20000 		movw	r0, #:lower16:.LC562
 11166 49ac C0F20000 		movt	r0, #:upper16:.LC562
 11167 49b0 1946     		mov	r1, r3
 11168 49b2 FFF7FEFF 		bl	printf
2953:.\console.c   **** 				printf("\r\n");				
 11169              		.loc 1 2953 0
 11170 49b6 40F20000 		movw	r0, #:lower16:.LC42
 11171 49ba C0F20000 		movt	r0, #:upper16:.LC42
 11172 49be FFF7FEFF 		bl	puts
2954:.\console.c   **** 				printf("\r\n");	
 11173              		.loc 1 2954 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 300


 11174 49c2 40F20000 		movw	r0, #:lower16:.LC42
 11175 49c6 C0F20000 		movt	r0, #:upper16:.LC42
 11176 49ca FFF7FEFF 		bl	puts
2955:.\console.c   **** 				
2956:.\console.c   **** 				printf("Bike Frame IMU (1.5kHz)\r\n");
 11177              		.loc 1 2956 0
 11178 49ce 40F20000 		movw	r0, #:lower16:.LC565
 11179 49d2 C0F20000 		movt	r0, #:upper16:.LC565
 11180 49d6 FFF7FEFF 		bl	puts
2957:.\console.c   **** 				printf("=======================\r\n");					
 11181              		.loc 1 2957 0
 11182 49da 40F20000 		movw	r0, #:lower16:.LC566
 11183 49de C0F20000 		movt	r0, #:upper16:.LC566
 11184 49e2 FFF7FEFF 		bl	puts
2958:.\console.c   **** 				printf("gamma  (IMU LPF)             = ");
 11185              		.loc 1 2958 0
 11186 49e6 40F20000 		movw	r0, #:lower16:.LC567
 11187 49ea C0F20000 		movt	r0, #:upper16:.LC567
 11188 49ee FFF7FEFF 		bl	printf
2959:.\console.c   **** 				printf("%8f (tau=%1.4f [msec])",(float)(IMU_sensor.param.gamma.fnum), (float)LPFtau(IMU_sensor.
 11189              		.loc 1 2959 0
 11190 49f2 40F20003 		movw	r3, #:lower16:IMU_sensor
 11191 49f6 C0F20003 		movt	r3, #:upper16:IMU_sensor
 11192 49fa 9B6A     		ldr	r3, [r3, #40]	@ float
 11193 49fc 1846     		mov	r0, r3
 11194 49fe FFF7FEFF 		bl	__aeabi_f2d
 11195 4a02 0446     		mov	r4, r0
 11196 4a04 0D46     		mov	r5, r1
 11197 4a06 40F20003 		movw	r3, #:lower16:IMU_sensor
 11198 4a0a C0F20003 		movt	r3, #:upper16:IMU_sensor
 11199 4a0e 9B6A     		ldr	r3, [r3, #40]	@ float
 11200 4a10 1846     		mov	r0, r3
 11201 4a12 4CF24431 		movw	r1, #49988
 11202 4a16 C3F62E21 		movt	r1, 14894
 11203 4a1a FFF7FEFF 		bl	LPFtau
 11204 4a1e 0346     		mov	r3, r0
 11205 4a20 1846     		mov	r0, r3
 11206 4a22 FFF7FEFF 		bl	__aeabi_f2d
 11207 4a26 0246     		mov	r2, r0
 11208 4a28 0B46     		mov	r3, r1
 11209 4a2a CDE90023 		strd	r2, [sp]
 11210 4a2e 40F20000 		movw	r0, #:lower16:.LC559
 11211 4a32 C0F20000 		movt	r0, #:upper16:.LC559
 11212 4a36 2246     		mov	r2, r4
 11213 4a38 2B46     		mov	r3, r5
 11214 4a3a FFF7FEFF 		bl	printf
2960:.\console.c   **** 				printf(" (fc=%1.4f [Hz])\r\n", (float)LPFfreq(IMU_sensor.param.gamma.fnum, DeltaT_const));
 11215              		.loc 1 2960 0
 11216 4a3e 40F20003 		movw	r3, #:lower16:IMU_sensor
 11217 4a42 C0F20003 		movt	r3, #:upper16:IMU_sensor
 11218 4a46 9B6A     		ldr	r3, [r3, #40]	@ float
 11219 4a48 1846     		mov	r0, r3
 11220 4a4a 4CF24431 		movw	r1, #49988
 11221 4a4e C3F62E21 		movt	r1, 14894
 11222 4a52 FFF7FEFF 		bl	LPFfreq
 11223 4a56 0346     		mov	r3, r0
 11224 4a58 1846     		mov	r0, r3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 301


 11225 4a5a FFF7FEFF 		bl	__aeabi_f2d
 11226 4a5e 0246     		mov	r2, r0
 11227 4a60 0B46     		mov	r3, r1
 11228 4a62 40F20000 		movw	r0, #:lower16:.LC560
 11229 4a66 C0F20000 		movt	r0, #:upper16:.LC560
 11230 4a6a FFF7FEFF 		bl	printf
2961:.\console.c   **** 				
2962:.\console.c   **** 				printf("IMU Yaw angle invertion      = ");
 11231              		.loc 1 2962 0
 11232 4a6e 40F20000 		movw	r0, #:lower16:.LC568
 11233 4a72 C0F20000 		movt	r0, #:upper16:.LC568
 11234 4a76 FFF7FEFF 		bl	printf
2963:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.yaw_invertion));
 11235              		.loc 1 2963 0
 11236 4a7a 40F20003 		movw	r3, #:lower16:IMU_sensor
 11237 4a7e C0F20003 		movt	r3, #:upper16:IMU_sensor
 11238 4a82 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 11239 4a86 40F20000 		movw	r0, #:lower16:.LC516
 11240 4a8a C0F20000 		movt	r0, #:upper16:.LC516
 11241 4a8e 1946     		mov	r1, r3
 11242 4a90 FFF7FEFF 		bl	printf
2964:.\console.c   **** 				printf("\r\n");
 11243              		.loc 1 2964 0
 11244 4a94 40F20000 		movw	r0, #:lower16:.LC42
 11245 4a98 C0F20000 		movt	r0, #:upper16:.LC42
 11246 4a9c FFF7FEFF 		bl	puts
2965:.\console.c   **** 				
2966:.\console.c   **** 				printf("IMU Pitch angle invertion    = ");
 11247              		.loc 1 2966 0
 11248 4aa0 40F20000 		movw	r0, #:lower16:.LC569
 11249 4aa4 C0F20000 		movt	r0, #:upper16:.LC569
 11250 4aa8 FFF7FEFF 		bl	printf
2967:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.pitch_invertion));
 11251              		.loc 1 2967 0
 11252 4aac 40F20003 		movw	r3, #:lower16:IMU_sensor
 11253 4ab0 C0F20003 		movt	r3, #:upper16:IMU_sensor
 11254 4ab4 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 11255 4ab8 40F20000 		movw	r0, #:lower16:.LC516
 11256 4abc C0F20000 		movt	r0, #:upper16:.LC516
 11257 4ac0 1946     		mov	r1, r3
 11258 4ac2 FFF7FEFF 		bl	printf
2968:.\console.c   **** 				printf("\r\n");
 11259              		.loc 1 2968 0
 11260 4ac6 40F20000 		movw	r0, #:lower16:.LC42
 11261 4aca C0F20000 		movt	r0, #:upper16:.LC42
 11262 4ace FFF7FEFF 		bl	puts
2969:.\console.c   **** 				
2970:.\console.c   **** 				printf("IMU Roll angle invertion     = ");
 11263              		.loc 1 2970 0
 11264 4ad2 40F20000 		movw	r0, #:lower16:.LC570
 11265 4ad6 C0F20000 		movt	r0, #:upper16:.LC570
 11266 4ada FFF7FEFF 		bl	printf
2971:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.roll_invertion));
 11267              		.loc 1 2971 0
 11268 4ade 40F20003 		movw	r3, #:lower16:IMU_sensor
 11269 4ae2 C0F20003 		movt	r3, #:upper16:IMU_sensor
 11270 4ae6 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 302


 11271 4aea 40F20000 		movw	r0, #:lower16:.LC516
 11272 4aee C0F20000 		movt	r0, #:upper16:.LC516
 11273 4af2 1946     		mov	r1, r3
 11274 4af4 FFF7FEFF 		bl	printf
2972:.\console.c   **** 				printf("\r\n");
 11275              		.loc 1 2972 0
 11276 4af8 40F20000 		movw	r0, #:lower16:.LC42
 11277 4afc C0F20000 		movt	r0, #:upper16:.LC42
 11278 4b00 FFF7FEFF 		bl	puts
2973:.\console.c   **** 				
2974:.\console.c   **** 				printf("IMU Pith and Roll exchange   = ");
 11279              		.loc 1 2974 0
 11280 4b04 40F20000 		movw	r0, #:lower16:.LC571
 11281 4b08 C0F20000 		movt	r0, #:upper16:.LC571
 11282 4b0c FFF7FEFF 		bl	printf
2975:.\console.c   **** 				printf("%1u (0=true, 1=exchanged)",(int16)(IMU_sensor.param.pitch_roll_exchange));
 11283              		.loc 1 2975 0
 11284 4b10 40F20003 		movw	r3, #:lower16:IMU_sensor
 11285 4b14 C0F20003 		movt	r3, #:upper16:IMU_sensor
 11286 4b18 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 11287 4b1c 40F20000 		movw	r0, #:lower16:.LC572
 11288 4b20 C0F20000 		movt	r0, #:upper16:.LC572
 11289 4b24 1946     		mov	r1, r3
 11290 4b26 FFF7FEFF 		bl	printf
2976:.\console.c   **** 				printf("\r\n");				
 11291              		.loc 1 2976 0
 11292 4b2a 40F20000 		movw	r0, #:lower16:.LC42
 11293 4b2e C0F20000 		movt	r0, #:upper16:.LC42
 11294 4b32 FFF7FEFF 		bl	puts
2977:.\console.c   **** 				printf("\r\n");					
 11295              		.loc 1 2977 0
 11296 4b36 40F20000 		movw	r0, #:lower16:.LC42
 11297 4b3a C0F20000 		movt	r0, #:upper16:.LC42
 11298 4b3e FFF7FEFF 		bl	puts
2978:.\console.c   **** 				
2979:.\console.c   **** 				printf("Events Parameters\r\n");
 11299              		.loc 1 2979 0
 11300 4b42 40F20000 		movw	r0, #:lower16:.LC573
 11301 4b46 C0F20000 		movt	r0, #:upper16:.LC573
 11302 4b4a FFF7FEFF 		bl	puts
2980:.\console.c   **** 				printf("=================\r\n");				
 11303              		.loc 1 2980 0
 11304 4b4e 40F20000 		movw	r0, #:lower16:.LC574
 11305 4b52 C0F20000 		movt	r0, #:upper16:.LC574
 11306 4b56 FFF7FEFF 		bl	puts
2981:.\console.c   **** 				
2982:.\console.c   **** 				printf("Jump G Threshold             = ");
 11307              		.loc 1 2982 0
 11308 4b5a 40F20000 		movw	r0, #:lower16:.LC575
 11309 4b5e C0F20000 		movt	r0, #:upper16:.LC575
 11310 4b62 FFF7FEFF 		bl	printf
2983:.\console.c   **** 				printf("%8f [g]\r\n",(float)(gobee_param.jump_g_threshold.fnum));				
 11311              		.loc 1 2983 0
 11312 4b66 40F20003 		movw	r3, #:lower16:gobee_param
 11313 4b6a C0F20003 		movt	r3, #:upper16:gobee_param
 11314 4b6e 1B69     		ldr	r3, [r3, #16]	@ float
 11315 4b70 1846     		mov	r0, r3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 303


 11316 4b72 FFF7FEFF 		bl	__aeabi_f2d
 11317 4b76 0246     		mov	r2, r0
 11318 4b78 0B46     		mov	r3, r1
 11319 4b7a 40F20000 		movw	r0, #:lower16:.LC576
 11320 4b7e C0F20000 		movt	r0, #:upper16:.LC576
 11321 4b82 FFF7FEFF 		bl	printf
2984:.\console.c   **** 
2985:.\console.c   **** 				printf("Acceleration G Threshold     = ");
 11322              		.loc 1 2985 0
 11323 4b86 40F20000 		movw	r0, #:lower16:.LC577
 11324 4b8a C0F20000 		movt	r0, #:upper16:.LC577
 11325 4b8e FFF7FEFF 		bl	printf
2986:.\console.c   **** 				printf("%8f [g]\r\n",(float)(gobee_param.acc_g_threshold.fnum));				
 11326              		.loc 1 2986 0
 11327 4b92 40F20003 		movw	r3, #:lower16:gobee_param
 11328 4b96 C0F20003 		movt	r3, #:upper16:gobee_param
 11329 4b9a 5B69     		ldr	r3, [r3, #20]	@ float
 11330 4b9c 1846     		mov	r0, r3
 11331 4b9e FFF7FEFF 		bl	__aeabi_f2d
 11332 4ba2 0246     		mov	r2, r0
 11333 4ba4 0B46     		mov	r3, r1
 11334 4ba6 40F20000 		movw	r0, #:lower16:.LC576
 11335 4baa C0F20000 		movt	r0, #:upper16:.LC576
 11336 4bae FFF7FEFF 		bl	printf
2987:.\console.c   **** 				printf("\r\n");
 11337              		.loc 1 2987 0
 11338 4bb2 40F20000 		movw	r0, #:lower16:.LC42
 11339 4bb6 C0F20000 		movt	r0, #:upper16:.LC42
 11340 4bba FFF7FEFF 		bl	puts
2988:.\console.c   **** 				
2989:.\console.c   **** 				goto exitpars;
 11341              		.loc 1 2989 0
 11342 4bbe 02F089BC 		b	.L131
 11343              	.L224:
2990:.\console.c   **** 			}
2991:.\console.c   **** 		goto exitpars;	
2992:.\console.c   **** 		}
2993:.\console.c   **** 		
2994:.\console.c   **** 		
2995:.\console.c   **** //		/* CMD MOVEPATH */
2996:.\console.c   **** //		if ((strcmp(actual_cmd.action, "movepath") == 0) ||
2997:.\console.c   **** //		   (strcmp(actual_cmd.action, "movep") == 0))
2998:.\console.c   **** //		{	
2999:.\console.c   **** //			if (((path_n = atoi(actual_cmd.parameter)) >= 0)
3000:.\console.c   **** //			&& (path_n = atoi(actual_cmd.parameter)) <= PATH_N_MAX-1)
3001:.\console.c   **** //			{
3002:.\console.c   **** //				if (machine_state == GOBEE_ENERGIZED)
3003:.\console.c   **** //				{
3004:.\console.c   **** //					printf("Path %2i Mover START!\r\n", (int16)path_n);				
3005:.\console.c   **** //					MoverStart(path_n);	/* Initialize & Start the Mover over path n		*/
3006:.\console.c   **** //					
3007:.\console.c   **** //					while (AnyButtonPressed() == NO_PRESSED)
3008:.\console.c   **** //					{
3009:.\console.c   **** //						//print . every 1 sec
3010:.\console.c   **** //						if (mover.ticks % MOVER_FREQ)
3011:.\console.c   **** //						printf(".");
3012:.\console.c   **** //						
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 304


3013:.\console.c   **** //						if (mover.status == MOVER_ENDED)
3014:.\console.c   **** //						{
3015:.\console.c   **** //							printf("\r\nPath %2i Mover END!\r\n", (int16)path_n);						
3016:.\console.c   **** //							goto exitpars;
3017:.\console.c   **** //						}
3018:.\console.c   **** //					}
3019:.\console.c   **** //				}
3020:.\console.c   **** //				else
3021:.\console.c   **** //				{
3022:.\console.c   **** //					printf("Mover Not Started: energize the Gobee before!\r\n");	
3023:.\console.c   **** //				}
3024:.\console.c   **** //			}
3025:.\console.c   **** //			else
3026:.\console.c   **** //			{
3027:.\console.c   **** //				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3028:.\console.c   **** //			}
3029:.\console.c   **** //			goto exitpars;	
3030:.\console.c   **** //		}	
3031:.\console.c   **** 
3032:.\console.c   **** 		
3033:.\console.c   **** 		/* CMD CLUEXEC */
3034:.\console.c   **** 		if (strcmp(actual_cmd.action, "cluexec") == 0)
 11344              		.loc 1 3034 0
 11345 4bc2 40F20000 		movw	r0, #:lower16:actual_cmd
 11346 4bc6 C0F20000 		movt	r0, #:upper16:actual_cmd
 11347 4bca 40F20001 		movw	r1, #:lower16:.LC578
 11348 4bce C0F20001 		movt	r1, #:upper16:.LC578
 11349 4bd2 FFF7FEFF 		bl	strcmp
 11350 4bd6 0346     		mov	r3, r0
 11351 4bd8 002B     		cmp	r3, #0
 11352 4bda 5ED1     		bne	.L384
3035:.\console.c   **** 		{	
3036:.\console.c   **** 			if (((clu_number = atoi(actual_cmd.parameter)) >= 0)
 11353              		.loc 1 3036 0
 11354 4bdc B148     		ldr	r0, .L752
 11355 4bde FFF7FEFF 		bl	atoi
 11356 4be2 0346     		mov	r3, r0
 11357 4be4 87F8EA30 		strb	r3, [r7, #234]
3037:.\console.c   **** 			&& (clu_number = atoi(actual_cmd.parameter)) <= MAX_CLU_NUMBER)
 11358              		.loc 1 3037 0
 11359 4be8 AE48     		ldr	r0, .L752
 11360 4bea FFF7FEFF 		bl	atoi
 11361 4bee 0346     		mov	r3, r0
 11362 4bf0 87F8EA30 		strb	r3, [r7, #234]
 11363 4bf4 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 11364 4bf8 322B     		cmp	r3, #50
 11365 4bfa 44D8     		bhi	.L385
3038:.\console.c   **** 			{
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 11366              		.loc 1 3039 0
 11367 4bfc 40F20003 		movw	r3, #:lower16:machine_state
 11368 4c00 C0F20003 		movt	r3, #:upper16:machine_state
 11369 4c04 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11370 4c06 052B     		cmp	r3, #5
 11371 4c08 35D1     		bne	.L386
3040:.\console.c   **** 				{
3041:.\console.c   **** 					if (isCluEmpty(clu_number) == CLU_IS_NOT_EMPTY)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 305


 11372              		.loc 1 3041 0
 11373 4c0a 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 11374 4c0e 1846     		mov	r0, r3
 11375 4c10 FFF7FEFF 		bl	isCluEmpty
 11376 4c14 0346     		mov	r3, r0
 11377 4c16 002B     		cmp	r3, #0
 11378 4c18 26D1     		bne	.L387
3042:.\console.c   **** 					{
3043:.\console.c   **** 						printf("CLU %2i START!\r\n", (int16)clu_number);
 11379              		.loc 1 3043 0
 11380 4c1a 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 11381 4c1e 40F20000 		movw	r0, #:lower16:.LC579
 11382 4c22 C0F20000 		movt	r0, #:upper16:.LC579
 11383 4c26 1946     		mov	r1, r3
 11384 4c28 FFF7FEFF 		bl	printf
3044:.\console.c   **** 						clu_sm_start((uint8)clu_number);
 11385              		.loc 1 3044 0
 11386 4c2c 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 11387 4c30 1846     		mov	r0, r3
 11388 4c32 FFF7FEFF 		bl	clu_sm_start
3045:.\console.c   **** 						
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 11389              		.loc 1 3046 0
 11390 4c36 11E0     		b	.L388
 11391              	.L389:
3047:.\console.c   **** 						{					
3048:.\console.c   **** 							if (clu_sm.status == CLUSM_END)
 11392              		.loc 1 3048 0
 11393 4c38 40F20003 		movw	r3, #:lower16:clu_sm
 11394 4c3c C0F20003 		movt	r3, #:upper16:clu_sm
 11395 4c40 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11396 4c42 0C2B     		cmp	r3, #12
 11397 4c44 0AD1     		bne	.L388
3049:.\console.c   **** 							{
3050:.\console.c   **** 								printf("\r\nCLU %2i END!\r\n", (int16)clu_number);						
 11398              		.loc 1 3050 0
 11399 4c46 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 11400 4c4a 40F20000 		movw	r0, #:lower16:.LC580
 11401 4c4e C0F20000 		movt	r0, #:upper16:.LC580
 11402 4c52 1946     		mov	r1, r3
 11403 4c54 FFF7FEFF 		bl	printf
3051:.\console.c   **** 								goto exitpars;
 11404              		.loc 1 3051 0
 11405 4c58 02F03CBC 		b	.L131
 11406              	.L388:
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 11407              		.loc 1 3046 0 discriminator 1
 11408 4c5c FFF7FEFF 		bl	AnyButtonPressed
 11409 4c60 0346     		mov	r3, r0
 11410 4c62 002B     		cmp	r3, #0
 11411 4c64 E8D0     		beq	.L389
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 11412              		.loc 1 3046 0 is_stmt 0
 11413 4c66 0DE0     		b	.L696
 11414              	.L387:
3052:.\console.c   **** 							}
3053:.\console.c   **** 						}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 306


3054:.\console.c   **** 					}
3055:.\console.c   **** 					else
3056:.\console.c   **** 					{
3057:.\console.c   **** 						printf("CLU not started: selected CLU is empty!\r\n");	
 11415              		.loc 1 3057 0 is_stmt 1
 11416 4c68 40F20000 		movw	r0, #:lower16:.LC581
 11417 4c6c C0F20000 		movt	r0, #:upper16:.LC581
 11418 4c70 FFF7FEFF 		bl	puts
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 11419              		.loc 1 3039 0
 11420 4c74 0FE0     		b	.L391
 11421              	.L386:
3058:.\console.c   **** 					}
3059:.\console.c   **** 				}
3060:.\console.c   **** 				else
3061:.\console.c   **** 				{
3062:.\console.c   **** 					printf("CLU not started: energize the Gobee before!\r\n");	
 11422              		.loc 1 3062 0
 11423 4c76 40F20000 		movw	r0, #:lower16:.LC582
 11424 4c7a C0F20000 		movt	r0, #:upper16:.LC582
 11425 4c7e FFF7FEFF 		bl	puts
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 11426              		.loc 1 3039 0
 11427 4c82 08E0     		b	.L391
 11428              	.L696:
 11429 4c84 07E0     		b	.L391
 11430              	.L385:
3063:.\console.c   **** 				}
3064:.\console.c   **** 			}
3065:.\console.c   **** 			else
3066:.\console.c   **** 			{
3067:.\console.c   **** 				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11431              		.loc 1 3067 0
 11432 4c86 40F20000 		movw	r0, #:lower16:.LC450
 11433 4c8a C0F20000 		movt	r0, #:upper16:.LC450
 11434 4c8e FFF7FEFF 		bl	printf
3068:.\console.c   **** 			}
3069:.\console.c   **** 			goto exitpars;	
 11435              		.loc 1 3069 0
 11436 4c92 02F01FBC 		b	.L131
 11437              	.L391:
 11438 4c96 02F01DBC 		b	.L131
 11439              	.L384:
3070:.\console.c   **** 		}
3071:.\console.c   **** 		/* END CMD CLUEXEC*/
3072:.\console.c   **** 		
3073:.\console.c   **** 		
3074:.\console.c   **** 		/* CMD CLUSEQUENCE */
3075:.\console.c   **** 		if (strcmp(actual_cmd.action, "cluseq") == 0)
 11440              		.loc 1 3075 0
 11441 4c9a 40F20000 		movw	r0, #:lower16:actual_cmd
 11442 4c9e C0F20000 		movt	r0, #:upper16:actual_cmd
 11443 4ca2 40F20001 		movw	r1, #:lower16:.LC583
 11444 4ca6 C0F20001 		movt	r1, #:upper16:.LC583
 11445 4caa FFF7FEFF 		bl	strcmp
 11446 4cae 0346     		mov	r3, r0
 11447 4cb0 002B     		cmp	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 307


 11448 4cb2 79D1     		bne	.L392
3076:.\console.c   **** 		{	
3077:.\console.c   **** 			if (((clu_pause = atoi(actual_cmd.parameter)) >= 0)
 11449              		.loc 1 3077 0
 11450 4cb4 7B48     		ldr	r0, .L752
 11451 4cb6 FFF7FEFF 		bl	atoi
 11452 4cba 0346     		mov	r3, r0
 11453 4cbc 87F8E930 		strb	r3, [r7, #233]
3078:.\console.c   **** 			&& (clu_pause = atoi(actual_cmd.parameter)) <= 30000)
 11454              		.loc 1 3078 0
 11455 4cc0 7848     		ldr	r0, .L752
 11456 4cc2 FFF7FEFF 		bl	atoi
 11457 4cc6 0346     		mov	r3, r0
 11458 4cc8 87F8E930 		strb	r3, [r7, #233]
3079:.\console.c   **** 			{
3080:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 11459              		.loc 1 3080 0
 11460 4ccc 40F20003 		movw	r3, #:lower16:machine_state
 11461 4cd0 C0F20003 		movt	r3, #:upper16:machine_state
 11462 4cd4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11463 4cd6 052B     		cmp	r3, #5
 11464 4cd8 5DD1     		bne	.L393
 11465              	.LBB9:
3081:.\console.c   **** 				{				
3082:.\console.c   **** 					InitCluSequence();
 11466              		.loc 1 3082 0
 11467 4cda FFF7FEFF 		bl	InitCluSequence
3083:.\console.c   **** 					
3084:.\console.c   **** 					uint8 clu_step = 0;
 11468              		.loc 1 3084 0
 11469 4cde 4FF00003 		mov	r3, #0
 11470 4ce2 87F8FE30 		strb	r3, [r7, #254]
3085:.\console.c   **** 					while (clu_sequence[clu_step] != 0xFF)
 11471              		.loc 1 3085 0
 11472 4ce6 45E0     		b	.L394
 11473              	.L397:
3086:.\console.c   **** 					{
3087:.\console.c   **** 						printf("CLU %2i START!\r\n", (int16)clu_sequence[clu_step]);
 11474              		.loc 1 3087 0
 11475 4ce8 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 11476 4cec 40F20003 		movw	r3, #:lower16:clu_sequence
 11477 4cf0 C0F20003 		movt	r3, #:upper16:clu_sequence
 11478 4cf4 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 11479 4cf6 40F20000 		movw	r0, #:lower16:.LC579
 11480 4cfa C0F20000 		movt	r0, #:upper16:.LC579
 11481 4cfe 1946     		mov	r1, r3
 11482 4d00 FFF7FEFF 		bl	printf
3088:.\console.c   **** 						clu_sm_start((uint8)clu_sequence[clu_step]);
 11483              		.loc 1 3088 0
 11484 4d04 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 11485 4d08 40F20003 		movw	r3, #:lower16:clu_sequence
 11486 4d0c C0F20003 		movt	r3, #:upper16:clu_sequence
 11487 4d10 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 11488 4d12 1846     		mov	r0, r3
 11489 4d14 FFF7FEFF 		bl	clu_sm_start
3089:.\console.c   **** 
3090:.\console.c   **** 						while (clu_sm.status != CLUSM_END)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 308


 11490              		.loc 1 3090 0
 11491 4d18 0CE0     		b	.L395
 11492              	.L396:
3091:.\console.c   **** 						{
3092:.\console.c   **** 							if (AnyButtonPressed() == PRESSED)
 11493              		.loc 1 3092 0
 11494 4d1a FFF7FEFF 		bl	AnyButtonPressed
 11495 4d1e 0346     		mov	r3, r0
 11496 4d20 012B     		cmp	r3, #1
 11497 4d22 07D1     		bne	.L395
3093:.\console.c   **** 							{
3094:.\console.c   **** 								printf("\r\nUser Abort!\r\n");
 11498              		.loc 1 3094 0
 11499 4d24 40F20000 		movw	r0, #:lower16:.LC584
 11500 4d28 C0F20000 		movt	r0, #:upper16:.LC584
 11501 4d2c FFF7FEFF 		bl	puts
3095:.\console.c   **** 								
3096:.\console.c   **** 								goto exitpars;	
 11502              		.loc 1 3096 0
 11503 4d30 02F0D0BB 		b	.L131
 11504              	.L395:
3090:.\console.c   **** 						while (clu_sm.status != CLUSM_END)
 11505              		.loc 1 3090 0 discriminator 1
 11506 4d34 40F20003 		movw	r3, #:lower16:clu_sm
 11507 4d38 C0F20003 		movt	r3, #:upper16:clu_sm
 11508 4d3c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11509 4d3e 0C2B     		cmp	r3, #12
 11510 4d40 EBD1     		bne	.L396
3097:.\console.c   **** 							}	
3098:.\console.c   **** 						}
3099:.\console.c   **** 						printf("\r\nCLU %2i END!\r\n", (int16)clu_sequence[clu_step]);
 11511              		.loc 1 3099 0
 11512 4d42 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 11513 4d46 40F20003 		movw	r3, #:lower16:clu_sequence
 11514 4d4a C0F20003 		movt	r3, #:upper16:clu_sequence
 11515 4d4e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 11516 4d50 40F20000 		movw	r0, #:lower16:.LC580
 11517 4d54 C0F20000 		movt	r0, #:upper16:.LC580
 11518 4d58 1946     		mov	r1, r3
 11519 4d5a FFF7FEFF 		bl	printf
3100:.\console.c   **** 						CyDelay(clu_pause);
 11520              		.loc 1 3100 0
 11521 4d5e 97F8E930 		ldrb	r3, [r7, #233]	@ zero_extendqisi2
 11522 4d62 1846     		mov	r0, r3
 11523 4d64 FFF7FEFF 		bl	CyDelay
3101:.\console.c   **** 						clu_step++;
 11524              		.loc 1 3101 0
 11525 4d68 97F8FE30 		ldrb	r3, [r7, #254]
 11526 4d6c 03F10103 		add	r3, r3, #1
 11527 4d70 87F8FE30 		strb	r3, [r7, #254]
 11528              	.L394:
3085:.\console.c   **** 					while (clu_sequence[clu_step] != 0xFF)
 11529              		.loc 1 3085 0 discriminator 1
 11530 4d74 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 11531 4d78 40F20003 		movw	r3, #:lower16:clu_sequence
 11532 4d7c C0F20003 		movt	r3, #:upper16:clu_sequence
 11533 4d80 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 309


 11534 4d82 FF2B     		cmp	r3, #255
 11535 4d84 B0D1     		bne	.L397
3102:.\console.c   **** 					}
3103:.\console.c   **** 					printf("\r\nCLU SEQUENCE END!\r\n");
 11536              		.loc 1 3103 0
 11537 4d86 40F20000 		movw	r0, #:lower16:.LC585
 11538 4d8a C0F20000 		movt	r0, #:upper16:.LC585
 11539 4d8e FFF7FEFF 		bl	puts
3104:.\console.c   **** 					goto exitpars;
 11540              		.loc 1 3104 0
 11541 4d92 02F09FBB 		b	.L131
 11542              	.L393:
 11543              	.LBE9:
3105:.\console.c   **** 				}
3106:.\console.c   **** 				else
3107:.\console.c   **** 				{
3108:.\console.c   **** 					printf("CLUSEQ not started: energize the Gobee before!\r\n");	
 11544              		.loc 1 3108 0 discriminator 1
 11545 4d96 40F20000 		movw	r0, #:lower16:.LC586
 11546 4d9a C0F20000 		movt	r0, #:upper16:.LC586
 11547 4d9e FFF7FEFF 		bl	puts
3080:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 11548              		.loc 1 3080 0 discriminator 1
 11549 4da2 00BF     		nop
3109:.\console.c   **** 				}				
3110:.\console.c   **** 			}
3111:.\console.c   **** 			else
3112:.\console.c   **** 			{
3113:.\console.c   **** 				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3114:.\console.c   **** 			}
3115:.\console.c   **** 			goto exitpars;	
 11550              		.loc 1 3115 0 discriminator 1
 11551 4da4 02F096BB 		b	.L131
 11552              	.L392:
3116:.\console.c   **** 		}
3117:.\console.c   **** 		/* END CMD CLUSEQUENCE*/		
3118:.\console.c   **** 		
3119:.\console.c   **** 		
3120:.\console.c   **** 		/* CMD GOTOHOME */
3121:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotohome") == 0) ||
 11553              		.loc 1 3121 0
 11554 4da8 40F20000 		movw	r0, #:lower16:actual_cmd
 11555 4dac C0F20000 		movt	r0, #:upper16:actual_cmd
 11556 4db0 40F20001 		movw	r1, #:lower16:.LC587
 11557 4db4 C0F20001 		movt	r1, #:upper16:.LC587
 11558 4db8 FFF7FEFF 		bl	strcmp
 11559 4dbc 0346     		mov	r3, r0
 11560 4dbe 002B     		cmp	r3, #0
 11561 4dc0 0CD0     		beq	.L398
3122:.\console.c   **** 		   (strcmp(actual_cmd.action, "gotoh") == 0))
 11562              		.loc 1 3122 0 discriminator 1
 11563 4dc2 40F20000 		movw	r0, #:lower16:actual_cmd
 11564 4dc6 C0F20000 		movt	r0, #:upper16:actual_cmd
 11565 4dca 40F20001 		movw	r1, #:lower16:.LC588
 11566 4dce C0F20001 		movt	r1, #:upper16:.LC588
 11567 4dd2 FFF7FEFF 		bl	strcmp
 11568 4dd6 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 310


3121:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotohome") == 0) ||
 11569              		.loc 1 3121 0 discriminator 1
 11570 4dd8 002B     		cmp	r3, #0
 11571 4dda 65D1     		bne	.L399
 11572              	.L398:
3123:.\console.c   **** 		{	
3124:.\console.c   **** 			if (machine_state == GOBEE_ENERGIZED)
 11573              		.loc 1 3124 0
 11574 4ddc 40F20003 		movw	r3, #:lower16:machine_state
 11575 4de0 C0F20003 		movt	r3, #:upper16:machine_state
 11576 4de4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11577 4de6 052B     		cmp	r3, #5
 11578 4de8 52D1     		bne	.L400
3125:.\console.c   **** 			{
3126:.\console.c   **** 				printf("Goto Home Mover START!\r\n");	
 11579              		.loc 1 3126 0
 11580 4dea 40F20000 		movw	r0, #:lower16:.LC589
 11581 4dee C0F20000 		movt	r0, #:upper16:.LC589
 11582 4df2 FFF7FEFF 		bl	puts
3127:.\console.c   **** 				InitPanGotoHomePath();						/* initialize the Pan Goto Home Path					*/
 11583              		.loc 1 3127 0
 11584 4df6 FFF7FEFF 		bl	InitPanGotoHomePath
3128:.\console.c   **** 				InitTiltGotoHomePath();						/* initialize the Tilt Goto Home Path					*/			
 11585              		.loc 1 3128 0
 11586 4dfa FFF7FEFF 		bl	InitTiltGotoHomePath
3129:.\console.c   **** 				CalculatePanGotoHomePath();					/* Calculate the  Pan Goto Home Path 					*/
 11587              		.loc 1 3129 0
 11588 4dfe FFF7FEFF 		bl	CalculatePanGotoHomePath
3130:.\console.c   **** 				CalculateTiltGotoHomePath();				/* Calculate the  Tilt Goto Home Path 					*/			
 11589              		.loc 1 3130 0
 11590 4e02 FFF7FEFF 		bl	CalculateTiltGotoHomePath
3131:.\console.c   **** 				MoverStart(&mover_pan, PATH_PGOTOHOME);		/* Initialize & Start the Mover over Pan path to Home	
 11591              		.loc 1 3131 0
 11592 4e06 40F20000 		movw	r0, #:lower16:mover_pan
 11593 4e0a C0F20000 		movt	r0, #:upper16:mover_pan
 11594 4e0e 4FF00201 		mov	r1, #2
 11595 4e12 FFF7FEFF 		bl	MoverStart
3132:.\console.c   **** 				MoverStart(&mover_tilt, PATH_TGOTOHOME);	/* Initialize & Start the Mover over Tilt path to Home
 11596              		.loc 1 3132 0
 11597 4e16 40F20000 		movw	r0, #:lower16:mover_tilt
 11598 4e1a C0F20000 		movt	r0, #:upper16:mover_tilt
 11599 4e1e 4FF00301 		mov	r1, #3
 11600 4e22 FFF7FEFF 		bl	MoverStart
3133:.\console.c   **** 				
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11601              		.loc 1 3134 0
 11602 4e26 2DE0     		b	.L401
 11603              	.L403:
3135:.\console.c   **** 				{
3136:.\console.c   **** 					//print . every 1 sec
3137:.\console.c   **** 					if ((mover_pan.ticks % MOVER_FREQ) == 0)
 11604              		.loc 1 3137 0
 11605 4e28 40F20003 		movw	r3, #:lower16:mover_pan
 11606 4e2c C0F20003 		movt	r3, #:upper16:mover_pan
 11607 4e30 5A68     		ldr	r2, [r3, #4]
 11608 4e32 41F6F113 		movw	r3, #6641
 11609 4e36 C0F27653 		movt	r3, 1398
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 311


 11610 4e3a A3FB0213 		umull	r1, r3, r3, r2
 11611 4e3e 4FEA5313 		lsr	r3, r3, #5
 11612 4e42 40F2DC51 		movw	r1, #1500
 11613 4e46 01FB03F3 		mul	r3, r1, r3
 11614 4e4a D31A     		subs	r3, r2, r3
 11615 4e4c 002B     		cmp	r3, #0
 11616 4e4e 03D1     		bne	.L402
3138:.\console.c   **** 					printf(".");
 11617              		.loc 1 3138 0
 11618 4e50 4FF02E00 		mov	r0, #46
 11619 4e54 FFF7FEFF 		bl	putchar
 11620              	.L402:
3139:.\console.c   **** 					
3140:.\console.c   **** 					if ((mover_pan.status == MOVER_ENDED) && (mover_tilt.status == MOVER_ENDED))
 11621              		.loc 1 3140 0
 11622 4e58 40F20003 		movw	r3, #:lower16:mover_pan
 11623 4e5c C0F20003 		movt	r3, #:upper16:mover_pan
 11624 4e60 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11625 4e62 022B     		cmp	r3, #2
 11626 4e64 0ED1     		bne	.L401
 11627              		.loc 1 3140 0 is_stmt 0 discriminator 1
 11628 4e66 40F20003 		movw	r3, #:lower16:mover_tilt
 11629 4e6a C0F20003 		movt	r3, #:upper16:mover_tilt
 11630 4e6e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11631 4e70 022B     		cmp	r3, #2
 11632 4e72 07D1     		bne	.L401
3141:.\console.c   **** 					{
3142:.\console.c   **** 						printf("\r\nGoto Home Mover END!\r\n");						
 11633              		.loc 1 3142 0 is_stmt 1
 11634 4e74 40F20000 		movw	r0, #:lower16:.LC590
 11635 4e78 C0F20000 		movt	r0, #:upper16:.LC590
 11636 4e7c FFF7FEFF 		bl	puts
3143:.\console.c   **** 						goto exitpars;
 11637              		.loc 1 3143 0
 11638 4e80 02F028BB 		b	.L131
 11639              	.L401:
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11640              		.loc 1 3134 0 discriminator 1
 11641 4e84 FFF7FEFF 		bl	AnyButtonPressed
 11642 4e88 0346     		mov	r3, r0
 11643 4e8a 002B     		cmp	r3, #0
 11644 4e8c CCD0     		beq	.L403
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11645              		.loc 1 3134 0 is_stmt 0
 11646 4e8e 07E0     		b	.L697
 11647              	.L400:
3144:.\console.c   **** 					}
3145:.\console.c   **** 				}
3146:.\console.c   **** 			}
3147:.\console.c   **** 			else
3148:.\console.c   **** 			{
3149:.\console.c   **** 				printf("Goto Home Mover Not Started: energize the Gobee before!\r\n");	
 11648              		.loc 1 3149 0 is_stmt 1
 11649 4e90 40F20000 		movw	r0, #:lower16:.LC591
 11650 4e94 C0F20000 		movt	r0, #:upper16:.LC591
 11651 4e98 FFF7FEFF 		bl	puts
3150:.\console.c   **** 			}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 312


3151:.\console.c   **** 			goto exitpars;	
 11652              		.loc 1 3151 0
 11653 4e9c 02F01ABB 		b	.L131
 11654              	.L697:
 11655 4ea0 02F018BB 		b	.L131
 11656              	.L753:
 11657              		.align	2
 11658              	.L752:
 11659 4ea4 0F000000 		.word	actual_cmd+15
 11660              	.L399:
3152:.\console.c   **** 		}
3153:.\console.c   **** 		/* CMD GOTOHOME END */
3154:.\console.c   **** 		
3155:.\console.c   **** 		
3156:.\console.c   **** 		/* CMD GOTOQ */
3157:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotoq") == 0) ||
 11661              		.loc 1 3157 0
 11662 4ea8 40F20000 		movw	r0, #:lower16:actual_cmd
 11663 4eac C0F20000 		movt	r0, #:upper16:actual_cmd
 11664 4eb0 40F20001 		movw	r1, #:lower16:.LC592
 11665 4eb4 C0F20001 		movt	r1, #:upper16:.LC592
 11666 4eb8 FFF7FEFF 		bl	strcmp
 11667 4ebc 0346     		mov	r3, r0
 11668 4ebe 002B     		cmp	r3, #0
 11669 4ec0 0DD0     		beq	.L405
3158:.\console.c   **** 		    (strcmp(actual_cmd.action, "g") == 0))
 11670              		.loc 1 3158 0 discriminator 1
 11671 4ec2 40F20000 		movw	r0, #:lower16:actual_cmd
 11672 4ec6 C0F20000 		movt	r0, #:upper16:actual_cmd
 11673 4eca 40F20001 		movw	r1, #:lower16:.LC593
 11674 4ece C0F20001 		movt	r1, #:upper16:.LC593
 11675 4ed2 FFF7FEFF 		bl	strcmp
 11676 4ed6 0346     		mov	r3, r0
3157:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotoq") == 0) ||
 11677              		.loc 1 3157 0 discriminator 1
 11678 4ed8 002B     		cmp	r3, #0
 11679 4eda 40F0DC80 		bne	.L406
 11680              	.L405:
3159:.\console.c   **** 		
3160:.\console.c   **** 		{	
3161:.\console.c   **** 			if (((q_number = atoi(actual_cmd.parameter)) >= Q_NUMBER_MIN)
 11681              		.loc 1 3161 0
 11682 4ede BA48     		ldr	r0, .L754
 11683 4ee0 FFF7FEFF 		bl	atoi
 11684 4ee4 0346     		mov	r3, r0
 11685 4ee6 87F8E530 		strb	r3, [r7, #229]
 11686 4eea 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11687 4eee 002B     		cmp	r3, #0
 11688 4ef0 00F0C780 		beq	.L407
3162:.\console.c   **** 			&& (q_number = atoi(actual_cmd.parameter)) <= Q_NUMBER_MAX)
 11689              		.loc 1 3162 0
 11690 4ef4 B448     		ldr	r0, .L754
 11691 4ef6 FFF7FEFF 		bl	atoi
 11692 4efa 0346     		mov	r3, r0
 11693 4efc 87F8E530 		strb	r3, [r7, #229]
 11694 4f00 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11695 4f04 632B     		cmp	r3, #99
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 313


 11696 4f06 00F2BC80 		bhi	.L407
3163:.\console.c   **** 			{	
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11697              		.loc 1 3164 0
 11698 4f0a B048     		ldr	r0, .L754+4
 11699 4f0c FFF7FEFF 		bl	atof
 11700 4f10 0246     		mov	r2, r0
 11701 4f12 0B46     		mov	r3, r1
 11702 4f14 1046     		mov	r0, r2
 11703 4f16 1946     		mov	r1, r3
 11704 4f18 FFF7FEFF 		bl	__aeabi_d2f
 11705 4f1c 0346     		mov	r3, r0
 11706 4f1e C7F81431 		str	r3, [r7, #276]	@ float
 11707 4f22 D7F81401 		ldr	r0, [r7, #276]	@ float
 11708 4f26 4FF00001 		mov	r1, #0
 11709 4f2a FFF7FEFF 		bl	__aeabi_fcmpge
 11710 4f2e 0346     		mov	r3, r0
 11711 4f30 002B     		cmp	r3, #0
 11712 4f32 00F0AE80 		beq	.L418
 11713              	.L655:
3165:.\console.c   **** 				&& (time_loc = atof(actual_cmd.number1)) <= 30)		//[sec]
 11714              		.loc 1 3165 0
 11715 4f36 A548     		ldr	r0, .L754+4
 11716 4f38 FFF7FEFF 		bl	atof
 11717 4f3c 0246     		mov	r2, r0
 11718 4f3e 0B46     		mov	r3, r1
 11719 4f40 1046     		mov	r0, r2
 11720 4f42 1946     		mov	r1, r3
 11721 4f44 FFF7FEFF 		bl	__aeabi_d2f
 11722 4f48 0346     		mov	r3, r0
 11723 4f4a C7F81431 		str	r3, [r7, #276]	@ float
 11724 4f4e D7F81401 		ldr	r0, [r7, #276]	@ float
 11725 4f52 4FF00001 		mov	r1, #0
 11726 4f56 C4F2F011 		movt	r1, 16880
 11727 4f5a FFF7FEFF 		bl	__aeabi_fcmple
 11728 4f5e 0346     		mov	r3, r0
 11729 4f60 002B     		cmp	r3, #0
 11730 4f62 00F08D80 		beq	.L408
 11731              	.L656:
3166:.\console.c   **** 				{
3167:.\console.c   **** 					if (machine_state == GOBEE_ENERGIZED)
 11732              		.loc 1 3167 0
 11733 4f66 40F20003 		movw	r3, #:lower16:machine_state
 11734 4f6a C0F20003 		movt	r3, #:upper16:machine_state
 11735 4f6e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11736 4f70 052B     		cmp	r3, #5
 11737 4f72 7ED1     		bne	.L411
3168:.\console.c   **** 					{
3169:.\console.c   **** 						if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)		//is Q allocated on any memory?
 11738              		.loc 1 3169 0
 11739 4f74 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 11740 4f78 40F20003 		movw	r3, #:lower16:q_table
 11741 4f7c C0F20003 		movt	r3, #:upper16:q_table
 11742 4f80 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 11743 4f82 FF2B     		cmp	r3, #255
 11744 4f84 6BD0     		beq	.L412
3170:.\console.c   **** 						{
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 314


3171:.\console.c   **** 							if (time_loc == 0)
 11745              		.loc 1 3171 0
 11746 4f86 D7F81401 		ldr	r0, [r7, #276]	@ float
 11747 4f8a 4FF00001 		mov	r1, #0
 11748 4f8e FFF7FEFF 		bl	__aeabi_fcmpeq
 11749 4f92 0346     		mov	r3, r0
 11750 4f94 002B     		cmp	r3, #0
 11751 4f96 03D0     		beq	.L413
 11752              	.L657:
3172:.\console.c   **** 							{
3173:.\console.c   **** 								time_loc = 2;	//default 2 sec	
 11753              		.loc 1 3173 0
 11754 4f98 4FF08043 		mov	r3, #1073741824
 11755 4f9c C7F81431 		str	r3, [r7, #276]	@ float
 11756              	.L413:
3174:.\console.c   **** 							}
3175:.\console.c   **** 							
3176:.\console.c   **** 							printf("Goto Q Mover START!\r\n");	
 11757              		.loc 1 3176 0
 11758 4fa0 40F20000 		movw	r0, #:lower16:.LC594
 11759 4fa4 C0F20000 		movt	r0, #:upper16:.LC594
 11760 4fa8 FFF7FEFF 		bl	puts
3177:.\console.c   **** 							InitPanGotoQPath(q_number, time_loc);	/* initialize the Pan Goto Q Path					*/
 11761              		.loc 1 3177 0
 11762 4fac 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11763 4fb0 5BB2     		sxtb	r3, r3
 11764 4fb2 1846     		mov	r0, r3
 11765 4fb4 D7F81411 		ldr	r1, [r7, #276]	@ float
 11766 4fb8 FFF7FEFF 		bl	InitPanGotoQPath
3178:.\console.c   **** 							InitTiltGotoQPath(q_number, time_loc);	/* initialize the Tilt Goto Q Path					*/			
 11767              		.loc 1 3178 0
 11768 4fbc 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11769 4fc0 5BB2     		sxtb	r3, r3
 11770 4fc2 1846     		mov	r0, r3
 11771 4fc4 D7F81411 		ldr	r1, [r7, #276]	@ float
 11772 4fc8 FFF7FEFF 		bl	InitTiltGotoQPath
3179:.\console.c   **** 							CalculatePanGotoQPath();				/* Calculate the  Pan Goto Q Path 					*/
 11773              		.loc 1 3179 0
 11774 4fcc FFF7FEFF 		bl	CalculatePanGotoQPath
3180:.\console.c   **** 							CalculateTiltGotoQPath();				/* Calculate the  Tilt Goto Q Path 					*/			
 11775              		.loc 1 3180 0
 11776 4fd0 FFF7FEFF 		bl	CalculateTiltGotoQPath
3181:.\console.c   **** 							MoverStart(&mover_pan, PATH_PGOTOQ);	/* Initialize & Start the Mover over Pan path to Q	*/
 11777              		.loc 1 3181 0
 11778 4fd4 40F20000 		movw	r0, #:lower16:mover_pan
 11779 4fd8 C0F20000 		movt	r0, #:upper16:mover_pan
 11780 4fdc 4FF00401 		mov	r1, #4
 11781 4fe0 FFF7FEFF 		bl	MoverStart
3182:.\console.c   **** 							MoverStart(&mover_tilt, PATH_TGOTOQ);	/* Initialize & Start the Mover over Tilt path to Q	*/
 11782              		.loc 1 3182 0
 11783 4fe4 40F20000 		movw	r0, #:lower16:mover_tilt
 11784 4fe8 C0F20000 		movt	r0, #:upper16:mover_tilt
 11785 4fec 4FF00501 		mov	r1, #5
 11786 4ff0 FFF7FEFF 		bl	MoverStart
3183:.\console.c   **** 							
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11787              		.loc 1 3184 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 315


 11788 4ff4 2DE0     		b	.L415
 11789              	.L417:
3185:.\console.c   **** 							{
3186:.\console.c   **** 								//print . every 1 sec
3187:.\console.c   **** 								if ((mover_pan.ticks % MOVER_FREQ) == 0)
 11790              		.loc 1 3187 0
 11791 4ff6 40F20003 		movw	r3, #:lower16:mover_pan
 11792 4ffa C0F20003 		movt	r3, #:upper16:mover_pan
 11793 4ffe 5A68     		ldr	r2, [r3, #4]
 11794 5000 41F6F113 		movw	r3, #6641
 11795 5004 C0F27653 		movt	r3, 1398
 11796 5008 A3FB0203 		umull	r0, r3, r3, r2
 11797 500c 4FEA5313 		lsr	r3, r3, #5
 11798 5010 40F2DC51 		movw	r1, #1500
 11799 5014 01FB03F3 		mul	r3, r1, r3
 11800 5018 D31A     		subs	r3, r2, r3
 11801 501a 002B     		cmp	r3, #0
 11802 501c 03D1     		bne	.L416
3188:.\console.c   **** 								printf(".");
 11803              		.loc 1 3188 0
 11804 501e 4FF02E00 		mov	r0, #46
 11805 5022 FFF7FEFF 		bl	putchar
 11806              	.L416:
3189:.\console.c   **** 								
3190:.\console.c   **** 								if ((mover_pan.status == MOVER_ENDED) && (mover_tilt.status == MOVER_ENDED))
 11807              		.loc 1 3190 0
 11808 5026 40F20003 		movw	r3, #:lower16:mover_pan
 11809 502a C0F20003 		movt	r3, #:upper16:mover_pan
 11810 502e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11811 5030 022B     		cmp	r3, #2
 11812 5032 0ED1     		bne	.L415
 11813              		.loc 1 3190 0 is_stmt 0 discriminator 1
 11814 5034 40F20003 		movw	r3, #:lower16:mover_tilt
 11815 5038 C0F20003 		movt	r3, #:upper16:mover_tilt
 11816 503c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11817 503e 022B     		cmp	r3, #2
 11818 5040 07D1     		bne	.L415
3191:.\console.c   **** 								{
3192:.\console.c   **** 									printf("\r\nGoto Q Mover END!\r\n");						
 11819              		.loc 1 3192 0 is_stmt 1
 11820 5042 40F20000 		movw	r0, #:lower16:.LC595
 11821 5046 C0F20000 		movt	r0, #:upper16:.LC595
 11822 504a FFF7FEFF 		bl	puts
3193:.\console.c   **** 									goto exitpars;
 11823              		.loc 1 3193 0
 11824 504e 02F041BA 		b	.L131
 11825              	.L415:
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11826              		.loc 1 3184 0 discriminator 1
 11827 5052 FFF7FEFF 		bl	AnyButtonPressed
 11828 5056 0346     		mov	r3, r0
 11829 5058 002B     		cmp	r3, #0
 11830 505a CCD0     		beq	.L417
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11831              		.loc 1 3184 0 is_stmt 0
 11832 505c 10E0     		b	.L408
 11833              	.L412:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 316


3194:.\console.c   **** 								}
3195:.\console.c   **** 							}
3196:.\console.c   **** 						}
3197:.\console.c   **** 						else
3198:.\console.c   **** 						{
3199:.\console.c   **** 							printf("Goto Q Mover Not Started: QMemory %02d NOT ALLOCATED!\r\n",(uint16)q_number);
 11834              		.loc 1 3199 0 is_stmt 1
 11835 505e 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11836 5062 40F20000 		movw	r0, #:lower16:.LC596
 11837 5066 C0F20000 		movt	r0, #:upper16:.LC596
 11838 506a 1946     		mov	r1, r3
 11839 506c FFF7FEFF 		bl	printf
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11840              		.loc 1 3164 0
 11841 5070 0FE0     		b	.L418
 11842              	.L411:
3200:.\console.c   **** 						}						
3201:.\console.c   **** 					}
3202:.\console.c   **** 					else
3203:.\console.c   **** 					{
3204:.\console.c   **** 						printf("Goto Q Mover Not Started: energize the Gobee before!\r\n");	
 11843              		.loc 1 3204 0
 11844 5072 40F20000 		movw	r0, #:lower16:.LC597
 11845 5076 C0F20000 		movt	r0, #:upper16:.LC597
 11846 507a FFF7FEFF 		bl	puts
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11847              		.loc 1 3164 0
 11848 507e 08E0     		b	.L418
 11849              	.L408:
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11850              		.loc 1 3164 0 is_stmt 0 discriminator 1
 11851 5080 07E0     		b	.L418
 11852              	.L407:
3205:.\console.c   **** 					}
3206:.\console.c   **** 				}
3207:.\console.c   **** 			}
3208:.\console.c   **** 			else
3209:.\console.c   **** 			{
3210:.\console.c   **** 				printf("Goto Q Mover Not Started: Q maximum is 99!\r\n");	
 11853              		.loc 1 3210 0 is_stmt 1
 11854 5082 40F20000 		movw	r0, #:lower16:.LC598
 11855 5086 C0F20000 		movt	r0, #:upper16:.LC598
 11856 508a FFF7FEFF 		bl	puts
3211:.\console.c   **** 			}
3212:.\console.c   **** 			goto exitpars;	
 11857              		.loc 1 3212 0
 11858 508e 02F021BA 		b	.L131
 11859              	.L418:
 11860 5092 02F01FBA 		b	.L131
 11861              	.L406:
3213:.\console.c   **** 		}
3214:.\console.c   **** 		/* CMD GOTOQ END */
3215:.\console.c   **** 
3216:.\console.c   **** 		
3217:.\console.c   **** //		/* CMD CIAK */
3218:.\console.c   **** //		if (strcmp(actual_cmd.action, "ciak") == 0)
3219:.\console.c   **** //		{	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 317


3220:.\console.c   **** //			if (machine_state == GOBEE_ENERGIZED)
3221:.\console.c   **** //			{
3222:.\console.c   **** //				int8 ciak_num = 2;	/* ciak path iterations */
3223:.\console.c   **** //				
3224:.\console.c   **** //				printf("CIAK Mover START!\r\n");	
3225:.\console.c   **** //				MoverStart(5);				/* Initialize & Start the Mover over path 5	*/
3226:.\console.c   **** //				
3227:.\console.c   **** //				while (AnyButtonPressed() == NO_PRESSED)
3228:.\console.c   **** //				{
3229:.\console.c   **** //					//print . every 1 sec
3230:.\console.c   **** //					if (mover.ticks % MOVER_FREQ)
3231:.\console.c   **** //					printf(".");
3232:.\console.c   **** //					
3233:.\console.c   **** //					if (mover.status == MOVER_ENDED)
3234:.\console.c   **** //					{
3235:.\console.c   **** //						ciak_num--;
3236:.\console.c   **** //						if (ciak_num>0)
3237:.\console.c   **** //						{
3238:.\console.c   **** //							MoverStart(5);				/* Redo CIAK */
3239:.\console.c   **** //						}
3240:.\console.c   **** //						else
3241:.\console.c   **** //						{
3242:.\console.c   **** //						printf("\r\nCIAK Mover END!\r\n");						
3243:.\console.c   **** //						goto exitpars;
3244:.\console.c   **** //						}
3245:.\console.c   **** //					}
3246:.\console.c   **** //				}
3247:.\console.c   **** //			}
3248:.\console.c   **** //			else
3249:.\console.c   **** //			{
3250:.\console.c   **** //				printf("CIAK Mover Not Started: energize the Gobee before!\r\n");	
3251:.\console.c   **** //			}
3252:.\console.c   **** //			goto exitpars;	
3253:.\console.c   **** //		}					
3254:.\console.c   **** 		
3255:.\console.c   **** 		
3256:.\console.c   **** 		/* CMD SET*/
3257:.\console.c   **** 		if (strcmp(actual_cmd.action, "set") == 0)
 11862              		.loc 1 3257 0
 11863 5096 40F20000 		movw	r0, #:lower16:actual_cmd
 11864 509a C0F20000 		movt	r0, #:upper16:actual_cmd
 11865 509e 40F20001 		movw	r1, #:lower16:.LC167
 11866 50a2 C0F20001 		movt	r1, #:upper16:.LC167
 11867 50a6 FFF7FEFF 		bl	strcmp
 11868 50aa 0346     		mov	r3, r0
 11869 50ac 002B     		cmp	r3, #0
 11870 50ae 42F0FD81 		bne	.L419
3258:.\console.c   **** 		{
3259:.\console.c   **** 			if (strlen(actual_cmd.parameter) == 0)
 11871              		.loc 1 3259 0
 11872 50b2 454B     		ldr	r3, .L754
 11873 50b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11874 50b6 002B     		cmp	r3, #0
 11875 50b8 07D1     		bne	.L420
3260:.\console.c   **** 			{
3261:.\console.c   **** 				printf(STR_ERROR2);		/* ERROR2: more parameters needed! */
 11876              		.loc 1 3261 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 318


 11877 50ba 40F20000 		movw	r0, #:lower16:.LC599
 11878 50be C0F20000 		movt	r0, #:upper16:.LC599
 11879 50c2 FFF7FEFF 		bl	printf
3262:.\console.c   **** 			}
3263:.\console.c   **** 			else
3264:.\console.c   **** 			{
3265:.\console.c   **** 				// SET DIRECTOR
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
3267:.\console.c   **** 					(strcmp(actual_cmd.parameter, "dir") == 0))
3268:.\console.c   **** 				{	
3269:.\console.c   **** 					if (((director = atoi(actual_cmd.number1)) >= STANLEY)
3270:.\console.c   **** 					&& (director = atoi(actual_cmd.number1)) <= JJ)
3271:.\console.c   **** 					{
3272:.\console.c   **** 						gobee_param.director = director;
3273:.\console.c   **** 						
3274:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3275:.\console.c   **** 						dummy = WriteAllEEparams();
3276:.\console.c   **** 						printf(STR_REM_SEDR, (uint16)director);   /* REM: director setted to...*/
3277:.\console.c   **** 						ShowParamsDirector();
3278:.\console.c   **** 					}
3279:.\console.c   **** 					else
3280:.\console.c   **** 					{
3281:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3282:.\console.c   **** 					}
3283:.\console.c   **** 					goto exitpars;
3284:.\console.c   **** 				}	
3285:.\console.c   **** 				// END SET DIRECTOR
3286:.\console.c   **** 				
3287:.\console.c   **** 				
3288:.\console.c   **** 				// SET MACHINE MODE
3289:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "mode") == 0)
3290:.\console.c   **** 				{	
3291:.\console.c   **** 					if (((mode_loc = atoi(actual_cmd.number1)) >= REMOTECONTROL_MODE)
3292:.\console.c   **** 					&& (mode_loc = atoi(actual_cmd.number1)) <= DIRECTOR_MODE)
3293:.\console.c   **** 					{
3294:.\console.c   **** 						gobee_param.mode = mode_loc;
3295:.\console.c   **** 						
3296:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3297:.\console.c   **** 						dummy = WriteAllEEparams();
3298:.\console.c   **** 						printf(STR_REM_SMOD, (uint16)mode_loc);   /* REM: machine mode setted to...*/					
3299:.\console.c   **** 					}
3300:.\console.c   **** 					else
3301:.\console.c   **** 					{
3302:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3303:.\console.c   **** 					}
3304:.\console.c   **** 					goto exitpars;
3305:.\console.c   **** 				}	
3306:.\console.c   **** 				// END SET MACHINE MODE
3307:.\console.c   **** 				
3308:.\console.c   **** 				
3309:.\console.c   **** 				// SET PAN MOTOR POLARITY
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
3311:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polp") == 0))
3312:.\console.c   **** 				{	
3313:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
3314:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
3315:.\console.c   **** 					{
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 319


3316:.\console.c   **** 						pan_axis.param.polarity = polarity;
3317:.\console.c   **** 						
3318:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3319:.\console.c   **** 						dummy = WriteAllEEparams();
3320:.\console.c   **** 						printf(STR_REM_SETP, (uint16)polarity);   /* REM: pan axis polarity setted to...*/					
3321:.\console.c   **** 					}
3322:.\console.c   **** 					else
3323:.\console.c   **** 					{
3324:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3325:.\console.c   **** 					}
3326:.\console.c   **** 					goto exitpars;
3327:.\console.c   **** 				}	
3328:.\console.c   **** 				// END PAN MOTOR POLARITY
3329:.\console.c   **** 
3330:.\console.c   **** 				
3331:.\console.c   **** 				// SET TILT MOTOR POLARITY
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
3333:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polt") == 0))
3334:.\console.c   **** 				{	
3335:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
3336:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
3337:.\console.c   **** 					{
3338:.\console.c   **** 						tilt_axis.param.polarity = polarity;
3339:.\console.c   **** 						
3340:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3341:.\console.c   **** 						dummy = WriteAllEEparams();
3342:.\console.c   **** 						printf(STR_REM_SETPT, (uint16)polarity);   /* REM: tilt axis polarity setted to...*/					
3343:.\console.c   **** 					}
3344:.\console.c   **** 					else
3345:.\console.c   **** 					{
3346:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3347:.\console.c   **** 					}
3348:.\console.c   **** 					goto exitpars;
3349:.\console.c   **** 				}	
3350:.\console.c   **** 				// END TILT MOTOR POLARITY
3351:.\console.c   **** 				
3352:.\console.c   **** 
3353:.\console.c   **** 				// SET PAN MOTOR LIMIT CONTROL
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
3355:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lcp") == 0))
3356:.\console.c   **** 				{	
3357:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
3358:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
3359:.\console.c   **** 					{
3360:.\console.c   **** 						pan_axis.param.limit_control = limit_control;
3361:.\console.c   **** 						
3362:.\console.c   **** 						/* Writes parameter on EEPROM */
3363:.\console.c   **** 						dummy = WriteAllEEparams();
3364:.\console.c   **** 						printf(STR_REM_STLP, (uint16)limit_control);   /* REM: pan axis limit control setted to...*/	
3365:.\console.c   **** 					}
3366:.\console.c   **** 					else
3367:.\console.c   **** 					{
3368:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3369:.\console.c   **** 					}
3370:.\console.c   **** 					goto exitpars;
3371:.\console.c   **** 				}	
3372:.\console.c   **** 				// END PAN MOTOR LIMIT CONTROL		
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 320


3373:.\console.c   **** 				
3374:.\console.c   **** 				
3375:.\console.c   **** 				// SET ABSOLUTE SENSOR PAN INVERTION
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
3377:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invp") == 0))
3378:.\console.c   **** 				{	
3379:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
3380:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
3381:.\console.c   **** 					{
3382:.\console.c   **** 						pan_absolute_sensor.param.raw_invertion = raw_invertion;
3383:.\console.c   **** 						
3384:.\console.c   **** 						/* Writes parameter on EEPROM */
3385:.\console.c   **** 						dummy = WriteAllEEparams();
3386:.\console.c   **** 						printf(STR_REM_SIVP, (uint16)raw_invertion);   /* REM: pan axis absoluter sensor invertion se
3387:.\console.c   **** 					}
3388:.\console.c   **** 					else
3389:.\console.c   **** 					{
3390:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3391:.\console.c   **** 					}
3392:.\console.c   **** 					goto exitpars;
3393:.\console.c   **** 				}	
3394:.\console.c   **** 				// END ABSOLUTE SENSOR PAN INVERTION				
3395:.\console.c   **** 				
3396:.\console.c   **** 				
3397:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN ZERO (HOME)
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
3399:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zp") == 0))
3400:.\console.c   **** 				{	
3401:.\console.c   **** 					printf("* Warning! Put PAN Axis to zero (HOME) position and press y!");
3402:.\console.c   **** 					
3403:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3404:.\console.c   **** 					{						
3405:.\console.c   **** 						pan_absolute_sensor.param.raw_home = 0; 		/* reset absolute pan sensor zero raw 			*/
3406:.\console.c   **** 
3407:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3408:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3409:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3410:.\console.c   **** 						
3411:.\console.c   **** 						//Delay
3412:.\console.c   **** 						CyDelay(1000);
3413:.\console.c   **** 						
3414:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3415:.\console.c   **** 						printf("* Statistics stop!\r\n");						
3416:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3417:.\console.c   **** 								
3418:.\console.c   **** 	
3419:.\console.c   **** 						/* Update Global Parameter			*/
3420:.\console.c   **** 						pan_absolute_sensor.param.raw_home = (int16)pan_absolute_sensor_stat.mean;
3421:.\console.c   **** 						printf(STR_REM_PASZ, (int16)pan_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Zer
3422:.\console.c   **** 					}
3423:.\console.c   **** 					else
3424:.\console.c   **** 					{
3425:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3426:.\console.c   **** 					}
3427:.\console.c   **** 						
3428:.\console.c   **** 					/* Update EEPROM */
3429:.\console.c   **** 					dummy = WriteAllEEparams();
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 321


3430:.\console.c   **** 
3431:.\console.c   **** 					goto exitpars;
3432:.\console.c   **** 				}	
3433:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN ZERO (HOME)
3434:.\console.c   **** 			
3435:.\console.c   **** 				
3436:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN LIMIT MIN
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
3438:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lminp") == 0))
3439:.\console.c   **** 				{	
3440:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MIN position and press y!");
3441:.\console.c   **** 					
3442:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3443:.\console.c   **** 					{						
3444:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute pan sensor limit min raw 	*/
3445:.\console.c   **** 
3446:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3447:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3448:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3449:.\console.c   **** 						
3450:.\console.c   **** 						//Delay
3451:.\console.c   **** 						CyDelay(1000);
3452:.\console.c   **** 						
3453:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3454:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3455:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3456:.\console.c   **** 	
3457:.\console.c   **** 						/* Update Global Parameter			*/
3458:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = (int16)pan_absolute_sensor_stat.mean;														
3459:.\console.c   **** 						printf(STR_REM_PMIN, (int16)pan_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Senso
3460:.\console.c   **** 					}
3461:.\console.c   **** 					else
3462:.\console.c   **** 					{
3463:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3464:.\console.c   **** 					}
3465:.\console.c   **** 						
3466:.\console.c   **** 					/* Update EEPROM */
3467:.\console.c   **** 					dummy = WriteAllEEparams();
3468:.\console.c   **** 
3469:.\console.c   **** 					goto exitpars;
3470:.\console.c   **** 				}	
3471:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN LIMIT MIN
3472:.\console.c   **** 				
3473:.\console.c   **** 				
3474:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN LIMIT MAX
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
3476:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxp") == 0))
3477:.\console.c   **** 				{	
3478:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MAX position and press y!");
3479:.\console.c   **** 					
3480:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3481:.\console.c   **** 					{						
3482:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute pan sensor limit max raw 	*/
3483:.\console.c   **** 
3484:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3485:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3486:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 322


3487:.\console.c   **** 						
3488:.\console.c   **** 						//Delay
3489:.\console.c   **** 						CyDelay(1000);
3490:.\console.c   **** 						
3491:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3492:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3493:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3494:.\console.c   **** 	
3495:.\console.c   **** 						/* Update Global Parameter			*/
3496:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = (int16)pan_absolute_sensor_stat.mean;
3497:.\console.c   **** 						printf(STR_REM_PMAX, (int16)pan_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Senso
3498:.\console.c   **** 					}
3499:.\console.c   **** 					else
3500:.\console.c   **** 					{
3501:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3502:.\console.c   **** 					}
3503:.\console.c   **** 						
3504:.\console.c   **** 					/* Update EEPROM */
3505:.\console.c   **** 					dummy = WriteAllEEparams();
3506:.\console.c   **** 
3507:.\console.c   **** 					goto exitpars;
3508:.\console.c   **** 				}	
3509:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN LIMIT MAX)
3510:.\console.c   **** 				
3511:.\console.c   **** 				
3512:.\console.c   **** 				// SET ABSOLUTE SENSOR PAN LIMIT HYSTERESIS
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
3514:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystp") == 0))
3515:.\console.c   **** 				{	
3516:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
3517:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
3518:.\console.c   **** 					{
3519:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
3520:.\console.c   **** 						
3521:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3522:.\console.c   **** 						dummy = WriteAllEEparams();
3523:.\console.c   **** 						printf(STR_REM_PLHY, (uint16)raw_limit_hyst);   /* REM: pan axis absolute sensor limit hyster
3524:.\console.c   **** 					}
3525:.\console.c   **** 					else
3526:.\console.c   **** 					{
3527:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3528:.\console.c   **** 					}
3529:.\console.c   **** 					goto exitpars;
3530:.\console.c   **** 				}	
3531:.\console.c   **** 				// END ABSOLUTE SENSOR PAN LIMIT HYSTERESIS		
3532:.\console.c   **** 				
3533:.\console.c   **** 				
3534:.\console.c   **** 				// SET PAN ENCODER OVER ABSOLUTE SENSOR RATIO
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
3536:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiop") == 0))
3537:.\console.c   **** 				{	
3538:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
3539:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
3540:.\console.c   **** 					{
3541:.\console.c   **** 						pan_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
3542:.\console.c   **** 						
3543:.\console.c   **** 						/* Writes Parameter on EEPROM */
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 323


3544:.\console.c   **** 						dummy = WriteAllEEparams();
3545:.\console.c   **** 						printf(STR_REM_PEAR, (float)step_abs_ratio);   /* REM: pan encoder over absolute sensor ratio
3546:.\console.c   **** 					}
3547:.\console.c   **** 					else
3548:.\console.c   **** 					{
3549:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3550:.\console.c   **** 					}
3551:.\console.c   **** 					goto exitpars;
3552:.\console.c   **** 				}	
3553:.\console.c   **** 				// END PAN ENCODER OVER ABSOLUTE SENSOR RATIO	
3554:.\console.c   **** 				
3555:.\console.c   **** 				
3556:.\console.c   **** 				// SET TILT MOTOR LIMIT CONTROL
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
3558:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lct") == 0))
3559:.\console.c   **** 				{	
3560:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
3561:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
3562:.\console.c   **** 					{
3563:.\console.c   **** 						tilt_axis.param.limit_control = limit_control;
3564:.\console.c   **** 						
3565:.\console.c   **** 						/* Writes parameter on EEPROM */
3566:.\console.c   **** 						dummy = WriteAllEEparams();
3567:.\console.c   **** 						printf(STR_REM_STLT, (uint16)limit_control);   /* REM: tilt axis limit control setted to...*/
3568:.\console.c   **** 					}
3569:.\console.c   **** 					else
3570:.\console.c   **** 					{
3571:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3572:.\console.c   **** 					}
3573:.\console.c   **** 					goto exitpars;
3574:.\console.c   **** 				}	
3575:.\console.c   **** 				// END TILT MOTOR LIMIT CONTROL	
3576:.\console.c   **** 				
3577:.\console.c   **** 				
3578:.\console.c   **** 				// SET ABSOLUTE SENSOR TILT INVERTION
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
3580:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invt") == 0))
3581:.\console.c   **** 				{	
3582:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
3583:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
3584:.\console.c   **** 					{
3585:.\console.c   **** 						tilt_absolute_sensor.param.raw_invertion = raw_invertion;
3586:.\console.c   **** 						
3587:.\console.c   **** 						/* Writes parameter on EEPROM */
3588:.\console.c   **** 						dummy = WriteAllEEparams();
3589:.\console.c   **** 						printf(STR_REM_SIVT, (uint16)raw_invertion);   /* REM: tilt axis absoluter sensor invertion s
3590:.\console.c   **** 					}
3591:.\console.c   **** 					else
3592:.\console.c   **** 					{
3593:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3594:.\console.c   **** 					}
3595:.\console.c   **** 					goto exitpars;
3596:.\console.c   **** 				}	
3597:.\console.c   **** 				// END ABSOLUTE SENSOR TILT INVERTION				
3598:.\console.c   **** 				
3599:.\console.c   **** 				
3600:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT ZERO (HOME)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 324


3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
3602:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zt") == 0))
3603:.\console.c   **** 				{	
3604:.\console.c   **** 					printf("* Warning! Put TILT Axis to zero (HOME) position and press y!");
3605:.\console.c   **** 					
3606:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3607:.\console.c   **** 					{						
3608:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = 0; 		/* reset absolute tilt sensor zero raw 			*/
3609:.\console.c   **** 
3610:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3611:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3612:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3613:.\console.c   **** 						
3614:.\console.c   **** 						//Delay
3615:.\console.c   **** 						CyDelay(1000);
3616:.\console.c   **** 						
3617:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3618:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3619:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3620:.\console.c   **** 	
3621:.\console.c   **** 						/* Update Global Parameter			*/
3622:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = (int16)tilt_absolute_sensor_stat.mean;
3623:.\console.c   **** 						printf(STR_REM_TASZ, (int16)tilt_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Ze
3624:.\console.c   **** 					}
3625:.\console.c   **** 					else
3626:.\console.c   **** 					{
3627:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3628:.\console.c   **** 					}
3629:.\console.c   **** 						
3630:.\console.c   **** 					/* Update EEPROM */
3631:.\console.c   **** 					dummy = WriteAllEEparams();
3632:.\console.c   **** 
3633:.\console.c   **** 					goto exitpars;
3634:.\console.c   **** 				}	
3635:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT ZERO (HOME)				
3636:.\console.c   **** 				
3637:.\console.c   **** 				
3638:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT LIMIT MIN
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
3640:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmint") == 0))
3641:.\console.c   **** 				{	
3642:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MIN position and press y!");
3643:.\console.c   **** 					
3644:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3645:.\console.c   **** 					{						
3646:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute tilt sensor limit min raw 	
3647:.\console.c   **** 
3648:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3649:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3650:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3651:.\console.c   **** 						
3652:.\console.c   **** 						//Delay
3653:.\console.c   **** 						CyDelay(1000);
3654:.\console.c   **** 						
3655:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3656:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3657:.\console.c   **** 						printf("* Statistics stop!\r\n");								
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 325


3658:.\console.c   **** 	
3659:.\console.c   **** 						/* Update Global Parameter			*/
3660:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = (int16)tilt_absolute_sensor_stat.mean;												
3661:.\console.c   **** 						printf(STR_REM_TMIN, (int16)tilt_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Sens
3662:.\console.c   **** 					}
3663:.\console.c   **** 					else
3664:.\console.c   **** 					{
3665:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3666:.\console.c   **** 					}
3667:.\console.c   **** 						
3668:.\console.c   **** 					/* Update EEPROM */
3669:.\console.c   **** 					dummy = WriteAllEEparams();
3670:.\console.c   **** 
3671:.\console.c   **** 					goto exitpars;
3672:.\console.c   **** 				}	
3673:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT LIMIT MIN
3674:.\console.c   **** 				
3675:.\console.c   **** 				
3676:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT LIMIT MAX
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
3678:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxt") == 0))
3679:.\console.c   **** 				{	
3680:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MAX position and press y!");
3681:.\console.c   **** 					
3682:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3683:.\console.c   **** 					{						
3684:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute tilt sensor limit max raw 	
3685:.\console.c   **** 
3686:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3687:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3688:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3689:.\console.c   **** 						
3690:.\console.c   **** 						//Delay
3691:.\console.c   **** 						CyDelay(1000);
3692:.\console.c   **** 						
3693:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3694:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3695:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3696:.\console.c   **** 	
3697:.\console.c   **** 						/* Update Global Parameter			*/
3698:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = (int16)tilt_absolute_sensor_stat.mean;
3699:.\console.c   **** 						printf(STR_REM_TMAX, (int16)tilt_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Sens
3700:.\console.c   **** 					}
3701:.\console.c   **** 					else
3702:.\console.c   **** 					{
3703:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3704:.\console.c   **** 					}
3705:.\console.c   **** 						
3706:.\console.c   **** 					/* Update EEPROM */
3707:.\console.c   **** 					dummy = WriteAllEEparams();
3708:.\console.c   **** 
3709:.\console.c   **** 					goto exitpars;
3710:.\console.c   **** 				}	
3711:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT LIMIT MAX)
3712:.\console.c   **** 
3713:.\console.c   **** 				
3714:.\console.c   **** 				// SET ABSOLUTE SENSOR TILT LIMIT HYSTERESIS
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 326


3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
3716:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystt") == 0))
3717:.\console.c   **** 				{	
3718:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
3719:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
3720:.\console.c   **** 					{
3721:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
3722:.\console.c   **** 						
3723:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3724:.\console.c   **** 						dummy = WriteAllEEparams();
3725:.\console.c   **** 						printf(STR_REM_TLHY, (uint16)raw_limit_hyst);   /* REM: tilt axis absolute sensor limit hyste
3726:.\console.c   **** 					}
3727:.\console.c   **** 					else
3728:.\console.c   **** 					{
3729:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3730:.\console.c   **** 					}
3731:.\console.c   **** 					goto exitpars;
3732:.\console.c   **** 				}	
3733:.\console.c   **** 				// END ABSOLUTE SENSOR TILT LIMIT HYSTERESIS		
3734:.\console.c   **** 			
3735:.\console.c   **** 				
3736:.\console.c   **** 				// SET TILT ENCODER OVER ABSOLUTE SENSOR RATIO
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
3738:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiot") == 0))
3739:.\console.c   **** 				{	
3740:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
3741:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
3742:.\console.c   **** 					{
3743:.\console.c   **** 						tilt_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
3744:.\console.c   **** 						
3745:.\console.c   **** 						/* Writes Parameter on EEPROM */
3746:.\console.c   **** 						dummy = WriteAllEEparams();
3747:.\console.c   **** 						printf(STR_REM_TEAR, (float)step_abs_ratio);   /* REM: tilt encoder over absolute sensor rati
3748:.\console.c   **** 					}
3749:.\console.c   **** 					else
3750:.\console.c   **** 					{
3751:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3752:.\console.c   **** 					}
3753:.\console.c   **** 					goto exitpars;
3754:.\console.c   **** 				}	
3755:.\console.c   **** 				// END TILT ENCODER OVER ABSOLUTE SENSOR RATIO					
3756:.\console.c   **** 								
3757:.\console.c   **** 				
3758:.\console.c   **** 				// SET INVERTION YAW (IMU)
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
3760:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imuy") == 0))
3761:.\console.c   **** 				{	
3762:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3763:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3764:.\console.c   **** 					{
3765:.\console.c   **** 						IMU_sensor.param.yaw_invertion = invertion;
3766:.\console.c   **** 						
3767:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3768:.\console.c   **** 						dummy = WriteAllEEparams();
3769:.\console.c   **** 						printf(STR_REM_SINY, (uint16)IMU_sensor.param.yaw_invertion);   /* REM: Invertion Yaw setted 
3770:.\console.c   **** 					}
3771:.\console.c   **** 					else
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 327


3772:.\console.c   **** 					{
3773:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3774:.\console.c   **** 					}
3775:.\console.c   **** 					goto exitpars;
3776:.\console.c   **** 				}	
3777:.\console.c   **** 				// END SET INVERTION YAW (IMU)	
3778:.\console.c   **** 				
3779:.\console.c   **** 				
3780:.\console.c   **** 				// SET INVERTION PITCH (IMU)
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
3782:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imup") == 0))
3783:.\console.c   **** 				{	
3784:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3785:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3786:.\console.c   **** 					{
3787:.\console.c   **** 						IMU_sensor.param.pitch_invertion = invertion;
3788:.\console.c   **** 						
3789:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3790:.\console.c   **** 						dummy = WriteAllEEparams();
3791:.\console.c   **** 						printf(STR_REM_SINP, (uint16)IMU_sensor.param.pitch_invertion);   /* REM: Invertion Pitch set
3792:.\console.c   **** 					}
3793:.\console.c   **** 					else
3794:.\console.c   **** 					{
3795:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3796:.\console.c   **** 					}
3797:.\console.c   **** 					goto exitpars;
3798:.\console.c   **** 				}	
3799:.\console.c   **** 				// END SET INVERTION PITCH (IMU)	
3800:.\console.c   **** 				
3801:.\console.c   **** 				
3802:.\console.c   **** 				// SET INVERTION ROLL (IMU)
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
3804:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imur") == 0))
3805:.\console.c   **** 				{	
3806:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3807:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3808:.\console.c   **** 					{
3809:.\console.c   **** 						IMU_sensor.param.roll_invertion = invertion;
3810:.\console.c   **** 						
3811:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3812:.\console.c   **** 						dummy = WriteAllEEparams();
3813:.\console.c   **** 						printf(STR_REM_SINR, (uint16)IMU_sensor.param.roll_invertion);   /* REM: Invertion Roll sette
3814:.\console.c   **** 					}
3815:.\console.c   **** 					else
3816:.\console.c   **** 					{
3817:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3818:.\console.c   **** 					}
3819:.\console.c   **** 					goto exitpars;
3820:.\console.c   **** 				}	
3821:.\console.c   **** 				// END SET INVERTION ROLL (IMU)	
3822:.\console.c   **** 				
3823:.\console.c   **** 				
3824:.\console.c   **** 				// SET PITCH ROLL EXCHANGE (IMU)
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
3826:.\console.c   **** 					(strcmp(actual_cmd.parameter, "prex") == 0))
3827:.\console.c   **** 				{	
3828:.\console.c   **** 					if (((exchange = atoi(actual_cmd.number1)) >= 0)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 328


3829:.\console.c   **** 					&& (exchange = atoi(actual_cmd.number1)) <= 1)
3830:.\console.c   **** 					{
3831:.\console.c   **** 						IMU_sensor.param.pitch_roll_exchange = exchange;
3832:.\console.c   **** 						
3833:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3834:.\console.c   **** 						dummy = WriteAllEEparams();
3835:.\console.c   **** 						printf(STR_REM_SPRX, (uint16)IMU_sensor.param.pitch_roll_exchange);   /* REM: Invertion Roll 
3836:.\console.c   **** 					}
3837:.\console.c   **** 					else
3838:.\console.c   **** 					{
3839:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3840:.\console.c   **** 					}
3841:.\console.c   **** 					goto exitpars;
3842:.\console.c   **** 				}	
3843:.\console.c   **** 				// END SET PITCH ROLL EXCHANGE (IMU)					
3844:.\console.c   **** 				
3845:.\console.c   **** 				
3846:.\console.c   **** 				//SET Q ELEMENT (SHOT)
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
3848:.\console.c   **** 					(strcmp(actual_cmd.parameter, "shot") == 0))
3849:.\console.c   **** 				{	
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
3851:.\console.c   **** 					    (strcmp(actual_cmd.number2, "c") == 0))
3852:.\console.c   **** 					   
3853:.\console.c   **** 					{					
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3855:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3856:.\console.c   **** 						{	
3857:.\console.c   **** 							/* Update Global Parameter and RT data	*/
3858:.\console.c   **** 							//if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
3859:.\console.c   **** 							if (q[q_table[q_number]].number != Q_NUMBER_UNUSED)
3860:.\console.c   **** 							{						
3861:.\console.c   **** 								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
3862:.\console.c   **** 								
3863:.\console.c   **** 								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
3864:.\console.c   **** 								
3865:.\console.c   **** 								/* Update EEPROM */
3866:.\console.c   **** 								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3867:.\console.c   **** 								{
3868:.\console.c   **** 									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3869:.\console.c   **** 								}
3870:.\console.c   **** 							}
3871:.\console.c   **** 							else
3872:.\console.c   **** 							{
3873:.\console.c   **** 								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
3874:.\console.c   **** 							}
3875:.\console.c   **** 						}
3876:.\console.c   **** 					}
3877:.\console.c   **** 					else if (((memory_number = atoi(actual_cmd.number2)) >= Q_MEMORY_NUMBER_MIN)
3878:.\console.c   **** 						    && (memory_number = atoi(actual_cmd.number2)) < Q_MEMORY_NUMBER_MAX)
3879:.\console.c   **** 					{					
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3881:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3882:.\console.c   **** 						{							
3883:.\console.c   **** 							printf("* Warning! Put All Axes to desired position and press y!");
3884:.\console.c   **** 							
3885:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _YES)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 329


3886:.\console.c   **** 							{														
3887:.\console.c   **** 								if (strlen(actual_cmd.number2) != 0)
3888:.\console.c   **** 								{	
3889:.\console.c   **** 									//user defined memory number
3890:.\console.c   **** 									q_table[q_number] 			= memory_number;				  		/* save for fast indexing 	*/
3891:.\console.c   **** 								}
3892:.\console.c   **** 								else
3893:.\console.c   **** 								{
3894:.\console.c   **** 									//table standard memory number
3895:.\console.c   **** 									q_table[q_number] 			= qmemory_standard_address[q_number];	/* save for fast indexing 	*/
3896:.\console.c   **** 								}
3897:.\console.c   **** 								
3898:.\console.c   **** 								/* Update Global Parameters and RT data	*/
3899:.\console.c   **** 								q[q_table[q_number]].number									= (uint8)(q_number);
3900:.\console.c   **** 								q[q_table[q_number]].mc.position[PAN_AXIS]             		= pan_absolute_sensor.position;			
3901:.\console.c   **** 								q[q_table[q_number]].param.position_default[PAN_AXIS].fnum  = pan_absolute_sensor.position;
3902:.\console.c   **** 
3903:.\console.c   **** 								q[q_table[q_number]].mc.position[TILT_AXIS]            		= tilt_absolute_sensor.position;		
3904:.\console.c   **** 								q[q_table[q_number]].param.position_default[TILT_AXIS].fnum = tilt_absolute_sensor.position
3905:.\console.c   **** 								
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
3907:.\console.c   **** 									(uint16)q_number,
3908:.\console.c   **** 									(int32)pan_absolute_sensor.position,
3909:.\console.c   **** 									(int32)tilt_absolute_sensor.position,
3910:.\console.c   **** 									(int16)q_table[q_number]);	
3911:.\console.c   **** 							}
3912:.\console.c   **** 							else
3913:.\console.c   **** 							{
3914:.\console.c   **** 								printf("\r\n* Q element (shot) position not sampled!\r\n");								
3915:.\console.c   **** 							}
3916:.\console.c   **** 								
3917:.\console.c   **** 							/* Update EEPROM */
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3919:.\console.c   **** 							{
3920:.\console.c   **** 								printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3921:.\console.c   **** 							}
3922:.\console.c   **** 						}
3923:.\console.c   **** 						else
3924:.\console.c   **** 						{
3925:.\console.c   **** 							printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
3926:.\console.c   **** 						}						
3927:.\console.c   **** 					}
3928:.\console.c   **** //					else if (strcmp(actual_cmd.number2, "c") == 0)
3929:.\console.c   **** //					//else if ((memory_number = atoi(actual_cmd.number2)) == Q_MEMORY_CLEAR_FLAG)
3930:.\console.c   **** //					{					
3931:.\console.c   **** //						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3932:.\console.c   **** //						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3933:.\console.c   **** //						{	
3934:.\console.c   **** //							/* Update Global Parameter and RT data	*/
3935:.\console.c   **** //							if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
3936:.\console.c   **** //							{						
3937:.\console.c   **** //								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
3938:.\console.c   **** //								
3939:.\console.c   **** //								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
3940:.\console.c   **** //								
3941:.\console.c   **** //								/* Update EEPROM */
3942:.\console.c   **** //								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 330


3943:.\console.c   **** //								{
3944:.\console.c   **** //									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3945:.\console.c   **** //								}
3946:.\console.c   **** //							}
3947:.\console.c   **** //							else
3948:.\console.c   **** //							{
3949:.\console.c   **** //								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
3950:.\console.c   **** //							}
3951:.\console.c   **** //							
3952:.\console.c   **** //						}
3953:.\console.c   **** //					}
3954:.\console.c   **** 					else
3955:.\console.c   **** 					{
3956:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
3957:.\console.c   **** 					}
3958:.\console.c   **** 					goto exitpars;
3959:.\console.c   **** 				}	
3960:.\console.c   **** 				//END SET SET Q ELEMENT (SHOT)
3961:.\console.c   **** 				
3962:.\console.c   **** 				
3963:.\console.c   **** 				// SET PAN MOTOR Kp
3964:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpp") == 0)
3965:.\console.c   **** 				{	
3966:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
3967:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
3968:.\console.c   **** 					{
3969:.\console.c   **** 						pan_axis.param.Kpf.fnum = Kp;
3970:.\console.c   **** 						
3971:.\console.c   **** 						/* Writes Kp on EEPROM */
3972:.\console.c   **** 						dummy = WriteAllEEparams();
3973:.\console.c   **** 						printf(STR_REM_PMKP, (float)pan_axis.param.Kpf.fnum);   /* REM: Pan Motor Kp setted to...*/		
3974:.\console.c   **** 					}
3975:.\console.c   **** 					else
3976:.\console.c   **** 					{
3977:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3978:.\console.c   **** 					}
3979:.\console.c   **** 					goto exitpars;
3980:.\console.c   **** 				}	
3981:.\console.c   **** 				// END SET PAN MOTOR Kp
3982:.\console.c   **** 
3983:.\console.c   **** 				
3984:.\console.c   **** 				// SET TILT MOTOR Kp
3985:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpt") == 0)
3986:.\console.c   **** 				{	
3987:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
3988:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
3989:.\console.c   **** 					{
3990:.\console.c   **** 						tilt_axis.param.Kpf.fnum = Kp;
3991:.\console.c   **** 						
3992:.\console.c   **** 						/* Writes Kp on EEPROM */
3993:.\console.c   **** 						dummy = WriteAllEEparams();
3994:.\console.c   **** 						printf(STR_REM_TMKP, (float)tilt_axis.param.Kpf.fnum);   /* REM: Tilt Motor Kp setted to...*/
3995:.\console.c   **** 					}
3996:.\console.c   **** 					else
3997:.\console.c   **** 					{
3998:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3999:.\console.c   **** 					}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 331


4000:.\console.c   **** 					goto exitpars;
4001:.\console.c   **** 				}	
4002:.\console.c   **** 				// END SET TILT MOTOR Kp				
4003:.\console.c   **** 				
4004:.\console.c   **** 				
4005:.\console.c   **** 				// SET PAN MOTOR Kd
4006:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdp") == 0)
4007:.\console.c   **** 				{	
4008:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
4009:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
4010:.\console.c   **** 					{
4011:.\console.c   **** 						pan_axis.param.Kdf.fnum = Kd;
4012:.\console.c   **** 						
4013:.\console.c   **** 						/* Writes Kp on EEPROM */
4014:.\console.c   **** 						dummy = WriteAllEEparams();
4015:.\console.c   **** 						printf(STR_REM_PMKD, (float)pan_axis.param.Kdf.fnum);   /* REM: Pan Motor Kd setted to...*/		
4016:.\console.c   **** 					}
4017:.\console.c   **** 					else
4018:.\console.c   **** 					{
4019:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4020:.\console.c   **** 					}
4021:.\console.c   **** 					goto exitpars;
4022:.\console.c   **** 				}	
4023:.\console.c   **** 				// END SET PAN MOTOR Kd
4024:.\console.c   **** 
4025:.\console.c   **** 				
4026:.\console.c   **** 				// SET TILT MOTOR Kd
4027:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdt") == 0)
4028:.\console.c   **** 				{	
4029:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
4030:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
4031:.\console.c   **** 					{
4032:.\console.c   **** 						tilt_axis.param.Kdf.fnum = Kd;
4033:.\console.c   **** 						
4034:.\console.c   **** 						/* Writes Kp on EEPROM */
4035:.\console.c   **** 						dummy = WriteAllEEparams();
4036:.\console.c   **** 						printf(STR_REM_TMKD, (float)tilt_axis.param.Kdf.fnum);   /* REM: Tilt Motor Kd setted to...*/
4037:.\console.c   **** 					}
4038:.\console.c   **** 					else
4039:.\console.c   **** 					{
4040:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4041:.\console.c   **** 					}
4042:.\console.c   **** 					goto exitpars;
4043:.\console.c   **** 				}	
4044:.\console.c   **** 				// END SET TILT MOTOR Kd				
4045:.\console.c   **** 				
4046:.\console.c   **** 				
4047:.\console.c   **** 				// SET PAN MOTOR Ki
4048:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kip") == 0)
4049:.\console.c   **** 				{	
4050:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
4051:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
4052:.\console.c   **** 					{
4053:.\console.c   **** 						pan_axis.param.Kif.fnum = Ki;
4054:.\console.c   **** 						
4055:.\console.c   **** 						/* Writes Ki on EEPROM */
4056:.\console.c   **** 						dummy = WriteAllEEparams();
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 332


4057:.\console.c   **** 						printf(STR_REM_PMKI, (float)pan_axis.param.Kif.fnum);   /* REM: Pan Motor Ki setted to...*/		
4058:.\console.c   **** 					}
4059:.\console.c   **** 					else
4060:.\console.c   **** 					{
4061:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4062:.\console.c   **** 					}
4063:.\console.c   **** 					goto exitpars;
4064:.\console.c   **** 				}	
4065:.\console.c   **** 				// END SET PAN MOTOR Ki
4066:.\console.c   **** 
4067:.\console.c   **** 				
4068:.\console.c   **** 				// SET TILT MOTOR Ki
4069:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kit") == 0)
4070:.\console.c   **** 				{	
4071:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
4072:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
4073:.\console.c   **** 					{
4074:.\console.c   **** 						tilt_axis.param.Kif.fnum = Ki;
4075:.\console.c   **** 						
4076:.\console.c   **** 						/* Writes Ki on EEPROM */
4077:.\console.c   **** 						dummy = WriteAllEEparams();
4078:.\console.c   **** 						printf(STR_REM_TMKI, (float)tilt_axis.param.Kif.fnum);   /* REM: Tilt Motor Ki setted to...*/
4079:.\console.c   **** 					}
4080:.\console.c   **** 					else
4081:.\console.c   **** 					{
4082:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4083:.\console.c   **** 					}
4084:.\console.c   **** 					goto exitpars;
4085:.\console.c   **** 				}	
4086:.\console.c   **** 				// END SET TILT MOTOR Ki				
4087:.\console.c   **** 				
4088:.\console.c   **** 				
4089:.\console.c   **** 				// SET PAN MOTOR Ksi
4090:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksip") == 0)
4091:.\console.c   **** 				{	
4092:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
4093:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
4094:.\console.c   **** 					{
4095:.\console.c   **** 						pan_axis.param.Ksif.fnum = Ksi;
4096:.\console.c   **** 						
4097:.\console.c   **** 						/* Writes Ksi on EEPROM */
4098:.\console.c   **** 						dummy = WriteAllEEparams();
4099:.\console.c   **** 						printf(STR_REM_PMKS, (float)pan_axis.param.Ksif.fnum);   /* REM: Pan Motor Ksi setted to...*/
4100:.\console.c   **** 					}
4101:.\console.c   **** 					else
4102:.\console.c   **** 					{
4103:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4104:.\console.c   **** 					}
4105:.\console.c   **** 					goto exitpars;
4106:.\console.c   **** 				}	
4107:.\console.c   **** 				// END SET PAN MOTOR Ksi
4108:.\console.c   **** 
4109:.\console.c   **** 				
4110:.\console.c   **** 				// SET TILT MOTOR Ksi
4111:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksit") == 0)
4112:.\console.c   **** 				{	
4113:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 333


4114:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
4115:.\console.c   **** 					{
4116:.\console.c   **** 						tilt_axis.param.Ksif.fnum = Ksi;
4117:.\console.c   **** 						
4118:.\console.c   **** 						/* Writes Ksi on EEPROM */
4119:.\console.c   **** 						dummy = WriteAllEEparams();
4120:.\console.c   **** 						printf(STR_REM_TMKS, (float)tilt_axis.param.Ksif.fnum);   /* REM: Tilt Motor Ksi setted to...
4121:.\console.c   **** 					}
4122:.\console.c   **** 					else
4123:.\console.c   **** 					{
4124:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4125:.\console.c   **** 					}
4126:.\console.c   **** 					goto exitpars;
4127:.\console.c   **** 				}	
4128:.\console.c   **** 				// END SET TILT MOTOR Ksi				
4129:.\console.c   **** 				
4130:.\console.c   **** 				
4131:.\console.c   **** 				// SET A[NAOUT]AXIS
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
4133:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaxis") == 0))
4134:.\console.c   **** 				{			
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
4136:.\console.c   **** 					{							
4137:.\console.c   **** 						if (strcmp(actual_cmd.number1, "pan") == 0)
4138:.\console.c   **** 						{								
4139:.\console.c   **** 							/* Update Global Volatile Parameter			*/
4140:.\console.c   **** 							Selected_ANAOUT=&pan_axis;
4141:.\console.c   **** 							printf(STR_REM_ANAXP);   /* REM: Anaout Axis setted to PAN*/
4142:.\console.c   **** 							
4143:.\console.c   **** 							CyDelay(100);
4144:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
4145:.\console.c   **** 							/* anapos_offset <-- correct value to zero oscilloscope output */
4146:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();							
4147:.\console.c   **** 						}
4148:.\console.c   **** 						
4149:.\console.c   **** 						if (strcmp(actual_cmd.number1, "tilt") == 0)
4150:.\console.c   **** 						{
4151:.\console.c   **** 							/* Update Global Volatile Parameter			*/
4152:.\console.c   **** 							Selected_ANAOUT=&tilt_axis;
4153:.\console.c   **** 							printf(STR_REM_ANAXT);   /* REM: Anaout Axis setted to TILT*/
4154:.\console.c   **** 							
4155:.\console.c   **** 							CyDelay(100);
4156:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
4157:.\console.c   **** 							/* anapos_offset <-- correct value to zero oscilloscope output */
4158:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();	
4159:.\console.c   **** 						}
4160:.\console.c   **** 					
4161:.\console.c   **** 						/* Update EEPROM */
4162:.\console.c   **** 						dummy = WriteAllEEparams();
4163:.\console.c   **** 					}
4164:.\console.c   **** 					else
4165:.\console.c   **** 					{
4166:.\console.c   **** 						printf(STR_ERROR6);			/* ERROR6: Axis may be [pan,tilt,roll,all] */
4167:.\console.c   **** 					}
4168:.\console.c   **** 					goto exitpars;
4169:.\console.c   **** 				}	
4170:.\console.c   **** 				//END SET A[NAOUT]AXIS							
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 334


4171:.\console.c   **** 				
4172:.\console.c   **** 				
4173:.\console.c   **** 				// SET PAN MOTOR COLOR
4174:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colorp") == 0)
4175:.\console.c   **** 				{	
4176:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
4177:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
4178:.\console.c   **** 					{
4179:.\console.c   **** 						pan_axis.param.color = color;
4180:.\console.c   **** 						
4181:.\console.c   **** 						/* Writes Burst Period on EEPROM */
4182:.\console.c   **** 						dummy = WriteAllEEparams();
4183:.\console.c   **** 						printf(STR_REM_SCOL);   /* REM: pan axis color setted to...*/
4184:.\console.c   **** 						ShowParamsColor(&pan_axis);
4185:.\console.c   **** 					}
4186:.\console.c   **** 					else
4187:.\console.c   **** 					{
4188:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4189:.\console.c   **** 					}
4190:.\console.c   **** 					goto exitpars;
4191:.\console.c   **** 				}	
4192:.\console.c   **** 				// END PAN MOTOR COLOR
4193:.\console.c   **** 				
4194:.\console.c   **** 				
4195:.\console.c   **** 				// SET TILT MOTOR COLOR
4196:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colort") == 0)
4197:.\console.c   **** 				{	
4198:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
4199:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
4200:.\console.c   **** 					{
4201:.\console.c   **** 						tilt_axis.param.color = color;
4202:.\console.c   **** 						
4203:.\console.c   **** 						/* Writes Burst Period on EEPROM */
4204:.\console.c   **** 						dummy = WriteAllEEparams();
4205:.\console.c   **** 						printf(STR_REM_SCOLT);   /* REM: tilt axis color setted to...*/
4206:.\console.c   **** 						ShowParamsColor(&tilt_axis);						
4207:.\console.c   **** 					}
4208:.\console.c   **** 					else
4209:.\console.c   **** 					{
4210:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4211:.\console.c   **** 					}
4212:.\console.c   **** 					goto exitpars;
4213:.\console.c   **** 				}	
4214:.\console.c   **** 				// END SET TILT MOTOR COLOR				
4215:.\console.c   **** 				
4216:.\console.c   **** 				
4217:.\console.c   **** 				// SET PAN MOTOR Kopf
4218:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopfp") == 0)
4219:.\console.c   **** 				{	
4220:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
4221:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
4222:.\console.c   **** 					{
4223:.\console.c   **** 						pan_axis.param.Kopf.fnum = Kopf;
4224:.\console.c   **** 						
4225:.\console.c   **** 						/* Writes Ksi on EEPROM */
4226:.\console.c   **** 						dummy = WriteAllEEparams();
4227:.\console.c   **** 						printf(STR_REM_PKOF, (float)pan_axis.param.Kopf.fnum);   /* REM: Pan Motor Kopf setted to...*
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 335


4228:.\console.c   **** 					}
4229:.\console.c   **** 					else
4230:.\console.c   **** 					{
4231:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4232:.\console.c   **** 					}
4233:.\console.c   **** 					goto exitpars;
4234:.\console.c   **** 				}	
4235:.\console.c   **** 				// END SET PAN MOTOR Kopf		
4236:.\console.c   **** 				
4237:.\console.c   **** 				
4238:.\console.c   **** 				// SET TILT MOTOR Kopf
4239:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopft") == 0)
4240:.\console.c   **** 				{	
4241:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
4242:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
4243:.\console.c   **** 					{
4244:.\console.c   **** 						tilt_axis.param.Kopf.fnum = Kopf;
4245:.\console.c   **** 						
4246:.\console.c   **** 						/* Writes Ksi on EEPROM */
4247:.\console.c   **** 						dummy = WriteAllEEparams();
4248:.\console.c   **** 						printf(STR_REM_TKOF, (float)tilt_axis.param.Kopf.fnum);   /* REM: Tilt Motor Kopf setted to..
4249:.\console.c   **** 					}
4250:.\console.c   **** 					else
4251:.\console.c   **** 					{
4252:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4253:.\console.c   **** 					}
4254:.\console.c   **** 					goto exitpars;
4255:.\console.c   **** 				}	
4256:.\console.c   **** 				// END SET TILT MOTOR Kopf 					
4257:.\console.c   **** 
4258:.\console.c   **** 				
4259:.\console.c   **** 				// SET PAN MOTOR Again
4260:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againp") == 0)
4261:.\console.c   **** 				{	
4262:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
4263:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
4264:.\console.c   **** 					{
4265:.\console.c   **** 						pan_axis.param.Gain_ANAOUT.fnum = anaout_gain;
4266:.\console.c   **** 						
4267:.\console.c   **** 						/* Writes Ksi on EEPROM */
4268:.\console.c   **** 						dummy = WriteAllEEparams();
4269:.\console.c   **** 						printf(STR_REM_PAGA, (float)pan_axis.param.Gain_ANAOUT.fnum);   /* REM: Pan Motor Anaout Gain
4270:.\console.c   **** 					}
4271:.\console.c   **** 					else
4272:.\console.c   **** 					{
4273:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4274:.\console.c   **** 					}
4275:.\console.c   **** 					goto exitpars;
4276:.\console.c   **** 				}	
4277:.\console.c   **** 				// END SET PAN MOTOR Again	
4278:.\console.c   **** 				
4279:.\console.c   **** 				
4280:.\console.c   **** 				// SET TILT MOTOR Again
4281:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againt") == 0)
4282:.\console.c   **** 				{	
4283:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
4284:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 336


4285:.\console.c   **** 					{
4286:.\console.c   **** 						tilt_axis.param.Gain_ANAOUT.fnum = anaout_gain;
4287:.\console.c   **** 						
4288:.\console.c   **** 						/* Writes Ksi on EEPROM */
4289:.\console.c   **** 						dummy = WriteAllEEparams();
4290:.\console.c   **** 						printf(STR_REM_TAGA, (float)tilt_axis.param.Gain_ANAOUT.fnum);   /* REM: Tilt Motor Anaout Ga
4291:.\console.c   **** 					}
4292:.\console.c   **** 					else
4293:.\console.c   **** 					{
4294:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4295:.\console.c   **** 					}
4296:.\console.c   **** 					goto exitpars;
4297:.\console.c   **** 				}	
4298:.\console.c   **** 				// END SET TILT MOTOR Again				
4299:.\console.c   **** 				
4300:.\console.c   **** 				
4301:.\console.c   **** //				// SET KPLOWPASS
4302:.\console.c   **** //				if ((strcmp(actual_cmd.parameter, "kplowpass") == 0) ||
4303:.\console.c   **** //					(strcmp(actual_cmd.parameter, "kpl") == 0))
4304:.\console.c   **** //				{	
4305:.\console.c   **** //					if (((kplowpass = atoi(actual_cmd.number1)) >= 0)
4306:.\console.c   **** //					&& (kplowpass = atoi(actual_cmd.number1)) <= 1)
4307:.\console.c   **** //					{
4308:.\console.c   **** //						gobee_param.kplowpass = kplowpass;
4309:.\console.c   **** //						
4310:.\console.c   **** //						/* Writes Kp Low Pass flag on EEPROM */
4311:.\console.c   **** //						dummy = WriteAllEEparams();
4312:.\console.c   **** //						printf(STR_REM_SEKL, (uint16)kplowpass);   /* REM: kp Low Pass setted to...*/					
4313:.\console.c   **** //					}
4314:.\console.c   **** //					else
4315:.\console.c   **** //					{
4316:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4317:.\console.c   **** //					}
4318:.\console.c   **** //					goto exitpars;
4319:.\console.c   **** //				}	
4320:.\console.c   **** //				// END SET KP LOWPASS
4321:.\console.c   **** 
4322:.\console.c   **** 
4323:.\console.c   **** 				// SET ACC X AXIS ADC OFFSET
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
4325:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacxof") == 0))
4326:.\console.c   **** 				{	
4327:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4328:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4329:.\console.c   **** 					{
4330:.\console.c   **** 						gobee_param.x_acc_ADC_offset = (int16)offset;
4331:.\console.c   **** 						
4332:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4333:.\console.c   **** 						dummy = WriteAllEEparams();
4334:.\console.c   **** 						printf(STR_REM_SEAX, (int16)offset);   /* REM: ACC AXIS X ADC offset setted to...*/					
4335:.\console.c   **** 					}
4336:.\console.c   **** 					else
4337:.\console.c   **** 					{
4338:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4339:.\console.c   **** 					}
4340:.\console.c   **** 					goto exitpars;
4341:.\console.c   **** 				}	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 337


4342:.\console.c   **** 				// END SET ACC X AXIS ADC OFFSET
4343:.\console.c   **** 
4344:.\console.c   **** 
4345:.\console.c   **** 				// SET ACC Y AXIS ADC OFFSET
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
4347:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacyof") == 0))
4348:.\console.c   **** 				{	
4349:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4350:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4351:.\console.c   **** 					{
4352:.\console.c   **** 						gobee_param.y_acc_ADC_offset = (int16)offset;
4353:.\console.c   **** 						
4354:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4355:.\console.c   **** 						dummy = WriteAllEEparams();
4356:.\console.c   **** 						printf(STR_REM_SEAY, (int16)offset);   /* REM: ACC AXIS Y ADC offset setted to...*/					
4357:.\console.c   **** 					}
4358:.\console.c   **** 					else
4359:.\console.c   **** 					{
4360:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4361:.\console.c   **** 					}
4362:.\console.c   **** 					goto exitpars;
4363:.\console.c   **** 				}	
4364:.\console.c   **** 				// END SET ACC Y AXIS ADC OFFSET
4365:.\console.c   **** 
4366:.\console.c   **** 				
4367:.\console.c   **** 				// SET ACC Z AXIS ADC OFFSET
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
4369:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaczof") == 0))
4370:.\console.c   **** 				{	
4371:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4372:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4373:.\console.c   **** 					{
4374:.\console.c   **** 						gobee_param.z_acc_ADC_offset = (int16)offset;
4375:.\console.c   **** 						
4376:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4377:.\console.c   **** 						dummy = WriteAllEEparams();
4378:.\console.c   **** 						printf(STR_REM_SEAZ, (int16)offset);   /* REM: ACC AXIS Z ADC offset setted to...*/					
4379:.\console.c   **** 					}
4380:.\console.c   **** 					else
4381:.\console.c   **** 					{
4382:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4383:.\console.c   **** 					}
4384:.\console.c   **** 					goto exitpars;
4385:.\console.c   **** 				}	
4386:.\console.c   **** 				// END SET ACC Z AXIS ADC OFFSET				
4387:.\console.c   **** 		
4388:.\console.c   **** 				
4389:.\console.c   **** //				// SET Digital Gyro Offset FINE
4390:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "dgfine") == 0)
4391:.\console.c   **** //				{	
4392:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -10)
4393:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +10)
4394:.\console.c   **** //					{
4395:.\console.c   **** //						gobee_param.dgyro_offset_fine.fnum = offset_fine;
4396:.\console.c   **** //						
4397:.\console.c   **** //						/* Writes Ki on EEPROM */
4398:.\console.c   **** //						dummy = WriteAllEEparams();
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 338


4399:.\console.c   **** //						printf(STR_REM_STDF, (float)offset_fine);   /* REM: Digital Gyro Offset Fine...*/					
4400:.\console.c   **** //					}
4401:.\console.c   **** //					else
4402:.\console.c   **** //					{
4403:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4404:.\console.c   **** //					}
4405:.\console.c   **** //					goto exitpars;
4406:.\console.c   **** //				}	
4407:.\console.c   **** //				// END SET Digital Gyro Offset FINE
4408:.\console.c   **** 
4409:.\console.c   **** 
4410:.\console.c   **** //				// SET Analog Gyro Offset FINE
4411:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "agfine") == 0)
4412:.\console.c   **** //				{	
4413:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -10)
4414:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +10)
4415:.\console.c   **** //					{
4416:.\console.c   **** //						gobee_param.gyro_offset_fine.fnum = offset_fine;
4417:.\console.c   **** //						
4418:.\console.c   **** //						/* Writes Ki on EEPROM */
4419:.\console.c   **** //						dummy = WriteAllEEparams();
4420:.\console.c   **** //						printf(STR_REM_STOF, (float)offset_fine);   /* REM: Analog Gyro Offset Fine...*/					
4421:.\console.c   **** //					}
4422:.\console.c   **** //					else
4423:.\console.c   **** //					{
4424:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4425:.\console.c   **** //					}
4426:.\console.c   **** //					goto exitpars;
4427:.\console.c   **** //				}	
4428:.\console.c   **** //				// END SET Analog Gyro Offset FINE
4429:.\console.c   **** 
4430:.\console.c   **** 
4431:.\console.c   **** //				// SET Analog Gyro Scale Offset FINE
4432:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "agsfine") == 0)
4433:.\console.c   **** //				{	
4434:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -0.1)
4435:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +0.1)
4436:.\console.c   **** //					{
4437:.\console.c   **** //						gobee_param.gyro_scale_offset_fine.fnum = offset_fine;
4438:.\console.c   **** //						
4439:.\console.c   **** //						/* Writes Ki on EEPROM */
4440:.\console.c   **** //						dummy = WriteAllEEparams();
4441:.\console.c   **** //						printf(STR_REM_STSF, (float)offset_fine);   /* REM: Analog Gyro Scale Offset Fine...*/					
4442:.\console.c   **** //					}
4443:.\console.c   **** //					else
4444:.\console.c   **** //					{
4445:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4446:.\console.c   **** //					}
4447:.\console.c   **** //					goto exitpars;
4448:.\console.c   **** //				}	
4449:.\console.c   **** //				// END SET Analog Gyro Scale Offset FINE
4450:.\console.c   **** 
4451:.\console.c   **** 
4452:.\console.c   **** 
4453:.\console.c   **** //			// SET alpha
4454:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "alpha") == 0)
4455:.\console.c   **** //				{	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 339


4456:.\console.c   **** //					if (((alpha = atof(actual_cmd.number1)) >= 0)
4457:.\console.c   **** //					&& (alpha = atof(actual_cmd.number1)) <= 1)
4458:.\console.c   **** //					{
4459:.\console.c   **** //						gobee_param.alpha.fnum = alpha;
4460:.\console.c   **** //						
4461:.\console.c   **** //						/* Writes alpha on EEPROM */
4462:.\console.c   **** //						dummy = WriteAllEEparams();
4463:.\console.c   **** //						printf(STR_REM_STAL, (float)gobee_param.alpha.fnum);   /* REM: alpha setted to...*/					
4464:.\console.c   **** //					}
4465:.\console.c   **** //					else
4466:.\console.c   **** //					{
4467:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4468:.\console.c   **** //					}
4469:.\console.c   **** //					goto exitpars;
4470:.\console.c   **** //				}	
4471:.\console.c   **** //				// END SET alpha
4472:.\console.c   **** 				
4473:.\console.c   **** 				
4474:.\console.c   **** 			// SET beta
4475:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "beta") == 0)
4476:.\console.c   **** 				{	
4477:.\console.c   **** 					if (((beta = atof(actual_cmd.number1)) >= 0)
4478:.\console.c   **** 					&& (beta = atof(actual_cmd.number1)) <= 1)
4479:.\console.c   **** 					{
4480:.\console.c   **** 						gobee_param.beta.fnum = beta;
4481:.\console.c   **** 						
4482:.\console.c   **** 						/* Writes alpha on EEPROM */
4483:.\console.c   **** 						dummy = WriteAllEEparams();
4484:.\console.c   **** 						printf(STR_REM_STBT, (float)gobee_param.beta.fnum);   /* REM: beta setted to...*/					
4485:.\console.c   **** 					}
4486:.\console.c   **** 					else
4487:.\console.c   **** 					{
4488:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4489:.\console.c   **** 					}
4490:.\console.c   **** 					goto exitpars;
4491:.\console.c   **** 				}	
4492:.\console.c   **** 				// END SET beta				
4493:.\console.c   **** 
4494:.\console.c   **** 				
4495:.\console.c   **** 				// SET gamma (IMU LPF)
4496:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "gamma") == 0)
4497:.\console.c   **** 				{	
4498:.\console.c   **** 					if (((gamma = atof(actual_cmd.number1)) >= 0)
4499:.\console.c   **** 					&& (gamma = atof(actual_cmd.number1)) <= 1)
4500:.\console.c   **** 					{
4501:.\console.c   **** 						IMU_sensor.param.gamma.fnum = gamma;
4502:.\console.c   **** 						
4503:.\console.c   **** 						/* Writes alpha on EEPROM */
4504:.\console.c   **** 						dummy = WriteAllEEparams();
4505:.\console.c   **** 						printf(STR_REM_STGM, (float)IMU_sensor.param.gamma.fnum);   /* REM: gamma setted to...*/					
4506:.\console.c   **** 					}
4507:.\console.c   **** 					else
4508:.\console.c   **** 					{
4509:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4510:.\console.c   **** 					}
4511:.\console.c   **** 					goto exitpars;
4512:.\console.c   **** 				}	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 340


4513:.\console.c   **** 				// END SET gamma (IMU LPF)
4514:.\console.c   **** 
4515:.\console.c   **** 				
4516:.\console.c   **** 				// SET Jump G Threshold
4517:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "jumpth") == 0)
4518:.\console.c   **** 				{	
4519:.\console.c   **** 					if (((jump_g_th = atof(actual_cmd.number1)) >= 0)
4520:.\console.c   **** 					&& (jump_g_th = atof(actual_cmd.number1)) <= 10)
4521:.\console.c   **** 					{
4522:.\console.c   **** 						gobee_param.jump_g_threshold.fnum = jump_g_th;
4523:.\console.c   **** 						
4524:.\console.c   **** 						/* Writes alpha on EEPROM */
4525:.\console.c   **** 						dummy = WriteAllEEparams();
4526:.\console.c   **** 						printf(STR_REM_STJG, (float)gobee_param.jump_g_threshold.fnum);   /* REM: jump g thr setted t
4527:.\console.c   **** 					}
4528:.\console.c   **** 					else
4529:.\console.c   **** 					{
4530:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4531:.\console.c   **** 					}
4532:.\console.c   **** 					goto exitpars;
4533:.\console.c   **** 				}	
4534:.\console.c   **** 				// END SET Jump G Threshold		
4535:.\console.c   **** 				
4536:.\console.c   **** 				
4537:.\console.c   **** 				// SET Acceleration G Threshold
4538:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "accth") == 0)
4539:.\console.c   **** 				{	
4540:.\console.c   **** 					if (((acc_g_th = atof(actual_cmd.number1)) >= 0)
4541:.\console.c   **** 					&& (acc_g_th = atof(actual_cmd.number1)) <= 10)
4542:.\console.c   **** 					{
4543:.\console.c   **** 						gobee_param.acc_g_threshold.fnum = acc_g_th;
4544:.\console.c   **** 						
4545:.\console.c   **** 						/* Writes alpha on EEPROM */
4546:.\console.c   **** 						dummy = WriteAllEEparams();
4547:.\console.c   **** 						printf(STR_REM_STAG, (float)gobee_param.acc_g_threshold.fnum);   /* REM: acc g thr setted to.
4548:.\console.c   **** 					}
4549:.\console.c   **** 					else
4550:.\console.c   **** 					{
4551:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4552:.\console.c   **** 					}
4553:.\console.c   **** 					goto exitpars;
4554:.\console.c   **** 				}	
4555:.\console.c   **** 				// END SET Acceleration G Threshold					
4556:.\console.c   **** 				
4557:.\console.c   **** 				
4558:.\console.c   **** 				// SET ASTIM TYPE
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
4560:.\console.c   **** 				   (strcmp(actual_cmd.parameter, "astimtype") == 0)) 
4561:.\console.c   **** 				{	
4562:.\console.c   **** 					if (((astim_type = atoi(actual_cmd.number1)) >= NO_ASTIM)
4563:.\console.c   **** 					&& (astim_type = atoi(actual_cmd.number1)) <= SQUARE_ASTIM)
4564:.\console.c   **** 					{		
4565:.\console.c   **** //						if (astim_type != NO_ASTIM)
4566:.\console.c   **** //						{
4567:.\console.c   **** //							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4568:.\console.c   **** //							printf(STR_ASTIMB);				//
4569:.\console.c   **** //							
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 341


4570:.\console.c   **** //							if (ButtonYNChoice(ECHO_ON) == _NO)
4571:.\console.c   **** //							{
4572:.\console.c   **** //								goto exitpars;
4573:.\console.c   **** //							}
4574:.\console.c   **** //							printf("\r\n");
4575:.\console.c   **** 							
4576:.\console.c   **** 							/* Update Global Volatile Parameter		*/
4577:.\console.c   **** 							pan_axis.vparam.astim_type  = astim_type;
4578:.\console.c   **** 							tilt_axis.vparam.astim_type = astim_type;						
4579:.\console.c   **** 							
4580:.\console.c   **** 							printf(STR_REM_ASTP, (uint16)astim_type);   /* REM: PAN  Astim Type Configured to...*/
4581:.\console.c   **** 							printf(STR_REM_ASTT, (uint16)astim_type);   /* REM: TILT Astim Type Configured to...*/						
4582:.\console.c   **** 							
4583:.\console.c   **** 							WaveDAC8_Start();					//Starts WaveDAC8	
4584:.\console.c   **** 							PGA_ASTIM_Start();					//Starts PGA_ASTIM
4585:.\console.c   **** 							
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
4587:.\console.c   **** 							{
4588:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
4589:.\console.c   **** 								Control_Reg_WS_Write(0);			//Selects wave 0
4590:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4591:.\console.c   **** 								printf("Sine Wave Astim Started!\r\n");							
4592:.\console.c   **** 							}
4593:.\console.c   **** 							else if (astim_type == TRIANGLE_ASTIM)
4594:.\console.c   **** 							{
4595:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
4596:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1																	
4597:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_triangle, WaveDAC8_WAVE_TRIANGLE_LENGTH);	//SELECTS TRIAN
4598:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4599:.\console.c   **** 								printf("Triangle Wave Astim Started!\r\n");								
4600:.\console.c   **** 							}
4601:.\console.c   **** 							else if (astim_type == SQUARE_ASTIM)
4602:.\console.c   **** 							{
4603:.\console.c   **** 								WaveDAC8_Stop();					//Stops 						
4604:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1	
4605:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_square, WaveDAC8_WAVE_SQUARE_LENGTH);	//SELECTS SQUARE
4606:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4607:.\console.c   **** 								printf("Square Wave Astim Started!\r\n");								
4608:.\console.c   **** 							}						
4609:.\console.c   **** 							else if (astim_type == NO_ASTIM)
4610:.\console.c   **** 							{
4611:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8
4612:.\console.c   **** 								PGA_ASTIM_Stop();					//Stops PGA_ASTIM
4613:.\console.c   **** 								printf("Wave Astim Stopped!\r\n");							
4614:.\console.c   **** 							}	
4615:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4616:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4617:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4618:.\console.c   **** //						}
4619:.\console.c   **** 					}
4620:.\console.c   **** 					else
4621:.\console.c   **** 					{
4622:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4623:.\console.c   **** 					}
4624:.\console.c   **** 					goto exitpars;
4625:.\console.c   **** 				}	
4626:.\console.c   **** 				//END SET ASTIM TYPE
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 342


4627:.\console.c   **** 				
4628:.\console.c   **** 				
4629:.\console.c   **** 				// SET ASTIM PAN ENABLE
4630:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimp") == 0) 
4631:.\console.c   **** 				{	
4632:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
4633:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
4634:.\console.c   **** 					{		
4635:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
4636:.\console.c   **** 						{
4637:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4638:.\console.c   **** 							printf(STR_ASTIMB);				//
4639:.\console.c   **** 							
4640:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
4641:.\console.c   **** 							{
4642:.\console.c   **** 								goto exitpars;
4643:.\console.c   **** 							}
4644:.\console.c   **** 							printf("\r\n");	
4645:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4646:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4647:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4648:.\console.c   **** 						}
4649:.\console.c   **** 						/* Update Global Volatile Parameter		*/
4650:.\console.c   **** 						pan_axis.vparam.astim_enable  = astim_enable;
4651:.\console.c   **** 						
4652:.\console.c   **** 						printf(STR_REM_ASEP, (uint16)astim_enable);   /* REM: PAN  Astim Type Configured to...*/
4653:.\console.c   **** 					}
4654:.\console.c   **** 					else
4655:.\console.c   **** 					{
4656:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4657:.\console.c   **** 					}
4658:.\console.c   **** 					goto exitpars;
4659:.\console.c   **** 				}	
4660:.\console.c   **** 				//END SET ASTIM PAN ENABLE				
4661:.\console.c   **** 				
4662:.\console.c   **** 				
4663:.\console.c   **** 				// SET ASTIM TILT ENABLE
4664:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimt") == 0) 
4665:.\console.c   **** 				{	
4666:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
4667:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
4668:.\console.c   **** 					{		
4669:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
4670:.\console.c   **** 						{
4671:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4672:.\console.c   **** 							printf(STR_ASTIMB);				//
4673:.\console.c   **** 							
4674:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
4675:.\console.c   **** 							{
4676:.\console.c   **** 								goto exitpars;
4677:.\console.c   **** 							}
4678:.\console.c   **** 							printf("\r\n");
4679:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4680:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4681:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4682:.\console.c   **** 						}
4683:.\console.c   **** 							/* Update Global Volatile Parameter		*/
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 343


4684:.\console.c   **** 							tilt_axis.vparam.astim_enable  = astim_enable;
4685:.\console.c   **** 							
4686:.\console.c   **** 							printf(STR_REM_ASET, (uint16)astim_enable);   /* REM: TILT  Astim Type Configured to...*/
4687:.\console.c   **** 					}
4688:.\console.c   **** 					else
4689:.\console.c   **** 					{
4690:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4691:.\console.c   **** 					}
4692:.\console.c   **** 					goto exitpars;
4693:.\console.c   **** 				}	
4694:.\console.c   **** 				//END SET ASTIM TILT ENABLE					
4695:.\console.c   **** 				
4696:.\console.c   **** 				
4697:.\console.c   **** //				// SET DEFAULT machine parameters
4698:.\console.c   **** //				if ((strcmp(actual_cmd.parameter, "default") == 0)
4699:.\console.c   **** //				|| (strcmp(actual_cmd.parameter, "defaults") == 0))
4700:.\console.c   **** //				{	
4701:.\console.c   **** //					if ((strlen(actual_cmd.number1)) == 0)
4702:.\console.c   **** //					{
4703:.\console.c   **** //						printf("Are you sure [Y/N]?");
4704:.\console.c   **** //						
4705:.\console.c   **** //						if (ButtonYNChoice(ECHO_ON) == _YES)
4706:.\console.c   **** //						{
4707:.\console.c   **** //							cys_param.nodeid = 1;					/* Default CAN/RS485 nodeid = 1 				*/
4708:.\console.c   **** //							cys_param.maxmotors = 8;				/* Default max motor number = 8 				*/
4709:.\console.c   **** //							cys_param.maxcurrent = 64; 				/* Default Medium Current 						*/
4710:.\console.c   **** //							cys_param.speed = VSTOP;				/* Default All Motor Stop 						*/
4711:.\console.c   **** //							cys_param.moveTimeoutms = 20000;		/* Default 20secs of moving before FAULT 		*/
4712:.\console.c   **** //							cys_param.currTimeoutms = 500;			/* Default 500msec before Current Fault     	*/
4713:.\console.c   **** //							cys_param.faultcurrent = 600;			/* Default faulcurrent=600*2,014362[mA]=1200[mA]*/	
4714:.\console.c   **** //				
4715:.\console.c   **** //							strcpy(cys_param.unicode, "12345678");	/* Deafult Unicode = "12345678"					*/									
4716:.\console.c   **** //							
4717:.\console.c   **** //							for (idx=0;idx<=7;idx++)
4718:.\console.c   **** //							{
4719:.\console.c   **** //								cys_param.targets1[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 1 Default */
4720:.\console.c   **** //								cys_param.targets2[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 2 Default */
4721:.\console.c   **** //								cys_param.targets3[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 3 Default */
4722:.\console.c   **** //								cys_param.targets4[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 4 Default */
4723:.\console.c   **** //							}
4724:.\console.c   **** //	
4725:.\console.c   **** //							/* Writes MAXCURRENT on DACS */
4726:.\console.c   **** //							VDAC_IREF_12_SetValue(cys_param.maxcurrent);
4727:.\console.c   **** //							VDAC_IREF_34_SetValue(cys_param.maxcurrent);
4728:.\console.c   **** //							VDAC_IREF_56_SetValue(cys_param.maxcurrent);
4729:.\console.c   **** //							VDAC_IREF_78_SetValue(cys_param.maxcurrent);	
4730:.\console.c   **** //	
4731:.\console.c   **** //							/* Writes DEFAULT parameters on EEPROM */
4732:.\console.c   **** //							dummy = WriteAllEEparams();						
4733:.\console.c   **** //							
4734:.\console.c   **** //							printf(STR_REM_DEFL);   /* REM: *All machine parameters setted to factory DEFAULT! */
4735:.\console.c   **** //						}
4736:.\console.c   **** //						else
4737:.\console.c   **** //						{
4738:.\console.c   **** //							printf(STR_REM_NODF);   /* REM: Machine parameters UNCHANGED! */
4739:.\console.c   **** //						}
4740:.\console.c   **** //					}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 344


4741:.\console.c   **** //					else
4742:.\console.c   **** //					{
4743:.\console.c   **** //						printf(STR_ERROR1);		/* ERROR1: Too much parameters! */
4744:.\console.c   **** //					}
4745:.\console.c   **** //					goto exitpars;
4746:.\console.c   **** //				}					
4747:.\console.c   **** //				
4748:.\console.c   **** //				printf(STR_ERROR3);				/* ERROR3: Bad parameters */
4749:.\console.c   **** //				// altri casi di set
4750:.\console.c   **** //
4751:.\console.c   **** 			}
4752:.\console.c   **** 		goto exitpars;	
 11880              		.loc 1 4752 0
 11881 50c6 02F002BA 		b	.L717
 11882              	.L420:
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
 11883              		.loc 1 3266 0
 11884 50ca 3F48     		ldr	r0, .L754
 11885 50cc 40F20001 		movw	r1, #:lower16:.LC600
 11886 50d0 C0F20001 		movt	r1, #:upper16:.LC600
 11887 50d4 FFF7FEFF 		bl	strcmp
 11888 50d8 0346     		mov	r3, r0
 11889 50da 002B     		cmp	r3, #0
 11890 50dc 09D0     		beq	.L422
3267:.\console.c   **** 					(strcmp(actual_cmd.parameter, "dir") == 0))
 11891              		.loc 1 3267 0 discriminator 1
 11892 50de 3A48     		ldr	r0, .L754
 11893 50e0 40F20001 		movw	r1, #:lower16:.LC601
 11894 50e4 C0F20001 		movt	r1, #:upper16:.LC601
 11895 50e8 FFF7FEFF 		bl	strcmp
 11896 50ec 0346     		mov	r3, r0
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
 11897              		.loc 1 3266 0 discriminator 1
 11898 50ee 002B     		cmp	r3, #0
 11899 50f0 30D1     		bne	.L423
 11900              	.L422:
3269:.\console.c   **** 					if (((director = atoi(actual_cmd.number1)) >= STANLEY)
 11901              		.loc 1 3269 0
 11902 50f2 3648     		ldr	r0, .L754+4
 11903 50f4 FFF7FEFF 		bl	atoi
 11904 50f8 0346     		mov	r3, r0
 11905 50fa 87F8B330 		strb	r3, [r7, #179]
3270:.\console.c   **** 					&& (director = atoi(actual_cmd.number1)) <= JJ)
 11906              		.loc 1 3270 0
 11907 50fe 3348     		ldr	r0, .L754+4
 11908 5100 FFF7FEFF 		bl	atoi
 11909 5104 0346     		mov	r3, r0
 11910 5106 87F8B330 		strb	r3, [r7, #179]
 11911 510a 97F8B330 		ldrb	r3, [r7, #179]	@ zero_extendqisi2
 11912 510e 122B     		cmp	r3, #18
 11913 5110 18D8     		bhi	.L424
3272:.\console.c   **** 						gobee_param.director = director;
 11914              		.loc 1 3272 0
 11915 5112 40F20003 		movw	r3, #:lower16:gobee_param
 11916 5116 C0F20003 		movt	r3, #:upper16:gobee_param
 11917 511a 97F8B320 		ldrb	r2, [r7, #179]
 11918 511e 5A70     		strb	r2, [r3, #1]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 345


3275:.\console.c   **** 						dummy = WriteAllEEparams();
 11919              		.loc 1 3275 0
 11920 5120 FFF7FEFF 		bl	WriteAllEEparams
 11921 5124 0346     		mov	r3, r0
 11922 5126 87F8D930 		strb	r3, [r7, #217]
3276:.\console.c   **** 						printf(STR_REM_SEDR, (uint16)director);   /* REM: director setted to...*/
 11923              		.loc 1 3276 0
 11924 512a 97F8B330 		ldrb	r3, [r7, #179]	@ zero_extendqisi2
 11925 512e 40F20000 		movw	r0, #:lower16:.LC602
 11926 5132 C0F20000 		movt	r0, #:upper16:.LC602
 11927 5136 1946     		mov	r1, r3
 11928 5138 FFF7FEFF 		bl	printf
3277:.\console.c   **** 						ShowParamsDirector();
 11929              		.loc 1 3277 0
 11930 513c FFF7FEFF 		bl	ShowParamsDirector
3283:.\console.c   **** 					goto exitpars;
 11931              		.loc 1 3283 0
 11932 5140 02F0C8B9 		b	.L131
 11933              	.L424:
3281:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11934              		.loc 1 3281 0
 11935 5144 40F20000 		movw	r0, #:lower16:.LC450
 11936 5148 C0F20000 		movt	r0, #:upper16:.LC450
 11937 514c FFF7FEFF 		bl	printf
3283:.\console.c   **** 					goto exitpars;
 11938              		.loc 1 3283 0
 11939 5150 02F0C0B9 		b	.L131
 11940              	.L423:
3289:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "mode") == 0)
 11941              		.loc 1 3289 0
 11942 5154 1C48     		ldr	r0, .L754
 11943 5156 40F20001 		movw	r1, #:lower16:.LC603
 11944 515a C0F20001 		movt	r1, #:upper16:.LC603
 11945 515e FFF7FEFF 		bl	strcmp
 11946 5162 0346     		mov	r3, r0
 11947 5164 002B     		cmp	r3, #0
 11948 5166 33D1     		bne	.L426
3291:.\console.c   **** 					if (((mode_loc = atoi(actual_cmd.number1)) >= REMOTECONTROL_MODE)
 11949              		.loc 1 3291 0
 11950 5168 1848     		ldr	r0, .L754+4
 11951 516a FFF7FEFF 		bl	atoi
 11952 516e 0346     		mov	r3, r0
 11953 5170 87F8DA30 		strb	r3, [r7, #218]
3292:.\console.c   **** 					&& (mode_loc = atoi(actual_cmd.number1)) <= DIRECTOR_MODE)
 11954              		.loc 1 3292 0
 11955 5174 1548     		ldr	r0, .L754+4
 11956 5176 FFF7FEFF 		bl	atoi
 11957 517a 0346     		mov	r3, r0
 11958 517c 87F8DA30 		strb	r3, [r7, #218]
 11959 5180 97F8DA30 		ldrb	r3, [r7, #218]	@ zero_extendqisi2
 11960 5184 012B     		cmp	r3, #1
 11961 5186 16D8     		bhi	.L427
3294:.\console.c   **** 						gobee_param.mode = mode_loc;
 11962              		.loc 1 3294 0
 11963 5188 40F20003 		movw	r3, #:lower16:gobee_param
 11964 518c C0F20003 		movt	r3, #:upper16:gobee_param
 11965 5190 97F8DA20 		ldrb	r2, [r7, #218]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 346


 11966 5194 1A70     		strb	r2, [r3, #0]
3297:.\console.c   **** 						dummy = WriteAllEEparams();
 11967              		.loc 1 3297 0
 11968 5196 FFF7FEFF 		bl	WriteAllEEparams
 11969 519a 0346     		mov	r3, r0
 11970 519c 87F8D930 		strb	r3, [r7, #217]
3298:.\console.c   **** 						printf(STR_REM_SMOD, (uint16)mode_loc);   /* REM: machine mode setted to...*/					
 11971              		.loc 1 3298 0
 11972 51a0 97F8DA30 		ldrb	r3, [r7, #218]	@ zero_extendqisi2
 11973 51a4 40F20000 		movw	r0, #:lower16:.LC604
 11974 51a8 C0F20000 		movt	r0, #:upper16:.LC604
 11975 51ac 1946     		mov	r1, r3
 11976 51ae FFF7FEFF 		bl	printf
3304:.\console.c   **** 					goto exitpars;
 11977              		.loc 1 3304 0
 11978 51b2 02F08FB9 		b	.L131
 11979              	.L427:
3302:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11980              		.loc 1 3302 0
 11981 51b6 40F20000 		movw	r0, #:lower16:.LC450
 11982 51ba C0F20000 		movt	r0, #:upper16:.LC450
 11983 51be FFF7FEFF 		bl	printf
3304:.\console.c   **** 					goto exitpars;
 11984              		.loc 1 3304 0
 11985 51c2 02F087B9 		b	.L131
 11986              	.L755:
 11987 51c6 00BF     		.align	2
 11988              	.L754:
 11989 51c8 0F000000 		.word	actual_cmd+15
 11990 51cc 1E000000 		.word	actual_cmd+30
 11991              	.L426:
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
 11992              		.loc 1 3310 0
 11993 51d0 BD48     		ldr	r0, .L756
 11994 51d2 40F20001 		movw	r1, #:lower16:.LC605
 11995 51d6 C0F20001 		movt	r1, #:upper16:.LC605
 11996 51da FFF7FEFF 		bl	strcmp
 11997 51de 0346     		mov	r3, r0
 11998 51e0 002B     		cmp	r3, #0
 11999 51e2 09D0     		beq	.L429
3311:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polp") == 0))
 12000              		.loc 1 3311 0 discriminator 1
 12001 51e4 B848     		ldr	r0, .L756
 12002 51e6 40F20001 		movw	r1, #:lower16:.LC606
 12003 51ea C0F20001 		movt	r1, #:upper16:.LC606
 12004 51ee FFF7FEFF 		bl	strcmp
 12005 51f2 0346     		mov	r3, r0
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
 12006              		.loc 1 3310 0 discriminator 1
 12007 51f4 002B     		cmp	r3, #0
 12008 51f6 2ED1     		bne	.L430
 12009              	.L429:
3313:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
 12010              		.loc 1 3313 0
 12011 51f8 B448     		ldr	r0, .L756+4
 12012 51fa FFF7FEFF 		bl	atoi
 12013 51fe 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 347


 12014 5200 87F8F330 		strb	r3, [r7, #243]
3314:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
 12015              		.loc 1 3314 0
 12016 5204 B148     		ldr	r0, .L756+4
 12017 5206 FFF7FEFF 		bl	atoi
 12018 520a 0346     		mov	r3, r0
 12019 520c 87F8F330 		strb	r3, [r7, #243]
 12020 5210 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 12021 5214 012B     		cmp	r3, #1
 12022 5216 16D8     		bhi	.L431
3316:.\console.c   **** 						pan_axis.param.polarity = polarity;
 12023              		.loc 1 3316 0
 12024 5218 40F20003 		movw	r3, #:lower16:pan_axis
 12025 521c C0F20003 		movt	r3, #:upper16:pan_axis
 12026 5220 97F8F320 		ldrb	r2, [r7, #243]
 12027 5224 1A74     		strb	r2, [r3, #16]
3319:.\console.c   **** 						dummy = WriteAllEEparams();
 12028              		.loc 1 3319 0
 12029 5226 FFF7FEFF 		bl	WriteAllEEparams
 12030 522a 0346     		mov	r3, r0
 12031 522c 87F8D930 		strb	r3, [r7, #217]
3320:.\console.c   **** 						printf(STR_REM_SETP, (uint16)polarity);   /* REM: pan axis polarity setted to...*/					
 12032              		.loc 1 3320 0
 12033 5230 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 12034 5234 40F20000 		movw	r0, #:lower16:.LC607
 12035 5238 C0F20000 		movt	r0, #:upper16:.LC607
 12036 523c 1946     		mov	r1, r3
 12037 523e FFF7FEFF 		bl	printf
3326:.\console.c   **** 					goto exitpars;
 12038              		.loc 1 3326 0
 12039 5242 02F047B9 		b	.L131
 12040              	.L431:
3324:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12041              		.loc 1 3324 0
 12042 5246 40F20000 		movw	r0, #:lower16:.LC450
 12043 524a C0F20000 		movt	r0, #:upper16:.LC450
 12044 524e FFF7FEFF 		bl	printf
3326:.\console.c   **** 					goto exitpars;
 12045              		.loc 1 3326 0
 12046 5252 02F03FB9 		b	.L131
 12047              	.L430:
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
 12048              		.loc 1 3332 0
 12049 5256 9C48     		ldr	r0, .L756
 12050 5258 40F20001 		movw	r1, #:lower16:.LC608
 12051 525c C0F20001 		movt	r1, #:upper16:.LC608
 12052 5260 FFF7FEFF 		bl	strcmp
 12053 5264 0346     		mov	r3, r0
 12054 5266 002B     		cmp	r3, #0
 12055 5268 09D0     		beq	.L433
3333:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polt") == 0))
 12056              		.loc 1 3333 0 discriminator 1
 12057 526a 9748     		ldr	r0, .L756
 12058 526c 40F20001 		movw	r1, #:lower16:.LC609
 12059 5270 C0F20001 		movt	r1, #:upper16:.LC609
 12060 5274 FFF7FEFF 		bl	strcmp
 12061 5278 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 348


3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
 12062              		.loc 1 3332 0 discriminator 1
 12063 527a 002B     		cmp	r3, #0
 12064 527c 2ED1     		bne	.L434
 12065              	.L433:
3335:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
 12066              		.loc 1 3335 0
 12067 527e 9348     		ldr	r0, .L756+4
 12068 5280 FFF7FEFF 		bl	atoi
 12069 5284 0346     		mov	r3, r0
 12070 5286 87F8F330 		strb	r3, [r7, #243]
3336:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
 12071              		.loc 1 3336 0
 12072 528a 9048     		ldr	r0, .L756+4
 12073 528c FFF7FEFF 		bl	atoi
 12074 5290 0346     		mov	r3, r0
 12075 5292 87F8F330 		strb	r3, [r7, #243]
 12076 5296 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 12077 529a 012B     		cmp	r3, #1
 12078 529c 16D8     		bhi	.L435
3338:.\console.c   **** 						tilt_axis.param.polarity = polarity;
 12079              		.loc 1 3338 0
 12080 529e 40F20003 		movw	r3, #:lower16:tilt_axis
 12081 52a2 C0F20003 		movt	r3, #:upper16:tilt_axis
 12082 52a6 97F8F320 		ldrb	r2, [r7, #243]
 12083 52aa 1A74     		strb	r2, [r3, #16]
3341:.\console.c   **** 						dummy = WriteAllEEparams();
 12084              		.loc 1 3341 0
 12085 52ac FFF7FEFF 		bl	WriteAllEEparams
 12086 52b0 0346     		mov	r3, r0
 12087 52b2 87F8D930 		strb	r3, [r7, #217]
3342:.\console.c   **** 						printf(STR_REM_SETPT, (uint16)polarity);   /* REM: tilt axis polarity setted to...*/					
 12088              		.loc 1 3342 0
 12089 52b6 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 12090 52ba 40F20000 		movw	r0, #:lower16:.LC610
 12091 52be C0F20000 		movt	r0, #:upper16:.LC610
 12092 52c2 1946     		mov	r1, r3
 12093 52c4 FFF7FEFF 		bl	printf
3348:.\console.c   **** 					goto exitpars;
 12094              		.loc 1 3348 0
 12095 52c8 02F004B9 		b	.L131
 12096              	.L435:
3346:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12097              		.loc 1 3346 0
 12098 52cc 40F20000 		movw	r0, #:lower16:.LC450
 12099 52d0 C0F20000 		movt	r0, #:upper16:.LC450
 12100 52d4 FFF7FEFF 		bl	printf
3348:.\console.c   **** 					goto exitpars;
 12101              		.loc 1 3348 0
 12102 52d8 02F0FCB8 		b	.L131
 12103              	.L434:
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
 12104              		.loc 1 3354 0
 12105 52dc 7A48     		ldr	r0, .L756
 12106 52de 40F20001 		movw	r1, #:lower16:.LC611
 12107 52e2 C0F20001 		movt	r1, #:upper16:.LC611
 12108 52e6 FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 349


 12109 52ea 0346     		mov	r3, r0
 12110 52ec 002B     		cmp	r3, #0
 12111 52ee 09D0     		beq	.L437
3355:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lcp") == 0))
 12112              		.loc 1 3355 0 discriminator 1
 12113 52f0 7548     		ldr	r0, .L756
 12114 52f2 40F20001 		movw	r1, #:lower16:.LC612
 12115 52f6 C0F20001 		movt	r1, #:upper16:.LC612
 12116 52fa FFF7FEFF 		bl	strcmp
 12117 52fe 0346     		mov	r3, r0
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
 12118              		.loc 1 3354 0 discriminator 1
 12119 5300 002B     		cmp	r3, #0
 12120 5302 2FD1     		bne	.L438
 12121              	.L437:
3357:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
 12122              		.loc 1 3357 0
 12123 5304 7148     		ldr	r0, .L756+4
 12124 5306 FFF7FEFF 		bl	atoi
 12125 530a 0346     		mov	r3, r0
 12126 530c 87F8B430 		strb	r3, [r7, #180]
3358:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
 12127              		.loc 1 3358 0
 12128 5310 6E48     		ldr	r0, .L756+4
 12129 5312 FFF7FEFF 		bl	atoi
 12130 5316 0346     		mov	r3, r0
 12131 5318 87F8B430 		strb	r3, [r7, #180]
 12132 531c 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 12133 5320 012B     		cmp	r3, #1
 12134 5322 17D8     		bhi	.L439
3360:.\console.c   **** 						pan_axis.param.limit_control = limit_control;
 12135              		.loc 1 3360 0
 12136 5324 40F20003 		movw	r3, #:lower16:pan_axis
 12137 5328 C0F20003 		movt	r3, #:upper16:pan_axis
 12138 532c 97F8B420 		ldrb	r2, [r7, #180]
 12139 5330 83F82D20 		strb	r2, [r3, #45]
3363:.\console.c   **** 						dummy = WriteAllEEparams();
 12140              		.loc 1 3363 0
 12141 5334 FFF7FEFF 		bl	WriteAllEEparams
 12142 5338 0346     		mov	r3, r0
 12143 533a 87F8D930 		strb	r3, [r7, #217]
3364:.\console.c   **** 						printf(STR_REM_STLP, (uint16)limit_control);   /* REM: pan axis limit control setted to...*/	
 12144              		.loc 1 3364 0
 12145 533e 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 12146 5342 40F20000 		movw	r0, #:lower16:.LC613
 12147 5346 C0F20000 		movt	r0, #:upper16:.LC613
 12148 534a 1946     		mov	r1, r3
 12149 534c FFF7FEFF 		bl	printf
3370:.\console.c   **** 					goto exitpars;
 12150              		.loc 1 3370 0
 12151 5350 02F0C0B8 		b	.L131
 12152              	.L439:
3368:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12153              		.loc 1 3368 0
 12154 5354 40F20000 		movw	r0, #:lower16:.LC450
 12155 5358 C0F20000 		movt	r0, #:upper16:.LC450
 12156 535c FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 350


3370:.\console.c   **** 					goto exitpars;
 12157              		.loc 1 3370 0
 12158 5360 02F0B8B8 		b	.L131
 12159              	.L438:
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
 12160              		.loc 1 3376 0
 12161 5364 5848     		ldr	r0, .L756
 12162 5366 40F20001 		movw	r1, #:lower16:.LC614
 12163 536a C0F20001 		movt	r1, #:upper16:.LC614
 12164 536e FFF7FEFF 		bl	strcmp
 12165 5372 0346     		mov	r3, r0
 12166 5374 002B     		cmp	r3, #0
 12167 5376 09D0     		beq	.L441
3377:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invp") == 0))
 12168              		.loc 1 3377 0 discriminator 1
 12169 5378 5348     		ldr	r0, .L756
 12170 537a 40F20001 		movw	r1, #:lower16:.LC615
 12171 537e C0F20001 		movt	r1, #:upper16:.LC615
 12172 5382 FFF7FEFF 		bl	strcmp
 12173 5386 0346     		mov	r3, r0
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
 12174              		.loc 1 3376 0 discriminator 1
 12175 5388 002B     		cmp	r3, #0
 12176 538a 2FD1     		bne	.L442
 12177              	.L441:
3379:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
 12178              		.loc 1 3379 0
 12179 538c 4F48     		ldr	r0, .L756+4
 12180 538e FFF7FEFF 		bl	atoi
 12181 5392 0346     		mov	r3, r0
 12182 5394 87F8B530 		strb	r3, [r7, #181]
3380:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
 12183              		.loc 1 3380 0
 12184 5398 4C48     		ldr	r0, .L756+4
 12185 539a FFF7FEFF 		bl	atoi
 12186 539e 0346     		mov	r3, r0
 12187 53a0 87F8B530 		strb	r3, [r7, #181]
 12188 53a4 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 12189 53a8 012B     		cmp	r3, #1
 12190 53aa 17D8     		bhi	.L443
3382:.\console.c   **** 						pan_absolute_sensor.param.raw_invertion = raw_invertion;
 12191              		.loc 1 3382 0
 12192 53ac 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12193 53b0 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12194 53b4 97F8B520 		ldrb	r2, [r7, #181]
 12195 53b8 83F82C20 		strb	r2, [r3, #44]
3385:.\console.c   **** 						dummy = WriteAllEEparams();
 12196              		.loc 1 3385 0
 12197 53bc FFF7FEFF 		bl	WriteAllEEparams
 12198 53c0 0346     		mov	r3, r0
 12199 53c2 87F8D930 		strb	r3, [r7, #217]
3386:.\console.c   **** 						printf(STR_REM_SIVP, (uint16)raw_invertion);   /* REM: pan axis absoluter sensor invertion se
 12200              		.loc 1 3386 0
 12201 53c6 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 12202 53ca 40F20000 		movw	r0, #:lower16:.LC616
 12203 53ce C0F20000 		movt	r0, #:upper16:.LC616
 12204 53d2 1946     		mov	r1, r3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 351


 12205 53d4 FFF7FEFF 		bl	printf
3392:.\console.c   **** 					goto exitpars;
 12206              		.loc 1 3392 0
 12207 53d8 02F07CB8 		b	.L131
 12208              	.L443:
3390:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12209              		.loc 1 3390 0
 12210 53dc 40F20000 		movw	r0, #:lower16:.LC450
 12211 53e0 C0F20000 		movt	r0, #:upper16:.LC450
 12212 53e4 FFF7FEFF 		bl	printf
3392:.\console.c   **** 					goto exitpars;
 12213              		.loc 1 3392 0
 12214 53e8 02F074B8 		b	.L131
 12215              	.L442:
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
 12216              		.loc 1 3398 0
 12217 53ec 3648     		ldr	r0, .L756
 12218 53ee 40F20001 		movw	r1, #:lower16:.LC617
 12219 53f2 C0F20001 		movt	r1, #:upper16:.LC617
 12220 53f6 FFF7FEFF 		bl	strcmp
 12221 53fa 0346     		mov	r3, r0
 12222 53fc 002B     		cmp	r3, #0
 12223 53fe 09D0     		beq	.L445
3399:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zp") == 0))
 12224              		.loc 1 3399 0 discriminator 1
 12225 5400 3148     		ldr	r0, .L756
 12226 5402 40F20001 		movw	r1, #:lower16:.LC618
 12227 5406 C0F20001 		movt	r1, #:upper16:.LC618
 12228 540a FFF7FEFF 		bl	strcmp
 12229 540e 0346     		mov	r3, r0
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
 12230              		.loc 1 3398 0 discriminator 1
 12231 5410 002B     		cmp	r3, #0
 12232 5412 5DD1     		bne	.L446
 12233              	.L445:
3401:.\console.c   **** 					printf("* Warning! Put PAN Axis to zero (HOME) position and press y!");
 12234              		.loc 1 3401 0
 12235 5414 40F20000 		movw	r0, #:lower16:.LC619
 12236 5418 C0F20000 		movt	r0, #:upper16:.LC619
 12237 541c FFF7FEFF 		bl	printf
3403:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12238              		.loc 1 3403 0
 12239 5420 4FF00100 		mov	r0, #1
 12240 5424 FFF7FEFF 		bl	ButtonYNChoice
 12241 5428 0346     		mov	r3, r0
 12242 542a 012B     		cmp	r3, #1
 12243 542c 3FD1     		bne	.L447
3405:.\console.c   **** 						pan_absolute_sensor.param.raw_home = 0; 		/* reset absolute pan sensor zero raw 			*/
 12244              		.loc 1 3405 0
 12245 542e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12246 5432 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12247 5436 4FF00002 		mov	r2, #0
 12248 543a DA85     		strh	r2, [r3, #46]	@ movhi
3408:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12249              		.loc 1 3408 0
 12250 543c 40F20000 		movw	r0, #:lower16:.LC620
 12251 5440 C0F20000 		movt	r0, #:upper16:.LC620
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 352


 12252 5444 FFF7FEFF 		bl	puts
3409:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 12253              		.loc 1 3409 0
 12254 5448 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 12255 544c C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 12256 5450 FFF7FEFF 		bl	statistics_start
3412:.\console.c   **** 						CyDelay(1000);
 12257              		.loc 1 3412 0
 12258 5454 4FF47A70 		mov	r0, #1000
 12259 5458 FFF7FEFF 		bl	CyDelay
3415:.\console.c   **** 						printf("* Statistics stop!\r\n");						
 12260              		.loc 1 3415 0
 12261 545c 40F20000 		movw	r0, #:lower16:.LC621
 12262 5460 C0F20000 		movt	r0, #:upper16:.LC621
 12263 5464 FFF7FEFF 		bl	puts
3416:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 12264              		.loc 1 3416 0
 12265 5468 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 12266 546c C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 12267 5470 FFF7FEFF 		bl	statistics_stop
3420:.\console.c   **** 						pan_absolute_sensor.param.raw_home = (int16)pan_absolute_sensor_stat.mean;
 12268              		.loc 1 3420 0
 12269 5474 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 12270 5478 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 12271 547c 5B68     		ldr	r3, [r3, #4]	@ float
 12272 547e 1846     		mov	r0, r3
 12273 5480 FFF7FEFF 		bl	__aeabi_f2iz
 12274 5484 0346     		mov	r3, r0
 12275 5486 9AB2     		uxth	r2, r3
 12276 5488 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12277 548c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12278 5490 DA85     		strh	r2, [r3, #46]	@ movhi
3421:.\console.c   **** 						printf(STR_REM_PASZ, (int16)pan_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Zer
 12279              		.loc 1 3421 0
 12280 5492 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12281 5496 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12282 549a DB8D     		ldrh	r3, [r3, #46]
 12283 549c 1BB2     		sxth	r3, r3
 12284 549e 40F20000 		movw	r0, #:lower16:.LC622
 12285 54a2 C0F20000 		movt	r0, #:upper16:.LC622
 12286 54a6 1946     		mov	r1, r3
 12287 54a8 FFF7FEFF 		bl	printf
 12288 54ac 05E0     		b	.L448
 12289              	.L447:
3425:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 12290              		.loc 1 3425 0
 12291 54ae 40F20000 		movw	r0, #:lower16:.LC623
 12292 54b2 C0F20000 		movt	r0, #:upper16:.LC623
 12293 54b6 FFF7FEFF 		bl	puts
 12294              	.L448:
3429:.\console.c   **** 					dummy = WriteAllEEparams();
 12295              		.loc 1 3429 0
 12296 54ba FFF7FEFF 		bl	WriteAllEEparams
 12297 54be 0346     		mov	r3, r0
 12298 54c0 87F8D930 		strb	r3, [r7, #217]
3431:.\console.c   **** 					goto exitpars;
 12299              		.loc 1 3431 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 353


 12300 54c4 02F006B8 		b	.L131
 12301              	.L757:
 12302              		.align	2
 12303              	.L756:
 12304 54c8 0F000000 		.word	actual_cmd+15
 12305 54cc 1E000000 		.word	actual_cmd+30
 12306              	.L446:
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
 12307              		.loc 1 3437 0
 12308 54d0 C148     		ldr	r0, .L758
 12309 54d2 40F20001 		movw	r1, #:lower16:.LC624
 12310 54d6 C0F20001 		movt	r1, #:upper16:.LC624
 12311 54da FFF7FEFF 		bl	strcmp
 12312 54de 0346     		mov	r3, r0
 12313 54e0 002B     		cmp	r3, #0
 12314 54e2 09D0     		beq	.L449
3438:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lminp") == 0))
 12315              		.loc 1 3438 0 discriminator 1
 12316 54e4 BC48     		ldr	r0, .L758
 12317 54e6 40F20001 		movw	r1, #:lower16:.LC625
 12318 54ea C0F20001 		movt	r1, #:upper16:.LC625
 12319 54ee FFF7FEFF 		bl	strcmp
 12320 54f2 0346     		mov	r3, r0
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
 12321              		.loc 1 3437 0 discriminator 1
 12322 54f4 002B     		cmp	r3, #0
 12323 54f6 59D1     		bne	.L450
 12324              	.L449:
3440:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MIN position and press y!");
 12325              		.loc 1 3440 0
 12326 54f8 40F20000 		movw	r0, #:lower16:.LC626
 12327 54fc C0F20000 		movt	r0, #:upper16:.LC626
 12328 5500 FFF7FEFF 		bl	printf
3442:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12329              		.loc 1 3442 0
 12330 5504 4FF00100 		mov	r0, #1
 12331 5508 FFF7FEFF 		bl	ButtonYNChoice
 12332 550c 0346     		mov	r3, r0
 12333 550e 012B     		cmp	r3, #1
 12334 5510 3FD1     		bne	.L451
3444:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute pan sensor limit min raw 	*/
 12335              		.loc 1 3444 0
 12336 5512 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12337 5516 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12338 551a 4FF00002 		mov	r2, #0
 12339 551e 5A86     		strh	r2, [r3, #50]	@ movhi
3447:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12340              		.loc 1 3447 0
 12341 5520 40F20000 		movw	r0, #:lower16:.LC620
 12342 5524 C0F20000 		movt	r0, #:upper16:.LC620
 12343 5528 FFF7FEFF 		bl	puts
3448:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 12344              		.loc 1 3448 0
 12345 552c 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 12346 5530 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 12347 5534 FFF7FEFF 		bl	statistics_start
3451:.\console.c   **** 						CyDelay(1000);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 354


 12348              		.loc 1 3451 0
 12349 5538 4FF47A70 		mov	r0, #1000
 12350 553c FFF7FEFF 		bl	CyDelay
3454:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 12351              		.loc 1 3454 0
 12352 5540 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 12353 5544 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 12354 5548 FFF7FEFF 		bl	statistics_stop
3455:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12355              		.loc 1 3455 0
 12356 554c 40F20000 		movw	r0, #:lower16:.LC621
 12357 5550 C0F20000 		movt	r0, #:upper16:.LC621
 12358 5554 FFF7FEFF 		bl	puts
3458:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = (int16)pan_absolute_sensor_stat.mean;														
 12359              		.loc 1 3458 0
 12360 5558 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 12361 555c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 12362 5560 5B68     		ldr	r3, [r3, #4]	@ float
 12363 5562 1846     		mov	r0, r3
 12364 5564 FFF7FEFF 		bl	__aeabi_f2iz
 12365 5568 0346     		mov	r3, r0
 12366 556a 9AB2     		uxth	r2, r3
 12367 556c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12368 5570 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12369 5574 5A86     		strh	r2, [r3, #50]	@ movhi
3459:.\console.c   **** 						printf(STR_REM_PMIN, (int16)pan_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Senso
 12370              		.loc 1 3459 0
 12371 5576 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12372 557a C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12373 557e 5B8E     		ldrh	r3, [r3, #50]
 12374 5580 1BB2     		sxth	r3, r3
 12375 5582 40F20000 		movw	r0, #:lower16:.LC627
 12376 5586 C0F20000 		movt	r0, #:upper16:.LC627
 12377 558a 1946     		mov	r1, r3
 12378 558c FFF7FEFF 		bl	printf
 12379 5590 05E0     		b	.L452
 12380              	.L451:
3463:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 12381              		.loc 1 3463 0
 12382 5592 40F20000 		movw	r0, #:lower16:.LC623
 12383 5596 C0F20000 		movt	r0, #:upper16:.LC623
 12384 559a FFF7FEFF 		bl	puts
 12385              	.L452:
3467:.\console.c   **** 					dummy = WriteAllEEparams();
 12386              		.loc 1 3467 0
 12387 559e FFF7FEFF 		bl	WriteAllEEparams
 12388 55a2 0346     		mov	r3, r0
 12389 55a4 87F8D930 		strb	r3, [r7, #217]
3469:.\console.c   **** 					goto exitpars;
 12390              		.loc 1 3469 0
 12391 55a8 01F094BF 		b	.L131
 12392              	.L450:
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
 12393              		.loc 1 3475 0
 12394 55ac 8A48     		ldr	r0, .L758
 12395 55ae 40F20001 		movw	r1, #:lower16:.LC628
 12396 55b2 C0F20001 		movt	r1, #:upper16:.LC628
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 355


 12397 55b6 FFF7FEFF 		bl	strcmp
 12398 55ba 0346     		mov	r3, r0
 12399 55bc 002B     		cmp	r3, #0
 12400 55be 09D0     		beq	.L453
3476:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxp") == 0))
 12401              		.loc 1 3476 0 discriminator 1
 12402 55c0 8548     		ldr	r0, .L758
 12403 55c2 40F20001 		movw	r1, #:lower16:.LC629
 12404 55c6 C0F20001 		movt	r1, #:upper16:.LC629
 12405 55ca FFF7FEFF 		bl	strcmp
 12406 55ce 0346     		mov	r3, r0
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
 12407              		.loc 1 3475 0 discriminator 1
 12408 55d0 002B     		cmp	r3, #0
 12409 55d2 59D1     		bne	.L454
 12410              	.L453:
3478:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MAX position and press y!");
 12411              		.loc 1 3478 0
 12412 55d4 40F20000 		movw	r0, #:lower16:.LC630
 12413 55d8 C0F20000 		movt	r0, #:upper16:.LC630
 12414 55dc FFF7FEFF 		bl	printf
3480:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12415              		.loc 1 3480 0
 12416 55e0 4FF00100 		mov	r0, #1
 12417 55e4 FFF7FEFF 		bl	ButtonYNChoice
 12418 55e8 0346     		mov	r3, r0
 12419 55ea 012B     		cmp	r3, #1
 12420 55ec 3FD1     		bne	.L455
3482:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute pan sensor limit max raw 	*/
 12421              		.loc 1 3482 0
 12422 55ee 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12423 55f2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12424 55f6 4FF00002 		mov	r2, #0
 12425 55fa 1A86     		strh	r2, [r3, #48]	@ movhi
3485:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12426              		.loc 1 3485 0
 12427 55fc 40F20000 		movw	r0, #:lower16:.LC620
 12428 5600 C0F20000 		movt	r0, #:upper16:.LC620
 12429 5604 FFF7FEFF 		bl	puts
3486:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 12430              		.loc 1 3486 0
 12431 5608 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 12432 560c C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 12433 5610 FFF7FEFF 		bl	statistics_start
3489:.\console.c   **** 						CyDelay(1000);
 12434              		.loc 1 3489 0
 12435 5614 4FF47A70 		mov	r0, #1000
 12436 5618 FFF7FEFF 		bl	CyDelay
3492:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 12437              		.loc 1 3492 0
 12438 561c 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 12439 5620 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 12440 5624 FFF7FEFF 		bl	statistics_stop
3493:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12441              		.loc 1 3493 0
 12442 5628 40F20000 		movw	r0, #:lower16:.LC621
 12443 562c C0F20000 		movt	r0, #:upper16:.LC621
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 356


 12444 5630 FFF7FEFF 		bl	puts
3496:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = (int16)pan_absolute_sensor_stat.mean;
 12445              		.loc 1 3496 0
 12446 5634 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 12447 5638 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 12448 563c 5B68     		ldr	r3, [r3, #4]	@ float
 12449 563e 1846     		mov	r0, r3
 12450 5640 FFF7FEFF 		bl	__aeabi_f2iz
 12451 5644 0346     		mov	r3, r0
 12452 5646 9AB2     		uxth	r2, r3
 12453 5648 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12454 564c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12455 5650 1A86     		strh	r2, [r3, #48]	@ movhi
3497:.\console.c   **** 						printf(STR_REM_PMAX, (int16)pan_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Senso
 12456              		.loc 1 3497 0
 12457 5652 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12458 5656 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12459 565a 1B8E     		ldrh	r3, [r3, #48]
 12460 565c 1BB2     		sxth	r3, r3
 12461 565e 40F20000 		movw	r0, #:lower16:.LC631
 12462 5662 C0F20000 		movt	r0, #:upper16:.LC631
 12463 5666 1946     		mov	r1, r3
 12464 5668 FFF7FEFF 		bl	printf
 12465 566c 05E0     		b	.L456
 12466              	.L455:
3501:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 12467              		.loc 1 3501 0
 12468 566e 40F20000 		movw	r0, #:lower16:.LC623
 12469 5672 C0F20000 		movt	r0, #:upper16:.LC623
 12470 5676 FFF7FEFF 		bl	puts
 12471              	.L456:
3505:.\console.c   **** 					dummy = WriteAllEEparams();
 12472              		.loc 1 3505 0
 12473 567a FFF7FEFF 		bl	WriteAllEEparams
 12474 567e 0346     		mov	r3, r0
 12475 5680 87F8D930 		strb	r3, [r7, #217]
3507:.\console.c   **** 					goto exitpars;
 12476              		.loc 1 3507 0
 12477 5684 01F026BF 		b	.L131
 12478              	.L454:
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
 12479              		.loc 1 3513 0
 12480 5688 5348     		ldr	r0, .L758
 12481 568a 40F20001 		movw	r1, #:lower16:.LC632
 12482 568e C0F20001 		movt	r1, #:upper16:.LC632
 12483 5692 FFF7FEFF 		bl	strcmp
 12484 5696 0346     		mov	r3, r0
 12485 5698 002B     		cmp	r3, #0
 12486 569a 09D0     		beq	.L457
3514:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystp") == 0))
 12487              		.loc 1 3514 0 discriminator 1
 12488 569c 4E48     		ldr	r0, .L758
 12489 569e 40F20001 		movw	r1, #:lower16:.LC633
 12490 56a2 C0F20001 		movt	r1, #:upper16:.LC633
 12491 56a6 FFF7FEFF 		bl	strcmp
 12492 56aa 0346     		mov	r3, r0
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 357


 12493              		.loc 1 3513 0 discriminator 1
 12494 56ac 002B     		cmp	r3, #0
 12495 56ae 2ED1     		bne	.L458
 12496              	.L457:
3516:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
 12497              		.loc 1 3516 0
 12498 56b0 4A48     		ldr	r0, .L758+4
 12499 56b2 FFF7FEFF 		bl	atoi
 12500 56b6 0346     		mov	r3, r0
 12501 56b8 A7F8B630 		strh	r3, [r7, #182]	@ movhi
3517:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
 12502              		.loc 1 3517 0
 12503 56bc 4748     		ldr	r0, .L758+4
 12504 56be FFF7FEFF 		bl	atoi
 12505 56c2 0346     		mov	r3, r0
 12506 56c4 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 12507 56c8 B7F8B630 		ldrh	r3, [r7, #182]
 12508 56cc 642B     		cmp	r3, #100
 12509 56ce 16D8     		bhi	.L459
3519:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
 12510              		.loc 1 3519 0
 12511 56d0 B7F8B620 		ldrh	r2, [r7, #182]
 12512 56d4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12513 56d8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12514 56dc 9A86     		strh	r2, [r3, #52]	@ movhi
3522:.\console.c   **** 						dummy = WriteAllEEparams();
 12515              		.loc 1 3522 0
 12516 56de FFF7FEFF 		bl	WriteAllEEparams
 12517 56e2 0346     		mov	r3, r0
 12518 56e4 87F8D930 		strb	r3, [r7, #217]
3523:.\console.c   **** 						printf(STR_REM_PLHY, (uint16)raw_limit_hyst);   /* REM: pan axis absolute sensor limit hyster
 12519              		.loc 1 3523 0
 12520 56e8 B7F8B630 		ldrh	r3, [r7, #182]
 12521 56ec 40F20000 		movw	r0, #:lower16:.LC634
 12522 56f0 C0F20000 		movt	r0, #:upper16:.LC634
 12523 56f4 1946     		mov	r1, r3
 12524 56f6 FFF7FEFF 		bl	printf
3529:.\console.c   **** 					goto exitpars;
 12525              		.loc 1 3529 0
 12526 56fa 01F0EBBE 		b	.L131
 12527              	.L459:
3527:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12528              		.loc 1 3527 0
 12529 56fe 40F20000 		movw	r0, #:lower16:.LC450
 12530 5702 C0F20000 		movt	r0, #:upper16:.LC450
 12531 5706 FFF7FEFF 		bl	printf
3529:.\console.c   **** 					goto exitpars;
 12532              		.loc 1 3529 0
 12533 570a 01F0E3BE 		b	.L131
 12534              	.L458:
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
 12535              		.loc 1 3535 0
 12536 570e 3248     		ldr	r0, .L758
 12537 5710 40F20001 		movw	r1, #:lower16:.LC483
 12538 5714 C0F20001 		movt	r1, #:upper16:.LC483
 12539 5718 FFF7FEFF 		bl	strcmp
 12540 571c 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 358


 12541 571e 002B     		cmp	r3, #0
 12542 5720 09D0     		beq	.L461
3536:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiop") == 0))
 12543              		.loc 1 3536 0 discriminator 1
 12544 5722 2D48     		ldr	r0, .L758
 12545 5724 40F20001 		movw	r1, #:lower16:.LC484
 12546 5728 C0F20001 		movt	r1, #:upper16:.LC484
 12547 572c FFF7FEFF 		bl	strcmp
 12548 5730 0346     		mov	r3, r0
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
 12549              		.loc 1 3535 0 discriminator 1
 12550 5732 002B     		cmp	r3, #0
 12551 5734 54D1     		bne	.L462
 12552              	.L461:
3538:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
 12553              		.loc 1 3538 0
 12554 5736 2948     		ldr	r0, .L758+4
 12555 5738 FFF7FEFF 		bl	atof
 12556 573c 0246     		mov	r2, r0
 12557 573e 0B46     		mov	r3, r1
 12558 5740 1046     		mov	r0, r2
 12559 5742 1946     		mov	r1, r3
 12560 5744 FFF7FEFF 		bl	__aeabi_d2f
 12561 5748 0346     		mov	r3, r0
 12562 574a C7F8B830 		str	r3, [r7, #184]	@ float
 12563 574e D7F8B800 		ldr	r0, [r7, #184]	@ float
 12564 5752 4FF48041 		mov	r1, #16384
 12565 5756 CCF21C61 		movt	r1, 50716
 12566 575a FFF7FEFF 		bl	__aeabi_fcmpge
 12567 575e 0346     		mov	r3, r0
 12568 5760 002B     		cmp	r3, #0
 12569 5762 30D0     		beq	.L463
 12570              	.L658:
3539:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
 12571              		.loc 1 3539 0
 12572 5764 1D48     		ldr	r0, .L758+4
 12573 5766 FFF7FEFF 		bl	atof
 12574 576a 0246     		mov	r2, r0
 12575 576c 0B46     		mov	r3, r1
 12576 576e 1046     		mov	r0, r2
 12577 5770 1946     		mov	r1, r3
 12578 5772 FFF7FEFF 		bl	__aeabi_d2f
 12579 5776 0346     		mov	r3, r0
 12580 5778 C7F8B830 		str	r3, [r7, #184]	@ float
 12581 577c D7F8B800 		ldr	r0, [r7, #184]	@ float
 12582 5780 4FF48041 		mov	r1, #16384
 12583 5784 C4F21C61 		movt	r1, 17948
 12584 5788 FFF7FEFF 		bl	__aeabi_fcmple
 12585 578c 0346     		mov	r3, r0
 12586 578e 002B     		cmp	r3, #0
 12587 5790 19D0     		beq	.L463
 12588              	.L659:
3541:.\console.c   **** 						pan_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
 12589              		.loc 1 3541 0
 12590 5792 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12591 5796 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12592 579a D7F8B820 		ldr	r2, [r7, #184]	@ float
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 359


 12593 579e 9A63     		str	r2, [r3, #56]	@ float
3544:.\console.c   **** 						dummy = WriteAllEEparams();
 12594              		.loc 1 3544 0
 12595 57a0 FFF7FEFF 		bl	WriteAllEEparams
 12596 57a4 0346     		mov	r3, r0
 12597 57a6 87F8D930 		strb	r3, [r7, #217]
3545:.\console.c   **** 						printf(STR_REM_PEAR, (float)step_abs_ratio);   /* REM: pan encoder over absolute sensor ratio
 12598              		.loc 1 3545 0
 12599 57aa D7F8B800 		ldr	r0, [r7, #184]	@ float
 12600 57ae FFF7FEFF 		bl	__aeabi_f2d
 12601 57b2 0246     		mov	r2, r0
 12602 57b4 0B46     		mov	r3, r1
 12603 57b6 40F20000 		movw	r0, #:lower16:.LC635
 12604 57ba C0F20000 		movt	r0, #:upper16:.LC635
 12605 57be FFF7FEFF 		bl	printf
3551:.\console.c   **** 					goto exitpars;
 12606              		.loc 1 3551 0
 12607 57c2 01F087BE 		b	.L131
 12608              	.L463:
3549:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12609              		.loc 1 3549 0
 12610 57c6 40F20000 		movw	r0, #:lower16:.LC450
 12611 57ca C0F20000 		movt	r0, #:upper16:.LC450
 12612 57ce FFF7FEFF 		bl	printf
3551:.\console.c   **** 					goto exitpars;
 12613              		.loc 1 3551 0
 12614 57d2 01F07FBE 		b	.L131
 12615              	.L759:
 12616 57d6 00BF     		.align	2
 12617              	.L758:
 12618 57d8 0F000000 		.word	actual_cmd+15
 12619 57dc 1E000000 		.word	actual_cmd+30
 12620              	.L462:
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
 12621              		.loc 1 3557 0
 12622 57e0 B148     		ldr	r0, .L760
 12623 57e2 40F20001 		movw	r1, #:lower16:.LC636
 12624 57e6 C0F20001 		movt	r1, #:upper16:.LC636
 12625 57ea FFF7FEFF 		bl	strcmp
 12626 57ee 0346     		mov	r3, r0
 12627 57f0 002B     		cmp	r3, #0
 12628 57f2 09D0     		beq	.L467
3558:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lct") == 0))
 12629              		.loc 1 3558 0 discriminator 1
 12630 57f4 AC48     		ldr	r0, .L760
 12631 57f6 40F20001 		movw	r1, #:lower16:.LC637
 12632 57fa C0F20001 		movt	r1, #:upper16:.LC637
 12633 57fe FFF7FEFF 		bl	strcmp
 12634 5802 0346     		mov	r3, r0
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
 12635              		.loc 1 3557 0 discriminator 1
 12636 5804 002B     		cmp	r3, #0
 12637 5806 2FD1     		bne	.L468
 12638              	.L467:
3560:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
 12639              		.loc 1 3560 0
 12640 5808 A848     		ldr	r0, .L760+4
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 360


 12641 580a FFF7FEFF 		bl	atoi
 12642 580e 0346     		mov	r3, r0
 12643 5810 87F8B430 		strb	r3, [r7, #180]
3561:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
 12644              		.loc 1 3561 0
 12645 5814 A548     		ldr	r0, .L760+4
 12646 5816 FFF7FEFF 		bl	atoi
 12647 581a 0346     		mov	r3, r0
 12648 581c 87F8B430 		strb	r3, [r7, #180]
 12649 5820 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 12650 5824 012B     		cmp	r3, #1
 12651 5826 17D8     		bhi	.L469
3563:.\console.c   **** 						tilt_axis.param.limit_control = limit_control;
 12652              		.loc 1 3563 0
 12653 5828 40F20003 		movw	r3, #:lower16:tilt_axis
 12654 582c C0F20003 		movt	r3, #:upper16:tilt_axis
 12655 5830 97F8B420 		ldrb	r2, [r7, #180]
 12656 5834 83F82D20 		strb	r2, [r3, #45]
3566:.\console.c   **** 						dummy = WriteAllEEparams();
 12657              		.loc 1 3566 0
 12658 5838 FFF7FEFF 		bl	WriteAllEEparams
 12659 583c 0346     		mov	r3, r0
 12660 583e 87F8D930 		strb	r3, [r7, #217]
3567:.\console.c   **** 						printf(STR_REM_STLT, (uint16)limit_control);   /* REM: tilt axis limit control setted to...*/
 12661              		.loc 1 3567 0
 12662 5842 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 12663 5846 40F20000 		movw	r0, #:lower16:.LC638
 12664 584a C0F20000 		movt	r0, #:upper16:.LC638
 12665 584e 1946     		mov	r1, r3
 12666 5850 FFF7FEFF 		bl	printf
3573:.\console.c   **** 					goto exitpars;
 12667              		.loc 1 3573 0
 12668 5854 01F03EBE 		b	.L131
 12669              	.L469:
3571:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12670              		.loc 1 3571 0
 12671 5858 40F20000 		movw	r0, #:lower16:.LC450
 12672 585c C0F20000 		movt	r0, #:upper16:.LC450
 12673 5860 FFF7FEFF 		bl	printf
3573:.\console.c   **** 					goto exitpars;
 12674              		.loc 1 3573 0
 12675 5864 01F036BE 		b	.L131
 12676              	.L468:
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
 12677              		.loc 1 3579 0
 12678 5868 8F48     		ldr	r0, .L760
 12679 586a 40F20001 		movw	r1, #:lower16:.LC639
 12680 586e C0F20001 		movt	r1, #:upper16:.LC639
 12681 5872 FFF7FEFF 		bl	strcmp
 12682 5876 0346     		mov	r3, r0
 12683 5878 002B     		cmp	r3, #0
 12684 587a 09D0     		beq	.L471
3580:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invt") == 0))
 12685              		.loc 1 3580 0 discriminator 1
 12686 587c 8A48     		ldr	r0, .L760
 12687 587e 40F20001 		movw	r1, #:lower16:.LC640
 12688 5882 C0F20001 		movt	r1, #:upper16:.LC640
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 361


 12689 5886 FFF7FEFF 		bl	strcmp
 12690 588a 0346     		mov	r3, r0
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
 12691              		.loc 1 3579 0 discriminator 1
 12692 588c 002B     		cmp	r3, #0
 12693 588e 2FD1     		bne	.L472
 12694              	.L471:
3582:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
 12695              		.loc 1 3582 0
 12696 5890 8648     		ldr	r0, .L760+4
 12697 5892 FFF7FEFF 		bl	atoi
 12698 5896 0346     		mov	r3, r0
 12699 5898 87F8B530 		strb	r3, [r7, #181]
3583:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
 12700              		.loc 1 3583 0
 12701 589c 8348     		ldr	r0, .L760+4
 12702 589e FFF7FEFF 		bl	atoi
 12703 58a2 0346     		mov	r3, r0
 12704 58a4 87F8B530 		strb	r3, [r7, #181]
 12705 58a8 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 12706 58ac 012B     		cmp	r3, #1
 12707 58ae 17D8     		bhi	.L473
3585:.\console.c   **** 						tilt_absolute_sensor.param.raw_invertion = raw_invertion;
 12708              		.loc 1 3585 0
 12709 58b0 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12710 58b4 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12711 58b8 97F8B520 		ldrb	r2, [r7, #181]
 12712 58bc 83F82C20 		strb	r2, [r3, #44]
3588:.\console.c   **** 						dummy = WriteAllEEparams();
 12713              		.loc 1 3588 0
 12714 58c0 FFF7FEFF 		bl	WriteAllEEparams
 12715 58c4 0346     		mov	r3, r0
 12716 58c6 87F8D930 		strb	r3, [r7, #217]
3589:.\console.c   **** 						printf(STR_REM_SIVT, (uint16)raw_invertion);   /* REM: tilt axis absoluter sensor invertion s
 12717              		.loc 1 3589 0
 12718 58ca 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 12719 58ce 40F20000 		movw	r0, #:lower16:.LC641
 12720 58d2 C0F20000 		movt	r0, #:upper16:.LC641
 12721 58d6 1946     		mov	r1, r3
 12722 58d8 FFF7FEFF 		bl	printf
3595:.\console.c   **** 					goto exitpars;
 12723              		.loc 1 3595 0
 12724 58dc 01F0FABD 		b	.L131
 12725              	.L473:
3593:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12726              		.loc 1 3593 0
 12727 58e0 40F20000 		movw	r0, #:lower16:.LC450
 12728 58e4 C0F20000 		movt	r0, #:upper16:.LC450
 12729 58e8 FFF7FEFF 		bl	printf
3595:.\console.c   **** 					goto exitpars;
 12730              		.loc 1 3595 0
 12731 58ec 01F0F2BD 		b	.L131
 12732              	.L472:
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
 12733              		.loc 1 3601 0
 12734 58f0 6D48     		ldr	r0, .L760
 12735 58f2 40F20001 		movw	r1, #:lower16:.LC642
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 362


 12736 58f6 C0F20001 		movt	r1, #:upper16:.LC642
 12737 58fa FFF7FEFF 		bl	strcmp
 12738 58fe 0346     		mov	r3, r0
 12739 5900 002B     		cmp	r3, #0
 12740 5902 09D0     		beq	.L475
3602:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zt") == 0))
 12741              		.loc 1 3602 0 discriminator 1
 12742 5904 6848     		ldr	r0, .L760
 12743 5906 40F20001 		movw	r1, #:lower16:.LC643
 12744 590a C0F20001 		movt	r1, #:upper16:.LC643
 12745 590e FFF7FEFF 		bl	strcmp
 12746 5912 0346     		mov	r3, r0
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
 12747              		.loc 1 3601 0 discriminator 1
 12748 5914 002B     		cmp	r3, #0
 12749 5916 59D1     		bne	.L476
 12750              	.L475:
3604:.\console.c   **** 					printf("* Warning! Put TILT Axis to zero (HOME) position and press y!");
 12751              		.loc 1 3604 0
 12752 5918 40F20000 		movw	r0, #:lower16:.LC644
 12753 591c C0F20000 		movt	r0, #:upper16:.LC644
 12754 5920 FFF7FEFF 		bl	printf
3606:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12755              		.loc 1 3606 0
 12756 5924 4FF00100 		mov	r0, #1
 12757 5928 FFF7FEFF 		bl	ButtonYNChoice
 12758 592c 0346     		mov	r3, r0
 12759 592e 012B     		cmp	r3, #1
 12760 5930 3FD1     		bne	.L477
3608:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = 0; 		/* reset absolute tilt sensor zero raw 			*/
 12761              		.loc 1 3608 0
 12762 5932 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12763 5936 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12764 593a 4FF00002 		mov	r2, #0
 12765 593e DA85     		strh	r2, [r3, #46]	@ movhi
3611:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12766              		.loc 1 3611 0
 12767 5940 40F20000 		movw	r0, #:lower16:.LC620
 12768 5944 C0F20000 		movt	r0, #:upper16:.LC620
 12769 5948 FFF7FEFF 		bl	puts
3612:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12770              		.loc 1 3612 0
 12771 594c 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12772 5950 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12773 5954 FFF7FEFF 		bl	statistics_start
3615:.\console.c   **** 						CyDelay(1000);
 12774              		.loc 1 3615 0
 12775 5958 4FF47A70 		mov	r0, #1000
 12776 595c FFF7FEFF 		bl	CyDelay
3618:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12777              		.loc 1 3618 0
 12778 5960 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12779 5964 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12780 5968 FFF7FEFF 		bl	statistics_stop
3619:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12781              		.loc 1 3619 0
 12782 596c 40F20000 		movw	r0, #:lower16:.LC621
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 363


 12783 5970 C0F20000 		movt	r0, #:upper16:.LC621
 12784 5974 FFF7FEFF 		bl	puts
3622:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = (int16)tilt_absolute_sensor_stat.mean;
 12785              		.loc 1 3622 0
 12786 5978 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12787 597c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12788 5980 5B68     		ldr	r3, [r3, #4]	@ float
 12789 5982 1846     		mov	r0, r3
 12790 5984 FFF7FEFF 		bl	__aeabi_f2iz
 12791 5988 0346     		mov	r3, r0
 12792 598a 9AB2     		uxth	r2, r3
 12793 598c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12794 5990 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12795 5994 DA85     		strh	r2, [r3, #46]	@ movhi
3623:.\console.c   **** 						printf(STR_REM_TASZ, (int16)tilt_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Ze
 12796              		.loc 1 3623 0
 12797 5996 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12798 599a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12799 599e DB8D     		ldrh	r3, [r3, #46]
 12800 59a0 1BB2     		sxth	r3, r3
 12801 59a2 40F20000 		movw	r0, #:lower16:.LC645
 12802 59a6 C0F20000 		movt	r0, #:upper16:.LC645
 12803 59aa 1946     		mov	r1, r3
 12804 59ac FFF7FEFF 		bl	printf
 12805 59b0 05E0     		b	.L478
 12806              	.L477:
3627:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12807              		.loc 1 3627 0
 12808 59b2 40F20000 		movw	r0, #:lower16:.LC646
 12809 59b6 C0F20000 		movt	r0, #:upper16:.LC646
 12810 59ba FFF7FEFF 		bl	puts
 12811              	.L478:
3631:.\console.c   **** 					dummy = WriteAllEEparams();
 12812              		.loc 1 3631 0
 12813 59be FFF7FEFF 		bl	WriteAllEEparams
 12814 59c2 0346     		mov	r3, r0
 12815 59c4 87F8D930 		strb	r3, [r7, #217]
3633:.\console.c   **** 					goto exitpars;
 12816              		.loc 1 3633 0
 12817 59c8 01F084BD 		b	.L131
 12818              	.L476:
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
 12819              		.loc 1 3639 0
 12820 59cc 3648     		ldr	r0, .L760
 12821 59ce 40F20001 		movw	r1, #:lower16:.LC647
 12822 59d2 C0F20001 		movt	r1, #:upper16:.LC647
 12823 59d6 FFF7FEFF 		bl	strcmp
 12824 59da 0346     		mov	r3, r0
 12825 59dc 002B     		cmp	r3, #0
 12826 59de 09D0     		beq	.L479
3640:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmint") == 0))
 12827              		.loc 1 3640 0 discriminator 1
 12828 59e0 3148     		ldr	r0, .L760
 12829 59e2 40F20001 		movw	r1, #:lower16:.LC648
 12830 59e6 C0F20001 		movt	r1, #:upper16:.LC648
 12831 59ea FFF7FEFF 		bl	strcmp
 12832 59ee 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 364


3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
 12833              		.loc 1 3639 0 discriminator 1
 12834 59f0 002B     		cmp	r3, #0
 12835 59f2 5DD1     		bne	.L480
 12836              	.L479:
3642:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MIN position and press y!");
 12837              		.loc 1 3642 0
 12838 59f4 40F20000 		movw	r0, #:lower16:.LC649
 12839 59f8 C0F20000 		movt	r0, #:upper16:.LC649
 12840 59fc FFF7FEFF 		bl	printf
3644:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12841              		.loc 1 3644 0
 12842 5a00 4FF00100 		mov	r0, #1
 12843 5a04 FFF7FEFF 		bl	ButtonYNChoice
 12844 5a08 0346     		mov	r3, r0
 12845 5a0a 012B     		cmp	r3, #1
 12846 5a0c 3FD1     		bne	.L481
3646:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute tilt sensor limit min raw 	
 12847              		.loc 1 3646 0
 12848 5a0e 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12849 5a12 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12850 5a16 4FF00002 		mov	r2, #0
 12851 5a1a 5A86     		strh	r2, [r3, #50]	@ movhi
3649:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12852              		.loc 1 3649 0
 12853 5a1c 40F20000 		movw	r0, #:lower16:.LC620
 12854 5a20 C0F20000 		movt	r0, #:upper16:.LC620
 12855 5a24 FFF7FEFF 		bl	puts
3650:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12856              		.loc 1 3650 0
 12857 5a28 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12858 5a2c C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12859 5a30 FFF7FEFF 		bl	statistics_start
3653:.\console.c   **** 						CyDelay(1000);
 12860              		.loc 1 3653 0
 12861 5a34 4FF47A70 		mov	r0, #1000
 12862 5a38 FFF7FEFF 		bl	CyDelay
3656:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12863              		.loc 1 3656 0
 12864 5a3c 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12865 5a40 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12866 5a44 FFF7FEFF 		bl	statistics_stop
3657:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12867              		.loc 1 3657 0
 12868 5a48 40F20000 		movw	r0, #:lower16:.LC621
 12869 5a4c C0F20000 		movt	r0, #:upper16:.LC621
 12870 5a50 FFF7FEFF 		bl	puts
3660:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = (int16)tilt_absolute_sensor_stat.mean;												
 12871              		.loc 1 3660 0
 12872 5a54 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12873 5a58 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12874 5a5c 5B68     		ldr	r3, [r3, #4]	@ float
 12875 5a5e 1846     		mov	r0, r3
 12876 5a60 FFF7FEFF 		bl	__aeabi_f2iz
 12877 5a64 0346     		mov	r3, r0
 12878 5a66 9AB2     		uxth	r2, r3
 12879 5a68 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 365


 12880 5a6c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12881 5a70 5A86     		strh	r2, [r3, #50]	@ movhi
3661:.\console.c   **** 						printf(STR_REM_TMIN, (int16)tilt_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Sens
 12882              		.loc 1 3661 0
 12883 5a72 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12884 5a76 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12885 5a7a 5B8E     		ldrh	r3, [r3, #50]
 12886 5a7c 1BB2     		sxth	r3, r3
 12887 5a7e 40F20000 		movw	r0, #:lower16:.LC650
 12888 5a82 C0F20000 		movt	r0, #:upper16:.LC650
 12889 5a86 1946     		mov	r1, r3
 12890 5a88 FFF7FEFF 		bl	printf
 12891 5a8c 05E0     		b	.L482
 12892              	.L481:
3665:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12893              		.loc 1 3665 0
 12894 5a8e 40F20000 		movw	r0, #:lower16:.LC646
 12895 5a92 C0F20000 		movt	r0, #:upper16:.LC646
 12896 5a96 FFF7FEFF 		bl	puts
 12897              	.L482:
3669:.\console.c   **** 					dummy = WriteAllEEparams();
 12898              		.loc 1 3669 0
 12899 5a9a FFF7FEFF 		bl	WriteAllEEparams
 12900 5a9e 0346     		mov	r3, r0
 12901 5aa0 87F8D930 		strb	r3, [r7, #217]
3671:.\console.c   **** 					goto exitpars;
 12902              		.loc 1 3671 0
 12903 5aa4 01F016BD 		b	.L131
 12904              	.L761:
 12905              		.align	2
 12906              	.L760:
 12907 5aa8 0F000000 		.word	actual_cmd+15
 12908 5aac 1E000000 		.word	actual_cmd+30
 12909              	.L480:
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
 12910              		.loc 1 3677 0
 12911 5ab0 D248     		ldr	r0, .L762
 12912 5ab2 40F20001 		movw	r1, #:lower16:.LC651
 12913 5ab6 C0F20001 		movt	r1, #:upper16:.LC651
 12914 5aba FFF7FEFF 		bl	strcmp
 12915 5abe 0346     		mov	r3, r0
 12916 5ac0 002B     		cmp	r3, #0
 12917 5ac2 09D0     		beq	.L483
3678:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxt") == 0))
 12918              		.loc 1 3678 0 discriminator 1
 12919 5ac4 CD48     		ldr	r0, .L762
 12920 5ac6 40F20001 		movw	r1, #:lower16:.LC652
 12921 5aca C0F20001 		movt	r1, #:upper16:.LC652
 12922 5ace FFF7FEFF 		bl	strcmp
 12923 5ad2 0346     		mov	r3, r0
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
 12924              		.loc 1 3677 0 discriminator 1
 12925 5ad4 002B     		cmp	r3, #0
 12926 5ad6 59D1     		bne	.L484
 12927              	.L483:
3680:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MAX position and press y!");
 12928              		.loc 1 3680 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 366


 12929 5ad8 40F20000 		movw	r0, #:lower16:.LC653
 12930 5adc C0F20000 		movt	r0, #:upper16:.LC653
 12931 5ae0 FFF7FEFF 		bl	printf
3682:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12932              		.loc 1 3682 0
 12933 5ae4 4FF00100 		mov	r0, #1
 12934 5ae8 FFF7FEFF 		bl	ButtonYNChoice
 12935 5aec 0346     		mov	r3, r0
 12936 5aee 012B     		cmp	r3, #1
 12937 5af0 3FD1     		bne	.L485
3684:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute tilt sensor limit max raw 	
 12938              		.loc 1 3684 0
 12939 5af2 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12940 5af6 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12941 5afa 4FF00002 		mov	r2, #0
 12942 5afe 1A86     		strh	r2, [r3, #48]	@ movhi
3687:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12943              		.loc 1 3687 0
 12944 5b00 40F20000 		movw	r0, #:lower16:.LC620
 12945 5b04 C0F20000 		movt	r0, #:upper16:.LC620
 12946 5b08 FFF7FEFF 		bl	puts
3688:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12947              		.loc 1 3688 0
 12948 5b0c 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12949 5b10 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12950 5b14 FFF7FEFF 		bl	statistics_start
3691:.\console.c   **** 						CyDelay(1000);
 12951              		.loc 1 3691 0
 12952 5b18 4FF47A70 		mov	r0, #1000
 12953 5b1c FFF7FEFF 		bl	CyDelay
3694:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12954              		.loc 1 3694 0
 12955 5b20 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12956 5b24 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12957 5b28 FFF7FEFF 		bl	statistics_stop
3695:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12958              		.loc 1 3695 0
 12959 5b2c 40F20000 		movw	r0, #:lower16:.LC621
 12960 5b30 C0F20000 		movt	r0, #:upper16:.LC621
 12961 5b34 FFF7FEFF 		bl	puts
3698:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = (int16)tilt_absolute_sensor_stat.mean;
 12962              		.loc 1 3698 0
 12963 5b38 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12964 5b3c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12965 5b40 5B68     		ldr	r3, [r3, #4]	@ float
 12966 5b42 1846     		mov	r0, r3
 12967 5b44 FFF7FEFF 		bl	__aeabi_f2iz
 12968 5b48 0346     		mov	r3, r0
 12969 5b4a 9AB2     		uxth	r2, r3
 12970 5b4c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12971 5b50 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12972 5b54 1A86     		strh	r2, [r3, #48]	@ movhi
3699:.\console.c   **** 						printf(STR_REM_TMAX, (int16)tilt_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Sens
 12973              		.loc 1 3699 0
 12974 5b56 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12975 5b5a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12976 5b5e 1B8E     		ldrh	r3, [r3, #48]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 367


 12977 5b60 1BB2     		sxth	r3, r3
 12978 5b62 40F20000 		movw	r0, #:lower16:.LC654
 12979 5b66 C0F20000 		movt	r0, #:upper16:.LC654
 12980 5b6a 1946     		mov	r1, r3
 12981 5b6c FFF7FEFF 		bl	printf
 12982 5b70 05E0     		b	.L486
 12983              	.L485:
3703:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12984              		.loc 1 3703 0
 12985 5b72 40F20000 		movw	r0, #:lower16:.LC646
 12986 5b76 C0F20000 		movt	r0, #:upper16:.LC646
 12987 5b7a FFF7FEFF 		bl	puts
 12988              	.L486:
3707:.\console.c   **** 					dummy = WriteAllEEparams();
 12989              		.loc 1 3707 0
 12990 5b7e FFF7FEFF 		bl	WriteAllEEparams
 12991 5b82 0346     		mov	r3, r0
 12992 5b84 87F8D930 		strb	r3, [r7, #217]
3709:.\console.c   **** 					goto exitpars;
 12993              		.loc 1 3709 0
 12994 5b88 01F0A4BC 		b	.L131
 12995              	.L484:
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
 12996              		.loc 1 3715 0
 12997 5b8c 9B48     		ldr	r0, .L762
 12998 5b8e 40F20001 		movw	r1, #:lower16:.LC655
 12999 5b92 C0F20001 		movt	r1, #:upper16:.LC655
 13000 5b96 FFF7FEFF 		bl	strcmp
 13001 5b9a 0346     		mov	r3, r0
 13002 5b9c 002B     		cmp	r3, #0
 13003 5b9e 09D0     		beq	.L487
3716:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystt") == 0))
 13004              		.loc 1 3716 0 discriminator 1
 13005 5ba0 9648     		ldr	r0, .L762
 13006 5ba2 40F20001 		movw	r1, #:lower16:.LC656
 13007 5ba6 C0F20001 		movt	r1, #:upper16:.LC656
 13008 5baa FFF7FEFF 		bl	strcmp
 13009 5bae 0346     		mov	r3, r0
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
 13010              		.loc 1 3715 0 discriminator 1
 13011 5bb0 002B     		cmp	r3, #0
 13012 5bb2 2ED1     		bne	.L488
 13013              	.L487:
3718:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
 13014              		.loc 1 3718 0
 13015 5bb4 9248     		ldr	r0, .L762+4
 13016 5bb6 FFF7FEFF 		bl	atoi
 13017 5bba 0346     		mov	r3, r0
 13018 5bbc A7F8B630 		strh	r3, [r7, #182]	@ movhi
3719:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
 13019              		.loc 1 3719 0
 13020 5bc0 8F48     		ldr	r0, .L762+4
 13021 5bc2 FFF7FEFF 		bl	atoi
 13022 5bc6 0346     		mov	r3, r0
 13023 5bc8 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 13024 5bcc B7F8B630 		ldrh	r3, [r7, #182]
 13025 5bd0 642B     		cmp	r3, #100
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 368


 13026 5bd2 16D8     		bhi	.L489
3721:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
 13027              		.loc 1 3721 0
 13028 5bd4 B7F8B620 		ldrh	r2, [r7, #182]
 13029 5bd8 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13030 5bdc C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13031 5be0 9A86     		strh	r2, [r3, #52]	@ movhi
3724:.\console.c   **** 						dummy = WriteAllEEparams();
 13032              		.loc 1 3724 0
 13033 5be2 FFF7FEFF 		bl	WriteAllEEparams
 13034 5be6 0346     		mov	r3, r0
 13035 5be8 87F8D930 		strb	r3, [r7, #217]
3725:.\console.c   **** 						printf(STR_REM_TLHY, (uint16)raw_limit_hyst);   /* REM: tilt axis absolute sensor limit hyste
 13036              		.loc 1 3725 0
 13037 5bec B7F8B630 		ldrh	r3, [r7, #182]
 13038 5bf0 40F20000 		movw	r0, #:lower16:.LC657
 13039 5bf4 C0F20000 		movt	r0, #:upper16:.LC657
 13040 5bf8 1946     		mov	r1, r3
 13041 5bfa FFF7FEFF 		bl	printf
3731:.\console.c   **** 					goto exitpars;
 13042              		.loc 1 3731 0
 13043 5bfe 01F069BC 		b	.L131
 13044              	.L489:
3729:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13045              		.loc 1 3729 0
 13046 5c02 40F20000 		movw	r0, #:lower16:.LC450
 13047 5c06 C0F20000 		movt	r0, #:upper16:.LC450
 13048 5c0a FFF7FEFF 		bl	printf
3731:.\console.c   **** 					goto exitpars;
 13049              		.loc 1 3731 0
 13050 5c0e 01F061BC 		b	.L131
 13051              	.L488:
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
 13052              		.loc 1 3737 0
 13053 5c12 7A48     		ldr	r0, .L762
 13054 5c14 40F20001 		movw	r1, #:lower16:.LC492
 13055 5c18 C0F20001 		movt	r1, #:upper16:.LC492
 13056 5c1c FFF7FEFF 		bl	strcmp
 13057 5c20 0346     		mov	r3, r0
 13058 5c22 002B     		cmp	r3, #0
 13059 5c24 09D0     		beq	.L491
3738:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiot") == 0))
 13060              		.loc 1 3738 0 discriminator 1
 13061 5c26 7548     		ldr	r0, .L762
 13062 5c28 40F20001 		movw	r1, #:lower16:.LC493
 13063 5c2c C0F20001 		movt	r1, #:upper16:.LC493
 13064 5c30 FFF7FEFF 		bl	strcmp
 13065 5c34 0346     		mov	r3, r0
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
 13066              		.loc 1 3737 0 discriminator 1
 13067 5c36 002B     		cmp	r3, #0
 13068 5c38 4FD1     		bne	.L492
 13069              	.L491:
3740:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
 13070              		.loc 1 3740 0
 13071 5c3a 7148     		ldr	r0, .L762+4
 13072 5c3c FFF7FEFF 		bl	atof
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 369


 13073 5c40 0246     		mov	r2, r0
 13074 5c42 0B46     		mov	r3, r1
 13075 5c44 1046     		mov	r0, r2
 13076 5c46 1946     		mov	r1, r3
 13077 5c48 FFF7FEFF 		bl	__aeabi_d2f
 13078 5c4c 0346     		mov	r3, r0
 13079 5c4e C7F8B830 		str	r3, [r7, #184]	@ float
 13080 5c52 D7F8B800 		ldr	r0, [r7, #184]	@ float
 13081 5c56 4FF48041 		mov	r1, #16384
 13082 5c5a CCF21C61 		movt	r1, 50716
 13083 5c5e FFF7FEFF 		bl	__aeabi_fcmpge
 13084 5c62 0346     		mov	r3, r0
 13085 5c64 002B     		cmp	r3, #0
 13086 5c66 30D0     		beq	.L493
 13087              	.L660:
3741:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
 13088              		.loc 1 3741 0
 13089 5c68 6548     		ldr	r0, .L762+4
 13090 5c6a FFF7FEFF 		bl	atof
 13091 5c6e 0246     		mov	r2, r0
 13092 5c70 0B46     		mov	r3, r1
 13093 5c72 1046     		mov	r0, r2
 13094 5c74 1946     		mov	r1, r3
 13095 5c76 FFF7FEFF 		bl	__aeabi_d2f
 13096 5c7a 0346     		mov	r3, r0
 13097 5c7c C7F8B830 		str	r3, [r7, #184]	@ float
 13098 5c80 D7F8B800 		ldr	r0, [r7, #184]	@ float
 13099 5c84 4FF48041 		mov	r1, #16384
 13100 5c88 C4F21C61 		movt	r1, 17948
 13101 5c8c FFF7FEFF 		bl	__aeabi_fcmple
 13102 5c90 0346     		mov	r3, r0
 13103 5c92 002B     		cmp	r3, #0
 13104 5c94 19D0     		beq	.L493
 13105              	.L661:
3743:.\console.c   **** 						tilt_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
 13106              		.loc 1 3743 0
 13107 5c96 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13108 5c9a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13109 5c9e D7F8B820 		ldr	r2, [r7, #184]	@ float
 13110 5ca2 9A63     		str	r2, [r3, #56]	@ float
3746:.\console.c   **** 						dummy = WriteAllEEparams();
 13111              		.loc 1 3746 0
 13112 5ca4 FFF7FEFF 		bl	WriteAllEEparams
 13113 5ca8 0346     		mov	r3, r0
 13114 5caa 87F8D930 		strb	r3, [r7, #217]
3747:.\console.c   **** 						printf(STR_REM_TEAR, (float)step_abs_ratio);   /* REM: tilt encoder over absolute sensor rati
 13115              		.loc 1 3747 0
 13116 5cae D7F8B800 		ldr	r0, [r7, #184]	@ float
 13117 5cb2 FFF7FEFF 		bl	__aeabi_f2d
 13118 5cb6 0246     		mov	r2, r0
 13119 5cb8 0B46     		mov	r3, r1
 13120 5cba 40F20000 		movw	r0, #:lower16:.LC658
 13121 5cbe C0F20000 		movt	r0, #:upper16:.LC658
 13122 5cc2 FFF7FEFF 		bl	printf
3753:.\console.c   **** 					goto exitpars;
 13123              		.loc 1 3753 0
 13124 5cc6 01F005BC 		b	.L131
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 370


 13125              	.L493:
3751:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13126              		.loc 1 3751 0
 13127 5cca 40F20000 		movw	r0, #:lower16:.LC450
 13128 5cce C0F20000 		movt	r0, #:upper16:.LC450
 13129 5cd2 FFF7FEFF 		bl	printf
3753:.\console.c   **** 					goto exitpars;
 13130              		.loc 1 3753 0
 13131 5cd6 01F0FDBB 		b	.L131
 13132              	.L492:
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
 13133              		.loc 1 3759 0
 13134 5cda 4848     		ldr	r0, .L762
 13135 5cdc 40F20001 		movw	r1, #:lower16:.LC659
 13136 5ce0 C0F20001 		movt	r1, #:upper16:.LC659
 13137 5ce4 FFF7FEFF 		bl	strcmp
 13138 5ce8 0346     		mov	r3, r0
 13139 5cea 002B     		cmp	r3, #0
 13140 5cec 09D0     		beq	.L497
3760:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imuy") == 0))
 13141              		.loc 1 3760 0 discriminator 1
 13142 5cee 4348     		ldr	r0, .L762
 13143 5cf0 40F20001 		movw	r1, #:lower16:.LC660
 13144 5cf4 C0F20001 		movt	r1, #:upper16:.LC660
 13145 5cf8 FFF7FEFF 		bl	strcmp
 13146 5cfc 0346     		mov	r3, r0
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
 13147              		.loc 1 3759 0 discriminator 1
 13148 5cfe 002B     		cmp	r3, #0
 13149 5d00 33D1     		bne	.L498
 13150              	.L497:
3762:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 13151              		.loc 1 3762 0
 13152 5d02 3F48     		ldr	r0, .L762+4
 13153 5d04 FFF7FEFF 		bl	atoi
 13154 5d08 0346     		mov	r3, r0
 13155 5d0a 87F8F230 		strb	r3, [r7, #242]
3763:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 13156              		.loc 1 3763 0
 13157 5d0e 3C48     		ldr	r0, .L762+4
 13158 5d10 FFF7FEFF 		bl	atoi
 13159 5d14 0346     		mov	r3, r0
 13160 5d16 87F8F230 		strb	r3, [r7, #242]
 13161 5d1a 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 13162 5d1e 012B     		cmp	r3, #1
 13163 5d20 1BD8     		bhi	.L499
3765:.\console.c   **** 						IMU_sensor.param.yaw_invertion = invertion;
 13164              		.loc 1 3765 0
 13165 5d22 40F20003 		movw	r3, #:lower16:IMU_sensor
 13166 5d26 C0F20003 		movt	r3, #:upper16:IMU_sensor
 13167 5d2a 97F8F220 		ldrb	r2, [r7, #242]
 13168 5d2e 83F82420 		strb	r2, [r3, #36]
3768:.\console.c   **** 						dummy = WriteAllEEparams();
 13169              		.loc 1 3768 0
 13170 5d32 FFF7FEFF 		bl	WriteAllEEparams
 13171 5d36 0346     		mov	r3, r0
 13172 5d38 87F8D930 		strb	r3, [r7, #217]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 371


3769:.\console.c   **** 						printf(STR_REM_SINY, (uint16)IMU_sensor.param.yaw_invertion);   /* REM: Invertion Yaw setted 
 13173              		.loc 1 3769 0
 13174 5d3c 40F20003 		movw	r3, #:lower16:IMU_sensor
 13175 5d40 C0F20003 		movt	r3, #:upper16:IMU_sensor
 13176 5d44 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 13177 5d48 40F20000 		movw	r0, #:lower16:.LC661
 13178 5d4c C0F20000 		movt	r0, #:upper16:.LC661
 13179 5d50 1946     		mov	r1, r3
 13180 5d52 FFF7FEFF 		bl	printf
3775:.\console.c   **** 					goto exitpars;
 13181              		.loc 1 3775 0
 13182 5d56 01F0BDBB 		b	.L131
 13183              	.L499:
3773:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13184              		.loc 1 3773 0
 13185 5d5a 40F20000 		movw	r0, #:lower16:.LC450
 13186 5d5e C0F20000 		movt	r0, #:upper16:.LC450
 13187 5d62 FFF7FEFF 		bl	printf
3775:.\console.c   **** 					goto exitpars;
 13188              		.loc 1 3775 0
 13189 5d66 01F0B5BB 		b	.L131
 13190              	.L498:
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
 13191              		.loc 1 3781 0
 13192 5d6a 2448     		ldr	r0, .L762
 13193 5d6c 40F20001 		movw	r1, #:lower16:.LC662
 13194 5d70 C0F20001 		movt	r1, #:upper16:.LC662
 13195 5d74 FFF7FEFF 		bl	strcmp
 13196 5d78 0346     		mov	r3, r0
 13197 5d7a 002B     		cmp	r3, #0
 13198 5d7c 09D0     		beq	.L501
3782:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imup") == 0))
 13199              		.loc 1 3782 0 discriminator 1
 13200 5d7e 1F48     		ldr	r0, .L762
 13201 5d80 40F20001 		movw	r1, #:lower16:.LC663
 13202 5d84 C0F20001 		movt	r1, #:upper16:.LC663
 13203 5d88 FFF7FEFF 		bl	strcmp
 13204 5d8c 0346     		mov	r3, r0
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
 13205              		.loc 1 3781 0 discriminator 1
 13206 5d8e 002B     		cmp	r3, #0
 13207 5d90 38D1     		bne	.L502
 13208              	.L501:
3784:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 13209              		.loc 1 3784 0
 13210 5d92 1B48     		ldr	r0, .L762+4
 13211 5d94 FFF7FEFF 		bl	atoi
 13212 5d98 0346     		mov	r3, r0
 13213 5d9a 87F8F230 		strb	r3, [r7, #242]
3785:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 13214              		.loc 1 3785 0
 13215 5d9e 1848     		ldr	r0, .L762+4
 13216 5da0 FFF7FEFF 		bl	atoi
 13217 5da4 0346     		mov	r3, r0
 13218 5da6 87F8F230 		strb	r3, [r7, #242]
 13219 5daa 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 13220 5dae 012B     		cmp	r3, #1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 372


 13221 5db0 1BD8     		bhi	.L503
3787:.\console.c   **** 						IMU_sensor.param.pitch_invertion = invertion;
 13222              		.loc 1 3787 0
 13223 5db2 40F20003 		movw	r3, #:lower16:IMU_sensor
 13224 5db6 C0F20003 		movt	r3, #:upper16:IMU_sensor
 13225 5dba 97F8F220 		ldrb	r2, [r7, #242]
 13226 5dbe 83F82520 		strb	r2, [r3, #37]
3790:.\console.c   **** 						dummy = WriteAllEEparams();
 13227              		.loc 1 3790 0
 13228 5dc2 FFF7FEFF 		bl	WriteAllEEparams
 13229 5dc6 0346     		mov	r3, r0
 13230 5dc8 87F8D930 		strb	r3, [r7, #217]
3791:.\console.c   **** 						printf(STR_REM_SINP, (uint16)IMU_sensor.param.pitch_invertion);   /* REM: Invertion Pitch set
 13231              		.loc 1 3791 0
 13232 5dcc 40F20003 		movw	r3, #:lower16:IMU_sensor
 13233 5dd0 C0F20003 		movt	r3, #:upper16:IMU_sensor
 13234 5dd4 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 13235 5dd8 40F20000 		movw	r0, #:lower16:.LC664
 13236 5ddc C0F20000 		movt	r0, #:upper16:.LC664
 13237 5de0 1946     		mov	r1, r3
 13238 5de2 FFF7FEFF 		bl	printf
3797:.\console.c   **** 					goto exitpars;
 13239              		.loc 1 3797 0
 13240 5de6 01F075BB 		b	.L131
 13241              	.L503:
3795:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13242              		.loc 1 3795 0
 13243 5dea 40F20000 		movw	r0, #:lower16:.LC450
 13244 5dee C0F20000 		movt	r0, #:upper16:.LC450
 13245 5df2 FFF7FEFF 		bl	printf
3797:.\console.c   **** 					goto exitpars;
 13246              		.loc 1 3797 0
 13247 5df6 01F06DBB 		b	.L131
 13248              	.L763:
 13249 5dfa 00BF     		.align	2
 13250              	.L762:
 13251 5dfc 0F000000 		.word	actual_cmd+15
 13252 5e00 1E000000 		.word	actual_cmd+30
 13253              	.L502:
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
 13254              		.loc 1 3803 0
 13255 5e04 BB48     		ldr	r0, .L764
 13256 5e06 40F20001 		movw	r1, #:lower16:.LC665
 13257 5e0a C0F20001 		movt	r1, #:upper16:.LC665
 13258 5e0e FFF7FEFF 		bl	strcmp
 13259 5e12 0346     		mov	r3, r0
 13260 5e14 002B     		cmp	r3, #0
 13261 5e16 09D0     		beq	.L505
3804:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imur") == 0))
 13262              		.loc 1 3804 0 discriminator 1
 13263 5e18 B648     		ldr	r0, .L764
 13264 5e1a 40F20001 		movw	r1, #:lower16:.LC666
 13265 5e1e C0F20001 		movt	r1, #:upper16:.LC666
 13266 5e22 FFF7FEFF 		bl	strcmp
 13267 5e26 0346     		mov	r3, r0
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
 13268              		.loc 1 3803 0 discriminator 1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 373


 13269 5e28 002B     		cmp	r3, #0
 13270 5e2a 33D1     		bne	.L506
 13271              	.L505:
3806:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 13272              		.loc 1 3806 0
 13273 5e2c B248     		ldr	r0, .L764+4
 13274 5e2e FFF7FEFF 		bl	atoi
 13275 5e32 0346     		mov	r3, r0
 13276 5e34 87F8F230 		strb	r3, [r7, #242]
3807:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 13277              		.loc 1 3807 0
 13278 5e38 AF48     		ldr	r0, .L764+4
 13279 5e3a FFF7FEFF 		bl	atoi
 13280 5e3e 0346     		mov	r3, r0
 13281 5e40 87F8F230 		strb	r3, [r7, #242]
 13282 5e44 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 13283 5e48 012B     		cmp	r3, #1
 13284 5e4a 1BD8     		bhi	.L507
3809:.\console.c   **** 						IMU_sensor.param.roll_invertion = invertion;
 13285              		.loc 1 3809 0
 13286 5e4c 40F20003 		movw	r3, #:lower16:IMU_sensor
 13287 5e50 C0F20003 		movt	r3, #:upper16:IMU_sensor
 13288 5e54 97F8F220 		ldrb	r2, [r7, #242]
 13289 5e58 83F82620 		strb	r2, [r3, #38]
3812:.\console.c   **** 						dummy = WriteAllEEparams();
 13290              		.loc 1 3812 0
 13291 5e5c FFF7FEFF 		bl	WriteAllEEparams
 13292 5e60 0346     		mov	r3, r0
 13293 5e62 87F8D930 		strb	r3, [r7, #217]
3813:.\console.c   **** 						printf(STR_REM_SINR, (uint16)IMU_sensor.param.roll_invertion);   /* REM: Invertion Roll sette
 13294              		.loc 1 3813 0
 13295 5e66 40F20003 		movw	r3, #:lower16:IMU_sensor
 13296 5e6a C0F20003 		movt	r3, #:upper16:IMU_sensor
 13297 5e6e 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 13298 5e72 40F20000 		movw	r0, #:lower16:.LC667
 13299 5e76 C0F20000 		movt	r0, #:upper16:.LC667
 13300 5e7a 1946     		mov	r1, r3
 13301 5e7c FFF7FEFF 		bl	printf
3819:.\console.c   **** 					goto exitpars;
 13302              		.loc 1 3819 0
 13303 5e80 01F028BB 		b	.L131
 13304              	.L507:
3817:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13305              		.loc 1 3817 0
 13306 5e84 40F20000 		movw	r0, #:lower16:.LC450
 13307 5e88 C0F20000 		movt	r0, #:upper16:.LC450
 13308 5e8c FFF7FEFF 		bl	printf
3819:.\console.c   **** 					goto exitpars;
 13309              		.loc 1 3819 0
 13310 5e90 01F020BB 		b	.L131
 13311              	.L506:
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
 13312              		.loc 1 3825 0
 13313 5e94 9748     		ldr	r0, .L764
 13314 5e96 40F20001 		movw	r1, #:lower16:.LC668
 13315 5e9a C0F20001 		movt	r1, #:upper16:.LC668
 13316 5e9e FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 374


 13317 5ea2 0346     		mov	r3, r0
 13318 5ea4 002B     		cmp	r3, #0
 13319 5ea6 09D0     		beq	.L509
3826:.\console.c   **** 					(strcmp(actual_cmd.parameter, "prex") == 0))
 13320              		.loc 1 3826 0 discriminator 1
 13321 5ea8 9248     		ldr	r0, .L764
 13322 5eaa 40F20001 		movw	r1, #:lower16:.LC669
 13323 5eae C0F20001 		movt	r1, #:upper16:.LC669
 13324 5eb2 FFF7FEFF 		bl	strcmp
 13325 5eb6 0346     		mov	r3, r0
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
 13326              		.loc 1 3825 0 discriminator 1
 13327 5eb8 002B     		cmp	r3, #0
 13328 5eba 33D1     		bne	.L510
 13329              	.L509:
3828:.\console.c   **** 					if (((exchange = atoi(actual_cmd.number1)) >= 0)
 13330              		.loc 1 3828 0
 13331 5ebc 8E48     		ldr	r0, .L764+4
 13332 5ebe FFF7FEFF 		bl	atoi
 13333 5ec2 0346     		mov	r3, r0
 13334 5ec4 87F8F130 		strb	r3, [r7, #241]
3829:.\console.c   **** 					&& (exchange = atoi(actual_cmd.number1)) <= 1)
 13335              		.loc 1 3829 0
 13336 5ec8 8B48     		ldr	r0, .L764+4
 13337 5eca FFF7FEFF 		bl	atoi
 13338 5ece 0346     		mov	r3, r0
 13339 5ed0 87F8F130 		strb	r3, [r7, #241]
 13340 5ed4 97F8F130 		ldrb	r3, [r7, #241]	@ zero_extendqisi2
 13341 5ed8 012B     		cmp	r3, #1
 13342 5eda 1BD8     		bhi	.L511
3831:.\console.c   **** 						IMU_sensor.param.pitch_roll_exchange = exchange;
 13343              		.loc 1 3831 0
 13344 5edc 40F20003 		movw	r3, #:lower16:IMU_sensor
 13345 5ee0 C0F20003 		movt	r3, #:upper16:IMU_sensor
 13346 5ee4 97F8F120 		ldrb	r2, [r7, #241]
 13347 5ee8 83F82720 		strb	r2, [r3, #39]
3834:.\console.c   **** 						dummy = WriteAllEEparams();
 13348              		.loc 1 3834 0
 13349 5eec FFF7FEFF 		bl	WriteAllEEparams
 13350 5ef0 0346     		mov	r3, r0
 13351 5ef2 87F8D930 		strb	r3, [r7, #217]
3835:.\console.c   **** 						printf(STR_REM_SPRX, (uint16)IMU_sensor.param.pitch_roll_exchange);   /* REM: Invertion Roll 
 13352              		.loc 1 3835 0
 13353 5ef6 40F20003 		movw	r3, #:lower16:IMU_sensor
 13354 5efa C0F20003 		movt	r3, #:upper16:IMU_sensor
 13355 5efe 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 13356 5f02 40F20000 		movw	r0, #:lower16:.LC670
 13357 5f06 C0F20000 		movt	r0, #:upper16:.LC670
 13358 5f0a 1946     		mov	r1, r3
 13359 5f0c FFF7FEFF 		bl	printf
3841:.\console.c   **** 					goto exitpars;
 13360              		.loc 1 3841 0
 13361 5f10 01F0E0BA 		b	.L131
 13362              	.L511:
3839:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13363              		.loc 1 3839 0
 13364 5f14 40F20000 		movw	r0, #:lower16:.LC450
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 375


 13365 5f18 C0F20000 		movt	r0, #:upper16:.LC450
 13366 5f1c FFF7FEFF 		bl	printf
3841:.\console.c   **** 					goto exitpars;
 13367              		.loc 1 3841 0
 13368 5f20 01F0D8BA 		b	.L131
 13369              	.L510:
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
 13370              		.loc 1 3847 0
 13371 5f24 7348     		ldr	r0, .L764
 13372 5f26 40F20001 		movw	r1, #:lower16:.LC272
 13373 5f2a C0F20001 		movt	r1, #:upper16:.LC272
 13374 5f2e FFF7FEFF 		bl	strcmp
 13375 5f32 0346     		mov	r3, r0
 13376 5f34 002B     		cmp	r3, #0
 13377 5f36 0AD0     		beq	.L513
3848:.\console.c   **** 					(strcmp(actual_cmd.parameter, "shot") == 0))
 13378              		.loc 1 3848 0 discriminator 1
 13379 5f38 6E48     		ldr	r0, .L764
 13380 5f3a 40F20001 		movw	r1, #:lower16:.LC442
 13381 5f3e C0F20001 		movt	r1, #:upper16:.LC442
 13382 5f42 FFF7FEFF 		bl	strcmp
 13383 5f46 0346     		mov	r3, r0
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
 13384              		.loc 1 3847 0 discriminator 1
 13385 5f48 002B     		cmp	r3, #0
 13386 5f4a 40F0BE81 		bne	.L514
 13387              	.L513:
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
 13388              		.loc 1 3850 0
 13389 5f4e 6B48     		ldr	r0, .L764+8
 13390 5f50 40F20001 		movw	r1, #:lower16:.LC671
 13391 5f54 C0F20001 		movt	r1, #:upper16:.LC671
 13392 5f58 FFF7FEFF 		bl	strcmp
 13393 5f5c 0346     		mov	r3, r0
 13394 5f5e 002B     		cmp	r3, #0
 13395 5f60 09D0     		beq	.L515
3851:.\console.c   **** 					    (strcmp(actual_cmd.number2, "c") == 0))
 13396              		.loc 1 3851 0 discriminator 1
 13397 5f62 6648     		ldr	r0, .L764+8
 13398 5f64 40F20001 		movw	r1, #:lower16:.LC672
 13399 5f68 C0F20001 		movt	r1, #:upper16:.LC672
 13400 5f6c FFF7FEFF 		bl	strcmp
 13401 5f70 0346     		mov	r3, r0
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
 13402              		.loc 1 3850 0 discriminator 1
 13403 5f72 002B     		cmp	r3, #0
 13404 5f74 7AD1     		bne	.L516
 13405              	.L515:
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13406              		.loc 1 3854 0
 13407 5f76 6048     		ldr	r0, .L764+4
 13408 5f78 FFF7FEFF 		bl	atoi
 13409 5f7c 0346     		mov	r3, r0
 13410 5f7e 87F8E530 		strb	r3, [r7, #229]
 13411 5f82 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 13412 5f86 002B     		cmp	r3, #0
 13413 5f88 00F09C81 		beq	.L714
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 376


3855:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 13414              		.loc 1 3855 0
 13415 5f8c 5A48     		ldr	r0, .L764+4
 13416 5f8e FFF7FEFF 		bl	atoi
 13417 5f92 0346     		mov	r3, r0
 13418 5f94 87F8E530 		strb	r3, [r7, #229]
 13419 5f98 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 13420 5f9c 632B     		cmp	r3, #99
 13421 5f9e 00F29181 		bhi	.L714
3859:.\console.c   **** 							if (q[q_table[q_number]].number != Q_NUMBER_UNUSED)
 13422              		.loc 1 3859 0
 13423 5fa2 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13424 5fa6 40F20003 		movw	r3, #:lower16:q_table
 13425 5faa C0F20003 		movt	r3, #:upper16:q_table
 13426 5fae 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13427 5fb0 1946     		mov	r1, r3
 13428 5fb2 40F20002 		movw	r2, #:lower16:q
 13429 5fb6 C0F20002 		movt	r2, #:upper16:q
 13430 5fba 0B46     		mov	r3, r1
 13431 5fbc 4FEAC303 		lsl	r3, r3, #3
 13432 5fc0 5B18     		adds	r3, r3, r1
 13433 5fc2 4FEA8303 		lsl	r3, r3, #2
 13434 5fc6 D318     		adds	r3, r2, r3
 13435 5fc8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 13436 5fca 002B     		cmp	r3, #0
 13437 5fcc 47D0     		beq	.L518
3861:.\console.c   **** 								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
 13438              		.loc 1 3861 0
 13439 5fce 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13440 5fd2 40F20003 		movw	r3, #:lower16:q_table
 13441 5fd6 C0F20003 		movt	r3, #:upper16:q_table
 13442 5fda 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13443 5fdc 1946     		mov	r1, r3
 13444 5fde 40F20002 		movw	r2, #:lower16:q
 13445 5fe2 C0F20002 		movt	r2, #:upper16:q
 13446 5fe6 0B46     		mov	r3, r1
 13447 5fe8 4FEAC303 		lsl	r3, r3, #3
 13448 5fec 5B18     		adds	r3, r3, r1
 13449 5fee 4FEA8303 		lsl	r3, r3, #2
 13450 5ff2 D318     		adds	r3, r2, r3
 13451 5ff4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 13452 5ff6 40F20000 		movw	r0, #:lower16:.LC673
 13453 5ffa C0F20000 		movt	r0, #:upper16:.LC673
 13454 5ffe 1946     		mov	r1, r3
 13455 6000 FFF7FEFF 		bl	printf
3863:.\console.c   **** 								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
 13456              		.loc 1 3863 0
 13457 6004 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13458 6008 40F20003 		movw	r3, #:lower16:q_table
 13459 600c C0F20003 		movt	r3, #:upper16:q_table
 13460 6010 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13461 6012 1946     		mov	r1, r3
 13462 6014 40F20002 		movw	r2, #:lower16:q
 13463 6018 C0F20002 		movt	r2, #:upper16:q
 13464 601c 0B46     		mov	r3, r1
 13465 601e 4FEAC303 		lsl	r3, r3, #3
 13466 6022 5B18     		adds	r3, r3, r1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 377


 13467 6024 4FEA8303 		lsl	r3, r3, #2
 13468 6028 D318     		adds	r3, r2, r3
 13469 602a 4FF00002 		mov	r2, #0
 13470 602e 1A70     		strb	r2, [r3, #0]
3866:.\console.c   **** 								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 13471              		.loc 1 3866 0
 13472 6030 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13473 6034 40F20003 		movw	r3, #:lower16:q_table
 13474 6038 C0F20003 		movt	r3, #:upper16:q_table
 13475 603c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13476 603e DBB2     		uxtb	r3, r3
 13477 6040 5BB2     		sxtb	r3, r3
 13478 6042 1846     		mov	r0, r3
 13479 6044 FFF7FEFF 		bl	WriteQEEparams
 13480 6048 0346     		mov	r3, r0
 13481 604a 002B     		cmp	r3, #0
 13482 604c 00F03A81 		beq	.L714
3868:.\console.c   **** 									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
 13483              		.loc 1 3868 0
 13484 6050 40F20000 		movw	r0, #:lower16:.LC674
 13485 6054 C0F20000 		movt	r0, #:upper16:.LC674
 13486 6058 FFF7FEFF 		bl	printf
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13487              		.loc 1 3854 0
 13488 605c 32E1     		b	.L714
 13489              	.L518:
3873:.\console.c   **** 								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
 13490              		.loc 1 3873 0
 13491 605e 40F20000 		movw	r0, #:lower16:.LC675
 13492 6062 C0F20000 		movt	r0, #:upper16:.LC675
 13493 6066 FFF7FEFF 		bl	puts
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13494              		.loc 1 3854 0
 13495 606a 2BE1     		b	.L714
 13496              	.L516:
3877:.\console.c   **** 					else if (((memory_number = atoi(actual_cmd.number2)) >= Q_MEMORY_NUMBER_MIN)
 13497              		.loc 1 3877 0
 13498 606c 2348     		ldr	r0, .L764+8
 13499 606e FFF7FEFF 		bl	atoi
 13500 6072 0346     		mov	r3, r0
 13501 6074 A7F8E630 		strh	r3, [r7, #230]	@ movhi
3878:.\console.c   **** 						    && (memory_number = atoi(actual_cmd.number2)) < Q_MEMORY_NUMBER_MAX)
 13502              		.loc 1 3878 0
 13503 6078 2048     		ldr	r0, .L764+8
 13504 607a FFF7FEFF 		bl	atoi
 13505 607e 0346     		mov	r3, r0
 13506 6080 A7F8E630 		strh	r3, [r7, #230]	@ movhi
 13507 6084 B7F8E630 		ldrh	r3, [r7, #230]
 13508 6088 1F2B     		cmp	r3, #31
 13509 608a 00F21381 		bhi	.L520
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13510              		.loc 1 3880 0
 13511 608e 1A48     		ldr	r0, .L764+4
 13512 6090 FFF7FEFF 		bl	atoi
 13513 6094 0346     		mov	r3, r0
 13514 6096 87F8E530 		strb	r3, [r7, #229]
 13515 609a 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 378


 13516 609e 002B     		cmp	r3, #0
 13517 60a0 00F00081 		beq	.L521
3881:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 13518              		.loc 1 3881 0
 13519 60a4 1448     		ldr	r0, .L764+4
 13520 60a6 FFF7FEFF 		bl	atoi
 13521 60aa 0346     		mov	r3, r0
 13522 60ac 87F8E530 		strb	r3, [r7, #229]
 13523 60b0 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 13524 60b4 632B     		cmp	r3, #99
 13525 60b6 00F2F580 		bhi	.L521
3883:.\console.c   **** 							printf("* Warning! Put All Axes to desired position and press y!");
 13526              		.loc 1 3883 0
 13527 60ba 40F20000 		movw	r0, #:lower16:.LC676
 13528 60be C0F20000 		movt	r0, #:upper16:.LC676
 13529 60c2 FFF7FEFF 		bl	printf
3885:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _YES)
 13530              		.loc 1 3885 0
 13531 60c6 4FF00100 		mov	r0, #1
 13532 60ca FFF7FEFF 		bl	ButtonYNChoice
 13533 60ce 0346     		mov	r3, r0
 13534 60d0 012B     		cmp	r3, #1
 13535 60d2 40F0CB80 		bne	.L522
3887:.\console.c   **** 								if (strlen(actual_cmd.number2) != 0)
 13536              		.loc 1 3887 0
 13537 60d6 094B     		ldr	r3, .L764+8
 13538 60d8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 13539 60da 002B     		cmp	r3, #0
 13540 60dc 10D0     		beq	.L523
3890:.\console.c   **** 									q_table[q_number] 			= memory_number;				  		/* save for fast indexing 	*/
 13541              		.loc 1 3890 0
 13542 60de 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13543 60e2 B7F8E630 		ldrh	r3, [r7, #230]	@ movhi
 13544 60e6 D9B2     		uxtb	r1, r3
 13545 60e8 40F20003 		movw	r3, #:lower16:q_table
 13546 60ec C0F20003 		movt	r3, #:upper16:q_table
 13547 60f0 9954     		strb	r1, [r3, r2]
 13548 60f2 13E0     		b	.L524
 13549              	.L765:
 13550              		.align	2
 13551              	.L764:
 13552 60f4 0F000000 		.word	actual_cmd+15
 13553 60f8 1E000000 		.word	actual_cmd+30
 13554 60fc 28000000 		.word	actual_cmd+40
 13555              	.L523:
3895:.\console.c   **** 									q_table[q_number] 			= qmemory_standard_address[q_number];	/* save for fast indexing 	*/
 13556              		.loc 1 3895 0
 13557 6100 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13558 6104 97F8E510 		ldrb	r1, [r7, #229]	@ zero_extendqisi2
 13559 6108 40F20003 		movw	r3, #:lower16:qmemory_standard_address
 13560 610c C0F20003 		movt	r3, #:upper16:qmemory_standard_address
 13561 6110 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 13562 6112 40F20003 		movw	r3, #:lower16:q_table
 13563 6116 C0F20003 		movt	r3, #:upper16:q_table
 13564 611a 9954     		strb	r1, [r3, r2]
 13565              	.L524:
3899:.\console.c   **** 								q[q_table[q_number]].number									= (uint8)(q_number);
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 379


 13566              		.loc 1 3899 0
 13567 611c 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13568 6120 40F20003 		movw	r3, #:lower16:q_table
 13569 6124 C0F20003 		movt	r3, #:upper16:q_table
 13570 6128 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13571 612a 1946     		mov	r1, r3
 13572 612c 40F20002 		movw	r2, #:lower16:q
 13573 6130 C0F20002 		movt	r2, #:upper16:q
 13574 6134 0B46     		mov	r3, r1
 13575 6136 4FEAC303 		lsl	r3, r3, #3
 13576 613a 5B18     		adds	r3, r3, r1
 13577 613c 4FEA8303 		lsl	r3, r3, #2
 13578 6140 D318     		adds	r3, r2, r3
 13579 6142 97F8E520 		ldrb	r2, [r7, #229]
 13580 6146 1A70     		strb	r2, [r3, #0]
3900:.\console.c   **** 								q[q_table[q_number]].mc.position[PAN_AXIS]             		= pan_absolute_sensor.position;			
 13581              		.loc 1 3900 0
 13582 6148 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13583 614c 40F20003 		movw	r3, #:lower16:q_table
 13584 6150 C0F20003 		movt	r3, #:upper16:q_table
 13585 6154 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13586 6156 1946     		mov	r1, r3
 13587 6158 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13588 615c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13589 6160 5868     		ldr	r0, [r3, #4]	@ float
 13590 6162 40F20002 		movw	r2, #:lower16:q
 13591 6166 C0F20002 		movt	r2, #:upper16:q
 13592 616a 0B46     		mov	r3, r1
 13593 616c 4FEAC303 		lsl	r3, r3, #3
 13594 6170 5B18     		adds	r3, r3, r1
 13595 6172 4FEA8303 		lsl	r3, r3, #2
 13596 6176 D318     		adds	r3, r2, r3
 13597 6178 03F11803 		add	r3, r3, #24
 13598 617c 1860     		str	r0, [r3, #0]	@ float
3901:.\console.c   **** 								q[q_table[q_number]].param.position_default[PAN_AXIS].fnum  = pan_absolute_sensor.position;
 13599              		.loc 1 3901 0
 13600 617e 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13601 6182 40F20003 		movw	r3, #:lower16:q_table
 13602 6186 C0F20003 		movt	r3, #:upper16:q_table
 13603 618a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13604 618c 1946     		mov	r1, r3
 13605 618e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13606 6192 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13607 6196 5868     		ldr	r0, [r3, #4]	@ float
 13608 6198 40F20002 		movw	r2, #:lower16:q
 13609 619c C0F20002 		movt	r2, #:upper16:q
 13610 61a0 0B46     		mov	r3, r1
 13611 61a2 4FEAC303 		lsl	r3, r3, #3
 13612 61a6 5B18     		adds	r3, r3, r1
 13613 61a8 4FEA8303 		lsl	r3, r3, #2
 13614 61ac D318     		adds	r3, r2, r3
 13615 61ae 03F10403 		add	r3, r3, #4
 13616 61b2 1860     		str	r0, [r3, #0]	@ float
3903:.\console.c   **** 								q[q_table[q_number]].mc.position[TILT_AXIS]            		= tilt_absolute_sensor.position;		
 13617              		.loc 1 3903 0
 13618 61b4 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13619 61b8 40F20003 		movw	r3, #:lower16:q_table
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 380


 13620 61bc C0F20003 		movt	r3, #:upper16:q_table
 13621 61c0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13622 61c2 1946     		mov	r1, r3
 13623 61c4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13624 61c8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13625 61cc 5868     		ldr	r0, [r3, #4]	@ float
 13626 61ce 40F20002 		movw	r2, #:lower16:q
 13627 61d2 C0F20002 		movt	r2, #:upper16:q
 13628 61d6 0B46     		mov	r3, r1
 13629 61d8 4FEAC303 		lsl	r3, r3, #3
 13630 61dc 5B18     		adds	r3, r3, r1
 13631 61de 4FEA8303 		lsl	r3, r3, #2
 13632 61e2 D318     		adds	r3, r2, r3
 13633 61e4 03F11C03 		add	r3, r3, #28
 13634 61e8 1860     		str	r0, [r3, #0]	@ float
3904:.\console.c   **** 								q[q_table[q_number]].param.position_default[TILT_AXIS].fnum = tilt_absolute_sensor.position
 13635              		.loc 1 3904 0
 13636 61ea 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13637 61ee 40F20003 		movw	r3, #:lower16:q_table
 13638 61f2 C0F20003 		movt	r3, #:upper16:q_table
 13639 61f6 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13640 61f8 1946     		mov	r1, r3
 13641 61fa 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13642 61fe C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13643 6202 5868     		ldr	r0, [r3, #4]	@ float
 13644 6204 40F20002 		movw	r2, #:lower16:q
 13645 6208 C0F20002 		movt	r2, #:upper16:q
 13646 620c 0B46     		mov	r3, r1
 13647 620e 4FEAC303 		lsl	r3, r3, #3
 13648 6212 5B18     		adds	r3, r3, r1
 13649 6214 4FEA8303 		lsl	r3, r3, #2
 13650 6218 D318     		adds	r3, r2, r3
 13651 621a 03F10803 		add	r3, r3, #8
 13652 621e 1860     		str	r0, [r3, #0]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13653              		.loc 1 3906 0
 13654 6220 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
3908:.\console.c   **** 									(int32)pan_absolute_sensor.position,
 13655              		.loc 1 3908 0
 13656 6224 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13657 6228 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13658 622c 5B68     		ldr	r3, [r3, #4]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13659              		.loc 1 3906 0
 13660 622e 1846     		mov	r0, r3
 13661 6230 FFF7FEFF 		bl	__aeabi_f2iz
 13662 6234 0546     		mov	r5, r0
3909:.\console.c   **** 									(int32)tilt_absolute_sensor.position,
 13663              		.loc 1 3909 0
 13664 6236 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13665 623a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13666 623e 5B68     		ldr	r3, [r3, #4]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13667              		.loc 1 3906 0
 13668 6240 1846     		mov	r0, r3
 13669 6242 FFF7FEFF 		bl	__aeabi_f2iz
 13670 6246 0446     		mov	r4, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 381


3910:.\console.c   **** 									(int16)q_table[q_number]);	
 13671              		.loc 1 3910 0
 13672 6248 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13673 624c 40F20003 		movw	r3, #:lower16:q_table
 13674 6250 C0F20003 		movt	r3, #:upper16:q_table
 13675 6254 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13676              		.loc 1 3906 0
 13677 6256 0093     		str	r3, [sp, #0]
 13678 6258 40F20000 		movw	r0, #:lower16:.LC677
 13679 625c C0F20000 		movt	r0, #:upper16:.LC677
 13680 6260 3146     		mov	r1, r6
 13681 6262 2A46     		mov	r2, r5
 13682 6264 2346     		mov	r3, r4
 13683 6266 FFF7FEFF 		bl	printf
 13684 626a 05E0     		b	.L525
 13685              	.L522:
3914:.\console.c   **** 								printf("\r\n* Q element (shot) position not sampled!\r\n");								
 13686              		.loc 1 3914 0
 13687 626c 40F20000 		movw	r0, #:lower16:.LC678
 13688 6270 C0F20000 		movt	r0, #:upper16:.LC678
 13689 6274 FFF7FEFF 		bl	puts
 13690              	.L525:
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 13691              		.loc 1 3918 0
 13692 6278 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13693 627c 40F20003 		movw	r3, #:lower16:q_table
 13694 6280 C0F20003 		movt	r3, #:upper16:q_table
 13695 6284 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13696 6286 DBB2     		uxtb	r3, r3
 13697 6288 5BB2     		sxtb	r3, r3
 13698 628a 1846     		mov	r0, r3
 13699 628c FFF7FEFF 		bl	WriteQEEparams
 13700 6290 0346     		mov	r3, r0
 13701 6292 002B     		cmp	r3, #0
 13702 6294 0DD0     		beq	.L527
3920:.\console.c   **** 								printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
 13703              		.loc 1 3920 0
 13704 6296 40F20000 		movw	r0, #:lower16:.LC674
 13705 629a C0F20000 		movt	r0, #:upper16:.LC674
 13706 629e FFF7FEFF 		bl	printf
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 13707              		.loc 1 3918 0
 13708 62a2 06E0     		b	.L527
 13709              	.L521:
3925:.\console.c   **** 							printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
 13710              		.loc 1 3925 0
 13711 62a4 40F20000 		movw	r0, #:lower16:.LC450
 13712 62a8 C0F20000 		movt	r0, #:upper16:.LC450
 13713 62ac FFF7FEFF 		bl	printf
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13714              		.loc 1 3880 0
 13715 62b0 09E0     		b	.L519
 13716              	.L527:
 13717 62b2 08E0     		b	.L519
 13718              	.L520:
3956:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 382


 13719              		.loc 1 3956 0
 13720 62b4 40F20000 		movw	r0, #:lower16:.LC450
 13721 62b8 C0F20000 		movt	r0, #:upper16:.LC450
 13722 62bc FFF7FEFF 		bl	printf
3958:.\console.c   **** 					goto exitpars;
 13723              		.loc 1 3958 0
 13724 62c0 01F008B9 		b	.L131
 13725              	.L714:
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13726              		.loc 1 3854 0
 13727 62c4 00BF     		nop
 13728              	.L519:
3958:.\console.c   **** 					goto exitpars;
 13729              		.loc 1 3958 0
 13730 62c6 01F005B9 		b	.L131
 13731              	.L514:
3964:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpp") == 0)
 13732              		.loc 1 3964 0
 13733 62ca B848     		ldr	r0, .L766
 13734 62cc 40F20001 		movw	r1, #:lower16:.LC679
 13735 62d0 C0F20001 		movt	r1, #:upper16:.LC679
 13736 62d4 FFF7FEFF 		bl	strcmp
 13737 62d8 0346     		mov	r3, r0
 13738 62da 002B     		cmp	r3, #0
 13739 62dc 51D1     		bne	.L528
3966:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
 13740              		.loc 1 3966 0
 13741 62de B448     		ldr	r0, .L766+4
 13742 62e0 FFF7FEFF 		bl	atof
 13743 62e4 0246     		mov	r2, r0
 13744 62e6 0B46     		mov	r3, r1
 13745 62e8 1046     		mov	r0, r2
 13746 62ea 1946     		mov	r1, r3
 13747 62ec FFF7FEFF 		bl	__aeabi_d2f
 13748 62f0 0346     		mov	r3, r0
 13749 62f2 C7F8D430 		str	r3, [r7, #212]	@ float
 13750 62f6 D7F8D400 		ldr	r0, [r7, #212]	@ float
 13751 62fa 4FF00001 		mov	r1, #0
 13752 62fe FFF7FEFF 		bl	__aeabi_fcmpge
 13753 6302 0346     		mov	r3, r0
 13754 6304 002B     		cmp	r3, #0
 13755 6306 34D0     		beq	.L529
 13756              	.L662:
3967:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
 13757              		.loc 1 3967 0
 13758 6308 A948     		ldr	r0, .L766+4
 13759 630a FFF7FEFF 		bl	atof
 13760 630e 0246     		mov	r2, r0
 13761 6310 0B46     		mov	r3, r1
 13762 6312 1046     		mov	r0, r2
 13763 6314 1946     		mov	r1, r3
 13764 6316 FFF7FEFF 		bl	__aeabi_d2f
 13765 631a 0346     		mov	r3, r0
 13766 631c C7F8D430 		str	r3, [r7, #212]	@ float
 13767 6320 D7F8D400 		ldr	r0, [r7, #212]	@ float
 13768 6324 4FF00001 		mov	r1, #0
 13769 6328 C4F2C821 		movt	r1, 17096
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 383


 13770 632c FFF7FEFF 		bl	__aeabi_fcmple
 13771 6330 0346     		mov	r3, r0
 13772 6332 002B     		cmp	r3, #0
 13773 6334 1DD0     		beq	.L529
 13774              	.L663:
3969:.\console.c   **** 						pan_axis.param.Kpf.fnum = Kp;
 13775              		.loc 1 3969 0
 13776 6336 40F20003 		movw	r3, #:lower16:pan_axis
 13777 633a C0F20003 		movt	r3, #:upper16:pan_axis
 13778 633e D7F8D420 		ldr	r2, [r7, #212]	@ float
 13779 6342 5A61     		str	r2, [r3, #20]	@ float
3972:.\console.c   **** 						dummy = WriteAllEEparams();
 13780              		.loc 1 3972 0
 13781 6344 FFF7FEFF 		bl	WriteAllEEparams
 13782 6348 0346     		mov	r3, r0
 13783 634a 87F8D930 		strb	r3, [r7, #217]
3973:.\console.c   **** 						printf(STR_REM_PMKP, (float)pan_axis.param.Kpf.fnum);   /* REM: Pan Motor Kp setted to...*/		
 13784              		.loc 1 3973 0
 13785 634e 40F20003 		movw	r3, #:lower16:pan_axis
 13786 6352 C0F20003 		movt	r3, #:upper16:pan_axis
 13787 6356 5B69     		ldr	r3, [r3, #20]	@ float
 13788 6358 1846     		mov	r0, r3
 13789 635a FFF7FEFF 		bl	__aeabi_f2d
 13790 635e 0246     		mov	r2, r0
 13791 6360 0B46     		mov	r3, r1
 13792 6362 40F20000 		movw	r0, #:lower16:.LC680
 13793 6366 C0F20000 		movt	r0, #:upper16:.LC680
 13794 636a FFF7FEFF 		bl	printf
3979:.\console.c   **** 					goto exitpars;
 13795              		.loc 1 3979 0
 13796 636e 01F0B1B8 		b	.L131
 13797              	.L529:
3977:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13798              		.loc 1 3977 0
 13799 6372 40F20000 		movw	r0, #:lower16:.LC450
 13800 6376 C0F20000 		movt	r0, #:upper16:.LC450
 13801 637a FFF7FEFF 		bl	printf
3979:.\console.c   **** 					goto exitpars;
 13802              		.loc 1 3979 0
 13803 637e 01F0A9B8 		b	.L131
 13804              	.L528:
3985:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpt") == 0)
 13805              		.loc 1 3985 0
 13806 6382 8A48     		ldr	r0, .L766
 13807 6384 40F20001 		movw	r1, #:lower16:.LC681
 13808 6388 C0F20001 		movt	r1, #:upper16:.LC681
 13809 638c FFF7FEFF 		bl	strcmp
 13810 6390 0346     		mov	r3, r0
 13811 6392 002B     		cmp	r3, #0
 13812 6394 51D1     		bne	.L533
3987:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
 13813              		.loc 1 3987 0
 13814 6396 8648     		ldr	r0, .L766+4
 13815 6398 FFF7FEFF 		bl	atof
 13816 639c 0246     		mov	r2, r0
 13817 639e 0B46     		mov	r3, r1
 13818 63a0 1046     		mov	r0, r2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 384


 13819 63a2 1946     		mov	r1, r3
 13820 63a4 FFF7FEFF 		bl	__aeabi_d2f
 13821 63a8 0346     		mov	r3, r0
 13822 63aa C7F8D430 		str	r3, [r7, #212]	@ float
 13823 63ae D7F8D400 		ldr	r0, [r7, #212]	@ float
 13824 63b2 4FF00001 		mov	r1, #0
 13825 63b6 FFF7FEFF 		bl	__aeabi_fcmpge
 13826 63ba 0346     		mov	r3, r0
 13827 63bc 002B     		cmp	r3, #0
 13828 63be 34D0     		beq	.L534
 13829              	.L664:
3988:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
 13830              		.loc 1 3988 0
 13831 63c0 7B48     		ldr	r0, .L766+4
 13832 63c2 FFF7FEFF 		bl	atof
 13833 63c6 0246     		mov	r2, r0
 13834 63c8 0B46     		mov	r3, r1
 13835 63ca 1046     		mov	r0, r2
 13836 63cc 1946     		mov	r1, r3
 13837 63ce FFF7FEFF 		bl	__aeabi_d2f
 13838 63d2 0346     		mov	r3, r0
 13839 63d4 C7F8D430 		str	r3, [r7, #212]	@ float
 13840 63d8 D7F8D400 		ldr	r0, [r7, #212]	@ float
 13841 63dc 4FF00001 		mov	r1, #0
 13842 63e0 C4F2C821 		movt	r1, 17096
 13843 63e4 FFF7FEFF 		bl	__aeabi_fcmple
 13844 63e8 0346     		mov	r3, r0
 13845 63ea 002B     		cmp	r3, #0
 13846 63ec 1DD0     		beq	.L534
 13847              	.L665:
3990:.\console.c   **** 						tilt_axis.param.Kpf.fnum = Kp;
 13848              		.loc 1 3990 0
 13849 63ee 40F20003 		movw	r3, #:lower16:tilt_axis
 13850 63f2 C0F20003 		movt	r3, #:upper16:tilt_axis
 13851 63f6 D7F8D420 		ldr	r2, [r7, #212]	@ float
 13852 63fa 5A61     		str	r2, [r3, #20]	@ float
3993:.\console.c   **** 						dummy = WriteAllEEparams();
 13853              		.loc 1 3993 0
 13854 63fc FFF7FEFF 		bl	WriteAllEEparams
 13855 6400 0346     		mov	r3, r0
 13856 6402 87F8D930 		strb	r3, [r7, #217]
3994:.\console.c   **** 						printf(STR_REM_TMKP, (float)tilt_axis.param.Kpf.fnum);   /* REM: Tilt Motor Kp setted to...*/
 13857              		.loc 1 3994 0
 13858 6406 40F20003 		movw	r3, #:lower16:tilt_axis
 13859 640a C0F20003 		movt	r3, #:upper16:tilt_axis
 13860 640e 5B69     		ldr	r3, [r3, #20]	@ float
 13861 6410 1846     		mov	r0, r3
 13862 6412 FFF7FEFF 		bl	__aeabi_f2d
 13863 6416 0246     		mov	r2, r0
 13864 6418 0B46     		mov	r3, r1
 13865 641a 40F20000 		movw	r0, #:lower16:.LC682
 13866 641e C0F20000 		movt	r0, #:upper16:.LC682
 13867 6422 FFF7FEFF 		bl	printf
4000:.\console.c   **** 					goto exitpars;
 13868              		.loc 1 4000 0
 13869 6426 01F055B8 		b	.L131
 13870              	.L534:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 385


3998:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13871              		.loc 1 3998 0
 13872 642a 40F20000 		movw	r0, #:lower16:.LC450
 13873 642e C0F20000 		movt	r0, #:upper16:.LC450
 13874 6432 FFF7FEFF 		bl	printf
4000:.\console.c   **** 					goto exitpars;
 13875              		.loc 1 4000 0
 13876 6436 01F04DB8 		b	.L131
 13877              	.L533:
4006:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdp") == 0)
 13878              		.loc 1 4006 0
 13879 643a 5C48     		ldr	r0, .L766
 13880 643c 40F20001 		movw	r1, #:lower16:.LC683
 13881 6440 C0F20001 		movt	r1, #:upper16:.LC683
 13882 6444 FFF7FEFF 		bl	strcmp
 13883 6448 0346     		mov	r3, r0
 13884 644a 002B     		cmp	r3, #0
 13885 644c 51D1     		bne	.L538
4008:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
 13886              		.loc 1 4008 0
 13887 644e 5848     		ldr	r0, .L766+4
 13888 6450 FFF7FEFF 		bl	atof
 13889 6454 0246     		mov	r2, r0
 13890 6456 0B46     		mov	r3, r1
 13891 6458 1046     		mov	r0, r2
 13892 645a 1946     		mov	r1, r3
 13893 645c FFF7FEFF 		bl	__aeabi_d2f
 13894 6460 0346     		mov	r3, r0
 13895 6462 C7F8D030 		str	r3, [r7, #208]	@ float
 13896 6466 D7F8D000 		ldr	r0, [r7, #208]	@ float
 13897 646a 4FF00001 		mov	r1, #0
 13898 646e FFF7FEFF 		bl	__aeabi_fcmpge
 13899 6472 0346     		mov	r3, r0
 13900 6474 002B     		cmp	r3, #0
 13901 6476 34D0     		beq	.L539
 13902              	.L666:
4009:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
 13903              		.loc 1 4009 0
 13904 6478 4D48     		ldr	r0, .L766+4
 13905 647a FFF7FEFF 		bl	atof
 13906 647e 0246     		mov	r2, r0
 13907 6480 0B46     		mov	r3, r1
 13908 6482 1046     		mov	r0, r2
 13909 6484 1946     		mov	r1, r3
 13910 6486 FFF7FEFF 		bl	__aeabi_d2f
 13911 648a 0346     		mov	r3, r0
 13912 648c C7F8D030 		str	r3, [r7, #208]	@ float
 13913 6490 D7F8D000 		ldr	r0, [r7, #208]	@ float
 13914 6494 4FF00001 		mov	r1, #0
 13915 6498 C4F27A41 		movt	r1, 17530
 13916 649c FFF7FEFF 		bl	__aeabi_fcmple
 13917 64a0 0346     		mov	r3, r0
 13918 64a2 002B     		cmp	r3, #0
 13919 64a4 1DD0     		beq	.L539
 13920              	.L667:
4011:.\console.c   **** 						pan_axis.param.Kdf.fnum = Kd;
 13921              		.loc 1 4011 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 386


 13922 64a6 40F20003 		movw	r3, #:lower16:pan_axis
 13923 64aa C0F20003 		movt	r3, #:upper16:pan_axis
 13924 64ae D7F8D020 		ldr	r2, [r7, #208]	@ float
 13925 64b2 9A61     		str	r2, [r3, #24]	@ float
4014:.\console.c   **** 						dummy = WriteAllEEparams();
 13926              		.loc 1 4014 0
 13927 64b4 FFF7FEFF 		bl	WriteAllEEparams
 13928 64b8 0346     		mov	r3, r0
 13929 64ba 87F8D930 		strb	r3, [r7, #217]
4015:.\console.c   **** 						printf(STR_REM_PMKD, (float)pan_axis.param.Kdf.fnum);   /* REM: Pan Motor Kd setted to...*/		
 13930              		.loc 1 4015 0
 13931 64be 40F20003 		movw	r3, #:lower16:pan_axis
 13932 64c2 C0F20003 		movt	r3, #:upper16:pan_axis
 13933 64c6 9B69     		ldr	r3, [r3, #24]	@ float
 13934 64c8 1846     		mov	r0, r3
 13935 64ca FFF7FEFF 		bl	__aeabi_f2d
 13936 64ce 0246     		mov	r2, r0
 13937 64d0 0B46     		mov	r3, r1
 13938 64d2 40F20000 		movw	r0, #:lower16:.LC684
 13939 64d6 C0F20000 		movt	r0, #:upper16:.LC684
 13940 64da FFF7FEFF 		bl	printf
4021:.\console.c   **** 					goto exitpars;
 13941              		.loc 1 4021 0
 13942 64de 00F0F9BF 		b	.L131
 13943              	.L539:
4019:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13944              		.loc 1 4019 0
 13945 64e2 40F20000 		movw	r0, #:lower16:.LC450
 13946 64e6 C0F20000 		movt	r0, #:upper16:.LC450
 13947 64ea FFF7FEFF 		bl	printf
4021:.\console.c   **** 					goto exitpars;
 13948              		.loc 1 4021 0
 13949 64ee 00F0F1BF 		b	.L131
 13950              	.L538:
4027:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdt") == 0)
 13951              		.loc 1 4027 0
 13952 64f2 2E48     		ldr	r0, .L766
 13953 64f4 40F20001 		movw	r1, #:lower16:.LC685
 13954 64f8 C0F20001 		movt	r1, #:upper16:.LC685
 13955 64fc FFF7FEFF 		bl	strcmp
 13956 6500 0346     		mov	r3, r0
 13957 6502 002B     		cmp	r3, #0
 13958 6504 56D1     		bne	.L543
4029:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
 13959              		.loc 1 4029 0
 13960 6506 2A48     		ldr	r0, .L766+4
 13961 6508 FFF7FEFF 		bl	atof
 13962 650c 0246     		mov	r2, r0
 13963 650e 0B46     		mov	r3, r1
 13964 6510 1046     		mov	r0, r2
 13965 6512 1946     		mov	r1, r3
 13966 6514 FFF7FEFF 		bl	__aeabi_d2f
 13967 6518 0346     		mov	r3, r0
 13968 651a C7F8D030 		str	r3, [r7, #208]	@ float
 13969 651e D7F8D000 		ldr	r0, [r7, #208]	@ float
 13970 6522 4FF00001 		mov	r1, #0
 13971 6526 FFF7FEFF 		bl	__aeabi_fcmpge
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 387


 13972 652a 0346     		mov	r3, r0
 13973 652c 002B     		cmp	r3, #0
 13974 652e 34D0     		beq	.L544
 13975              	.L668:
4030:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
 13976              		.loc 1 4030 0
 13977 6530 1F48     		ldr	r0, .L766+4
 13978 6532 FFF7FEFF 		bl	atof
 13979 6536 0246     		mov	r2, r0
 13980 6538 0B46     		mov	r3, r1
 13981 653a 1046     		mov	r0, r2
 13982 653c 1946     		mov	r1, r3
 13983 653e FFF7FEFF 		bl	__aeabi_d2f
 13984 6542 0346     		mov	r3, r0
 13985 6544 C7F8D030 		str	r3, [r7, #208]	@ float
 13986 6548 D7F8D000 		ldr	r0, [r7, #208]	@ float
 13987 654c 4FF00001 		mov	r1, #0
 13988 6550 C4F27A41 		movt	r1, 17530
 13989 6554 FFF7FEFF 		bl	__aeabi_fcmple
 13990 6558 0346     		mov	r3, r0
 13991 655a 002B     		cmp	r3, #0
 13992 655c 1DD0     		beq	.L544
 13993              	.L669:
4032:.\console.c   **** 						tilt_axis.param.Kdf.fnum = Kd;
 13994              		.loc 1 4032 0
 13995 655e 40F20003 		movw	r3, #:lower16:tilt_axis
 13996 6562 C0F20003 		movt	r3, #:upper16:tilt_axis
 13997 6566 D7F8D020 		ldr	r2, [r7, #208]	@ float
 13998 656a 9A61     		str	r2, [r3, #24]	@ float
4035:.\console.c   **** 						dummy = WriteAllEEparams();
 13999              		.loc 1 4035 0
 14000 656c FFF7FEFF 		bl	WriteAllEEparams
 14001 6570 0346     		mov	r3, r0
 14002 6572 87F8D930 		strb	r3, [r7, #217]
4036:.\console.c   **** 						printf(STR_REM_TMKD, (float)tilt_axis.param.Kdf.fnum);   /* REM: Tilt Motor Kd setted to...*/
 14003              		.loc 1 4036 0
 14004 6576 40F20003 		movw	r3, #:lower16:tilt_axis
 14005 657a C0F20003 		movt	r3, #:upper16:tilt_axis
 14006 657e 9B69     		ldr	r3, [r3, #24]	@ float
 14007 6580 1846     		mov	r0, r3
 14008 6582 FFF7FEFF 		bl	__aeabi_f2d
 14009 6586 0246     		mov	r2, r0
 14010 6588 0B46     		mov	r3, r1
 14011 658a 40F20000 		movw	r0, #:lower16:.LC686
 14012 658e C0F20000 		movt	r0, #:upper16:.LC686
 14013 6592 FFF7FEFF 		bl	printf
4042:.\console.c   **** 					goto exitpars;
 14014              		.loc 1 4042 0
 14015 6596 00F09DBF 		b	.L131
 14016              	.L544:
4040:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14017              		.loc 1 4040 0
 14018 659a 40F20000 		movw	r0, #:lower16:.LC450
 14019 659e C0F20000 		movt	r0, #:upper16:.LC450
 14020 65a2 FFF7FEFF 		bl	printf
4042:.\console.c   **** 					goto exitpars;
 14021              		.loc 1 4042 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 388


 14022 65a6 00F095BF 		b	.L131
 14023              	.L767:
 14024 65aa 00BF     		.align	2
 14025              	.L766:
 14026 65ac 0F000000 		.word	actual_cmd+15
 14027 65b0 1E000000 		.word	actual_cmd+30
 14028              	.L543:
4048:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kip") == 0)
 14029              		.loc 1 4048 0
 14030 65b4 B748     		ldr	r0, .L768
 14031 65b6 40F20001 		movw	r1, #:lower16:.LC687
 14032 65ba C0F20001 		movt	r1, #:upper16:.LC687
 14033 65be FFF7FEFF 		bl	strcmp
 14034 65c2 0346     		mov	r3, r0
 14035 65c4 002B     		cmp	r3, #0
 14036 65c6 51D1     		bne	.L548
4050:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
 14037              		.loc 1 4050 0
 14038 65c8 B348     		ldr	r0, .L768+4
 14039 65ca FFF7FEFF 		bl	atof
 14040 65ce 0246     		mov	r2, r0
 14041 65d0 0B46     		mov	r3, r1
 14042 65d2 1046     		mov	r0, r2
 14043 65d4 1946     		mov	r1, r3
 14044 65d6 FFF7FEFF 		bl	__aeabi_d2f
 14045 65da 0346     		mov	r3, r0
 14046 65dc C7F8CC30 		str	r3, [r7, #204]	@ float
 14047 65e0 D7F8CC00 		ldr	r0, [r7, #204]	@ float
 14048 65e4 4FF00001 		mov	r1, #0
 14049 65e8 FFF7FEFF 		bl	__aeabi_fcmpge
 14050 65ec 0346     		mov	r3, r0
 14051 65ee 002B     		cmp	r3, #0
 14052 65f0 34D0     		beq	.L549
 14053              	.L670:
4051:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
 14054              		.loc 1 4051 0
 14055 65f2 A948     		ldr	r0, .L768+4
 14056 65f4 FFF7FEFF 		bl	atof
 14057 65f8 0246     		mov	r2, r0
 14058 65fa 0B46     		mov	r3, r1
 14059 65fc 1046     		mov	r0, r2
 14060 65fe 1946     		mov	r1, r3
 14061 6600 FFF7FEFF 		bl	__aeabi_d2f
 14062 6604 0346     		mov	r3, r0
 14063 6606 C7F8CC30 		str	r3, [r7, #204]	@ float
 14064 660a D7F8CC00 		ldr	r0, [r7, #204]	@ float
 14065 660e 4FF00001 		mov	r1, #0
 14066 6612 C4F2C821 		movt	r1, 17096
 14067 6616 FFF7FEFF 		bl	__aeabi_fcmple
 14068 661a 0346     		mov	r3, r0
 14069 661c 002B     		cmp	r3, #0
 14070 661e 1DD0     		beq	.L549
 14071              	.L671:
4053:.\console.c   **** 						pan_axis.param.Kif.fnum = Ki;
 14072              		.loc 1 4053 0
 14073 6620 40F20003 		movw	r3, #:lower16:pan_axis
 14074 6624 C0F20003 		movt	r3, #:upper16:pan_axis
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 389


 14075 6628 D7F8CC20 		ldr	r2, [r7, #204]	@ float
 14076 662c DA61     		str	r2, [r3, #28]	@ float
4056:.\console.c   **** 						dummy = WriteAllEEparams();
 14077              		.loc 1 4056 0
 14078 662e FFF7FEFF 		bl	WriteAllEEparams
 14079 6632 0346     		mov	r3, r0
 14080 6634 87F8D930 		strb	r3, [r7, #217]
4057:.\console.c   **** 						printf(STR_REM_PMKI, (float)pan_axis.param.Kif.fnum);   /* REM: Pan Motor Ki setted to...*/		
 14081              		.loc 1 4057 0
 14082 6638 40F20003 		movw	r3, #:lower16:pan_axis
 14083 663c C0F20003 		movt	r3, #:upper16:pan_axis
 14084 6640 DB69     		ldr	r3, [r3, #28]	@ float
 14085 6642 1846     		mov	r0, r3
 14086 6644 FFF7FEFF 		bl	__aeabi_f2d
 14087 6648 0246     		mov	r2, r0
 14088 664a 0B46     		mov	r3, r1
 14089 664c 40F20000 		movw	r0, #:lower16:.LC688
 14090 6650 C0F20000 		movt	r0, #:upper16:.LC688
 14091 6654 FFF7FEFF 		bl	printf
4063:.\console.c   **** 					goto exitpars;
 14092              		.loc 1 4063 0
 14093 6658 00F03CBF 		b	.L131
 14094              	.L549:
4061:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14095              		.loc 1 4061 0
 14096 665c 40F20000 		movw	r0, #:lower16:.LC450
 14097 6660 C0F20000 		movt	r0, #:upper16:.LC450
 14098 6664 FFF7FEFF 		bl	printf
4063:.\console.c   **** 					goto exitpars;
 14099              		.loc 1 4063 0
 14100 6668 00F034BF 		b	.L131
 14101              	.L548:
4069:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kit") == 0)
 14102              		.loc 1 4069 0
 14103 666c 8948     		ldr	r0, .L768
 14104 666e 40F20001 		movw	r1, #:lower16:.LC689
 14105 6672 C0F20001 		movt	r1, #:upper16:.LC689
 14106 6676 FFF7FEFF 		bl	strcmp
 14107 667a 0346     		mov	r3, r0
 14108 667c 002B     		cmp	r3, #0
 14109 667e 51D1     		bne	.L553
4071:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
 14110              		.loc 1 4071 0
 14111 6680 8548     		ldr	r0, .L768+4
 14112 6682 FFF7FEFF 		bl	atof
 14113 6686 0246     		mov	r2, r0
 14114 6688 0B46     		mov	r3, r1
 14115 668a 1046     		mov	r0, r2
 14116 668c 1946     		mov	r1, r3
 14117 668e FFF7FEFF 		bl	__aeabi_d2f
 14118 6692 0346     		mov	r3, r0
 14119 6694 C7F8CC30 		str	r3, [r7, #204]	@ float
 14120 6698 D7F8CC00 		ldr	r0, [r7, #204]	@ float
 14121 669c 4FF00001 		mov	r1, #0
 14122 66a0 FFF7FEFF 		bl	__aeabi_fcmpge
 14123 66a4 0346     		mov	r3, r0
 14124 66a6 002B     		cmp	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 390


 14125 66a8 34D0     		beq	.L554
 14126              	.L672:
4072:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
 14127              		.loc 1 4072 0
 14128 66aa 7B48     		ldr	r0, .L768+4
 14129 66ac FFF7FEFF 		bl	atof
 14130 66b0 0246     		mov	r2, r0
 14131 66b2 0B46     		mov	r3, r1
 14132 66b4 1046     		mov	r0, r2
 14133 66b6 1946     		mov	r1, r3
 14134 66b8 FFF7FEFF 		bl	__aeabi_d2f
 14135 66bc 0346     		mov	r3, r0
 14136 66be C7F8CC30 		str	r3, [r7, #204]	@ float
 14137 66c2 D7F8CC00 		ldr	r0, [r7, #204]	@ float
 14138 66c6 4FF00001 		mov	r1, #0
 14139 66ca C4F2C821 		movt	r1, 17096
 14140 66ce FFF7FEFF 		bl	__aeabi_fcmple
 14141 66d2 0346     		mov	r3, r0
 14142 66d4 002B     		cmp	r3, #0
 14143 66d6 1DD0     		beq	.L554
 14144              	.L673:
4074:.\console.c   **** 						tilt_axis.param.Kif.fnum = Ki;
 14145              		.loc 1 4074 0
 14146 66d8 40F20003 		movw	r3, #:lower16:tilt_axis
 14147 66dc C0F20003 		movt	r3, #:upper16:tilt_axis
 14148 66e0 D7F8CC20 		ldr	r2, [r7, #204]	@ float
 14149 66e4 DA61     		str	r2, [r3, #28]	@ float
4077:.\console.c   **** 						dummy = WriteAllEEparams();
 14150              		.loc 1 4077 0
 14151 66e6 FFF7FEFF 		bl	WriteAllEEparams
 14152 66ea 0346     		mov	r3, r0
 14153 66ec 87F8D930 		strb	r3, [r7, #217]
4078:.\console.c   **** 						printf(STR_REM_TMKI, (float)tilt_axis.param.Kif.fnum);   /* REM: Tilt Motor Ki setted to...*/
 14154              		.loc 1 4078 0
 14155 66f0 40F20003 		movw	r3, #:lower16:tilt_axis
 14156 66f4 C0F20003 		movt	r3, #:upper16:tilt_axis
 14157 66f8 DB69     		ldr	r3, [r3, #28]	@ float
 14158 66fa 1846     		mov	r0, r3
 14159 66fc FFF7FEFF 		bl	__aeabi_f2d
 14160 6700 0246     		mov	r2, r0
 14161 6702 0B46     		mov	r3, r1
 14162 6704 40F20000 		movw	r0, #:lower16:.LC690
 14163 6708 C0F20000 		movt	r0, #:upper16:.LC690
 14164 670c FFF7FEFF 		bl	printf
4084:.\console.c   **** 					goto exitpars;
 14165              		.loc 1 4084 0
 14166 6710 00F0E0BE 		b	.L131
 14167              	.L554:
4082:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14168              		.loc 1 4082 0
 14169 6714 40F20000 		movw	r0, #:lower16:.LC450
 14170 6718 C0F20000 		movt	r0, #:upper16:.LC450
 14171 671c FFF7FEFF 		bl	printf
4084:.\console.c   **** 					goto exitpars;
 14172              		.loc 1 4084 0
 14173 6720 00F0D8BE 		b	.L131
 14174              	.L553:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 391


4090:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksip") == 0)
 14175              		.loc 1 4090 0
 14176 6724 5B48     		ldr	r0, .L768
 14177 6726 40F20001 		movw	r1, #:lower16:.LC691
 14178 672a C0F20001 		movt	r1, #:upper16:.LC691
 14179 672e FFF7FEFF 		bl	strcmp
 14180 6732 0346     		mov	r3, r0
 14181 6734 002B     		cmp	r3, #0
 14182 6736 51D1     		bne	.L558
4092:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
 14183              		.loc 1 4092 0
 14184 6738 5748     		ldr	r0, .L768+4
 14185 673a FFF7FEFF 		bl	atof
 14186 673e 0246     		mov	r2, r0
 14187 6740 0B46     		mov	r3, r1
 14188 6742 1046     		mov	r0, r2
 14189 6744 1946     		mov	r1, r3
 14190 6746 FFF7FEFF 		bl	__aeabi_d2f
 14191 674a 0346     		mov	r3, r0
 14192 674c C7F8C830 		str	r3, [r7, #200]	@ float
 14193 6750 D7F8C800 		ldr	r0, [r7, #200]	@ float
 14194 6754 4FF00001 		mov	r1, #0
 14195 6758 FFF7FEFF 		bl	__aeabi_fcmpge
 14196 675c 0346     		mov	r3, r0
 14197 675e 002B     		cmp	r3, #0
 14198 6760 34D0     		beq	.L559
 14199              	.L674:
4093:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
 14200              		.loc 1 4093 0
 14201 6762 4D48     		ldr	r0, .L768+4
 14202 6764 FFF7FEFF 		bl	atof
 14203 6768 0246     		mov	r2, r0
 14204 676a 0B46     		mov	r3, r1
 14205 676c 1046     		mov	r0, r2
 14206 676e 1946     		mov	r1, r3
 14207 6770 FFF7FEFF 		bl	__aeabi_d2f
 14208 6774 0346     		mov	r3, r0
 14209 6776 C7F8C830 		str	r3, [r7, #200]	@ float
 14210 677a D7F8C800 		ldr	r0, [r7, #200]	@ float
 14211 677e 4FF41051 		mov	r1, #9216
 14212 6782 C4F67411 		movt	r1, 18804
 14213 6786 FFF7FEFF 		bl	__aeabi_fcmple
 14214 678a 0346     		mov	r3, r0
 14215 678c 002B     		cmp	r3, #0
 14216 678e 1DD0     		beq	.L559
 14217              	.L675:
4095:.\console.c   **** 						pan_axis.param.Ksif.fnum = Ksi;
 14218              		.loc 1 4095 0
 14219 6790 40F20003 		movw	r3, #:lower16:pan_axis
 14220 6794 C0F20003 		movt	r3, #:upper16:pan_axis
 14221 6798 D7F8C820 		ldr	r2, [r7, #200]	@ float
 14222 679c 1A62     		str	r2, [r3, #32]	@ float
4098:.\console.c   **** 						dummy = WriteAllEEparams();
 14223              		.loc 1 4098 0
 14224 679e FFF7FEFF 		bl	WriteAllEEparams
 14225 67a2 0346     		mov	r3, r0
 14226 67a4 87F8D930 		strb	r3, [r7, #217]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 392


4099:.\console.c   **** 						printf(STR_REM_PMKS, (float)pan_axis.param.Ksif.fnum);   /* REM: Pan Motor Ksi setted to...*/
 14227              		.loc 1 4099 0
 14228 67a8 40F20003 		movw	r3, #:lower16:pan_axis
 14229 67ac C0F20003 		movt	r3, #:upper16:pan_axis
 14230 67b0 1B6A     		ldr	r3, [r3, #32]	@ float
 14231 67b2 1846     		mov	r0, r3
 14232 67b4 FFF7FEFF 		bl	__aeabi_f2d
 14233 67b8 0246     		mov	r2, r0
 14234 67ba 0B46     		mov	r3, r1
 14235 67bc 40F20000 		movw	r0, #:lower16:.LC692
 14236 67c0 C0F20000 		movt	r0, #:upper16:.LC692
 14237 67c4 FFF7FEFF 		bl	printf
4105:.\console.c   **** 					goto exitpars;
 14238              		.loc 1 4105 0
 14239 67c8 00F084BE 		b	.L131
 14240              	.L559:
4103:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14241              		.loc 1 4103 0
 14242 67cc 40F20000 		movw	r0, #:lower16:.LC450
 14243 67d0 C0F20000 		movt	r0, #:upper16:.LC450
 14244 67d4 FFF7FEFF 		bl	printf
4105:.\console.c   **** 					goto exitpars;
 14245              		.loc 1 4105 0
 14246 67d8 00F07CBE 		b	.L131
 14247              	.L558:
4111:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksit") == 0)
 14248              		.loc 1 4111 0
 14249 67dc 2D48     		ldr	r0, .L768
 14250 67de 40F20001 		movw	r1, #:lower16:.LC693
 14251 67e2 C0F20001 		movt	r1, #:upper16:.LC693
 14252 67e6 FFF7FEFF 		bl	strcmp
 14253 67ea 0346     		mov	r3, r0
 14254 67ec 002B     		cmp	r3, #0
 14255 67ee 55D1     		bne	.L563
4113:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
 14256              		.loc 1 4113 0
 14257 67f0 2948     		ldr	r0, .L768+4
 14258 67f2 FFF7FEFF 		bl	atof
 14259 67f6 0246     		mov	r2, r0
 14260 67f8 0B46     		mov	r3, r1
 14261 67fa 1046     		mov	r0, r2
 14262 67fc 1946     		mov	r1, r3
 14263 67fe FFF7FEFF 		bl	__aeabi_d2f
 14264 6802 0346     		mov	r3, r0
 14265 6804 C7F8C830 		str	r3, [r7, #200]	@ float
 14266 6808 D7F8C800 		ldr	r0, [r7, #200]	@ float
 14267 680c 4FF00001 		mov	r1, #0
 14268 6810 FFF7FEFF 		bl	__aeabi_fcmpge
 14269 6814 0346     		mov	r3, r0
 14270 6816 002B     		cmp	r3, #0
 14271 6818 34D0     		beq	.L564
 14272              	.L676:
4114:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
 14273              		.loc 1 4114 0
 14274 681a 1F48     		ldr	r0, .L768+4
 14275 681c FFF7FEFF 		bl	atof
 14276 6820 0246     		mov	r2, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 393


 14277 6822 0B46     		mov	r3, r1
 14278 6824 1046     		mov	r0, r2
 14279 6826 1946     		mov	r1, r3
 14280 6828 FFF7FEFF 		bl	__aeabi_d2f
 14281 682c 0346     		mov	r3, r0
 14282 682e C7F8C830 		str	r3, [r7, #200]	@ float
 14283 6832 D7F8C800 		ldr	r0, [r7, #200]	@ float
 14284 6836 4FF41051 		mov	r1, #9216
 14285 683a C4F67411 		movt	r1, 18804
 14286 683e FFF7FEFF 		bl	__aeabi_fcmple
 14287 6842 0346     		mov	r3, r0
 14288 6844 002B     		cmp	r3, #0
 14289 6846 1DD0     		beq	.L564
 14290              	.L677:
4116:.\console.c   **** 						tilt_axis.param.Ksif.fnum = Ksi;
 14291              		.loc 1 4116 0
 14292 6848 40F20003 		movw	r3, #:lower16:tilt_axis
 14293 684c C0F20003 		movt	r3, #:upper16:tilt_axis
 14294 6850 D7F8C820 		ldr	r2, [r7, #200]	@ float
 14295 6854 1A62     		str	r2, [r3, #32]	@ float
4119:.\console.c   **** 						dummy = WriteAllEEparams();
 14296              		.loc 1 4119 0
 14297 6856 FFF7FEFF 		bl	WriteAllEEparams
 14298 685a 0346     		mov	r3, r0
 14299 685c 87F8D930 		strb	r3, [r7, #217]
4120:.\console.c   **** 						printf(STR_REM_TMKS, (float)tilt_axis.param.Ksif.fnum);   /* REM: Tilt Motor Ksi setted to...
 14300              		.loc 1 4120 0
 14301 6860 40F20003 		movw	r3, #:lower16:tilt_axis
 14302 6864 C0F20003 		movt	r3, #:upper16:tilt_axis
 14303 6868 1B6A     		ldr	r3, [r3, #32]	@ float
 14304 686a 1846     		mov	r0, r3
 14305 686c FFF7FEFF 		bl	__aeabi_f2d
 14306 6870 0246     		mov	r2, r0
 14307 6872 0B46     		mov	r3, r1
 14308 6874 40F20000 		movw	r0, #:lower16:.LC694
 14309 6878 C0F20000 		movt	r0, #:upper16:.LC694
 14310 687c FFF7FEFF 		bl	printf
4126:.\console.c   **** 					goto exitpars;
 14311              		.loc 1 4126 0
 14312 6880 00F028BE 		b	.L131
 14313              	.L564:
4124:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14314              		.loc 1 4124 0
 14315 6884 40F20000 		movw	r0, #:lower16:.LC450
 14316 6888 C0F20000 		movt	r0, #:upper16:.LC450
 14317 688c FFF7FEFF 		bl	printf
4126:.\console.c   **** 					goto exitpars;
 14318              		.loc 1 4126 0
 14319 6890 00F020BE 		b	.L131
 14320              	.L769:
 14321              		.align	2
 14322              	.L768:
 14323 6894 0F000000 		.word	actual_cmd+15
 14324 6898 1E000000 		.word	actual_cmd+30
 14325              	.L563:
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
 14326              		.loc 1 4132 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 394


 14327 689c B148     		ldr	r0, .L770
 14328 689e 40F20001 		movw	r1, #:lower16:.LC695
 14329 68a2 C0F20001 		movt	r1, #:upper16:.LC695
 14330 68a6 FFF7FEFF 		bl	strcmp
 14331 68aa 0346     		mov	r3, r0
 14332 68ac 002B     		cmp	r3, #0
 14333 68ae 09D0     		beq	.L568
4133:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaxis") == 0))
 14334              		.loc 1 4133 0 discriminator 1
 14335 68b0 AC48     		ldr	r0, .L770
 14336 68b2 40F20001 		movw	r1, #:lower16:.LC696
 14337 68b6 C0F20001 		movt	r1, #:upper16:.LC696
 14338 68ba FFF7FEFF 		bl	strcmp
 14339 68be 0346     		mov	r3, r0
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
 14340              		.loc 1 4132 0 discriminator 1
 14341 68c0 002B     		cmp	r3, #0
 14342 68c2 78D1     		bne	.L569
 14343              	.L568:
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
 14344              		.loc 1 4135 0
 14345 68c4 A848     		ldr	r0, .L770+4
 14346 68c6 40F20001 		movw	r1, #:lower16:.LC697
 14347 68ca C0F20001 		movt	r1, #:upper16:.LC697
 14348 68ce FFF7FEFF 		bl	strcmp
 14349 68d2 0346     		mov	r3, r0
 14350 68d4 002B     		cmp	r3, #0
 14351 68d6 09D0     		beq	.L570
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
 14352              		.loc 1 4135 0 is_stmt 0 discriminator 1
 14353 68d8 A348     		ldr	r0, .L770+4
 14354 68da 40F20001 		movw	r1, #:lower16:.LC698
 14355 68de C0F20001 		movt	r1, #:upper16:.LC698
 14356 68e2 FFF7FEFF 		bl	strcmp
 14357 68e6 0346     		mov	r3, r0
 14358 68e8 002B     		cmp	r3, #0
 14359 68ea 5CD1     		bne	.L571
 14360              	.L570:
4137:.\console.c   **** 						if (strcmp(actual_cmd.number1, "pan") == 0)
 14361              		.loc 1 4137 0 is_stmt 1
 14362 68ec 9E48     		ldr	r0, .L770+4
 14363 68ee 40F20001 		movw	r1, #:lower16:.LC697
 14364 68f2 C0F20001 		movt	r1, #:upper16:.LC697
 14365 68f6 FFF7FEFF 		bl	strcmp
 14366 68fa 0346     		mov	r3, r0
 14367 68fc 002B     		cmp	r3, #0
 14368 68fe 20D1     		bne	.L572
4140:.\console.c   **** 							Selected_ANAOUT=&pan_axis;
 14369              		.loc 1 4140 0
 14370 6900 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 14371 6904 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 14372 6908 40F20002 		movw	r2, #:lower16:pan_axis
 14373 690c C0F20002 		movt	r2, #:upper16:pan_axis
 14374 6910 1A60     		str	r2, [r3, #0]
4141:.\console.c   **** 							printf(STR_REM_ANAXP);   /* REM: Anaout Axis setted to PAN*/
 14375              		.loc 1 4141 0
 14376 6912 40F20000 		movw	r0, #:lower16:.LC699
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 395


 14377 6916 C0F20000 		movt	r0, #:upper16:.LC699
 14378 691a FFF7FEFF 		bl	puts
4143:.\console.c   **** 							CyDelay(100);
 14379              		.loc 1 4143 0
 14380 691e 4FF06400 		mov	r0, #100
 14381 6922 FFF7FEFF 		bl	CyDelay
4144:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
 14382              		.loc 1 4144 0
 14383 6926 40F20000 		movw	r0, #:lower16:.LC700
 14384 692a C0F20000 		movt	r0, #:upper16:.LC700
 14385 692e FFF7FEFF 		bl	puts
4146:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();							
 14386              		.loc 1 4146 0
 14387 6932 FFF7FEFF 		bl	GetAnaposOffsetZero
 14388 6936 0246     		mov	r2, r0
 14389 6938 40F20003 		movw	r3, #:lower16:anapos_offset
 14390 693c C0F20003 		movt	r3, #:upper16:anapos_offset
 14391 6940 1A60     		str	r2, [r3, #0]
 14392              	.L572:
4149:.\console.c   **** 						if (strcmp(actual_cmd.number1, "tilt") == 0)
 14393              		.loc 1 4149 0
 14394 6942 8948     		ldr	r0, .L770+4
 14395 6944 40F20001 		movw	r1, #:lower16:.LC698
 14396 6948 C0F20001 		movt	r1, #:upper16:.LC698
 14397 694c FFF7FEFF 		bl	strcmp
 14398 6950 0346     		mov	r3, r0
 14399 6952 002B     		cmp	r3, #0
 14400 6954 20D1     		bne	.L573
4152:.\console.c   **** 							Selected_ANAOUT=&tilt_axis;
 14401              		.loc 1 4152 0
 14402 6956 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 14403 695a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 14404 695e 40F20002 		movw	r2, #:lower16:tilt_axis
 14405 6962 C0F20002 		movt	r2, #:upper16:tilt_axis
 14406 6966 1A60     		str	r2, [r3, #0]
4153:.\console.c   **** 							printf(STR_REM_ANAXT);   /* REM: Anaout Axis setted to TILT*/
 14407              		.loc 1 4153 0
 14408 6968 40F20000 		movw	r0, #:lower16:.LC701
 14409 696c C0F20000 		movt	r0, #:upper16:.LC701
 14410 6970 FFF7FEFF 		bl	puts
4155:.\console.c   **** 							CyDelay(100);
 14411              		.loc 1 4155 0
 14412 6974 4FF06400 		mov	r0, #100
 14413 6978 FFF7FEFF 		bl	CyDelay
4156:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
 14414              		.loc 1 4156 0
 14415 697c 40F20000 		movw	r0, #:lower16:.LC700
 14416 6980 C0F20000 		movt	r0, #:upper16:.LC700
 14417 6984 FFF7FEFF 		bl	puts
4158:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();	
 14418              		.loc 1 4158 0
 14419 6988 FFF7FEFF 		bl	GetAnaposOffsetZero
 14420 698c 0246     		mov	r2, r0
 14421 698e 40F20003 		movw	r3, #:lower16:anapos_offset
 14422 6992 C0F20003 		movt	r3, #:upper16:anapos_offset
 14423 6996 1A60     		str	r2, [r3, #0]
 14424              	.L573:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 396


4162:.\console.c   **** 						dummy = WriteAllEEparams();
 14425              		.loc 1 4162 0
 14426 6998 FFF7FEFF 		bl	WriteAllEEparams
 14427 699c 0346     		mov	r3, r0
 14428 699e 87F8D930 		strb	r3, [r7, #217]
4168:.\console.c   **** 					goto exitpars;
 14429              		.loc 1 4168 0
 14430 69a2 00F097BD 		b	.L131
 14431              	.L571:
4166:.\console.c   **** 						printf(STR_ERROR6);			/* ERROR6: Axis may be [pan,tilt,roll,all] */
 14432              		.loc 1 4166 0
 14433 69a6 40F20000 		movw	r0, #:lower16:.LC702
 14434 69aa C0F20000 		movt	r0, #:upper16:.LC702
 14435 69ae FFF7FEFF 		bl	printf
4168:.\console.c   **** 					goto exitpars;
 14436              		.loc 1 4168 0
 14437 69b2 00F08FBD 		b	.L131
 14438              	.L569:
4174:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colorp") == 0)
 14439              		.loc 1 4174 0
 14440 69b6 6B48     		ldr	r0, .L770
 14441 69b8 40F20001 		movw	r1, #:lower16:.LC703
 14442 69bc C0F20001 		movt	r1, #:upper16:.LC703
 14443 69c0 FFF7FEFF 		bl	strcmp
 14444 69c4 0346     		mov	r3, r0
 14445 69c6 002B     		cmp	r3, #0
 14446 69c8 32D1     		bne	.L575
4176:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
 14447              		.loc 1 4176 0
 14448 69ca 6748     		ldr	r0, .L770+4
 14449 69cc FFF7FEFF 		bl	atoi
 14450 69d0 0346     		mov	r3, r0
 14451 69d2 87F8C730 		strb	r3, [r7, #199]
4177:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
 14452              		.loc 1 4177 0
 14453 69d6 6448     		ldr	r0, .L770+4
 14454 69d8 FFF7FEFF 		bl	atoi
 14455 69dc 0346     		mov	r3, r0
 14456 69de 87F8C730 		strb	r3, [r7, #199]
 14457 69e2 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 14458 69e6 082B     		cmp	r3, #8
 14459 69e8 1AD8     		bhi	.L576
4179:.\console.c   **** 						pan_axis.param.color = color;
 14460              		.loc 1 4179 0
 14461 69ea 40F20003 		movw	r3, #:lower16:pan_axis
 14462 69ee C0F20003 		movt	r3, #:upper16:pan_axis
 14463 69f2 97F8C720 		ldrb	r2, [r7, #199]
 14464 69f6 83F82C20 		strb	r2, [r3, #44]
4182:.\console.c   **** 						dummy = WriteAllEEparams();
 14465              		.loc 1 4182 0
 14466 69fa FFF7FEFF 		bl	WriteAllEEparams
 14467 69fe 0346     		mov	r3, r0
 14468 6a00 87F8D930 		strb	r3, [r7, #217]
4183:.\console.c   **** 						printf(STR_REM_SCOL);   /* REM: pan axis color setted to...*/
 14469              		.loc 1 4183 0
 14470 6a04 40F20000 		movw	r0, #:lower16:.LC704
 14471 6a08 C0F20000 		movt	r0, #:upper16:.LC704
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 397


 14472 6a0c FFF7FEFF 		bl	printf
4184:.\console.c   **** 						ShowParamsColor(&pan_axis);
 14473              		.loc 1 4184 0
 14474 6a10 40F20000 		movw	r0, #:lower16:pan_axis
 14475 6a14 C0F20000 		movt	r0, #:upper16:pan_axis
 14476 6a18 FFF7FEFF 		bl	ShowParamsColor
4190:.\console.c   **** 					goto exitpars;
 14477              		.loc 1 4190 0
 14478 6a1c 00F05ABD 		b	.L131
 14479              	.L576:
4188:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14480              		.loc 1 4188 0
 14481 6a20 40F20000 		movw	r0, #:lower16:.LC450
 14482 6a24 C0F20000 		movt	r0, #:upper16:.LC450
 14483 6a28 FFF7FEFF 		bl	printf
4190:.\console.c   **** 					goto exitpars;
 14484              		.loc 1 4190 0
 14485 6a2c 00F052BD 		b	.L131
 14486              	.L575:
4196:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colort") == 0)
 14487              		.loc 1 4196 0
 14488 6a30 4C48     		ldr	r0, .L770
 14489 6a32 40F20001 		movw	r1, #:lower16:.LC705
 14490 6a36 C0F20001 		movt	r1, #:upper16:.LC705
 14491 6a3a FFF7FEFF 		bl	strcmp
 14492 6a3e 0346     		mov	r3, r0
 14493 6a40 002B     		cmp	r3, #0
 14494 6a42 32D1     		bne	.L578
4198:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
 14495              		.loc 1 4198 0
 14496 6a44 4848     		ldr	r0, .L770+4
 14497 6a46 FFF7FEFF 		bl	atoi
 14498 6a4a 0346     		mov	r3, r0
 14499 6a4c 87F8C730 		strb	r3, [r7, #199]
4199:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
 14500              		.loc 1 4199 0
 14501 6a50 4548     		ldr	r0, .L770+4
 14502 6a52 FFF7FEFF 		bl	atoi
 14503 6a56 0346     		mov	r3, r0
 14504 6a58 87F8C730 		strb	r3, [r7, #199]
 14505 6a5c 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 14506 6a60 082B     		cmp	r3, #8
 14507 6a62 1AD8     		bhi	.L579
4201:.\console.c   **** 						tilt_axis.param.color = color;
 14508              		.loc 1 4201 0
 14509 6a64 40F20003 		movw	r3, #:lower16:tilt_axis
 14510 6a68 C0F20003 		movt	r3, #:upper16:tilt_axis
 14511 6a6c 97F8C720 		ldrb	r2, [r7, #199]
 14512 6a70 83F82C20 		strb	r2, [r3, #44]
4204:.\console.c   **** 						dummy = WriteAllEEparams();
 14513              		.loc 1 4204 0
 14514 6a74 FFF7FEFF 		bl	WriteAllEEparams
 14515 6a78 0346     		mov	r3, r0
 14516 6a7a 87F8D930 		strb	r3, [r7, #217]
4205:.\console.c   **** 						printf(STR_REM_SCOLT);   /* REM: tilt axis color setted to...*/
 14517              		.loc 1 4205 0
 14518 6a7e 40F20000 		movw	r0, #:lower16:.LC706
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 398


 14519 6a82 C0F20000 		movt	r0, #:upper16:.LC706
 14520 6a86 FFF7FEFF 		bl	printf
4206:.\console.c   **** 						ShowParamsColor(&tilt_axis);						
 14521              		.loc 1 4206 0
 14522 6a8a 40F20000 		movw	r0, #:lower16:tilt_axis
 14523 6a8e C0F20000 		movt	r0, #:upper16:tilt_axis
 14524 6a92 FFF7FEFF 		bl	ShowParamsColor
4212:.\console.c   **** 					goto exitpars;
 14525              		.loc 1 4212 0
 14526 6a96 00F01DBD 		b	.L131
 14527              	.L579:
4210:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14528              		.loc 1 4210 0
 14529 6a9a 40F20000 		movw	r0, #:lower16:.LC450
 14530 6a9e C0F20000 		movt	r0, #:upper16:.LC450
 14531 6aa2 FFF7FEFF 		bl	printf
4212:.\console.c   **** 					goto exitpars;
 14532              		.loc 1 4212 0
 14533 6aa6 00F015BD 		b	.L131
 14534              	.L578:
4218:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopfp") == 0)
 14535              		.loc 1 4218 0
 14536 6aaa 2E48     		ldr	r0, .L770
 14537 6aac 40F20001 		movw	r1, #:lower16:.LC707
 14538 6ab0 C0F20001 		movt	r1, #:upper16:.LC707
 14539 6ab4 FFF7FEFF 		bl	strcmp
 14540 6ab8 0346     		mov	r3, r0
 14541 6aba 002B     		cmp	r3, #0
 14542 6abc 56D1     		bne	.L581
4220:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
 14543              		.loc 1 4220 0
 14544 6abe 2A48     		ldr	r0, .L770+4
 14545 6ac0 FFF7FEFF 		bl	atof
 14546 6ac4 0246     		mov	r2, r0
 14547 6ac6 0B46     		mov	r3, r1
 14548 6ac8 1046     		mov	r0, r2
 14549 6aca 1946     		mov	r1, r3
 14550 6acc FFF7FEFF 		bl	__aeabi_d2f
 14551 6ad0 0346     		mov	r3, r0
 14552 6ad2 C7F8C030 		str	r3, [r7, #192]	@ float
 14553 6ad6 D7F8C000 		ldr	r0, [r7, #192]	@ float
 14554 6ada 4FF00001 		mov	r1, #0
 14555 6ade FFF7FEFF 		bl	__aeabi_fcmpge
 14556 6ae2 0346     		mov	r3, r0
 14557 6ae4 002B     		cmp	r3, #0
 14558 6ae6 34D0     		beq	.L582
 14559              	.L678:
4221:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
 14560              		.loc 1 4221 0
 14561 6ae8 1F48     		ldr	r0, .L770+4
 14562 6aea FFF7FEFF 		bl	atof
 14563 6aee 0246     		mov	r2, r0
 14564 6af0 0B46     		mov	r3, r1
 14565 6af2 1046     		mov	r0, r2
 14566 6af4 1946     		mov	r1, r3
 14567 6af6 FFF7FEFF 		bl	__aeabi_d2f
 14568 6afa 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 399


 14569 6afc C7F8C030 		str	r3, [r7, #192]	@ float
 14570 6b00 D7F8C000 		ldr	r0, [r7, #192]	@ float
 14571 6b04 4FF00001 		mov	r1, #0
 14572 6b08 C4F22011 		movt	r1, 16672
 14573 6b0c FFF7FEFF 		bl	__aeabi_fcmple
 14574 6b10 0346     		mov	r3, r0
 14575 6b12 002B     		cmp	r3, #0
 14576 6b14 1DD0     		beq	.L582
 14577              	.L679:
4223:.\console.c   **** 						pan_axis.param.Kopf.fnum = Kopf;
 14578              		.loc 1 4223 0
 14579 6b16 40F20003 		movw	r3, #:lower16:pan_axis
 14580 6b1a C0F20003 		movt	r3, #:upper16:pan_axis
 14581 6b1e D7F8C020 		ldr	r2, [r7, #192]	@ float
 14582 6b22 5A62     		str	r2, [r3, #36]	@ float
4226:.\console.c   **** 						dummy = WriteAllEEparams();
 14583              		.loc 1 4226 0
 14584 6b24 FFF7FEFF 		bl	WriteAllEEparams
 14585 6b28 0346     		mov	r3, r0
 14586 6b2a 87F8D930 		strb	r3, [r7, #217]
4227:.\console.c   **** 						printf(STR_REM_PKOF, (float)pan_axis.param.Kopf.fnum);   /* REM: Pan Motor Kopf setted to...*
 14587              		.loc 1 4227 0
 14588 6b2e 40F20003 		movw	r3, #:lower16:pan_axis
 14589 6b32 C0F20003 		movt	r3, #:upper16:pan_axis
 14590 6b36 5B6A     		ldr	r3, [r3, #36]	@ float
 14591 6b38 1846     		mov	r0, r3
 14592 6b3a FFF7FEFF 		bl	__aeabi_f2d
 14593 6b3e 0246     		mov	r2, r0
 14594 6b40 0B46     		mov	r3, r1
 14595 6b42 40F20000 		movw	r0, #:lower16:.LC708
 14596 6b46 C0F20000 		movt	r0, #:upper16:.LC708
 14597 6b4a FFF7FEFF 		bl	printf
4233:.\console.c   **** 					goto exitpars;
 14598              		.loc 1 4233 0
 14599 6b4e 00F0C1BC 		b	.L131
 14600              	.L582:
4231:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14601              		.loc 1 4231 0
 14602 6b52 40F20000 		movw	r0, #:lower16:.LC450
 14603 6b56 C0F20000 		movt	r0, #:upper16:.LC450
 14604 6b5a FFF7FEFF 		bl	printf
4233:.\console.c   **** 					goto exitpars;
 14605              		.loc 1 4233 0
 14606 6b5e 00F0B9BC 		b	.L131
 14607              	.L771:
 14608 6b62 00BF     		.align	2
 14609              	.L770:
 14610 6b64 0F000000 		.word	actual_cmd+15
 14611 6b68 1E000000 		.word	actual_cmd+30
 14612              	.L581:
4239:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopft") == 0)
 14613              		.loc 1 4239 0
 14614 6b6c AD48     		ldr	r0, .L772
 14615 6b6e 40F20001 		movw	r1, #:lower16:.LC709
 14616 6b72 C0F20001 		movt	r1, #:upper16:.LC709
 14617 6b76 FFF7FEFF 		bl	strcmp
 14618 6b7a 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 400


 14619 6b7c 002B     		cmp	r3, #0
 14620 6b7e 51D1     		bne	.L586
4241:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
 14621              		.loc 1 4241 0
 14622 6b80 A948     		ldr	r0, .L772+4
 14623 6b82 FFF7FEFF 		bl	atof
 14624 6b86 0246     		mov	r2, r0
 14625 6b88 0B46     		mov	r3, r1
 14626 6b8a 1046     		mov	r0, r2
 14627 6b8c 1946     		mov	r1, r3
 14628 6b8e FFF7FEFF 		bl	__aeabi_d2f
 14629 6b92 0346     		mov	r3, r0
 14630 6b94 C7F8C030 		str	r3, [r7, #192]	@ float
 14631 6b98 D7F8C000 		ldr	r0, [r7, #192]	@ float
 14632 6b9c 4FF00001 		mov	r1, #0
 14633 6ba0 FFF7FEFF 		bl	__aeabi_fcmpge
 14634 6ba4 0346     		mov	r3, r0
 14635 6ba6 002B     		cmp	r3, #0
 14636 6ba8 34D0     		beq	.L587
 14637              	.L680:
4242:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
 14638              		.loc 1 4242 0
 14639 6baa 9F48     		ldr	r0, .L772+4
 14640 6bac FFF7FEFF 		bl	atof
 14641 6bb0 0246     		mov	r2, r0
 14642 6bb2 0B46     		mov	r3, r1
 14643 6bb4 1046     		mov	r0, r2
 14644 6bb6 1946     		mov	r1, r3
 14645 6bb8 FFF7FEFF 		bl	__aeabi_d2f
 14646 6bbc 0346     		mov	r3, r0
 14647 6bbe C7F8C030 		str	r3, [r7, #192]	@ float
 14648 6bc2 D7F8C000 		ldr	r0, [r7, #192]	@ float
 14649 6bc6 4FF00001 		mov	r1, #0
 14650 6bca C4F22011 		movt	r1, 16672
 14651 6bce FFF7FEFF 		bl	__aeabi_fcmple
 14652 6bd2 0346     		mov	r3, r0
 14653 6bd4 002B     		cmp	r3, #0
 14654 6bd6 1DD0     		beq	.L587
 14655              	.L681:
4244:.\console.c   **** 						tilt_axis.param.Kopf.fnum = Kopf;
 14656              		.loc 1 4244 0
 14657 6bd8 40F20003 		movw	r3, #:lower16:tilt_axis
 14658 6bdc C0F20003 		movt	r3, #:upper16:tilt_axis
 14659 6be0 D7F8C020 		ldr	r2, [r7, #192]	@ float
 14660 6be4 5A62     		str	r2, [r3, #36]	@ float
4247:.\console.c   **** 						dummy = WriteAllEEparams();
 14661              		.loc 1 4247 0
 14662 6be6 FFF7FEFF 		bl	WriteAllEEparams
 14663 6bea 0346     		mov	r3, r0
 14664 6bec 87F8D930 		strb	r3, [r7, #217]
4248:.\console.c   **** 						printf(STR_REM_TKOF, (float)tilt_axis.param.Kopf.fnum);   /* REM: Tilt Motor Kopf setted to..
 14665              		.loc 1 4248 0
 14666 6bf0 40F20003 		movw	r3, #:lower16:tilt_axis
 14667 6bf4 C0F20003 		movt	r3, #:upper16:tilt_axis
 14668 6bf8 5B6A     		ldr	r3, [r3, #36]	@ float
 14669 6bfa 1846     		mov	r0, r3
 14670 6bfc FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 401


 14671 6c00 0246     		mov	r2, r0
 14672 6c02 0B46     		mov	r3, r1
 14673 6c04 40F20000 		movw	r0, #:lower16:.LC710
 14674 6c08 C0F20000 		movt	r0, #:upper16:.LC710
 14675 6c0c FFF7FEFF 		bl	printf
4254:.\console.c   **** 					goto exitpars;
 14676              		.loc 1 4254 0
 14677 6c10 00F060BC 		b	.L131
 14678              	.L587:
4252:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14679              		.loc 1 4252 0
 14680 6c14 40F20000 		movw	r0, #:lower16:.LC450
 14681 6c18 C0F20000 		movt	r0, #:upper16:.LC450
 14682 6c1c FFF7FEFF 		bl	printf
4254:.\console.c   **** 					goto exitpars;
 14683              		.loc 1 4254 0
 14684 6c20 00F058BC 		b	.L131
 14685              	.L586:
4260:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againp") == 0)
 14686              		.loc 1 4260 0
 14687 6c24 7F48     		ldr	r0, .L772
 14688 6c26 40F20001 		movw	r1, #:lower16:.LC711
 14689 6c2a C0F20001 		movt	r1, #:upper16:.LC711
 14690 6c2e FFF7FEFF 		bl	strcmp
 14691 6c32 0346     		mov	r3, r0
 14692 6c34 002B     		cmp	r3, #0
 14693 6c36 52D1     		bne	.L591
4262:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
 14694              		.loc 1 4262 0
 14695 6c38 7B48     		ldr	r0, .L772+4
 14696 6c3a FFF7FEFF 		bl	atof
 14697 6c3e 0246     		mov	r2, r0
 14698 6c40 0B46     		mov	r3, r1
 14699 6c42 1046     		mov	r0, r2
 14700 6c44 1946     		mov	r1, r3
 14701 6c46 FFF7FEFF 		bl	__aeabi_d2f
 14702 6c4a 0346     		mov	r3, r0
 14703 6c4c C7F8BC30 		str	r3, [r7, #188]	@ float
 14704 6c50 D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14705 6c54 4FF00001 		mov	r1, #0
 14706 6c58 CCF27A41 		movt	r1, 50298
 14707 6c5c FFF7FEFF 		bl	__aeabi_fcmpge
 14708 6c60 0346     		mov	r3, r0
 14709 6c62 002B     		cmp	r3, #0
 14710 6c64 34D0     		beq	.L592
 14711              	.L682:
4263:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
 14712              		.loc 1 4263 0
 14713 6c66 7048     		ldr	r0, .L772+4
 14714 6c68 FFF7FEFF 		bl	atof
 14715 6c6c 0246     		mov	r2, r0
 14716 6c6e 0B46     		mov	r3, r1
 14717 6c70 1046     		mov	r0, r2
 14718 6c72 1946     		mov	r1, r3
 14719 6c74 FFF7FEFF 		bl	__aeabi_d2f
 14720 6c78 0346     		mov	r3, r0
 14721 6c7a C7F8BC30 		str	r3, [r7, #188]	@ float
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 402


 14722 6c7e D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14723 6c82 4FF00001 		mov	r1, #0
 14724 6c86 C4F27A41 		movt	r1, 17530
 14725 6c8a FFF7FEFF 		bl	__aeabi_fcmple
 14726 6c8e 0346     		mov	r3, r0
 14727 6c90 002B     		cmp	r3, #0
 14728 6c92 1DD0     		beq	.L592
 14729              	.L683:
4265:.\console.c   **** 						pan_axis.param.Gain_ANAOUT.fnum = anaout_gain;
 14730              		.loc 1 4265 0
 14731 6c94 40F20003 		movw	r3, #:lower16:pan_axis
 14732 6c98 C0F20003 		movt	r3, #:upper16:pan_axis
 14733 6c9c D7F8BC20 		ldr	r2, [r7, #188]	@ float
 14734 6ca0 9A62     		str	r2, [r3, #40]	@ float
4268:.\console.c   **** 						dummy = WriteAllEEparams();
 14735              		.loc 1 4268 0
 14736 6ca2 FFF7FEFF 		bl	WriteAllEEparams
 14737 6ca6 0346     		mov	r3, r0
 14738 6ca8 87F8D930 		strb	r3, [r7, #217]
4269:.\console.c   **** 						printf(STR_REM_PAGA, (float)pan_axis.param.Gain_ANAOUT.fnum);   /* REM: Pan Motor Anaout Gain
 14739              		.loc 1 4269 0
 14740 6cac 40F20003 		movw	r3, #:lower16:pan_axis
 14741 6cb0 C0F20003 		movt	r3, #:upper16:pan_axis
 14742 6cb4 9B6A     		ldr	r3, [r3, #40]	@ float
 14743 6cb6 1846     		mov	r0, r3
 14744 6cb8 FFF7FEFF 		bl	__aeabi_f2d
 14745 6cbc 0246     		mov	r2, r0
 14746 6cbe 0B46     		mov	r3, r1
 14747 6cc0 40F20000 		movw	r0, #:lower16:.LC712
 14748 6cc4 C0F20000 		movt	r0, #:upper16:.LC712
 14749 6cc8 FFF7FEFF 		bl	printf
4275:.\console.c   **** 					goto exitpars;
 14750              		.loc 1 4275 0
 14751 6ccc 00F002BC 		b	.L131
 14752              	.L592:
4273:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14753              		.loc 1 4273 0
 14754 6cd0 40F20000 		movw	r0, #:lower16:.LC450
 14755 6cd4 C0F20000 		movt	r0, #:upper16:.LC450
 14756 6cd8 FFF7FEFF 		bl	printf
4275:.\console.c   **** 					goto exitpars;
 14757              		.loc 1 4275 0
 14758 6cdc FAE3     		b	.L131
 14759              	.L591:
4281:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againt") == 0)
 14760              		.loc 1 4281 0
 14761 6cde 5148     		ldr	r0, .L772
 14762 6ce0 40F20001 		movw	r1, #:lower16:.LC713
 14763 6ce4 C0F20001 		movt	r1, #:upper16:.LC713
 14764 6ce8 FFF7FEFF 		bl	strcmp
 14765 6cec 0346     		mov	r3, r0
 14766 6cee 002B     		cmp	r3, #0
 14767 6cf0 51D1     		bne	.L596
4283:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
 14768              		.loc 1 4283 0
 14769 6cf2 4D48     		ldr	r0, .L772+4
 14770 6cf4 FFF7FEFF 		bl	atof
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 403


 14771 6cf8 0246     		mov	r2, r0
 14772 6cfa 0B46     		mov	r3, r1
 14773 6cfc 1046     		mov	r0, r2
 14774 6cfe 1946     		mov	r1, r3
 14775 6d00 FFF7FEFF 		bl	__aeabi_d2f
 14776 6d04 0346     		mov	r3, r0
 14777 6d06 C7F8BC30 		str	r3, [r7, #188]	@ float
 14778 6d0a D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14779 6d0e 4FF00001 		mov	r1, #0
 14780 6d12 CCF27A41 		movt	r1, 50298
 14781 6d16 FFF7FEFF 		bl	__aeabi_fcmpge
 14782 6d1a 0346     		mov	r3, r0
 14783 6d1c 002B     		cmp	r3, #0
 14784 6d1e 33D0     		beq	.L597
 14785              	.L684:
4284:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
 14786              		.loc 1 4284 0
 14787 6d20 4148     		ldr	r0, .L772+4
 14788 6d22 FFF7FEFF 		bl	atof
 14789 6d26 0246     		mov	r2, r0
 14790 6d28 0B46     		mov	r3, r1
 14791 6d2a 1046     		mov	r0, r2
 14792 6d2c 1946     		mov	r1, r3
 14793 6d2e FFF7FEFF 		bl	__aeabi_d2f
 14794 6d32 0346     		mov	r3, r0
 14795 6d34 C7F8BC30 		str	r3, [r7, #188]	@ float
 14796 6d38 D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14797 6d3c 4FF00001 		mov	r1, #0
 14798 6d40 C4F27A41 		movt	r1, 17530
 14799 6d44 FFF7FEFF 		bl	__aeabi_fcmple
 14800 6d48 0346     		mov	r3, r0
 14801 6d4a 002B     		cmp	r3, #0
 14802 6d4c 1CD0     		beq	.L597
 14803              	.L685:
4286:.\console.c   **** 						tilt_axis.param.Gain_ANAOUT.fnum = anaout_gain;
 14804              		.loc 1 4286 0
 14805 6d4e 40F20003 		movw	r3, #:lower16:tilt_axis
 14806 6d52 C0F20003 		movt	r3, #:upper16:tilt_axis
 14807 6d56 D7F8BC20 		ldr	r2, [r7, #188]	@ float
 14808 6d5a 9A62     		str	r2, [r3, #40]	@ float
4289:.\console.c   **** 						dummy = WriteAllEEparams();
 14809              		.loc 1 4289 0
 14810 6d5c FFF7FEFF 		bl	WriteAllEEparams
 14811 6d60 0346     		mov	r3, r0
 14812 6d62 87F8D930 		strb	r3, [r7, #217]
4290:.\console.c   **** 						printf(STR_REM_TAGA, (float)tilt_axis.param.Gain_ANAOUT.fnum);   /* REM: Tilt Motor Anaout Ga
 14813              		.loc 1 4290 0
 14814 6d66 40F20003 		movw	r3, #:lower16:tilt_axis
 14815 6d6a C0F20003 		movt	r3, #:upper16:tilt_axis
 14816 6d6e 9B6A     		ldr	r3, [r3, #40]	@ float
 14817 6d70 1846     		mov	r0, r3
 14818 6d72 FFF7FEFF 		bl	__aeabi_f2d
 14819 6d76 0246     		mov	r2, r0
 14820 6d78 0B46     		mov	r3, r1
 14821 6d7a 40F20000 		movw	r0, #:lower16:.LC714
 14822 6d7e C0F20000 		movt	r0, #:upper16:.LC714
 14823 6d82 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 404


4296:.\console.c   **** 					goto exitpars;
 14824              		.loc 1 4296 0
 14825 6d86 A5E3     		b	.L131
 14826              	.L597:
4294:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14827              		.loc 1 4294 0
 14828 6d88 40F20000 		movw	r0, #:lower16:.LC450
 14829 6d8c C0F20000 		movt	r0, #:upper16:.LC450
 14830 6d90 FFF7FEFF 		bl	printf
4296:.\console.c   **** 					goto exitpars;
 14831              		.loc 1 4296 0
 14832 6d94 9EE3     		b	.L131
 14833              	.L596:
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
 14834              		.loc 1 4324 0
 14835 6d96 2348     		ldr	r0, .L772
 14836 6d98 40F20001 		movw	r1, #:lower16:.LC715
 14837 6d9c C0F20001 		movt	r1, #:upper16:.LC715
 14838 6da0 FFF7FEFF 		bl	strcmp
 14839 6da4 0346     		mov	r3, r0
 14840 6da6 002B     		cmp	r3, #0
 14841 6da8 09D0     		beq	.L601
4325:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacxof") == 0))
 14842              		.loc 1 4325 0 discriminator 1
 14843 6daa 1E48     		ldr	r0, .L772
 14844 6dac 40F20001 		movw	r1, #:lower16:.LC716
 14845 6db0 C0F20001 		movt	r1, #:upper16:.LC716
 14846 6db4 FFF7FEFF 		bl	strcmp
 14847 6db8 0346     		mov	r3, r0
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
 14848              		.loc 1 4324 0 discriminator 1
 14849 6dba 002B     		cmp	r3, #0
 14850 6dbc 36D1     		bne	.L602
 14851              	.L601:
4327:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14852              		.loc 1 4327 0
 14853 6dbe 1A48     		ldr	r0, .L772+4
 14854 6dc0 FFF7FEFF 		bl	atoi
 14855 6dc4 0346     		mov	r3, r0
 14856 6dc6 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14857 6dca B7F9EE30 		ldrsh	r3, [r7, #238]
 14858 6dce 13F1960F 		cmn	r3, #150
 14859 6dd2 1FDB     		blt	.L603
4328:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14860              		.loc 1 4328 0
 14861 6dd4 1448     		ldr	r0, .L772+4
 14862 6dd6 FFF7FEFF 		bl	atoi
 14863 6dda 0346     		mov	r3, r0
 14864 6ddc A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14865 6de0 B7F9EE30 		ldrsh	r3, [r7, #238]
 14866 6de4 962B     		cmp	r3, #150
 14867 6de6 15DC     		bgt	.L603
4330:.\console.c   **** 						gobee_param.x_acc_ADC_offset = (int16)offset;
 14868              		.loc 1 4330 0
 14869 6de8 40F20003 		movw	r3, #:lower16:gobee_param
 14870 6dec C0F20003 		movt	r3, #:upper16:gobee_param
 14871 6df0 B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 405


 14872 6df4 1A81     		strh	r2, [r3, #8]	@ movhi
4333:.\console.c   **** 						dummy = WriteAllEEparams();
 14873              		.loc 1 4333 0
 14874 6df6 FFF7FEFF 		bl	WriteAllEEparams
 14875 6dfa 0346     		mov	r3, r0
 14876 6dfc 87F8D930 		strb	r3, [r7, #217]
4334:.\console.c   **** 						printf(STR_REM_SEAX, (int16)offset);   /* REM: ACC AXIS X ADC offset setted to...*/					
 14877              		.loc 1 4334 0
 14878 6e00 B7F9EE30 		ldrsh	r3, [r7, #238]
 14879 6e04 40F20000 		movw	r0, #:lower16:.LC717
 14880 6e08 C0F20000 		movt	r0, #:upper16:.LC717
 14881 6e0c 1946     		mov	r1, r3
 14882 6e0e FFF7FEFF 		bl	printf
4340:.\console.c   **** 					goto exitpars;
 14883              		.loc 1 4340 0
 14884 6e12 5FE3     		b	.L131
 14885              	.L603:
4338:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14886              		.loc 1 4338 0
 14887 6e14 40F20000 		movw	r0, #:lower16:.LC450
 14888 6e18 C0F20000 		movt	r0, #:upper16:.LC450
 14889 6e1c FFF7FEFF 		bl	printf
4340:.\console.c   **** 					goto exitpars;
 14890              		.loc 1 4340 0
 14891 6e20 58E3     		b	.L131
 14892              	.L773:
 14893 6e22 00BF     		.align	2
 14894              	.L772:
 14895 6e24 0F000000 		.word	actual_cmd+15
 14896 6e28 1E000000 		.word	actual_cmd+30
 14897              	.L602:
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
 14898              		.loc 1 4346 0
 14899 6e2c 9D48     		ldr	r0, .L774
 14900 6e2e 40F20001 		movw	r1, #:lower16:.LC718
 14901 6e32 C0F20001 		movt	r1, #:upper16:.LC718
 14902 6e36 FFF7FEFF 		bl	strcmp
 14903 6e3a 0346     		mov	r3, r0
 14904 6e3c 002B     		cmp	r3, #0
 14905 6e3e 09D0     		beq	.L605
4347:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacyof") == 0))
 14906              		.loc 1 4347 0 discriminator 1
 14907 6e40 9848     		ldr	r0, .L774
 14908 6e42 40F20001 		movw	r1, #:lower16:.LC719
 14909 6e46 C0F20001 		movt	r1, #:upper16:.LC719
 14910 6e4a FFF7FEFF 		bl	strcmp
 14911 6e4e 0346     		mov	r3, r0
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
 14912              		.loc 1 4346 0 discriminator 1
 14913 6e50 002B     		cmp	r3, #0
 14914 6e52 31D1     		bne	.L606
 14915              	.L605:
4349:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14916              		.loc 1 4349 0
 14917 6e54 9448     		ldr	r0, .L774+4
 14918 6e56 FFF7FEFF 		bl	atoi
 14919 6e5a 0346     		mov	r3, r0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 406


 14920 6e5c A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14921 6e60 B7F9EE30 		ldrsh	r3, [r7, #238]
 14922 6e64 13F1960F 		cmn	r3, #150
 14923 6e68 1FDB     		blt	.L607
4350:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14924              		.loc 1 4350 0
 14925 6e6a 8F48     		ldr	r0, .L774+4
 14926 6e6c FFF7FEFF 		bl	atoi
 14927 6e70 0346     		mov	r3, r0
 14928 6e72 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14929 6e76 B7F9EE30 		ldrsh	r3, [r7, #238]
 14930 6e7a 962B     		cmp	r3, #150
 14931 6e7c 15DC     		bgt	.L607
4352:.\console.c   **** 						gobee_param.y_acc_ADC_offset = (int16)offset;
 14932              		.loc 1 4352 0
 14933 6e7e 40F20003 		movw	r3, #:lower16:gobee_param
 14934 6e82 C0F20003 		movt	r3, #:upper16:gobee_param
 14935 6e86 B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14936 6e8a 5A81     		strh	r2, [r3, #10]	@ movhi
4355:.\console.c   **** 						dummy = WriteAllEEparams();
 14937              		.loc 1 4355 0
 14938 6e8c FFF7FEFF 		bl	WriteAllEEparams
 14939 6e90 0346     		mov	r3, r0
 14940 6e92 87F8D930 		strb	r3, [r7, #217]
4356:.\console.c   **** 						printf(STR_REM_SEAY, (int16)offset);   /* REM: ACC AXIS Y ADC offset setted to...*/					
 14941              		.loc 1 4356 0
 14942 6e96 B7F9EE30 		ldrsh	r3, [r7, #238]
 14943 6e9a 40F20000 		movw	r0, #:lower16:.LC720
 14944 6e9e C0F20000 		movt	r0, #:upper16:.LC720
 14945 6ea2 1946     		mov	r1, r3
 14946 6ea4 FFF7FEFF 		bl	printf
4362:.\console.c   **** 					goto exitpars;
 14947              		.loc 1 4362 0
 14948 6ea8 14E3     		b	.L131
 14949              	.L607:
4360:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14950              		.loc 1 4360 0
 14951 6eaa 40F20000 		movw	r0, #:lower16:.LC450
 14952 6eae C0F20000 		movt	r0, #:upper16:.LC450
 14953 6eb2 FFF7FEFF 		bl	printf
4362:.\console.c   **** 					goto exitpars;
 14954              		.loc 1 4362 0
 14955 6eb6 0DE3     		b	.L131
 14956              	.L606:
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
 14957              		.loc 1 4368 0
 14958 6eb8 7A48     		ldr	r0, .L774
 14959 6eba 40F20001 		movw	r1, #:lower16:.LC721
 14960 6ebe C0F20001 		movt	r1, #:upper16:.LC721
 14961 6ec2 FFF7FEFF 		bl	strcmp
 14962 6ec6 0346     		mov	r3, r0
 14963 6ec8 002B     		cmp	r3, #0
 14964 6eca 09D0     		beq	.L609
4369:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaczof") == 0))
 14965              		.loc 1 4369 0 discriminator 1
 14966 6ecc 7548     		ldr	r0, .L774
 14967 6ece 40F20001 		movw	r1, #:lower16:.LC722
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 407


 14968 6ed2 C0F20001 		movt	r1, #:upper16:.LC722
 14969 6ed6 FFF7FEFF 		bl	strcmp
 14970 6eda 0346     		mov	r3, r0
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
 14971              		.loc 1 4368 0 discriminator 1
 14972 6edc 002B     		cmp	r3, #0
 14973 6ede 31D1     		bne	.L610
 14974              	.L609:
4371:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14975              		.loc 1 4371 0
 14976 6ee0 7148     		ldr	r0, .L774+4
 14977 6ee2 FFF7FEFF 		bl	atoi
 14978 6ee6 0346     		mov	r3, r0
 14979 6ee8 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14980 6eec B7F9EE30 		ldrsh	r3, [r7, #238]
 14981 6ef0 13F1960F 		cmn	r3, #150
 14982 6ef4 1FDB     		blt	.L611
4372:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14983              		.loc 1 4372 0
 14984 6ef6 6C48     		ldr	r0, .L774+4
 14985 6ef8 FFF7FEFF 		bl	atoi
 14986 6efc 0346     		mov	r3, r0
 14987 6efe A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14988 6f02 B7F9EE30 		ldrsh	r3, [r7, #238]
 14989 6f06 962B     		cmp	r3, #150
 14990 6f08 15DC     		bgt	.L611
4374:.\console.c   **** 						gobee_param.z_acc_ADC_offset = (int16)offset;
 14991              		.loc 1 4374 0
 14992 6f0a 40F20003 		movw	r3, #:lower16:gobee_param
 14993 6f0e C0F20003 		movt	r3, #:upper16:gobee_param
 14994 6f12 B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14995 6f16 9A81     		strh	r2, [r3, #12]	@ movhi
4377:.\console.c   **** 						dummy = WriteAllEEparams();
 14996              		.loc 1 4377 0
 14997 6f18 FFF7FEFF 		bl	WriteAllEEparams
 14998 6f1c 0346     		mov	r3, r0
 14999 6f1e 87F8D930 		strb	r3, [r7, #217]
4378:.\console.c   **** 						printf(STR_REM_SEAZ, (int16)offset);   /* REM: ACC AXIS Z ADC offset setted to...*/					
 15000              		.loc 1 4378 0
 15001 6f22 B7F9EE30 		ldrsh	r3, [r7, #238]
 15002 6f26 40F20000 		movw	r0, #:lower16:.LC723
 15003 6f2a C0F20000 		movt	r0, #:upper16:.LC723
 15004 6f2e 1946     		mov	r1, r3
 15005 6f30 FFF7FEFF 		bl	printf
4384:.\console.c   **** 					goto exitpars;
 15006              		.loc 1 4384 0
 15007 6f34 CEE2     		b	.L131
 15008              	.L611:
4382:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15009              		.loc 1 4382 0
 15010 6f36 40F20000 		movw	r0, #:lower16:.LC450
 15011 6f3a C0F20000 		movt	r0, #:upper16:.LC450
 15012 6f3e FFF7FEFF 		bl	printf
4384:.\console.c   **** 					goto exitpars;
 15013              		.loc 1 4384 0
 15014 6f42 C7E2     		b	.L131
 15015              	.L610:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 408


4475:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "beta") == 0)
 15016              		.loc 1 4475 0
 15017 6f44 5748     		ldr	r0, .L774
 15018 6f46 40F20001 		movw	r1, #:lower16:.LC724
 15019 6f4a C0F20001 		movt	r1, #:upper16:.LC724
 15020 6f4e FFF7FEFF 		bl	strcmp
 15021 6f52 0346     		mov	r3, r0
 15022 6f54 002B     		cmp	r3, #0
 15023 6f56 4DD1     		bne	.L613
4477:.\console.c   **** 					if (((beta = atof(actual_cmd.number1)) >= 0)
 15024              		.loc 1 4477 0
 15025 6f58 5348     		ldr	r0, .L774+4
 15026 6f5a FFF7FEFF 		bl	atof
 15027 6f5e 0246     		mov	r2, r0
 15028 6f60 0B46     		mov	r3, r1
 15029 6f62 1046     		mov	r0, r2
 15030 6f64 1946     		mov	r1, r3
 15031 6f66 FFF7FEFF 		bl	__aeabi_d2f
 15032 6f6a 0346     		mov	r3, r0
 15033 6f6c C7F8F830 		str	r3, [r7, #248]	@ float
 15034 6f70 D7F8F800 		ldr	r0, [r7, #248]	@ float
 15035 6f74 4FF00001 		mov	r1, #0
 15036 6f78 FFF7FEFF 		bl	__aeabi_fcmpge
 15037 6f7c 0346     		mov	r3, r0
 15038 6f7e 002B     		cmp	r3, #0
 15039 6f80 31D0     		beq	.L614
 15040              	.L686:
4478:.\console.c   **** 					&& (beta = atof(actual_cmd.number1)) <= 1)
 15041              		.loc 1 4478 0
 15042 6f82 4948     		ldr	r0, .L774+4
 15043 6f84 FFF7FEFF 		bl	atof
 15044 6f88 0246     		mov	r2, r0
 15045 6f8a 0B46     		mov	r3, r1
 15046 6f8c 1046     		mov	r0, r2
 15047 6f8e 1946     		mov	r1, r3
 15048 6f90 FFF7FEFF 		bl	__aeabi_d2f
 15049 6f94 0346     		mov	r3, r0
 15050 6f96 C7F8F830 		str	r3, [r7, #248]	@ float
 15051 6f9a D7F8F800 		ldr	r0, [r7, #248]	@ float
 15052 6f9e 4FF07E51 		mov	r1, #1065353216
 15053 6fa2 FFF7FEFF 		bl	__aeabi_fcmple
 15054 6fa6 0346     		mov	r3, r0
 15055 6fa8 002B     		cmp	r3, #0
 15056 6faa 1CD0     		beq	.L614
 15057              	.L687:
4480:.\console.c   **** 						gobee_param.beta.fnum = beta;
 15058              		.loc 1 4480 0
 15059 6fac 40F20003 		movw	r3, #:lower16:gobee_param
 15060 6fb0 C0F20003 		movt	r3, #:upper16:gobee_param
 15061 6fb4 D7F8F820 		ldr	r2, [r7, #248]	@ float
 15062 6fb8 5A60     		str	r2, [r3, #4]	@ float
4483:.\console.c   **** 						dummy = WriteAllEEparams();
 15063              		.loc 1 4483 0
 15064 6fba FFF7FEFF 		bl	WriteAllEEparams
 15065 6fbe 0346     		mov	r3, r0
 15066 6fc0 87F8D930 		strb	r3, [r7, #217]
4484:.\console.c   **** 						printf(STR_REM_STBT, (float)gobee_param.beta.fnum);   /* REM: beta setted to...*/					
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 409


 15067              		.loc 1 4484 0
 15068 6fc4 40F20003 		movw	r3, #:lower16:gobee_param
 15069 6fc8 C0F20003 		movt	r3, #:upper16:gobee_param
 15070 6fcc 5B68     		ldr	r3, [r3, #4]	@ float
 15071 6fce 1846     		mov	r0, r3
 15072 6fd0 FFF7FEFF 		bl	__aeabi_f2d
 15073 6fd4 0246     		mov	r2, r0
 15074 6fd6 0B46     		mov	r3, r1
 15075 6fd8 40F20000 		movw	r0, #:lower16:.LC725
 15076 6fdc C0F20000 		movt	r0, #:upper16:.LC725
 15077 6fe0 FFF7FEFF 		bl	printf
4490:.\console.c   **** 					goto exitpars;
 15078              		.loc 1 4490 0
 15079 6fe4 76E2     		b	.L131
 15080              	.L614:
4488:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15081              		.loc 1 4488 0
 15082 6fe6 40F20000 		movw	r0, #:lower16:.LC450
 15083 6fea C0F20000 		movt	r0, #:upper16:.LC450
 15084 6fee FFF7FEFF 		bl	printf
4490:.\console.c   **** 					goto exitpars;
 15085              		.loc 1 4490 0
 15086 6ff2 6FE2     		b	.L131
 15087              	.L613:
4496:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "gamma") == 0)
 15088              		.loc 1 4496 0
 15089 6ff4 2B48     		ldr	r0, .L774
 15090 6ff6 40F20001 		movw	r1, #:lower16:.LC726
 15091 6ffa C0F20001 		movt	r1, #:upper16:.LC726
 15092 6ffe FFF7FEFF 		bl	strcmp
 15093 7002 0346     		mov	r3, r0
 15094 7004 002B     		cmp	r3, #0
 15095 7006 51D1     		bne	.L618
4498:.\console.c   **** 					if (((gamma = atof(actual_cmd.number1)) >= 0)
 15096              		.loc 1 4498 0
 15097 7008 2748     		ldr	r0, .L774+4
 15098 700a FFF7FEFF 		bl	atof
 15099 700e 0246     		mov	r2, r0
 15100 7010 0B46     		mov	r3, r1
 15101 7012 1046     		mov	r0, r2
 15102 7014 1946     		mov	r1, r3
 15103 7016 FFF7FEFF 		bl	__aeabi_d2f
 15104 701a 0346     		mov	r3, r0
 15105 701c C7F8F430 		str	r3, [r7, #244]	@ float
 15106 7020 D7F8F400 		ldr	r0, [r7, #244]	@ float
 15107 7024 4FF00001 		mov	r1, #0
 15108 7028 FFF7FEFF 		bl	__aeabi_fcmpge
 15109 702c 0346     		mov	r3, r0
 15110 702e 002B     		cmp	r3, #0
 15111 7030 31D0     		beq	.L619
 15112              	.L688:
4499:.\console.c   **** 					&& (gamma = atof(actual_cmd.number1)) <= 1)
 15113              		.loc 1 4499 0
 15114 7032 1D48     		ldr	r0, .L774+4
 15115 7034 FFF7FEFF 		bl	atof
 15116 7038 0246     		mov	r2, r0
 15117 703a 0B46     		mov	r3, r1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 410


 15118 703c 1046     		mov	r0, r2
 15119 703e 1946     		mov	r1, r3
 15120 7040 FFF7FEFF 		bl	__aeabi_d2f
 15121 7044 0346     		mov	r3, r0
 15122 7046 C7F8F430 		str	r3, [r7, #244]	@ float
 15123 704a D7F8F400 		ldr	r0, [r7, #244]	@ float
 15124 704e 4FF07E51 		mov	r1, #1065353216
 15125 7052 FFF7FEFF 		bl	__aeabi_fcmple
 15126 7056 0346     		mov	r3, r0
 15127 7058 002B     		cmp	r3, #0
 15128 705a 1CD0     		beq	.L619
 15129              	.L689:
4501:.\console.c   **** 						IMU_sensor.param.gamma.fnum = gamma;
 15130              		.loc 1 4501 0
 15131 705c 40F20003 		movw	r3, #:lower16:IMU_sensor
 15132 7060 C0F20003 		movt	r3, #:upper16:IMU_sensor
 15133 7064 D7F8F420 		ldr	r2, [r7, #244]	@ float
 15134 7068 9A62     		str	r2, [r3, #40]	@ float
4504:.\console.c   **** 						dummy = WriteAllEEparams();
 15135              		.loc 1 4504 0
 15136 706a FFF7FEFF 		bl	WriteAllEEparams
 15137 706e 0346     		mov	r3, r0
 15138 7070 87F8D930 		strb	r3, [r7, #217]
4505:.\console.c   **** 						printf(STR_REM_STGM, (float)IMU_sensor.param.gamma.fnum);   /* REM: gamma setted to...*/					
 15139              		.loc 1 4505 0
 15140 7074 40F20003 		movw	r3, #:lower16:IMU_sensor
 15141 7078 C0F20003 		movt	r3, #:upper16:IMU_sensor
 15142 707c 9B6A     		ldr	r3, [r3, #40]	@ float
 15143 707e 1846     		mov	r0, r3
 15144 7080 FFF7FEFF 		bl	__aeabi_f2d
 15145 7084 0246     		mov	r2, r0
 15146 7086 0B46     		mov	r3, r1
 15147 7088 40F20000 		movw	r0, #:lower16:.LC727
 15148 708c C0F20000 		movt	r0, #:upper16:.LC727
 15149 7090 FFF7FEFF 		bl	printf
4511:.\console.c   **** 					goto exitpars;
 15150              		.loc 1 4511 0
 15151 7094 1EE2     		b	.L131
 15152              	.L619:
4509:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15153              		.loc 1 4509 0
 15154 7096 40F20000 		movw	r0, #:lower16:.LC450
 15155 709a C0F20000 		movt	r0, #:upper16:.LC450
 15156 709e FFF7FEFF 		bl	printf
4511:.\console.c   **** 					goto exitpars;
 15157              		.loc 1 4511 0
 15158 70a2 17E2     		b	.L131
 15159              	.L775:
 15160              		.align	2
 15161              	.L774:
 15162 70a4 0F000000 		.word	actual_cmd+15
 15163 70a8 1E000000 		.word	actual_cmd+30
 15164              	.L618:
4517:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "jumpth") == 0)
 15165              		.loc 1 4517 0
 15166 70ac AE48     		ldr	r0, .L776
 15167 70ae 40F20001 		movw	r1, #:lower16:.LC728
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 411


 15168 70b2 C0F20001 		movt	r1, #:upper16:.LC728
 15169 70b6 FFF7FEFF 		bl	strcmp
 15170 70ba 0346     		mov	r3, r0
 15171 70bc 002B     		cmp	r3, #0
 15172 70be 4FD1     		bne	.L623
4519:.\console.c   **** 					if (((jump_g_th = atof(actual_cmd.number1)) >= 0)
 15173              		.loc 1 4519 0
 15174 70c0 AA48     		ldr	r0, .L776+4
 15175 70c2 FFF7FEFF 		bl	atof
 15176 70c6 0246     		mov	r2, r0
 15177 70c8 0B46     		mov	r3, r1
 15178 70ca 1046     		mov	r0, r2
 15179 70cc 1946     		mov	r1, r3
 15180 70ce FFF7FEFF 		bl	__aeabi_d2f
 15181 70d2 0346     		mov	r3, r0
 15182 70d4 C7F8E030 		str	r3, [r7, #224]	@ float
 15183 70d8 D7F8E000 		ldr	r0, [r7, #224]	@ float
 15184 70dc 4FF00001 		mov	r1, #0
 15185 70e0 FFF7FEFF 		bl	__aeabi_fcmpge
 15186 70e4 0346     		mov	r3, r0
 15187 70e6 002B     		cmp	r3, #0
 15188 70e8 33D0     		beq	.L624
 15189              	.L690:
4520:.\console.c   **** 					&& (jump_g_th = atof(actual_cmd.number1)) <= 10)
 15190              		.loc 1 4520 0
 15191 70ea A048     		ldr	r0, .L776+4
 15192 70ec FFF7FEFF 		bl	atof
 15193 70f0 0246     		mov	r2, r0
 15194 70f2 0B46     		mov	r3, r1
 15195 70f4 1046     		mov	r0, r2
 15196 70f6 1946     		mov	r1, r3
 15197 70f8 FFF7FEFF 		bl	__aeabi_d2f
 15198 70fc 0346     		mov	r3, r0
 15199 70fe C7F8E030 		str	r3, [r7, #224]	@ float
 15200 7102 D7F8E000 		ldr	r0, [r7, #224]	@ float
 15201 7106 4FF00001 		mov	r1, #0
 15202 710a C4F22011 		movt	r1, 16672
 15203 710e FFF7FEFF 		bl	__aeabi_fcmple
 15204 7112 0346     		mov	r3, r0
 15205 7114 002B     		cmp	r3, #0
 15206 7116 1CD0     		beq	.L624
 15207              	.L691:
4522:.\console.c   **** 						gobee_param.jump_g_threshold.fnum = jump_g_th;
 15208              		.loc 1 4522 0
 15209 7118 40F20003 		movw	r3, #:lower16:gobee_param
 15210 711c C0F20003 		movt	r3, #:upper16:gobee_param
 15211 7120 D7F8E020 		ldr	r2, [r7, #224]	@ float
 15212 7124 1A61     		str	r2, [r3, #16]	@ float
4525:.\console.c   **** 						dummy = WriteAllEEparams();
 15213              		.loc 1 4525 0
 15214 7126 FFF7FEFF 		bl	WriteAllEEparams
 15215 712a 0346     		mov	r3, r0
 15216 712c 87F8D930 		strb	r3, [r7, #217]
4526:.\console.c   **** 						printf(STR_REM_STJG, (float)gobee_param.jump_g_threshold.fnum);   /* REM: jump g thr setted t
 15217              		.loc 1 4526 0
 15218 7130 40F20003 		movw	r3, #:lower16:gobee_param
 15219 7134 C0F20003 		movt	r3, #:upper16:gobee_param
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 412


 15220 7138 1B69     		ldr	r3, [r3, #16]	@ float
 15221 713a 1846     		mov	r0, r3
 15222 713c FFF7FEFF 		bl	__aeabi_f2d
 15223 7140 0246     		mov	r2, r0
 15224 7142 0B46     		mov	r3, r1
 15225 7144 40F20000 		movw	r0, #:lower16:.LC729
 15226 7148 C0F20000 		movt	r0, #:upper16:.LC729
 15227 714c FFF7FEFF 		bl	printf
4532:.\console.c   **** 					goto exitpars;
 15228              		.loc 1 4532 0
 15229 7150 C0E1     		b	.L131
 15230              	.L624:
4530:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15231              		.loc 1 4530 0
 15232 7152 40F20000 		movw	r0, #:lower16:.LC450
 15233 7156 C0F20000 		movt	r0, #:upper16:.LC450
 15234 715a FFF7FEFF 		bl	printf
4532:.\console.c   **** 					goto exitpars;
 15235              		.loc 1 4532 0
 15236 715e B9E1     		b	.L131
 15237              	.L623:
4538:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "accth") == 0)
 15238              		.loc 1 4538 0
 15239 7160 8148     		ldr	r0, .L776
 15240 7162 40F20001 		movw	r1, #:lower16:.LC730
 15241 7166 C0F20001 		movt	r1, #:upper16:.LC730
 15242 716a FFF7FEFF 		bl	strcmp
 15243 716e 0346     		mov	r3, r0
 15244 7170 002B     		cmp	r3, #0
 15245 7172 4FD1     		bne	.L628
4540:.\console.c   **** 					if (((acc_g_th = atof(actual_cmd.number1)) >= 0)
 15246              		.loc 1 4540 0
 15247 7174 7D48     		ldr	r0, .L776+4
 15248 7176 FFF7FEFF 		bl	atof
 15249 717a 0246     		mov	r2, r0
 15250 717c 0B46     		mov	r3, r1
 15251 717e 1046     		mov	r0, r2
 15252 7180 1946     		mov	r1, r3
 15253 7182 FFF7FEFF 		bl	__aeabi_d2f
 15254 7186 0346     		mov	r3, r0
 15255 7188 C7F8DC30 		str	r3, [r7, #220]	@ float
 15256 718c D7F8DC00 		ldr	r0, [r7, #220]	@ float
 15257 7190 4FF00001 		mov	r1, #0
 15258 7194 FFF7FEFF 		bl	__aeabi_fcmpge
 15259 7198 0346     		mov	r3, r0
 15260 719a 002B     		cmp	r3, #0
 15261 719c 33D0     		beq	.L629
 15262              	.L692:
4541:.\console.c   **** 					&& (acc_g_th = atof(actual_cmd.number1)) <= 10)
 15263              		.loc 1 4541 0
 15264 719e 7348     		ldr	r0, .L776+4
 15265 71a0 FFF7FEFF 		bl	atof
 15266 71a4 0246     		mov	r2, r0
 15267 71a6 0B46     		mov	r3, r1
 15268 71a8 1046     		mov	r0, r2
 15269 71aa 1946     		mov	r1, r3
 15270 71ac FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 413


 15271 71b0 0346     		mov	r3, r0
 15272 71b2 C7F8DC30 		str	r3, [r7, #220]	@ float
 15273 71b6 D7F8DC00 		ldr	r0, [r7, #220]	@ float
 15274 71ba 4FF00001 		mov	r1, #0
 15275 71be C4F22011 		movt	r1, 16672
 15276 71c2 FFF7FEFF 		bl	__aeabi_fcmple
 15277 71c6 0346     		mov	r3, r0
 15278 71c8 002B     		cmp	r3, #0
 15279 71ca 1CD0     		beq	.L629
 15280              	.L693:
4543:.\console.c   **** 						gobee_param.acc_g_threshold.fnum = acc_g_th;
 15281              		.loc 1 4543 0
 15282 71cc 40F20003 		movw	r3, #:lower16:gobee_param
 15283 71d0 C0F20003 		movt	r3, #:upper16:gobee_param
 15284 71d4 D7F8DC20 		ldr	r2, [r7, #220]	@ float
 15285 71d8 5A61     		str	r2, [r3, #20]	@ float
4546:.\console.c   **** 						dummy = WriteAllEEparams();
 15286              		.loc 1 4546 0
 15287 71da FFF7FEFF 		bl	WriteAllEEparams
 15288 71de 0346     		mov	r3, r0
 15289 71e0 87F8D930 		strb	r3, [r7, #217]
4547:.\console.c   **** 						printf(STR_REM_STAG, (float)gobee_param.acc_g_threshold.fnum);   /* REM: acc g thr setted to.
 15290              		.loc 1 4547 0
 15291 71e4 40F20003 		movw	r3, #:lower16:gobee_param
 15292 71e8 C0F20003 		movt	r3, #:upper16:gobee_param
 15293 71ec 5B69     		ldr	r3, [r3, #20]	@ float
 15294 71ee 1846     		mov	r0, r3
 15295 71f0 FFF7FEFF 		bl	__aeabi_f2d
 15296 71f4 0246     		mov	r2, r0
 15297 71f6 0B46     		mov	r3, r1
 15298 71f8 40F20000 		movw	r0, #:lower16:.LC731
 15299 71fc C0F20000 		movt	r0, #:upper16:.LC731
 15300 7200 FFF7FEFF 		bl	printf
4553:.\console.c   **** 					goto exitpars;
 15301              		.loc 1 4553 0
 15302 7204 66E1     		b	.L131
 15303              	.L629:
4551:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15304              		.loc 1 4551 0
 15305 7206 40F20000 		movw	r0, #:lower16:.LC450
 15306 720a C0F20000 		movt	r0, #:upper16:.LC450
 15307 720e FFF7FEFF 		bl	printf
4553:.\console.c   **** 					goto exitpars;
 15308              		.loc 1 4553 0
 15309 7212 5FE1     		b	.L131
 15310              	.L628:
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
 15311              		.loc 1 4559 0
 15312 7214 5448     		ldr	r0, .L776
 15313 7216 40F20001 		movw	r1, #:lower16:.LC732
 15314 721a C0F20001 		movt	r1, #:upper16:.LC732
 15315 721e FFF7FEFF 		bl	strcmp
 15316 7222 0346     		mov	r3, r0
 15317 7224 002B     		cmp	r3, #0
 15318 7226 0AD0     		beq	.L633
4560:.\console.c   **** 				   (strcmp(actual_cmd.parameter, "astimtype") == 0)) 
 15319              		.loc 1 4560 0 discriminator 1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 414


 15320 7228 4F48     		ldr	r0, .L776
 15321 722a 40F20001 		movw	r1, #:lower16:.LC733
 15322 722e C0F20001 		movt	r1, #:upper16:.LC733
 15323 7232 FFF7FEFF 		bl	strcmp
 15324 7236 0346     		mov	r3, r0
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
 15325              		.loc 1 4559 0 discriminator 1
 15326 7238 002B     		cmp	r3, #0
 15327 723a 40F09980 		bne	.L634
 15328              	.L633:
4562:.\console.c   **** 					if (((astim_type = atoi(actual_cmd.number1)) >= NO_ASTIM)
 15329              		.loc 1 4562 0
 15330 723e 4B48     		ldr	r0, .L776+4
 15331 7240 FFF7FEFF 		bl	atoi
 15332 7244 0346     		mov	r3, r0
 15333 7246 87F8ED30 		strb	r3, [r7, #237]
4563:.\console.c   **** 					&& (astim_type = atoi(actual_cmd.number1)) <= SQUARE_ASTIM)
 15334              		.loc 1 4563 0
 15335 724a 4848     		ldr	r0, .L776+4
 15336 724c FFF7FEFF 		bl	atoi
 15337 7250 0346     		mov	r3, r0
 15338 7252 87F8ED30 		strb	r3, [r7, #237]
 15339 7256 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 15340 725a 032B     		cmp	r3, #3
 15341 725c 7BD8     		bhi	.L635
4577:.\console.c   **** 							pan_axis.vparam.astim_type  = astim_type;
 15342              		.loc 1 4577 0
 15343 725e 40F20003 		movw	r3, #:lower16:pan_axis
 15344 7262 C0F20003 		movt	r3, #:upper16:pan_axis
 15345 7266 97F8ED20 		ldrb	r2, [r7, #237]
 15346 726a 5A70     		strb	r2, [r3, #1]
4578:.\console.c   **** 							tilt_axis.vparam.astim_type = astim_type;						
 15347              		.loc 1 4578 0
 15348 726c 40F20003 		movw	r3, #:lower16:tilt_axis
 15349 7270 C0F20003 		movt	r3, #:upper16:tilt_axis
 15350 7274 97F8ED20 		ldrb	r2, [r7, #237]
 15351 7278 5A70     		strb	r2, [r3, #1]
4580:.\console.c   **** 							printf(STR_REM_ASTP, (uint16)astim_type);   /* REM: PAN  Astim Type Configured to...*/
 15352              		.loc 1 4580 0
 15353 727a 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 15354 727e 40F20000 		movw	r0, #:lower16:.LC734
 15355 7282 C0F20000 		movt	r0, #:upper16:.LC734
 15356 7286 1946     		mov	r1, r3
 15357 7288 FFF7FEFF 		bl	printf
4581:.\console.c   **** 							printf(STR_REM_ASTT, (uint16)astim_type);   /* REM: TILT Astim Type Configured to...*/						
 15358              		.loc 1 4581 0
 15359 728c 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 15360 7290 40F20000 		movw	r0, #:lower16:.LC735
 15361 7294 C0F20000 		movt	r0, #:upper16:.LC735
 15362 7298 1946     		mov	r1, r3
 15363 729a FFF7FEFF 		bl	printf
4583:.\console.c   **** 							WaveDAC8_Start();					//Starts WaveDAC8	
 15364              		.loc 1 4583 0
 15365 729e FFF7FEFF 		bl	WaveDAC8_Start
4584:.\console.c   **** 							PGA_ASTIM_Start();					//Starts PGA_ASTIM
 15366              		.loc 1 4584 0
 15367 72a2 FFF7FEFF 		bl	PGA_ASTIM_Start
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 415


4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 15368              		.loc 1 4586 0
 15369 72a6 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 15370 72aa 012B     		cmp	r3, #1
 15371 72ac 0ED1     		bne	.L636
4588:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
 15372              		.loc 1 4588 0
 15373 72ae FFF7FEFF 		bl	WaveDAC8_Stop
4589:.\console.c   **** 								Control_Reg_WS_Write(0);			//Selects wave 0
 15374              		.loc 1 4589 0
 15375 72b2 4FF00000 		mov	r0, #0
 15376 72b6 FFF7FEFF 		bl	Control_Reg_WS_Write
4590:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 15377              		.loc 1 4590 0
 15378 72ba FFF7FEFF 		bl	WaveDAC8_Start
4591:.\console.c   **** 								printf("Sine Wave Astim Started!\r\n");							
 15379              		.loc 1 4591 0
 15380 72be 40F20000 		movw	r0, #:lower16:.LC736
 15381 72c2 C0F20000 		movt	r0, #:upper16:.LC736
 15382 72c6 FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 15383              		.loc 1 4586 0
 15384 72ca 4BE0     		b	.L715
 15385              	.L636:
4593:.\console.c   **** 							else if (astim_type == TRIANGLE_ASTIM)
 15386              		.loc 1 4593 0
 15387 72cc 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 15388 72d0 022B     		cmp	r3, #2
 15389 72d2 16D1     		bne	.L638
4595:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
 15390              		.loc 1 4595 0
 15391 72d4 FFF7FEFF 		bl	WaveDAC8_Stop
4596:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1																	
 15392              		.loc 1 4596 0
 15393 72d8 4FF00100 		mov	r0, #1
 15394 72dc FFF7FEFF 		bl	Control_Reg_WS_Write
4597:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_triangle, WaveDAC8_WAVE_TRIANGLE_LENGTH);	//SELECTS TRIAN
 15395              		.loc 1 4597 0
 15396 72e0 40F20000 		movw	r0, #:lower16:WaveDAC8_wave_triangle
 15397 72e4 C0F20000 		movt	r0, #:upper16:WaveDAC8_wave_triangle
 15398 72e8 40F60551 		movw	r1, #3333
 15399 72ec FFF7FEFF 		bl	WaveDAC8_Wave2Setup
4598:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 15400              		.loc 1 4598 0
 15401 72f0 FFF7FEFF 		bl	WaveDAC8_Start
4599:.\console.c   **** 								printf("Triangle Wave Astim Started!\r\n");								
 15402              		.loc 1 4599 0
 15403 72f4 40F20000 		movw	r0, #:lower16:.LC737
 15404 72f8 C0F20000 		movt	r0, #:upper16:.LC737
 15405 72fc FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 15406              		.loc 1 4586 0
 15407 7300 30E0     		b	.L715
 15408              	.L638:
4601:.\console.c   **** 							else if (astim_type == SQUARE_ASTIM)
 15409              		.loc 1 4601 0
 15410 7302 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 416


 15411 7306 032B     		cmp	r3, #3
 15412 7308 16D1     		bne	.L639
4603:.\console.c   **** 								WaveDAC8_Stop();					//Stops 						
 15413              		.loc 1 4603 0
 15414 730a FFF7FEFF 		bl	WaveDAC8_Stop
4604:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1	
 15415              		.loc 1 4604 0
 15416 730e 4FF00100 		mov	r0, #1
 15417 7312 FFF7FEFF 		bl	Control_Reg_WS_Write
4605:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_square, WaveDAC8_WAVE_SQUARE_LENGTH);	//SELECTS SQUARE
 15418              		.loc 1 4605 0
 15419 7316 40F20000 		movw	r0, #:lower16:WaveDAC8_wave_square
 15420 731a C0F20000 		movt	r0, #:upper16:WaveDAC8_wave_square
 15421 731e 40F60551 		movw	r1, #3333
 15422 7322 FFF7FEFF 		bl	WaveDAC8_Wave2Setup
4606:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 15423              		.loc 1 4606 0
 15424 7326 FFF7FEFF 		bl	WaveDAC8_Start
4607:.\console.c   **** 								printf("Square Wave Astim Started!\r\n");								
 15425              		.loc 1 4607 0
 15426 732a 40F20000 		movw	r0, #:lower16:.LC738
 15427 732e C0F20000 		movt	r0, #:upper16:.LC738
 15428 7332 FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 15429              		.loc 1 4586 0
 15430 7336 15E0     		b	.L715
 15431              	.L639:
4609:.\console.c   **** 							else if (astim_type == NO_ASTIM)
 15432              		.loc 1 4609 0
 15433 7338 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 15434 733c 002B     		cmp	r3, #0
 15435 733e 11D1     		bne	.L715
4611:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8
 15436              		.loc 1 4611 0
 15437 7340 FFF7FEFF 		bl	WaveDAC8_Stop
4612:.\console.c   **** 								PGA_ASTIM_Stop();					//Stops PGA_ASTIM
 15438              		.loc 1 4612 0
 15439 7344 FFF7FEFF 		bl	PGA_ASTIM_Stop
4613:.\console.c   **** 								printf("Wave Astim Stopped!\r\n");							
 15440              		.loc 1 4613 0
 15441 7348 40F20000 		movw	r0, #:lower16:.LC739
 15442 734c C0F20000 		movt	r0, #:upper16:.LC739
 15443 7350 FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 15444              		.loc 1 4586 0
 15445 7354 06E0     		b	.L715
 15446              	.L635:
4622:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15447              		.loc 1 4622 0
 15448 7356 40F20000 		movw	r0, #:lower16:.LC450
 15449 735a C0F20000 		movt	r0, #:upper16:.LC450
 15450 735e FFF7FEFF 		bl	printf
4624:.\console.c   **** 					goto exitpars;
 15451              		.loc 1 4624 0
 15452 7362 B7E0     		b	.L131
 15453              	.L715:
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 417


 15454              		.loc 1 4586 0
 15455 7364 00BF     		nop
 15456              	.L640:
4624:.\console.c   **** 					goto exitpars;
 15457              		.loc 1 4624 0
 15458 7366 B5E0     		b	.L131
 15459              	.L777:
 15460              		.align	2
 15461              	.L776:
 15462 7368 0F000000 		.word	actual_cmd+15
 15463 736c 1E000000 		.word	actual_cmd+30
 15464              	.L634:
4630:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimp") == 0) 
 15465              		.loc 1 4630 0
 15466 7370 5C48     		ldr	r0, .L778
 15467 7372 40F20001 		movw	r1, #:lower16:.LC740
 15468 7376 C0F20001 		movt	r1, #:upper16:.LC740
 15469 737a FFF7FEFF 		bl	strcmp
 15470 737e 0346     		mov	r3, r0
 15471 7380 002B     		cmp	r3, #0
 15472 7382 44D1     		bne	.L641
4632:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
 15473              		.loc 1 4632 0
 15474 7384 5848     		ldr	r0, .L778+4
 15475 7386 FFF7FEFF 		bl	atoi
 15476 738a 0346     		mov	r3, r0
 15477 738c 87F8EC30 		strb	r3, [r7, #236]
4633:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
 15478              		.loc 1 4633 0
 15479 7390 5548     		ldr	r0, .L778+4
 15480 7392 FFF7FEFF 		bl	atoi
 15481 7396 0346     		mov	r3, r0
 15482 7398 87F8EC30 		strb	r3, [r7, #236]
 15483 739c 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15484 73a0 012B     		cmp	r3, #1
 15485 73a2 2DD8     		bhi	.L642
4635:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
 15486              		.loc 1 4635 0
 15487 73a4 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15488 73a8 012B     		cmp	r3, #1
 15489 73aa 18D1     		bne	.L643
4637:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
 15490              		.loc 1 4637 0
 15491 73ac 40F20000 		movw	r0, #:lower16:.LC741
 15492 73b0 C0F20000 		movt	r0, #:upper16:.LC741
 15493 73b4 FFF7FEFF 		bl	puts
4638:.\console.c   **** 							printf(STR_ASTIMB);				//
 15494              		.loc 1 4638 0
 15495 73b8 40F20000 		movw	r0, #:lower16:.LC742
 15496 73bc C0F20000 		movt	r0, #:upper16:.LC742
 15497 73c0 FFF7FEFF 		bl	printf
4640:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
 15498              		.loc 1 4640 0
 15499 73c4 4FF00100 		mov	r0, #1
 15500 73c8 FFF7FEFF 		bl	ButtonYNChoice
 15501 73cc 0346     		mov	r3, r0
 15502 73ce 002B     		cmp	r3, #0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 418


 15503 73d0 7BD0     		beq	.L716
 15504              	.L644:
4644:.\console.c   **** 							printf("\r\n");	
 15505              		.loc 1 4644 0
 15506 73d2 40F20000 		movw	r0, #:lower16:.LC42
 15507 73d6 C0F20000 		movt	r0, #:upper16:.LC42
 15508 73da FFF7FEFF 		bl	puts
 15509              	.L643:
4650:.\console.c   **** 						pan_axis.vparam.astim_enable  = astim_enable;
 15510              		.loc 1 4650 0
 15511 73de 40F20003 		movw	r3, #:lower16:pan_axis
 15512 73e2 C0F20003 		movt	r3, #:upper16:pan_axis
 15513 73e6 97F8EC20 		ldrb	r2, [r7, #236]
 15514 73ea 1A70     		strb	r2, [r3, #0]
4652:.\console.c   **** 						printf(STR_REM_ASEP, (uint16)astim_enable);   /* REM: PAN  Astim Type Configured to...*/
 15515              		.loc 1 4652 0
 15516 73ec 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15517 73f0 40F20000 		movw	r0, #:lower16:.LC743
 15518 73f4 C0F20000 		movt	r0, #:upper16:.LC743
 15519 73f8 1946     		mov	r1, r3
 15520 73fa FFF7FEFF 		bl	printf
4658:.\console.c   **** 					goto exitpars;
 15521              		.loc 1 4658 0
 15522 73fe 69E0     		b	.L131
 15523              	.L642:
4656:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15524              		.loc 1 4656 0
 15525 7400 40F20000 		movw	r0, #:lower16:.LC450
 15526 7404 C0F20000 		movt	r0, #:upper16:.LC450
 15527 7408 FFF7FEFF 		bl	printf
4658:.\console.c   **** 					goto exitpars;
 15528              		.loc 1 4658 0
 15529 740c 62E0     		b	.L131
 15530              	.L641:
4664:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimt") == 0) 
 15531              		.loc 1 4664 0
 15532 740e 3548     		ldr	r0, .L778
 15533 7410 40F20001 		movw	r1, #:lower16:.LC744
 15534 7414 C0F20001 		movt	r1, #:upper16:.LC744
 15535 7418 FFF7FEFF 		bl	strcmp
 15536 741c 0346     		mov	r3, r0
 15537 741e 002B     		cmp	r3, #0
 15538 7420 55D1     		bne	.L717
4666:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
 15539              		.loc 1 4666 0
 15540 7422 3148     		ldr	r0, .L778+4
 15541 7424 FFF7FEFF 		bl	atoi
 15542 7428 0346     		mov	r3, r0
 15543 742a 87F8EC30 		strb	r3, [r7, #236]
4667:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
 15544              		.loc 1 4667 0
 15545 742e 2E48     		ldr	r0, .L778+4
 15546 7430 FFF7FEFF 		bl	atoi
 15547 7434 0346     		mov	r3, r0
 15548 7436 87F8EC30 		strb	r3, [r7, #236]
 15549 743a 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15550 743e 012B     		cmp	r3, #1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 419


 15551 7440 2DD8     		bhi	.L646
4669:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
 15552              		.loc 1 4669 0
 15553 7442 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15554 7446 012B     		cmp	r3, #1
 15555 7448 18D1     		bne	.L647
4671:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
 15556              		.loc 1 4671 0
 15557 744a 40F20000 		movw	r0, #:lower16:.LC741
 15558 744e C0F20000 		movt	r0, #:upper16:.LC741
 15559 7452 FFF7FEFF 		bl	puts
4672:.\console.c   **** 							printf(STR_ASTIMB);				//
 15560              		.loc 1 4672 0
 15561 7456 40F20000 		movw	r0, #:lower16:.LC742
 15562 745a C0F20000 		movt	r0, #:upper16:.LC742
 15563 745e FFF7FEFF 		bl	printf
4674:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
 15564              		.loc 1 4674 0
 15565 7462 4FF00100 		mov	r0, #1
 15566 7466 FFF7FEFF 		bl	ButtonYNChoice
 15567 746a 0346     		mov	r3, r0
 15568 746c 002B     		cmp	r3, #0
 15569 746e 30D0     		beq	.L718
 15570              	.L648:
4678:.\console.c   **** 							printf("\r\n");
 15571              		.loc 1 4678 0
 15572 7470 40F20000 		movw	r0, #:lower16:.LC42
 15573 7474 C0F20000 		movt	r0, #:upper16:.LC42
 15574 7478 FFF7FEFF 		bl	puts
 15575              	.L647:
4684:.\console.c   **** 							tilt_axis.vparam.astim_enable  = astim_enable;
 15576              		.loc 1 4684 0
 15577 747c 40F20003 		movw	r3, #:lower16:tilt_axis
 15578 7480 C0F20003 		movt	r3, #:upper16:tilt_axis
 15579 7484 97F8EC20 		ldrb	r2, [r7, #236]
 15580 7488 1A70     		strb	r2, [r3, #0]
4686:.\console.c   **** 							printf(STR_REM_ASET, (uint16)astim_enable);   /* REM: TILT  Astim Type Configured to...*/
 15581              		.loc 1 4686 0
 15582 748a 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15583 748e 40F20000 		movw	r0, #:lower16:.LC745
 15584 7492 C0F20000 		movt	r0, #:upper16:.LC745
 15585 7496 1946     		mov	r1, r3
 15586 7498 FFF7FEFF 		bl	printf
4692:.\console.c   **** 					goto exitpars;
 15587              		.loc 1 4692 0
 15588 749c 1AE0     		b	.L131
 15589              	.L646:
4690:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15590              		.loc 1 4690 0
 15591 749e 40F20000 		movw	r0, #:lower16:.LC450
 15592 74a2 C0F20000 		movt	r0, #:upper16:.LC450
 15593 74a6 FFF7FEFF 		bl	printf
4692:.\console.c   **** 					goto exitpars;
 15594              		.loc 1 4692 0
 15595 74aa 13E0     		b	.L131
 15596              	.L419:
4753:.\console.c   **** 		}	
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 420


4754:.\console.c   **** 	printf(STR_ERROR4);
 15597              		.loc 1 4754 0
 15598 74ac 40F20000 		movw	r0, #:lower16:.LC746
 15599 74b0 C0F20000 		movt	r0, #:upper16:.LC746
 15600 74b4 FFF7FEFF 		bl	printf
 15601 74b8 0CE0     		b	.L131
 15602              	.L698:
1207:.\console.c   **** 	goto exitpars;
 15603              		.loc 1 1207 0
 15604 74ba 00BF     		nop
 15605 74bc 0AE0     		b	.L131
 15606              	.L707:
2279:.\console.c   **** 				goto exitpars;	
 15607              		.loc 1 2279 0
 15608 74be 00BF     		nop
 15609 74c0 08E0     		b	.L131
 15610              	.L712:
2770:.\console.c   **** 				goto exitpars;
 15611              		.loc 1 2770 0
 15612 74c2 00BF     		nop
 15613 74c4 06E0     		b	.L131
 15614              	.L713:
2991:.\console.c   **** 		goto exitpars;	
 15615              		.loc 1 2991 0
 15616 74c6 00BF     		nop
 15617 74c8 04E0     		b	.L131
 15618              	.L716:
4642:.\console.c   **** 								goto exitpars;
 15619              		.loc 1 4642 0
 15620 74ca 00BF     		nop
 15621 74cc 02E0     		b	.L131
 15622              	.L717:
4752:.\console.c   **** 		goto exitpars;	
 15623              		.loc 1 4752 0
 15624 74ce 00BF     		nop
 15625 74d0 00E0     		b	.L131
 15626              	.L718:
4676:.\console.c   **** 								goto exitpars;
 15627              		.loc 1 4676 0
 15628 74d2 00BF     		nop
 15629              	.L131:
4755:.\console.c   **** 
4756:.\console.c   **** 	
4757:.\console.c   **** exitpars:	
4758:.\console.c   **** 	//printf("\r\n");	
4759:.\console.c   **** 	return 0;	// PARS_OK//
 15630              		.loc 1 4759 0
 15631 74d4 4FF00003 		mov	r3, #0
4760:.\console.c   **** }
 15632              		.loc 1 4760 0
 15633 74d8 1846     		mov	r0, r3
 15634 74da 07F58E77 		add	r7, r7, #284
 15635 74de BD46     		mov	sp, r7
 15636 74e0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 15637              	.L779:
 15638              		.align	2
 15639              	.L778:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 421


 15640 74e4 0F000000 		.word	actual_cmd+15
 15641 74e8 1E000000 		.word	actual_cmd+30
 15642              		.cfi_endproc
 15643              	.LFE69:
 15644              		.size	parser, .-parser
 15645 74ec AFF30080 		.section	.text.AnyButtonPressed,"ax",%progbits
 15646              		.align	2
 15647              		.global	AnyButtonPressed
 15648              		.thumb
 15649              		.thumb_func
 15650              		.type	AnyButtonPressed, %function
 15651              	AnyButtonPressed:
 15652              	.LFB70:
4761:.\console.c   **** 
4762:.\console.c   **** 
4763:.\console.c   **** /* Verify Any CHAR pressed */
4764:.\console.c   **** uint8 AnyButtonPressed(void)
4765:.\console.c   **** {	
 15653              		.loc 1 4765 0
 15654              		.cfi_startproc
 15655              		@ args = 0, pretend = 0, frame = 0
 15656              		@ frame_needed = 1, uses_anonymous_args = 0
 15657 0000 80B5     		push	{r7, lr}
 15658              	.LCFI40:
 15659              		.cfi_def_cfa_offset 8
 15660              		.cfi_offset 7, -8
 15661              		.cfi_offset 14, -4
 15662 0002 00AF     		add	r7, sp, #0
 15663              	.LCFI41:
 15664              		.cfi_def_cfa_register 7
4766:.\console.c   **** 	// case USB standard input
4767:.\console.c   **** 	if (UART_USB_GetChar() == 0)
 15665              		.loc 1 4767 0
 15666 0004 FFF7FEFF 		bl	UART_USB_GetChar
 15667 0008 0346     		mov	r3, r0
 15668 000a 002B     		cmp	r3, #0
 15669 000c 02D1     		bne	.L781
4768:.\console.c   **** 	{
4769:.\console.c   **** 		return NO_PRESSED;
 15670              		.loc 1 4769 0
 15671 000e 4FF00003 		mov	r3, #0
 15672 0012 01E0     		b	.L782
 15673              	.L781:
4770:.\console.c   **** 	}
4771:.\console.c   **** 	else
4772:.\console.c   **** 	{
4773:.\console.c   **** 		return PRESSED;
 15674              		.loc 1 4773 0
 15675 0014 4FF00103 		mov	r3, #1
 15676              	.L782:
4774:.\console.c   **** 	}
4775:.\console.c   **** }
 15677              		.loc 1 4775 0
 15678 0018 1846     		mov	r0, r3
 15679 001a 80BD     		pop	{r7, pc}
 15680              		.cfi_endproc
 15681              	.LFE70:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 422


 15682              		.size	AnyButtonPressed, .-AnyButtonPressed
 15683              		.section	.text.ButtonYNChoice,"ax",%progbits
 15684              		.align	2
 15685              		.global	ButtonYNChoice
 15686              		.thumb
 15687              		.thumb_func
 15688              		.type	ButtonYNChoice, %function
 15689              	ButtonYNChoice:
 15690              	.LFB71:
4776:.\console.c   **** 
4777:.\console.c   **** 
4778:.\console.c   **** 
4779:.\console.c   **** /* Verify [Y/N] choice */
4780:.\console.c   **** uint8 ButtonYNChoice(bit echo)
4781:.\console.c   **** {	
 15691              		.loc 1 4781 0
 15692              		.cfi_startproc
 15693              		@ args = 0, pretend = 0, frame = 16
 15694              		@ frame_needed = 1, uses_anonymous_args = 0
 15695 0000 80B5     		push	{r7, lr}
 15696              	.LCFI42:
 15697              		.cfi_def_cfa_offset 8
 15698              		.cfi_offset 7, -8
 15699              		.cfi_offset 14, -4
 15700 0002 84B0     		sub	sp, sp, #16
 15701              	.LCFI43:
 15702              		.cfi_def_cfa_offset 24
 15703 0004 00AF     		add	r7, sp, #0
 15704              	.LCFI44:
 15705              		.cfi_def_cfa_register 7
 15706 0006 0346     		mov	r3, r0
 15707 0008 FB71     		strb	r3, [r7, #7]
 15708              	.L784:
4782:.\console.c   **** 	char charin;
4783:.\console.c   **** 	
4784:.\console.c   **** //	if (std_input == USB_STD_INPUT)
4785:.\console.c   **** //	{
4786:.\console.c   **** 		// case USB standard input
4787:.\console.c   **** 		while ((charin = UART_USB_GetChar()) == 0)
 15709              		.loc 1 4787 0 discriminator 1
 15710 000a FFF7FEFF 		bl	UART_USB_GetChar
 15711 000e 0346     		mov	r3, r0
 15712 0010 FB73     		strb	r3, [r7, #15]
 15713 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15714 0014 002B     		cmp	r3, #0
 15715 0016 F8D0     		beq	.L784
4788:.\console.c   **** 		{
4789:.\console.c   **** 		//wait for char
4790:.\console.c   **** 		}
4791:.\console.c   **** //	}
4792:.\console.c   **** //	else
4793:.\console.c   **** //	{
4794:.\console.c   **** //		// case BT standard input
4795:.\console.c   **** //		while ((charin = UART_BT_GetChar()) == 0)
4796:.\console.c   **** //		{
4797:.\console.c   **** //		//wait for char
4798:.\console.c   **** //		}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 423


4799:.\console.c   **** //	}
4800:.\console.c   **** 	
4801:.\console.c   **** 	if (echo == 1)
 15716              		.loc 1 4801 0
 15717 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 15718 001a 012B     		cmp	r3, #1
 15719 001c 03D1     		bne	.L785
4802:.\console.c   **** 	{
4803:.\console.c   **** 		printf("%c", charin);
 15720              		.loc 1 4803 0
 15721 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15722 0020 1846     		mov	r0, r3
 15723 0022 FFF7FEFF 		bl	putchar
 15724              	.L785:
 15725              	.LBB10:
4804:.\console.c   **** 	}
4805:.\console.c   **** 	
4806:.\console.c   **** 	if (tolower((int)charin) == 'y')
 15726              		.loc 1 4806 0
 15727 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15728 0028 BB60     		str	r3, [r7, #8]
 15729 002a 40F20003 		movw	r3, #:lower16:__ctype_ptr__
 15730 002e C0F20003 		movt	r3, #:upper16:__ctype_ptr__
 15731 0032 1A68     		ldr	r2, [r3, #0]
 15732 0034 BB68     		ldr	r3, [r7, #8]
 15733 0036 03F10103 		add	r3, r3, #1
 15734 003a D318     		adds	r3, r2, r3
 15735 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 15736 003e 03F00303 		and	r3, r3, #3
 15737 0042 012B     		cmp	r3, #1
 15738 0044 03D1     		bne	.L786
 15739              		.loc 1 4806 0 is_stmt 0 discriminator 1
 15740 0046 BB68     		ldr	r3, [r7, #8]
 15741 0048 03F12003 		add	r3, r3, #32
 15742 004c 00E0     		b	.L787
 15743              	.L786:
 15744              		.loc 1 4806 0 discriminator 2
 15745 004e BB68     		ldr	r3, [r7, #8]
 15746              	.L787:
 15747              	.LBE10:
 15748              		.loc 1 4806 0 discriminator 3
 15749 0050 792B     		cmp	r3, #121
 15750 0052 02D1     		bne	.L788
4807:.\console.c   **** 	{
4808:.\console.c   **** 		return _YES;
 15751              		.loc 1 4808 0 is_stmt 1
 15752 0054 4FF00103 		mov	r3, #1
 15753 0058 01E0     		b	.L789
 15754              	.L788:
4809:.\console.c   **** 	}
4810:.\console.c   **** 	else
4811:.\console.c   **** 	{
4812:.\console.c   **** 		return _NO;
 15755              		.loc 1 4812 0
 15756 005a 4FF00003 		mov	r3, #0
 15757              	.L789:
4813:.\console.c   **** 	}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 424


4814:.\console.c   **** 
4815:.\console.c   **** }
 15758              		.loc 1 4815 0
 15759 005e 1846     		mov	r0, r3
 15760 0060 07F11007 		add	r7, r7, #16
 15761 0064 BD46     		mov	sp, r7
 15762 0066 80BD     		pop	{r7, pc}
 15763              		.cfi_endproc
 15764              	.LFE71:
 15765              		.size	ButtonYNChoice, .-ButtonYNChoice
 15766              		.section	.text.clear_string,"ax",%progbits
 15767              		.align	2
 15768              		.global	clear_string
 15769              		.thumb
 15770              		.thumb_func
 15771              		.type	clear_string, %function
 15772              	clear_string:
 15773              	.LFB72:
4816:.\console.c   **** 
4817:.\console.c   **** 
4818:.\console.c   **** void clear_string(char *str)
4819:.\console.c   **** {
 15774              		.loc 1 4819 0
 15775              		.cfi_startproc
 15776              		@ args = 0, pretend = 0, frame = 16
 15777              		@ frame_needed = 1, uses_anonymous_args = 0
 15778              		@ link register save eliminated.
 15779 0000 80B4     		push	{r7}
 15780              	.LCFI45:
 15781              		.cfi_def_cfa_offset 4
 15782              		.cfi_offset 7, -4
 15783 0002 85B0     		sub	sp, sp, #20
 15784              	.LCFI46:
 15785              		.cfi_def_cfa_offset 24
 15786 0004 00AF     		add	r7, sp, #0
 15787              	.LCFI47:
 15788              		.cfi_def_cfa_register 7
 15789 0006 7860     		str	r0, [r7, #4]
4820:.\console.c   **** 	uint8 idx = 0;
 15790              		.loc 1 4820 0
 15791 0008 4FF00003 		mov	r3, #0
 15792 000c FB73     		strb	r3, [r7, #15]
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15793              		.loc 1 4821 0
 15794 000e 4FF00003 		mov	r3, #0
 15795 0012 FB73     		strb	r3, [r7, #15]
 15796 0014 09E0     		b	.L791
 15797              	.L792:
4822:.\console.c   **** 	{
4823:.\console.c   **** 		*(str + idx) = '\0';
 15798              		.loc 1 4823 0 discriminator 2
 15799 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15800 0018 7A68     		ldr	r2, [r7, #4]
 15801 001a D318     		adds	r3, r2, r3
 15802 001c 4FF00002 		mov	r2, #0
 15803 0020 1A70     		strb	r2, [r3, #0]
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 425


 15804              		.loc 1 4821 0 discriminator 2
 15805 0022 FB7B     		ldrb	r3, [r7, #15]
 15806 0024 03F10103 		add	r3, r3, #1
 15807 0028 FB73     		strb	r3, [r7, #15]
 15808              	.L791:
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15809              		.loc 1 4821 0 is_stmt 0 discriminator 1
 15810 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15811 002c 042B     		cmp	r3, #4
 15812 002e F2D9     		bls	.L792
4824:.\console.c   **** 	}
4825:.\console.c   **** }
 15813              		.loc 1 4825 0 is_stmt 1
 15814 0030 07F11407 		add	r7, r7, #20
 15815 0034 BD46     		mov	sp, r7
 15816 0036 80BC     		pop	{r7}
 15817 0038 7047     		bx	lr
 15818              		.cfi_endproc
 15819              	.LFE72:
 15820              		.size	clear_string, .-clear_string
 15821 003a 00BF     		.section	.text.USB_Check,"ax",%progbits
 15822              		.align	2
 15823              		.global	USB_Check
 15824              		.thumb
 15825              		.thumb_func
 15826              		.type	USB_Check, %function
 15827              	USB_Check:
 15828              	.LFB73:
4826:.\console.c   **** 
4827:.\console.c   **** 
4828:.\console.c   **** uint8 USB_Check(void)
4829:.\console.c   **** {	
 15829              		.loc 1 4829 0
 15830              		.cfi_startproc
 15831              		@ args = 0, pretend = 0, frame = 0
 15832              		@ frame_needed = 1, uses_anonymous_args = 0
 15833              		@ link register save eliminated.
 15834 0000 80B4     		push	{r7}
 15835              	.LCFI48:
 15836              		.cfi_def_cfa_offset 4
 15837              		.cfi_offset 7, -4
 15838 0002 00AF     		add	r7, sp, #0
 15839              	.LCFI49:
 15840              		.cfi_def_cfa_register 7
4830:.\console.c   **** 	return USB_INSERTED;	/* There is not the phisical signal on the board */
 15841              		.loc 1 4830 0
 15842 0004 4FF00103 		mov	r3, #1
4831:.\console.c   **** 
4832:.\console.c   **** }
 15843              		.loc 1 4832 0
 15844 0008 1846     		mov	r0, r3
 15845 000a BD46     		mov	sp, r7
 15846 000c 80BC     		pop	{r7}
 15847 000e 7047     		bx	lr
 15848              		.cfi_endproc
 15849              	.LFE73:
 15850              		.size	USB_Check, .-USB_Check
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 426


 15851              		.section	.text.GetAnaposOffsetZero,"ax",%progbits
 15852              		.align	2
 15853              		.global	GetAnaposOffsetZero
 15854              		.thumb
 15855              		.thumb_func
 15856              		.type	GetAnaposOffsetZero, %function
 15857              	GetAnaposOffsetZero:
 15858              	.LFB74:
4833:.\console.c   **** 
4834:.\console.c   **** 
4835:.\console.c   **** /* Get Anapos Offset value to zero Oscilloscope									*/
4836:.\console.c   **** /*   returns: (int32)anapos_offset  correct value to zero oscilloscope output	*/
4837:.\console.c   **** int32 GetAnaposOffsetZero(void)
4838:.\console.c   **** {	
 15859              		.loc 1 4838 0
 15860              		.cfi_startproc
 15861              		@ args = 0, pretend = 0, frame = 0
 15862              		@ frame_needed = 1, uses_anonymous_args = 0
 15863 0000 80B5     		push	{r7, lr}
 15864              	.LCFI50:
 15865              		.cfi_def_cfa_offset 8
 15866              		.cfi_offset 7, -8
 15867              		.cfi_offset 14, -4
 15868 0002 00AF     		add	r7, sp, #0
 15869              	.LCFI51:
 15870              		.cfi_def_cfa_register 7
4839:.\console.c   **** 	/* CONTROL integral(t) CASE		*/
4840:.\console.c   **** 	if ((*Selected_ANAOUT).param.color == CTRL_IERROR)
 15871              		.loc 1 4840 0
 15872 0004 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15873 0008 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15874 000c 1B68     		ldr	r3, [r3, #0]
 15875 000e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15876 0012 062B     		cmp	r3, #6
 15877 0014 0FD1     		bne	.L796
4841:.\console.c   **** 	{
4842:.\console.c   **** 		anapos_offset = (*Selected_ANAOUT).mc.ierror;
 15878              		.loc 1 4842 0
 15879 0016 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15880 001a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15881 001e 1B68     		ldr	r3, [r3, #0]
 15882 0020 1B6E     		ldr	r3, [r3, #96]	@ float
 15883 0022 1846     		mov	r0, r3
 15884 0024 FFF7FEFF 		bl	__aeabi_f2iz
 15885 0028 0246     		mov	r2, r0
 15886 002a 40F20003 		movw	r3, #:lower16:anapos_offset
 15887 002e C0F20003 		movt	r3, #:upper16:anapos_offset
 15888 0032 1A60     		str	r2, [r3, #0]
 15889 0034 87E0     		b	.L797
 15890              	.L796:
4843:.\console.c   **** 	}
4844:.\console.c   **** 	/* CONTROL integral_action(t) CASE	*/
4845:.\console.c   **** 	else if ((*Selected_ANAOUT).param.color == CTRL_AZIERROR)
 15891              		.loc 1 4845 0
 15892 0036 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15893 003a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15894 003e 1B68     		ldr	r3, [r3, #0]
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 427


 15895 0040 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15896 0044 072B     		cmp	r3, #7
 15897 0046 1AD1     		bne	.L798
4846:.\console.c   **** 	{
4847:.\console.c   **** 		anapos_offset = (*Selected_ANAOUT).param.Kif.fnum * (*Selected_ANAOUT).mc.ierror;
 15898              		.loc 1 4847 0
 15899 0048 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15900 004c C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15901 0050 1B68     		ldr	r3, [r3, #0]
 15902 0052 DA69     		ldr	r2, [r3, #28]	@ float
 15903 0054 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15904 0058 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15905 005c 1B68     		ldr	r3, [r3, #0]
 15906 005e 1B6E     		ldr	r3, [r3, #96]	@ float
 15907 0060 1046     		mov	r0, r2
 15908 0062 1946     		mov	r1, r3
 15909 0064 FFF7FEFF 		bl	__aeabi_fmul
 15910 0068 0346     		mov	r3, r0
 15911 006a 1846     		mov	r0, r3
 15912 006c FFF7FEFF 		bl	__aeabi_f2iz
 15913 0070 0246     		mov	r2, r0
 15914 0072 40F20003 		movw	r3, #:lower16:anapos_offset
 15915 0076 C0F20003 		movt	r3, #:upper16:anapos_offset
 15916 007a 1A60     		str	r2, [r3, #0]
 15917 007c 63E0     		b	.L797
 15918              	.L798:
4848:.\console.c   **** 	}	
4849:.\console.c   **** 	/* SLAVE CASE */
4850:.\console.c   **** 	else if ((*Selected_ANAOUT).param.color == SLAVE_ENC_POS)
 15919              		.loc 1 4850 0
 15920 007e 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15921 0082 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15922 0086 1B68     		ldr	r3, [r3, #0]
 15923 0088 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15924 008c 012B     		cmp	r3, #1
 15925 008e 2FD1     		bne	.L799
4851:.\console.c   **** 	{
4852:.\console.c   **** 		if (Selected_ANAOUT == &pan_axis)
 15926              		.loc 1 4852 0
 15927 0090 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15928 0094 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15929 0098 1A68     		ldr	r2, [r3, #0]
 15930 009a 40F20003 		movw	r3, #:lower16:pan_axis
 15931 009e C0F20003 		movt	r3, #:upper16:pan_axis
 15932 00a2 9A42     		cmp	r2, r3
 15933 00a4 08D1     		bne	.L800
4853:.\console.c   **** 		{
4854:.\console.c   **** 			anapos_offset = QuadDec_PAN_GetCounter();
 15934              		.loc 1 4854 0
 15935 00a6 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 15936 00aa 0246     		mov	r2, r0
 15937 00ac 40F20003 		movw	r3, #:lower16:anapos_offset
 15938 00b0 C0F20003 		movt	r3, #:upper16:anapos_offset
 15939 00b4 1A60     		str	r2, [r3, #0]
 15940 00b6 46E0     		b	.L797
 15941              	.L800:
4855:.\console.c   **** 		}
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 428


4856:.\console.c   **** 		else if (Selected_ANAOUT == &tilt_axis)
 15942              		.loc 1 4856 0
 15943 00b8 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15944 00bc C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15945 00c0 1A68     		ldr	r2, [r3, #0]
 15946 00c2 40F20003 		movw	r3, #:lower16:tilt_axis
 15947 00c6 C0F20003 		movt	r3, #:upper16:tilt_axis
 15948 00ca 9A42     		cmp	r2, r3
 15949 00cc 08D1     		bne	.L801
4857:.\console.c   **** 		{
4858:.\console.c   **** 			anapos_offset = QuadDec_TILT_GetCounter();
 15950              		.loc 1 4858 0
 15951 00ce FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 15952 00d2 0246     		mov	r2, r0
 15953 00d4 40F20003 		movw	r3, #:lower16:anapos_offset
 15954 00d8 C0F20003 		movt	r3, #:upper16:anapos_offset
 15955 00dc 1A60     		str	r2, [r3, #0]
 15956 00de 32E0     		b	.L797
 15957              	.L801:
4859:.\console.c   **** 		}	
4860:.\console.c   **** //		else if (Selected_ANAOUT == &roll_axis)
4861:.\console.c   **** //		{
4862:.\console.c   **** //			anapos_offset = QuadDec_ROLL_GetCounter();
4863:.\console.c   **** //		}	
4864:.\console.c   **** 		else
4865:.\console.c   **** 		{
4866:.\console.c   **** 			anapos_offset = 0;
 15958              		.loc 1 4866 0
 15959 00e0 40F20003 		movw	r3, #:lower16:anapos_offset
 15960 00e4 C0F20003 		movt	r3, #:upper16:anapos_offset
 15961 00e8 4FF00002 		mov	r2, #0
 15962 00ec 1A60     		str	r2, [r3, #0]
 15963 00ee 2AE0     		b	.L797
 15964              	.L799:
4867:.\console.c   **** 		}				
4868:.\console.c   **** 	}
4869:.\console.c   **** 	/* ASTIM CASE */
4870:.\console.c   **** 	else if (((*Selected_ANAOUT).param.color == ASTIM_IN) || 
 15965              		.loc 1 4870 0
 15966 00f0 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15967 00f4 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15968 00f8 1B68     		ldr	r3, [r3, #0]
 15969 00fa 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15970 00fe 032B     		cmp	r3, #3
 15971 0100 1AD0     		beq	.L802
4871:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_ERROR) ||
 15972              		.loc 1 4871 0 discriminator 1
 15973 0102 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15974 0106 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15975 010a 1B68     		ldr	r3, [r3, #0]
 15976 010c 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4870:.\console.c   **** 	else if (((*Selected_ANAOUT).param.color == ASTIM_IN) || 
 15977              		.loc 1 4870 0 discriminator 1
 15978 0110 042B     		cmp	r3, #4
 15979 0112 11D0     		beq	.L802
4872:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_DERROR) ||
 15980              		.loc 1 4872 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 429


 15981 0114 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15982 0118 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15983 011c 1B68     		ldr	r3, [r3, #0]
 15984 011e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4871:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_ERROR) ||
 15985              		.loc 1 4871 0
 15986 0122 052B     		cmp	r3, #5
 15987 0124 08D0     		beq	.L802
4873:.\console.c   **** 			((*Selected_ANAOUT).param.color == GYRO_RATE))
 15988              		.loc 1 4873 0
 15989 0126 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15990 012a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15991 012e 1B68     		ldr	r3, [r3, #0]
 15992 0130 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4872:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_DERROR) ||
 15993              		.loc 1 4872 0
 15994 0134 002B     		cmp	r3, #0
 15995 0136 06D1     		bne	.L797
 15996              	.L802:
4874:.\console.c   **** 	{
4875:.\console.c   **** 			anapos_offset = 0;
 15997              		.loc 1 4875 0
 15998 0138 40F20003 		movw	r3, #:lower16:anapos_offset
 15999 013c C0F20003 		movt	r3, #:upper16:anapos_offset
 16000 0140 4FF00002 		mov	r2, #0
 16001 0144 1A60     		str	r2, [r3, #0]
 16002              	.L797:
4876:.\console.c   **** 	}
4877:.\console.c   **** 	
4878:.\console.c   **** 	return anapos_offset;
 16003              		.loc 1 4878 0
 16004 0146 40F20003 		movw	r3, #:lower16:anapos_offset
 16005 014a C0F20003 		movt	r3, #:upper16:anapos_offset
 16006 014e 1B68     		ldr	r3, [r3, #0]
4879:.\console.c   **** }
 16007              		.loc 1 4879 0
 16008 0150 1846     		mov	r0, r3
 16009 0152 80BD     		pop	{r7, pc}
 16010              		.cfi_endproc
 16011              	.LFE74:
 16012              		.size	GetAnaposOffsetZero, .-GetAnaposOffsetZero
 16013              		.text
 16014              	.Letext0:
 16015              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.0\\psoc creator\\import\\gnu_cs\\arm\\4
 16016              		.file 3 "./Generated_Source/PSoC5/cytypes.h"
 16017              		.file 4 "./gobee.h"
 16018              		.file 5 "./console.h"
 16019              		.file 6 "./mover.h"
 16020              		.file 7 "./clu.h"
 16021              		.file 8 "./statistics.h"
 16022              		.file 9 "./torquestat.h"
 16023              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\3.0\\psoc creator\\import\\gnu_cs\\arm\\
 16024              		.file 11 "./Generated_Source/PSoC5/core_cm3.h"
 16025              		.file 12 "./XTR-8LR100.h"
 16026              		.section	.debug_info,"",%progbits
 16027              	.Ldebug_info0:
 16028 0000 90180000 		.4byte	0x1890
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 430


 16029 0004 0200     		.2byte	0x2
 16030 0006 00000000 		.4byte	.Ldebug_abbrev0
 16031 000a 04       		.byte	0x4
 16032 000b 01       		.uleb128 0x1
 16033 000c B9030000 		.4byte	.LASF315
 16034 0010 01       		.byte	0x1
 16035 0011 F90D0000 		.4byte	.LASF316
 16036 0015 16070000 		.4byte	.LASF317
 16037 0019 00000000 		.4byte	.Ldebug_ranges0+0
 16038 001d 00000000 		.4byte	0
 16039 0021 00000000 		.4byte	0
 16040 0025 00000000 		.4byte	.Ldebug_line0
 16041 0029 02       		.uleb128 0x2
 16042 002a 01       		.byte	0x1
 16043 002b 06       		.byte	0x6
 16044 002c 11030000 		.4byte	.LASF0
 16045 0030 02       		.uleb128 0x2
 16046 0031 01       		.byte	0x1
 16047 0032 08       		.byte	0x8
 16048 0033 71030000 		.4byte	.LASF1
 16049 0037 02       		.uleb128 0x2
 16050 0038 02       		.byte	0x2
 16051 0039 05       		.byte	0x5
 16052 003a D90C0000 		.4byte	.LASF2
 16053 003e 02       		.uleb128 0x2
 16054 003f 02       		.byte	0x2
 16055 0040 07       		.byte	0x7
 16056 0041 5E0E0000 		.4byte	.LASF3
 16057 0045 03       		.uleb128 0x3
 16058 0046 73000000 		.4byte	.LASF9
 16059 004a 02       		.byte	0x2
 16060 004b 4F       		.byte	0x4f
 16061 004c 50000000 		.4byte	0x50
 16062 0050 02       		.uleb128 0x2
 16063 0051 04       		.byte	0x4
 16064 0052 05       		.byte	0x5
 16065 0053 89020000 		.4byte	.LASF4
 16066 0057 02       		.uleb128 0x2
 16067 0058 04       		.byte	0x4
 16068 0059 07       		.byte	0x7
 16069 005a 8F060000 		.4byte	.LASF5
 16070 005e 02       		.uleb128 0x2
 16071 005f 08       		.byte	0x8
 16072 0060 05       		.byte	0x5
 16073 0061 09080000 		.4byte	.LASF6
 16074 0065 02       		.uleb128 0x2
 16075 0066 08       		.byte	0x8
 16076 0067 07       		.byte	0x7
 16077 0068 B20A0000 		.4byte	.LASF7
 16078 006c 04       		.uleb128 0x4
 16079 006d 04       		.byte	0x4
 16080 006e 05       		.byte	0x5
 16081 006f 696E7400 		.ascii	"int\000"
 16082 0073 02       		.uleb128 0x2
 16083 0074 04       		.byte	0x4
 16084 0075 07       		.byte	0x7
 16085 0076 D0080000 		.4byte	.LASF8
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 431


 16086 007a 03       		.uleb128 0x3
 16087 007b 950C0000 		.4byte	.LASF10
 16088 007f 03       		.byte	0x3
 16089 0080 5B       		.byte	0x5b
 16090 0081 30000000 		.4byte	0x30
 16091 0085 03       		.uleb128 0x3
 16092 0086 480F0000 		.4byte	.LASF11
 16093 008a 03       		.byte	0x3
 16094 008b 5C       		.byte	0x5c
 16095 008c 3E000000 		.4byte	0x3e
 16096 0090 03       		.uleb128 0x3
 16097 0091 C2000000 		.4byte	.LASF12
 16098 0095 03       		.byte	0x3
 16099 0096 5D       		.byte	0x5d
 16100 0097 57000000 		.4byte	0x57
 16101 009b 03       		.uleb128 0x3
 16102 009c A8010000 		.4byte	.LASF13
 16103 00a0 03       		.byte	0x3
 16104 00a1 5E       		.byte	0x5e
 16105 00a2 29000000 		.4byte	0x29
 16106 00a6 03       		.uleb128 0x3
 16107 00a7 0F0E0000 		.4byte	.LASF14
 16108 00ab 03       		.byte	0x3
 16109 00ac 5F       		.byte	0x5f
 16110 00ad 37000000 		.4byte	0x37
 16111 00b1 03       		.uleb128 0x3
 16112 00b2 AF0E0000 		.4byte	.LASF15
 16113 00b6 03       		.byte	0x3
 16114 00b7 60       		.byte	0x60
 16115 00b8 50000000 		.4byte	0x50
 16116 00bc 02       		.uleb128 0x2
 16117 00bd 04       		.byte	0x4
 16118 00be 04       		.byte	0x4
 16119 00bf B4080000 		.4byte	.LASF16
 16120 00c3 02       		.uleb128 0x2
 16121 00c4 08       		.byte	0x8
 16122 00c5 04       		.byte	0x4
 16123 00c6 64080000 		.4byte	.LASF17
 16124 00ca 03       		.uleb128 0x3
 16125 00cb 42010000 		.4byte	.LASF18
 16126 00cf 03       		.byte	0x3
 16127 00d0 6C       		.byte	0x6c
 16128 00d1 D5000000 		.4byte	0xd5
 16129 00d5 02       		.uleb128 0x2
 16130 00d6 01       		.byte	0x1
 16131 00d7 08       		.byte	0x8
 16132 00d8 6C040000 		.4byte	.LASF19
 16133 00dc 02       		.uleb128 0x2
 16134 00dd 04       		.byte	0x4
 16135 00de 07       		.byte	0x7
 16136 00df 0B000000 		.4byte	.LASF20
 16137 00e3 05       		.uleb128 0x5
 16138 00e4 04       		.byte	0x4
 16139 00e5 D5000000 		.4byte	0xd5
 16140 00e9 05       		.uleb128 0x5
 16141 00ea 04       		.byte	0x4
 16142 00eb EF000000 		.4byte	0xef
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 432


 16143 00ef 06       		.uleb128 0x6
 16144 00f0 D5000000 		.4byte	0xd5
 16145 00f4 02       		.uleb128 0x2
 16146 00f5 08       		.byte	0x8
 16147 00f6 04       		.byte	0x4
 16148 00f7 420A0000 		.4byte	.LASF21
 16149 00fb 07       		.uleb128 0x7
 16150 00fc 04       		.byte	0x4
 16151 00fd 04       		.byte	0x4
 16152 00fe 1B01     		.2byte	0x11b
 16153 0100 1D010000 		.4byte	0x11d
 16154 0104 08       		.uleb128 0x8
 16155 0105 50080000 		.4byte	.LASF22
 16156 0109 04       		.byte	0x4
 16157 010a 1D01     		.2byte	0x11d
 16158 010c 1D010000 		.4byte	0x11d
 16159 0110 08       		.uleb128 0x8
 16160 0111 4E0A0000 		.4byte	.LASF23
 16161 0115 04       		.byte	0x4
 16162 0116 1E01     		.2byte	0x11e
 16163 0118 BC000000 		.4byte	0xbc
 16164 011c 00       		.byte	0
 16165 011d 09       		.uleb128 0x9
 16166 011e CA000000 		.4byte	0xca
 16167 0122 2D010000 		.4byte	0x12d
 16168 0126 0A       		.uleb128 0xa
 16169 0127 DC000000 		.4byte	0xdc
 16170 012b 03       		.byte	0x3
 16171 012c 00       		.byte	0
 16172 012d 0B       		.uleb128 0xb
 16173 012e E60B0000 		.4byte	.LASF24
 16174 0132 04       		.byte	0x4
 16175 0133 1F01     		.2byte	0x11f
 16176 0135 FB000000 		.4byte	0xfb
 16177 0139 0C       		.uleb128 0xc
 16178 013a 28020000 		.4byte	.LASF33
 16179 013e 18       		.byte	0x18
 16180 013f 04       		.byte	0x4
 16181 0140 3401     		.2byte	0x134
 16182 0142 BF010000 		.4byte	0x1bf
 16183 0146 0D       		.uleb128 0xd
 16184 0147 E80C0000 		.4byte	.LASF25
 16185 014b 04       		.byte	0x4
 16186 014c 3601     		.2byte	0x136
 16187 014e 7A000000 		.4byte	0x7a
 16188 0152 02       		.byte	0x2
 16189 0153 23       		.byte	0x23
 16190 0154 00       		.uleb128 0
 16191 0155 0D       		.uleb128 0xd
 16192 0156 CB090000 		.4byte	.LASF26
 16193 015a 04       		.byte	0x4
 16194 015b 3A01     		.2byte	0x13a
 16195 015d 7A000000 		.4byte	0x7a
 16196 0161 02       		.byte	0x2
 16197 0162 23       		.byte	0x23
 16198 0163 01       		.uleb128 0x1
 16199 0164 0D       		.uleb128 0xd
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 433


 16200 0165 F50B0000 		.4byte	.LASF27
 16201 0169 04       		.byte	0x4
 16202 016a 3C01     		.2byte	0x13c
 16203 016c 2D010000 		.4byte	0x12d
 16204 0170 02       		.byte	0x2
 16205 0171 23       		.byte	0x23
 16206 0172 04       		.uleb128 0x4
 16207 0173 0D       		.uleb128 0xd
 16208 0174 93030000 		.4byte	.LASF28
 16209 0178 04       		.byte	0x4
 16210 0179 4001     		.2byte	0x140
 16211 017b A6000000 		.4byte	0xa6
 16212 017f 02       		.byte	0x2
 16213 0180 23       		.byte	0x23
 16214 0181 08       		.uleb128 0x8
 16215 0182 0D       		.uleb128 0xd
 16216 0183 680A0000 		.4byte	.LASF29
 16217 0187 04       		.byte	0x4
 16218 0188 4101     		.2byte	0x141
 16219 018a A6000000 		.4byte	0xa6
 16220 018e 02       		.byte	0x2
 16221 018f 23       		.byte	0x23
 16222 0190 0A       		.uleb128 0xa
 16223 0191 0D       		.uleb128 0xd
 16224 0192 61060000 		.4byte	.LASF30
 16225 0196 04       		.byte	0x4
 16226 0197 4201     		.2byte	0x142
 16227 0199 A6000000 		.4byte	0xa6
 16228 019d 02       		.byte	0x2
 16229 019e 23       		.byte	0x23
 16230 019f 0C       		.uleb128 0xc
 16231 01a0 0D       		.uleb128 0xd
 16232 01a1 520D0000 		.4byte	.LASF31
 16233 01a5 04       		.byte	0x4
 16234 01a6 4601     		.2byte	0x146
 16235 01a8 2D010000 		.4byte	0x12d
 16236 01ac 02       		.byte	0x2
 16237 01ad 23       		.byte	0x23
 16238 01ae 10       		.uleb128 0x10
 16239 01af 0D       		.uleb128 0xd
 16240 01b0 71040000 		.4byte	.LASF32
 16241 01b4 04       		.byte	0x4
 16242 01b5 4701     		.2byte	0x147
 16243 01b7 2D010000 		.4byte	0x12d
 16244 01bb 02       		.byte	0x2
 16245 01bc 23       		.byte	0x23
 16246 01bd 14       		.uleb128 0x14
 16247 01be 00       		.byte	0
 16248 01bf 0C       		.uleb128 0xc
 16249 01c0 020A0000 		.4byte	.LASF34
 16250 01c4 06       		.byte	0x6
 16251 01c5 04       		.byte	0x4
 16252 01c6 4C01     		.2byte	0x14c
 16253 01c8 09020000 		.4byte	0x209
 16254 01cc 0D       		.uleb128 0xd
 16255 01cd 0E090000 		.4byte	.LASF35
 16256 01d1 04       		.byte	0x4
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 434


 16257 01d2 4E01     		.2byte	0x14e
 16258 01d4 85000000 		.4byte	0x85
 16259 01d8 02       		.byte	0x2
 16260 01d9 23       		.byte	0x23
 16261 01da 00       		.uleb128 0
 16262 01db 0D       		.uleb128 0xd
 16263 01dc 43000000 		.4byte	.LASF36
 16264 01e0 04       		.byte	0x4
 16265 01e1 4F01     		.2byte	0x14f
 16266 01e3 7A000000 		.4byte	0x7a
 16267 01e7 02       		.byte	0x2
 16268 01e8 23       		.byte	0x23
 16269 01e9 02       		.uleb128 0x2
 16270 01ea 0D       		.uleb128 0xd
 16271 01eb 2B030000 		.4byte	.LASF37
 16272 01ef 04       		.byte	0x4
 16273 01f0 5101     		.2byte	0x151
 16274 01f2 7A000000 		.4byte	0x7a
 16275 01f6 02       		.byte	0x2
 16276 01f7 23       		.byte	0x23
 16277 01f8 03       		.uleb128 0x3
 16278 01f9 0D       		.uleb128 0xd
 16279 01fa 7A0D0000 		.4byte	.LASF38
 16280 01fe 04       		.byte	0x4
 16281 01ff 5201     		.2byte	0x152
 16282 0201 7A000000 		.4byte	0x7a
 16283 0205 02       		.byte	0x2
 16284 0206 23       		.byte	0x23
 16285 0207 04       		.uleb128 0x4
 16286 0208 00       		.byte	0
 16287 0209 0C       		.uleb128 0xc
 16288 020a DE020000 		.4byte	.LASF39
 16289 020e 10       		.byte	0x10
 16290 020f 04       		.byte	0x4
 16291 0210 7901     		.2byte	0x179
 16292 0212 53020000 		.4byte	0x253
 16293 0216 0E       		.uleb128 0xe
 16294 0217 41444300 		.ascii	"ADC\000"
 16295 021b 04       		.byte	0x4
 16296 021c 7B01     		.2byte	0x17b
 16297 021e A6000000 		.4byte	0xa6
 16298 0222 02       		.byte	0x2
 16299 0223 23       		.byte	0x23
 16300 0224 00       		.uleb128 0
 16301 0225 0D       		.uleb128 0xd
 16302 0226 6B030000 		.4byte	.LASF40
 16303 022a 04       		.byte	0x4
 16304 022b 7C01     		.2byte	0x17c
 16305 022d BC000000 		.4byte	0xbc
 16306 0231 02       		.byte	0x2
 16307 0232 23       		.byte	0x23
 16308 0233 04       		.uleb128 0x4
 16309 0234 0D       		.uleb128 0xd
 16310 0235 1E010000 		.4byte	.LASF41
 16311 0239 04       		.byte	0x4
 16312 023a 7D01     		.2byte	0x17d
 16313 023c BC000000 		.4byte	0xbc
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 435


 16314 0240 02       		.byte	0x2
 16315 0241 23       		.byte	0x23
 16316 0242 08       		.uleb128 0x8
 16317 0243 0D       		.uleb128 0xd
 16318 0244 8B090000 		.4byte	.LASF42
 16319 0248 04       		.byte	0x4
 16320 0249 7E01     		.2byte	0x17e
 16321 024b BC000000 		.4byte	0xbc
 16322 024f 02       		.byte	0x2
 16323 0250 23       		.byte	0x23
 16324 0251 0C       		.uleb128 0xc
 16325 0252 00       		.byte	0
 16326 0253 0C       		.uleb128 0xc
 16327 0254 A50C0000 		.4byte	.LASF43
 16328 0258 10       		.byte	0x10
 16329 0259 04       		.byte	0x4
 16330 025a 8101     		.2byte	0x181
 16331 025c 9D020000 		.4byte	0x29d
 16332 0260 0E       		.uleb128 0xe
 16333 0261 41444300 		.ascii	"ADC\000"
 16334 0265 04       		.byte	0x4
 16335 0266 8301     		.2byte	0x183
 16336 0268 A6000000 		.4byte	0xa6
 16337 026c 02       		.byte	0x2
 16338 026d 23       		.byte	0x23
 16339 026e 00       		.uleb128 0
 16340 026f 0D       		.uleb128 0xd
 16341 0270 6B030000 		.4byte	.LASF40
 16342 0274 04       		.byte	0x4
 16343 0275 8401     		.2byte	0x184
 16344 0277 BC000000 		.4byte	0xbc
 16345 027b 02       		.byte	0x2
 16346 027c 23       		.byte	0x23
 16347 027d 04       		.uleb128 0x4
 16348 027e 0D       		.uleb128 0xd
 16349 027f 1E010000 		.4byte	.LASF41
 16350 0283 04       		.byte	0x4
 16351 0284 8501     		.2byte	0x185
 16352 0286 BC000000 		.4byte	0xbc
 16353 028a 02       		.byte	0x2
 16354 028b 23       		.byte	0x23
 16355 028c 08       		.uleb128 0x8
 16356 028d 0D       		.uleb128 0xd
 16357 028e 8B090000 		.4byte	.LASF42
 16358 0292 04       		.byte	0x4
 16359 0293 8601     		.2byte	0x186
 16360 0295 BC000000 		.4byte	0xbc
 16361 0299 02       		.byte	0x2
 16362 029a 23       		.byte	0x23
 16363 029b 0C       		.uleb128 0xc
 16364 029c 00       		.byte	0
 16365 029d 0C       		.uleb128 0xc
 16366 029e C4060000 		.4byte	.LASF44
 16367 02a2 10       		.byte	0x10
 16368 02a3 04       		.byte	0x4
 16369 02a4 8901     		.2byte	0x189
 16370 02a6 E7020000 		.4byte	0x2e7
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 436


 16371 02aa 0E       		.uleb128 0xe
 16372 02ab 41444300 		.ascii	"ADC\000"
 16373 02af 04       		.byte	0x4
 16374 02b0 8B01     		.2byte	0x18b
 16375 02b2 A6000000 		.4byte	0xa6
 16376 02b6 02       		.byte	0x2
 16377 02b7 23       		.byte	0x23
 16378 02b8 00       		.uleb128 0
 16379 02b9 0D       		.uleb128 0xd
 16380 02ba 6B030000 		.4byte	.LASF40
 16381 02be 04       		.byte	0x4
 16382 02bf 8C01     		.2byte	0x18c
 16383 02c1 BC000000 		.4byte	0xbc
 16384 02c5 02       		.byte	0x2
 16385 02c6 23       		.byte	0x23
 16386 02c7 04       		.uleb128 0x4
 16387 02c8 0D       		.uleb128 0xd
 16388 02c9 1E010000 		.4byte	.LASF41
 16389 02cd 04       		.byte	0x4
 16390 02ce 8D01     		.2byte	0x18d
 16391 02d0 BC000000 		.4byte	0xbc
 16392 02d4 02       		.byte	0x2
 16393 02d5 23       		.byte	0x23
 16394 02d6 08       		.uleb128 0x8
 16395 02d7 0D       		.uleb128 0xd
 16396 02d8 8B090000 		.4byte	.LASF42
 16397 02dc 04       		.byte	0x4
 16398 02dd 8E01     		.2byte	0x18e
 16399 02df BC000000 		.4byte	0xbc
 16400 02e3 02       		.byte	0x2
 16401 02e4 23       		.byte	0x23
 16402 02e5 0C       		.uleb128 0xc
 16403 02e6 00       		.byte	0
 16404 02e7 0C       		.uleb128 0xc
 16405 02e8 190B0000 		.4byte	.LASF45
 16406 02ec 3C       		.byte	0x3c
 16407 02ed 04       		.byte	0x4
 16408 02ee 7601     		.2byte	0x176
 16409 02f0 4F030000 		.4byte	0x34f
 16410 02f4 0D       		.uleb128 0xd
 16411 02f5 C90C0000 		.4byte	.LASF46
 16412 02f9 04       		.byte	0x4
 16413 02fa 7F01     		.2byte	0x17f
 16414 02fc 09020000 		.4byte	0x209
 16415 0300 02       		.byte	0x2
 16416 0301 23       		.byte	0x23
 16417 0302 00       		.uleb128 0
 16418 0303 0D       		.uleb128 0xd
 16419 0304 CB060000 		.4byte	.LASF47
 16420 0308 04       		.byte	0x4
 16421 0309 8701     		.2byte	0x187
 16422 030b 53020000 		.4byte	0x253
 16423 030f 02       		.byte	0x2
 16424 0310 23       		.byte	0x23
 16425 0311 10       		.uleb128 0x10
 16426 0312 0D       		.uleb128 0xd
 16427 0313 BB000000 		.4byte	.LASF48
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 437


 16428 0317 04       		.byte	0x4
 16429 0318 9001     		.2byte	0x190
 16430 031a 9D020000 		.4byte	0x29d
 16431 031e 02       		.byte	0x2
 16432 031f 23       		.byte	0x23
 16433 0320 20       		.uleb128 0x20
 16434 0321 0D       		.uleb128 0xd
 16435 0322 03030000 		.4byte	.LASF49
 16436 0326 04       		.byte	0x4
 16437 0327 9201     		.2byte	0x192
 16438 0329 BC000000 		.4byte	0xbc
 16439 032d 02       		.byte	0x2
 16440 032e 23       		.byte	0x23
 16441 032f 30       		.uleb128 0x30
 16442 0330 0D       		.uleb128 0xd
 16443 0331 8E040000 		.4byte	.LASF50
 16444 0335 04       		.byte	0x4
 16445 0336 9301     		.2byte	0x193
 16446 0338 BC000000 		.4byte	0xbc
 16447 033c 02       		.byte	0x2
 16448 033d 23       		.byte	0x23
 16449 033e 34       		.uleb128 0x34
 16450 033f 0D       		.uleb128 0xd
 16451 0340 D5010000 		.4byte	.LASF51
 16452 0344 04       		.byte	0x4
 16453 0345 9401     		.2byte	0x194
 16454 0347 BC000000 		.4byte	0xbc
 16455 034b 02       		.byte	0x2
 16456 034c 23       		.byte	0x23
 16457 034d 38       		.uleb128 0x38
 16458 034e 00       		.byte	0
 16459 034f 0C       		.uleb128 0xc
 16460 0350 1D030000 		.4byte	.LASF52
 16461 0354 04       		.byte	0x4
 16462 0355 04       		.byte	0x4
 16463 0356 A001     		.2byte	0x1a0
 16464 0358 6C030000 		.4byte	0x36c
 16465 035c 0D       		.uleb128 0xd
 16466 035d 110D0000 		.4byte	.LASF53
 16467 0361 04       		.byte	0x4
 16468 0362 A201     		.2byte	0x1a2
 16469 0364 B1000000 		.4byte	0xb1
 16470 0368 02       		.byte	0x2
 16471 0369 23       		.byte	0x23
 16472 036a 00       		.uleb128 0
 16473 036b 00       		.byte	0
 16474 036c 0C       		.uleb128 0xc
 16475 036d 6D020000 		.4byte	.LASF54
 16476 0371 14       		.byte	0x14
 16477 0372 04       		.byte	0x4
 16478 0373 9901     		.2byte	0x199
 16479 0375 C5030000 		.4byte	0x3c5
 16480 0379 0D       		.uleb128 0xd
 16481 037a 05090000 		.4byte	.LASF55
 16482 037e 04       		.byte	0x4
 16483 037f 9B01     		.2byte	0x19b
 16484 0381 B1000000 		.4byte	0xb1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 438


 16485 0385 02       		.byte	0x2
 16486 0386 23       		.byte	0x23
 16487 0387 00       		.uleb128 0
 16488 0388 0D       		.uleb128 0xd
 16489 0389 43090000 		.4byte	.LASF56
 16490 038d 04       		.byte	0x4
 16491 038e 9C01     		.2byte	0x19c
 16492 0390 BC000000 		.4byte	0xbc
 16493 0394 02       		.byte	0x2
 16494 0395 23       		.byte	0x23
 16495 0396 04       		.uleb128 0x4
 16496 0397 0D       		.uleb128 0xd
 16497 0398 91070000 		.4byte	.LASF57
 16498 039c 04       		.byte	0x4
 16499 039d 9D01     		.2byte	0x19d
 16500 039f BC000000 		.4byte	0xbc
 16501 03a3 02       		.byte	0x2
 16502 03a4 23       		.byte	0x23
 16503 03a5 08       		.uleb128 0x8
 16504 03a6 0D       		.uleb128 0xd
 16505 03a7 FC040000 		.4byte	.LASF58
 16506 03ab 04       		.byte	0x4
 16507 03ac 9E01     		.2byte	0x19e
 16508 03ae BC000000 		.4byte	0xbc
 16509 03b2 02       		.byte	0x2
 16510 03b3 23       		.byte	0x23
 16511 03b4 0C       		.uleb128 0xc
 16512 03b5 0D       		.uleb128 0xd
 16513 03b6 3A0F0000 		.4byte	.LASF59
 16514 03ba 04       		.byte	0x4
 16515 03bb A601     		.2byte	0x1a6
 16516 03bd 4F030000 		.4byte	0x34f
 16517 03c1 02       		.byte	0x2
 16518 03c2 23       		.byte	0x23
 16519 03c3 10       		.uleb128 0x10
 16520 03c4 00       		.byte	0
 16521 03c5 0C       		.uleb128 0xc
 16522 03c6 02040000 		.4byte	.LASF60
 16523 03ca 10       		.byte	0x10
 16524 03cb 04       		.byte	0x4
 16525 03cc BF01     		.2byte	0x1bf
 16526 03ce 2D040000 		.4byte	0x42d
 16527 03d2 0D       		.uleb128 0xd
 16528 03d3 97070000 		.4byte	.LASF61
 16529 03d7 04       		.byte	0x4
 16530 03d8 C101     		.2byte	0x1c1
 16531 03da 7A000000 		.4byte	0x7a
 16532 03de 02       		.byte	0x2
 16533 03df 23       		.byte	0x23
 16534 03e0 00       		.uleb128 0
 16535 03e1 0D       		.uleb128 0xd
 16536 03e2 B0030000 		.4byte	.LASF62
 16537 03e6 04       		.byte	0x4
 16538 03e7 C201     		.2byte	0x1c2
 16539 03e9 A6000000 		.4byte	0xa6
 16540 03ed 02       		.byte	0x2
 16541 03ee 23       		.byte	0x23
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 439


 16542 03ef 02       		.uleb128 0x2
 16543 03f0 0D       		.uleb128 0xd
 16544 03f1 29060000 		.4byte	.LASF63
 16545 03f5 04       		.byte	0x4
 16546 03f6 C301     		.2byte	0x1c3
 16547 03f8 A6000000 		.4byte	0xa6
 16548 03fc 02       		.byte	0x2
 16549 03fd 23       		.byte	0x23
 16550 03fe 04       		.uleb128 0x4
 16551 03ff 0D       		.uleb128 0xd
 16552 0400 530A0000 		.4byte	.LASF64
 16553 0404 04       		.byte	0x4
 16554 0405 C401     		.2byte	0x1c4
 16555 0407 A6000000 		.4byte	0xa6
 16556 040b 02       		.byte	0x2
 16557 040c 23       		.byte	0x23
 16558 040d 06       		.uleb128 0x6
 16559 040e 0D       		.uleb128 0xd
 16560 040f 930A0000 		.4byte	.LASF65
 16561 0413 04       		.byte	0x4
 16562 0414 C501     		.2byte	0x1c5
 16563 0416 A6000000 		.4byte	0xa6
 16564 041a 02       		.byte	0x2
 16565 041b 23       		.byte	0x23
 16566 041c 08       		.uleb128 0x8
 16567 041d 0D       		.uleb128 0xd
 16568 041e 75020000 		.4byte	.LASF66
 16569 0422 04       		.byte	0x4
 16570 0423 C601     		.2byte	0x1c6
 16571 0425 2D010000 		.4byte	0x12d
 16572 0429 02       		.byte	0x2
 16573 042a 23       		.byte	0x23
 16574 042b 0C       		.uleb128 0xc
 16575 042c 00       		.byte	0
 16576 042d 0C       		.uleb128 0xc
 16577 042e 360C0000 		.4byte	.LASF67
 16578 0432 3C       		.byte	0x3c
 16579 0433 04       		.byte	0x4
 16580 0434 AB01     		.2byte	0x1ab
 16581 0436 EF040000 		.4byte	0x4ef
 16582 043a 0E       		.uleb128 0xe
 16583 043b 72617700 		.ascii	"raw\000"
 16584 043f 04       		.byte	0x4
 16585 0440 AE01     		.2byte	0x1ae
 16586 0442 A6000000 		.4byte	0xa6
 16587 0446 02       		.byte	0x2
 16588 0447 23       		.byte	0x23
 16589 0448 00       		.uleb128 0
 16590 0449 0D       		.uleb128 0xd
 16591 044a 05090000 		.4byte	.LASF55
 16592 044e 04       		.byte	0x4
 16593 044f B101     		.2byte	0x1b1
 16594 0451 BC000000 		.4byte	0xbc
 16595 0455 02       		.byte	0x2
 16596 0456 23       		.byte	0x23
 16597 0457 04       		.uleb128 0x4
 16598 0458 0D       		.uleb128 0xd
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 440


 16599 0459 43090000 		.4byte	.LASF56
 16600 045d 04       		.byte	0x4
 16601 045e B201     		.2byte	0x1b2
 16602 0460 BC000000 		.4byte	0xbc
 16603 0464 02       		.byte	0x2
 16604 0465 23       		.byte	0x23
 16605 0466 08       		.uleb128 0x8
 16606 0467 0D       		.uleb128 0xd
 16607 0468 91070000 		.4byte	.LASF57
 16608 046c 04       		.byte	0x4
 16609 046d B301     		.2byte	0x1b3
 16610 046f BC000000 		.4byte	0xbc
 16611 0473 02       		.byte	0x2
 16612 0474 23       		.byte	0x23
 16613 0475 0C       		.uleb128 0xc
 16614 0476 0D       		.uleb128 0xd
 16615 0477 E1060000 		.4byte	.LASF68
 16616 047b 04       		.byte	0x4
 16617 047c B401     		.2byte	0x1b4
 16618 047e BC000000 		.4byte	0xbc
 16619 0482 02       		.byte	0x2
 16620 0483 23       		.byte	0x23
 16621 0484 10       		.uleb128 0x10
 16622 0485 0D       		.uleb128 0xd
 16623 0486 FC040000 		.4byte	.LASF58
 16624 048a 04       		.byte	0x4
 16625 048b B501     		.2byte	0x1b5
 16626 048d BC000000 		.4byte	0xbc
 16627 0491 02       		.byte	0x2
 16628 0492 23       		.byte	0x23
 16629 0493 14       		.uleb128 0x14
 16630 0494 0D       		.uleb128 0xd
 16631 0495 DF0E0000 		.4byte	.LASF69
 16632 0499 04       		.byte	0x4
 16633 049a B801     		.2byte	0x1b8
 16634 049c B1000000 		.4byte	0xb1
 16635 04a0 02       		.byte	0x2
 16636 04a1 23       		.byte	0x23
 16637 04a2 18       		.uleb128 0x18
 16638 04a3 0D       		.uleb128 0xd
 16639 04a4 790A0000 		.4byte	.LASF70
 16640 04a8 04       		.byte	0x4
 16641 04a9 B901     		.2byte	0x1b9
 16642 04ab B1000000 		.4byte	0xb1
 16643 04af 02       		.byte	0x2
 16644 04b0 23       		.byte	0x23
 16645 04b1 1C       		.uleb128 0x1c
 16646 04b2 0D       		.uleb128 0xd
 16647 04b3 9E010000 		.4byte	.LASF71
 16648 04b7 04       		.byte	0x4
 16649 04b8 BA01     		.2byte	0x1ba
 16650 04ba BC000000 		.4byte	0xbc
 16651 04be 02       		.byte	0x2
 16652 04bf 23       		.byte	0x23
 16653 04c0 20       		.uleb128 0x20
 16654 04c1 0D       		.uleb128 0xd
 16655 04c2 2A0E0000 		.4byte	.LASF72
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 441


 16656 04c6 04       		.byte	0x4
 16657 04c7 BB01     		.2byte	0x1bb
 16658 04c9 BC000000 		.4byte	0xbc
 16659 04cd 02       		.byte	0x2
 16660 04ce 23       		.byte	0x23
 16661 04cf 24       		.uleb128 0x24
 16662 04d0 0D       		.uleb128 0xd
 16663 04d1 92050000 		.4byte	.LASF73
 16664 04d5 04       		.byte	0x4
 16665 04d6 BC01     		.2byte	0x1bc
 16666 04d8 BC000000 		.4byte	0xbc
 16667 04dc 02       		.byte	0x2
 16668 04dd 23       		.byte	0x23
 16669 04de 28       		.uleb128 0x28
 16670 04df 0D       		.uleb128 0xd
 16671 04e0 3A0F0000 		.4byte	.LASF59
 16672 04e4 04       		.byte	0x4
 16673 04e5 C701     		.2byte	0x1c7
 16674 04e7 C5030000 		.4byte	0x3c5
 16675 04eb 02       		.byte	0x2
 16676 04ec 23       		.byte	0x23
 16677 04ed 2C       		.uleb128 0x2c
 16678 04ee 00       		.byte	0
 16679 04ef 0C       		.uleb128 0xc
 16680 04f0 9C0D0000 		.4byte	.LASF74
 16681 04f4 08       		.byte	0x8
 16682 04f5 04       		.byte	0x4
 16683 04f6 DB01     		.2byte	0x1db
 16684 04f8 48050000 		.4byte	0x548
 16685 04fc 0D       		.uleb128 0xd
 16686 04fd 93000000 		.4byte	.LASF75
 16687 0501 04       		.byte	0x4
 16688 0502 DD01     		.2byte	0x1dd
 16689 0504 7A000000 		.4byte	0x7a
 16690 0508 02       		.byte	0x2
 16691 0509 23       		.byte	0x23
 16692 050a 00       		.uleb128 0
 16693 050b 0D       		.uleb128 0xd
 16694 050c 40020000 		.4byte	.LASF76
 16695 0510 04       		.byte	0x4
 16696 0511 DE01     		.2byte	0x1de
 16697 0513 7A000000 		.4byte	0x7a
 16698 0517 02       		.byte	0x2
 16699 0518 23       		.byte	0x23
 16700 0519 01       		.uleb128 0x1
 16701 051a 0D       		.uleb128 0xd
 16702 051b C90A0000 		.4byte	.LASF77
 16703 051f 04       		.byte	0x4
 16704 0520 DF01     		.2byte	0x1df
 16705 0522 7A000000 		.4byte	0x7a
 16706 0526 02       		.byte	0x2
 16707 0527 23       		.byte	0x23
 16708 0528 02       		.uleb128 0x2
 16709 0529 0D       		.uleb128 0xd
 16710 052a B60B0000 		.4byte	.LASF78
 16711 052e 04       		.byte	0x4
 16712 052f E101     		.2byte	0x1e1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 442


 16713 0531 7A000000 		.4byte	0x7a
 16714 0535 02       		.byte	0x2
 16715 0536 23       		.byte	0x23
 16716 0537 03       		.uleb128 0x3
 16717 0538 0D       		.uleb128 0xd
 16718 0539 0B030000 		.4byte	.LASF79
 16719 053d 04       		.byte	0x4
 16720 053e E301     		.2byte	0x1e3
 16721 0540 2D010000 		.4byte	0x12d
 16722 0544 02       		.byte	0x2
 16723 0545 23       		.byte	0x23
 16724 0546 04       		.uleb128 0x4
 16725 0547 00       		.byte	0
 16726 0548 0C       		.uleb128 0xc
 16727 0549 A5070000 		.4byte	.LASF80
 16728 054d 2C       		.byte	0x2c
 16729 054e 04       		.byte	0x4
 16730 054f CB01     		.2byte	0x1cb
 16731 0551 EC050000 		.4byte	0x5ec
 16732 0555 0D       		.uleb128 0xd
 16733 0556 C2050000 		.4byte	.LASF81
 16734 055a 04       		.byte	0x4
 16735 055b CE01     		.2byte	0x1ce
 16736 055d BC000000 		.4byte	0xbc
 16737 0561 02       		.byte	0x2
 16738 0562 23       		.byte	0x23
 16739 0563 00       		.uleb128 0
 16740 0564 0D       		.uleb128 0xd
 16741 0565 880B0000 		.4byte	.LASF82
 16742 0569 04       		.byte	0x4
 16743 056a CF01     		.2byte	0x1cf
 16744 056c BC000000 		.4byte	0xbc
 16745 0570 02       		.byte	0x2
 16746 0571 23       		.byte	0x23
 16747 0572 04       		.uleb128 0x4
 16748 0573 0D       		.uleb128 0xd
 16749 0574 A80A0000 		.4byte	.LASF83
 16750 0578 04       		.byte	0x4
 16751 0579 D001     		.2byte	0x1d0
 16752 057b BC000000 		.4byte	0xbc
 16753 057f 02       		.byte	0x2
 16754 0580 23       		.byte	0x23
 16755 0581 08       		.uleb128 0x8
 16756 0582 0D       		.uleb128 0xd
 16757 0583 F6020000 		.4byte	.LASF84
 16758 0587 04       		.byte	0x4
 16759 0588 D101     		.2byte	0x1d1
 16760 058a BC000000 		.4byte	0xbc
 16761 058e 02       		.byte	0x2
 16762 058f 23       		.byte	0x23
 16763 0590 0C       		.uleb128 0xc
 16764 0591 0D       		.uleb128 0xd
 16765 0592 33080000 		.4byte	.LASF85
 16766 0596 04       		.byte	0x4
 16767 0597 D201     		.2byte	0x1d2
 16768 0599 BC000000 		.4byte	0xbc
 16769 059d 02       		.byte	0x2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 443


 16770 059e 23       		.byte	0x23
 16771 059f 10       		.uleb128 0x10
 16772 05a0 0D       		.uleb128 0xd
 16773 05a1 78060000 		.4byte	.LASF86
 16774 05a5 04       		.byte	0x4
 16775 05a6 D301     		.2byte	0x1d3
 16776 05a8 BC000000 		.4byte	0xbc
 16777 05ac 02       		.byte	0x2
 16778 05ad 23       		.byte	0x23
 16779 05ae 14       		.uleb128 0x14
 16780 05af 0D       		.uleb128 0xd
 16781 05b0 2B010000 		.4byte	.LASF87
 16782 05b4 04       		.byte	0x4
 16783 05b5 D601     		.2byte	0x1d6
 16784 05b7 BC000000 		.4byte	0xbc
 16785 05bb 02       		.byte	0x2
 16786 05bc 23       		.byte	0x23
 16787 05bd 18       		.uleb128 0x18
 16788 05be 0D       		.uleb128 0xd
 16789 05bf 930B0000 		.4byte	.LASF88
 16790 05c3 04       		.byte	0x4
 16791 05c4 D701     		.2byte	0x1d7
 16792 05c6 BC000000 		.4byte	0xbc
 16793 05ca 02       		.byte	0x2
 16794 05cb 23       		.byte	0x23
 16795 05cc 1C       		.uleb128 0x1c
 16796 05cd 0D       		.uleb128 0xd
 16797 05ce C40E0000 		.4byte	.LASF89
 16798 05d2 04       		.byte	0x4
 16799 05d3 D801     		.2byte	0x1d8
 16800 05d5 BC000000 		.4byte	0xbc
 16801 05d9 02       		.byte	0x2
 16802 05da 23       		.byte	0x23
 16803 05db 20       		.uleb128 0x20
 16804 05dc 0D       		.uleb128 0xd
 16805 05dd 3A0F0000 		.4byte	.LASF59
 16806 05e1 04       		.byte	0x4
 16807 05e2 E601     		.2byte	0x1e6
 16808 05e4 EF040000 		.4byte	0x4ef
 16809 05e8 02       		.byte	0x2
 16810 05e9 23       		.byte	0x23
 16811 05ea 24       		.uleb128 0x24
 16812 05eb 00       		.byte	0
 16813 05ec 0C       		.uleb128 0xc
 16814 05ed 8B000000 		.4byte	.LASF90
 16815 05f1 0C       		.byte	0xc
 16816 05f2 04       		.byte	0x4
 16817 05f3 EE01     		.2byte	0x1ee
 16818 05f5 36060000 		.4byte	0x636
 16819 05f9 0D       		.uleb128 0xd
 16820 05fa EB060000 		.4byte	.LASF91
 16821 05fe 04       		.byte	0x4
 16822 05ff F001     		.2byte	0x1f0
 16823 0601 7A000000 		.4byte	0x7a
 16824 0605 02       		.byte	0x2
 16825 0606 23       		.byte	0x23
 16826 0607 00       		.uleb128 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 444


 16827 0608 0D       		.uleb128 0xd
 16828 0609 7B0E0000 		.4byte	.LASF92
 16829 060d 04       		.byte	0x4
 16830 060e F401     		.2byte	0x1f4
 16831 0610 7A000000 		.4byte	0x7a
 16832 0614 02       		.byte	0x2
 16833 0615 23       		.byte	0x23
 16834 0616 01       		.uleb128 0x1
 16835 0617 0D       		.uleb128 0xd
 16836 0618 50020000 		.4byte	.LASF93
 16837 061c 04       		.byte	0x4
 16838 061d FA01     		.2byte	0x1fa
 16839 061f BC000000 		.4byte	0xbc
 16840 0623 02       		.byte	0x2
 16841 0624 23       		.byte	0x23
 16842 0625 04       		.uleb128 0x4
 16843 0626 0D       		.uleb128 0xd
 16844 0627 48040000 		.4byte	.LASF94
 16845 062b 04       		.byte	0x4
 16846 062c FB01     		.2byte	0x1fb
 16847 062e BC000000 		.4byte	0xbc
 16848 0632 02       		.byte	0x2
 16849 0633 23       		.byte	0x23
 16850 0634 08       		.uleb128 0x8
 16851 0635 00       		.byte	0
 16852 0636 0C       		.uleb128 0xc
 16853 0637 5F000000 		.4byte	.LASF95
 16854 063b 28       		.byte	0x28
 16855 063c 04       		.byte	0x4
 16856 063d 0002     		.2byte	0x200
 16857 063f E9060000 		.4byte	0x6e9
 16858 0643 0D       		.uleb128 0xd
 16859 0644 110D0000 		.4byte	.LASF53
 16860 0648 04       		.byte	0x4
 16861 0649 0202     		.2byte	0x202
 16862 064b 2D010000 		.4byte	0x12d
 16863 064f 02       		.byte	0x2
 16864 0650 23       		.byte	0x23
 16865 0651 00       		.uleb128 0
 16866 0652 0D       		.uleb128 0xd
 16867 0653 14000000 		.4byte	.LASF96
 16868 0657 04       		.byte	0x4
 16869 0658 0802     		.2byte	0x208
 16870 065a 7A000000 		.4byte	0x7a
 16871 065e 02       		.byte	0x2
 16872 065f 23       		.byte	0x23
 16873 0660 04       		.uleb128 0x4
 16874 0661 0E       		.uleb128 0xe
 16875 0662 4B706600 		.ascii	"Kpf\000"
 16876 0666 04       		.byte	0x4
 16877 0667 0C02     		.2byte	0x20c
 16878 0669 2D010000 		.4byte	0x12d
 16879 066d 02       		.byte	0x2
 16880 066e 23       		.byte	0x23
 16881 066f 08       		.uleb128 0x8
 16882 0670 0E       		.uleb128 0xe
 16883 0671 4B646600 		.ascii	"Kdf\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 445


 16884 0675 04       		.byte	0x4
 16885 0676 0E02     		.2byte	0x20e
 16886 0678 2D010000 		.4byte	0x12d
 16887 067c 02       		.byte	0x2
 16888 067d 23       		.byte	0x23
 16889 067e 0C       		.uleb128 0xc
 16890 067f 0E       		.uleb128 0xe
 16891 0680 4B696600 		.ascii	"Kif\000"
 16892 0684 04       		.byte	0x4
 16893 0685 1002     		.2byte	0x210
 16894 0687 2D010000 		.4byte	0x12d
 16895 068b 02       		.byte	0x2
 16896 068c 23       		.byte	0x23
 16897 068d 10       		.uleb128 0x10
 16898 068e 0D       		.uleb128 0xd
 16899 068f BF090000 		.4byte	.LASF97
 16900 0693 04       		.byte	0x4
 16901 0694 1202     		.2byte	0x212
 16902 0696 2D010000 		.4byte	0x12d
 16903 069a 02       		.byte	0x2
 16904 069b 23       		.byte	0x23
 16905 069c 14       		.uleb128 0x14
 16906 069d 0D       		.uleb128 0xd
 16907 069e B1000000 		.4byte	.LASF98
 16908 06a2 04       		.byte	0x4
 16909 06a3 1602     		.2byte	0x216
 16910 06a5 2D010000 		.4byte	0x12d
 16911 06a9 02       		.byte	0x2
 16912 06aa 23       		.byte	0x23
 16913 06ab 18       		.uleb128 0x18
 16914 06ac 0D       		.uleb128 0xd
 16915 06ad B3090000 		.4byte	.LASF99
 16916 06b1 04       		.byte	0x4
 16917 06b2 1802     		.2byte	0x218
 16918 06b4 2D010000 		.4byte	0x12d
 16919 06b8 02       		.byte	0x2
 16920 06b9 23       		.byte	0x23
 16921 06ba 1C       		.uleb128 0x1c
 16922 06bb 0D       		.uleb128 0xd
 16923 06bc E00B0000 		.4byte	.LASF100
 16924 06c0 04       		.byte	0x4
 16925 06c1 1A02     		.2byte	0x21a
 16926 06c3 7A000000 		.4byte	0x7a
 16927 06c7 02       		.byte	0x2
 16928 06c8 23       		.byte	0x23
 16929 06c9 20       		.uleb128 0x20
 16930 06ca 0D       		.uleb128 0xd
 16931 06cb A00B0000 		.4byte	.LASF101
 16932 06cf 04       		.byte	0x4
 16933 06d0 1E02     		.2byte	0x21e
 16934 06d2 7A000000 		.4byte	0x7a
 16935 06d6 02       		.byte	0x2
 16936 06d7 23       		.byte	0x23
 16937 06d8 21       		.uleb128 0x21
 16938 06d9 0D       		.uleb128 0xd
 16939 06da 04010000 		.4byte	.LASF102
 16940 06de 04       		.byte	0x4
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 446


 16941 06df 2202     		.2byte	0x222
 16942 06e1 2D010000 		.4byte	0x12d
 16943 06e5 02       		.byte	0x2
 16944 06e6 23       		.byte	0x23
 16945 06e7 24       		.uleb128 0x24
 16946 06e8 00       		.byte	0
 16947 06e9 0C       		.uleb128 0xc
 16948 06ea 8B0A0000 		.4byte	.LASF103
 16949 06ee 50       		.byte	0x50
 16950 06ef 04       		.byte	0x4
 16951 06f0 2802     		.2byte	0x228
 16952 06f2 F6070000 		.4byte	0x7f6
 16953 06f6 0D       		.uleb128 0xd
 16954 06f7 6F010000 		.4byte	.LASF104
 16955 06fb 04       		.byte	0x4
 16956 06fc 2A02     		.2byte	0x22a
 16957 06fe B1000000 		.4byte	0xb1
 16958 0702 02       		.byte	0x2
 16959 0703 23       		.byte	0x23
 16960 0704 00       		.uleb128 0
 16961 0705 0D       		.uleb128 0xd
 16962 0706 2B090000 		.4byte	.LASF105
 16963 070a 04       		.byte	0x4
 16964 070b 2B02     		.2byte	0x22b
 16965 070d B1000000 		.4byte	0xb1
 16966 0711 02       		.byte	0x2
 16967 0712 23       		.byte	0x23
 16968 0713 04       		.uleb128 0x4
 16969 0714 0D       		.uleb128 0xd
 16970 0715 B2040000 		.4byte	.LASF106
 16971 0719 04       		.byte	0x4
 16972 071a 3002     		.2byte	0x230
 16973 071c B1000000 		.4byte	0xb1
 16974 0720 02       		.byte	0x2
 16975 0721 23       		.byte	0x23
 16976 0722 08       		.uleb128 0x8
 16977 0723 0D       		.uleb128 0xd
 16978 0724 53030000 		.4byte	.LASF107
 16979 0728 04       		.byte	0x4
 16980 0729 3102     		.2byte	0x231
 16981 072b B1000000 		.4byte	0xb1
 16982 072f 02       		.byte	0x2
 16983 0730 23       		.byte	0x23
 16984 0731 0C       		.uleb128 0xc
 16985 0732 0D       		.uleb128 0xd
 16986 0733 A4050000 		.4byte	.LASF108
 16987 0737 04       		.byte	0x4
 16988 0738 3602     		.2byte	0x236
 16989 073a 6C030000 		.4byte	0x36c
 16990 073e 02       		.byte	0x2
 16991 073f 23       		.byte	0x23
 16992 0740 10       		.uleb128 0x10
 16993 0741 0D       		.uleb128 0xd
 16994 0742 C8020000 		.4byte	.LASF109
 16995 0746 04       		.byte	0x4
 16996 0747 3802     		.2byte	0x238
 16997 0749 BC000000 		.4byte	0xbc
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 447


 16998 074d 02       		.byte	0x2
 16999 074e 23       		.byte	0x23
 17000 074f 24       		.uleb128 0x24
 17001 0750 0D       		.uleb128 0xd
 17002 0751 9B0C0000 		.4byte	.LASF110
 17003 0755 04       		.byte	0x4
 17004 0756 3902     		.2byte	0x239
 17005 0758 BC000000 		.4byte	0xbc
 17006 075c 02       		.byte	0x2
 17007 075d 23       		.byte	0x23
 17008 075e 28       		.uleb128 0x28
 17009 075f 0D       		.uleb128 0xd
 17010 0760 A3090000 		.4byte	.LASF111
 17011 0764 04       		.byte	0x4
 17012 0765 3A02     		.2byte	0x23a
 17013 0767 BC000000 		.4byte	0xbc
 17014 076b 02       		.byte	0x2
 17015 076c 23       		.byte	0x23
 17016 076d 2C       		.uleb128 0x2c
 17017 076e 0D       		.uleb128 0xd
 17018 076f 150E0000 		.4byte	.LASF112
 17019 0773 04       		.byte	0x4
 17020 0774 3B02     		.2byte	0x23b
 17021 0776 BC000000 		.4byte	0xbc
 17022 077a 02       		.byte	0x2
 17023 077b 23       		.byte	0x23
 17024 077c 30       		.uleb128 0x30
 17025 077d 0D       		.uleb128 0xd
 17026 077e 26000000 		.4byte	.LASF113
 17027 0782 04       		.byte	0x4
 17028 0783 3C02     		.2byte	0x23c
 17029 0785 BC000000 		.4byte	0xbc
 17030 0789 02       		.byte	0x2
 17031 078a 23       		.byte	0x23
 17032 078b 34       		.uleb128 0x34
 17033 078c 0D       		.uleb128 0xd
 17034 078d 3A050000 		.4byte	.LASF114
 17035 0791 04       		.byte	0x4
 17036 0792 3D02     		.2byte	0x23d
 17037 0794 BC000000 		.4byte	0xbc
 17038 0798 02       		.byte	0x2
 17039 0799 23       		.byte	0x23
 17040 079a 38       		.uleb128 0x38
 17041 079b 0D       		.uleb128 0xd
 17042 079c DE050000 		.4byte	.LASF115
 17043 07a0 04       		.byte	0x4
 17044 07a1 3F02     		.2byte	0x23f
 17045 07a3 BC000000 		.4byte	0xbc
 17046 07a7 02       		.byte	0x2
 17047 07a8 23       		.byte	0x23
 17048 07a9 3C       		.uleb128 0x3c
 17049 07aa 0D       		.uleb128 0xd
 17050 07ab 400F0000 		.4byte	.LASF116
 17051 07af 04       		.byte	0x4
 17052 07b0 4002     		.2byte	0x240
 17053 07b2 A6000000 		.4byte	0xa6
 17054 07b6 02       		.byte	0x2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 448


 17055 07b7 23       		.byte	0x23
 17056 07b8 40       		.uleb128 0x40
 17057 07b9 0D       		.uleb128 0xd
 17058 07ba D0040000 		.4byte	.LASF117
 17059 07be 04       		.byte	0x4
 17060 07bf 4102     		.2byte	0x241
 17061 07c1 A6000000 		.4byte	0xa6
 17062 07c5 02       		.byte	0x2
 17063 07c6 23       		.byte	0x23
 17064 07c7 42       		.uleb128 0x42
 17065 07c8 0D       		.uleb128 0xd
 17066 07c9 6E090000 		.4byte	.LASF118
 17067 07cd 04       		.byte	0x4
 17068 07ce 4302     		.2byte	0x243
 17069 07d0 BC000000 		.4byte	0xbc
 17070 07d4 02       		.byte	0x2
 17071 07d5 23       		.byte	0x23
 17072 07d6 44       		.uleb128 0x44
 17073 07d7 0D       		.uleb128 0xd
 17074 07d8 93080000 		.4byte	.LASF119
 17075 07dc 04       		.byte	0x4
 17076 07dd 4502     		.2byte	0x245
 17077 07df BC000000 		.4byte	0xbc
 17078 07e3 02       		.byte	0x2
 17079 07e4 23       		.byte	0x23
 17080 07e5 48       		.uleb128 0x48
 17081 07e6 0D       		.uleb128 0xd
 17082 07e7 260D0000 		.4byte	.LASF120
 17083 07eb 04       		.byte	0x4
 17084 07ec 4602     		.2byte	0x246
 17085 07ee 7A000000 		.4byte	0x7a
 17086 07f2 02       		.byte	0x2
 17087 07f3 23       		.byte	0x23
 17088 07f4 4C       		.uleb128 0x4c
 17089 07f5 00       		.byte	0
 17090 07f6 0C       		.uleb128 0xc
 17091 07f7 66000000 		.4byte	.LASF121
 17092 07fb 0C       		.byte	0xc
 17093 07fc 04       		.byte	0x4
 17094 07fd 4A02     		.2byte	0x24a
 17095 07ff 31080000 		.4byte	0x831
 17096 0803 0D       		.uleb128 0xd
 17097 0804 BD060000 		.4byte	.LASF122
 17098 0808 04       		.byte	0x4
 17099 0809 4C02     		.2byte	0x24c
 17100 080b 7A000000 		.4byte	0x7a
 17101 080f 02       		.byte	0x2
 17102 0810 23       		.byte	0x23
 17103 0811 00       		.uleb128 0
 17104 0812 0D       		.uleb128 0xd
 17105 0813 AD010000 		.4byte	.LASF123
 17106 0817 04       		.byte	0x4
 17107 0818 4D02     		.2byte	0x24d
 17108 081a BC000000 		.4byte	0xbc
 17109 081e 02       		.byte	0x2
 17110 081f 23       		.byte	0x23
 17111 0820 04       		.uleb128 0x4
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 449


 17112 0821 0D       		.uleb128 0xd
 17113 0822 17040000 		.4byte	.LASF124
 17114 0826 04       		.byte	0x4
 17115 0827 4E02     		.2byte	0x24e
 17116 0829 BC000000 		.4byte	0xbc
 17117 082d 02       		.byte	0x2
 17118 082e 23       		.byte	0x23
 17119 082f 08       		.uleb128 0x8
 17120 0830 00       		.byte	0
 17121 0831 0C       		.uleb128 0xc
 17122 0832 E60A0000 		.4byte	.LASF125
 17123 0836 90       		.byte	0x90
 17124 0837 04       		.byte	0x4
 17125 0838 EB01     		.2byte	0x1eb
 17126 083a 7A080000 		.4byte	0x87a
 17127 083e 0D       		.uleb128 0xd
 17128 083f 92020000 		.4byte	.LASF126
 17129 0843 04       		.byte	0x4
 17130 0844 FD01     		.2byte	0x1fd
 17131 0846 EC050000 		.4byte	0x5ec
 17132 084a 02       		.byte	0x2
 17133 084b 23       		.byte	0x23
 17134 084c 00       		.uleb128 0
 17135 084d 0D       		.uleb128 0xd
 17136 084e 3A0F0000 		.4byte	.LASF59
 17137 0852 04       		.byte	0x4
 17138 0853 2402     		.2byte	0x224
 17139 0855 36060000 		.4byte	0x636
 17140 0859 02       		.byte	0x2
 17141 085a 23       		.byte	0x23
 17142 085b 0C       		.uleb128 0xc
 17143 085c 0E       		.uleb128 0xe
 17144 085d 6D6300   		.ascii	"mc\000"
 17145 0860 04       		.byte	0x4
 17146 0861 4702     		.2byte	0x247
 17147 0863 E9060000 		.4byte	0x6e9
 17148 0867 02       		.byte	0x2
 17149 0868 23       		.byte	0x23
 17150 0869 34       		.uleb128 0x34
 17151 086a 0E       		.uleb128 0xe
 17152 086b 6C6300   		.ascii	"lc\000"
 17153 086e 04       		.byte	0x4
 17154 086f 4F02     		.2byte	0x24f
 17155 0871 F6070000 		.4byte	0x7f6
 17156 0875 03       		.byte	0x3
 17157 0876 23       		.byte	0x23
 17158 0877 8401     		.uleb128 0x84
 17159 0879 00       		.byte	0
 17160 087a 0C       		.uleb128 0xc
 17161 087b 7D0C0000 		.4byte	.LASF127
 17162 087f 0C       		.byte	0xc
 17163 0880 04       		.byte	0x4
 17164 0881 5702     		.2byte	0x257
 17165 0883 B5080000 		.4byte	0x8b5
 17166 0887 0D       		.uleb128 0xd
 17167 0888 D0010000 		.4byte	.LASF128
 17168 088c 04       		.byte	0x4
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 450


 17169 088d 5902     		.2byte	0x259
 17170 088f 90000000 		.4byte	0x90
 17171 0893 02       		.byte	0x2
 17172 0894 23       		.byte	0x23
 17173 0895 00       		.uleb128 0
 17174 0896 0E       		.uleb128 0xe
 17175 0897 73656300 		.ascii	"sec\000"
 17176 089b 04       		.byte	0x4
 17177 089c 5A02     		.2byte	0x25a
 17178 089e 90000000 		.4byte	0x90
 17179 08a2 02       		.byte	0x2
 17180 08a3 23       		.byte	0x23
 17181 08a4 04       		.uleb128 0x4
 17182 08a5 0D       		.uleb128 0xd
 17183 08a6 44060000 		.4byte	.LASF129
 17184 08aa 04       		.byte	0x4
 17185 08ab 5B02     		.2byte	0x25b
 17186 08ad 90000000 		.4byte	0x90
 17187 08b1 02       		.byte	0x2
 17188 08b2 23       		.byte	0x23
 17189 08b3 08       		.uleb128 0x8
 17190 08b4 00       		.byte	0
 17191 08b5 0C       		.uleb128 0xc
 17192 08b6 86060000 		.4byte	.LASF130
 17193 08ba 05       		.byte	0x5
 17194 08bb 04       		.byte	0x4
 17195 08bc 5E02     		.2byte	0x25e
 17196 08be 0E090000 		.4byte	0x90e
 17197 08c2 0D       		.uleb128 0xd
 17198 08c3 64010000 		.4byte	.LASF131
 17199 08c7 04       		.byte	0x4
 17200 08c8 6002     		.2byte	0x260
 17201 08ca 7A000000 		.4byte	0x7a
 17202 08ce 02       		.byte	0x2
 17203 08cf 23       		.byte	0x23
 17204 08d0 00       		.uleb128 0
 17205 08d1 0D       		.uleb128 0xd
 17206 08d2 E7050000 		.4byte	.LASF132
 17207 08d6 04       		.byte	0x4
 17208 08d7 6102     		.2byte	0x261
 17209 08d9 7A000000 		.4byte	0x7a
 17210 08dd 02       		.byte	0x2
 17211 08de 23       		.byte	0x23
 17212 08df 01       		.uleb128 0x1
 17213 08e0 0D       		.uleb128 0xd
 17214 08e1 E30C0000 		.4byte	.LASF133
 17215 08e5 04       		.byte	0x4
 17216 08e6 6202     		.2byte	0x262
 17217 08e8 7A000000 		.4byte	0x7a
 17218 08ec 02       		.byte	0x2
 17219 08ed 23       		.byte	0x23
 17220 08ee 02       		.uleb128 0x2
 17221 08ef 0D       		.uleb128 0xd
 17222 08f0 1E010000 		.4byte	.LASF41
 17223 08f4 04       		.byte	0x4
 17224 08f5 6302     		.2byte	0x263
 17225 08f7 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 451


 17226 08fb 02       		.byte	0x2
 17227 08fc 23       		.byte	0x23
 17228 08fd 03       		.uleb128 0x3
 17229 08fe 0D       		.uleb128 0xd
 17230 08ff C6080000 		.4byte	.LASF134
 17231 0903 04       		.byte	0x4
 17232 0904 6402     		.2byte	0x264
 17233 0906 7A000000 		.4byte	0x7a
 17234 090a 02       		.byte	0x2
 17235 090b 23       		.byte	0x23
 17236 090c 04       		.uleb128 0x4
 17237 090d 00       		.byte	0
 17238 090e 0C       		.uleb128 0xc
 17239 090f F5040000 		.4byte	.LASF135
 17240 0913 18       		.byte	0x18
 17241 0914 04       		.byte	0x4
 17242 0915 5302     		.2byte	0x253
 17243 0917 49090000 		.4byte	0x949
 17244 091b 0D       		.uleb128 0xd
 17245 091c FF0C0000 		.4byte	.LASF136
 17246 0920 04       		.byte	0x4
 17247 0921 5502     		.2byte	0x255
 17248 0923 7A000000 		.4byte	0x7a
 17249 0927 02       		.byte	0x2
 17250 0928 23       		.byte	0x23
 17251 0929 00       		.uleb128 0
 17252 092a 0D       		.uleb128 0xd
 17253 092b AE050000 		.4byte	.LASF137
 17254 092f 04       		.byte	0x4
 17255 0930 5C02     		.2byte	0x25c
 17256 0932 7A080000 		.4byte	0x87a
 17257 0936 02       		.byte	0x2
 17258 0937 23       		.byte	0x23
 17259 0938 04       		.uleb128 0x4
 17260 0939 0D       		.uleb128 0xd
 17261 093a 200F0000 		.4byte	.LASF138
 17262 093e 04       		.byte	0x4
 17263 093f 6502     		.2byte	0x265
 17264 0941 B5080000 		.4byte	0x8b5
 17265 0945 02       		.byte	0x2
 17266 0946 23       		.byte	0x23
 17267 0947 10       		.uleb128 0x10
 17268 0948 00       		.byte	0
 17269 0949 0F       		.uleb128 0xf
 17270 094a D80A0000 		.4byte	.LASF139
 17271 094e 2D       		.byte	0x2d
 17272 094f 05       		.byte	0x5
 17273 0950 12       		.byte	0x12
 17274 0951 8E090000 		.4byte	0x98e
 17275 0955 10       		.uleb128 0x10
 17276 0956 42030000 		.4byte	.LASF140
 17277 095a 05       		.byte	0x5
 17278 095b 14       		.byte	0x14
 17279 095c 8E090000 		.4byte	0x98e
 17280 0960 02       		.byte	0x2
 17281 0961 23       		.byte	0x23
 17282 0962 00       		.uleb128 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 452


 17283 0963 10       		.uleb128 0x10
 17284 0964 C6040000 		.4byte	.LASF141
 17285 0968 05       		.byte	0x5
 17286 0969 15       		.byte	0x15
 17287 096a 8E090000 		.4byte	0x98e
 17288 096e 02       		.byte	0x2
 17289 096f 23       		.byte	0x23
 17290 0970 0F       		.uleb128 0xf
 17291 0971 10       		.uleb128 0x10
 17292 0972 5C040000 		.4byte	.LASF142
 17293 0976 05       		.byte	0x5
 17294 0977 16       		.byte	0x16
 17295 0978 9E090000 		.4byte	0x99e
 17296 097c 02       		.byte	0x2
 17297 097d 23       		.byte	0x23
 17298 097e 1E       		.uleb128 0x1e
 17299 097f 10       		.uleb128 0x10
 17300 0980 64040000 		.4byte	.LASF143
 17301 0984 05       		.byte	0x5
 17302 0985 17       		.byte	0x17
 17303 0986 AE090000 		.4byte	0x9ae
 17304 098a 02       		.byte	0x2
 17305 098b 23       		.byte	0x23
 17306 098c 28       		.uleb128 0x28
 17307 098d 00       		.byte	0
 17308 098e 09       		.uleb128 0x9
 17309 098f D5000000 		.4byte	0xd5
 17310 0993 9E090000 		.4byte	0x99e
 17311 0997 0A       		.uleb128 0xa
 17312 0998 DC000000 		.4byte	0xdc
 17313 099c 0E       		.byte	0xe
 17314 099d 00       		.byte	0
 17315 099e 09       		.uleb128 0x9
 17316 099f D5000000 		.4byte	0xd5
 17317 09a3 AE090000 		.4byte	0x9ae
 17318 09a7 0A       		.uleb128 0xa
 17319 09a8 DC000000 		.4byte	0xdc
 17320 09ac 09       		.byte	0x9
 17321 09ad 00       		.byte	0
 17322 09ae 09       		.uleb128 0x9
 17323 09af D5000000 		.4byte	0xd5
 17324 09b3 BE090000 		.4byte	0x9be
 17325 09b7 0A       		.uleb128 0xa
 17326 09b8 DC000000 		.4byte	0xdc
 17327 09bc 04       		.byte	0x4
 17328 09bd 00       		.byte	0
 17329 09be 0F       		.uleb128 0xf
 17330 09bf 260C0000 		.4byte	.LASF144
 17331 09c3 14       		.byte	0x14
 17332 09c4 06       		.byte	0x6
 17333 09c5 41       		.byte	0x41
 17334 09c6 110A0000 		.4byte	0xa11
 17335 09ca 10       		.uleb128 0x10
 17336 09cb 0F0A0000 		.4byte	.LASF145
 17337 09cf 06       		.byte	0x6
 17338 09d0 43       		.byte	0x43
 17339 09d1 2D010000 		.4byte	0x12d
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 453


 17340 09d5 02       		.byte	0x2
 17341 09d6 23       		.byte	0x23
 17342 09d7 00       		.uleb128 0
 17343 09d8 10       		.uleb128 0x10
 17344 09d9 1C080000 		.4byte	.LASF146
 17345 09dd 06       		.byte	0x6
 17346 09de 45       		.byte	0x45
 17347 09df 2D010000 		.4byte	0x12d
 17348 09e3 02       		.byte	0x2
 17349 09e4 23       		.byte	0x23
 17350 09e5 04       		.uleb128 0x4
 17351 09e6 10       		.uleb128 0x10
 17352 09e7 BF020000 		.4byte	.LASF147
 17353 09eb 06       		.byte	0x6
 17354 09ec 47       		.byte	0x47
 17355 09ed 2D010000 		.4byte	0x12d
 17356 09f1 02       		.byte	0x2
 17357 09f2 23       		.byte	0x23
 17358 09f3 08       		.uleb128 0x8
 17359 09f4 10       		.uleb128 0x10
 17360 09f5 34050000 		.4byte	.LASF148
 17361 09f9 06       		.byte	0x6
 17362 09fa 49       		.byte	0x49
 17363 09fb B1000000 		.4byte	0xb1
 17364 09ff 02       		.byte	0x2
 17365 0a00 23       		.byte	0x23
 17366 0a01 0C       		.uleb128 0xc
 17367 0a02 10       		.uleb128 0x10
 17368 0a03 D00C0000 		.4byte	.LASF149
 17369 0a07 06       		.byte	0x6
 17370 0a08 4B       		.byte	0x4b
 17371 0a09 7A000000 		.4byte	0x7a
 17372 0a0d 02       		.byte	0x2
 17373 0a0e 23       		.byte	0x23
 17374 0a0f 10       		.uleb128 0x10
 17375 0a10 00       		.byte	0
 17376 0a11 0F       		.uleb128 0xf
 17377 0a12 ED040000 		.4byte	.LASF150
 17378 0a16 50       		.byte	0x50
 17379 0a17 06       		.byte	0x6
 17380 0a18 50       		.byte	0x50
 17381 0a19 D40A0000 		.4byte	0xad4
 17382 0a1d 10       		.uleb128 0x10
 17383 0a1e 7F050000 		.4byte	.LASF151
 17384 0a22 06       		.byte	0x6
 17385 0a23 52       		.byte	0x52
 17386 0a24 C3000000 		.4byte	0xc3
 17387 0a28 02       		.byte	0x2
 17388 0a29 23       		.byte	0x23
 17389 0a2a 00       		.uleb128 0
 17390 0a2b 10       		.uleb128 0x10
 17391 0a2c 64090000 		.4byte	.LASF152
 17392 0a30 06       		.byte	0x6
 17393 0a31 53       		.byte	0x53
 17394 0a32 C3000000 		.4byte	0xc3
 17395 0a36 02       		.byte	0x2
 17396 0a37 23       		.byte	0x23
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 454


 17397 0a38 08       		.uleb128 0x8
 17398 0a39 10       		.uleb128 0x10
 17399 0a3a 54060000 		.4byte	.LASF153
 17400 0a3e 06       		.byte	0x6
 17401 0a3f 54       		.byte	0x54
 17402 0a40 C3000000 		.4byte	0xc3
 17403 0a44 02       		.byte	0x2
 17404 0a45 23       		.byte	0x23
 17405 0a46 10       		.uleb128 0x10
 17406 0a47 10       		.uleb128 0x10
 17407 0a48 440C0000 		.4byte	.LASF154
 17408 0a4c 06       		.byte	0x6
 17409 0a4d 56       		.byte	0x56
 17410 0a4e B1000000 		.4byte	0xb1
 17411 0a52 02       		.byte	0x2
 17412 0a53 23       		.byte	0x23
 17413 0a54 18       		.uleb128 0x18
 17414 0a55 10       		.uleb128 0x10
 17415 0a56 4D0E0000 		.4byte	.LASF155
 17416 0a5a 06       		.byte	0x6
 17417 0a5b 57       		.byte	0x57
 17418 0a5c B1000000 		.4byte	0xb1
 17419 0a60 02       		.byte	0x2
 17420 0a61 23       		.byte	0x23
 17421 0a62 1C       		.uleb128 0x1c
 17422 0a63 10       		.uleb128 0x10
 17423 0a64 A00E0000 		.4byte	.LASF156
 17424 0a68 06       		.byte	0x6
 17425 0a69 58       		.byte	0x58
 17426 0a6a B1000000 		.4byte	0xb1
 17427 0a6e 02       		.byte	0x2
 17428 0a6f 23       		.byte	0x23
 17429 0a70 20       		.uleb128 0x20
 17430 0a71 10       		.uleb128 0x10
 17431 0a72 3A0E0000 		.4byte	.LASF157
 17432 0a76 06       		.byte	0x6
 17433 0a77 5A       		.byte	0x5a
 17434 0a78 B1000000 		.4byte	0xb1
 17435 0a7c 02       		.byte	0x2
 17436 0a7d 23       		.byte	0x23
 17437 0a7e 24       		.uleb128 0x24
 17438 0a7f 10       		.uleb128 0x10
 17439 0a80 F30C0000 		.4byte	.LASF158
 17440 0a84 06       		.byte	0x6
 17441 0a85 5B       		.byte	0x5b
 17442 0a86 B1000000 		.4byte	0xb1
 17443 0a8a 02       		.byte	0x2
 17444 0a8b 23       		.byte	0x23
 17445 0a8c 28       		.uleb128 0x28
 17446 0a8d 10       		.uleb128 0x10
 17447 0a8e 630D0000 		.4byte	.LASF159
 17448 0a92 06       		.byte	0x6
 17449 0a93 5D       		.byte	0x5d
 17450 0a94 C3000000 		.4byte	0xc3
 17451 0a98 02       		.byte	0x2
 17452 0a99 23       		.byte	0x23
 17453 0a9a 30       		.uleb128 0x30
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 455


 17454 0a9b 10       		.uleb128 0x10
 17455 0a9c 4D0B0000 		.4byte	.LASF160
 17456 0aa0 06       		.byte	0x6
 17457 0aa1 5E       		.byte	0x5e
 17458 0aa2 C3000000 		.4byte	0xc3
 17459 0aa6 02       		.byte	0x2
 17460 0aa7 23       		.byte	0x23
 17461 0aa8 38       		.uleb128 0x38
 17462 0aa9 10       		.uleb128 0x10
 17463 0aaa AE0B0000 		.4byte	.LASF161
 17464 0aae 06       		.byte	0x6
 17465 0aaf 5F       		.byte	0x5f
 17466 0ab0 C3000000 		.4byte	0xc3
 17467 0ab4 02       		.byte	0x2
 17468 0ab5 23       		.byte	0x23
 17469 0ab6 40       		.uleb128 0x40
 17470 0ab7 10       		.uleb128 0x10
 17471 0ab8 C9000000 		.4byte	.LASF162
 17472 0abc 06       		.byte	0x6
 17473 0abd 61       		.byte	0x61
 17474 0abe BC000000 		.4byte	0xbc
 17475 0ac2 02       		.byte	0x2
 17476 0ac3 23       		.byte	0x23
 17477 0ac4 48       		.uleb128 0x48
 17478 0ac5 10       		.uleb128 0x10
 17479 0ac6 3E0D0000 		.4byte	.LASF163
 17480 0aca 06       		.byte	0x6
 17481 0acb 62       		.byte	0x62
 17482 0acc BC000000 		.4byte	0xbc
 17483 0ad0 02       		.byte	0x2
 17484 0ad1 23       		.byte	0x23
 17485 0ad2 4C       		.uleb128 0x4c
 17486 0ad3 00       		.byte	0
 17487 0ad4 0F       		.uleb128 0xf
 17488 0ad5 75050000 		.4byte	.LASF164
 17489 0ad9 68       		.byte	0x68
 17490 0ada 06       		.byte	0x6
 17491 0adb 3E       		.byte	0x3e
 17492 0adc FD0A0000 		.4byte	0xafd
 17493 0ae0 10       		.uleb128 0x10
 17494 0ae1 3A0F0000 		.4byte	.LASF59
 17495 0ae5 06       		.byte	0x6
 17496 0ae6 4D       		.byte	0x4d
 17497 0ae7 BE090000 		.4byte	0x9be
 17498 0aeb 02       		.byte	0x2
 17499 0aec 23       		.byte	0x23
 17500 0aed 00       		.uleb128 0
 17501 0aee 10       		.uleb128 0x10
 17502 0aef 340E0000 		.4byte	.LASF165
 17503 0af3 06       		.byte	0x6
 17504 0af4 64       		.byte	0x64
 17505 0af5 110A0000 		.4byte	0xa11
 17506 0af9 02       		.byte	0x2
 17507 0afa 23       		.byte	0x23
 17508 0afb 18       		.uleb128 0x18
 17509 0afc 00       		.byte	0
 17510 0afd 0F       		.uleb128 0xf
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 456


 17511 0afe 72060000 		.4byte	.LASF166
 17512 0b02 01       		.byte	0x1
 17513 0b03 06       		.byte	0x6
 17514 0b04 6C       		.byte	0x6c
 17515 0b05 180B0000 		.4byte	0xb18
 17516 0b09 10       		.uleb128 0x10
 17517 0b0a F0070000 		.4byte	.LASF167
 17518 0b0e 06       		.byte	0x6
 17519 0b0f 6E       		.byte	0x6e
 17520 0b10 7A000000 		.4byte	0x7a
 17521 0b14 02       		.byte	0x2
 17522 0b15 23       		.byte	0x23
 17523 0b16 00       		.uleb128 0
 17524 0b17 00       		.byte	0
 17525 0b18 11       		.uleb128 0x11
 17526 0b19 F002     		.2byte	0x2f0
 17527 0b1b 06       		.byte	0x6
 17528 0b1c 69       		.byte	0x69
 17529 0b1d 6B0B0000 		.4byte	0xb6b
 17530 0b21 10       		.uleb128 0x10
 17531 0b22 3A0F0000 		.4byte	.LASF59
 17532 0b26 06       		.byte	0x6
 17533 0b27 6F       		.byte	0x6f
 17534 0b28 FD0A0000 		.4byte	0xafd
 17535 0b2c 02       		.byte	0x2
 17536 0b2d 23       		.byte	0x23
 17537 0b2e 00       		.uleb128 0
 17538 0b2f 10       		.uleb128 0x10
 17539 0b30 290F0000 		.4byte	.LASF168
 17540 0b34 06       		.byte	0x6
 17541 0b35 71       		.byte	0x71
 17542 0b36 6B0B0000 		.4byte	0xb6b
 17543 0b3a 02       		.byte	0x2
 17544 0b3b 23       		.byte	0x23
 17545 0b3c 08       		.uleb128 0x8
 17546 0b3d 10       		.uleb128 0x10
 17547 0b3e D9070000 		.4byte	.LASF169
 17548 0b42 06       		.byte	0x6
 17549 0b43 73       		.byte	0x73
 17550 0b44 B1000000 		.4byte	0xb1
 17551 0b48 03       		.byte	0x3
 17552 0b49 23       		.byte	0x23
 17553 0b4a E005     		.uleb128 0x2e0
 17554 0b4c 10       		.uleb128 0x10
 17555 0b4d 0D050000 		.4byte	.LASF170
 17556 0b51 06       		.byte	0x6
 17557 0b52 74       		.byte	0x74
 17558 0b53 B1000000 		.4byte	0xb1
 17559 0b57 03       		.byte	0x3
 17560 0b58 23       		.byte	0x23
 17561 0b59 E405     		.uleb128 0x2e4
 17562 0b5b 10       		.uleb128 0x10
 17563 0b5c 6B0D0000 		.4byte	.LASF171
 17564 0b60 06       		.byte	0x6
 17565 0b61 76       		.byte	0x76
 17566 0b62 B1000000 		.4byte	0xb1
 17567 0b66 03       		.byte	0x3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 457


 17568 0b67 23       		.byte	0x23
 17569 0b68 E805     		.uleb128 0x2e8
 17570 0b6a 00       		.byte	0
 17571 0b6b 09       		.uleb128 0x9
 17572 0b6c D40A0000 		.4byte	0xad4
 17573 0b70 7B0B0000 		.4byte	0xb7b
 17574 0b74 0A       		.uleb128 0xa
 17575 0b75 DC000000 		.4byte	0xdc
 17576 0b79 06       		.byte	0x6
 17577 0b7a 00       		.byte	0
 17578 0b7b 03       		.uleb128 0x3
 17579 0b7c C4070000 		.4byte	.LASF172
 17580 0b80 06       		.byte	0x6
 17581 0b81 77       		.byte	0x77
 17582 0b82 180B0000 		.4byte	0xb18
 17583 0b86 12       		.uleb128 0x12
 17584 0b87 30       		.byte	0x30
 17585 0b88 06       		.byte	0x6
 17586 0b89 7B       		.byte	0x7b
 17587 0b8a 0D0C0000 		.4byte	0xc0d
 17588 0b8e 10       		.uleb128 0x10
 17589 0b8f BD060000 		.4byte	.LASF122
 17590 0b93 06       		.byte	0x6
 17591 0b94 7D       		.byte	0x7d
 17592 0b95 7A000000 		.4byte	0x7a
 17593 0b99 02       		.byte	0x2
 17594 0b9a 23       		.byte	0x23
 17595 0b9b 00       		.uleb128 0
 17596 0b9c 10       		.uleb128 0x10
 17597 0b9d 6D0C0000 		.4byte	.LASF173
 17598 0ba1 06       		.byte	0x6
 17599 0ba2 7E       		.byte	0x7e
 17600 0ba3 7A000000 		.4byte	0x7a
 17601 0ba7 02       		.byte	0x2
 17602 0ba8 23       		.byte	0x23
 17603 0ba9 01       		.uleb128 0x1
 17604 0baa 10       		.uleb128 0x10
 17605 0bab D9070000 		.4byte	.LASF169
 17606 0baf 06       		.byte	0x6
 17607 0bb0 7F       		.byte	0x7f
 17608 0bb1 90000000 		.4byte	0x90
 17609 0bb5 02       		.byte	0x2
 17610 0bb6 23       		.byte	0x23
 17611 0bb7 04       		.uleb128 0x4
 17612 0bb8 10       		.uleb128 0x10
 17613 0bb9 64050000 		.4byte	.LASF174
 17614 0bbd 06       		.byte	0x6
 17615 0bbe 80       		.byte	0x80
 17616 0bbf C3000000 		.4byte	0xc3
 17617 0bc3 02       		.byte	0x2
 17618 0bc4 23       		.byte	0x23
 17619 0bc5 08       		.uleb128 0x8
 17620 0bc6 10       		.uleb128 0x10
 17621 0bc7 34050000 		.4byte	.LASF148
 17622 0bcb 06       		.byte	0x6
 17623 0bcc 81       		.byte	0x81
 17624 0bcd B1000000 		.4byte	0xb1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 458


 17625 0bd1 02       		.byte	0x2
 17626 0bd2 23       		.byte	0x23
 17627 0bd3 10       		.uleb128 0x10
 17628 0bd4 10       		.uleb128 0x10
 17629 0bd5 2D0A0000 		.4byte	.LASF175
 17630 0bd9 06       		.byte	0x6
 17631 0bda 82       		.byte	0x82
 17632 0bdb C3000000 		.4byte	0xc3
 17633 0bdf 02       		.byte	0x2
 17634 0be0 23       		.byte	0x23
 17635 0be1 18       		.uleb128 0x18
 17636 0be2 10       		.uleb128 0x10
 17637 0be3 380B0000 		.4byte	.LASF176
 17638 0be7 06       		.byte	0x6
 17639 0be8 83       		.byte	0x83
 17640 0be9 B1000000 		.4byte	0xb1
 17641 0bed 02       		.byte	0x2
 17642 0bee 23       		.byte	0x23
 17643 0bef 20       		.uleb128 0x20
 17644 0bf0 10       		.uleb128 0x10
 17645 0bf1 50000000 		.4byte	.LASF177
 17646 0bf5 06       		.byte	0x6
 17647 0bf6 84       		.byte	0x84
 17648 0bf7 B1000000 		.4byte	0xb1
 17649 0bfb 02       		.byte	0x2
 17650 0bfc 23       		.byte	0x23
 17651 0bfd 24       		.uleb128 0x24
 17652 0bfe 10       		.uleb128 0x10
 17653 0bff CA0B0000 		.4byte	.LASF178
 17654 0c03 06       		.byte	0x6
 17655 0c04 85       		.byte	0x85
 17656 0c05 7A000000 		.4byte	0x7a
 17657 0c09 02       		.byte	0x2
 17658 0c0a 23       		.byte	0x23
 17659 0c0b 28       		.uleb128 0x28
 17660 0c0c 00       		.byte	0
 17661 0c0d 03       		.uleb128 0x3
 17662 0c0e B7050000 		.4byte	.LASF179
 17663 0c12 06       		.byte	0x6
 17664 0c13 87       		.byte	0x87
 17665 0c14 860B0000 		.4byte	0xb86
 17666 0c18 0F       		.uleb128 0xf
 17667 0c19 42040000 		.4byte	.LASF180
 17668 0c1d 14       		.byte	0x14
 17669 0c1e 06       		.byte	0x6
 17670 0c1f 93       		.byte	0x93
 17671 0c20 410C0000 		.4byte	0xc41
 17672 0c24 10       		.uleb128 0x10
 17673 0c25 DF070000 		.4byte	.LASF181
 17674 0c29 06       		.byte	0x6
 17675 0c2a 95       		.byte	0x95
 17676 0c2b 410C0000 		.4byte	0xc41
 17677 0c2f 02       		.byte	0x2
 17678 0c30 23       		.byte	0x23
 17679 0c31 00       		.uleb128 0
 17680 0c32 10       		.uleb128 0x10
 17681 0c33 DD040000 		.4byte	.LASF182
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 459


 17682 0c37 06       		.byte	0x6
 17683 0c38 97       		.byte	0x97
 17684 0c39 510C0000 		.4byte	0xc51
 17685 0c3d 02       		.byte	0x2
 17686 0c3e 23       		.byte	0x23
 17687 0c3f 0C       		.uleb128 0xc
 17688 0c40 00       		.byte	0
 17689 0c41 09       		.uleb128 0x9
 17690 0c42 2D010000 		.4byte	0x12d
 17691 0c46 510C0000 		.4byte	0xc51
 17692 0c4a 0A       		.uleb128 0xa
 17693 0c4b DC000000 		.4byte	0xdc
 17694 0c4f 02       		.byte	0x2
 17695 0c50 00       		.byte	0
 17696 0c51 09       		.uleb128 0x9
 17697 0c52 A6000000 		.4byte	0xa6
 17698 0c56 610C0000 		.4byte	0xc61
 17699 0c5a 0A       		.uleb128 0xa
 17700 0c5b DC000000 		.4byte	0xdc
 17701 0c5f 02       		.byte	0x2
 17702 0c60 00       		.byte	0
 17703 0c61 13       		.uleb128 0x13
 17704 0c62 514D4300 		.ascii	"QMC\000"
 17705 0c66 0C       		.byte	0xc
 17706 0c67 06       		.byte	0x6
 17707 0c68 9C       		.byte	0x9c
 17708 0c69 7C0C0000 		.4byte	0xc7c
 17709 0c6d 10       		.uleb128 0x10
 17710 0c6e 05090000 		.4byte	.LASF55
 17711 0c72 06       		.byte	0x6
 17712 0c73 9E       		.byte	0x9e
 17713 0c74 7C0C0000 		.4byte	0xc7c
 17714 0c78 02       		.byte	0x2
 17715 0c79 23       		.byte	0x23
 17716 0c7a 00       		.uleb128 0
 17717 0c7b 00       		.byte	0
 17718 0c7c 09       		.uleb128 0x9
 17719 0c7d BC000000 		.4byte	0xbc
 17720 0c81 8C0C0000 		.4byte	0xc8c
 17721 0c85 0A       		.uleb128 0xa
 17722 0c86 DC000000 		.4byte	0xdc
 17723 0c8a 02       		.byte	0x2
 17724 0c8b 00       		.byte	0
 17725 0c8c 0F       		.uleb128 0xf
 17726 0c8d EB010000 		.4byte	.LASF183
 17727 0c91 24       		.byte	0x24
 17728 0c92 06       		.byte	0x6
 17729 0c93 8B       		.byte	0x8b
 17730 0c94 D00C0000 		.4byte	0xcd0
 17731 0c98 10       		.uleb128 0x10
 17732 0c99 EE0B0000 		.4byte	.LASF184
 17733 0c9d 06       		.byte	0x6
 17734 0c9e 8D       		.byte	0x8d
 17735 0c9f 7A000000 		.4byte	0x7a
 17736 0ca3 02       		.byte	0x2
 17737 0ca4 23       		.byte	0x23
 17738 0ca5 00       		.uleb128 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 460


 17739 0ca6 10       		.uleb128 0x10
 17740 0ca7 E80C0000 		.4byte	.LASF25
 17741 0cab 06       		.byte	0x6
 17742 0cac 90       		.byte	0x90
 17743 0cad 7A000000 		.4byte	0x7a
 17744 0cb1 02       		.byte	0x2
 17745 0cb2 23       		.byte	0x23
 17746 0cb3 01       		.uleb128 0x1
 17747 0cb4 10       		.uleb128 0x10
 17748 0cb5 3A0F0000 		.4byte	.LASF59
 17749 0cb9 06       		.byte	0x6
 17750 0cba 99       		.byte	0x99
 17751 0cbb 180C0000 		.4byte	0xc18
 17752 0cbf 02       		.byte	0x2
 17753 0cc0 23       		.byte	0x23
 17754 0cc1 04       		.uleb128 0x4
 17755 0cc2 14       		.uleb128 0x14
 17756 0cc3 6D6300   		.ascii	"mc\000"
 17757 0cc6 06       		.byte	0x6
 17758 0cc7 A0       		.byte	0xa0
 17759 0cc8 610C0000 		.4byte	0xc61
 17760 0ccc 02       		.byte	0x2
 17761 0ccd 23       		.byte	0x23
 17762 0cce 18       		.uleb128 0x18
 17763 0ccf 00       		.byte	0
 17764 0cd0 0F       		.uleb128 0xf
 17765 0cd1 530C0000 		.4byte	.LASF185
 17766 0cd5 0A       		.byte	0xa
 17767 0cd6 07       		.byte	0x7
 17768 0cd7 18       		.byte	0x18
 17769 0cd8 3F0D0000 		.4byte	0xd3f
 17770 0cdc 10       		.uleb128 0x10
 17771 0cdd BD060000 		.4byte	.LASF122
 17772 0ce1 07       		.byte	0x7
 17773 0ce2 1A       		.byte	0x1a
 17774 0ce3 7A000000 		.4byte	0x7a
 17775 0ce7 02       		.byte	0x2
 17776 0ce8 23       		.byte	0x23
 17777 0ce9 00       		.uleb128 0
 17778 0cea 10       		.uleb128 0x10
 17779 0ceb D4050000 		.4byte	.LASF186
 17780 0cef 07       		.byte	0x7
 17781 0cf0 1B       		.byte	0x1b
 17782 0cf1 7A000000 		.4byte	0x7a
 17783 0cf5 02       		.byte	0x2
 17784 0cf6 23       		.byte	0x23
 17785 0cf7 01       		.uleb128 0x1
 17786 0cf8 10       		.uleb128 0x10
 17787 0cf9 21060000 		.4byte	.LASF187
 17788 0cfd 07       		.byte	0x7
 17789 0cfe 1C       		.byte	0x1c
 17790 0cff 7A000000 		.4byte	0x7a
 17791 0d03 02       		.byte	0x2
 17792 0d04 23       		.byte	0x23
 17793 0d05 02       		.uleb128 0x2
 17794 0d06 10       		.uleb128 0x10
 17795 0d07 37010000 		.4byte	.LASF188
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 461


 17796 0d0b 07       		.byte	0x7
 17797 0d0c 1D       		.byte	0x1d
 17798 0d0d 85000000 		.4byte	0x85
 17799 0d11 02       		.byte	0x2
 17800 0d12 23       		.byte	0x23
 17801 0d13 04       		.uleb128 0x4
 17802 0d14 10       		.uleb128 0x10
 17803 0d15 5B050000 		.4byte	.LASF189
 17804 0d19 07       		.byte	0x7
 17805 0d1a 1E       		.byte	0x1e
 17806 0d1b 85000000 		.4byte	0x85
 17807 0d1f 02       		.byte	0x2
 17808 0d20 23       		.byte	0x23
 17809 0d21 06       		.uleb128 0x6
 17810 0d22 10       		.uleb128 0x10
 17811 0d23 920D0000 		.4byte	.LASF190
 17812 0d27 07       		.byte	0x7
 17813 0d28 1F       		.byte	0x1f
 17814 0d29 7A000000 		.4byte	0x7a
 17815 0d2d 02       		.byte	0x2
 17816 0d2e 23       		.byte	0x23
 17817 0d2f 08       		.uleb128 0x8
 17818 0d30 10       		.uleb128 0x10
 17819 0d31 700B0000 		.4byte	.LASF191
 17820 0d35 07       		.byte	0x7
 17821 0d36 20       		.byte	0x20
 17822 0d37 7A000000 		.4byte	0x7a
 17823 0d3b 02       		.byte	0x2
 17824 0d3c 23       		.byte	0x23
 17825 0d3d 09       		.uleb128 0x9
 17826 0d3e 00       		.byte	0
 17827 0d3f 0F       		.uleb128 0xf
 17828 0d40 0F0F0000 		.4byte	.LASF192
 17829 0d44 30       		.byte	0x30
 17830 0d45 08       		.byte	0x8
 17831 0d46 18       		.byte	0x18
 17832 0d47 F30D0000 		.4byte	0xdf3
 17833 0d4b 10       		.uleb128 0x10
 17834 0d4c E00A0000 		.4byte	.LASF193
 17835 0d50 08       		.byte	0x8
 17836 0d51 1A       		.byte	0x1a
 17837 0d52 7A000000 		.4byte	0x7a
 17838 0d56 02       		.byte	0x2
 17839 0d57 23       		.byte	0x23
 17840 0d58 00       		.uleb128 0
 17841 0d59 10       		.uleb128 0x10
 17842 0d5a 140B0000 		.4byte	.LASF194
 17843 0d5e 08       		.byte	0x8
 17844 0d5f 1C       		.byte	0x1c
 17845 0d60 BC000000 		.4byte	0xbc
 17846 0d64 02       		.byte	0x2
 17847 0d65 23       		.byte	0x23
 17848 0d66 04       		.uleb128 0x4
 17849 0d67 10       		.uleb128 0x10
 17850 0d68 01060000 		.4byte	.LASF195
 17851 0d6c 08       		.byte	0x8
 17852 0d6d 1D       		.byte	0x1d
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 462


 17853 0d6e BC000000 		.4byte	0xbc
 17854 0d72 02       		.byte	0x2
 17855 0d73 23       		.byte	0x23
 17856 0d74 08       		.uleb128 0x8
 17857 0d75 14       		.uleb128 0x14
 17858 0d76 6D696E00 		.ascii	"min\000"
 17859 0d7a 08       		.byte	0x8
 17860 0d7b 1E       		.byte	0x1e
 17861 0d7c BC000000 		.4byte	0xbc
 17862 0d80 02       		.byte	0x2
 17863 0d81 23       		.byte	0x23
 17864 0d82 0C       		.uleb128 0xc
 17865 0d83 14       		.uleb128 0x14
 17866 0d84 6D617800 		.ascii	"max\000"
 17867 0d88 08       		.byte	0x8
 17868 0d89 1F       		.byte	0x1f
 17869 0d8a BC000000 		.4byte	0xbc
 17870 0d8e 02       		.byte	0x2
 17871 0d8f 23       		.byte	0x23
 17872 0d90 10       		.uleb128 0x10
 17873 0d91 10       		.uleb128 0x10
 17874 0d92 ED0C0000 		.4byte	.LASF196
 17875 0d96 08       		.byte	0x8
 17876 0d97 20       		.byte	0x20
 17877 0d98 BC000000 		.4byte	0xbc
 17878 0d9c 02       		.byte	0x2
 17879 0d9d 23       		.byte	0x23
 17880 0d9e 14       		.uleb128 0x14
 17881 0d9f 10       		.uleb128 0x10
 17882 0da0 C4090000 		.4byte	.LASF197
 17883 0da4 08       		.byte	0x8
 17884 0da5 21       		.byte	0x21
 17885 0da6 BC000000 		.4byte	0xbc
 17886 0daa 02       		.byte	0x2
 17887 0dab 23       		.byte	0x23
 17888 0dac 18       		.uleb128 0x18
 17889 0dad 14       		.uleb128 0x14
 17890 0dae 516B00   		.ascii	"Qk\000"
 17891 0db1 08       		.byte	0x8
 17892 0db2 22       		.byte	0x22
 17893 0db3 BC000000 		.4byte	0xbc
 17894 0db7 02       		.byte	0x2
 17895 0db8 23       		.byte	0x23
 17896 0db9 1C       		.uleb128 0x1c
 17897 0dba 10       		.uleb128 0x10
 17898 0dbb 99020000 		.4byte	.LASF198
 17899 0dbf 08       		.byte	0x8
 17900 0dc0 23       		.byte	0x23
 17901 0dc1 BC000000 		.4byte	0xbc
 17902 0dc5 02       		.byte	0x2
 17903 0dc6 23       		.byte	0x23
 17904 0dc7 20       		.uleb128 0x20
 17905 0dc8 10       		.uleb128 0x10
 17906 0dc9 D70B0000 		.4byte	.LASF199
 17907 0dcd 08       		.byte	0x8
 17908 0dce 24       		.byte	0x24
 17909 0dcf BC000000 		.4byte	0xbc
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 463


 17910 0dd3 02       		.byte	0x2
 17911 0dd4 23       		.byte	0x23
 17912 0dd5 24       		.uleb128 0x24
 17913 0dd6 10       		.uleb128 0x10
 17914 0dd7 7A0B0000 		.4byte	.LASF200
 17915 0ddb 08       		.byte	0x8
 17916 0ddc 26       		.byte	0x26
 17917 0ddd 90000000 		.4byte	0x90
 17918 0de1 02       		.byte	0x2
 17919 0de2 23       		.byte	0x23
 17920 0de3 28       		.uleb128 0x28
 17921 0de4 10       		.uleb128 0x10
 17922 0de5 DC060000 		.4byte	.LASF201
 17923 0de9 08       		.byte	0x8
 17924 0dea 28       		.byte	0x28
 17925 0deb 90000000 		.4byte	0x90
 17926 0def 02       		.byte	0x2
 17927 0df0 23       		.byte	0x23
 17928 0df1 2C       		.uleb128 0x2c
 17929 0df2 00       		.byte	0
 17930 0df3 0F       		.uleb128 0xf
 17931 0df4 D20D0000 		.4byte	.LASF202
 17932 0df8 08       		.byte	0x8
 17933 0df9 09       		.byte	0x9
 17934 0dfa 8C       		.byte	0x8c
 17935 0dfb 1C0E0000 		.4byte	0xe1c
 17936 0dff 10       		.uleb128 0x10
 17937 0e00 DC0D0000 		.4byte	.LASF203
 17938 0e04 09       		.byte	0x9
 17939 0e05 8E       		.byte	0x8e
 17940 0e06 BC000000 		.4byte	0xbc
 17941 0e0a 02       		.byte	0x2
 17942 0e0b 23       		.byte	0x23
 17943 0e0c 00       		.uleb128 0
 17944 0e0d 10       		.uleb128 0x10
 17945 0e0e 1D000000 		.4byte	.LASF204
 17946 0e12 09       		.byte	0x9
 17947 0e13 8F       		.byte	0x8f
 17948 0e14 BC000000 		.4byte	0xbc
 17949 0e18 02       		.byte	0x2
 17950 0e19 23       		.byte	0x23
 17951 0e1a 04       		.uleb128 0x4
 17952 0e1b 00       		.byte	0
 17953 0e1c 0F       		.uleb128 0xf
 17954 0e1d 64020000 		.4byte	.LASF205
 17955 0e21 08       		.byte	0x8
 17956 0e22 09       		.byte	0x9
 17957 0e23 92       		.byte	0x92
 17958 0e24 450E0000 		.4byte	0xe45
 17959 0e28 10       		.uleb128 0x10
 17960 0e29 860E0000 		.4byte	.LASF206
 17961 0e2d 09       		.byte	0x9
 17962 0e2e 94       		.byte	0x94
 17963 0e2f BC000000 		.4byte	0xbc
 17964 0e33 02       		.byte	0x2
 17965 0e34 23       		.byte	0x23
 17966 0e35 00       		.uleb128 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 464


 17967 0e36 10       		.uleb128 0x10
 17968 0e37 E80D0000 		.4byte	.LASF207
 17969 0e3b 09       		.byte	0x9
 17970 0e3c 95       		.byte	0x95
 17971 0e3d B1000000 		.4byte	0xb1
 17972 0e41 02       		.byte	0x2
 17973 0e42 23       		.byte	0x23
 17974 0e43 04       		.uleb128 0x4
 17975 0e44 00       		.byte	0
 17976 0e45 0F       		.uleb128 0xf
 17977 0e46 B4020000 		.4byte	.LASF208
 17978 0e4a 20       		.byte	0x20
 17979 0e4b 09       		.byte	0x9
 17980 0e4c 87       		.byte	0x87
 17981 0e4d 8A0E0000 		.4byte	0xe8a
 17982 0e51 10       		.uleb128 0x10
 17983 0e52 E5020000 		.4byte	.LASF209
 17984 0e56 09       		.byte	0x9
 17985 0e57 89       		.byte	0x89
 17986 0e58 C3000000 		.4byte	0xc3
 17987 0e5c 02       		.byte	0x2
 17988 0e5d 23       		.byte	0x23
 17989 0e5e 00       		.uleb128 0
 17990 0e5f 10       		.uleb128 0x10
 17991 0e60 42080000 		.4byte	.LASF210
 17992 0e64 09       		.byte	0x9
 17993 0e65 8A       		.byte	0x8a
 17994 0e66 BC000000 		.4byte	0xbc
 17995 0e6a 02       		.byte	0x2
 17996 0e6b 23       		.byte	0x23
 17997 0e6c 08       		.uleb128 0x8
 17998 0e6d 10       		.uleb128 0x10
 17999 0e6e 840A0000 		.4byte	.LASF211
 18000 0e72 09       		.byte	0x9
 18001 0e73 90       		.byte	0x90
 18002 0e74 F30D0000 		.4byte	0xdf3
 18003 0e78 02       		.byte	0x2
 18004 0e79 23       		.byte	0x23
 18005 0e7a 0C       		.uleb128 0xc
 18006 0e7b 10       		.uleb128 0x10
 18007 0e7c 1A0F0000 		.4byte	.LASF212
 18008 0e80 09       		.byte	0x9
 18009 0e81 96       		.byte	0x96
 18010 0e82 1C0E0000 		.4byte	0xe1c
 18011 0e86 02       		.byte	0x2
 18012 0e87 23       		.byte	0x23
 18013 0e88 14       		.uleb128 0x14
 18014 0e89 00       		.byte	0
 18015 0e8a 15       		.uleb128 0x15
 18016 0e8b 01       		.byte	0x1
 18017 0e8c D3000000 		.4byte	.LASF213
 18018 0e90 01       		.byte	0x1
 18019 0e91 B3       		.byte	0xb3
 18020 0e92 01       		.byte	0x1
 18021 0e93 00000000 		.4byte	.LFB56
 18022 0e97 D2000000 		.4byte	.LFE56
 18023 0e9b 00000000 		.4byte	.LLST0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 465


 18024 0e9f 01       		.byte	0x1
 18025 0ea0 B30E0000 		.4byte	0xeb3
 18026 0ea4 16       		.uleb128 0x16
 18027 0ea5 BD060000 		.4byte	.LASF122
 18028 0ea9 01       		.byte	0x1
 18029 0eaa B3       		.byte	0xb3
 18030 0eab 7A000000 		.4byte	0x7a
 18031 0eaf 02       		.byte	0x2
 18032 0eb0 91       		.byte	0x91
 18033 0eb1 77       		.sleb128 -9
 18034 0eb2 00       		.byte	0
 18035 0eb3 15       		.uleb128 0x15
 18036 0eb4 01       		.byte	0x1
 18037 0eb5 39000000 		.4byte	.LASF214
 18038 0eb9 01       		.byte	0x1
 18039 0eba DB       		.byte	0xdb
 18040 0ebb 01       		.byte	0x1
 18041 0ebc 00000000 		.4byte	.LFB57
 18042 0ec0 EE000000 		.4byte	.LFE57
 18043 0ec4 38000000 		.4byte	.LLST1
 18044 0ec8 01       		.byte	0x1
 18045 0ec9 DC0E0000 		.4byte	0xedc
 18046 0ecd 16       		.uleb128 0x16
 18047 0ece BD060000 		.4byte	.LASF122
 18048 0ed2 01       		.byte	0x1
 18049 0ed3 DB       		.byte	0xdb
 18050 0ed4 7A000000 		.4byte	0x7a
 18051 0ed8 02       		.byte	0x2
 18052 0ed9 91       		.byte	0x91
 18053 0eda 77       		.sleb128 -9
 18054 0edb 00       		.byte	0
 18055 0edc 17       		.uleb128 0x17
 18056 0edd 01       		.byte	0x1
 18057 0ede AA060000 		.4byte	.LASF215
 18058 0ee2 01       		.byte	0x1
 18059 0ee3 0701     		.2byte	0x107
 18060 0ee5 01       		.byte	0x1
 18061 0ee6 00000000 		.4byte	.LFB58
 18062 0eea 74010000 		.4byte	.LFE58
 18063 0eee 70000000 		.4byte	.LLST2
 18064 0ef2 01       		.byte	0x1
 18065 0ef3 17       		.uleb128 0x17
 18066 0ef4 01       		.byte	0x1
 18067 0ef5 A5020000 		.4byte	.LASF216
 18068 0ef9 01       		.byte	0x1
 18069 0efa 4801     		.2byte	0x148
 18070 0efc 01       		.byte	0x1
 18071 0efd 00000000 		.4byte	.LFB59
 18072 0f01 50000000 		.4byte	.LFE59
 18073 0f05 9C000000 		.4byte	.LLST3
 18074 0f09 01       		.byte	0x1
 18075 0f0a 18       		.uleb128 0x18
 18076 0f0b 01       		.byte	0x1
 18077 0f0c 160C0000 		.4byte	.LASF217
 18078 0f10 01       		.byte	0x1
 18079 0f11 5901     		.2byte	0x159
 18080 0f13 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 466


 18081 0f14 00000000 		.4byte	.LFB60
 18082 0f18 80000000 		.4byte	.LFE60
 18083 0f1c C8000000 		.4byte	.LLST4
 18084 0f20 01       		.byte	0x1
 18085 0f21 350F0000 		.4byte	0xf35
 18086 0f25 19       		.uleb128 0x19
 18087 0f26 240E0000 		.4byte	.LASF218
 18088 0f2a 01       		.byte	0x1
 18089 0f2b 5901     		.2byte	0x159
 18090 0f2d 350F0000 		.4byte	0xf35
 18091 0f31 02       		.byte	0x2
 18092 0f32 91       		.byte	0x91
 18093 0f33 74       		.sleb128 -12
 18094 0f34 00       		.byte	0
 18095 0f35 05       		.uleb128 0x5
 18096 0f36 04       		.byte	0x4
 18097 0f37 31080000 		.4byte	0x831
 18098 0f3b 18       		.uleb128 0x18
 18099 0f3c 01       		.byte	0x1
 18100 0f3d 76090000 		.4byte	.LASF219
 18101 0f41 01       		.byte	0x1
 18102 0f42 7201     		.2byte	0x172
 18103 0f44 01       		.byte	0x1
 18104 0f45 00000000 		.4byte	.LFB61
 18105 0f49 98000000 		.4byte	.LFE61
 18106 0f4d 00010000 		.4byte	.LLST5
 18107 0f51 01       		.byte	0x1
 18108 0f52 660F0000 		.4byte	0xf66
 18109 0f56 19       		.uleb128 0x19
 18110 0f57 240E0000 		.4byte	.LASF218
 18111 0f5b 01       		.byte	0x1
 18112 0f5c 7201     		.2byte	0x172
 18113 0f5e 350F0000 		.4byte	0xf35
 18114 0f62 02       		.byte	0x2
 18115 0f63 91       		.byte	0x91
 18116 0f64 74       		.sleb128 -12
 18117 0f65 00       		.byte	0
 18118 0f66 18       		.uleb128 0x18
 18119 0f67 01       		.byte	0x1
 18120 0f68 AC0C0000 		.4byte	.LASF220
 18121 0f6c 01       		.byte	0x1
 18122 0f6d 8001     		.2byte	0x180
 18123 0f6f 01       		.byte	0x1
 18124 0f70 00000000 		.4byte	.LFB62
 18125 0f74 54000000 		.4byte	.LFE62
 18126 0f78 38010000 		.4byte	.LLST6
 18127 0f7c 01       		.byte	0x1
 18128 0f7d 910F0000 		.4byte	0xf91
 18129 0f81 19       		.uleb128 0x19
 18130 0f82 240E0000 		.4byte	.LASF218
 18131 0f86 01       		.byte	0x1
 18132 0f87 8001     		.2byte	0x180
 18133 0f89 350F0000 		.4byte	0xf35
 18134 0f8d 02       		.byte	0x2
 18135 0f8e 91       		.byte	0x91
 18136 0f8f 74       		.sleb128 -12
 18137 0f90 00       		.byte	0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 467


 18138 0f91 17       		.uleb128 0x17
 18139 0f92 01       		.byte	0x1
 18140 0f93 7B000000 		.4byte	.LASF221
 18141 0f97 01       		.byte	0x1
 18142 0f98 9501     		.2byte	0x195
 18143 0f9a 01       		.byte	0x1
 18144 0f9b 00000000 		.4byte	.LFB63
 18145 0f9f 66000000 		.4byte	.LFE63
 18146 0fa3 70010000 		.4byte	.LLST7
 18147 0fa7 01       		.byte	0x1
 18148 0fa8 17       		.uleb128 0x17
 18149 0fa9 01       		.byte	0x1
 18150 0faa 6B080000 		.4byte	.LASF222
 18151 0fae 01       		.byte	0x1
 18152 0faf 9B01     		.2byte	0x19b
 18153 0fb1 01       		.byte	0x1
 18154 0fb2 00000000 		.4byte	.LFB64
 18155 0fb6 66000000 		.4byte	.LFE64
 18156 0fba A8010000 		.4byte	.LLST8
 18157 0fbe 01       		.byte	0x1
 18158 0fbf 18       		.uleb128 0x18
 18159 0fc0 01       		.byte	0x1
 18160 0fc1 A1000000 		.4byte	.LASF223
 18161 0fc5 01       		.byte	0x1
 18162 0fc6 A101     		.2byte	0x1a1
 18163 0fc8 01       		.byte	0x1
 18164 0fc9 00000000 		.4byte	.LFB65
 18165 0fcd 20010000 		.4byte	.LFE65
 18166 0fd1 E0010000 		.4byte	.LLST9
 18167 0fd5 01       		.byte	0x1
 18168 0fd6 EA0F0000 		.4byte	0xfea
 18169 0fda 19       		.uleb128 0x19
 18170 0fdb 240E0000 		.4byte	.LASF218
 18171 0fdf 01       		.byte	0x1
 18172 0fe0 A101     		.2byte	0x1a1
 18173 0fe2 350F0000 		.4byte	0xf35
 18174 0fe6 02       		.byte	0x2
 18175 0fe7 91       		.byte	0x91
 18176 0fe8 74       		.sleb128 -12
 18177 0fe9 00       		.byte	0
 18178 0fea 18       		.uleb128 0x18
 18179 0feb 01       		.byte	0x1
 18180 0fec 86070000 		.4byte	.LASF224
 18181 0ff0 01       		.byte	0x1
 18182 0ff1 D301     		.2byte	0x1d3
 18183 0ff3 01       		.byte	0x1
 18184 0ff4 00000000 		.4byte	.LFB66
 18185 0ff8 64000000 		.4byte	.LFE66
 18186 0ffc 18020000 		.4byte	.LLST10
 18187 1000 01       		.byte	0x1
 18188 1001 15100000 		.4byte	0x1015
 18189 1005 19       		.uleb128 0x19
 18190 1006 240E0000 		.4byte	.LASF218
 18191 100a 01       		.byte	0x1
 18192 100b D301     		.2byte	0x1d3
 18193 100d 350F0000 		.4byte	0xf35
 18194 1011 02       		.byte	0x2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 468


 18195 1012 91       		.byte	0x91
 18196 1013 74       		.sleb128 -12
 18197 1014 00       		.byte	0
 18198 1015 1A       		.uleb128 0x1a
 18199 1016 01       		.byte	0x1
 18200 1017 080C0000 		.4byte	.LASF229
 18201 101b 01       		.byte	0x1
 18202 101c ED01     		.2byte	0x1ed
 18203 101e 01       		.byte	0x1
 18204 101f 7A000000 		.4byte	0x7a
 18205 1023 00000000 		.4byte	.LFB67
 18206 1027 FA000000 		.4byte	.LFE67
 18207 102b 50020000 		.4byte	.LLST11
 18208 102f 01       		.byte	0x1
 18209 1030 99100000 		.4byte	0x1099
 18210 1034 19       		.uleb128 0x19
 18211 1035 17080000 		.4byte	.LASF225
 18212 1039 01       		.byte	0x1
 18213 103a ED01     		.2byte	0x1ed
 18214 103c 7A000000 		.4byte	0x7a
 18215 1040 02       		.byte	0x2
 18216 1041 91       		.byte	0x91
 18217 1042 67       		.sleb128 -25
 18218 1043 19       		.uleb128 0x19
 18219 1044 AC080000 		.4byte	.LASF226
 18220 1048 01       		.byte	0x1
 18221 1049 ED01     		.2byte	0x1ed
 18222 104b 7A000000 		.4byte	0x7a
 18223 104f 02       		.byte	0x2
 18224 1050 91       		.byte	0x91
 18225 1051 66       		.sleb128 -26
 18226 1052 1B       		.uleb128 0x1b
 18227 1053 37060000 		.4byte	.LASF227
 18228 1057 01       		.byte	0x1
 18229 1058 EF01     		.2byte	0x1ef
 18230 105a 7A000000 		.4byte	0x7a
 18231 105e 02       		.byte	0x2
 18232 105f 91       		.byte	0x91
 18233 1060 77       		.sleb128 -9
 18234 1061 1B       		.uleb128 0x1b
 18235 1062 D9070000 		.4byte	.LASF169
 18236 1066 01       		.byte	0x1
 18237 1067 F001     		.2byte	0x1f0
 18238 1069 85000000 		.4byte	0x85
 18239 106d 02       		.byte	0x2
 18240 106e 91       		.byte	0x91
 18241 106f 74       		.sleb128 -12
 18242 1070 1B       		.uleb128 0x1b
 18243 1071 3D060000 		.4byte	.LASF228
 18244 1075 01       		.byte	0x1
 18245 1076 F101     		.2byte	0x1f1
 18246 1078 D5000000 		.4byte	0xd5
 18247 107c 02       		.byte	0x2
 18248 107d 91       		.byte	0x91
 18249 107e 73       		.sleb128 -13
 18250 107f 1C       		.uleb128 0x1c
 18251 1080 36000000 		.4byte	.LBB2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 469


 18252 1084 60000000 		.4byte	.LBE2
 18253 1088 1D       		.uleb128 0x1d
 18254 1089 5F5F7800 		.ascii	"__x\000"
 18255 108d 01       		.byte	0x1
 18256 108e FC01     		.2byte	0x1fc
 18257 1090 6C000000 		.4byte	0x6c
 18258 1094 02       		.byte	0x2
 18259 1095 91       		.byte	0x91
 18260 1096 6C       		.sleb128 -20
 18261 1097 00       		.byte	0
 18262 1098 00       		.byte	0
 18263 1099 1A       		.uleb128 0x1a
 18264 109a 01       		.byte	0x1
 18265 109b 5B090000 		.4byte	.LASF230
 18266 109f 01       		.byte	0x1
 18267 10a0 2D02     		.2byte	0x22d
 18268 10a2 01       		.byte	0x1
 18269 10a3 7A000000 		.4byte	0x7a
 18270 10a7 00000000 		.4byte	.LFB68
 18271 10ab 04030000 		.4byte	.LFE68
 18272 10af 88020000 		.4byte	.LLST12
 18273 10b3 01       		.byte	0x1
 18274 10b4 12110000 		.4byte	0x1112
 18275 10b8 19       		.uleb128 0x19
 18276 10b9 01080000 		.4byte	.LASF231
 18277 10bd 01       		.byte	0x1
 18278 10be 2D02     		.2byte	0x22d
 18279 10c0 7A000000 		.4byte	0x7a
 18280 10c4 03       		.byte	0x3
 18281 10c5 91       		.byte	0x91
 18282 10c6 BF7F     		.sleb128 -65
 18283 10c8 1B       		.uleb128 0x1b
 18284 10c9 310B0000 		.4byte	.LASF232
 18285 10cd 01       		.byte	0x1
 18286 10ce 2F02     		.2byte	0x22f
 18287 10d0 7A000000 		.4byte	0x7a
 18288 10d4 02       		.byte	0x2
 18289 10d5 91       		.byte	0x91
 18290 10d6 6F       		.sleb128 -17
 18291 10d7 1B       		.uleb128 0x1b
 18292 10d8 8E080000 		.4byte	.LASF233
 18293 10dc 01       		.byte	0x1
 18294 10dd 3002     		.2byte	0x230
 18295 10df 7A000000 		.4byte	0x7a
 18296 10e3 02       		.byte	0x2
 18297 10e4 91       		.byte	0x91
 18298 10e5 77       		.sleb128 -9
 18299 10e6 1B       		.uleb128 0x1b
 18300 10e7 4F0F0000 		.4byte	.LASF234
 18301 10eb 01       		.byte	0x1
 18302 10ec 3002     		.2byte	0x230
 18303 10ee 7A000000 		.4byte	0x7a
 18304 10f2 02       		.byte	0x2
 18305 10f3 91       		.byte	0x91
 18306 10f4 76       		.sleb128 -10
 18307 10f5 1B       		.uleb128 0x1b
 18308 10f6 EE000000 		.4byte	.LASF235
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 470


 18309 10fa 01       		.byte	0x1
 18310 10fb 3102     		.2byte	0x231
 18311 10fd 12110000 		.4byte	0x1112
 18312 1101 02       		.byte	0x2
 18313 1102 91       		.byte	0x91
 18314 1103 44       		.sleb128 -60
 18315 1104 1D       		.uleb128 0x1d
 18316 1105 7000     		.ascii	"p\000"
 18317 1107 01       		.byte	0x1
 18318 1108 3202     		.2byte	0x232
 18319 110a E3000000 		.4byte	0xe3
 18320 110e 02       		.byte	0x2
 18321 110f 91       		.byte	0x91
 18322 1110 70       		.sleb128 -16
 18323 1111 00       		.byte	0
 18324 1112 09       		.uleb128 0x9
 18325 1113 D5000000 		.4byte	0xd5
 18326 1117 22110000 		.4byte	0x1122
 18327 111b 0A       		.uleb128 0xa
 18328 111c DC000000 		.4byte	0xdc
 18329 1120 27       		.byte	0x27
 18330 1121 00       		.byte	0
 18331 1122 1E       		.uleb128 0x1e
 18332 1123 01       		.byte	0x1
 18333 1124 E7000000 		.4byte	.LASF236
 18334 1128 01       		.byte	0x1
 18335 1129 B402     		.2byte	0x2b4
 18336 112b 7A000000 		.4byte	0x7a
 18337 112f 00000000 		.4byte	.LFB69
 18338 1133 EC740000 		.4byte	.LFE69
 18339 1137 C2020000 		.4byte	.LLST13
 18340 113b 01       		.byte	0x1
 18341 113c F5140000 		.4byte	0x14f5
 18342 1140 1B       		.uleb128 0x1b
 18343 1141 89050000 		.4byte	.LASF237
 18344 1145 01       		.byte	0x1
 18345 1146 B602     		.2byte	0x2b6
 18346 1148 7A000000 		.4byte	0x7a
 18347 114c 03       		.byte	0x3
 18348 114d 91       		.byte	0x91
 18349 114e 9B7F     		.sleb128 -101
 18350 1150 1B       		.uleb128 0x1b
 18351 1151 CB090000 		.4byte	.LASF26
 18352 1155 01       		.byte	0x1
 18353 1156 B802     		.2byte	0x2b8
 18354 1158 7A000000 		.4byte	0x7a
 18355 115c 03       		.byte	0x3
 18356 115d 91       		.byte	0x91
 18357 115e F37E     		.sleb128 -141
 18358 1160 1B       		.uleb128 0x1b
 18359 1161 A1060000 		.4byte	.LASF238
 18360 1165 01       		.byte	0x1
 18361 1166 B902     		.2byte	0x2b9
 18362 1168 7A000000 		.4byte	0x7a
 18363 116c 03       		.byte	0x3
 18364 116d 91       		.byte	0x91
 18365 116e 9A7F     		.sleb128 -102
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 471


 18366 1170 1B       		.uleb128 0x1b
 18367 1171 F50B0000 		.4byte	.LASF27
 18368 1175 01       		.byte	0x1
 18369 1176 BA02     		.2byte	0x2ba
 18370 1178 BC000000 		.4byte	0xbc
 18371 117c 03       		.byte	0x3
 18372 117d 91       		.byte	0x91
 18373 117e B87F     		.sleb128 -72
 18374 1180 1B       		.uleb128 0x1b
 18375 1181 0B030000 		.4byte	.LASF79
 18376 1185 01       		.byte	0x1
 18377 1186 BB02     		.2byte	0x2bb
 18378 1188 BC000000 		.4byte	0xbc
 18379 118c 03       		.byte	0x3
 18380 118d 91       		.byte	0x91
 18381 118e B47F     		.sleb128 -76
 18382 1190 1B       		.uleb128 0x1b
 18383 1191 14000000 		.4byte	.LASF96
 18384 1195 01       		.byte	0x1
 18385 1196 BC02     		.2byte	0x2bc
 18386 1198 7A000000 		.4byte	0x7a
 18387 119c 03       		.byte	0x3
 18388 119d 91       		.byte	0x91
 18389 119e B37F     		.sleb128 -77
 18390 11a0 1B       		.uleb128 0x1b
 18391 11a1 E7080000 		.4byte	.LASF239
 18392 11a5 01       		.byte	0x1
 18393 11a6 BD02     		.2byte	0x2bd
 18394 11a8 7A000000 		.4byte	0x7a
 18395 11ac 03       		.byte	0x3
 18396 11ad 91       		.byte	0x91
 18397 11ae B27F     		.sleb128 -78
 18398 11b0 1B       		.uleb128 0x1b
 18399 11b1 7C080000 		.4byte	.LASF240
 18400 11b5 01       		.byte	0x1
 18401 11b6 BE02     		.2byte	0x2be
 18402 11b8 7A000000 		.4byte	0x7a
 18403 11bc 03       		.byte	0x3
 18404 11bd 91       		.byte	0x91
 18405 11be B17F     		.sleb128 -79
 18406 11c0 1B       		.uleb128 0x1b
 18407 11c1 9C090000 		.4byte	.LASF241
 18408 11c5 01       		.byte	0x1
 18409 11c6 BF02     		.2byte	0x2bf
 18410 11c8 A6000000 		.4byte	0xa6
 18411 11cc 03       		.byte	0x3
 18412 11cd 91       		.byte	0x91
 18413 11ce AE7F     		.sleb128 -82
 18414 11d0 1D       		.uleb128 0x1d
 18415 11d1 4B7000   		.ascii	"Kp\000"
 18416 11d4 01       		.byte	0x1
 18417 11d5 C102     		.2byte	0x2c1
 18418 11d7 BC000000 		.4byte	0xbc
 18419 11db 03       		.byte	0x3
 18420 11dc 91       		.byte	0x91
 18421 11dd 947F     		.sleb128 -108
 18422 11df 1D       		.uleb128 0x1d
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 472


 18423 11e0 4B6400   		.ascii	"Kd\000"
 18424 11e3 01       		.byte	0x1
 18425 11e4 C202     		.2byte	0x2c2
 18426 11e6 BC000000 		.4byte	0xbc
 18427 11ea 03       		.byte	0x3
 18428 11eb 91       		.byte	0x91
 18429 11ec 907F     		.sleb128 -112
 18430 11ee 1D       		.uleb128 0x1d
 18431 11ef 4B6900   		.ascii	"Ki\000"
 18432 11f2 01       		.byte	0x1
 18433 11f3 C302     		.2byte	0x2c3
 18434 11f5 BC000000 		.4byte	0xbc
 18435 11f9 03       		.byte	0x3
 18436 11fa 91       		.byte	0x91
 18437 11fb 8C7F     		.sleb128 -116
 18438 11fd 1D       		.uleb128 0x1d
 18439 11fe 4B736900 		.ascii	"Ksi\000"
 18440 1202 01       		.byte	0x1
 18441 1203 C402     		.2byte	0x2c4
 18442 1205 BC000000 		.4byte	0xbc
 18443 1209 03       		.byte	0x3
 18444 120a 91       		.byte	0x91
 18445 120b 887F     		.sleb128 -120
 18446 120d 1B       		.uleb128 0x1b
 18447 120e A00B0000 		.4byte	.LASF101
 18448 1212 01       		.byte	0x1
 18449 1213 C502     		.2byte	0x2c5
 18450 1215 7A000000 		.4byte	0x7a
 18451 1219 03       		.byte	0x3
 18452 121a 91       		.byte	0x91
 18453 121b F47E     		.sleb128 -140
 18454 121d 1B       		.uleb128 0x1b
 18455 121e 97070000 		.4byte	.LASF61
 18456 1222 01       		.byte	0x1
 18457 1223 C602     		.2byte	0x2c6
 18458 1225 7A000000 		.4byte	0x7a
 18459 1229 03       		.byte	0x3
 18460 122a 91       		.byte	0x91
 18461 122b F57E     		.sleb128 -139
 18462 122d 1B       		.uleb128 0x1b
 18463 122e 860C0000 		.4byte	.LASF242
 18464 1232 01       		.byte	0x1
 18465 1233 C702     		.2byte	0x2c7
 18466 1235 85000000 		.4byte	0x85
 18467 1239 03       		.byte	0x3
 18468 123a 91       		.byte	0x91
 18469 123b F67E     		.sleb128 -138
 18470 123d 1B       		.uleb128 0x1b
 18471 123e B50E0000 		.4byte	.LASF243
 18472 1242 01       		.byte	0x1
 18473 1243 C802     		.2byte	0x2c8
 18474 1245 BC000000 		.4byte	0xbc
 18475 1249 03       		.byte	0x3
 18476 124a 91       		.byte	0x91
 18477 124b F87E     		.sleb128 -136
 18478 124d 1B       		.uleb128 0x1b
 18479 124e B1000000 		.4byte	.LASF98
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 473


 18480 1252 01       		.byte	0x1
 18481 1253 C902     		.2byte	0x2c9
 18482 1255 BC000000 		.4byte	0xbc
 18483 1259 03       		.byte	0x3
 18484 125a 91       		.byte	0x91
 18485 125b 807F     		.sleb128 -128
 18486 125d 1B       		.uleb128 0x1b
 18487 125e BA080000 		.4byte	.LASF244
 18488 1262 01       		.byte	0x1
 18489 1263 CA02     		.2byte	0x2ca
 18490 1265 BC000000 		.4byte	0xbc
 18491 1269 03       		.byte	0x3
 18492 126a 91       		.byte	0x91
 18493 126b FC7E     		.sleb128 -132
 18494 126d 1B       		.uleb128 0x1b
 18495 126e E00B0000 		.4byte	.LASF100
 18496 1272 01       		.byte	0x1
 18497 1273 CB02     		.2byte	0x2cb
 18498 1275 7A000000 		.4byte	0x7a
 18499 1279 03       		.byte	0x3
 18500 127a 91       		.byte	0x91
 18501 127b 877F     		.sleb128 -121
 18502 127d 1B       		.uleb128 0x1b
 18503 127e 7B0E0000 		.4byte	.LASF92
 18504 1282 01       		.byte	0x1
 18505 1283 CC02     		.2byte	0x2cc
 18506 1285 7A000000 		.4byte	0x7a
 18507 1289 03       		.byte	0x3
 18508 128a 91       		.byte	0x91
 18509 128b AD7F     		.sleb128 -83
 18510 128d 1B       		.uleb128 0x1b
 18511 128e EB060000 		.4byte	.LASF91
 18512 1292 01       		.byte	0x1
 18513 1293 CD02     		.2byte	0x2cd
 18514 1295 7A000000 		.4byte	0x7a
 18515 1299 03       		.byte	0x3
 18516 129a 91       		.byte	0x91
 18517 129b AC7F     		.sleb128 -84
 18518 129d 1B       		.uleb128 0x1b
 18519 129e 610A0000 		.4byte	.LASF245
 18520 12a2 01       		.byte	0x1
 18521 12a3 CE02     		.2byte	0x2ce
 18522 12a5 7A000000 		.4byte	0x7a
 18523 12a9 03       		.byte	0x3
 18524 12aa 91       		.byte	0x91
 18525 12ab AB7F     		.sleb128 -85
 18526 12ad 1B       		.uleb128 0x1b
 18527 12ae 330D0000 		.4byte	.LASF246
 18528 12b2 01       		.byte	0x1
 18529 12b3 CF02     		.2byte	0x2cf
 18530 12b5 7A000000 		.4byte	0x7a
 18531 12b9 03       		.byte	0x3
 18532 12ba 91       		.byte	0x91
 18533 12bb AA7F     		.sleb128 -86
 18534 12bd 1B       		.uleb128 0x1b
 18535 12be 1C0D0000 		.4byte	.LASF247
 18536 12c2 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 474


 18537 12c3 D002     		.2byte	0x2d0
 18538 12c5 7A000000 		.4byte	0x7a
 18539 12c9 03       		.byte	0x3
 18540 12ca 91       		.byte	0x91
 18541 12cb A97F     		.sleb128 -87
 18542 12cd 1B       		.uleb128 0x1b
 18543 12ce F8060000 		.4byte	.LASF248
 18544 12d2 01       		.byte	0x1
 18545 12d3 D102     		.2byte	0x2d1
 18546 12d5 85000000 		.4byte	0x85
 18547 12d9 03       		.byte	0x3
 18548 12da 91       		.byte	0x91
 18549 12db A67F     		.sleb128 -90
 18550 12dd 1B       		.uleb128 0x1b
 18551 12de 7F030000 		.4byte	.LASF249
 18552 12e2 01       		.byte	0x1
 18553 12e3 D202     		.2byte	0x2d2
 18554 12e5 7A000000 		.4byte	0x7a
 18555 12e9 03       		.byte	0x3
 18556 12ea 91       		.byte	0x91
 18557 12eb A57F     		.sleb128 -91
 18558 12ed 1B       		.uleb128 0x1b
 18559 12ee 5B010000 		.4byte	.LASF250
 18560 12f2 01       		.byte	0x1
 18561 12f3 D302     		.2byte	0x2d3
 18562 12f5 BC000000 		.4byte	0xbc
 18563 12f9 02       		.byte	0x2
 18564 12fa 91       		.byte	0x91
 18565 12fb 54       		.sleb128 -44
 18566 12fc 1B       		.uleb128 0x1b
 18567 12fd FA000000 		.4byte	.LASF251
 18568 1301 01       		.byte	0x1
 18569 1302 D402     		.2byte	0x2d4
 18570 1304 BC000000 		.4byte	0xbc
 18571 1308 03       		.byte	0x3
 18572 1309 91       		.byte	0x91
 18573 130a A07F     		.sleb128 -96
 18574 130c 1B       		.uleb128 0x1b
 18575 130d 11020000 		.4byte	.LASF252
 18576 1311 01       		.byte	0x1
 18577 1312 D502     		.2byte	0x2d5
 18578 1314 BC000000 		.4byte	0xbc
 18579 1318 03       		.byte	0x3
 18580 1319 91       		.byte	0x91
 18581 131a 9C7F     		.sleb128 -100
 18582 131c 1B       		.uleb128 0x1b
 18583 131d 020C0000 		.4byte	.LASF253
 18584 1321 01       		.byte	0x1
 18585 1322 D802     		.2byte	0x2d8
 18586 1324 7A000000 		.4byte	0x7a
 18587 1328 03       		.byte	0x3
 18588 1329 91       		.byte	0x91
 18589 132a 997F     		.sleb128 -103
 18590 132c 1D       		.uleb128 0x1d
 18591 132d 69647800 		.ascii	"idx\000"
 18592 1331 01       		.byte	0x1
 18593 1332 D902     		.2byte	0x2d9
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 475


 18594 1334 7A000000 		.4byte	0x7a
 18595 1338 02       		.byte	0x2
 18596 1339 91       		.byte	0x91
 18597 133a 53       		.sleb128 -45
 18598 133b 1B       		.uleb128 0x1b
 18599 133c 9C050000 		.4byte	.LASF254
 18600 1340 01       		.byte	0x1
 18601 1341 DA02     		.2byte	0x2da
 18602 1343 7A000000 		.4byte	0x7a
 18603 1347 02       		.byte	0x2
 18604 1348 91       		.byte	0x91
 18605 1349 52       		.sleb128 -46
 18606 134a 1F       		.uleb128 0x1f
 18607 134b 0D070000 		.4byte	.LASF255
 18608 134f 01       		.byte	0x1
 18609 1350 9512     		.2byte	0x1295
 18610 1352 D4740000 		.4byte	.L131
 18611 1356 1F       		.uleb128 0x1f
 18612 1357 D10E0000 		.4byte	.LASF256
 18613 135b 01       		.byte	0x1
 18614 135c E308     		.2byte	0x8e3
 18615 135e F2300000 		.4byte	.L312
 18616 1362 1F       		.uleb128 0x1f
 18617 1363 710E0000 		.4byte	.LASF257
 18618 1367 01       		.byte	0x1
 18619 1368 480A     		.2byte	0xa48
 18620 136a CA3D0000 		.4byte	.L364
 18621 136e 1F       		.uleb128 0x1f
 18622 136f 49030000 		.4byte	.LASF258
 18623 1373 01       		.byte	0x1
 18624 1374 9E0A     		.2byte	0xa9e
 18625 1376 F23F0000 		.4byte	.L375
 18626 137a 20       		.uleb128 0x20
 18627 137b E4050000 		.4byte	.LBB3
 18628 137f 5E070000 		.4byte	.LBE3
 18629 1383 97130000 		.4byte	0x1397
 18630 1387 1B       		.uleb128 0x1b
 18631 1388 AF0D0000 		.4byte	.LASF259
 18632 138c 01       		.byte	0x1
 18633 138d 1004     		.2byte	0x410
 18634 138f BC000000 		.4byte	0xbc
 18635 1393 02       		.byte	0x2
 18636 1394 91       		.byte	0x91
 18637 1395 4C       		.sleb128 -52
 18638 1396 00       		.byte	0
 18639 1397 20       		.uleb128 0x20
 18640 1398 94070000 		.4byte	.LBB4
 18641 139c 24090000 		.4byte	.LBE4
 18642 13a0 B4130000 		.4byte	0x13b4
 18643 13a4 1B       		.uleb128 0x1b
 18644 13a5 4C090000 		.4byte	.LASF260
 18645 13a9 01       		.byte	0x1
 18646 13aa 3D04     		.2byte	0x43d
 18647 13ac BC000000 		.4byte	0xbc
 18648 13b0 02       		.byte	0x2
 18649 13b1 91       		.byte	0x91
 18650 13b2 48       		.sleb128 -56
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 476


 18651 13b3 00       		.byte	0
 18652 13b4 20       		.uleb128 0x20
 18653 13b5 5A090000 		.4byte	.LBB5
 18654 13b9 CC0B0000 		.4byte	.LBE5
 18655 13bd E0130000 		.4byte	0x13e0
 18656 13c1 1B       		.uleb128 0x1b
 18657 13c2 AF0D0000 		.4byte	.LASF259
 18658 13c6 01       		.byte	0x1
 18659 13c7 6A04     		.2byte	0x46a
 18660 13c9 BC000000 		.4byte	0xbc
 18661 13cd 02       		.byte	0x2
 18662 13ce 91       		.byte	0x91
 18663 13cf 44       		.sleb128 -60
 18664 13d0 1B       		.uleb128 0x1b
 18665 13d1 4C090000 		.4byte	.LASF260
 18666 13d5 01       		.byte	0x1
 18667 13d6 6B04     		.2byte	0x46b
 18668 13d8 BC000000 		.4byte	0xbc
 18669 13dc 02       		.byte	0x2
 18670 13dd 91       		.byte	0x91
 18671 13de 40       		.sleb128 -64
 18672 13df 00       		.byte	0
 18673 13e0 20       		.uleb128 0x20
 18674 13e1 58260000 		.4byte	.LBB6
 18675 13e5 34270000 		.4byte	.LBE6
 18676 13e9 4E140000 		.4byte	0x144e
 18677 13ed 1B       		.uleb128 0x1b
 18678 13ee 83010000 		.4byte	.LASF261
 18679 13f2 01       		.byte	0x1
 18680 13f3 5C07     		.2byte	0x75c
 18681 13f5 BC000000 		.4byte	0xbc
 18682 13f9 03       		.byte	0x3
 18683 13fa 91       		.byte	0x91
 18684 13fb D47E     		.sleb128 -172
 18685 13fd 1B       		.uleb128 0x1b
 18686 13fe CB050000 		.4byte	.LASF262
 18687 1402 01       		.byte	0x1
 18688 1403 5D07     		.2byte	0x75d
 18689 1405 BC000000 		.4byte	0xbc
 18690 1409 03       		.byte	0x3
 18691 140a 91       		.byte	0x91
 18692 140b D07E     		.sleb128 -176
 18693 140d 1B       		.uleb128 0x1b
 18694 140e 460B0000 		.4byte	.LASF263
 18695 1412 01       		.byte	0x1
 18696 1413 5E07     		.2byte	0x75e
 18697 1415 BC000000 		.4byte	0xbc
 18698 1419 03       		.byte	0x3
 18699 141a 91       		.byte	0x91
 18700 141b CC7E     		.sleb128 -180
 18701 141d 1B       		.uleb128 0x1b
 18702 141e FA0B0000 		.4byte	.LASF264
 18703 1422 01       		.byte	0x1
 18704 1423 5F07     		.2byte	0x75f
 18705 1425 BC000000 		.4byte	0xbc
 18706 1429 03       		.byte	0x3
 18707 142a 91       		.byte	0x91
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 477


 18708 142b C87E     		.sleb128 -184
 18709 142d 1B       		.uleb128 0x1b
 18710 142e DD080000 		.4byte	.LASF265
 18711 1432 01       		.byte	0x1
 18712 1433 6007     		.2byte	0x760
 18713 1435 BC000000 		.4byte	0xbc
 18714 1439 03       		.byte	0x3
 18715 143a 91       		.byte	0x91
 18716 143b C47E     		.sleb128 -188
 18717 143d 1B       		.uleb128 0x1b
 18718 143e 050E0000 		.4byte	.LASF266
 18719 1442 01       		.byte	0x1
 18720 1443 6107     		.2byte	0x761
 18721 1445 BC000000 		.4byte	0xbc
 18722 1449 03       		.byte	0x3
 18723 144a 91       		.byte	0x91
 18724 144b C07E     		.sleb128 -192
 18725 144d 00       		.byte	0
 18726 144e 20       		.uleb128 0x20
 18727 144f B4270000 		.4byte	.LBB7
 18728 1453 90280000 		.4byte	.LBE7
 18729 1457 BC140000 		.4byte	0x14bc
 18730 145b 1B       		.uleb128 0x1b
 18731 145c 83010000 		.4byte	.LASF261
 18732 1460 01       		.byte	0x1
 18733 1461 8407     		.2byte	0x784
 18734 1463 BC000000 		.4byte	0xbc
 18735 1467 03       		.byte	0x3
 18736 1468 91       		.byte	0x91
 18737 1469 EC7E     		.sleb128 -148
 18738 146b 1B       		.uleb128 0x1b
 18739 146c CB050000 		.4byte	.LASF262
 18740 1470 01       		.byte	0x1
 18741 1471 8507     		.2byte	0x785
 18742 1473 BC000000 		.4byte	0xbc
 18743 1477 03       		.byte	0x3
 18744 1478 91       		.byte	0x91
 18745 1479 E87E     		.sleb128 -152
 18746 147b 1B       		.uleb128 0x1b
 18747 147c 460B0000 		.4byte	.LASF263
 18748 1480 01       		.byte	0x1
 18749 1481 8607     		.2byte	0x786
 18750 1483 BC000000 		.4byte	0xbc
 18751 1487 03       		.byte	0x3
 18752 1488 91       		.byte	0x91
 18753 1489 E47E     		.sleb128 -156
 18754 148b 1B       		.uleb128 0x1b
 18755 148c FA0B0000 		.4byte	.LASF264
 18756 1490 01       		.byte	0x1
 18757 1491 8707     		.2byte	0x787
 18758 1493 BC000000 		.4byte	0xbc
 18759 1497 03       		.byte	0x3
 18760 1498 91       		.byte	0x91
 18761 1499 E07E     		.sleb128 -160
 18762 149b 1B       		.uleb128 0x1b
 18763 149c DD080000 		.4byte	.LASF265
 18764 14a0 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 478


 18765 14a1 8807     		.2byte	0x788
 18766 14a3 BC000000 		.4byte	0xbc
 18767 14a7 03       		.byte	0x3
 18768 14a8 91       		.byte	0x91
 18769 14a9 DC7E     		.sleb128 -164
 18770 14ab 1B       		.uleb128 0x1b
 18771 14ac 050E0000 		.4byte	.LASF266
 18772 14b0 01       		.byte	0x1
 18773 14b1 8907     		.2byte	0x789
 18774 14b3 BC000000 		.4byte	0xbc
 18775 14b7 03       		.byte	0x3
 18776 14b8 91       		.byte	0x91
 18777 14b9 D87E     		.sleb128 -168
 18778 14bb 00       		.byte	0
 18779 14bc 20       		.uleb128 0x20
 18780 14bd F0310000 		.4byte	.LBB8
 18781 14c1 7A320000 		.4byte	.LBE8
 18782 14c5 DA140000 		.4byte	0x14da
 18783 14c9 1B       		.uleb128 0x1b
 18784 14ca 88030000 		.4byte	.LASF267
 18785 14ce 01       		.byte	0x1
 18786 14cf 3609     		.2byte	0x936
 18787 14d1 9B000000 		.4byte	0x9b
 18788 14d5 03       		.byte	0x3
 18789 14d6 91       		.byte	0x91
 18790 14d7 BF7F     		.sleb128 -65
 18791 14d9 00       		.byte	0
 18792 14da 1C       		.uleb128 0x1c
 18793 14db DA4C0000 		.4byte	.LBB9
 18794 14df 964D0000 		.4byte	.LBE9
 18795 14e3 1B       		.uleb128 0x1b
 18796 14e4 540F0000 		.4byte	.LASF268
 18797 14e8 01       		.byte	0x1
 18798 14e9 0C0C     		.2byte	0xc0c
 18799 14eb 7A000000 		.4byte	0x7a
 18800 14ef 03       		.byte	0x3
 18801 14f0 91       		.byte	0x91
 18802 14f1 BE7F     		.sleb128 -66
 18803 14f3 00       		.byte	0
 18804 14f4 00       		.byte	0
 18805 14f5 21       		.uleb128 0x21
 18806 14f6 01       		.byte	0x1
 18807 14f7 8D010000 		.4byte	.LASF271
 18808 14fb 01       		.byte	0x1
 18809 14fc 9C12     		.2byte	0x129c
 18810 14fe 01       		.byte	0x1
 18811 14ff 7A000000 		.4byte	0x7a
 18812 1503 00000000 		.4byte	.LFB70
 18813 1507 1C000000 		.4byte	.LFE70
 18814 150b FC020000 		.4byte	.LLST14
 18815 150f 01       		.byte	0x1
 18816 1510 1A       		.uleb128 0x1a
 18817 1511 01       		.byte	0x1
 18818 1512 F2050000 		.4byte	.LASF269
 18819 1516 01       		.byte	0x1
 18820 1517 AC12     		.2byte	0x12ac
 18821 1519 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 479


 18822 151a 7A000000 		.4byte	0x7a
 18823 151e 00000000 		.4byte	.LFB71
 18824 1522 68000000 		.4byte	.LFE71
 18825 1526 28030000 		.4byte	.LLST15
 18826 152a 01       		.byte	0x1
 18827 152b 67150000 		.4byte	0x1567
 18828 152f 19       		.uleb128 0x19
 18829 1530 17080000 		.4byte	.LASF225
 18830 1534 01       		.byte	0x1
 18831 1535 AC12     		.2byte	0x12ac
 18832 1537 7A000000 		.4byte	0x7a
 18833 153b 02       		.byte	0x2
 18834 153c 91       		.byte	0x91
 18835 153d 6F       		.sleb128 -17
 18836 153e 1B       		.uleb128 0x1b
 18837 153f 3D060000 		.4byte	.LASF228
 18838 1543 01       		.byte	0x1
 18839 1544 AE12     		.2byte	0x12ae
 18840 1546 D5000000 		.4byte	0xd5
 18841 154a 02       		.byte	0x2
 18842 154b 91       		.byte	0x91
 18843 154c 77       		.sleb128 -9
 18844 154d 1C       		.uleb128 0x1c
 18845 154e 26000000 		.4byte	.LBB10
 18846 1552 50000000 		.4byte	.LBE10
 18847 1556 1D       		.uleb128 0x1d
 18848 1557 5F5F7800 		.ascii	"__x\000"
 18849 155b 01       		.byte	0x1
 18850 155c C612     		.2byte	0x12c6
 18851 155e 6C000000 		.4byte	0x6c
 18852 1562 02       		.byte	0x2
 18853 1563 91       		.byte	0x91
 18854 1564 70       		.sleb128 -16
 18855 1565 00       		.byte	0
 18856 1566 00       		.byte	0
 18857 1567 22       		.uleb128 0x22
 18858 1568 01       		.byte	0x1
 18859 1569 A5040000 		.4byte	.LASF270
 18860 156d 01       		.byte	0x1
 18861 156e D212     		.2byte	0x12d2
 18862 1570 01       		.byte	0x1
 18863 1571 00000000 		.4byte	.LFB72
 18864 1575 3A000000 		.4byte	.LFE72
 18865 1579 60030000 		.4byte	.LLST16
 18866 157d 01       		.byte	0x1
 18867 157e A1150000 		.4byte	0x15a1
 18868 1582 23       		.uleb128 0x23
 18869 1583 73747200 		.ascii	"str\000"
 18870 1587 01       		.byte	0x1
 18871 1588 D212     		.2byte	0x12d2
 18872 158a E3000000 		.4byte	0xe3
 18873 158e 02       		.byte	0x2
 18874 158f 91       		.byte	0x91
 18875 1590 6C       		.sleb128 -20
 18876 1591 1D       		.uleb128 0x1d
 18877 1592 69647800 		.ascii	"idx\000"
 18878 1596 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 480


 18879 1597 D412     		.2byte	0x12d4
 18880 1599 7A000000 		.4byte	0x7a
 18881 159d 02       		.byte	0x2
 18882 159e 91       		.byte	0x91
 18883 159f 77       		.sleb128 -9
 18884 15a0 00       		.byte	0
 18885 15a1 24       		.uleb128 0x24
 18886 15a2 01       		.byte	0x1
 18887 15a3 2C0C0000 		.4byte	.LASF272
 18888 15a7 01       		.byte	0x1
 18889 15a8 DC12     		.2byte	0x12dc
 18890 15aa 01       		.byte	0x1
 18891 15ab 7A000000 		.4byte	0x7a
 18892 15af 00000000 		.4byte	.LFB73
 18893 15b3 10000000 		.4byte	.LFE73
 18894 15b7 98030000 		.4byte	.LLST17
 18895 15bb 01       		.byte	0x1
 18896 15bc 21       		.uleb128 0x21
 18897 15bd 01       		.byte	0x1
 18898 15be B0070000 		.4byte	.LASF273
 18899 15c2 01       		.byte	0x1
 18900 15c3 E512     		.2byte	0x12e5
 18901 15c5 01       		.byte	0x1
 18902 15c6 B1000000 		.4byte	0xb1
 18903 15ca 00000000 		.4byte	.LFB74
 18904 15ce 54010000 		.4byte	.LFE74
 18905 15d2 C4030000 		.4byte	.LLST18
 18906 15d6 01       		.byte	0x1
 18907 15d7 25       		.uleb128 0x25
 18908 15d8 F4090000 		.4byte	.LASF274
 18909 15dc 0A       		.byte	0xa
 18910 15dd 2D       		.byte	0x2d
 18911 15de E9000000 		.4byte	0xe9
 18912 15e2 01       		.byte	0x1
 18913 15e3 01       		.byte	0x1
 18914 15e4 26       		.uleb128 0x26
 18915 15e5 9F080000 		.4byte	.LASF275
 18916 15e9 0B       		.byte	0xb
 18917 15ea 1606     		.2byte	0x616
 18918 15ec F2150000 		.4byte	0x15f2
 18919 15f0 01       		.byte	0x1
 18920 15f1 01       		.byte	0x1
 18921 15f2 27       		.uleb128 0x27
 18922 15f3 45000000 		.4byte	0x45
 18923 15f7 09       		.uleb128 0x9
 18924 15f8 D5000000 		.4byte	0xd5
 18925 15fc 02160000 		.4byte	0x1602
 18926 1600 28       		.uleb128 0x28
 18927 1601 00       		.byte	0
 18928 1602 25       		.uleb128 0x25
 18929 1603 06070000 		.4byte	.LASF276
 18930 1607 0C       		.byte	0xc
 18931 1608 1D       		.byte	0x1d
 18932 1609 0F160000 		.4byte	0x160f
 18933 160d 01       		.byte	0x1
 18934 160e 01       		.byte	0x1
 18935 160f 06       		.uleb128 0x6
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 481


 18936 1610 F7150000 		.4byte	0x15f7
 18937 1614 25       		.uleb128 0x25
 18938 1615 48010000 		.4byte	.LASF277
 18939 1619 0C       		.byte	0xc
 18940 161a 22       		.byte	0x22
 18941 161b 21160000 		.4byte	0x1621
 18942 161f 01       		.byte	0x1
 18943 1620 01       		.byte	0x1
 18944 1621 06       		.uleb128 0x6
 18945 1622 F7150000 		.4byte	0x15f7
 18946 1626 29       		.uleb128 0x29
 18947 1627 B4020000 		.4byte	.LASF208
 18948 162b 09       		.byte	0x9
 18949 162c 97       		.byte	0x97
 18950 162d 450E0000 		.4byte	0xe45
 18951 1631 01       		.byte	0x1
 18952 1632 05       		.byte	0x5
 18953 1633 03       		.byte	0x3
 18954 1634 00000000 		.4byte	TORQUESTAT
 18955 1638 25       		.uleb128 0x25
 18956 1639 05020000 		.4byte	.LASF278
 18957 163d 01       		.byte	0x1
 18958 163e 29       		.byte	0x29
 18959 163f 39010000 		.4byte	0x139
 18960 1643 01       		.byte	0x1
 18961 1644 01       		.byte	0x1
 18962 1645 09       		.uleb128 0x9
 18963 1646 A6000000 		.4byte	0xa6
 18964 164a 55160000 		.4byte	0x1655
 18965 164e 0A       		.uleb128 0xa
 18966 164f DC000000 		.4byte	0xdc
 18967 1653 08       		.byte	0x8
 18968 1654 00       		.byte	0
 18969 1655 25       		.uleb128 0x25
 18970 1656 85080000 		.4byte	.LASF279
 18971 165a 01       		.byte	0x1
 18972 165b 2A       		.byte	0x2a
 18973 165c 45160000 		.4byte	0x1645
 18974 1660 01       		.byte	0x1
 18975 1661 01       		.byte	0x1
 18976 1662 25       		.uleb128 0x25
 18977 1663 1A020000 		.4byte	.LASF280
 18978 1667 01       		.byte	0x1
 18979 1668 2C       		.byte	0x2c
 18980 1669 7A000000 		.4byte	0x7a
 18981 166d 01       		.byte	0x1
 18982 166e 01       		.byte	0x1
 18983 166f 25       		.uleb128 0x25
 18984 1670 A4030000 		.4byte	.LASF281
 18985 1674 01       		.byte	0x1
 18986 1675 30       		.byte	0x30
 18987 1676 BF010000 		.4byte	0x1bf
 18988 167a 01       		.byte	0x1
 18989 167b 01       		.byte	0x1
 18990 167c 25       		.uleb128 0x25
 18991 167d 5D0F0000 		.4byte	.LASF282
 18992 1681 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 482


 18993 1682 33       		.byte	0x33
 18994 1683 D00C0000 		.4byte	0xcd0
 18995 1687 01       		.byte	0x1
 18996 1688 01       		.byte	0x1
 18997 1689 25       		.uleb128 0x25
 18998 168a 480D0000 		.4byte	.LASF283
 18999 168e 01       		.byte	0x1
 19000 168f 36       		.byte	0x36
 19001 1690 BC000000 		.4byte	0xbc
 19002 1694 01       		.byte	0x1
 19003 1695 01       		.byte	0x1
 19004 1696 25       		.uleb128 0x25
 19005 1697 AA090000 		.4byte	.LASF284
 19006 169b 01       		.byte	0x1
 19007 169c 3A       		.byte	0x3a
 19008 169d 31080000 		.4byte	0x831
 19009 16a1 01       		.byte	0x1
 19010 16a2 01       		.byte	0x1
 19011 16a3 25       		.uleb128 0x25
 19012 16a4 0A0B0000 		.4byte	.LASF285
 19013 16a8 01       		.byte	0x1
 19014 16a9 3B       		.byte	0x3b
 19015 16aa 31080000 		.4byte	0x831
 19016 16ae 01       		.byte	0x1
 19017 16af 01       		.byte	0x1
 19018 16b0 25       		.uleb128 0x25
 19019 16b1 CE020000 		.4byte	.LASF286
 19020 16b5 01       		.byte	0x1
 19021 16b6 3C       		.byte	0x3c
 19022 16b7 350F0000 		.4byte	0xf35
 19023 16bb 01       		.byte	0x1
 19024 16bc 01       		.byte	0x1
 19025 16bd 25       		.uleb128 0x25
 19026 16be F1080000 		.4byte	.LASF287
 19027 16c2 01       		.byte	0x1
 19028 16c3 3F       		.byte	0x3f
 19029 16c4 2D040000 		.4byte	0x42d
 19030 16c8 01       		.byte	0x1
 19031 16c9 01       		.byte	0x1
 19032 16ca 25       		.uleb128 0x25
 19033 16cb BD0D0000 		.4byte	.LASF288
 19034 16cf 01       		.byte	0x1
 19035 16d0 40       		.byte	0x40
 19036 16d1 2D040000 		.4byte	0x42d
 19037 16d5 01       		.byte	0x1
 19038 16d6 01       		.byte	0x1
 19039 16d7 25       		.uleb128 0x25
 19040 16d8 F10A0000 		.4byte	.LASF289
 19041 16dc 01       		.byte	0x1
 19042 16dd 43       		.byte	0x43
 19043 16de 3F0D0000 		.4byte	0xd3f
 19044 16e2 01       		.byte	0x1
 19045 16e3 01       		.byte	0x1
 19046 16e4 25       		.uleb128 0x25
 19047 16e5 F50E0000 		.4byte	.LASF290
 19048 16e9 01       		.byte	0x1
 19049 16ea 44       		.byte	0x44
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 483


 19050 16eb 3F0D0000 		.4byte	0xd3f
 19051 16ef 01       		.byte	0x1
 19052 16f0 01       		.byte	0x1
 19053 16f1 25       		.uleb128 0x25
 19054 16f2 4A050000 		.4byte	.LASF291
 19055 16f6 01       		.byte	0x1
 19056 16f7 47       		.byte	0x47
 19057 16f8 3F0D0000 		.4byte	0xd3f
 19058 16fc 01       		.byte	0x1
 19059 16fd 01       		.byte	0x1
 19060 16fe 25       		.uleb128 0x25
 19061 16ff 23080000 		.4byte	.LASF292
 19062 1703 01       		.byte	0x1
 19063 1704 48       		.byte	0x48
 19064 1705 3F0D0000 		.4byte	0xd3f
 19065 1709 01       		.byte	0x1
 19066 170a 01       		.byte	0x1
 19067 170b 25       		.uleb128 0x25
 19068 170c 0F060000 		.4byte	.LASF293
 19069 1710 01       		.byte	0x1
 19070 1711 49       		.byte	0x49
 19071 1712 3F0D0000 		.4byte	0xd3f
 19072 1716 01       		.byte	0x1
 19073 1717 01       		.byte	0x1
 19074 1718 25       		.uleb128 0x25
 19075 1719 F4010000 		.4byte	.LASF294
 19076 171d 01       		.byte	0x1
 19077 171e 4A       		.byte	0x4a
 19078 171f 3F0D0000 		.4byte	0xd3f
 19079 1723 01       		.byte	0x1
 19080 1724 01       		.byte	0x1
 19081 1725 25       		.uleb128 0x25
 19082 1726 95040000 		.4byte	.LASF295
 19083 172a 01       		.byte	0x1
 19084 172b 4D       		.byte	0x4d
 19085 172c 450E0000 		.4byte	0xe45
 19086 1730 01       		.byte	0x1
 19087 1731 01       		.byte	0x1
 19088 1732 25       		.uleb128 0x25
 19089 1733 E3090000 		.4byte	.LASF296
 19090 1737 01       		.byte	0x1
 19091 1738 4E       		.byte	0x4e
 19092 1739 450E0000 		.4byte	0xe45
 19093 173d 01       		.byte	0x1
 19094 173e 01       		.byte	0x1
 19095 173f 09       		.uleb128 0x9
 19096 1740 7B0B0000 		.4byte	0xb7b
 19097 1744 4F170000 		.4byte	0x174f
 19098 1748 0A       		.uleb128 0xa
 19099 1749 DC000000 		.4byte	0xdc
 19100 174d 06       		.byte	0x6
 19101 174e 00       		.byte	0
 19102 174f 25       		.uleb128 0x25
 19103 1750 B6000000 		.4byte	.LASF297
 19104 1754 01       		.byte	0x1
 19105 1755 51       		.byte	0x51
 19106 1756 3F170000 		.4byte	0x173f
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 484


 19107 175a 01       		.byte	0x1
 19108 175b 01       		.byte	0x1
 19109 175c 25       		.uleb128 0x25
 19110 175d D2060000 		.4byte	.LASF298
 19111 1761 01       		.byte	0x1
 19112 1762 55       		.byte	0x55
 19113 1763 0D0C0000 		.4byte	0xc0d
 19114 1767 01       		.byte	0x1
 19115 1768 01       		.byte	0x1
 19116 1769 25       		.uleb128 0x25
 19117 176a 00000000 		.4byte	.LASF299
 19118 176e 01       		.byte	0x1
 19119 176f 56       		.byte	0x56
 19120 1770 0D0C0000 		.4byte	0xc0d
 19121 1774 01       		.byte	0x1
 19122 1775 01       		.byte	0x1
 19123 1776 09       		.uleb128 0x9
 19124 1777 8C0C0000 		.4byte	0xc8c
 19125 177b 86170000 		.4byte	0x1786
 19126 177f 0A       		.uleb128 0xa
 19127 1780 DC000000 		.4byte	0xdc
 19128 1784 20       		.byte	0x20
 19129 1785 00       		.byte	0
 19130 1786 2A       		.uleb128 0x2a
 19131 1787 7100     		.ascii	"q\000"
 19132 1789 01       		.byte	0x1
 19133 178a 59       		.byte	0x59
 19134 178b 76170000 		.4byte	0x1776
 19135 178f 01       		.byte	0x1
 19136 1790 01       		.byte	0x1
 19137 1791 09       		.uleb128 0x9
 19138 1792 7A000000 		.4byte	0x7a
 19139 1796 A1170000 		.4byte	0x17a1
 19140 179a 0A       		.uleb128 0xa
 19141 179b DC000000 		.4byte	0xdc
 19142 179f 63       		.byte	0x63
 19143 17a0 00       		.byte	0
 19144 17a1 25       		.uleb128 0x25
 19145 17a2 1C0E0000 		.4byte	.LASF300
 19146 17a6 01       		.byte	0x1
 19147 17a7 5C       		.byte	0x5c
 19148 17a8 91170000 		.4byte	0x1791
 19149 17ac 01       		.byte	0x1
 19150 17ad 01       		.byte	0x1
 19151 17ae 25       		.uleb128 0x25
 19152 17af 570B0000 		.4byte	.LASF301
 19153 17b3 01       		.byte	0x1
 19154 17b4 5D       		.byte	0x5d
 19155 17b5 91170000 		.4byte	0x1791
 19156 17b9 01       		.byte	0x1
 19157 17ba 01       		.byte	0x1
 19158 17bb 25       		.uleb128 0x25
 19159 17bc 81040000 		.4byte	.LASF302
 19160 17c0 01       		.byte	0x1
 19161 17c1 60       		.byte	0x60
 19162 17c2 91170000 		.4byte	0x1791
 19163 17c6 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 485


 19164 17c7 01       		.byte	0x1
 19165 17c8 25       		.uleb128 0x25
 19166 17c9 330F0000 		.4byte	.LASF303
 19167 17cd 01       		.byte	0x1
 19168 17ce 63       		.byte	0x63
 19169 17cf 0E090000 		.4byte	0x90e
 19170 17d3 01       		.byte	0x1
 19171 17d4 01       		.byte	0x1
 19172 17d5 25       		.uleb128 0x25
 19173 17d6 35020000 		.4byte	.LASF304
 19174 17da 01       		.byte	0x1
 19175 17db 6B       		.byte	0x6b
 19176 17dc 48050000 		.4byte	0x548
 19177 17e0 01       		.byte	0x1
 19178 17e1 01       		.byte	0x1
 19179 17e2 25       		.uleb128 0x25
 19180 17e3 480E0000 		.4byte	.LASF305
 19181 17e7 01       		.byte	0x1
 19182 17e8 8A       		.byte	0x8a
 19183 17e9 E7020000 		.4byte	0x2e7
 19184 17ed 01       		.byte	0x1
 19185 17ee 01       		.byte	0x1
 19186 17ef 25       		.uleb128 0x25
 19187 17f0 56080000 		.4byte	.LASF306
 19188 17f4 01       		.byte	0x1
 19189 17f5 98       		.byte	0x98
 19190 17f6 B1000000 		.4byte	0xb1
 19191 17fa 01       		.byte	0x1
 19192 17fb 01       		.byte	0x1
 19193 17fc 25       		.uleb128 0x25
 19194 17fd 1C050000 		.4byte	.LASF307
 19195 1801 01       		.byte	0x1
 19196 1802 9B       		.byte	0x9b
 19197 1803 85000000 		.4byte	0x85
 19198 1807 01       		.byte	0x1
 19199 1808 01       		.byte	0x1
 19200 1809 25       		.uleb128 0x25
 19201 180a 160A0000 		.4byte	.LASF308
 19202 180e 01       		.byte	0x1
 19203 180f 9C       		.byte	0x9c
 19204 1810 85000000 		.4byte	0x85
 19205 1814 01       		.byte	0x1
 19206 1815 01       		.byte	0x1
 19207 1816 09       		.uleb128 0x9
 19208 1817 7A000000 		.4byte	0x7a
 19209 181b 27180000 		.4byte	0x1827
 19210 181f 2B       		.uleb128 0x2b
 19211 1820 DC000000 		.4byte	0xdc
 19212 1824 040D     		.2byte	0xd04
 19213 1826 00       		.byte	0
 19214 1827 25       		.uleb128 0x25
 19215 1828 2B040000 		.4byte	.LASF309
 19216 182c 01       		.byte	0x1
 19217 182d A7       		.byte	0xa7
 19218 182e 34180000 		.4byte	0x1834
 19219 1832 01       		.byte	0x1
 19220 1833 01       		.byte	0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 486


 19221 1834 06       		.uleb128 0x6
 19222 1835 16180000 		.4byte	0x1816
 19223 1839 25       		.uleb128 0x25
 19224 183a 16090000 		.4byte	.LASF310
 19225 183e 01       		.byte	0x1
 19226 183f A8       		.byte	0xa8
 19227 1840 46180000 		.4byte	0x1846
 19228 1844 01       		.byte	0x1
 19229 1845 01       		.byte	0x1
 19230 1846 06       		.uleb128 0x6
 19231 1847 16180000 		.4byte	0x1816
 19232 184b 29       		.uleb128 0x29
 19233 184c C0010000 		.4byte	.LASF311
 19234 1850 01       		.byte	0x1
 19235 1851 AB       		.byte	0xab
 19236 1852 12110000 		.4byte	0x1112
 19237 1856 01       		.byte	0x1
 19238 1857 05       		.byte	0x5
 19239 1858 03       		.byte	0x3
 19240 1859 00000000 		.4byte	userInputBuffer
 19241 185d 29       		.uleb128 0x29
 19242 185e CE070000 		.4byte	.LASF312
 19243 1862 01       		.byte	0x1
 19244 1863 AC       		.byte	0xac
 19245 1864 49090000 		.4byte	0x949
 19246 1868 01       		.byte	0x1
 19247 1869 05       		.byte	0x5
 19248 186a 03       		.byte	0x3
 19249 186b 00000000 		.4byte	actual_cmd
 19250 186f 29       		.uleb128 0x29
 19251 1870 D4090000 		.4byte	.LASF313
 19252 1874 01       		.byte	0x1
 19253 1875 AD       		.byte	0xad
 19254 1876 7A000000 		.4byte	0x7a
 19255 187a 01       		.byte	0x1
 19256 187b 05       		.byte	0x5
 19257 187c 03       		.byte	0x3
 19258 187d 00000000 		.4byte	USB_Check_prev
 19259 1881 29       		.uleb128 0x29
 19260 1882 640C0000 		.4byte	.LASF314
 19261 1886 01       		.byte	0x1
 19262 1887 AE       		.byte	0xae
 19263 1888 8E090000 		.4byte	0x98e
 19264 188c 01       		.byte	0x1
 19265 188d 05       		.byte	0x5
 19266 188e 03       		.byte	0x3
 19267 188f 00000000 		.4byte	slegenda
 19268 1893 00       		.byte	0
 19269              		.section	.debug_abbrev,"",%progbits
 19270              	.Ldebug_abbrev0:
 19271 0000 01       		.uleb128 0x1
 19272 0001 11       		.uleb128 0x11
 19273 0002 01       		.byte	0x1
 19274 0003 25       		.uleb128 0x25
 19275 0004 0E       		.uleb128 0xe
 19276 0005 13       		.uleb128 0x13
 19277 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 487


 19278 0007 03       		.uleb128 0x3
 19279 0008 0E       		.uleb128 0xe
 19280 0009 1B       		.uleb128 0x1b
 19281 000a 0E       		.uleb128 0xe
 19282 000b 55       		.uleb128 0x55
 19283 000c 06       		.uleb128 0x6
 19284 000d 11       		.uleb128 0x11
 19285 000e 01       		.uleb128 0x1
 19286 000f 52       		.uleb128 0x52
 19287 0010 01       		.uleb128 0x1
 19288 0011 10       		.uleb128 0x10
 19289 0012 06       		.uleb128 0x6
 19290 0013 00       		.byte	0
 19291 0014 00       		.byte	0
 19292 0015 02       		.uleb128 0x2
 19293 0016 24       		.uleb128 0x24
 19294 0017 00       		.byte	0
 19295 0018 0B       		.uleb128 0xb
 19296 0019 0B       		.uleb128 0xb
 19297 001a 3E       		.uleb128 0x3e
 19298 001b 0B       		.uleb128 0xb
 19299 001c 03       		.uleb128 0x3
 19300 001d 0E       		.uleb128 0xe
 19301 001e 00       		.byte	0
 19302 001f 00       		.byte	0
 19303 0020 03       		.uleb128 0x3
 19304 0021 16       		.uleb128 0x16
 19305 0022 00       		.byte	0
 19306 0023 03       		.uleb128 0x3
 19307 0024 0E       		.uleb128 0xe
 19308 0025 3A       		.uleb128 0x3a
 19309 0026 0B       		.uleb128 0xb
 19310 0027 3B       		.uleb128 0x3b
 19311 0028 0B       		.uleb128 0xb
 19312 0029 49       		.uleb128 0x49
 19313 002a 13       		.uleb128 0x13
 19314 002b 00       		.byte	0
 19315 002c 00       		.byte	0
 19316 002d 04       		.uleb128 0x4
 19317 002e 24       		.uleb128 0x24
 19318 002f 00       		.byte	0
 19319 0030 0B       		.uleb128 0xb
 19320 0031 0B       		.uleb128 0xb
 19321 0032 3E       		.uleb128 0x3e
 19322 0033 0B       		.uleb128 0xb
 19323 0034 03       		.uleb128 0x3
 19324 0035 08       		.uleb128 0x8
 19325 0036 00       		.byte	0
 19326 0037 00       		.byte	0
 19327 0038 05       		.uleb128 0x5
 19328 0039 0F       		.uleb128 0xf
 19329 003a 00       		.byte	0
 19330 003b 0B       		.uleb128 0xb
 19331 003c 0B       		.uleb128 0xb
 19332 003d 49       		.uleb128 0x49
 19333 003e 13       		.uleb128 0x13
 19334 003f 00       		.byte	0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 488


 19335 0040 00       		.byte	0
 19336 0041 06       		.uleb128 0x6
 19337 0042 26       		.uleb128 0x26
 19338 0043 00       		.byte	0
 19339 0044 49       		.uleb128 0x49
 19340 0045 13       		.uleb128 0x13
 19341 0046 00       		.byte	0
 19342 0047 00       		.byte	0
 19343 0048 07       		.uleb128 0x7
 19344 0049 17       		.uleb128 0x17
 19345 004a 01       		.byte	0x1
 19346 004b 0B       		.uleb128 0xb
 19347 004c 0B       		.uleb128 0xb
 19348 004d 3A       		.uleb128 0x3a
 19349 004e 0B       		.uleb128 0xb
 19350 004f 3B       		.uleb128 0x3b
 19351 0050 05       		.uleb128 0x5
 19352 0051 01       		.uleb128 0x1
 19353 0052 13       		.uleb128 0x13
 19354 0053 00       		.byte	0
 19355 0054 00       		.byte	0
 19356 0055 08       		.uleb128 0x8
 19357 0056 0D       		.uleb128 0xd
 19358 0057 00       		.byte	0
 19359 0058 03       		.uleb128 0x3
 19360 0059 0E       		.uleb128 0xe
 19361 005a 3A       		.uleb128 0x3a
 19362 005b 0B       		.uleb128 0xb
 19363 005c 3B       		.uleb128 0x3b
 19364 005d 05       		.uleb128 0x5
 19365 005e 49       		.uleb128 0x49
 19366 005f 13       		.uleb128 0x13
 19367 0060 00       		.byte	0
 19368 0061 00       		.byte	0
 19369 0062 09       		.uleb128 0x9
 19370 0063 01       		.uleb128 0x1
 19371 0064 01       		.byte	0x1
 19372 0065 49       		.uleb128 0x49
 19373 0066 13       		.uleb128 0x13
 19374 0067 01       		.uleb128 0x1
 19375 0068 13       		.uleb128 0x13
 19376 0069 00       		.byte	0
 19377 006a 00       		.byte	0
 19378 006b 0A       		.uleb128 0xa
 19379 006c 21       		.uleb128 0x21
 19380 006d 00       		.byte	0
 19381 006e 49       		.uleb128 0x49
 19382 006f 13       		.uleb128 0x13
 19383 0070 2F       		.uleb128 0x2f
 19384 0071 0B       		.uleb128 0xb
 19385 0072 00       		.byte	0
 19386 0073 00       		.byte	0
 19387 0074 0B       		.uleb128 0xb
 19388 0075 16       		.uleb128 0x16
 19389 0076 00       		.byte	0
 19390 0077 03       		.uleb128 0x3
 19391 0078 0E       		.uleb128 0xe
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 489


 19392 0079 3A       		.uleb128 0x3a
 19393 007a 0B       		.uleb128 0xb
 19394 007b 3B       		.uleb128 0x3b
 19395 007c 05       		.uleb128 0x5
 19396 007d 49       		.uleb128 0x49
 19397 007e 13       		.uleb128 0x13
 19398 007f 00       		.byte	0
 19399 0080 00       		.byte	0
 19400 0081 0C       		.uleb128 0xc
 19401 0082 13       		.uleb128 0x13
 19402 0083 01       		.byte	0x1
 19403 0084 03       		.uleb128 0x3
 19404 0085 0E       		.uleb128 0xe
 19405 0086 0B       		.uleb128 0xb
 19406 0087 0B       		.uleb128 0xb
 19407 0088 3A       		.uleb128 0x3a
 19408 0089 0B       		.uleb128 0xb
 19409 008a 3B       		.uleb128 0x3b
 19410 008b 05       		.uleb128 0x5
 19411 008c 01       		.uleb128 0x1
 19412 008d 13       		.uleb128 0x13
 19413 008e 00       		.byte	0
 19414 008f 00       		.byte	0
 19415 0090 0D       		.uleb128 0xd
 19416 0091 0D       		.uleb128 0xd
 19417 0092 00       		.byte	0
 19418 0093 03       		.uleb128 0x3
 19419 0094 0E       		.uleb128 0xe
 19420 0095 3A       		.uleb128 0x3a
 19421 0096 0B       		.uleb128 0xb
 19422 0097 3B       		.uleb128 0x3b
 19423 0098 05       		.uleb128 0x5
 19424 0099 49       		.uleb128 0x49
 19425 009a 13       		.uleb128 0x13
 19426 009b 38       		.uleb128 0x38
 19427 009c 0A       		.uleb128 0xa
 19428 009d 00       		.byte	0
 19429 009e 00       		.byte	0
 19430 009f 0E       		.uleb128 0xe
 19431 00a0 0D       		.uleb128 0xd
 19432 00a1 00       		.byte	0
 19433 00a2 03       		.uleb128 0x3
 19434 00a3 08       		.uleb128 0x8
 19435 00a4 3A       		.uleb128 0x3a
 19436 00a5 0B       		.uleb128 0xb
 19437 00a6 3B       		.uleb128 0x3b
 19438 00a7 05       		.uleb128 0x5
 19439 00a8 49       		.uleb128 0x49
 19440 00a9 13       		.uleb128 0x13
 19441 00aa 38       		.uleb128 0x38
 19442 00ab 0A       		.uleb128 0xa
 19443 00ac 00       		.byte	0
 19444 00ad 00       		.byte	0
 19445 00ae 0F       		.uleb128 0xf
 19446 00af 13       		.uleb128 0x13
 19447 00b0 01       		.byte	0x1
 19448 00b1 03       		.uleb128 0x3
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 490


 19449 00b2 0E       		.uleb128 0xe
 19450 00b3 0B       		.uleb128 0xb
 19451 00b4 0B       		.uleb128 0xb
 19452 00b5 3A       		.uleb128 0x3a
 19453 00b6 0B       		.uleb128 0xb
 19454 00b7 3B       		.uleb128 0x3b
 19455 00b8 0B       		.uleb128 0xb
 19456 00b9 01       		.uleb128 0x1
 19457 00ba 13       		.uleb128 0x13
 19458 00bb 00       		.byte	0
 19459 00bc 00       		.byte	0
 19460 00bd 10       		.uleb128 0x10
 19461 00be 0D       		.uleb128 0xd
 19462 00bf 00       		.byte	0
 19463 00c0 03       		.uleb128 0x3
 19464 00c1 0E       		.uleb128 0xe
 19465 00c2 3A       		.uleb128 0x3a
 19466 00c3 0B       		.uleb128 0xb
 19467 00c4 3B       		.uleb128 0x3b
 19468 00c5 0B       		.uleb128 0xb
 19469 00c6 49       		.uleb128 0x49
 19470 00c7 13       		.uleb128 0x13
 19471 00c8 38       		.uleb128 0x38
 19472 00c9 0A       		.uleb128 0xa
 19473 00ca 00       		.byte	0
 19474 00cb 00       		.byte	0
 19475 00cc 11       		.uleb128 0x11
 19476 00cd 13       		.uleb128 0x13
 19477 00ce 01       		.byte	0x1
 19478 00cf 0B       		.uleb128 0xb
 19479 00d0 05       		.uleb128 0x5
 19480 00d1 3A       		.uleb128 0x3a
 19481 00d2 0B       		.uleb128 0xb
 19482 00d3 3B       		.uleb128 0x3b
 19483 00d4 0B       		.uleb128 0xb
 19484 00d5 01       		.uleb128 0x1
 19485 00d6 13       		.uleb128 0x13
 19486 00d7 00       		.byte	0
 19487 00d8 00       		.byte	0
 19488 00d9 12       		.uleb128 0x12
 19489 00da 13       		.uleb128 0x13
 19490 00db 01       		.byte	0x1
 19491 00dc 0B       		.uleb128 0xb
 19492 00dd 0B       		.uleb128 0xb
 19493 00de 3A       		.uleb128 0x3a
 19494 00df 0B       		.uleb128 0xb
 19495 00e0 3B       		.uleb128 0x3b
 19496 00e1 0B       		.uleb128 0xb
 19497 00e2 01       		.uleb128 0x1
 19498 00e3 13       		.uleb128 0x13
 19499 00e4 00       		.byte	0
 19500 00e5 00       		.byte	0
 19501 00e6 13       		.uleb128 0x13
 19502 00e7 13       		.uleb128 0x13
 19503 00e8 01       		.byte	0x1
 19504 00e9 03       		.uleb128 0x3
 19505 00ea 08       		.uleb128 0x8
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 491


 19506 00eb 0B       		.uleb128 0xb
 19507 00ec 0B       		.uleb128 0xb
 19508 00ed 3A       		.uleb128 0x3a
 19509 00ee 0B       		.uleb128 0xb
 19510 00ef 3B       		.uleb128 0x3b
 19511 00f0 0B       		.uleb128 0xb
 19512 00f1 01       		.uleb128 0x1
 19513 00f2 13       		.uleb128 0x13
 19514 00f3 00       		.byte	0
 19515 00f4 00       		.byte	0
 19516 00f5 14       		.uleb128 0x14
 19517 00f6 0D       		.uleb128 0xd
 19518 00f7 00       		.byte	0
 19519 00f8 03       		.uleb128 0x3
 19520 00f9 08       		.uleb128 0x8
 19521 00fa 3A       		.uleb128 0x3a
 19522 00fb 0B       		.uleb128 0xb
 19523 00fc 3B       		.uleb128 0x3b
 19524 00fd 0B       		.uleb128 0xb
 19525 00fe 49       		.uleb128 0x49
 19526 00ff 13       		.uleb128 0x13
 19527 0100 38       		.uleb128 0x38
 19528 0101 0A       		.uleb128 0xa
 19529 0102 00       		.byte	0
 19530 0103 00       		.byte	0
 19531 0104 15       		.uleb128 0x15
 19532 0105 2E       		.uleb128 0x2e
 19533 0106 01       		.byte	0x1
 19534 0107 3F       		.uleb128 0x3f
 19535 0108 0C       		.uleb128 0xc
 19536 0109 03       		.uleb128 0x3
 19537 010a 0E       		.uleb128 0xe
 19538 010b 3A       		.uleb128 0x3a
 19539 010c 0B       		.uleb128 0xb
 19540 010d 3B       		.uleb128 0x3b
 19541 010e 0B       		.uleb128 0xb
 19542 010f 27       		.uleb128 0x27
 19543 0110 0C       		.uleb128 0xc
 19544 0111 11       		.uleb128 0x11
 19545 0112 01       		.uleb128 0x1
 19546 0113 12       		.uleb128 0x12
 19547 0114 01       		.uleb128 0x1
 19548 0115 40       		.uleb128 0x40
 19549 0116 06       		.uleb128 0x6
 19550 0117 9642     		.uleb128 0x2116
 19551 0119 0C       		.uleb128 0xc
 19552 011a 01       		.uleb128 0x1
 19553 011b 13       		.uleb128 0x13
 19554 011c 00       		.byte	0
 19555 011d 00       		.byte	0
 19556 011e 16       		.uleb128 0x16
 19557 011f 05       		.uleb128 0x5
 19558 0120 00       		.byte	0
 19559 0121 03       		.uleb128 0x3
 19560 0122 0E       		.uleb128 0xe
 19561 0123 3A       		.uleb128 0x3a
 19562 0124 0B       		.uleb128 0xb
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 492


 19563 0125 3B       		.uleb128 0x3b
 19564 0126 0B       		.uleb128 0xb
 19565 0127 49       		.uleb128 0x49
 19566 0128 13       		.uleb128 0x13
 19567 0129 02       		.uleb128 0x2
 19568 012a 0A       		.uleb128 0xa
 19569 012b 00       		.byte	0
 19570 012c 00       		.byte	0
 19571 012d 17       		.uleb128 0x17
 19572 012e 2E       		.uleb128 0x2e
 19573 012f 00       		.byte	0
 19574 0130 3F       		.uleb128 0x3f
 19575 0131 0C       		.uleb128 0xc
 19576 0132 03       		.uleb128 0x3
 19577 0133 0E       		.uleb128 0xe
 19578 0134 3A       		.uleb128 0x3a
 19579 0135 0B       		.uleb128 0xb
 19580 0136 3B       		.uleb128 0x3b
 19581 0137 05       		.uleb128 0x5
 19582 0138 27       		.uleb128 0x27
 19583 0139 0C       		.uleb128 0xc
 19584 013a 11       		.uleb128 0x11
 19585 013b 01       		.uleb128 0x1
 19586 013c 12       		.uleb128 0x12
 19587 013d 01       		.uleb128 0x1
 19588 013e 40       		.uleb128 0x40
 19589 013f 06       		.uleb128 0x6
 19590 0140 9642     		.uleb128 0x2116
 19591 0142 0C       		.uleb128 0xc
 19592 0143 00       		.byte	0
 19593 0144 00       		.byte	0
 19594 0145 18       		.uleb128 0x18
 19595 0146 2E       		.uleb128 0x2e
 19596 0147 01       		.byte	0x1
 19597 0148 3F       		.uleb128 0x3f
 19598 0149 0C       		.uleb128 0xc
 19599 014a 03       		.uleb128 0x3
 19600 014b 0E       		.uleb128 0xe
 19601 014c 3A       		.uleb128 0x3a
 19602 014d 0B       		.uleb128 0xb
 19603 014e 3B       		.uleb128 0x3b
 19604 014f 05       		.uleb128 0x5
 19605 0150 27       		.uleb128 0x27
 19606 0151 0C       		.uleb128 0xc
 19607 0152 11       		.uleb128 0x11
 19608 0153 01       		.uleb128 0x1
 19609 0154 12       		.uleb128 0x12
 19610 0155 01       		.uleb128 0x1
 19611 0156 40       		.uleb128 0x40
 19612 0157 06       		.uleb128 0x6
 19613 0158 9642     		.uleb128 0x2116
 19614 015a 0C       		.uleb128 0xc
 19615 015b 01       		.uleb128 0x1
 19616 015c 13       		.uleb128 0x13
 19617 015d 00       		.byte	0
 19618 015e 00       		.byte	0
 19619 015f 19       		.uleb128 0x19
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 493


 19620 0160 05       		.uleb128 0x5
 19621 0161 00       		.byte	0
 19622 0162 03       		.uleb128 0x3
 19623 0163 0E       		.uleb128 0xe
 19624 0164 3A       		.uleb128 0x3a
 19625 0165 0B       		.uleb128 0xb
 19626 0166 3B       		.uleb128 0x3b
 19627 0167 05       		.uleb128 0x5
 19628 0168 49       		.uleb128 0x49
 19629 0169 13       		.uleb128 0x13
 19630 016a 02       		.uleb128 0x2
 19631 016b 0A       		.uleb128 0xa
 19632 016c 00       		.byte	0
 19633 016d 00       		.byte	0
 19634 016e 1A       		.uleb128 0x1a
 19635 016f 2E       		.uleb128 0x2e
 19636 0170 01       		.byte	0x1
 19637 0171 3F       		.uleb128 0x3f
 19638 0172 0C       		.uleb128 0xc
 19639 0173 03       		.uleb128 0x3
 19640 0174 0E       		.uleb128 0xe
 19641 0175 3A       		.uleb128 0x3a
 19642 0176 0B       		.uleb128 0xb
 19643 0177 3B       		.uleb128 0x3b
 19644 0178 05       		.uleb128 0x5
 19645 0179 27       		.uleb128 0x27
 19646 017a 0C       		.uleb128 0xc
 19647 017b 49       		.uleb128 0x49
 19648 017c 13       		.uleb128 0x13
 19649 017d 11       		.uleb128 0x11
 19650 017e 01       		.uleb128 0x1
 19651 017f 12       		.uleb128 0x12
 19652 0180 01       		.uleb128 0x1
 19653 0181 40       		.uleb128 0x40
 19654 0182 06       		.uleb128 0x6
 19655 0183 9642     		.uleb128 0x2116
 19656 0185 0C       		.uleb128 0xc
 19657 0186 01       		.uleb128 0x1
 19658 0187 13       		.uleb128 0x13
 19659 0188 00       		.byte	0
 19660 0189 00       		.byte	0
 19661 018a 1B       		.uleb128 0x1b
 19662 018b 34       		.uleb128 0x34
 19663 018c 00       		.byte	0
 19664 018d 03       		.uleb128 0x3
 19665 018e 0E       		.uleb128 0xe
 19666 018f 3A       		.uleb128 0x3a
 19667 0190 0B       		.uleb128 0xb
 19668 0191 3B       		.uleb128 0x3b
 19669 0192 05       		.uleb128 0x5
 19670 0193 49       		.uleb128 0x49
 19671 0194 13       		.uleb128 0x13
 19672 0195 02       		.uleb128 0x2
 19673 0196 0A       		.uleb128 0xa
 19674 0197 00       		.byte	0
 19675 0198 00       		.byte	0
 19676 0199 1C       		.uleb128 0x1c
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 494


 19677 019a 0B       		.uleb128 0xb
 19678 019b 01       		.byte	0x1
 19679 019c 11       		.uleb128 0x11
 19680 019d 01       		.uleb128 0x1
 19681 019e 12       		.uleb128 0x12
 19682 019f 01       		.uleb128 0x1
 19683 01a0 00       		.byte	0
 19684 01a1 00       		.byte	0
 19685 01a2 1D       		.uleb128 0x1d
 19686 01a3 34       		.uleb128 0x34
 19687 01a4 00       		.byte	0
 19688 01a5 03       		.uleb128 0x3
 19689 01a6 08       		.uleb128 0x8
 19690 01a7 3A       		.uleb128 0x3a
 19691 01a8 0B       		.uleb128 0xb
 19692 01a9 3B       		.uleb128 0x3b
 19693 01aa 05       		.uleb128 0x5
 19694 01ab 49       		.uleb128 0x49
 19695 01ac 13       		.uleb128 0x13
 19696 01ad 02       		.uleb128 0x2
 19697 01ae 0A       		.uleb128 0xa
 19698 01af 00       		.byte	0
 19699 01b0 00       		.byte	0
 19700 01b1 1E       		.uleb128 0x1e
 19701 01b2 2E       		.uleb128 0x2e
 19702 01b3 01       		.byte	0x1
 19703 01b4 3F       		.uleb128 0x3f
 19704 01b5 0C       		.uleb128 0xc
 19705 01b6 03       		.uleb128 0x3
 19706 01b7 0E       		.uleb128 0xe
 19707 01b8 3A       		.uleb128 0x3a
 19708 01b9 0B       		.uleb128 0xb
 19709 01ba 3B       		.uleb128 0x3b
 19710 01bb 05       		.uleb128 0x5
 19711 01bc 49       		.uleb128 0x49
 19712 01bd 13       		.uleb128 0x13
 19713 01be 11       		.uleb128 0x11
 19714 01bf 01       		.uleb128 0x1
 19715 01c0 12       		.uleb128 0x12
 19716 01c1 01       		.uleb128 0x1
 19717 01c2 40       		.uleb128 0x40
 19718 01c3 06       		.uleb128 0x6
 19719 01c4 9642     		.uleb128 0x2116
 19720 01c6 0C       		.uleb128 0xc
 19721 01c7 01       		.uleb128 0x1
 19722 01c8 13       		.uleb128 0x13
 19723 01c9 00       		.byte	0
 19724 01ca 00       		.byte	0
 19725 01cb 1F       		.uleb128 0x1f
 19726 01cc 0A       		.uleb128 0xa
 19727 01cd 00       		.byte	0
 19728 01ce 03       		.uleb128 0x3
 19729 01cf 0E       		.uleb128 0xe
 19730 01d0 3A       		.uleb128 0x3a
 19731 01d1 0B       		.uleb128 0xb
 19732 01d2 3B       		.uleb128 0x3b
 19733 01d3 05       		.uleb128 0x5
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 495


 19734 01d4 11       		.uleb128 0x11
 19735 01d5 01       		.uleb128 0x1
 19736 01d6 00       		.byte	0
 19737 01d7 00       		.byte	0
 19738 01d8 20       		.uleb128 0x20
 19739 01d9 0B       		.uleb128 0xb
 19740 01da 01       		.byte	0x1
 19741 01db 11       		.uleb128 0x11
 19742 01dc 01       		.uleb128 0x1
 19743 01dd 12       		.uleb128 0x12
 19744 01de 01       		.uleb128 0x1
 19745 01df 01       		.uleb128 0x1
 19746 01e0 13       		.uleb128 0x13
 19747 01e1 00       		.byte	0
 19748 01e2 00       		.byte	0
 19749 01e3 21       		.uleb128 0x21
 19750 01e4 2E       		.uleb128 0x2e
 19751 01e5 00       		.byte	0
 19752 01e6 3F       		.uleb128 0x3f
 19753 01e7 0C       		.uleb128 0xc
 19754 01e8 03       		.uleb128 0x3
 19755 01e9 0E       		.uleb128 0xe
 19756 01ea 3A       		.uleb128 0x3a
 19757 01eb 0B       		.uleb128 0xb
 19758 01ec 3B       		.uleb128 0x3b
 19759 01ed 05       		.uleb128 0x5
 19760 01ee 27       		.uleb128 0x27
 19761 01ef 0C       		.uleb128 0xc
 19762 01f0 49       		.uleb128 0x49
 19763 01f1 13       		.uleb128 0x13
 19764 01f2 11       		.uleb128 0x11
 19765 01f3 01       		.uleb128 0x1
 19766 01f4 12       		.uleb128 0x12
 19767 01f5 01       		.uleb128 0x1
 19768 01f6 40       		.uleb128 0x40
 19769 01f7 06       		.uleb128 0x6
 19770 01f8 9642     		.uleb128 0x2116
 19771 01fa 0C       		.uleb128 0xc
 19772 01fb 00       		.byte	0
 19773 01fc 00       		.byte	0
 19774 01fd 22       		.uleb128 0x22
 19775 01fe 2E       		.uleb128 0x2e
 19776 01ff 01       		.byte	0x1
 19777 0200 3F       		.uleb128 0x3f
 19778 0201 0C       		.uleb128 0xc
 19779 0202 03       		.uleb128 0x3
 19780 0203 0E       		.uleb128 0xe
 19781 0204 3A       		.uleb128 0x3a
 19782 0205 0B       		.uleb128 0xb
 19783 0206 3B       		.uleb128 0x3b
 19784 0207 05       		.uleb128 0x5
 19785 0208 27       		.uleb128 0x27
 19786 0209 0C       		.uleb128 0xc
 19787 020a 11       		.uleb128 0x11
 19788 020b 01       		.uleb128 0x1
 19789 020c 12       		.uleb128 0x12
 19790 020d 01       		.uleb128 0x1
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 496


 19791 020e 40       		.uleb128 0x40
 19792 020f 06       		.uleb128 0x6
 19793 0210 9742     		.uleb128 0x2117
 19794 0212 0C       		.uleb128 0xc
 19795 0213 01       		.uleb128 0x1
 19796 0214 13       		.uleb128 0x13
 19797 0215 00       		.byte	0
 19798 0216 00       		.byte	0
 19799 0217 23       		.uleb128 0x23
 19800 0218 05       		.uleb128 0x5
 19801 0219 00       		.byte	0
 19802 021a 03       		.uleb128 0x3
 19803 021b 08       		.uleb128 0x8
 19804 021c 3A       		.uleb128 0x3a
 19805 021d 0B       		.uleb128 0xb
 19806 021e 3B       		.uleb128 0x3b
 19807 021f 05       		.uleb128 0x5
 19808 0220 49       		.uleb128 0x49
 19809 0221 13       		.uleb128 0x13
 19810 0222 02       		.uleb128 0x2
 19811 0223 0A       		.uleb128 0xa
 19812 0224 00       		.byte	0
 19813 0225 00       		.byte	0
 19814 0226 24       		.uleb128 0x24
 19815 0227 2E       		.uleb128 0x2e
 19816 0228 00       		.byte	0
 19817 0229 3F       		.uleb128 0x3f
 19818 022a 0C       		.uleb128 0xc
 19819 022b 03       		.uleb128 0x3
 19820 022c 0E       		.uleb128 0xe
 19821 022d 3A       		.uleb128 0x3a
 19822 022e 0B       		.uleb128 0xb
 19823 022f 3B       		.uleb128 0x3b
 19824 0230 05       		.uleb128 0x5
 19825 0231 27       		.uleb128 0x27
 19826 0232 0C       		.uleb128 0xc
 19827 0233 49       		.uleb128 0x49
 19828 0234 13       		.uleb128 0x13
 19829 0235 11       		.uleb128 0x11
 19830 0236 01       		.uleb128 0x1
 19831 0237 12       		.uleb128 0x12
 19832 0238 01       		.uleb128 0x1
 19833 0239 40       		.uleb128 0x40
 19834 023a 06       		.uleb128 0x6
 19835 023b 9742     		.uleb128 0x2117
 19836 023d 0C       		.uleb128 0xc
 19837 023e 00       		.byte	0
 19838 023f 00       		.byte	0
 19839 0240 25       		.uleb128 0x25
 19840 0241 34       		.uleb128 0x34
 19841 0242 00       		.byte	0
 19842 0243 03       		.uleb128 0x3
 19843 0244 0E       		.uleb128 0xe
 19844 0245 3A       		.uleb128 0x3a
 19845 0246 0B       		.uleb128 0xb
 19846 0247 3B       		.uleb128 0x3b
 19847 0248 0B       		.uleb128 0xb
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 497


 19848 0249 49       		.uleb128 0x49
 19849 024a 13       		.uleb128 0x13
 19850 024b 3F       		.uleb128 0x3f
 19851 024c 0C       		.uleb128 0xc
 19852 024d 3C       		.uleb128 0x3c
 19853 024e 0C       		.uleb128 0xc
 19854 024f 00       		.byte	0
 19855 0250 00       		.byte	0
 19856 0251 26       		.uleb128 0x26
 19857 0252 34       		.uleb128 0x34
 19858 0253 00       		.byte	0
 19859 0254 03       		.uleb128 0x3
 19860 0255 0E       		.uleb128 0xe
 19861 0256 3A       		.uleb128 0x3a
 19862 0257 0B       		.uleb128 0xb
 19863 0258 3B       		.uleb128 0x3b
 19864 0259 05       		.uleb128 0x5
 19865 025a 49       		.uleb128 0x49
 19866 025b 13       		.uleb128 0x13
 19867 025c 3F       		.uleb128 0x3f
 19868 025d 0C       		.uleb128 0xc
 19869 025e 3C       		.uleb128 0x3c
 19870 025f 0C       		.uleb128 0xc
 19871 0260 00       		.byte	0
 19872 0261 00       		.byte	0
 19873 0262 27       		.uleb128 0x27
 19874 0263 35       		.uleb128 0x35
 19875 0264 00       		.byte	0
 19876 0265 49       		.uleb128 0x49
 19877 0266 13       		.uleb128 0x13
 19878 0267 00       		.byte	0
 19879 0268 00       		.byte	0
 19880 0269 28       		.uleb128 0x28
 19881 026a 21       		.uleb128 0x21
 19882 026b 00       		.byte	0
 19883 026c 00       		.byte	0
 19884 026d 00       		.byte	0
 19885 026e 29       		.uleb128 0x29
 19886 026f 34       		.uleb128 0x34
 19887 0270 00       		.byte	0
 19888 0271 03       		.uleb128 0x3
 19889 0272 0E       		.uleb128 0xe
 19890 0273 3A       		.uleb128 0x3a
 19891 0274 0B       		.uleb128 0xb
 19892 0275 3B       		.uleb128 0x3b
 19893 0276 0B       		.uleb128 0xb
 19894 0277 49       		.uleb128 0x49
 19895 0278 13       		.uleb128 0x13
 19896 0279 3F       		.uleb128 0x3f
 19897 027a 0C       		.uleb128 0xc
 19898 027b 02       		.uleb128 0x2
 19899 027c 0A       		.uleb128 0xa
 19900 027d 00       		.byte	0
 19901 027e 00       		.byte	0
 19902 027f 2A       		.uleb128 0x2a
 19903 0280 34       		.uleb128 0x34
 19904 0281 00       		.byte	0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 498


 19905 0282 03       		.uleb128 0x3
 19906 0283 08       		.uleb128 0x8
 19907 0284 3A       		.uleb128 0x3a
 19908 0285 0B       		.uleb128 0xb
 19909 0286 3B       		.uleb128 0x3b
 19910 0287 0B       		.uleb128 0xb
 19911 0288 49       		.uleb128 0x49
 19912 0289 13       		.uleb128 0x13
 19913 028a 3F       		.uleb128 0x3f
 19914 028b 0C       		.uleb128 0xc
 19915 028c 3C       		.uleb128 0x3c
 19916 028d 0C       		.uleb128 0xc
 19917 028e 00       		.byte	0
 19918 028f 00       		.byte	0
 19919 0290 2B       		.uleb128 0x2b
 19920 0291 21       		.uleb128 0x21
 19921 0292 00       		.byte	0
 19922 0293 49       		.uleb128 0x49
 19923 0294 13       		.uleb128 0x13
 19924 0295 2F       		.uleb128 0x2f
 19925 0296 05       		.uleb128 0x5
 19926 0297 00       		.byte	0
 19927 0298 00       		.byte	0
 19928 0299 00       		.byte	0
 19929              		.section	.debug_loc,"",%progbits
 19930              	.Ldebug_loc0:
 19931              	.LLST0:
 19932 0000 00000000 		.4byte	.LFB56
 19933 0004 02000000 		.4byte	.LCFI0
 19934 0008 0200     		.2byte	0x2
 19935 000a 7D       		.byte	0x7d
 19936 000b 00       		.sleb128 0
 19937 000c 02000000 		.4byte	.LCFI0
 19938 0010 04000000 		.4byte	.LCFI1
 19939 0014 0200     		.2byte	0x2
 19940 0016 7D       		.byte	0x7d
 19941 0017 08       		.sleb128 8
 19942 0018 04000000 		.4byte	.LCFI1
 19943 001c 06000000 		.4byte	.LCFI2
 19944 0020 0200     		.2byte	0x2
 19945 0022 7D       		.byte	0x7d
 19946 0023 10       		.sleb128 16
 19947 0024 06000000 		.4byte	.LCFI2
 19948 0028 D2000000 		.4byte	.LFE56
 19949 002c 0200     		.2byte	0x2
 19950 002e 77       		.byte	0x77
 19951 002f 10       		.sleb128 16
 19952 0030 00000000 		.4byte	0
 19953 0034 00000000 		.4byte	0
 19954              	.LLST1:
 19955 0038 00000000 		.4byte	.LFB57
 19956 003c 02000000 		.4byte	.LCFI3
 19957 0040 0200     		.2byte	0x2
 19958 0042 7D       		.byte	0x7d
 19959 0043 00       		.sleb128 0
 19960 0044 02000000 		.4byte	.LCFI3
 19961 0048 04000000 		.4byte	.LCFI4
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 499


 19962 004c 0200     		.2byte	0x2
 19963 004e 7D       		.byte	0x7d
 19964 004f 08       		.sleb128 8
 19965 0050 04000000 		.4byte	.LCFI4
 19966 0054 06000000 		.4byte	.LCFI5
 19967 0058 0200     		.2byte	0x2
 19968 005a 7D       		.byte	0x7d
 19969 005b 10       		.sleb128 16
 19970 005c 06000000 		.4byte	.LCFI5
 19971 0060 EE000000 		.4byte	.LFE57
 19972 0064 0200     		.2byte	0x2
 19973 0066 77       		.byte	0x77
 19974 0067 10       		.sleb128 16
 19975 0068 00000000 		.4byte	0
 19976 006c 00000000 		.4byte	0
 19977              	.LLST2:
 19978 0070 00000000 		.4byte	.LFB58
 19979 0074 02000000 		.4byte	.LCFI6
 19980 0078 0200     		.2byte	0x2
 19981 007a 7D       		.byte	0x7d
 19982 007b 00       		.sleb128 0
 19983 007c 02000000 		.4byte	.LCFI6
 19984 0080 04000000 		.4byte	.LCFI7
 19985 0084 0200     		.2byte	0x2
 19986 0086 7D       		.byte	0x7d
 19987 0087 08       		.sleb128 8
 19988 0088 04000000 		.4byte	.LCFI7
 19989 008c 74010000 		.4byte	.LFE58
 19990 0090 0200     		.2byte	0x2
 19991 0092 77       		.byte	0x77
 19992 0093 08       		.sleb128 8
 19993 0094 00000000 		.4byte	0
 19994 0098 00000000 		.4byte	0
 19995              	.LLST3:
 19996 009c 00000000 		.4byte	.LFB59
 19997 00a0 02000000 		.4byte	.LCFI8
 19998 00a4 0200     		.2byte	0x2
 19999 00a6 7D       		.byte	0x7d
 20000 00a7 00       		.sleb128 0
 20001 00a8 02000000 		.4byte	.LCFI8
 20002 00ac 04000000 		.4byte	.LCFI9
 20003 00b0 0200     		.2byte	0x2
 20004 00b2 7D       		.byte	0x7d
 20005 00b3 08       		.sleb128 8
 20006 00b4 04000000 		.4byte	.LCFI9
 20007 00b8 50000000 		.4byte	.LFE59
 20008 00bc 0200     		.2byte	0x2
 20009 00be 77       		.byte	0x77
 20010 00bf 08       		.sleb128 8
 20011 00c0 00000000 		.4byte	0
 20012 00c4 00000000 		.4byte	0
 20013              	.LLST4:
 20014 00c8 00000000 		.4byte	.LFB60
 20015 00cc 02000000 		.4byte	.LCFI10
 20016 00d0 0200     		.2byte	0x2
 20017 00d2 7D       		.byte	0x7d
 20018 00d3 00       		.sleb128 0
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 500


 20019 00d4 02000000 		.4byte	.LCFI10
 20020 00d8 04000000 		.4byte	.LCFI11
 20021 00dc 0200     		.2byte	0x2
 20022 00de 7D       		.byte	0x7d
 20023 00df 08       		.sleb128 8
 20024 00e0 04000000 		.4byte	.LCFI11
 20025 00e4 06000000 		.4byte	.LCFI12
 20026 00e8 0200     		.2byte	0x2
 20027 00ea 7D       		.byte	0x7d
 20028 00eb 10       		.sleb128 16
 20029 00ec 06000000 		.4byte	.LCFI12
 20030 00f0 80000000 		.4byte	.LFE60
 20031 00f4 0200     		.2byte	0x2
 20032 00f6 77       		.byte	0x77
 20033 00f7 10       		.sleb128 16
 20034 00f8 00000000 		.4byte	0
 20035 00fc 00000000 		.4byte	0
 20036              	.LLST5:
 20037 0100 00000000 		.4byte	.LFB61
 20038 0104 02000000 		.4byte	.LCFI13
 20039 0108 0200     		.2byte	0x2
 20040 010a 7D       		.byte	0x7d
 20041 010b 00       		.sleb128 0
 20042 010c 02000000 		.4byte	.LCFI13
 20043 0110 04000000 		.4byte	.LCFI14
 20044 0114 0200     		.2byte	0x2
 20045 0116 7D       		.byte	0x7d
 20046 0117 08       		.sleb128 8
 20047 0118 04000000 		.4byte	.LCFI14
 20048 011c 06000000 		.4byte	.LCFI15
 20049 0120 0200     		.2byte	0x2
 20050 0122 7D       		.byte	0x7d
 20051 0123 10       		.sleb128 16
 20052 0124 06000000 		.4byte	.LCFI15
 20053 0128 98000000 		.4byte	.LFE61
 20054 012c 0200     		.2byte	0x2
 20055 012e 77       		.byte	0x77
 20056 012f 10       		.sleb128 16
 20057 0130 00000000 		.4byte	0
 20058 0134 00000000 		.4byte	0
 20059              	.LLST6:
 20060 0138 00000000 		.4byte	.LFB62
 20061 013c 02000000 		.4byte	.LCFI16
 20062 0140 0200     		.2byte	0x2
 20063 0142 7D       		.byte	0x7d
 20064 0143 00       		.sleb128 0
 20065 0144 02000000 		.4byte	.LCFI16
 20066 0148 04000000 		.4byte	.LCFI17
 20067 014c 0200     		.2byte	0x2
 20068 014e 7D       		.byte	0x7d
 20069 014f 08       		.sleb128 8
 20070 0150 04000000 		.4byte	.LCFI17
 20071 0154 06000000 		.4byte	.LCFI18
 20072 0158 0200     		.2byte	0x2
 20073 015a 7D       		.byte	0x7d
 20074 015b 10       		.sleb128 16
 20075 015c 06000000 		.4byte	.LCFI18
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 501


 20076 0160 54000000 		.4byte	.LFE62
 20077 0164 0200     		.2byte	0x2
 20078 0166 77       		.byte	0x77
 20079 0167 10       		.sleb128 16
 20080 0168 00000000 		.4byte	0
 20081 016c 00000000 		.4byte	0
 20082              	.LLST7:
 20083 0170 00000000 		.4byte	.LFB63
 20084 0174 02000000 		.4byte	.LCFI19
 20085 0178 0200     		.2byte	0x2
 20086 017a 7D       		.byte	0x7d
 20087 017b 00       		.sleb128 0
 20088 017c 02000000 		.4byte	.LCFI19
 20089 0180 04000000 		.4byte	.LCFI20
 20090 0184 0200     		.2byte	0x2
 20091 0186 7D       		.byte	0x7d
 20092 0187 10       		.sleb128 16
 20093 0188 04000000 		.4byte	.LCFI20
 20094 018c 06000000 		.4byte	.LCFI21
 20095 0190 0200     		.2byte	0x2
 20096 0192 7D       		.byte	0x7d
 20097 0193 18       		.sleb128 24
 20098 0194 06000000 		.4byte	.LCFI21
 20099 0198 66000000 		.4byte	.LFE63
 20100 019c 0200     		.2byte	0x2
 20101 019e 77       		.byte	0x77
 20102 019f 10       		.sleb128 16
 20103 01a0 00000000 		.4byte	0
 20104 01a4 00000000 		.4byte	0
 20105              	.LLST8:
 20106 01a8 00000000 		.4byte	.LFB64
 20107 01ac 02000000 		.4byte	.LCFI22
 20108 01b0 0200     		.2byte	0x2
 20109 01b2 7D       		.byte	0x7d
 20110 01b3 00       		.sleb128 0
 20111 01b4 02000000 		.4byte	.LCFI22
 20112 01b8 04000000 		.4byte	.LCFI23
 20113 01bc 0200     		.2byte	0x2
 20114 01be 7D       		.byte	0x7d
 20115 01bf 10       		.sleb128 16
 20116 01c0 04000000 		.4byte	.LCFI23
 20117 01c4 06000000 		.4byte	.LCFI24
 20118 01c8 0200     		.2byte	0x2
 20119 01ca 7D       		.byte	0x7d
 20120 01cb 18       		.sleb128 24
 20121 01cc 06000000 		.4byte	.LCFI24
 20122 01d0 66000000 		.4byte	.LFE64
 20123 01d4 0200     		.2byte	0x2
 20124 01d6 77       		.byte	0x77
 20125 01d7 10       		.sleb128 16
 20126 01d8 00000000 		.4byte	0
 20127 01dc 00000000 		.4byte	0
 20128              	.LLST9:
 20129 01e0 00000000 		.4byte	.LFB65
 20130 01e4 02000000 		.4byte	.LCFI25
 20131 01e8 0200     		.2byte	0x2
 20132 01ea 7D       		.byte	0x7d
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 502


 20133 01eb 00       		.sleb128 0
 20134 01ec 02000000 		.4byte	.LCFI25
 20135 01f0 04000000 		.4byte	.LCFI26
 20136 01f4 0200     		.2byte	0x2
 20137 01f6 7D       		.byte	0x7d
 20138 01f7 08       		.sleb128 8
 20139 01f8 04000000 		.4byte	.LCFI26
 20140 01fc 06000000 		.4byte	.LCFI27
 20141 0200 0200     		.2byte	0x2
 20142 0202 7D       		.byte	0x7d
 20143 0203 10       		.sleb128 16
 20144 0204 06000000 		.4byte	.LCFI27
 20145 0208 20010000 		.4byte	.LFE65
 20146 020c 0200     		.2byte	0x2
 20147 020e 77       		.byte	0x77
 20148 020f 10       		.sleb128 16
 20149 0210 00000000 		.4byte	0
 20150 0214 00000000 		.4byte	0
 20151              	.LLST10:
 20152 0218 00000000 		.4byte	.LFB66
 20153 021c 02000000 		.4byte	.LCFI28
 20154 0220 0200     		.2byte	0x2
 20155 0222 7D       		.byte	0x7d
 20156 0223 00       		.sleb128 0
 20157 0224 02000000 		.4byte	.LCFI28
 20158 0228 04000000 		.4byte	.LCFI29
 20159 022c 0200     		.2byte	0x2
 20160 022e 7D       		.byte	0x7d
 20161 022f 08       		.sleb128 8
 20162 0230 04000000 		.4byte	.LCFI29
 20163 0234 06000000 		.4byte	.LCFI30
 20164 0238 0200     		.2byte	0x2
 20165 023a 7D       		.byte	0x7d
 20166 023b 10       		.sleb128 16
 20167 023c 06000000 		.4byte	.LCFI30
 20168 0240 64000000 		.4byte	.LFE66
 20169 0244 0200     		.2byte	0x2
 20170 0246 77       		.byte	0x77
 20171 0247 10       		.sleb128 16
 20172 0248 00000000 		.4byte	0
 20173 024c 00000000 		.4byte	0
 20174              	.LLST11:
 20175 0250 00000000 		.4byte	.LFB67
 20176 0254 02000000 		.4byte	.LCFI31
 20177 0258 0200     		.2byte	0x2
 20178 025a 7D       		.byte	0x7d
 20179 025b 00       		.sleb128 0
 20180 025c 02000000 		.4byte	.LCFI31
 20181 0260 04000000 		.4byte	.LCFI32
 20182 0264 0200     		.2byte	0x2
 20183 0266 7D       		.byte	0x7d
 20184 0267 08       		.sleb128 8
 20185 0268 04000000 		.4byte	.LCFI32
 20186 026c 06000000 		.4byte	.LCFI33
 20187 0270 0200     		.2byte	0x2
 20188 0272 7D       		.byte	0x7d
 20189 0273 20       		.sleb128 32
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 503


 20190 0274 06000000 		.4byte	.LCFI33
 20191 0278 FA000000 		.4byte	.LFE67
 20192 027c 0200     		.2byte	0x2
 20193 027e 77       		.byte	0x77
 20194 027f 20       		.sleb128 32
 20195 0280 00000000 		.4byte	0
 20196 0284 00000000 		.4byte	0
 20197              	.LLST12:
 20198 0288 00000000 		.4byte	.LFB68
 20199 028c 02000000 		.4byte	.LCFI34
 20200 0290 0200     		.2byte	0x2
 20201 0292 7D       		.byte	0x7d
 20202 0293 00       		.sleb128 0
 20203 0294 02000000 		.4byte	.LCFI34
 20204 0298 04000000 		.4byte	.LCFI35
 20205 029c 0200     		.2byte	0x2
 20206 029e 7D       		.byte	0x7d
 20207 029f 08       		.sleb128 8
 20208 02a0 04000000 		.4byte	.LCFI35
 20209 02a4 06000000 		.4byte	.LCFI36
 20210 02a8 0300     		.2byte	0x3
 20211 02aa 7D       		.byte	0x7d
 20212 02ab C800     		.sleb128 72
 20213 02ad 06000000 		.4byte	.LCFI36
 20214 02b1 04030000 		.4byte	.LFE68
 20215 02b5 0300     		.2byte	0x3
 20216 02b7 77       		.byte	0x77
 20217 02b8 C800     		.sleb128 72
 20218 02ba 00000000 		.4byte	0
 20219 02be 00000000 		.4byte	0
 20220              	.LLST13:
 20221 02c2 00000000 		.4byte	.LFB69
 20222 02c6 04000000 		.4byte	.LCFI37
 20223 02ca 0200     		.2byte	0x2
 20224 02cc 7D       		.byte	0x7d
 20225 02cd 00       		.sleb128 0
 20226 02ce 04000000 		.4byte	.LCFI37
 20227 02d2 06000000 		.4byte	.LCFI38
 20228 02d6 0200     		.2byte	0x2
 20229 02d8 7D       		.byte	0x7d
 20230 02d9 24       		.sleb128 36
 20231 02da 06000000 		.4byte	.LCFI38
 20232 02de 08000000 		.4byte	.LCFI39
 20233 02e2 0300     		.2byte	0x3
 20234 02e4 7D       		.byte	0x7d
 20235 02e5 F002     		.sleb128 368
 20236 02e7 08000000 		.4byte	.LCFI39
 20237 02eb EC740000 		.4byte	.LFE69
 20238 02ef 0300     		.2byte	0x3
 20239 02f1 77       		.byte	0x77
 20240 02f2 C002     		.sleb128 320
 20241 02f4 00000000 		.4byte	0
 20242 02f8 00000000 		.4byte	0
 20243              	.LLST14:
 20244 02fc 00000000 		.4byte	.LFB70
 20245 0300 02000000 		.4byte	.LCFI40
 20246 0304 0200     		.2byte	0x2
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 504


 20247 0306 7D       		.byte	0x7d
 20248 0307 00       		.sleb128 0
 20249 0308 02000000 		.4byte	.LCFI40
 20250 030c 04000000 		.4byte	.LCFI41
 20251 0310 0200     		.2byte	0x2
 20252 0312 7D       		.byte	0x7d
 20253 0313 08       		.sleb128 8
 20254 0314 04000000 		.4byte	.LCFI41
 20255 0318 1C000000 		.4byte	.LFE70
 20256 031c 0200     		.2byte	0x2
 20257 031e 77       		.byte	0x77
 20258 031f 08       		.sleb128 8
 20259 0320 00000000 		.4byte	0
 20260 0324 00000000 		.4byte	0
 20261              	.LLST15:
 20262 0328 00000000 		.4byte	.LFB71
 20263 032c 02000000 		.4byte	.LCFI42
 20264 0330 0200     		.2byte	0x2
 20265 0332 7D       		.byte	0x7d
 20266 0333 00       		.sleb128 0
 20267 0334 02000000 		.4byte	.LCFI42
 20268 0338 04000000 		.4byte	.LCFI43
 20269 033c 0200     		.2byte	0x2
 20270 033e 7D       		.byte	0x7d
 20271 033f 08       		.sleb128 8
 20272 0340 04000000 		.4byte	.LCFI43
 20273 0344 06000000 		.4byte	.LCFI44
 20274 0348 0200     		.2byte	0x2
 20275 034a 7D       		.byte	0x7d
 20276 034b 18       		.sleb128 24
 20277 034c 06000000 		.4byte	.LCFI44
 20278 0350 68000000 		.4byte	.LFE71
 20279 0354 0200     		.2byte	0x2
 20280 0356 77       		.byte	0x77
 20281 0357 18       		.sleb128 24
 20282 0358 00000000 		.4byte	0
 20283 035c 00000000 		.4byte	0
 20284              	.LLST16:
 20285 0360 00000000 		.4byte	.LFB72
 20286 0364 02000000 		.4byte	.LCFI45
 20287 0368 0200     		.2byte	0x2
 20288 036a 7D       		.byte	0x7d
 20289 036b 00       		.sleb128 0
 20290 036c 02000000 		.4byte	.LCFI45
 20291 0370 04000000 		.4byte	.LCFI46
 20292 0374 0200     		.2byte	0x2
 20293 0376 7D       		.byte	0x7d
 20294 0377 04       		.sleb128 4
 20295 0378 04000000 		.4byte	.LCFI46
 20296 037c 06000000 		.4byte	.LCFI47
 20297 0380 0200     		.2byte	0x2
 20298 0382 7D       		.byte	0x7d
 20299 0383 18       		.sleb128 24
 20300 0384 06000000 		.4byte	.LCFI47
 20301 0388 3A000000 		.4byte	.LFE72
 20302 038c 0200     		.2byte	0x2
 20303 038e 77       		.byte	0x77
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 505


 20304 038f 18       		.sleb128 24
 20305 0390 00000000 		.4byte	0
 20306 0394 00000000 		.4byte	0
 20307              	.LLST17:
 20308 0398 00000000 		.4byte	.LFB73
 20309 039c 02000000 		.4byte	.LCFI48
 20310 03a0 0200     		.2byte	0x2
 20311 03a2 7D       		.byte	0x7d
 20312 03a3 00       		.sleb128 0
 20313 03a4 02000000 		.4byte	.LCFI48
 20314 03a8 04000000 		.4byte	.LCFI49
 20315 03ac 0200     		.2byte	0x2
 20316 03ae 7D       		.byte	0x7d
 20317 03af 04       		.sleb128 4
 20318 03b0 04000000 		.4byte	.LCFI49
 20319 03b4 10000000 		.4byte	.LFE73
 20320 03b8 0200     		.2byte	0x2
 20321 03ba 77       		.byte	0x77
 20322 03bb 04       		.sleb128 4
 20323 03bc 00000000 		.4byte	0
 20324 03c0 00000000 		.4byte	0
 20325              	.LLST18:
 20326 03c4 00000000 		.4byte	.LFB74
 20327 03c8 02000000 		.4byte	.LCFI50
 20328 03cc 0200     		.2byte	0x2
 20329 03ce 7D       		.byte	0x7d
 20330 03cf 00       		.sleb128 0
 20331 03d0 02000000 		.4byte	.LCFI50
 20332 03d4 04000000 		.4byte	.LCFI51
 20333 03d8 0200     		.2byte	0x2
 20334 03da 7D       		.byte	0x7d
 20335 03db 08       		.sleb128 8
 20336 03dc 04000000 		.4byte	.LCFI51
 20337 03e0 54010000 		.4byte	.LFE74
 20338 03e4 0200     		.2byte	0x2
 20339 03e6 77       		.byte	0x77
 20340 03e7 08       		.sleb128 8
 20341 03e8 00000000 		.4byte	0
 20342 03ec 00000000 		.4byte	0
 20343              		.section	.debug_aranges,"",%progbits
 20344 0000 AC000000 		.4byte	0xac
 20345 0004 0200     		.2byte	0x2
 20346 0006 00000000 		.4byte	.Ldebug_info0
 20347 000a 04       		.byte	0x4
 20348 000b 00       		.byte	0
 20349 000c 0000     		.2byte	0
 20350 000e 0000     		.2byte	0
 20351 0010 00000000 		.4byte	.LFB56
 20352 0014 D2000000 		.4byte	.LFE56-.LFB56
 20353 0018 00000000 		.4byte	.LFB57
 20354 001c EE000000 		.4byte	.LFE57-.LFB57
 20355 0020 00000000 		.4byte	.LFB58
 20356 0024 74010000 		.4byte	.LFE58-.LFB58
 20357 0028 00000000 		.4byte	.LFB59
 20358 002c 50000000 		.4byte	.LFE59-.LFB59
 20359 0030 00000000 		.4byte	.LFB60
 20360 0034 80000000 		.4byte	.LFE60-.LFB60
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 506


 20361 0038 00000000 		.4byte	.LFB61
 20362 003c 98000000 		.4byte	.LFE61-.LFB61
 20363 0040 00000000 		.4byte	.LFB62
 20364 0044 54000000 		.4byte	.LFE62-.LFB62
 20365 0048 00000000 		.4byte	.LFB63
 20366 004c 66000000 		.4byte	.LFE63-.LFB63
 20367 0050 00000000 		.4byte	.LFB64
 20368 0054 66000000 		.4byte	.LFE64-.LFB64
 20369 0058 00000000 		.4byte	.LFB65
 20370 005c 20010000 		.4byte	.LFE65-.LFB65
 20371 0060 00000000 		.4byte	.LFB66
 20372 0064 64000000 		.4byte	.LFE66-.LFB66
 20373 0068 00000000 		.4byte	.LFB67
 20374 006c FA000000 		.4byte	.LFE67-.LFB67
 20375 0070 00000000 		.4byte	.LFB68
 20376 0074 04030000 		.4byte	.LFE68-.LFB68
 20377 0078 00000000 		.4byte	.LFB69
 20378 007c EC740000 		.4byte	.LFE69-.LFB69
 20379 0080 00000000 		.4byte	.LFB70
 20380 0084 1C000000 		.4byte	.LFE70-.LFB70
 20381 0088 00000000 		.4byte	.LFB71
 20382 008c 68000000 		.4byte	.LFE71-.LFB71
 20383 0090 00000000 		.4byte	.LFB72
 20384 0094 3A000000 		.4byte	.LFE72-.LFB72
 20385 0098 00000000 		.4byte	.LFB73
 20386 009c 10000000 		.4byte	.LFE73-.LFB73
 20387 00a0 00000000 		.4byte	.LFB74
 20388 00a4 54010000 		.4byte	.LFE74-.LFB74
 20389 00a8 00000000 		.4byte	0
 20390 00ac 00000000 		.4byte	0
 20391              		.section	.debug_ranges,"",%progbits
 20392              	.Ldebug_ranges0:
 20393 0000 00000000 		.4byte	.LFB56
 20394 0004 D2000000 		.4byte	.LFE56
 20395 0008 00000000 		.4byte	.LFB57
 20396 000c EE000000 		.4byte	.LFE57
 20397 0010 00000000 		.4byte	.LFB58
 20398 0014 74010000 		.4byte	.LFE58
 20399 0018 00000000 		.4byte	.LFB59
 20400 001c 50000000 		.4byte	.LFE59
 20401 0020 00000000 		.4byte	.LFB60
 20402 0024 80000000 		.4byte	.LFE60
 20403 0028 00000000 		.4byte	.LFB61
 20404 002c 98000000 		.4byte	.LFE61
 20405 0030 00000000 		.4byte	.LFB62
 20406 0034 54000000 		.4byte	.LFE62
 20407 0038 00000000 		.4byte	.LFB63
 20408 003c 66000000 		.4byte	.LFE63
 20409 0040 00000000 		.4byte	.LFB64
 20410 0044 66000000 		.4byte	.LFE64
 20411 0048 00000000 		.4byte	.LFB65
 20412 004c 20010000 		.4byte	.LFE65
 20413 0050 00000000 		.4byte	.LFB66
 20414 0054 64000000 		.4byte	.LFE66
 20415 0058 00000000 		.4byte	.LFB67
 20416 005c FA000000 		.4byte	.LFE67
 20417 0060 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 507


 20418 0064 04030000 		.4byte	.LFE68
 20419 0068 00000000 		.4byte	.LFB69
 20420 006c EC740000 		.4byte	.LFE69
 20421 0070 00000000 		.4byte	.LFB70
 20422 0074 1C000000 		.4byte	.LFE70
 20423 0078 00000000 		.4byte	.LFB71
 20424 007c 68000000 		.4byte	.LFE71
 20425 0080 00000000 		.4byte	.LFB72
 20426 0084 3A000000 		.4byte	.LFE72
 20427 0088 00000000 		.4byte	.LFB73
 20428 008c 10000000 		.4byte	.LFE73
 20429 0090 00000000 		.4byte	.LFB74
 20430 0094 54010000 		.4byte	.LFE74
 20431 0098 00000000 		.4byte	0
 20432 009c 00000000 		.4byte	0
 20433              		.section	.debug_line,"",%progbits
 20434              	.Ldebug_line0:
 20435 0000 BC100000 		.section	.debug_str,"MS",%progbits,1
 20435      02007101 
 20435      00000201 
 20435      FB0E0D00 
 20435      01010101 
 20436              	.LASF299:
 20437 0000 6D6F7665 		.ascii	"mover_tilt\000"
 20437      725F7469 
 20437      6C7400
 20438              	.LASF20:
 20439 000b 73697A65 		.ascii	"sizetype\000"
 20439      74797065 
 20439      00
 20440              	.LASF96:
 20441 0014 706F6C61 		.ascii	"polarity\000"
 20441      72697479 
 20441      00
 20442              	.LASF204:
 20443 001d 71706F77 		.ascii	"qpower_t\000"
 20443      65725F74 
 20443      00
 20444              	.LASF113:
 20445 0026 64657269 		.ascii	"derivative_lowpass\000"
 20445      76617469 
 20445      76655F6C 
 20445      6F777061 
 20445      737300
 20446              	.LASF214:
 20447 0039 53686F77 		.ascii	"ShowCLUSM\000"
 20447      434C5553 
 20447      4D00
 20448              	.LASF36:
 20449 0043 46626B45 		.ascii	"FbkEncFaults\000"
 20449      6E634661 
 20449      756C7473 
 20449      00
 20450              	.LASF177:
 20451 0050 73746570 		.ascii	"steps_integral\000"
 20451      735F696E 
 20451      74656772 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 508


 20451      616C00
 20452              	.LASF95:
 20453 005f 50415241 		.ascii	"PARAMS\000"
 20453      4D5300
 20454              	.LASF121:
 20455 0066 4C494D49 		.ascii	"LIMITCONTROL\000"
 20455      54434F4E 
 20455      54524F4C 
 20455      00
 20456              	.LASF9:
 20457 0073 696E7433 		.ascii	"int32_t\000"
 20457      325F7400 
 20458              	.LASF221:
 20459 007b 53686F77 		.ascii	"ShowParamsKiPan\000"
 20459      50617261 
 20459      6D734B69 
 20459      50616E00 
 20460              	.LASF90:
 20461 008b 56504152 		.ascii	"VPARAMS\000"
 20461      414D5300 
 20462              	.LASF75:
 20463 0093 7961775F 		.ascii	"yaw_invertion\000"
 20463      696E7665 
 20463      7274696F 
 20463      6E00
 20464              	.LASF223:
 20465 00a1 53686F77 		.ascii	"ShowParamsColor\000"
 20465      50617261 
 20465      6D73436F 
 20465      6C6F7200 
 20466              	.LASF98:
 20467 00b1 4B6F7066 		.ascii	"Kopf\000"
 20467      00
 20468              	.LASF297:
 20469 00b6 70617468 		.ascii	"path\000"
 20469      00
 20470              	.LASF48:
 20471 00bb 7A5F6178 		.ascii	"z_axis\000"
 20471      697300
 20472              	.LASF12:
 20473 00c2 75696E74 		.ascii	"uint32\000"
 20473      333200
 20474              	.LASF162:
 20475 00c9 6163635F 		.ascii	"acc_slope\000"
 20475      736C6F70 
 20475      6500
 20476              	.LASF213:
 20477 00d3 53686F77 		.ascii	"ShowStatusMappingSM\000"
 20477      53746174 
 20477      75734D61 
 20477      7070696E 
 20477      67534D00 
 20478              	.LASF236:
 20479 00e7 70617273 		.ascii	"parser\000"
 20479      657200
 20480              	.LASF235:
 20481 00ee 6C6F6361 		.ascii	"localBuffer\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 509


 20481      6C427566 
 20481      66657200 
 20482              	.LASF251:
 20483 00fa 6A756D70 		.ascii	"jump_g_th\000"
 20483      5F675F74 
 20483      6800
 20484              	.LASF102:
 20485 0104 6C696D69 		.ascii	"limit_deceleration_factor\000"
 20485      745F6465 
 20485      63656C65 
 20485      72617469 
 20485      6F6E5F66 
 20486              	.LASF41:
 20487 011e 61636365 		.ascii	"acceleration\000"
 20487      6C657261 
 20487      74696F6E 
 20487      00
 20488              	.LASF87:
 20489 012b 63616D5F 		.ascii	"cam_gyropan\000"
 20489      6779726F 
 20489      70616E00 
 20490              	.LASF188:
 20491 0137 70617573 		.ascii	"pauseticks\000"
 20491      65746963 
 20491      6B7300
 20492              	.LASF18:
 20493 0142 63686172 		.ascii	"char8\000"
 20493      3800
 20494              	.LASF277:
 20495 0148 434D445F 		.ascii	"CMD_AT_SHOWVERSION\000"
 20495      41545F53 
 20495      484F5756 
 20495      45525349 
 20495      4F4E00
 20496              	.LASF250:
 20497 015b 74696D65 		.ascii	"time_loc\000"
 20497      5F6C6F63 
 20497      00
 20498              	.LASF131:
 20499 0164 74696C74 		.ascii	"tilt_angle\000"
 20499      5F616E67 
 20499      6C6500
 20500              	.LASF104:
 20501 016f 6D617374 		.ascii	"master_enc_position\000"
 20501      65725F65 
 20501      6E635F70 
 20501      6F736974 
 20501      696F6E00 
 20502              	.LASF261:
 20503 0183 6D795F74 		.ascii	"my_torque\000"
 20503      6F727175 
 20503      6500
 20504              	.LASF271:
 20505 018d 416E7942 		.ascii	"AnyButtonPressed\000"
 20505      7574746F 
 20505      6E507265 
 20505      73736564 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 510


 20505      00
 20506              	.LASF71:
 20507 019e 73616D70 		.ascii	"sample_d1\000"
 20507      6C655F64 
 20507      3100
 20508              	.LASF13:
 20509 01a8 696E7438 		.ascii	"int8\000"
 20509      00
 20510              	.LASF123:
 20511 01ad 6D617374 		.ascii	"master_limit_delta\000"
 20511      65725F6C 
 20511      696D6974 
 20511      5F64656C 
 20511      746100
 20512              	.LASF311:
 20513 01c0 75736572 		.ascii	"userInputBuffer\000"
 20513      496E7075 
 20513      74427566 
 20513      66657200 
 20514              	.LASF128:
 20515 01d0 64736563 		.ascii	"dsec\000"
 20515      00
 20516              	.LASF51:
 20517 01d5 73797374 		.ascii	"system_dynamic_scalar\000"
 20517      656D5F64 
 20517      796E616D 
 20517      69635F73 
 20517      63616C61 
 20518              	.LASF183:
 20519 01eb 51454C45 		.ascii	"QELEMENT\000"
 20519      4D454E54 
 20519      00
 20520              	.LASF294:
 20521 01f4 74696C74 		.ascii	"tilt_qpower_stat\000"
 20521      5F71706F 
 20521      7765725F 
 20521      73746174 
 20521      00
 20522              	.LASF278:
 20523 0205 676F6265 		.ascii	"gobee_param\000"
 20523      655F7061 
 20523      72616D00 
 20524              	.LASF252:
 20525 0211 6163635F 		.ascii	"acc_g_th\000"
 20525      675F7468 
 20525      00
 20526              	.LASF280:
 20527 021a 6D616368 		.ascii	"machine_state\000"
 20527      696E655F 
 20527      73746174 
 20527      6500
 20528              	.LASF33:
 20529 0228 474F4245 		.ascii	"GOBEE_PARAMS\000"
 20529      455F5041 
 20529      52414D53 
 20529      00
 20530              	.LASF304:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 511


 20531 0235 494D555F 		.ascii	"IMU_sensor\000"
 20531      73656E73 
 20531      6F7200
 20532              	.LASF76:
 20533 0240 70697463 		.ascii	"pitch_invertion\000"
 20533      685F696E 
 20533      76657274 
 20533      696F6E00 
 20534              	.LASF93:
 20535 0250 7265736F 		.ascii	"resolution_step_deg\000"
 20535      6C757469 
 20535      6F6E5F73 
 20535      7465705F 
 20535      64656700 
 20536              	.LASF205:
 20537 0264 56454C4F 		.ascii	"VELOCALC\000"
 20537      43414C43 
 20537      00
 20538              	.LASF54:
 20539 026d 454E434F 		.ascii	"ENCODER\000"
 20539      44455200 
 20540              	.LASF66:
 20541 0275 73746570 		.ascii	"step_over_abs_ratio\000"
 20541      5F6F7665 
 20541      725F6162 
 20541      735F7261 
 20541      74696F00 
 20542              	.LASF4:
 20543 0289 6C6F6E67 		.ascii	"long int\000"
 20543      20696E74 
 20543      00
 20544              	.LASF126:
 20545 0292 76706172 		.ascii	"vparam\000"
 20545      616D00
 20546              	.LASF198:
 20547 0299 516B5F70 		.ascii	"Qk_previous\000"
 20547      72657669 
 20547      6F757300 
 20548              	.LASF216:
 20549 02a5 53686F77 		.ascii	"ShowParamsMode\000"
 20549      50617261 
 20549      6D734D6F 
 20549      646500
 20550              	.LASF208:
 20551 02b4 544F5251 		.ascii	"TORQUESTAT\000"
 20551      55455354 
 20551      415400
 20552              	.LASF147:
 20553 02bf 74696D65 		.ascii	"time_sec\000"
 20553      5F736563 
 20553      00
 20554              	.LASF109:
 20555 02c8 6572726F 		.ascii	"error\000"
 20555      7200
 20556              	.LASF286:
 20557 02ce 53656C65 		.ascii	"Selected_ANAOUT\000"
 20557      63746564 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 512


 20557      5F414E41 
 20557      4F555400 
 20558              	.LASF39:
 20559 02de 585F4158 		.ascii	"X_AXIS\000"
 20559      495300
 20560              	.LASF209:
 20561 02e5 63757272 		.ascii	"current_integral\000"
 20561      656E745F 
 20561      696E7465 
 20561      6772616C 
 20561      00
 20562              	.LASF84:
 20563 02f6 62696B65 		.ascii	"bike_yaw_lpf\000"
 20563      5F796177 
 20563      5F6C7066 
 20563      00
 20564              	.LASF49:
 20565 0303 73717561 		.ascii	"squared\000"
 20565      72656400 
 20566              	.LASF79:
 20567 030b 67616D6D 		.ascii	"gamma\000"
 20567      6100
 20568              	.LASF0:
 20569 0311 7369676E 		.ascii	"signed char\000"
 20569      65642063 
 20569      68617200 
 20570              	.LASF52:
 20571 031d 454E435F 		.ascii	"ENC_PARAMETER\000"
 20571      50415241 
 20571      4D455445 
 20571      5200
 20572              	.LASF37:
 20573 032b 70616E5F 		.ascii	"pan_FE_FAULT_prescaler\000"
 20573      46455F46 
 20573      41554C54 
 20573      5F707265 
 20573      7363616C 
 20574              	.LASF140:
 20575 0342 61637469 		.ascii	"action\000"
 20575      6F6E00
 20576              	.LASF258:
 20577 0349 54736176 		.ascii	"TsavetoEE\000"
 20577      65746F45 
 20577      4500
 20578              	.LASF107:
 20579 0353 6D617374 		.ascii	"master_joy_sample_delta\000"
 20579      65725F6A 
 20579      6F795F73 
 20579      616D706C 
 20579      655F6465 
 20580              	.LASF40:
 20581 036b 7363616C 		.ascii	"scale\000"
 20581      6500
 20582              	.LASF1:
 20583 0371 756E7369 		.ascii	"unsigned char\000"
 20583      676E6564 
 20583      20636861 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 513


 20583      7200
 20584              	.LASF249:
 20585 037f 715F6E75 		.ascii	"q_number\000"
 20585      6D626572 
 20585      00
 20586              	.LASF267:
 20587 0388 6D656D6F 		.ascii	"memory_num\000"
 20587      72795F6E 
 20587      756D00
 20588              	.LASF28:
 20589 0393 785F6163 		.ascii	"x_acc_ADC_offset\000"
 20589      635F4144 
 20589      435F6F66 
 20589      66736574 
 20589      00
 20590              	.LASF281:
 20591 03a4 676F6265 		.ascii	"gobeeFaults\000"
 20591      65466175 
 20591      6C747300 
 20592              	.LASF62:
 20593 03b0 7261775F 		.ascii	"raw_home\000"
 20593      686F6D65 
 20593      00
 20594              	.LASF315:
 20595 03b9 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 20595      4320342E 
 20595      372E3320 
 20595      32303133 
 20595      30333132 
 20596 03ec 616E6368 		.ascii	"anch revision 196615]\000"
 20596      20726576 
 20596      6973696F 
 20596      6E203139 
 20596      36363135 
 20597              	.LASF60:
 20598 0402 4142504F 		.ascii	"ABPOS_SENS_PARAMETER\000"
 20598      535F5345 
 20598      4E535F50 
 20598      4152414D 
 20598      45544552 
 20599              	.LASF124:
 20600 0417 64656365 		.ascii	"deceleration_factor\000"
 20600      6C657261 
 20600      74696F6E 
 20600      5F666163 
 20600      746F7200 
 20601              	.LASF309:
 20602 042b 57617665 		.ascii	"WaveDAC8_wave_triangle\000"
 20602      44414338 
 20602      5F776176 
 20602      655F7472 
 20602      69616E67 
 20603              	.LASF180:
 20604 0442 51504152 		.ascii	"QPARA\000"
 20604      4100
 20605              	.LASF94:
 20606 0448 7265736F 		.ascii	"resolution_rad_step\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 514


 20606      6C757469 
 20606      6F6E5F72 
 20606      61645F73 
 20606      74657000 
 20607              	.LASF142:
 20608 045c 6E756D62 		.ascii	"number1\000"
 20608      65723100 
 20609              	.LASF143:
 20610 0464 6E756D62 		.ascii	"number2\000"
 20610      65723200 
 20611              	.LASF19:
 20612 046c 63686172 		.ascii	"char\000"
 20612      00
 20613              	.LASF32:
 20614 0471 6163635F 		.ascii	"acc_g_threshold\000"
 20614      675F7468 
 20614      72657368 
 20614      6F6C6400 
 20615              	.LASF302:
 20616 0481 636C755F 		.ascii	"clu_sequence\000"
 20616      73657175 
 20616      656E6365 
 20616      00
 20617              	.LASF50:
 20618 048e 6D6F6475 		.ascii	"modulo\000"
 20618      6C6F00
 20619              	.LASF295:
 20620 0495 70616E5F 		.ascii	"pan_torque_stat\000"
 20620      746F7271 
 20620      75655F73 
 20620      74617400 
 20621              	.LASF270:
 20622 04a5 636C6561 		.ascii	"clear_string\000"
 20622      725F7374 
 20622      72696E67 
 20622      00
 20623              	.LASF106:
 20624 04b2 6D617374 		.ascii	"master_joy_position\000"
 20624      65725F6A 
 20624      6F795F70 
 20624      6F736974 
 20624      696F6E00 
 20625              	.LASF141:
 20626 04c6 70617261 		.ascii	"parameter\000"
 20626      6D657465 
 20626      7200
 20627              	.LASF117:
 20628 04d0 70776D5F 		.ascii	"pwm_test_var\000"
 20628      74657374 
 20628      5F766172 
 20628      00
 20629              	.LASF182:
 20630 04dd 706F7369 		.ascii	"position_adjust\000"
 20630      74696F6E 
 20630      5F61646A 
 20630      75737400 
 20631              	.LASF150:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 515


 20632 04ed 4D564441 		.ascii	"MVDATAS\000"
 20632      54415300 
 20633              	.LASF135:
 20634 04f5 4556454E 		.ascii	"EVENTS\000"
 20634      545300
 20635              	.LASF58:
 20636 04fc 616E6775 		.ascii	"angular_velocity\000"
 20636      6C61725F 
 20636      76656C6F 
 20636      63697479 
 20636      00
 20637              	.LASF170:
 20638 050d 70617468 		.ascii	"path_ticks_MAX\000"
 20638      5F746963 
 20638      6B735F4D 
 20638      415800
 20639              	.LASF307:
 20640 051c 6973725F 		.ascii	"isr_START_check_counter\000"
 20640      53544152 
 20640      545F6368 
 20640      65636B5F 
 20640      636F756E 
 20641              	.LASF148:
 20642 0534 73746570 		.ascii	"steps\000"
 20642      7300
 20643              	.LASF114:
 20644 053a 64656164 		.ascii	"deadband_factor\000"
 20644      62616E64 
 20644      5F666163 
 20644      746F7200 
 20645              	.LASF291:
 20646 054a 70616E5F 		.ascii	"pan_current_stat\000"
 20646      63757272 
 20646      656E745F 
 20646      73746174 
 20646      00
 20647              	.LASF189:
 20648 055b 70617573 		.ascii	"pausemax\000"
 20648      656D6178 
 20648      00
 20649              	.LASF174:
 20650 0564 72656D61 		.ascii	"remainder_double\000"
 20650      696E6465 
 20650      725F646F 
 20650      75626C65 
 20650      00
 20651              	.LASF164:
 20652 0575 54524150 		.ascii	"TRAPEZOID\000"
 20652      455A4F49 
 20652      4400
 20653              	.LASF151:
 20654 057f 6163635F 		.ascii	"acc_ticks\000"
 20654      7469636B 
 20654      7300
 20655              	.LASF237:
 20656 0589 7363616E 		.ascii	"scanstat\000"
 20656      73746174 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 516


 20656      00
 20657              	.LASF73:
 20658 0592 72617469 		.ascii	"ratio_tmp\000"
 20658      6F5F746D 
 20658      7000
 20659              	.LASF254:
 20660 059c 6765745F 		.ascii	"get_key\000"
 20660      6B657900 
 20661              	.LASF108:
 20662 05a4 736C6176 		.ascii	"slave_enc\000"
 20662      655F656E 
 20662      6300
 20663              	.LASF137:
 20664 05ae 74696D65 		.ascii	"timecode\000"
 20664      636F6465 
 20664      00
 20665              	.LASF179:
 20666 05b7 6D6F7665 		.ascii	"mover_type\000"
 20666      725F7479 
 20666      706500
 20667              	.LASF81:
 20668 05c2 62696B65 		.ascii	"bike_yaw\000"
 20668      5F796177 
 20668      00
 20669              	.LASF262:
 20670 05cb 6D795F6F 		.ascii	"my_omega\000"
 20670      6D656761 
 20670      00
 20671              	.LASF186:
 20672 05d4 636C756E 		.ascii	"clunumber\000"
 20672      756D6265 
 20672      7200
 20673              	.LASF115:
 20674 05de 6374726C 		.ascii	"ctrl_var\000"
 20674      5F766172 
 20674      00
 20675              	.LASF132:
 20676 05e7 726F6C6C 		.ascii	"roll_angle\000"
 20676      5F616E67 
 20676      6C6500
 20677              	.LASF269:
 20678 05f2 42757474 		.ascii	"ButtonYNChoice\000"
 20678      6F6E594E 
 20678      43686F69 
 20678      636500
 20679              	.LASF195:
 20680 0601 6D65616E 		.ascii	"mean_previous\000"
 20680      5F707265 
 20680      76696F75 
 20680      7300
 20681              	.LASF293:
 20682 060f 74696C74 		.ascii	"tilt_current_stat\000"
 20682      5F637572 
 20682      72656E74 
 20682      5F737461 
 20682      7400
 20683              	.LASF187:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 517


 20684 0621 636C756C 		.ascii	"cluline\000"
 20684      696E6500 
 20685              	.LASF63:
 20686 0629 7261775F 		.ascii	"raw_limit_max\000"
 20686      6C696D69 
 20686      745F6D61 
 20686      7800
 20687              	.LASF227:
 20688 0637 696E6465 		.ascii	"index\000"
 20688      7800
 20689              	.LASF228:
 20690 063d 63686172 		.ascii	"charin\000"
 20690      696E00
 20691              	.LASF129:
 20692 0644 6F6E5F6F 		.ascii	"on_origin_ticks\000"
 20692      72696769 
 20692      6E5F7469 
 20692      636B7300 
 20693              	.LASF153:
 20694 0654 76636F6E 		.ascii	"vconst_ticks\000"
 20694      73745F74 
 20694      69636B73 
 20694      00
 20695              	.LASF30:
 20696 0661 7A5F6163 		.ascii	"z_acc_ADC_offset\000"
 20696      635F4144 
 20696      435F6F66 
 20696      66736574 
 20696      00
 20697              	.LASF166:
 20698 0672 50504152 		.ascii	"PPARA\000"
 20698      4100
 20699              	.LASF86:
 20700 0678 62696B65 		.ascii	"bike_roll_lpf\000"
 20700      5F726F6C 
 20700      6C5F6C70 
 20700      6600
 20701              	.LASF130:
 20702 0686 494E4552 		.ascii	"INERTIAL\000"
 20702      5449414C 
 20702      00
 20703              	.LASF5:
 20704 068f 6C6F6E67 		.ascii	"long unsigned int\000"
 20704      20756E73 
 20704      69676E65 
 20704      6420696E 
 20704      7400
 20705              	.LASF238:
 20706 06a1 6D6F6465 		.ascii	"mode_loc\000"
 20706      5F6C6F63 
 20706      00
 20707              	.LASF215:
 20708 06aa 53686F77 		.ascii	"ShowParamsDirector\000"
 20708      50617261 
 20708      6D734469 
 20708      72656374 
 20708      6F7200
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 518


 20709              	.LASF122:
 20710 06bd 73746174 		.ascii	"status\000"
 20710      757300
 20711              	.LASF44:
 20712 06c4 5A5F4158 		.ascii	"Z_AXIS\000"
 20712      495300
 20713              	.LASF47:
 20714 06cb 795F6178 		.ascii	"y_axis\000"
 20714      697300
 20715              	.LASF298:
 20716 06d2 6D6F7665 		.ascii	"mover_pan\000"
 20716      725F7061 
 20716      6E00
 20717              	.LASF201:
 20718 06dc 7469636B 		.ascii	"tick\000"
 20718      00
 20719              	.LASF68:
 20720 06e1 616E676C 		.ascii	"angle_rad\000"
 20720      655F7261 
 20720      6400
 20721              	.LASF91:
 20722 06eb 61737469 		.ascii	"astim_enable\000"
 20722      6D5F656E 
 20722      61626C65 
 20722      00
 20723              	.LASF248:
 20724 06f8 6D656D6F 		.ascii	"memory_number\000"
 20724      72795F6E 
 20724      756D6265 
 20724      7200
 20725              	.LASF276:
 20726 0706 434D445F 		.ascii	"CMD_AT\000"
 20726      415400
 20727              	.LASF255:
 20728 070d 65786974 		.ascii	"exitpars\000"
 20728      70617273 
 20728      00
 20729              	.LASF317:
 20730 0716 433A5C55 		.ascii	"C:\\Users\\Graziano G. Ravizza\\Documents\\PSoC Cre"
 20730      73657273 
 20730      5C477261 
 20730      7A69616E 
 20730      6F20472E 
 20731 0745 61746F72 		.ascii	"ator\\SQUIT\\Vers.0.0-T00 2019-0208 C3.0 (start)\\S"
 20731      5C535155 
 20731      49545C56 
 20731      6572732E 
 20731      302E302D 
 20732 0775 71756974 		.ascii	"quit-Proto.cydsn\000"
 20732      2D50726F 
 20732      746F2E63 
 20732      7964736E 
 20732      00
 20733              	.LASF224:
 20734 0786 53686F77 		.ascii	"ShowLimits\000"
 20734      4C696D69 
 20734      747300
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 519


 20735              	.LASF57:
 20736 0791 616E676C 		.ascii	"angle\000"
 20736      6500
 20737              	.LASF61:
 20738 0797 7261775F 		.ascii	"raw_invertion\000"
 20738      696E7665 
 20738      7274696F 
 20738      6E00
 20739              	.LASF80:
 20740 07a5 494D555F 		.ascii	"IMU_SENSOR\000"
 20740      53454E53 
 20740      4F5200
 20741              	.LASF273:
 20742 07b0 47657441 		.ascii	"GetAnaposOffsetZero\000"
 20742      6E61706F 
 20742      734F6666 
 20742      7365745A 
 20742      65726F00 
 20743              	.LASF172:
 20744 07c4 70617468 		.ascii	"path_type\000"
 20744      5F747970 
 20744      6500
 20745              	.LASF312:
 20746 07ce 61637475 		.ascii	"actual_cmd\000"
 20746      616C5F63 
 20746      6D6400
 20747              	.LASF169:
 20748 07d9 7469636B 		.ascii	"ticks\000"
 20748      7300
 20749              	.LASF181:
 20750 07df 706F7369 		.ascii	"position_default\000"
 20750      74696F6E 
 20750      5F646566 
 20750      61756C74 
 20750      00
 20751              	.LASF167:
 20752 07f0 54726170 		.ascii	"Trapezoid_Number\000"
 20752      657A6F69 
 20752      645F4E75 
 20752      6D626572 
 20752      00
 20753              	.LASF231:
 20754 0801 76657262 		.ascii	"verbose\000"
 20754      6F736500 
 20755              	.LASF6:
 20756 0809 6C6F6E67 		.ascii	"long long int\000"
 20756      206C6F6E 
 20756      6720696E 
 20756      7400
 20757              	.LASF225:
 20758 0817 6563686F 		.ascii	"echo\000"
 20758      00
 20759              	.LASF146:
 20760 081c 6465635F 		.ascii	"dec_pc\000"
 20760      706300
 20761              	.LASF292:
 20762 0823 70616E5F 		.ascii	"pan_qpower_stat\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 520


 20762      71706F77 
 20762      65725F73 
 20762      74617400 
 20763              	.LASF85:
 20764 0833 62696B65 		.ascii	"bike_pitch_lpf\000"
 20764      5F706974 
 20764      63685F6C 
 20764      706600
 20765              	.LASF210:
 20766 0842 6162735F 		.ascii	"abs_current_t\000"
 20766      63757272 
 20766      656E745F 
 20766      7400
 20767              	.LASF22:
 20768 0850 66627974 		.ascii	"fbyte\000"
 20768      6500
 20769              	.LASF306:
 20770 0856 616E6170 		.ascii	"anapos_offset\000"
 20770      6F735F6F 
 20770      66667365 
 20770      7400
 20771              	.LASF17:
 20772 0864 646F7562 		.ascii	"double\000"
 20772      6C6500
 20773              	.LASF222:
 20774 086b 53686F77 		.ascii	"ShowParamsKiTilt\000"
 20774      50617261 
 20774      6D734B69 
 20774      54696C74 
 20774      00
 20775              	.LASF240:
 20776 087c 65786368 		.ascii	"exchange\000"
 20776      616E6765 
 20776      00
 20777              	.LASF279:
 20778 0885 41646356 		.ascii	"AdcValue\000"
 20778      616C7565 
 20778      00
 20779              	.LASF233:
 20780 088e 75696478 		.ascii	"uidx\000"
 20780      00
 20781              	.LASF119:
 20782 0893 466C6F61 		.ascii	"Float_ASTIM\000"
 20782      745F4153 
 20782      54494D00 
 20783              	.LASF275:
 20784 089f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 20784      52784275 
 20784      66666572 
 20784      00
 20785              	.LASF226:
 20786 08ac 74696D65 		.ascii	"timeout\000"
 20786      6F757400 
 20787              	.LASF16:
 20788 08b4 666C6F61 		.ascii	"float\000"
 20788      7400
 20789              	.LASF244:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 521


 20790 08ba 616E616F 		.ascii	"anaout_gain\000"
 20790      75745F67 
 20790      61696E00 
 20791              	.LASF134:
 20792 08c6 76696272 		.ascii	"vibration\000"
 20792      6174696F 
 20792      6E00
 20793              	.LASF8:
 20794 08d0 756E7369 		.ascii	"unsigned int\000"
 20794      676E6564 
 20794      20696E74 
 20794      00
 20795              	.LASF265:
 20796 08dd 6D795F70 		.ascii	"my_pm_max\000"
 20796      6D5F6D61 
 20796      7800
 20797              	.LASF239:
 20798 08e7 696E7665 		.ascii	"invertion\000"
 20798      7274696F 
 20798      6E00
 20799              	.LASF287:
 20800 08f1 70616E5F 		.ascii	"pan_absolute_sensor\000"
 20800      6162736F 
 20800      6C757465 
 20800      5F73656E 
 20800      736F7200 
 20801              	.LASF55:
 20802 0905 706F7369 		.ascii	"position\000"
 20802      74696F6E 
 20802      00
 20803              	.LASF35:
 20804 090e 67656E65 		.ascii	"general\000"
 20804      72616C00 
 20805              	.LASF310:
 20806 0916 57617665 		.ascii	"WaveDAC8_wave_square\000"
 20806      44414338 
 20806      5F776176 
 20806      655F7371 
 20806      75617265 
 20807              	.LASF105:
 20808 092b 6D617374 		.ascii	"master_enc_sample_delta\000"
 20808      65725F65 
 20808      6E635F73 
 20808      616D706C 
 20808      655F6465 
 20809              	.LASF56:
 20810 0943 76656C6F 		.ascii	"velocity\000"
 20810      63697479 
 20810      00
 20811              	.LASF260:
 20812 094c 74696C74 		.ascii	"tilt_joy_delta\000"
 20812      5F6A6F79 
 20812      5F64656C 
 20812      746100
 20813              	.LASF230:
 20814 095b 7363616E 		.ascii	"scanner2\000"
 20814      6E657232 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 522


 20814      00
 20815              	.LASF152:
 20816 0964 6465635F 		.ascii	"dec_ticks\000"
 20816      7469636B 
 20816      7300
 20817              	.LASF118:
 20818 096e 63757272 		.ascii	"current\000"
 20818      656E7400 
 20819              	.LASF219:
 20820 0976 53686F77 		.ascii	"ShowParamsGainAnaout\000"
 20820      50617261 
 20820      6D734761 
 20820      696E416E 
 20820      616F7574 
 20821              	.LASF42:
 20822 098b 61636365 		.ascii	"acceleration_lpf\000"
 20822      6C657261 
 20822      74696F6E 
 20822      5F6C7066 
 20822      00
 20823              	.LASF241:
 20824 099c 6F666673 		.ascii	"offset\000"
 20824      657400
 20825              	.LASF111:
 20826 09a3 69657272 		.ascii	"ierror\000"
 20826      6F7200
 20827              	.LASF284:
 20828 09aa 70616E5F 		.ascii	"pan_axis\000"
 20828      61786973 
 20828      00
 20829              	.LASF99:
 20830 09b3 4761696E 		.ascii	"Gain_ANAOUT\000"
 20830      5F414E41 
 20830      4F555400 
 20831              	.LASF97:
 20832 09bf 4B736966 		.ascii	"Ksif\000"
 20832      00
 20833              	.LASF197:
 20834 09c4 73636172 		.ascii	"scarto\000"
 20834      746F00
 20835              	.LASF26:
 20836 09cb 64697265 		.ascii	"director\000"
 20836      63746F72 
 20836      00
 20837              	.LASF313:
 20838 09d4 5553425F 		.ascii	"USB_Check_prev\000"
 20838      43686563 
 20838      6B5F7072 
 20838      657600
 20839              	.LASF296:
 20840 09e3 74696C74 		.ascii	"tilt_torque_stat\000"
 20840      5F746F72 
 20840      7175655F 
 20840      73746174 
 20840      00
 20841              	.LASF274:
 20842 09f4 5F5F6374 		.ascii	"__ctype_ptr__\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 523


 20842      7970655F 
 20842      7074725F 
 20842      5F00
 20843              	.LASF34:
 20844 0a02 474F4245 		.ascii	"GOBEE_FAULTS\000"
 20844      455F4641 
 20844      554C5453 
 20844      00
 20845              	.LASF145:
 20846 0a0f 6163635F 		.ascii	"acc_pc\000"
 20846      706300
 20847              	.LASF308:
 20848 0a16 6973725F 		.ascii	"isr_STOP_check_counter\000"
 20848      53544F50 
 20848      5F636865 
 20848      636B5F63 
 20848      6F756E74 
 20849              	.LASF175:
 20850 0a2d 73746570 		.ascii	"steps_to_move_double\000"
 20850      735F746F 
 20850      5F6D6F76 
 20850      655F646F 
 20850      75626C65 
 20851              	.LASF21:
 20852 0a42 6C6F6E67 		.ascii	"long double\000"
 20852      20646F75 
 20852      626C6500 
 20853              	.LASF23:
 20854 0a4e 666E756D 		.ascii	"fnum\000"
 20854      00
 20855              	.LASF64:
 20856 0a53 7261775F 		.ascii	"raw_limit_min\000"
 20856      6C696D69 
 20856      745F6D69 
 20856      6E00
 20857              	.LASF245:
 20858 0a61 70617468 		.ascii	"path_n\000"
 20858      5F6E00
 20859              	.LASF29:
 20860 0a68 795F6163 		.ascii	"y_acc_ADC_offset\000"
 20860      635F4144 
 20860      435F6F66 
 20860      66736574 
 20860      00
 20861              	.LASF70:
 20862 0a79 7261775F 		.ascii	"raw_adc_p0\000"
 20862      6164635F 
 20862      703000
 20863              	.LASF211:
 20864 0a84 70776361 		.ascii	"pwcalc\000"
 20864      6C6300
 20865              	.LASF103:
 20866 0a8b 4D434441 		.ascii	"MCDATAS\000"
 20866      54415300 
 20867              	.LASF65:
 20868 0a93 7261775F 		.ascii	"raw_limit_hysteresis\000"
 20868      6C696D69 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 524


 20868      745F6879 
 20868      73746572 
 20868      65736973 
 20869              	.LASF83:
 20870 0aa8 62696B65 		.ascii	"bike_roll\000"
 20870      5F726F6C 
 20870      6C00
 20871              	.LASF7:
 20872 0ab2 6C6F6E67 		.ascii	"long long unsigned int\000"
 20872      206C6F6E 
 20872      6720756E 
 20872      7369676E 
 20872      65642069 
 20873              	.LASF77:
 20874 0ac9 726F6C6C 		.ascii	"roll_invertion\000"
 20874      5F696E76 
 20874      65727469 
 20874      6F6E00
 20875              	.LASF139:
 20876 0ad8 636F6D6D 		.ascii	"command\000"
 20876      616E6400 
 20877              	.LASF193:
 20878 0ae0 6D657373 		.ascii	"messg\000"
 20878      6700
 20879              	.LASF125:
 20880 0ae6 4D4F544F 		.ascii	"MOTOR_AXIS\000"
 20880      525F4158 
 20880      495300
 20881              	.LASF289:
 20882 0af1 70616E5F 		.ascii	"pan_absolute_sensor_stat\000"
 20882      6162736F 
 20882      6C757465 
 20882      5F73656E 
 20882      736F725F 
 20883              	.LASF285:
 20884 0b0a 74696C74 		.ascii	"tilt_axis\000"
 20884      5F617869 
 20884      7300
 20885              	.LASF194:
 20886 0b14 6D65616E 		.ascii	"mean\000"
 20886      00
 20887              	.LASF45:
 20888 0b19 414E414C 		.ascii	"ANALOG_3D_ACCELEROMETER\000"
 20888      4F475F33 
 20888      445F4143 
 20888      43454C45 
 20888      524F4D45 
 20889              	.LASF232:
 20890 0b31 72647374 		.ascii	"rdstat\000"
 20890      617400
 20891              	.LASF176:
 20892 0b38 73746570 		.ascii	"steps_to_move\000"
 20892      735F746F 
 20892      5F6D6F76 
 20892      6500
 20893              	.LASF263:
 20894 0b46 6D795F72 		.ascii	"my_rpm\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 525


 20894      706D00
 20895              	.LASF160:
 20896 0b4d 765F696E 		.ascii	"v_initial\000"
 20896      69746961 
 20896      6C00
 20897              	.LASF301:
 20898 0b57 716D656D 		.ascii	"qmemory_standard_address\000"
 20898      6F72795F 
 20898      7374616E 
 20898      64617264 
 20898      5F616464 
 20899              	.LASF191:
 20900 0b70 74747261 		.ascii	"ttrap_num\000"
 20900      705F6E75 
 20900      6D00
 20901              	.LASF200:
 20902 0b7a 69746572 		.ascii	"iteration_num\000"
 20902      6174696F 
 20902      6E5F6E75 
 20902      6D00
 20903              	.LASF82:
 20904 0b88 62696B65 		.ascii	"bike_pitch\000"
 20904      5F706974 
 20904      636800
 20905              	.LASF88:
 20906 0b93 63616D5F 		.ascii	"cam_gyrotilt\000"
 20906      6779726F 
 20906      74696C74 
 20906      00
 20907              	.LASF101:
 20908 0ba0 6C696D69 		.ascii	"limit_control\000"
 20908      745F636F 
 20908      6E74726F 
 20908      6C00
 20909              	.LASF161:
 20910 0bae 765F6669 		.ascii	"v_final\000"
 20910      6E616C00 
 20911              	.LASF78:
 20912 0bb6 70697463 		.ascii	"pitch_roll_exchange\000"
 20912      685F726F 
 20912      6C6C5F65 
 20912      78636861 
 20912      6E676500 
 20913              	.LASF178:
 20914 0bca 70617468 		.ascii	"path_to_move\000"
 20914      5F746F5F 
 20914      6D6F7665 
 20914      00
 20915              	.LASF199:
 20916 0bd7 76617269 		.ascii	"variance\000"
 20916      616E6365 
 20916      00
 20917              	.LASF100:
 20918 0be0 636F6C6F 		.ascii	"color\000"
 20918      7200
 20919              	.LASF24:
 20920 0be6 666C6F61 		.ascii	"floatEE\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 526


 20920      74454500 
 20921              	.LASF184:
 20922 0bee 6E756D62 		.ascii	"number\000"
 20922      657200
 20923              	.LASF27:
 20924 0bf5 62657461 		.ascii	"beta\000"
 20924      00
 20925              	.LASF264:
 20926 0bfa 6D795F70 		.ascii	"my_pm_t\000"
 20926      6D5F7400 
 20927              	.LASF253:
 20928 0c02 64756D6D 		.ascii	"dummy\000"
 20928      7900
 20929              	.LASF229:
 20930 0c08 52656164 		.ascii	"ReadUSBbuffer\000"
 20930      55534262 
 20930      75666665 
 20930      7200
 20931              	.LASF217:
 20932 0c16 53686F77 		.ascii	"ShowParamsAstim\000"
 20932      50617261 
 20932      6D734173 
 20932      74696D00 
 20933              	.LASF144:
 20934 0c26 54504152 		.ascii	"TPARA\000"
 20934      4100
 20935              	.LASF272:
 20936 0c2c 5553425F 		.ascii	"USB_Check\000"
 20936      43686563 
 20936      6B00
 20937              	.LASF67:
 20938 0c36 41425350 		.ascii	"ABSPOS_SENSOR\000"
 20938      4F535F53 
 20938      454E534F 
 20938      5200
 20939              	.LASF154:
 20940 0c44 6163635F 		.ascii	"acc_end_tpoint\000"
 20940      656E645F 
 20940      74706F69 
 20940      6E7400
 20941              	.LASF185:
 20942 0c53 434C555F 		.ascii	"CLU_STATEMACHINE\000"
 20942      53544154 
 20942      454D4143 
 20942      48494E45 
 20942      00
 20943              	.LASF314:
 20944 0c64 736C6567 		.ascii	"slegenda\000"
 20944      656E6461 
 20944      00
 20945              	.LASF173:
 20946 0c6d 74726170 		.ascii	"trapezoid_index\000"
 20946      657A6F69 
 20946      645F696E 
 20946      64657800 
 20947              	.LASF127:
 20948 0c7d 54494D45 		.ascii	"TIMECODE\000"
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 527


 20948      434F4445 
 20948      00
 20949              	.LASF242:
 20950 0c86 7261775F 		.ascii	"raw_limit_hyst\000"
 20950      6C696D69 
 20950      745F6879 
 20950      737400
 20951              	.LASF10:
 20952 0c95 75696E74 		.ascii	"uint8\000"
 20952      3800
 20953              	.LASF110:
 20954 0c9b 6572726F 		.ascii	"error_bef\000"
 20954      725F6265 
 20954      6600
 20955              	.LASF43:
 20956 0ca5 595F4158 		.ascii	"Y_AXIS\000"
 20956      495300
 20957              	.LASF220:
 20958 0cac 53686F77 		.ascii	"ShowParamsAnaoutSelectedAxis\000"
 20958      50617261 
 20958      6D73416E 
 20958      616F7574 
 20958      53656C65 
 20959              	.LASF46:
 20960 0cc9 785F6178 		.ascii	"x_axis\000"
 20960      697300
 20961              	.LASF149:
 20962 0cd0 6C617374 		.ascii	"last_flg\000"
 20962      5F666C67 
 20962      00
 20963              	.LASF2:
 20964 0cd9 73686F72 		.ascii	"short int\000"
 20964      7420696E 
 20964      7400
 20965              	.LASF133:
 20966 0ce3 6A756D70 		.ascii	"jump\000"
 20966      00
 20967              	.LASF25:
 20968 0ce8 6D6F6465 		.ascii	"mode\000"
 20968      00
 20969              	.LASF196:
 20970 0ced 72616E67 		.ascii	"range\000"
 20970      6500
 20971              	.LASF158:
 20972 0cf3 7469636B 		.ascii	"ticks_final\000"
 20972      735F6669 
 20972      6E616C00 
 20973              	.LASF136:
 20974 0cff 6D617070 		.ascii	"mapping_sm_status\000"
 20974      696E675F 
 20974      736D5F73 
 20974      74617475 
 20974      7300
 20975              	.LASF53:
 20976 0d11 7265736F 		.ascii	"resolution\000"
 20976      6C757469 
 20976      6F6E00
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 528


 20977              	.LASF247:
 20978 0d1c 636C755F 		.ascii	"clu_pause\000"
 20978      70617573 
 20978      6500
 20979              	.LASF120:
 20980 0d26 61737469 		.ascii	"astim_ZCsync\000"
 20980      6D5F5A43 
 20980      73796E63 
 20980      00
 20981              	.LASF246:
 20982 0d33 636C755F 		.ascii	"clu_number\000"
 20982      6E756D62 
 20982      657200
 20983              	.LASF163:
 20984 0d3e 6465635F 		.ascii	"dec_slope\000"
 20984      736C6F70 
 20984      6500
 20985              	.LASF283:
 20986 0d48 6673616D 		.ascii	"fsampling\000"
 20986      706C696E 
 20986      6700
 20987              	.LASF31:
 20988 0d52 6A756D70 		.ascii	"jump_g_threshold\000"
 20988      5F675F74 
 20988      68726573 
 20988      686F6C64 
 20988      00
 20989              	.LASF159:
 20990 0d63 765F636F 		.ascii	"v_const\000"
 20990      6E737400 
 20991              	.LASF171:
 20992 0d6b 64656C74 		.ascii	"delta_position\000"
 20992      615F706F 
 20992      73697469 
 20992      6F6E00
 20993              	.LASF38:
 20994 0d7a 74696C74 		.ascii	"tilt_FE_FAULT_prescaler\000"
 20994      5F46455F 
 20994      4641554C 
 20994      545F7072 
 20994      65736361 
 20995              	.LASF190:
 20996 0d92 70747261 		.ascii	"ptrap_num\000"
 20996      705F6E75 
 20996      6D00
 20997              	.LASF74:
 20998 0d9c 494D555F 		.ascii	"IMU_SENS_PARAMETER\000"
 20998      53454E53 
 20998      5F504152 
 20998      414D4554 
 20998      455200
 20999              	.LASF259:
 21000 0daf 70616E5F 		.ascii	"pan_joy_delta\000"
 21000      6A6F795F 
 21000      64656C74 
 21000      6100
 21001              	.LASF288:
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 529


 21002 0dbd 74696C74 		.ascii	"tilt_absolute_sensor\000"
 21002      5F616273 
 21002      6F6C7574 
 21002      655F7365 
 21002      6E736F72 
 21003              	.LASF202:
 21004 0dd2 504F5745 		.ascii	"POWERCALC\000"
 21004      5243414C 
 21004      4300
 21005              	.LASF203:
 21006 0ddc 6162735F 		.ascii	"abs_omega_t\000"
 21006      6F6D6567 
 21006      615F7400 
 21007              	.LASF207:
 21008 0de8 656E635F 		.ascii	"enc_position_bef\000"
 21008      706F7369 
 21008      74696F6E 
 21008      5F626566 
 21008      00
 21009              	.LASF316:
 21010 0df9 2E5C636F 		.ascii	".\\console.c\000"
 21010      6E736F6C 
 21010      652E6300 
 21011              	.LASF266:
 21012 0e05 6D795F70 		.ascii	"my_pm_med\000"
 21012      6D5F6D65 
 21012      6400
 21013              	.LASF14:
 21014 0e0f 696E7431 		.ascii	"int16\000"
 21014      3600
 21015              	.LASF112:
 21016 0e15 64657272 		.ascii	"derror\000"
 21016      6F7200
 21017              	.LASF300:
 21018 0e1c 715F7461 		.ascii	"q_table\000"
 21018      626C6500 
 21019              	.LASF218:
 21020 0e24 70617869 		.ascii	"paxis\000"
 21020      7300
 21021              	.LASF72:
 21022 0e2a 73616D70 		.ascii	"sample_d2\000"
 21022      6C655F64 
 21022      3200
 21023              	.LASF165:
 21024 0e34 6D6F7665 		.ascii	"mover\000"
 21024      7200
 21025              	.LASF157:
 21026 0e3a 7469636B 		.ascii	"ticks_initial\000"
 21026      735F696E 
 21026      69746961 
 21026      6C00
 21027              	.LASF305:
 21028 0e48 61616363 		.ascii	"aacc\000"
 21028      00
 21029              	.LASF155:
 21030 0e4d 6465635F 		.ascii	"dec_start_tpoint\000"
 21030      73746172 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 530


 21030      745F7470 
 21030      6F696E74 
 21030      00
 21031              	.LASF3:
 21032 0e5e 73686F72 		.ascii	"short unsigned int\000"
 21032      7420756E 
 21032      7369676E 
 21032      65642069 
 21032      6E7400
 21033              	.LASF257:
 21034 0e71 50736176 		.ascii	"PsavetoEE\000"
 21034      65746F45 
 21034      4500
 21035              	.LASF92:
 21036 0e7b 61737469 		.ascii	"astim_type\000"
 21036      6D5F7479 
 21036      706500
 21037              	.LASF206:
 21038 0e86 61637475 		.ascii	"actual_abs_motor_velocity\000"
 21038      616C5F61 
 21038      62735F6D 
 21038      6F746F72 
 21038      5F76656C 
 21039              	.LASF156:
 21040 0ea0 6465635F 		.ascii	"dec_end_tpoint\000"
 21040      656E645F 
 21040      74706F69 
 21040      6E7400
 21041              	.LASF15:
 21042 0eaf 696E7433 		.ascii	"int32\000"
 21042      3200
 21043              	.LASF243:
 21044 0eb5 73746570 		.ascii	"step_abs_ratio\000"
 21044      5F616273 
 21044      5F726174 
 21044      696F00
 21045              	.LASF89:
 21046 0ec4 63616D5F 		.ascii	"cam_gyroroll\000"
 21046      6779726F 
 21046      726F6C6C 
 21046      00
 21047              	.LASF256:
 21048 0ed1 65786974 		.ascii	"exit_showencf\000"
 21048      5F73686F 
 21048      77656E63 
 21048      6600
 21049              	.LASF69:
 21050 0edf 736C6176 		.ascii	"slave_encoder_step_p0\000"
 21050      655F656E 
 21050      636F6465 
 21050      725F7374 
 21050      65705F70 
 21051              	.LASF290:
 21052 0ef5 74696C74 		.ascii	"tilt_absolute_sensor_stat\000"
 21052      5F616273 
 21052      6F6C7574 
 21052      655F7365 
ARM GAS  C:\Users\GRAZIA~1.RAV\AppData\Local\Temp\ccodpSVr.s 			page 531


 21052      6E736F72 
 21053              	.LASF192:
 21054 0f0f 53544154 		.ascii	"STATISTICS\000"
 21054      49535449 
 21054      435300
 21055              	.LASF212:
 21056 0f1a 7663616C 		.ascii	"vcalc\000"
 21056      6300
 21057              	.LASF138:
 21058 0f20 696E6572 		.ascii	"inertial\000"
 21058      7469616C 
 21058      00
 21059              	.LASF168:
 21060 0f29 74726170 		.ascii	"trapezoid\000"
 21060      657A6F69 
 21060      6400
 21061              	.LASF303:
 21062 0f33 6576656E 		.ascii	"events\000"
 21062      747300
 21063              	.LASF59:
 21064 0f3a 70617261 		.ascii	"param\000"
 21064      6D00
 21065              	.LASF116:
 21066 0f40 70776D5F 		.ascii	"pwm_var\000"
 21066      76617200 
 21067              	.LASF11:
 21068 0f48 75696E74 		.ascii	"uint16\000"
 21068      313600
 21069              	.LASF234:
 21070 0f4f 75696479 		.ascii	"uidy\000"
 21070      00
 21071              	.LASF268:
 21072 0f54 636C755F 		.ascii	"clu_step\000"
 21072      73746570 
 21072      00
 21073              	.LASF282:
 21074 0f5d 636C755F 		.ascii	"clu_sm\000"
 21074      736D00
 21075              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br

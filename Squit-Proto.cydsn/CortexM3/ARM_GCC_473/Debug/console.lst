ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"console.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	TORQUESTAT,32,8
  19              		.global	userInputBuffer
  20              		.bss
  21              		.align	2
  22              		.type	userInputBuffer, %object
  23              		.size	userInputBuffer, 40
  24              	userInputBuffer:
  25 0000 00000000 		.space	40
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.comm	actual_cmd,45,4
  27              		.comm	USB_Check_prev,1,1
  28              		.global	slegenda
  29              		.align	2
  30              		.type	slegenda, %object
  31              		.size	slegenda, 15
  32              	slegenda:
  33 0028 00000000 		.space	15
  33      00000000 
  33      00000000 
  33      000000
  34 0037 00       		.section	.rodata
  35              		.align	2
  36              	.LC0:
  37 0000 28534D5F 		.ascii	"(SM_ON_ORIGIN)\000"
  37      4F4E5F4F 
  37      52494749 
  37      4E2900
  38 000f 00       		.align	2
  39              	.LC1:
  40 0010 28534D5F 		.ascii	"(SM_MOVING_TO_FACE)\000"
  40      4D4F5649 
  40      4E475F54 
  40      4F5F4641 
  40      43452900 
  41              		.align	2
  42              	.LC2:
  43 0024 28534D5F 		.ascii	"(SM_ON_FACE)\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 2


  43      4F4E5F46 
  43      41434529 
  43      00
  44 0031 000000   		.align	2
  45              	.LC3:
  46 0034 28534D5F 		.ascii	"(SM_MOVING_TO_ORIGIN)\000"
  46      4D4F5649 
  46      4E475F54 
  46      4F5F4F52 
  46      4947494E 
  47 004a 0000     		.align	2
  48              	.LC4:
  49 004c 28534D5F 		.ascii	"(SM_MOVING_PANORAMIC)\000"
  49      4D4F5649 
  49      4E475F50 
  49      414E4F52 
  49      414D4943 
  50 0062 0000     		.align	2
  51              	.LC5:
  52 0064 28534D5F 		.ascii	"(SM_MOVING_JUMP)\000"
  52      4D4F5649 
  52      4E475F4A 
  52      554D5029 
  52      00
  53 0075 000000   		.align	2
  54              	.LC6:
  55 0078 28534D5F 		.ascii	"(SM_MOVING_TO_WHEEL)\000"
  55      4D4F5649 
  55      4E475F54 
  55      4F5F5748 
  55      45454C29 
  56 008d 000000   		.align	2
  57              	.LC7:
  58 0090 28534D5F 		.ascii	"(SM_ON_WHEEL)\000"
  58      4F4E5F57 
  58      4845454C 
  58      2900
  59 009e 0000     		.align	2
  60              	.LC8:
  61 00a0 28534D5F 		.ascii	"(SM_STANDBY)\000"
  61      5354414E 
  61      44425929 
  61      00
  62 00ad 000000   		.align	2
  63              	.LC9:
  64 00b0 282A6572 		.ascii	"(*err)\000"
  64      722900
  65              		.section	.text.ShowStatusMappingSM,"ax",%progbits
  66              		.align	2
  67              		.global	ShowStatusMappingSM
  68              		.thumb
  69              		.thumb_func
  70              		.type	ShowStatusMappingSM, %function
  71              	ShowStatusMappingSM:
  72              	.LFB56:
  73              		.file 1 ".\\console.c"
   1:.\console.c   **** /* ==============================================
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 3


   2:.\console.c   ****  *                                              *
   3:.\console.c   ****  * GoBee Director Console Interface functions	*
   4:.\console.c   ****  *												*
   5:.\console.c   ****  * Copyright 2017 Gobee Srl		         		*
   6:.\console.c   ****  * Author : Graziano G. Ravizza                 *
   7:.\console.c   ****  * All Rights Reserved							*
   8:.\console.c   ****  * UNPUBLISHED, LICENSED SOFTWARE.				*
   9:.\console.c   ****  *												*
  10:.\console.c   ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION		*
  11:.\console.c   ****  * WHICH IS THE PROPERTY OF Gobee Srl			*
  12:.\console.c   ****  * ==============================================
  13:.\console.c   **** */
  14:.\console.c   **** 
  15:.\console.c   **** /* Include files */
  16:.\console.c   **** #include <device.h>
  17:.\console.c   **** #include <stdio.h>
  18:.\console.c   **** #include <stdlib.h>
  19:.\console.c   **** #include <string.h>
  20:.\console.c   **** #include <math.h>
  21:.\console.c   **** 
  22:.\console.c   **** #include <gobee.h>
  23:.\console.c   **** #include <console.h>
  24:.\console.c   **** #include <systrings.h>
  25:.\console.c   **** #include <gobeelib.h>
  26:.\console.c   **** #include <ITG-3701.h>
  27:.\console.c   **** #include <IMU_UM7.h>
  28:.\console.c   **** #include <XTR-8LR100.h>
  29:.\console.c   **** #include <mover.h>
  30:.\console.c   **** #include <motor_CTRL.h>
  31:.\console.c   **** #include <pid_lib.h>
  32:.\console.c   **** #include <My_I2C_lib.h>
  33:.\console.c   **** #include <estimators.h>
  34:.\console.c   **** #include <clu.h>
  35:.\console.c   **** #include <gml.h>
  36:.\console.c   **** #include <statistics.h>
  37:.\console.c   **** #include <torquestat.h>
  38:.\console.c   **** 
  39:.\console.c   **** 
  40:.\console.c   **** /* External Global Wars */
  41:.\console.c   **** extern struct GOBEE_PARAMS gobee_param;
  42:.\console.c   **** extern int16 AdcValue[ADC_MUX_LENGHT];
  43:.\console.c   **** 
  44:.\console.c   **** extern uint8 machine_state;			/* Initial Machine State = POWERON 					*/
  45:.\console.c   **** 									/* Machine States = [POWERON | OPERATIVE | FAULT]	*/
  46:.\console.c   **** 
  47:.\console.c   **** /* GoBee Faults structure */
  48:.\console.c   **** extern struct GOBEE_FAULTS gobeeFaults;	
  49:.\console.c   **** 
  50:.\console.c   **** /* External CLU execution state machine */
  51:.\console.c   **** extern struct CLU_STATEMACHINE clu_sm;		
  52:.\console.c   **** 
  53:.\console.c   **** /* extern Control Variables */
  54:.\console.c   **** extern float fsampling;			/* fsampling [kHz]							*/
  55:.\console.c   **** 
  56:.\console.c   **** 
  57:.\console.c   **** /* External Motor Axis 		 */
  58:.\console.c   **** extern struct MOTOR_AXIS pan_axis; 					/* PAN  Motor Axis Parameters & RT Datas			   */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 4


  59:.\console.c   **** extern struct MOTOR_AXIS tilt_axis; 				/* TILT Motor Axis Parameters & RT Datas			   */
  60:.\console.c   **** extern struct MOTOR_AXIS *Selected_ANAOUT;			/* Selected Axis for Analog Output					   */
  61:.\console.c   **** 
  62:.\console.c   **** /* EXTERNAL Absolute Position Sensor */
  63:.\console.c   **** extern struct ABSPOS_SENSOR	pan_absolute_sensor;	/* PAN  Absolute Position Sensor Parameters & RT D
  64:.\console.c   **** extern struct ABSPOS_SENSOR	tilt_absolute_sensor;	/* TILT Absolute Position Sensor Parameters & RT 
  65:.\console.c   **** 
  66:.\console.c   **** /* extern axis absolute sensor STATISTICS	*/
  67:.\console.c   **** extern struct STATISTICS pan_absolute_sensor_stat;	/* PAN  Absolute Position Sensor Statistics Data
  68:.\console.c   **** extern struct STATISTICS tilt_absolute_sensor_stat;	/* TILT Absolute Position Sensor Statistics Dat
  69:.\console.c   **** 
  70:.\console.c   **** /* extern axis current and power STATISTICS	*/
  71:.\console.c   **** extern struct STATISTICS pan_current_stat;			/* PAN  Current  Statistic    [A]           (Motor Tor
  72:.\console.c   **** extern struct STATISTICS pan_qpower_stat;			/* PAN  quasi-power Statistic [A * rad/sec] (Motor Powe
  73:.\console.c   **** extern struct STATISTICS tilt_current_stat;			/* TILT Current  Statistic    [A]           (Motor To
  74:.\console.c   **** extern struct STATISTICS tilt_qpower_stat;			/* TILT quasi-power Statistic [A * rad/sec] (Motor Pow
  75:.\console.c   **** 
  76:.\console.c   **** /* extern axis TORQUE Estimator	*/
  77:.\console.c   **** extern struct TORQUESTAT pan_torque_stat;			/* PAN  Torque Statistics Real Time Datas	*/
  78:.\console.c   **** extern struct TORQUESTAT tilt_torque_stat;			/* TILT Torque Statistics Real Time Datas	*/
  79:.\console.c   **** 
  80:.\console.c   **** /* EXTERN MOVER PATH Array */
  81:.\console.c   **** extern path_type path[PATH_N_MAX];		/* path array structure 	*/
  82:.\console.c   **** extern path_type path_to_home;			/* path to home structure instatiation		*/
  83:.\console.c   **** 
  84:.\console.c   **** /* EXTERN MOVER PAN&TILT PATHs */
  85:.\console.c   **** extern mover_type mover_pan;			/* mover PAN structure 		*/
  86:.\console.c   **** extern mover_type mover_tilt;			/* mover TILT structure 	*/
  87:.\console.c   **** 
  88:.\console.c   **** /* external Q elements (shots) ARRAY	*/
  89:.\console.c   **** extern struct QELEMENT q[MAX_Q_MEMORIES_SAFE];
  90:.\console.c   **** 
  91:.\console.c   **** /* external [Q number --> Q memory index] table for fast indexing */
  92:.\console.c   **** extern uint8 q_table[MAX_Q_NUMBER_SAFE];
  93:.\console.c   **** extern uint8 qmemory_standard_address[MAX_Q_NUMBER_SAFE]; 
  94:.\console.c   **** 
  95:.\console.c   **** /* EXTERN CLU Sequence Array 	*/
  96:.\console.c   **** extern uint8 clu_sequence[MAX_CLU_SEQUENCE_STEPS];
  97:.\console.c   **** 
  98:.\console.c   **** /* external events structure	*/
  99:.\console.c   **** extern struct EVENTS events;
 100:.\console.c   **** 
 101:.\console.c   **** /* extern IMU UM7 vars */ 
 102:.\console.c   **** #if IMU_UM7_ENABLED
 103:.\console.c   **** extern EULER_ANGLES euler_angles; 		/* Struttura in cui vengono messi gli angoli di Eulero misurati
 104:.\console.c   **** #endif
 105:.\console.c   **** 
 106:.\console.c   **** /* extern IMU sensor vars */
 107:.\console.c   **** extern struct IMU_SENSOR	IMU_sensor;		/* Struttura dei dati della IMU */
 108:.\console.c   **** 
 109:.\console.c   **** /* external ITG-3701 digital gyro vars */
 110:.\console.c   **** extern float gRes;      				// scale resolutions per LSB for the sensors
 111:.\console.c   **** extern int16 gyroCount[3];  			// Stores the 16-bit signed gyro output
 112:.\console.c   **** extern float gx, gy, gz; 				// variables to hold latest sensor data values 
 113:.\console.c   **** extern float gyroBias[3];			 	// Bias corrections for gyro, accelerometer, and magnetometer
 114:.\console.c   **** extern float temperature;          		// Stores the ITG3701yro internal chip temperature in degrees 
 115:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 5


 116:.\console.c   **** /* extern accelerometer and gyroscopes and estimated Variables */
 117:.\console.c   **** extern int16 gyro_ADC_offset;			/* analog gyroscope ADC offset				*/
 118:.\console.c   **** 
 119:.\console.c   **** //extern float angle_estim_analog_gyro;	/* estimated angle [deg] from ADXRS646     (analog gyro) 		
 120:.\console.c   **** //extern float angle_estim_digital_gyro;	/* estimated angle [deg] from ADXRS453     (digital gyro)	
 121:.\console.c   **** //extern float angle_estim_acc;			/* estimated angle [deg] from ADXL203      (analog accelerometer)
 122:.\console.c   **** //extern float angle_estim_acc_lowpass;	/* Low Pass Filtered estimated angle [deg] (analog accelero
 123:.\console.c   **** 
 124:.\console.c   **** extern signed long system_dynamic_scalar;	/* x_acc_ADC^2 + y_acc_ADC^2 - (1g_ADC)^2						*/
 125:.\console.c   **** 
 126:.\console.c   **** //extern float gyro;					/* analog gyroscope float value						*/
 127:.\console.c   **** //extern float gyro_offset_fine;		/* fine Gyro offset									*/
 128:.\console.c   **** //extern float int_gyro;				/* estimated angle [deg] from ADXRS646				*/
 129:.\console.c   **** //extern float angle;					/* Complementary Filter Estimated angle float [deg]	*/
 130:.\console.c   **** extern float angle_lowpass;
 131:.\console.c   **** extern float agyro_mean;			/* analog gyro mean_value(t)						*/
 132:.\console.c   **** extern float agyro_mean_previous;	/* analog gyro mean_value(t-1)						*/
 133:.\console.c   **** extern uint32 iteration;			/* mean value iteration counter						*/
 134:.\console.c   **** extern uint8 agyro_messg;			/* analog gyro message passing console --> isr_ctrl	*/
 135:.\console.c   **** extern uint16 GyroNullPauseTicks;	/* centiseconds ticks counter for Gyroscope Autonull Procedure De
 136:.\console.c   **** 
 137:.\console.c   **** /* extern Analog ADXL325 3D accelerometer vars) */
 138:.\console.c   **** extern struct ANALOG_3D_ACCELEROMETER aacc;
 139:.\console.c   **** 
 140:.\console.c   **** /* GLOBAL Analog External ADXRS646 gyroscope vars) */
 141:.\console.c   **** extern struct ANALOG_GYRO agyro;
 142:.\console.c   **** 
 143:.\console.c   **** //extern Digital Gyroscope Vars
 144:.\console.c   **** extern unsigned long int dgyro_spi32;	/* ADXRS453 Digital Gyro 32 bit SPI Response			*/
 145:.\console.c   **** extern float dgyro_rate_float;			/* ADXRS453 Digital Gyro Rate (float) [deg/sec] 		*/
 146:.\console.c   **** extern float dgyro_mean;				/* digital gyro mean_value(t)							*/
 147:.\console.c   **** extern float dgyro_mean_of;				/* digital gyro ofsetted mean_value(t)					*/
 148:.\console.c   **** extern uint8 dgyro_messg;				/* digital gyro message passing console --> isr_ctrl	*/
 149:.\console.c   **** 
 150:.\console.c   **** /* extern anapos vars */
 151:.\console.c   **** extern float anapos;					/* Analog Position Output(t) 				*/
 152:.\console.c   **** extern int32 anapos_offset;				/* Analog Position Output Offset			*/
 153:.\console.c   **** 
 154:.\console.c   **** /* EXTERNAL CONTROL CHECK VARS */
 155:.\console.c   **** extern uint16 isr_START_check_counter;
 156:.\console.c   **** extern uint16 isr_STOP_check_counter;
 157:.\console.c   **** 
 158:.\console.c   **** /* EXTERNAL EEPROM Buffers */
 159:.\console.c   **** extern char8 EEreadBuffer[18];
 160:.\console.c   **** extern char8 EEwriteBuffer[18];
 161:.\console.c   **** 
 162:.\console.c   **** extern struct  GOBEE_FAULTS nemo_Faults;			/* Faults Flags Structure */
 163:.\console.c   **** 
 164:.\console.c   **** 
 165:.\console.c   **** /* ASTIM WAVES (3Hz - 3333 samples/sec */
 166:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_sine[WaveDAC8_WAVE_SINE_LENGTH];
 167:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_triangle[WaveDAC8_WAVE_TRIANGLE_LENGTH];
 168:.\console.c   **** extern const uint8 CYCODE WaveDAC8_wave_square[WaveDAC8_WAVE_SQUARE_LENGTH];
 169:.\console.c   **** 
 170:.\console.c   **** /* Console Module Wars */
 171:.\console.c   **** char   userInputBuffer[40]="";		/* User Input Buffer from USB UART 	*/
 172:.\console.c   **** struct command actual_cmd;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 6


 173:.\console.c   **** uint8  USB_Check_prev;				/* USB Check(t-1) 					*/
 174:.\console.c   **** char   slegenda[15]="";				/* hystogram legenda string 		*/
 175:.\console.c   **** 
 176:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 177:.\console.c   **** // Show Status of the Mapping State Machine Auxiliary Functions
 178:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 179:.\console.c   **** void ShowStatusMappingSM(uint8 status)
 180:.\console.c   **** {
  74              		.loc 1 180 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              	.LCFI2:
  88              		.cfi_def_cfa_register 7
  89 0006 0346     		mov	r3, r0
  90 0008 FB71     		strb	r3, [r7, #7]
 181:.\console.c   **** 	switch (status)
  91              		.loc 1 181 0
  92 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  93 000c 042B     		cmp	r3, #4
  94 000e 32D0     		beq	.L7
  95 0010 042B     		cmp	r3, #4
  96 0012 0BDC     		bgt	.L12
  97 0014 012B     		cmp	r3, #1
  98 0016 19D0     		beq	.L4
  99 0018 012B     		cmp	r3, #1
 100 001a 02DC     		bgt	.L13
 101 001c 002B     		cmp	r3, #0
 102 001e 0ED0     		beq	.L3
 103 0020 4CE0     		b	.L2
 104              	.L13:
 105 0022 022B     		cmp	r3, #2
 106 0024 19D0     		beq	.L5
 107 0026 032B     		cmp	r3, #3
 108 0028 1ED0     		beq	.L6
 109 002a 47E0     		b	.L2
 110              	.L12:
 111 002c 062B     		cmp	r3, #6
 112 002e 30D0     		beq	.L9
 113 0030 062B     		cmp	r3, #6
 114 0032 27DB     		blt	.L8
 115 0034 072B     		cmp	r3, #7
 116 0036 33D0     		beq	.L10
 117 0038 632B     		cmp	r3, #99
 118 003a 38D0     		beq	.L11
 119 003c 3EE0     		b	.L2
 120              	.L3:
 182:.\console.c   **** 	{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 7


 183:.\console.c   **** 		case SM_ON_ORIGIN:
 184:.\console.c   **** 			printf("(SM_ON_ORIGIN)");
 121              		.loc 1 184 0
 122 003e 40F20000 		movw	r0, #:lower16:.LC0
 123 0042 C0F20000 		movt	r0, #:upper16:.LC0
 124 0046 FFF7FEFF 		bl	printf
 185:.\console.c   **** 		break;	
 125              		.loc 1 185 0
 126 004a 3EE0     		b	.L1
 127              	.L4:
 186:.\console.c   **** 		case SM_MOVING_TO_FACE:
 187:.\console.c   **** 			printf("(SM_MOVING_TO_FACE)");
 128              		.loc 1 187 0
 129 004c 40F20000 		movw	r0, #:lower16:.LC1
 130 0050 C0F20000 		movt	r0, #:upper16:.LC1
 131 0054 FFF7FEFF 		bl	printf
 188:.\console.c   **** 		break;		
 132              		.loc 1 188 0
 133 0058 37E0     		b	.L1
 134              	.L5:
 189:.\console.c   **** 		case SM_ON_FACE:
 190:.\console.c   **** 			printf("(SM_ON_FACE)");
 135              		.loc 1 190 0
 136 005a 40F20000 		movw	r0, #:lower16:.LC2
 137 005e C0F20000 		movt	r0, #:upper16:.LC2
 138 0062 FFF7FEFF 		bl	printf
 191:.\console.c   **** 		break;
 139              		.loc 1 191 0
 140 0066 30E0     		b	.L1
 141              	.L6:
 192:.\console.c   **** 		case SM_MOVING_TO_ORIGIN:
 193:.\console.c   **** 			printf("(SM_MOVING_TO_ORIGIN)");
 142              		.loc 1 193 0
 143 0068 40F20000 		movw	r0, #:lower16:.LC3
 144 006c C0F20000 		movt	r0, #:upper16:.LC3
 145 0070 FFF7FEFF 		bl	printf
 194:.\console.c   **** 		break;
 146              		.loc 1 194 0
 147 0074 29E0     		b	.L1
 148              	.L7:
 195:.\console.c   **** 		case SM_MOVING_PANORAMIC:
 196:.\console.c   **** 			printf("(SM_MOVING_PANORAMIC)");
 149              		.loc 1 196 0
 150 0076 40F20000 		movw	r0, #:lower16:.LC4
 151 007a C0F20000 		movt	r0, #:upper16:.LC4
 152 007e FFF7FEFF 		bl	printf
 197:.\console.c   **** 		break;
 153              		.loc 1 197 0
 154 0082 22E0     		b	.L1
 155              	.L8:
 198:.\console.c   **** 		case SM_MOVING_JUMP:
 199:.\console.c   **** 			printf("(SM_MOVING_JUMP)");
 156              		.loc 1 199 0
 157 0084 40F20000 		movw	r0, #:lower16:.LC5
 158 0088 C0F20000 		movt	r0, #:upper16:.LC5
 159 008c FFF7FEFF 		bl	printf
 200:.\console.c   **** 		break;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 8


 160              		.loc 1 200 0
 161 0090 1BE0     		b	.L1
 162              	.L9:
 201:.\console.c   **** 		case SM_MOVING_TO_WHEEL:
 202:.\console.c   **** 			printf("(SM_MOVING_TO_WHEEL)");
 163              		.loc 1 202 0
 164 0092 40F20000 		movw	r0, #:lower16:.LC6
 165 0096 C0F20000 		movt	r0, #:upper16:.LC6
 166 009a FFF7FEFF 		bl	printf
 203:.\console.c   **** 		break;			
 167              		.loc 1 203 0
 168 009e 14E0     		b	.L1
 169              	.L10:
 204:.\console.c   **** 		case SM_ON_WHEEL:
 205:.\console.c   **** 			printf("(SM_ON_WHEEL)");
 170              		.loc 1 205 0
 171 00a0 40F20000 		movw	r0, #:lower16:.LC7
 172 00a4 C0F20000 		movt	r0, #:upper16:.LC7
 173 00a8 FFF7FEFF 		bl	printf
 206:.\console.c   **** 		break;			
 174              		.loc 1 206 0
 175 00ac 0DE0     		b	.L1
 176              	.L11:
 207:.\console.c   **** 		case SM_STANDBY:
 208:.\console.c   **** 			printf("(SM_STANDBY)");
 177              		.loc 1 208 0
 178 00ae 40F20000 		movw	r0, #:lower16:.LC8
 179 00b2 C0F20000 		movt	r0, #:upper16:.LC8
 180 00b6 FFF7FEFF 		bl	printf
 209:.\console.c   **** 		break;			
 181              		.loc 1 209 0
 182 00ba 06E0     		b	.L1
 183              	.L2:
 210:.\console.c   **** 		default:
 211:.\console.c   **** 			printf("(*err)");
 184              		.loc 1 211 0
 185 00bc 40F20000 		movw	r0, #:lower16:.LC9
 186 00c0 C0F20000 		movt	r0, #:upper16:.LC9
 187 00c4 FFF7FEFF 		bl	printf
 212:.\console.c   **** 		break;
 188              		.loc 1 212 0
 189 00c8 00BF     		nop
 190              	.L1:
 213:.\console.c   **** 	}
 214:.\console.c   **** }
 191              		.loc 1 214 0
 192 00ca 07F10807 		add	r7, r7, #8
 193 00ce BD46     		mov	sp, r7
 194 00d0 80BD     		pop	{r7, pc}
 195              		.cfi_endproc
 196              	.LFE56:
 197              		.size	ShowStatusMappingSM, .-ShowStatusMappingSM
 198 00d2 00BF     		.section	.rodata
 199 00b7 00       		.align	2
 200              	.LC10:
 201 00b8 28434C55 		.ascii	"(CLUSM_NOP)\000"
 201      534D5F4E 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 9


 201      4F502900 
 202              		.align	2
 203              	.LC11:
 204 00c4 28434C55 		.ascii	"(CLUSM_START)\000"
 204      534D5F53 
 204      54415254 
 204      2900
 205 00d2 0000     		.align	2
 206              	.LC12:
 207 00d4 28434C55 		.ascii	"(CLUSM_LINE_EXECUTING)\000"
 207      534D5F4C 
 207      494E455F 
 207      45584543 
 207      5554494E 
 208 00eb 00       		.align	2
 209              	.LC13:
 210 00ec 28434C55 		.ascii	"(CLUSM_PAUSE_EXECUTION)\000"
 210      534D5F50 
 210      41555345 
 210      5F455845 
 210      43555449 
 211              		.align	2
 212              	.LC14:
 213 0104 28434C55 		.ascii	"(CLUSM_PGOTO_EXECUTION)\000"
 213      534D5F50 
 213      474F544F 
 213      5F455845 
 213      43555449 
 214              		.align	2
 215              	.LC15:
 216 011c 28434C55 		.ascii	"(CLUSM_TGOTO_EXECUTION)\000"
 216      534D5F54 
 216      474F544F 
 216      5F455845 
 216      43555449 
 217              		.align	2
 218              	.LC16:
 219 0134 28434C55 		.ascii	"(CLUSM_PATH_EXECUTION)\000"
 219      534D5F50 
 219      4154485F 
 219      45584543 
 219      5554494F 
 220 014b 00       		.align	2
 221              	.LC17:
 222 014c 28434C55 		.ascii	"(CLUSM_LINE_EXECUTED)\000"
 222      534D5F4C 
 222      494E455F 
 222      45584543 
 222      55544544 
 223 0162 0000     		.align	2
 224              	.LC18:
 225 0164 28434C55 		.ascii	"(CLUSM_STOP)\000"
 225      534D5F53 
 225      544F5029 
 225      00
 226 0171 000000   		.align	2
 227              	.LC19:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 10


 228 0174 28434C55 		.ascii	"(CLUSM_END)\000"
 228      534D5F45 
 228      4E442900 
 229              		.section	.text.ShowCLUSM,"ax",%progbits
 230              		.align	2
 231              		.global	ShowCLUSM
 232              		.thumb
 233              		.thumb_func
 234              		.type	ShowCLUSM, %function
 235              	ShowCLUSM:
 236              	.LFB57:
 215:.\console.c   **** 
 216:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 217:.\console.c   **** // Show Status of the CLU Machine Auxiliary Functions
 218:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 219:.\console.c   **** void ShowCLUSM(uint8 status)
 220:.\console.c   **** {
 237              		.loc 1 220 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 8
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241 0000 80B5     		push	{r7, lr}
 242              	.LCFI3:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 7, -8
 245              		.cfi_offset 14, -4
 246 0002 82B0     		sub	sp, sp, #8
 247              	.LCFI4:
 248              		.cfi_def_cfa_offset 16
 249 0004 00AF     		add	r7, sp, #0
 250              	.LCFI5:
 251              		.cfi_def_cfa_register 7
 252 0006 0346     		mov	r3, r0
 253 0008 FB71     		strb	r3, [r7, #7]
 221:.\console.c   **** 	switch (status)
 254              		.loc 1 221 0
 255 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 256 000c 0C2B     		cmp	r3, #12
 257 000e 63D8     		bhi	.L16
 258 0010 01A2     		adr	r2, .L27
 259 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 260 0016 00BF     		.align	2
 261              	.L27:
 262 0018 4D000000 		.word	.L17+1
 263 001c 5B000000 		.word	.L18+1
 264 0020 69000000 		.word	.L19+1
 265 0024 77000000 		.word	.L20+1
 266 0028 85000000 		.word	.L21+1
 267 002c 93000000 		.word	.L22+1
 268 0030 A1000000 		.word	.L23+1
 269 0034 D9000000 		.word	.L16+1
 270 0038 D9000000 		.word	.L16+1
 271 003c D9000000 		.word	.L16+1
 272 0040 AF000000 		.word	.L24+1
 273 0044 BD000000 		.word	.L25+1
 274 0048 CB000000 		.word	.L26+1
 275              	.L17:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 11


 222:.\console.c   **** 	{
 223:.\console.c   **** 		case CLUSM_NOP:
 224:.\console.c   **** 			printf("(CLUSM_NOP)");
 276              		.loc 1 224 0
 277 004c 40F20000 		movw	r0, #:lower16:.LC10
 278 0050 C0F20000 		movt	r0, #:upper16:.LC10
 279 0054 FFF7FEFF 		bl	printf
 225:.\console.c   **** 		break;	
 280              		.loc 1 225 0
 281 0058 45E0     		b	.L15
 282              	.L18:
 226:.\console.c   **** 		case CLUSM_START:
 227:.\console.c   **** 			printf("(CLUSM_START)");
 283              		.loc 1 227 0
 284 005a 40F20000 		movw	r0, #:lower16:.LC11
 285 005e C0F20000 		movt	r0, #:upper16:.LC11
 286 0062 FFF7FEFF 		bl	printf
 228:.\console.c   **** 		break;
 287              		.loc 1 228 0
 288 0066 3EE0     		b	.L15
 289              	.L19:
 229:.\console.c   **** 		case CLUSM_LINE_EXECUTING:
 230:.\console.c   **** 			printf("(CLUSM_LINE_EXECUTING)");
 290              		.loc 1 230 0
 291 0068 40F20000 		movw	r0, #:lower16:.LC12
 292 006c C0F20000 		movt	r0, #:upper16:.LC12
 293 0070 FFF7FEFF 		bl	printf
 231:.\console.c   **** 		break;
 294              		.loc 1 231 0
 295 0074 37E0     		b	.L15
 296              	.L20:
 232:.\console.c   **** 		case CLUSM_PAUSE_EXECUTION:
 233:.\console.c   **** 			printf("(CLUSM_PAUSE_EXECUTION)");
 297              		.loc 1 233 0
 298 0076 40F20000 		movw	r0, #:lower16:.LC13
 299 007a C0F20000 		movt	r0, #:upper16:.LC13
 300 007e FFF7FEFF 		bl	printf
 234:.\console.c   **** 		break;		
 301              		.loc 1 234 0
 302 0082 30E0     		b	.L15
 303              	.L21:
 235:.\console.c   **** 		case CLUSM_PGOTO_EXECUTION:
 236:.\console.c   **** 			printf("(CLUSM_PGOTO_EXECUTION)");
 304              		.loc 1 236 0
 305 0084 40F20000 		movw	r0, #:lower16:.LC14
 306 0088 C0F20000 		movt	r0, #:upper16:.LC14
 307 008c FFF7FEFF 		bl	printf
 237:.\console.c   **** 		break;	
 308              		.loc 1 237 0
 309 0090 29E0     		b	.L15
 310              	.L22:
 238:.\console.c   **** 		case CLUSM_TGOTO_EXECUTION:
 239:.\console.c   **** 			printf("(CLUSM_TGOTO_EXECUTION)");
 311              		.loc 1 239 0
 312 0092 40F20000 		movw	r0, #:lower16:.LC15
 313 0096 C0F20000 		movt	r0, #:upper16:.LC15
 314 009a FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 12


 240:.\console.c   **** 		break;
 315              		.loc 1 240 0
 316 009e 22E0     		b	.L15
 317              	.L23:
 241:.\console.c   **** 		case CLUSM_PATH_EXECUTION:
 242:.\console.c   **** 			printf("(CLUSM_PATH_EXECUTION)");
 318              		.loc 1 242 0
 319 00a0 40F20000 		movw	r0, #:lower16:.LC16
 320 00a4 C0F20000 		movt	r0, #:upper16:.LC16
 321 00a8 FFF7FEFF 		bl	printf
 243:.\console.c   **** 		break;		
 322              		.loc 1 243 0
 323 00ac 1BE0     		b	.L15
 324              	.L24:
 244:.\console.c   **** 		case CLUSM_LINE_EXECUTED:
 245:.\console.c   **** 			printf("(CLUSM_LINE_EXECUTED)");
 325              		.loc 1 245 0
 326 00ae 40F20000 		movw	r0, #:lower16:.LC17
 327 00b2 C0F20000 		movt	r0, #:upper16:.LC17
 328 00b6 FFF7FEFF 		bl	printf
 246:.\console.c   **** 		break;		
 329              		.loc 1 246 0
 330 00ba 14E0     		b	.L15
 331              	.L25:
 247:.\console.c   **** 		case CLUSM_STOP:
 248:.\console.c   **** 			printf("(CLUSM_STOP)");
 332              		.loc 1 248 0
 333 00bc 40F20000 		movw	r0, #:lower16:.LC18
 334 00c0 C0F20000 		movt	r0, #:upper16:.LC18
 335 00c4 FFF7FEFF 		bl	printf
 249:.\console.c   **** 		break;	
 336              		.loc 1 249 0
 337 00c8 0DE0     		b	.L15
 338              	.L26:
 250:.\console.c   **** 		case CLUSM_END:
 251:.\console.c   **** 			printf("(CLUSM_END)");
 339              		.loc 1 251 0
 340 00ca 40F20000 		movw	r0, #:lower16:.LC19
 341 00ce C0F20000 		movt	r0, #:upper16:.LC19
 342 00d2 FFF7FEFF 		bl	printf
 252:.\console.c   **** 		break;			
 343              		.loc 1 252 0
 344 00d6 06E0     		b	.L15
 345              	.L16:
 253:.\console.c   **** 		default:
 254:.\console.c   **** 			printf("(*err)");
 346              		.loc 1 254 0
 347 00d8 40F20000 		movw	r0, #:lower16:.LC9
 348 00dc C0F20000 		movt	r0, #:upper16:.LC9
 349 00e0 FFF7FEFF 		bl	printf
 255:.\console.c   **** 		break;
 350              		.loc 1 255 0
 351 00e4 00BF     		nop
 352              	.L15:
 256:.\console.c   **** 	}
 257:.\console.c   **** }
 353              		.loc 1 257 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 13


 354 00e6 07F10807 		add	r7, r7, #8
 355 00ea BD46     		mov	sp, r7
 356 00ec 80BD     		pop	{r7, pc}
 357              		.cfi_endproc
 358              	.LFE57:
 359              		.size	ShowCLUSM, .-ShowCLUSM
 360 00ee 00BF     		.section	.rodata
 361              		.align	2
 362              	.LC20:
 363 0180 5374616E 		.ascii	"Stanley Kubrick\000"
 363      6C657920 
 363      4B756272 
 363      69636B00 
 364              		.align	2
 365              	.LC21:
 366 0190 416C6672 		.ascii	"Alfred Hitchcock\000"
 366      65642048 
 366      69746368 
 366      636F636B 
 366      00
 367 01a1 000000   		.align	2
 368              	.LC22:
 369 01a4 42726961 		.ascii	"Brian De Palma\000"
 369      6E204465 
 369      2050616C 
 369      6D6100
 370 01b3 00       		.align	2
 371              	.LC23:
 372 01b4 43686172 		.ascii	"Charlie Chaplin\000"
 372      6C696520 
 372      43686170 
 372      6C696E00 
 373              		.align	2
 374              	.LC24:
 375 01c4 44617669 		.ascii	"David Linch\000"
 375      64204C69 
 375      6E636800 
 376              		.align	2
 377              	.LC25:
 378 01d0 4672616E 		.ascii	"Francis Ford Coppola\000"
 378      63697320 
 378      466F7264 
 378      20436F70 
 378      706F6C61 
 379 01e5 000000   		.align	2
 380              	.LC26:
 381 01e8 4D617274 		.ascii	"Martin Scorsese\000"
 381      696E2053 
 381      636F7273 
 381      65736500 
 382              		.align	2
 383              	.LC27:
 384 01f8 5175656E 		.ascii	"Quentin Tarantino\000"
 384      74696E20 
 384      54617261 
 384      6E74696E 
 384      6F00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 14


 385 020a 0000     		.align	2
 386              	.LC28:
 387 020c 5269646C 		.ascii	"Ridley Scott\000"
 387      65792053 
 387      636F7474 
 387      00
 388 0219 000000   		.align	2
 389              	.LC29:
 390 021c 53657267 		.ascii	"Sergio Leone\000"
 390      696F204C 
 390      656F6E65 
 390      00
 391 0229 000000   		.align	2
 392              	.LC30:
 393 022c 53746576 		.ascii	"Steven Spielberg\000"
 393      656E2053 
 393      7069656C 
 393      62657267 
 393      00
 394 023d 000000   		.align	2
 395              	.LC31:
 396 0240 54696D20 		.ascii	"Tim Burton\000"
 396      42757274 
 396      6F6E00
 397 024b 00       		.align	2
 398              	.LC32:
 399 024c 57657320 		.ascii	"Wes Craven\000"
 399      43726176 
 399      656E00
 400 0257 00       		.align	2
 401              	.LC33:
 402 0258 46656465 		.ascii	"Federico Fellini\000"
 402      7269636F 
 402      2046656C 
 402      6C696E69 
 402      00
 403 0269 000000   		.align	2
 404              	.LC34:
 405 026c 43687269 		.ascii	"Christopher Nolan\000"
 405      73746F70 
 405      68657220 
 405      4E6F6C61 
 405      6E00
 406 027e 0000     		.align	2
 407              	.LC35:
 408 0280 47756C6C 		.ascii	"Gullermo Del Toro\000"
 408      65726D6F 
 408      2044656C 
 408      20546F72 
 408      6F00
 409 0292 0000     		.align	2
 410              	.LC36:
 411 0294 47656F72 		.ascii	"George Lucas\000"
 411      6765204C 
 411      75636173 
 411      00
 412 02a1 000000   		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 15


 413              	.LC37:
 414 02a4 4A2E4A2E 		.ascii	"J.J. Abrams\000"
 414      20416272 
 414      616D7300 
 415              		.align	2
 416              	.LC38:
 417 02b0 596F7500 		.ascii	"You\000"
 418              		.section	.text.ShowParamsDirector,"ax",%progbits
 419              		.align	2
 420              		.global	ShowParamsDirector
 421              		.thumb
 422              		.thumb_func
 423              		.type	ShowParamsDirector, %function
 424              	ShowParamsDirector:
 425              	.LFB58:
 258:.\console.c   **** 
 259:.\console.c   **** 
 260:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 261:.\console.c   **** // Show Parameters Auxiliary Functions
 262:.\console.c   **** //////////////////////////////////////////////////////////////////////////
 263:.\console.c   **** void ShowParamsDirector(void)
 264:.\console.c   **** {	
 426              		.loc 1 264 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430 0000 80B5     		push	{r7, lr}
 431              	.LCFI6:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 00AF     		add	r7, sp, #0
 436              	.LCFI7:
 437              		.cfi_def_cfa_register 7
 265:.\console.c   **** 	switch (gobee_param.director)
 438              		.loc 1 265 0
 439 0004 40F20003 		movw	r3, #:lower16:gobee_param
 440 0008 C0F20003 		movt	r3, #:upper16:gobee_param
 441 000c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 442 000e 122B     		cmp	r3, #18
 443 0010 00F2A880 		bhi	.L30
 444 0014 01A2     		adr	r2, .L49
 445 0016 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 446 001a 00BF     		.align	2
 447              	.L49:
 448 001c 69000000 		.word	.L31+1
 449 0020 77000000 		.word	.L32+1
 450 0024 85000000 		.word	.L33+1
 451 0028 93000000 		.word	.L34+1
 452 002c A1000000 		.word	.L35+1
 453 0030 AF000000 		.word	.L36+1
 454 0034 BD000000 		.word	.L37+1
 455 0038 CB000000 		.word	.L38+1
 456 003c D9000000 		.word	.L39+1
 457 0040 E7000000 		.word	.L40+1
 458 0044 F5000000 		.word	.L41+1
 459 0048 03010000 		.word	.L42+1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 16


 460 004c 11010000 		.word	.L43+1
 461 0050 1F010000 		.word	.L44+1
 462 0054 65010000 		.word	.L30+1
 463 0058 2D010000 		.word	.L45+1
 464 005c 3B010000 		.word	.L46+1
 465 0060 49010000 		.word	.L47+1
 466 0064 57010000 		.word	.L48+1
 467              	.L31:
 266:.\console.c   **** 	{
 267:.\console.c   **** 		case STANLEY:
 268:.\console.c   **** 			printf("Stanley Kubrick");
 468              		.loc 1 268 0
 469 0068 40F20000 		movw	r0, #:lower16:.LC20
 470 006c C0F20000 		movt	r0, #:upper16:.LC20
 471 0070 FFF7FEFF 		bl	printf
 269:.\console.c   **** 			break;	
 472              		.loc 1 269 0
 473 0074 7DE0     		b	.L29
 474              	.L32:
 270:.\console.c   **** 		case ALFRED:
 271:.\console.c   **** 			printf("Alfred Hitchcock");
 475              		.loc 1 271 0
 476 0076 40F20000 		movw	r0, #:lower16:.LC21
 477 007a C0F20000 		movt	r0, #:upper16:.LC21
 478 007e FFF7FEFF 		bl	printf
 272:.\console.c   **** 			break;
 479              		.loc 1 272 0
 480 0082 76E0     		b	.L29
 481              	.L33:
 273:.\console.c   **** 		case DE_PALMA:
 274:.\console.c   **** 			printf("Brian De Palma");
 482              		.loc 1 274 0
 483 0084 40F20000 		movw	r0, #:lower16:.LC22
 484 0088 C0F20000 		movt	r0, #:upper16:.LC22
 485 008c FFF7FEFF 		bl	printf
 275:.\console.c   **** 			break;	
 486              		.loc 1 275 0
 487 0090 6FE0     		b	.L29
 488              	.L34:
 276:.\console.c   **** 		case CHARLIE:
 277:.\console.c   **** 			printf("Charlie Chaplin");
 489              		.loc 1 277 0
 490 0092 40F20000 		movw	r0, #:lower16:.LC23
 491 0096 C0F20000 		movt	r0, #:upper16:.LC23
 492 009a FFF7FEFF 		bl	printf
 278:.\console.c   **** 			break;	
 493              		.loc 1 278 0
 494 009e 68E0     		b	.L29
 495              	.L35:
 279:.\console.c   **** 		case LINCH:
 280:.\console.c   **** 			printf("David Linch");
 496              		.loc 1 280 0
 497 00a0 40F20000 		movw	r0, #:lower16:.LC24
 498 00a4 C0F20000 		movt	r0, #:upper16:.LC24
 499 00a8 FFF7FEFF 		bl	printf
 281:.\console.c   **** 			break;
 500              		.loc 1 281 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 17


 501 00ac 61E0     		b	.L29
 502              	.L36:
 282:.\console.c   **** 		case COPPOLA:
 283:.\console.c   **** 			printf("Francis Ford Coppola");
 503              		.loc 1 283 0
 504 00ae 40F20000 		movw	r0, #:lower16:.LC25
 505 00b2 C0F20000 		movt	r0, #:upper16:.LC25
 506 00b6 FFF7FEFF 		bl	printf
 284:.\console.c   **** 			break;
 507              		.loc 1 284 0
 508 00ba 5AE0     		b	.L29
 509              	.L37:
 285:.\console.c   **** 		case MARTIN:
 286:.\console.c   **** 			printf("Martin Scorsese");
 510              		.loc 1 286 0
 511 00bc 40F20000 		movw	r0, #:lower16:.LC26
 512 00c0 C0F20000 		movt	r0, #:upper16:.LC26
 513 00c4 FFF7FEFF 		bl	printf
 287:.\console.c   **** 			break;	
 514              		.loc 1 287 0
 515 00c8 53E0     		b	.L29
 516              	.L38:
 288:.\console.c   **** 		case QUENTIN:
 289:.\console.c   **** 			printf("Quentin Tarantino");
 517              		.loc 1 289 0
 518 00ca 40F20000 		movw	r0, #:lower16:.LC27
 519 00ce C0F20000 		movt	r0, #:upper16:.LC27
 520 00d2 FFF7FEFF 		bl	printf
 290:.\console.c   **** 			break;
 521              		.loc 1 290 0
 522 00d6 4CE0     		b	.L29
 523              	.L39:
 291:.\console.c   **** 		case RIDLEY:
 292:.\console.c   **** 			printf("Ridley Scott");
 524              		.loc 1 292 0
 525 00d8 40F20000 		movw	r0, #:lower16:.LC28
 526 00dc C0F20000 		movt	r0, #:upper16:.LC28
 527 00e0 FFF7FEFF 		bl	printf
 293:.\console.c   **** 			break;
 528              		.loc 1 293 0
 529 00e4 45E0     		b	.L29
 530              	.L40:
 294:.\console.c   **** 		case SERGIO:
 295:.\console.c   **** 			printf("Sergio Leone");
 531              		.loc 1 295 0
 532 00e6 40F20000 		movw	r0, #:lower16:.LC29
 533 00ea C0F20000 		movt	r0, #:upper16:.LC29
 534 00ee FFF7FEFF 		bl	printf
 296:.\console.c   **** 			break;
 535              		.loc 1 296 0
 536 00f2 3EE0     		b	.L29
 537              	.L41:
 297:.\console.c   **** 		case STEVEN:
 298:.\console.c   **** 			printf("Steven Spielberg");
 538              		.loc 1 298 0
 539 00f4 40F20000 		movw	r0, #:lower16:.LC30
 540 00f8 C0F20000 		movt	r0, #:upper16:.LC30
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 18


 541 00fc FFF7FEFF 		bl	printf
 299:.\console.c   **** 			break;
 542              		.loc 1 299 0
 543 0100 37E0     		b	.L29
 544              	.L42:
 300:.\console.c   **** 		case TIM:
 301:.\console.c   **** 			printf("Tim Burton");
 545              		.loc 1 301 0
 546 0102 40F20000 		movw	r0, #:lower16:.LC31
 547 0106 C0F20000 		movt	r0, #:upper16:.LC31
 548 010a FFF7FEFF 		bl	printf
 302:.\console.c   **** 			break;
 549              		.loc 1 302 0
 550 010e 30E0     		b	.L29
 551              	.L43:
 303:.\console.c   **** 		case WES:
 304:.\console.c   **** 			printf("Wes Craven");
 552              		.loc 1 304 0
 553 0110 40F20000 		movw	r0, #:lower16:.LC32
 554 0114 C0F20000 		movt	r0, #:upper16:.LC32
 555 0118 FFF7FEFF 		bl	printf
 305:.\console.c   **** 			break;
 556              		.loc 1 305 0
 557 011c 29E0     		b	.L29
 558              	.L44:
 306:.\console.c   **** 		case FEDERICO:
 307:.\console.c   **** 			printf("Federico Fellini");
 559              		.loc 1 307 0
 560 011e 40F20000 		movw	r0, #:lower16:.LC33
 561 0122 C0F20000 		movt	r0, #:upper16:.LC33
 562 0126 FFF7FEFF 		bl	printf
 308:.\console.c   **** 			break;
 563              		.loc 1 308 0
 564 012a 22E0     		b	.L29
 565              	.L45:
 309:.\console.c   **** 		case CRISTOPHER:
 310:.\console.c   **** 			printf("Christopher Nolan");
 566              		.loc 1 310 0
 567 012c 40F20000 		movw	r0, #:lower16:.LC34
 568 0130 C0F20000 		movt	r0, #:upper16:.LC34
 569 0134 FFF7FEFF 		bl	printf
 311:.\console.c   **** 			break;
 570              		.loc 1 311 0
 571 0138 1BE0     		b	.L29
 572              	.L46:
 312:.\console.c   **** 		case GUILLERMO:
 313:.\console.c   **** 			printf("Gullermo Del Toro");
 573              		.loc 1 313 0
 574 013a 40F20000 		movw	r0, #:lower16:.LC35
 575 013e C0F20000 		movt	r0, #:upper16:.LC35
 576 0142 FFF7FEFF 		bl	printf
 314:.\console.c   **** 			break;	
 577              		.loc 1 314 0
 578 0146 14E0     		b	.L29
 579              	.L47:
 315:.\console.c   **** 		case GEORGE:
 316:.\console.c   **** 			printf("George Lucas");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 19


 580              		.loc 1 316 0
 581 0148 40F20000 		movw	r0, #:lower16:.LC36
 582 014c C0F20000 		movt	r0, #:upper16:.LC36
 583 0150 FFF7FEFF 		bl	printf
 317:.\console.c   **** 			break;	
 584              		.loc 1 317 0
 585 0154 0DE0     		b	.L29
 586              	.L48:
 318:.\console.c   **** 		case JJ:
 319:.\console.c   **** 			printf("J.J. Abrams");
 587              		.loc 1 319 0
 588 0156 40F20000 		movw	r0, #:lower16:.LC37
 589 015a C0F20000 		movt	r0, #:upper16:.LC37
 590 015e FFF7FEFF 		bl	printf
 320:.\console.c   **** 			break;			
 591              		.loc 1 320 0
 592 0162 06E0     		b	.L29
 593              	.L30:
 321:.\console.c   **** 		default:
 322:.\console.c   **** 			printf("You");
 594              		.loc 1 322 0
 595 0164 40F20000 		movw	r0, #:lower16:.LC38
 596 0168 C0F20000 		movt	r0, #:upper16:.LC38
 597 016c FFF7FEFF 		bl	printf
 323:.\console.c   **** 			break;
 598              		.loc 1 323 0
 599 0170 00BF     		nop
 600              	.L29:
 324:.\console.c   **** 	}		
 325:.\console.c   **** }
 601              		.loc 1 325 0
 602 0172 80BD     		pop	{r7, pc}
 603              		.cfi_endproc
 604              	.LFE58:
 605              		.size	ShowParamsDirector, .-ShowParamsDirector
 606              		.section	.rodata
 607              		.align	2
 608              	.LC39:
 609 02b4 52656D6F 		.ascii	"Remote Control\000"
 609      74652043 
 609      6F6E7472 
 609      6F6C00
 610 02c3 00       		.align	2
 611              	.LC40:
 612 02c4 44697265 		.ascii	"Director AI\000"
 612      63746F72 
 612      20414900 
 613              		.align	2
 614              	.LC41:
 615 02d0 2A206D6F 		.ascii	"* mode err!\000"
 615      64652065 
 615      72722100 
 616              		.align	2
 617              	.LC42:
 618 02dc 0D00     		.ascii	"\015\000"
 619              		.section	.text.ShowParamsMode,"ax",%progbits
 620              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 20


 621              		.global	ShowParamsMode
 622              		.thumb
 623              		.thumb_func
 624              		.type	ShowParamsMode, %function
 625              	ShowParamsMode:
 626              	.LFB59:
 326:.\console.c   **** 
 327:.\console.c   **** 
 328:.\console.c   **** void ShowParamsMode(void)
 329:.\console.c   **** {	switch (gobee_param.mode)
 627              		.loc 1 329 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 0000 80B5     		push	{r7, lr}
 632              	.LCFI8:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 7, -8
 635              		.cfi_offset 14, -4
 636 0002 00AF     		add	r7, sp, #0
 637              	.LCFI9:
 638              		.cfi_def_cfa_register 7
 639              		.loc 1 329 0
 640 0004 40F20003 		movw	r3, #:lower16:gobee_param
 641 0008 C0F20003 		movt	r3, #:upper16:gobee_param
 642 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 643 000e 002B     		cmp	r3, #0
 644 0010 02D0     		beq	.L53
 645 0012 012B     		cmp	r3, #1
 646 0014 07D0     		beq	.L54
 647 0016 0DE0     		b	.L56
 648              	.L53:
 330:.\console.c   **** 	{
 331:.\console.c   **** 		case REMOTECONTROL_MODE:
 332:.\console.c   **** 			printf("Remote Control");
 649              		.loc 1 332 0
 650 0018 40F20000 		movw	r0, #:lower16:.LC39
 651 001c C0F20000 		movt	r0, #:upper16:.LC39
 652 0020 FFF7FEFF 		bl	printf
 333:.\console.c   **** 			break;	
 653              		.loc 1 333 0
 654 0024 0DE0     		b	.L55
 655              	.L54:
 334:.\console.c   **** 		case DIRECTOR_MODE:
 335:.\console.c   **** 			printf("Director AI");
 656              		.loc 1 335 0
 657 0026 40F20000 		movw	r0, #:lower16:.LC40
 658 002a C0F20000 		movt	r0, #:upper16:.LC40
 659 002e FFF7FEFF 		bl	printf
 336:.\console.c   **** 			break;
 660              		.loc 1 336 0
 661 0032 06E0     		b	.L55
 662              	.L56:
 337:.\console.c   **** 		default:
 338:.\console.c   **** 			printf("* mode err!");
 663              		.loc 1 338 0
 664 0034 40F20000 		movw	r0, #:lower16:.LC41
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 21


 665 0038 C0F20000 		movt	r0, #:upper16:.LC41
 666 003c FFF7FEFF 		bl	printf
 339:.\console.c   **** 			break;
 667              		.loc 1 339 0
 668 0040 00BF     		nop
 669              	.L55:
 340:.\console.c   **** 	}		
 341:.\console.c   **** 	printf("\r\n");
 670              		.loc 1 341 0
 671 0042 40F20000 		movw	r0, #:lower16:.LC42
 672 0046 C0F20000 		movt	r0, #:upper16:.LC42
 673 004a FFF7FEFF 		bl	puts
 342:.\console.c   **** }
 674              		.loc 1 342 0
 675 004e 80BD     		pop	{r7, pc}
 676              		.cfi_endproc
 677              	.LFE59:
 678              		.size	ShowParamsMode, .-ShowParamsMode
 679              		.section	.rodata
 680 02de 0000     		.align	2
 681              	.LC43:
 682 02e0 2028303A 		.ascii	" (0:off)\000"
 682      6F666629 
 682      00
 683 02e9 000000   		.align	2
 684              	.LC44:
 685 02ec 2028313A 		.ascii	" (1:sine)\000"
 685      73696E65 
 685      2900
 686 02f6 0000     		.align	2
 687              	.LC45:
 688 02f8 2028323A 		.ascii	" (2:triangle)\000"
 688      74726961 
 688      6E676C65 
 688      2900
 689 0306 0000     		.align	2
 690              	.LC46:
 691 0308 2028333A 		.ascii	" (3:square)\000"
 691      73717561 
 691      72652900 
 692              		.align	2
 693              	.LC47:
 694 0314 20282169 		.ascii	" (!internal error)\000"
 694      6E746572 
 694      6E616C20 
 694      6572726F 
 694      722900
 695              		.section	.text.ShowParamsAstim,"ax",%progbits
 696              		.align	2
 697              		.global	ShowParamsAstim
 698              		.thumb
 699              		.thumb_func
 700              		.type	ShowParamsAstim, %function
 701              	ShowParamsAstim:
 702              	.LFB60:
 343:.\console.c   **** 
 344:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 22


 345:.\console.c   **** void ShowParamsAstim(struct MOTOR_AXIS *paxis)
 346:.\console.c   **** {
 703              		.loc 1 346 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 8
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707 0000 80B5     		push	{r7, lr}
 708              	.LCFI10:
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 82B0     		sub	sp, sp, #8
 713              	.LCFI11:
 714              		.cfi_def_cfa_offset 16
 715 0004 00AF     		add	r7, sp, #0
 716              	.LCFI12:
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 347:.\console.c   **** 	if ((*paxis).vparam.astim_type == NO_ASTIM)
 719              		.loc 1 347 0
 720 0008 7B68     		ldr	r3, [r7, #4]
 721 000a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 722 000c 002B     		cmp	r3, #0
 723 000e 06D1     		bne	.L58
 348:.\console.c   **** 	{
 349:.\console.c   **** 		printf(" (0:off)");
 724              		.loc 1 349 0
 725 0010 40F20000 		movw	r0, #:lower16:.LC43
 726 0014 C0F20000 		movt	r0, #:upper16:.LC43
 727 0018 FFF7FEFF 		bl	printf
 728 001c 26E0     		b	.L59
 729              	.L58:
 350:.\console.c   **** 	}
 351:.\console.c   **** 	else if ((*paxis).vparam.astim_type == SINE_ASTIM)
 730              		.loc 1 351 0
 731 001e 7B68     		ldr	r3, [r7, #4]
 732 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 733 0022 012B     		cmp	r3, #1
 734 0024 06D1     		bne	.L60
 352:.\console.c   **** 	{
 353:.\console.c   **** 		printf(" (1:sine)");
 735              		.loc 1 353 0
 736 0026 40F20000 		movw	r0, #:lower16:.LC44
 737 002a C0F20000 		movt	r0, #:upper16:.LC44
 738 002e FFF7FEFF 		bl	printf
 739 0032 1BE0     		b	.L59
 740              	.L60:
 354:.\console.c   **** 	}				
 355:.\console.c   **** 	else if ((*paxis).vparam.astim_type == TRIANGLE_ASTIM)
 741              		.loc 1 355 0
 742 0034 7B68     		ldr	r3, [r7, #4]
 743 0036 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 744 0038 022B     		cmp	r3, #2
 745 003a 06D1     		bne	.L61
 356:.\console.c   **** 	{
 357:.\console.c   **** 		printf(" (2:triangle)");
 746              		.loc 1 357 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 23


 747 003c 40F20000 		movw	r0, #:lower16:.LC45
 748 0040 C0F20000 		movt	r0, #:upper16:.LC45
 749 0044 FFF7FEFF 		bl	printf
 750 0048 10E0     		b	.L59
 751              	.L61:
 358:.\console.c   **** 	}
 359:.\console.c   **** 	else if ((*paxis).vparam.astim_type == SQUARE_ASTIM)
 752              		.loc 1 359 0
 753 004a 7B68     		ldr	r3, [r7, #4]
 754 004c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 755 004e 032B     		cmp	r3, #3
 756 0050 06D1     		bne	.L62
 360:.\console.c   **** 	{
 361:.\console.c   **** 		printf(" (3:square)");
 757              		.loc 1 361 0
 758 0052 40F20000 		movw	r0, #:lower16:.LC46
 759 0056 C0F20000 		movt	r0, #:upper16:.LC46
 760 005a FFF7FEFF 		bl	printf
 761 005e 05E0     		b	.L59
 762              	.L62:
 362:.\console.c   **** 	}					
 363:.\console.c   **** 	else
 364:.\console.c   **** 	{
 365:.\console.c   **** 		printf(" (!internal error)");
 763              		.loc 1 365 0
 764 0060 40F20000 		movw	r0, #:lower16:.LC47
 765 0064 C0F20000 		movt	r0, #:upper16:.LC47
 766 0068 FFF7FEFF 		bl	printf
 767              	.L59:
 366:.\console.c   **** 	}				
 367:.\console.c   **** 	printf("\r\n");
 768              		.loc 1 367 0
 769 006c 40F20000 		movw	r0, #:lower16:.LC42
 770 0070 C0F20000 		movt	r0, #:upper16:.LC42
 771 0074 FFF7FEFF 		bl	puts
 368:.\console.c   **** }
 772              		.loc 1 368 0
 773 0078 07F10807 		add	r7, r7, #8
 774 007c BD46     		mov	sp, r7
 775 007e 80BD     		pop	{r7, pc}
 776              		.cfi_endproc
 777              	.LFE60:
 778              		.size	ShowParamsAstim, .-ShowParamsAstim
 779              		.global	__aeabi_f2d
 780              		.section	.rodata
 781 0327 00       		.align	2
 782              	.LC48:
 783 0328 25346620 		.ascii	"%4f \000"
 783      00
 784              		.global	__aeabi_fdiv
 785 032d 000000   		.align	2
 786              	.LC49:
 787 0330 20203156 		.ascii	"  1V=%4.1f [step]\000"
 787      3D25342E 
 787      3166205B 
 787      73746570 
 787      5D00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 24


 788              		.global	__aeabi_ddiv
 789              		.global	__aeabi_d2f
 790 0342 0000     		.align	2
 791              	.LC50:
 792 0344 20202849 		.ascii	"  (I/O_EQV=f(Kopf)=%1.6f\015\012\000"
 792      2F4F5F45 
 792      51563D66 
 792      284B6F70 
 792      66293D25 
 793              		.section	.text.ShowParamsGainAnaout,"ax",%progbits
 794              		.align	2
 795              		.global	ShowParamsGainAnaout
 796              		.thumb
 797              		.thumb_func
 798              		.type	ShowParamsGainAnaout, %function
 799              	ShowParamsGainAnaout:
 800              	.LFB61:
 369:.\console.c   **** 
 370:.\console.c   **** void ShowParamsGainAnaout(struct MOTOR_AXIS *paxis)
 371:.\console.c   **** {	
 801              		.loc 1 371 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 8
 804              		@ frame_needed = 1, uses_anonymous_args = 0
 805 0000 80B5     		push	{r7, lr}
 806              	.LCFI13:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 82B0     		sub	sp, sp, #8
 811              	.LCFI14:
 812              		.cfi_def_cfa_offset 16
 813 0004 00AF     		add	r7, sp, #0
 814              	.LCFI15:
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
 372:.\console.c   **** 	printf("%4f ",(float)((*paxis).param.Gain_ANAOUT.fnum));
 817              		.loc 1 372 0
 818 0008 7B68     		ldr	r3, [r7, #4]
 819 000a 9B6A     		ldr	r3, [r3, #40]	@ float
 820 000c 1846     		mov	r0, r3
 821 000e FFF7FEFF 		bl	__aeabi_f2d
 822 0012 0246     		mov	r2, r0
 823 0014 0B46     		mov	r3, r1
 824 0016 40F20000 		movw	r0, #:lower16:.LC48
 825 001a C0F20000 		movt	r0, #:upper16:.LC48
 826 001e FFF7FEFF 		bl	printf
 373:.\console.c   **** 	/********************************************************************************/
 374:.\console.c   **** 	/* Again (I/O_EQV) = DAC_Resolution/ADC_Resolution * VMAX_ADC/VMAX_DAC * 1/Kopf	*/
 375:.\console.c   **** 	/* Again (I/O_EQV) =            255/4096           *       5V/4V       * 1/Kopf	*/
 376:.\console.c   **** 	/* Again (I/O_EQV) = 0.077819824 / Kopf											*/
 377:.\console.c   **** 	/********************************************************************************/
 378:.\console.c   **** 	/* 1V Output --> [step] * AGAIN = 255/4 --> [step] = 255/4 * 1/AGAIN			*/
 379:.\console.c   **** 	/********************************************************************************/
 380:.\console.c   **** 	printf("  1V=%4.1f [step]",(float)(63.75/((*paxis).param.Gain_ANAOUT.fnum)));
 827              		.loc 1 380 0
 828 0022 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 25


 829 0024 9B6A     		ldr	r3, [r3, #40]	@ float
 830 0026 4FF00000 		mov	r0, #0
 831 002a C4F27F20 		movt	r0, 17023
 832 002e 1946     		mov	r1, r3
 833 0030 FFF7FEFF 		bl	__aeabi_fdiv
 834 0034 0346     		mov	r3, r0
 835 0036 1846     		mov	r0, r3
 836 0038 FFF7FEFF 		bl	__aeabi_f2d
 837 003c 0246     		mov	r2, r0
 838 003e 0B46     		mov	r3, r1
 839 0040 40F20000 		movw	r0, #:lower16:.LC49
 840 0044 C0F20000 		movt	r0, #:upper16:.LC49
 841 0048 FFF7FEFF 		bl	printf
 381:.\console.c   **** 	printf("  (I/O_EQV=f(Kopf)=%1.6f\r\n",(float)(0.077819824/(*paxis).param.Kopf.fnum));
 842              		.loc 1 381 0
 843 004c 7B68     		ldr	r3, [r7, #4]
 844 004e 5B6A     		ldr	r3, [r3, #36]	@ float
 845 0050 1846     		mov	r0, r3
 846 0052 FFF7FEFF 		bl	__aeabi_f2d
 847 0056 0246     		mov	r2, r0
 848 0058 0B46     		mov	r3, r1
 849 005a 0DA1     		adr	r1, .L64
 850 005c D1E90001 		ldrd	r0, [r1]
 851 0060 FFF7FEFF 		bl	__aeabi_ddiv
 852 0064 0246     		mov	r2, r0
 853 0066 0B46     		mov	r3, r1
 854 0068 1046     		mov	r0, r2
 855 006a 1946     		mov	r1, r3
 856 006c FFF7FEFF 		bl	__aeabi_d2f
 857 0070 0346     		mov	r3, r0
 858 0072 1846     		mov	r0, r3
 859 0074 FFF7FEFF 		bl	__aeabi_f2d
 860 0078 0246     		mov	r2, r0
 861 007a 0B46     		mov	r3, r1
 862 007c 40F20000 		movw	r0, #:lower16:.LC50
 863 0080 C0F20000 		movt	r0, #:upper16:.LC50
 864 0084 FFF7FEFF 		bl	printf
 382:.\console.c   **** }
 865              		.loc 1 382 0
 866 0088 07F10807 		add	r7, r7, #8
 867 008c BD46     		mov	sp, r7
 868 008e 80BD     		pop	{r7, pc}
 869              	.L65:
 870              		.align	3
 871              	.L64:
 872 0090 597B0FFF 		.word	-15762599
 873 0094 FFEBB33F 		.word	1068755967
 874              		.cfi_endproc
 875              	.LFE61:
 876              		.size	ShowParamsGainAnaout, .-ShowParamsGainAnaout
 877              		.section	.rodata
 878 035f 00       		.align	2
 879              	.LC51:
 880 0360 50414E20 		.ascii	"PAN (volatile)\000"
 880      28766F6C 
 880      6174696C 
 880      652900
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 26


 881 036f 00       		.align	2
 882              	.LC52:
 883 0370 54494C54 		.ascii	"TILT (default at poweron)\000"
 883      20286465 
 883      6661756C 
 883      74206174 
 883      20706F77 
 884 038a 0000     		.align	2
 885              	.LC53:
 886 038c 494E5445 		.ascii	"INTERNAL FIRMWARE ERROR!\000"
 886      524E414C 
 886      20464952 
 886      4D574152 
 886      45204552 
 887              		.section	.text.ShowParamsAnaoutSelectedAxis,"ax",%progbits
 888              		.align	2
 889              		.global	ShowParamsAnaoutSelectedAxis
 890              		.thumb
 891              		.thumb_func
 892              		.type	ShowParamsAnaoutSelectedAxis, %function
 893              	ShowParamsAnaoutSelectedAxis:
 894              	.LFB62:
 383:.\console.c   **** 
 384:.\console.c   **** void ShowParamsAnaoutSelectedAxis(struct MOTOR_AXIS *paxis)
 385:.\console.c   **** {
 895              		.loc 1 385 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 8
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 80B5     		push	{r7, lr}
 900              	.LCFI16:
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 7, -8
 903              		.cfi_offset 14, -4
 904 0002 82B0     		sub	sp, sp, #8
 905              	.LCFI17:
 906              		.cfi_def_cfa_offset 16
 907 0004 00AF     		add	r7, sp, #0
 908              	.LCFI18:
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 386:.\console.c   **** 	if (paxis == &pan_axis)
 911              		.loc 1 386 0
 912 0008 7A68     		ldr	r2, [r7, #4]
 913 000a 40F20003 		movw	r3, #:lower16:pan_axis
 914 000e C0F20003 		movt	r3, #:upper16:pan_axis
 915 0012 9A42     		cmp	r2, r3
 916 0014 06D1     		bne	.L67
 387:.\console.c   **** 	{
 388:.\console.c   **** 		printf("PAN (volatile)");
 917              		.loc 1 388 0
 918 0016 40F20000 		movw	r0, #:lower16:.LC51
 919 001a C0F20000 		movt	r0, #:upper16:.LC51
 920 001e FFF7FEFF 		bl	printf
 921 0022 13E0     		b	.L66
 922              	.L67:
 389:.\console.c   **** 	}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 27


 390:.\console.c   **** 	else if (paxis == &tilt_axis)
 923              		.loc 1 390 0
 924 0024 7A68     		ldr	r2, [r7, #4]
 925 0026 40F20003 		movw	r3, #:lower16:tilt_axis
 926 002a C0F20003 		movt	r3, #:upper16:tilt_axis
 927 002e 9A42     		cmp	r2, r3
 928 0030 06D1     		bne	.L69
 391:.\console.c   **** 	{
 392:.\console.c   **** 		printf("TILT (default at poweron)");
 929              		.loc 1 392 0
 930 0032 40F20000 		movw	r0, #:lower16:.LC52
 931 0036 C0F20000 		movt	r0, #:upper16:.LC52
 932 003a FFF7FEFF 		bl	printf
 933 003e 05E0     		b	.L66
 934              	.L69:
 393:.\console.c   **** 	}
 394:.\console.c   **** //	else if (paxis == &roll_axis)
 395:.\console.c   **** //	{
 396:.\console.c   **** //		printf("ROLL (volatile)");
 397:.\console.c   **** //	}
 398:.\console.c   **** 	else
 399:.\console.c   **** 	{
 400:.\console.c   **** 		printf("INTERNAL FIRMWARE ERROR!");
 935              		.loc 1 400 0
 936 0040 40F20000 		movw	r0, #:lower16:.LC53
 937 0044 C0F20000 		movt	r0, #:upper16:.LC53
 938 0048 FFF7FEFF 		bl	printf
 939              	.L66:
 401:.\console.c   **** 	}	
 402:.\console.c   **** 
 403:.\console.c   **** }
 940              		.loc 1 403 0
 941 004c 07F10807 		add	r7, r7, #8
 942 0050 BD46     		mov	sp, r7
 943 0052 80BD     		pop	{r7, pc}
 944              		.cfi_endproc
 945              	.LFE62:
 946              		.size	ShowParamsAnaoutSelectedAxis, .-ShowParamsAnaoutSelectedAxis
 947              		.section	.rodata
 948 03a5 000000   		.align	2
 949              	.LC54:
 950 03a8 25312E36 		.ascii	"%1.6f (Tau=%1.6f [msec])\000"
 950      66202854 
 950      61753D25 
 950      312E3666 
 950      205B6D73 
 951              		.section	.text.ShowParamsKiPan,"ax",%progbits
 952              		.align	2
 953              		.global	ShowParamsKiPan
 954              		.thumb
 955              		.thumb_func
 956              		.type	ShowParamsKiPan, %function
 957              	ShowParamsKiPan:
 958              	.LFB63:
 404:.\console.c   **** 
 405:.\console.c   **** void ShowParamsKiPan(void)
 406:.\console.c   **** {
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 28


 959              		.loc 1 406 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963 0000 B0B5     		push	{r4, r5, r7, lr}
 964              	.LCFI19:
 965              		.cfi_def_cfa_offset 16
 966              		.cfi_offset 4, -16
 967              		.cfi_offset 5, -12
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0002 82B0     		sub	sp, sp, #8
 971              	.LCFI20:
 972              		.cfi_def_cfa_offset 24
 973 0004 02AF     		add	r7, sp, #8
 974              	.LCFI21:
 975              		.cfi_def_cfa 7, 16
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 408:.\console.c   **** 		   (float)(pan_axis.param.Kif.fnum),(float)convKiTi(pan_axis.param.Kpf.fnum, pan_axis.param.Kif.f
 976              		.loc 1 408 0
 977 0006 40F20003 		movw	r3, #:lower16:pan_axis
 978 000a C0F20003 		movt	r3, #:upper16:pan_axis
 979 000e DB69     		ldr	r3, [r3, #28]	@ float
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 980              		.loc 1 407 0
 981 0010 1846     		mov	r0, r3
 982 0012 FFF7FEFF 		bl	__aeabi_f2d
 983 0016 0446     		mov	r4, r0
 984 0018 0D46     		mov	r5, r1
 985              		.loc 1 408 0
 986 001a 40F20003 		movw	r3, #:lower16:pan_axis
 987 001e C0F20003 		movt	r3, #:upper16:pan_axis
 988 0022 5969     		ldr	r1, [r3, #20]	@ float
 989 0024 40F20003 		movw	r3, #:lower16:pan_axis
 990 0028 C0F20003 		movt	r3, #:upper16:pan_axis
 991 002c DA69     		ldr	r2, [r3, #28]	@ float
 992 002e 40F20003 		movw	r3, #:lower16:fsampling
 993 0032 C0F20003 		movt	r3, #:upper16:fsampling
 994 0036 1B68     		ldr	r3, [r3, #0]	@ float
 995 0038 0846     		mov	r0, r1
 996 003a 1146     		mov	r1, r2
 997 003c 1A46     		mov	r2, r3
 998 003e FFF7FEFF 		bl	convKiTi
 999 0042 0346     		mov	r3, r0
 407:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1000              		.loc 1 407 0
 1001 0044 1846     		mov	r0, r3
 1002 0046 FFF7FEFF 		bl	__aeabi_f2d
 1003 004a 0246     		mov	r2, r0
 1004 004c 0B46     		mov	r3, r1
 1005 004e CDE90023 		strd	r2, [sp]
 1006 0052 40F20000 		movw	r0, #:lower16:.LC54
 1007 0056 C0F20000 		movt	r0, #:upper16:.LC54
 1008 005a 2246     		mov	r2, r4
 1009 005c 2B46     		mov	r3, r5
 1010 005e FFF7FEFF 		bl	printf
 409:.\console.c   **** }
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 29


 1011              		.loc 1 409 0
 1012 0062 BD46     		mov	sp, r7
 1013 0064 B0BD     		pop	{r4, r5, r7, pc}
 1014              		.cfi_endproc
 1015              	.LFE63:
 1016              		.size	ShowParamsKiPan, .-ShowParamsKiPan
 1017 0066 00BF     		.section	.text.ShowParamsKiTilt,"ax",%progbits
 1018              		.align	2
 1019              		.global	ShowParamsKiTilt
 1020              		.thumb
 1021              		.thumb_func
 1022              		.type	ShowParamsKiTilt, %function
 1023              	ShowParamsKiTilt:
 1024              	.LFB64:
 410:.\console.c   **** 
 411:.\console.c   **** void ShowParamsKiTilt(void)
 412:.\console.c   **** {
 1025              		.loc 1 412 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 0000 B0B5     		push	{r4, r5, r7, lr}
 1030              	.LCFI22:
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 4, -16
 1033              		.cfi_offset 5, -12
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 82B0     		sub	sp, sp, #8
 1037              	.LCFI23:
 1038              		.cfi_def_cfa_offset 24
 1039 0004 02AF     		add	r7, sp, #8
 1040              	.LCFI24:
 1041              		.cfi_def_cfa 7, 16
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 414:.\console.c   **** 		   (float)(tilt_axis.param.Kif.fnum),(float)convKiTi(tilt_axis.param.Kpf.fnum, tilt_axis.param.Ki
 1042              		.loc 1 414 0
 1043 0006 40F20003 		movw	r3, #:lower16:tilt_axis
 1044 000a C0F20003 		movt	r3, #:upper16:tilt_axis
 1045 000e DB69     		ldr	r3, [r3, #28]	@ float
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1046              		.loc 1 413 0
 1047 0010 1846     		mov	r0, r3
 1048 0012 FFF7FEFF 		bl	__aeabi_f2d
 1049 0016 0446     		mov	r4, r0
 1050 0018 0D46     		mov	r5, r1
 1051              		.loc 1 414 0
 1052 001a 40F20003 		movw	r3, #:lower16:tilt_axis
 1053 001e C0F20003 		movt	r3, #:upper16:tilt_axis
 1054 0022 5969     		ldr	r1, [r3, #20]	@ float
 1055 0024 40F20003 		movw	r3, #:lower16:tilt_axis
 1056 0028 C0F20003 		movt	r3, #:upper16:tilt_axis
 1057 002c DA69     		ldr	r2, [r3, #28]	@ float
 1058 002e 40F20003 		movw	r3, #:lower16:fsampling
 1059 0032 C0F20003 		movt	r3, #:upper16:fsampling
 1060 0036 1B68     		ldr	r3, [r3, #0]	@ float
 1061 0038 0846     		mov	r0, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 30


 1062 003a 1146     		mov	r1, r2
 1063 003c 1A46     		mov	r2, r3
 1064 003e FFF7FEFF 		bl	convKiTi
 1065 0042 0346     		mov	r3, r0
 413:.\console.c   **** 	printf("%1.6f (Tau=%1.6f [msec])",
 1066              		.loc 1 413 0
 1067 0044 1846     		mov	r0, r3
 1068 0046 FFF7FEFF 		bl	__aeabi_f2d
 1069 004a 0246     		mov	r2, r0
 1070 004c 0B46     		mov	r3, r1
 1071 004e CDE90023 		strd	r2, [sp]
 1072 0052 40F20000 		movw	r0, #:lower16:.LC54
 1073 0056 C0F20000 		movt	r0, #:upper16:.LC54
 1074 005a 2246     		mov	r2, r4
 1075 005c 2B46     		mov	r3, r5
 1076 005e FFF7FEFF 		bl	printf
 415:.\console.c   **** }
 1077              		.loc 1 415 0
 1078 0062 BD46     		mov	sp, r7
 1079 0064 B0BD     		pop	{r4, r5, r7, pc}
 1080              		.cfi_endproc
 1081              	.LFE64:
 1082              		.size	ShowParamsKiTilt, .-ShowParamsKiTilt
 1083 0066 00BF     		.section	.rodata
 1084 03c1 000000   		.align	2
 1085              	.LC55:
 1086 03c4 2531753A 		.ascii	"%1u:\000"
 1086      00
 1087 03c9 000000   		.align	2
 1088              	.LC56:
 1089 03cc 4759524F 		.ascii	"GYRO RATE\000"
 1089      20524154 
 1089      4500
 1090 03d6 0000     		.align	2
 1091              	.LC57:
 1092 03d8 534C4156 		.ascii	"SLAVE ENCODER POSITION\000"
 1092      4520454E 
 1092      434F4445 
 1092      5220504F 
 1092      53495449 
 1093 03ef 00       		.align	2
 1094              	.LC58:
 1095 03f0 534C4156 		.ascii	"SLAVE ENCODER VELOCITY\000"
 1095      4520454E 
 1095      434F4445 
 1095      52205645 
 1095      4C4F4349 
 1096 0407 00       		.align	2
 1097              	.LC59:
 1098 0408 41535449 		.ascii	"ASTIM INPUT\000"
 1098      4D20494E 
 1098      50555400 
 1099              		.align	2
 1100              	.LC60:
 1101 0414 6572726F 		.ascii	"error(t)\000"
 1101      72287429 
 1101      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 31


 1102 041d 000000   		.align	2
 1103              	.LC61:
 1104 0420 64286572 		.ascii	"d(error(t))/dt\000"
 1104      726F7228 
 1104      7429292F 
 1104      647400
 1105 042f 00       		.align	2
 1106              	.LC62:
 1107 0430 696E7465 		.ascii	"integral(error(t)*dt)\000"
 1107      6772616C 
 1107      28657272 
 1107      6F722874 
 1107      292A6474 
 1108 0446 0000     		.align	2
 1109              	.LC63:
 1110 0448 4B69202A 		.ascii	"Ki * integral(e(t)) (fixed 4Vpp Output at PWM MAX)\000"
 1110      20696E74 
 1110      65677261 
 1110      6C286528 
 1110      74292920 
 1111 047b 00       		.align	2
 1112              	.LC64:
 1113 047c 63762874 		.ascii	"cv(t) (fixed 4Vpp Output at PWM MAX)\000"
 1113      29202866 
 1113      69786564 
 1113      20345670 
 1113      70204F75 
 1114 04a1 000000   		.align	2
 1115              	.LC65:
 1116 04a4 494E5445 		.ascii	"INTERNAL FW ERROR!   \000"
 1116      524E414C 
 1116      20465720 
 1116      4552524F 
 1116      52212020 
 1117              		.section	.text.ShowParamsColor,"ax",%progbits
 1118              		.align	2
 1119              		.global	ShowParamsColor
 1120              		.thumb
 1121              		.thumb_func
 1122              		.type	ShowParamsColor, %function
 1123              	ShowParamsColor:
 1124              	.LFB65:
 416:.\console.c   **** 
 417:.\console.c   **** void ShowParamsColor(struct MOTOR_AXIS *paxis)
 418:.\console.c   **** {	
 1125              		.loc 1 418 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 8
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0000 80B5     		push	{r7, lr}
 1130              	.LCFI25:
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 82B0     		sub	sp, sp, #8
 1135              	.LCFI26:
 1136              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 32


 1137 0004 00AF     		add	r7, sp, #0
 1138              	.LCFI27:
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
 419:.\console.c   **** 	printf("%1u:",(uint16)((*paxis).param.color));
 1141              		.loc 1 419 0
 1142 0008 7B68     		ldr	r3, [r7, #4]
 1143 000a 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1144 000e 40F20000 		movw	r0, #:lower16:.LC55
 1145 0012 C0F20000 		movt	r0, #:upper16:.LC55
 1146 0016 1946     		mov	r1, r3
 1147 0018 FFF7FEFF 		bl	printf
 420:.\console.c   **** 	
 421:.\console.c   **** 	if ((*paxis).param.color == GYRO_RATE)
 1148              		.loc 1 421 0
 1149 001c 7B68     		ldr	r3, [r7, #4]
 1150 001e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1151 0022 002B     		cmp	r3, #0
 1152 0024 06D1     		bne	.L73
 422:.\console.c   **** 	{
 423:.\console.c   **** 		printf("GYRO RATE");
 1153              		.loc 1 423 0
 1154 0026 40F20000 		movw	r0, #:lower16:.LC56
 1155 002a C0F20000 		movt	r0, #:upper16:.LC56
 1156 002e FFF7FEFF 		bl	printf
 1157 0032 71E0     		b	.L72
 1158              	.L73:
 424:.\console.c   **** 	}
 425:.\console.c   **** 	else if ((*paxis).param.color == SLAVE_ENC_POS)
 1159              		.loc 1 425 0
 1160 0034 7B68     		ldr	r3, [r7, #4]
 1161 0036 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1162 003a 012B     		cmp	r3, #1
 1163 003c 06D1     		bne	.L75
 426:.\console.c   **** 	{
 427:.\console.c   **** 		printf("SLAVE ENCODER POSITION");
 1164              		.loc 1 427 0
 1165 003e 40F20000 		movw	r0, #:lower16:.LC57
 1166 0042 C0F20000 		movt	r0, #:upper16:.LC57
 1167 0046 FFF7FEFF 		bl	printf
 1168 004a 65E0     		b	.L72
 1169              	.L75:
 428:.\console.c   **** 	}
 429:.\console.c   **** 	else if ((*paxis).param.color == SLAVE_ENC_VEL)
 1170              		.loc 1 429 0
 1171 004c 7B68     		ldr	r3, [r7, #4]
 1172 004e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1173 0052 022B     		cmp	r3, #2
 1174 0054 06D1     		bne	.L76
 430:.\console.c   **** 	{
 431:.\console.c   **** 		printf("SLAVE ENCODER VELOCITY");
 1175              		.loc 1 431 0
 1176 0056 40F20000 		movw	r0, #:lower16:.LC58
 1177 005a C0F20000 		movt	r0, #:upper16:.LC58
 1178 005e FFF7FEFF 		bl	printf
 1179 0062 59E0     		b	.L72
 1180              	.L76:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 33


 432:.\console.c   **** 	}	
 433:.\console.c   **** 	else if ((*paxis).param.color == ASTIM_IN)
 1181              		.loc 1 433 0
 1182 0064 7B68     		ldr	r3, [r7, #4]
 1183 0066 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1184 006a 032B     		cmp	r3, #3
 1185 006c 06D1     		bne	.L77
 434:.\console.c   **** 	{
 435:.\console.c   **** 		printf("ASTIM INPUT");
 1186              		.loc 1 435 0
 1187 006e 40F20000 		movw	r0, #:lower16:.LC59
 1188 0072 C0F20000 		movt	r0, #:upper16:.LC59
 1189 0076 FFF7FEFF 		bl	printf
 1190 007a 4DE0     		b	.L72
 1191              	.L77:
 436:.\console.c   **** 	}	
 437:.\console.c   **** 	else if ((*paxis).param.color == CTRL_ERROR)
 1192              		.loc 1 437 0
 1193 007c 7B68     		ldr	r3, [r7, #4]
 1194 007e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1195 0082 042B     		cmp	r3, #4
 1196 0084 06D1     		bne	.L78
 438:.\console.c   **** 	{
 439:.\console.c   **** 		printf("error(t)");
 1197              		.loc 1 439 0
 1198 0086 40F20000 		movw	r0, #:lower16:.LC60
 1199 008a C0F20000 		movt	r0, #:upper16:.LC60
 1200 008e FFF7FEFF 		bl	printf
 1201 0092 41E0     		b	.L72
 1202              	.L78:
 440:.\console.c   **** 	}	
 441:.\console.c   **** 	else if ((*paxis).param.color == CTRL_DERROR)
 1203              		.loc 1 441 0
 1204 0094 7B68     		ldr	r3, [r7, #4]
 1205 0096 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1206 009a 052B     		cmp	r3, #5
 1207 009c 06D1     		bne	.L79
 442:.\console.c   **** 	{
 443:.\console.c   **** 		printf("d(error(t))/dt");
 1208              		.loc 1 443 0
 1209 009e 40F20000 		movw	r0, #:lower16:.LC61
 1210 00a2 C0F20000 		movt	r0, #:upper16:.LC61
 1211 00a6 FFF7FEFF 		bl	printf
 1212 00aa 35E0     		b	.L72
 1213              	.L79:
 444:.\console.c   **** 	}
 445:.\console.c   **** 	else if ((*paxis).param.color == CTRL_IERROR)
 1214              		.loc 1 445 0
 1215 00ac 7B68     		ldr	r3, [r7, #4]
 1216 00ae 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1217 00b2 062B     		cmp	r3, #6
 1218 00b4 06D1     		bne	.L80
 446:.\console.c   **** 	{
 447:.\console.c   **** 		printf("integral(error(t)*dt)");
 1219              		.loc 1 447 0
 1220 00b6 40F20000 		movw	r0, #:lower16:.LC62
 1221 00ba C0F20000 		movt	r0, #:upper16:.LC62
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 34


 1222 00be FFF7FEFF 		bl	printf
 1223 00c2 29E0     		b	.L72
 1224              	.L80:
 448:.\console.c   **** 	}
 449:.\console.c   **** 	else if ((*paxis).param.color == CTRL_AZIERROR)
 1225              		.loc 1 449 0
 1226 00c4 7B68     		ldr	r3, [r7, #4]
 1227 00c6 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1228 00ca 072B     		cmp	r3, #7
 1229 00cc 06D1     		bne	.L81
 450:.\console.c   **** 	{
 451:.\console.c   **** 		printf("integral(error(t)*dt)");
 1230              		.loc 1 451 0
 1231 00ce 40F20000 		movw	r0, #:lower16:.LC62
 1232 00d2 C0F20000 		movt	r0, #:upper16:.LC62
 1233 00d6 FFF7FEFF 		bl	printf
 1234 00da 1DE0     		b	.L72
 1235              	.L81:
 452:.\console.c   **** 	}
 453:.\console.c   **** 	else if ((*paxis).param.color == CTRL_AZIERROR)
 1236              		.loc 1 453 0
 1237 00dc 7B68     		ldr	r3, [r7, #4]
 1238 00de 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1239 00e2 072B     		cmp	r3, #7
 1240 00e4 06D1     		bne	.L82
 454:.\console.c   **** 	{
 455:.\console.c   **** 		printf("Ki * integral(e(t)) (fixed 4Vpp Output at PWM MAX)");
 1241              		.loc 1 455 0
 1242 00e6 40F20000 		movw	r0, #:lower16:.LC63
 1243 00ea C0F20000 		movt	r0, #:upper16:.LC63
 1244 00ee FFF7FEFF 		bl	printf
 1245 00f2 11E0     		b	.L72
 1246              	.L82:
 456:.\console.c   **** 	}		
 457:.\console.c   **** 	else if ((*paxis).param.color == CTRL_CV)
 1247              		.loc 1 457 0
 1248 00f4 7B68     		ldr	r3, [r7, #4]
 1249 00f6 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 1250 00fa 082B     		cmp	r3, #8
 1251 00fc 06D1     		bne	.L83
 458:.\console.c   **** 	{
 459:.\console.c   **** 		printf("cv(t) (fixed 4Vpp Output at PWM MAX)");
 1252              		.loc 1 459 0
 1253 00fe 40F20000 		movw	r0, #:lower16:.LC64
 1254 0102 C0F20000 		movt	r0, #:upper16:.LC64
 1255 0106 FFF7FEFF 		bl	printf
 1256 010a 05E0     		b	.L72
 1257              	.L83:
 460:.\console.c   **** 	}
 461:.\console.c   **** 	else
 462:.\console.c   **** 	{
 463:.\console.c   **** 		printf("INTERNAL FW ERROR!   ");
 1258              		.loc 1 463 0
 1259 010c 40F20000 		movw	r0, #:lower16:.LC65
 1260 0110 C0F20000 		movt	r0, #:upper16:.LC65
 1261 0114 FFF7FEFF 		bl	printf
 1262              	.L72:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 35


 464:.\console.c   **** 	}	
 465:.\console.c   **** }
 1263              		.loc 1 465 0
 1264 0118 07F10807 		add	r7, r7, #8
 1265 011c BD46     		mov	sp, r7
 1266 011e 80BD     		pop	{r7, pc}
 1267              		.cfi_endproc
 1268              	.LFE65:
 1269              		.size	ShowParamsColor, .-ShowParamsColor
 1270              		.section	.rodata
 1271 04ba 0000     		.align	2
 1272              	.LC66:
 1273 04bc 28424554 		.ascii	"(BETWEEN)  \000"
 1273      5745454E 
 1273      29202000 
 1274              		.align	2
 1275              	.LC67:
 1276 04c8 28504F53 		.ascii	"(POS    )  \000"
 1276      20202020 
 1276      29202000 
 1277              		.align	2
 1278              	.LC68:
 1279 04d4 284E4547 		.ascii	"(NEG    )  \000"
 1279      20202020 
 1279      29202000 
 1280              		.align	2
 1281              	.LC69:
 1282 04e0 28494E54 		.ascii	"(INT ERR) \000"
 1282      20455252 
 1282      292000
 1283              		.section	.text.ShowLimits,"ax",%progbits
 1284              		.align	2
 1285              		.global	ShowLimits
 1286              		.thumb
 1287              		.thumb_func
 1288              		.type	ShowLimits, %function
 1289              	ShowLimits:
 1290              	.LFB66:
 466:.\console.c   **** 
 467:.\console.c   **** void ShowLimits(struct MOTOR_AXIS *paxis)
 468:.\console.c   **** {
 1291              		.loc 1 468 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 8
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 80B5     		push	{r7, lr}
 1296              	.LCFI28:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 82B0     		sub	sp, sp, #8
 1301              	.LCFI29:
 1302              		.cfi_def_cfa_offset 16
 1303 0004 00AF     		add	r7, sp, #0
 1304              	.LCFI30:
 1305              		.cfi_def_cfa_register 7
 1306 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 36


 469:.\console.c   **** 	if ((*paxis).lc.status == COARSE_BETWEEN_LIMITS_OK)
 1307              		.loc 1 469 0
 1308 0008 7B68     		ldr	r3, [r7, #4]
 1309 000a 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1310 000e 002B     		cmp	r3, #0
 1311 0010 06D1     		bne	.L85
 470:.\console.c   **** 	{
 471:.\console.c   **** 		printf("(BETWEEN)  ");
 1312              		.loc 1 471 0
 1313 0012 40F20000 		movw	r0, #:lower16:.LC66
 1314 0016 C0F20000 		movt	r0, #:upper16:.LC66
 1315 001a FFF7FEFF 		bl	printf
 1316 001e 1DE0     		b	.L84
 1317              	.L85:
 472:.\console.c   **** 	}
 473:.\console.c   **** 	else if ((*paxis).lc.status == POSITIVE_LIMIT_REACHED)
 1318              		.loc 1 473 0
 1319 0020 7B68     		ldr	r3, [r7, #4]
 1320 0022 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1321 0026 022B     		cmp	r3, #2
 1322 0028 06D1     		bne	.L87
 474:.\console.c   **** 	{
 475:.\console.c   **** 		printf("(POS    )  ");
 1323              		.loc 1 475 0
 1324 002a 40F20000 		movw	r0, #:lower16:.LC67
 1325 002e C0F20000 		movt	r0, #:upper16:.LC67
 1326 0032 FFF7FEFF 		bl	printf
 1327 0036 11E0     		b	.L84
 1328              	.L87:
 476:.\console.c   **** 	}
 477:.\console.c   **** 	else if ((*paxis).lc.status == NEGATIVE_LIMIT_REACHED)
 1329              		.loc 1 477 0
 1330 0038 7B68     		ldr	r3, [r7, #4]
 1331 003a 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1332 003e 012B     		cmp	r3, #1
 1333 0040 06D1     		bne	.L88
 478:.\console.c   **** 	{
 479:.\console.c   **** 		printf("(NEG    )  ");
 1334              		.loc 1 479 0
 1335 0042 40F20000 		movw	r0, #:lower16:.LC68
 1336 0046 C0F20000 		movt	r0, #:upper16:.LC68
 1337 004a FFF7FEFF 		bl	printf
 1338 004e 05E0     		b	.L84
 1339              	.L88:
 480:.\console.c   **** 	}
 481:.\console.c   **** 	else
 482:.\console.c   **** 	{
 483:.\console.c   **** 		printf("(INT ERR) ");
 1340              		.loc 1 483 0
 1341 0050 40F20000 		movw	r0, #:lower16:.LC69
 1342 0054 C0F20000 		movt	r0, #:upper16:.LC69
 1343 0058 FFF7FEFF 		bl	printf
 1344              	.L84:
 484:.\console.c   **** 	}	
 485:.\console.c   **** }
 1345              		.loc 1 485 0
 1346 005c 07F10807 		add	r7, r7, #8
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 37


 1347 0060 BD46     		mov	sp, r7
 1348 0062 80BD     		pop	{r7, pc}
 1349              		.cfi_endproc
 1350              	.LFE66:
 1351              		.size	ShowLimits, .-ShowLimits
 1352              		.section	.text.ReadUSBbuffer,"ax",%progbits
 1353              		.align	2
 1354              		.global	ReadUSBbuffer
 1355              		.thumb
 1356              		.thumb_func
 1357              		.type	ReadUSBbuffer, %function
 1358              	ReadUSBbuffer:
 1359              	.LFB67:
 486:.\console.c   **** 
 487:.\console.c   **** // ****************************************************************
 488:.\console.c   **** // *** BUFFERIZER (pass 1 of 3)								    ***
 489:.\console.c   **** // ****************************************************************
 490:.\console.c   **** // *** Legge l'UART USB e popola il buffer userInputBuffer      ***
 491:.\console.c   **** // ****************************************************************
 492:.\console.c   **** 
 493:.\console.c   **** uint8 ReadUSBbuffer(bit echo, bit timeout)
 494:.\console.c   **** {
 1360              		.loc 1 494 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 24
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364 0000 80B5     		push	{r7, lr}
 1365              	.LCFI31:
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 7, -8
 1368              		.cfi_offset 14, -4
 1369 0002 86B0     		sub	sp, sp, #24
 1370              	.LCFI32:
 1371              		.cfi_def_cfa_offset 32
 1372 0004 00AF     		add	r7, sp, #0
 1373              	.LCFI33:
 1374              		.cfi_def_cfa_register 7
 1375 0006 0246     		mov	r2, r0
 1376 0008 0B46     		mov	r3, r1
 1377 000a FA71     		strb	r2, [r7, #7]
 1378 000c BB71     		strb	r3, [r7, #6]
 495:.\console.c   **** 	uint8 index = 0;
 1379              		.loc 1 495 0
 1380 000e 4FF00003 		mov	r3, #0
 1381 0012 FB75     		strb	r3, [r7, #23]
 496:.\console.c   **** 	uint16 ticks = 0;
 1382              		.loc 1 496 0
 1383 0014 4FF00003 		mov	r3, #0
 1384 0018 BB82     		strh	r3, [r7, #20]	@ movhi
 497:.\console.c   **** 	char charin;
 498:.\console.c   **** 	
 499:.\console.c   **** 	clear_string(userInputBuffer);
 1385              		.loc 1 499 0
 1386 001a 40F20000 		movw	r0, #:lower16:userInputBuffer
 1387 001e C0F20000 		movt	r0, #:upper16:userInputBuffer
 1388 0022 FFF7FEFF 		bl	clear_string
 500:.\console.c   **** 	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 38


 501:.\console.c   **** 	while ((index < sizeof(userInputBuffer)-1)
 1389              		.loc 1 501 0
 1390 0026 37E0     		b	.L90
 1391              	.L96:
 502:.\console.c   **** 			&& ((charin=UART_USB_GetChar()) != '\r')
 503:.\console.c   **** 			&& (ticks < TIMEOUT_TICKS) 
 504:.\console.c   **** 			&& (USB_Check() == USB_INSERTED))
 505:.\console.c   **** 	{
 506:.\console.c   **** 		if ((charin != 0) && (charin != '\n'))
 1392              		.loc 1 506 0
 1393 0028 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1394 002a 002B     		cmp	r3, #0
 1395 002c 2DD0     		beq	.L91
 1396              		.loc 1 506 0 is_stmt 0 discriminator 1
 1397 002e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1398 0030 0A2B     		cmp	r3, #10
 1399 0032 2AD0     		beq	.L91
 507:.\console.c   **** 		{
 508:.\console.c   **** 			userInputBuffer[index] = tolower((int)charin);
 1400              		.loc 1 508 0 is_stmt 1
 1401 0034 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1402              	.LBB2:
 1403 0036 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1404 0038 FB60     		str	r3, [r7, #12]
 1405 003a 40F20003 		movw	r3, #:lower16:__ctype_ptr__
 1406 003e C0F20003 		movt	r3, #:upper16:__ctype_ptr__
 1407 0042 1968     		ldr	r1, [r3, #0]
 1408 0044 FB68     		ldr	r3, [r7, #12]
 1409 0046 03F10103 		add	r3, r3, #1
 1410 004a CB18     		adds	r3, r1, r3
 1411 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1412 004e 03F00303 		and	r3, r3, #3
 1413 0052 012B     		cmp	r3, #1
 1414 0054 03D1     		bne	.L92
 1415              		.loc 1 508 0 is_stmt 0 discriminator 1
 1416 0056 FB68     		ldr	r3, [r7, #12]
 1417 0058 03F12003 		add	r3, r3, #32
 1418 005c 00E0     		b	.L93
 1419              	.L92:
 1420              		.loc 1 508 0 discriminator 2
 1421 005e FB68     		ldr	r3, [r7, #12]
 1422              	.L93:
 1423              	.LBE2:
 1424              		.loc 1 508 0 discriminator 3
 1425 0060 D9B2     		uxtb	r1, r3
 1426 0062 40F20003 		movw	r3, #:lower16:userInputBuffer
 1427 0066 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1428 006a 9954     		strb	r1, [r3, r2]
 509:.\console.c   **** 			index++;
 1429              		.loc 1 509 0 is_stmt 1 discriminator 3
 1430 006c FB7D     		ldrb	r3, [r7, #23]
 1431 006e 03F10103 		add	r3, r3, #1
 1432 0072 FB75     		strb	r3, [r7, #23]
 510:.\console.c   **** 			if (echo == 1)
 1433              		.loc 1 510 0 discriminator 3
 1434 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1435 0076 012B     		cmp	r3, #1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 39


 1436 0078 03D1     		bne	.L94
 511:.\console.c   **** 			{
 512:.\console.c   **** 				printf("%c", charin);
 1437              		.loc 1 512 0
 1438 007a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1439 007c 1846     		mov	r0, r3
 1440 007e FFF7FEFF 		bl	putchar
 1441              	.L94:
 513:.\console.c   **** 			}
 514:.\console.c   **** 			ticks = 0;
 1442              		.loc 1 514 0
 1443 0082 4FF00003 		mov	r3, #0
 1444 0086 BB82     		strh	r3, [r7, #20]	@ movhi
 1445 0088 06E0     		b	.L90
 1446              	.L91:
 515:.\console.c   **** 		}
 516:.\console.c   **** 		else
 517:.\console.c   **** 		{
 518:.\console.c   **** 			if (timeout == 1)
 1447              		.loc 1 518 0
 1448 008a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1449 008c 012B     		cmp	r3, #1
 1450 008e 03D1     		bne	.L90
 519:.\console.c   **** 			{
 520:.\console.c   **** 				ticks++;
 1451              		.loc 1 520 0
 1452 0090 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1453 0092 03F10103 		add	r3, r3, #1
 1454 0096 BB82     		strh	r3, [r7, #20]	@ movhi
 1455              	.L90:
 501:.\console.c   **** 	while ((index < sizeof(userInputBuffer)-1)
 1456              		.loc 1 501 0 discriminator 1
 1457 0098 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1458 009a 262B     		cmp	r3, #38
 1459 009c 10D8     		bhi	.L95
 502:.\console.c   **** 			&& ((charin=UART_USB_GetChar()) != '\r')
 1460              		.loc 1 502 0
 1461 009e FFF7FEFF 		bl	UART_USB_GetChar
 1462 00a2 0346     		mov	r3, r0
 1463 00a4 FB74     		strb	r3, [r7, #19]
 1464 00a6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1465 00a8 0D2B     		cmp	r3, #13
 1466 00aa 09D0     		beq	.L95
 503:.\console.c   **** 			&& (ticks < TIMEOUT_TICKS) 
 1467              		.loc 1 503 0
 1468 00ac BA8A     		ldrh	r2, [r7, #20]
 1469 00ae 4CF24F33 		movw	r3, #49999
 1470 00b2 9A42     		cmp	r2, r3
 1471 00b4 04D8     		bhi	.L95
 504:.\console.c   **** 			&& (USB_Check() == USB_INSERTED))
 1472              		.loc 1 504 0
 1473 00b6 FFF7FEFF 		bl	USB_Check
 1474 00ba 0346     		mov	r3, r0
 1475 00bc 012B     		cmp	r3, #1
 1476 00be B3D0     		beq	.L96
 1477              	.L95:
 521:.\console.c   **** 			}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 40


 522:.\console.c   **** 		}
 523:.\console.c   **** 	}
 524:.\console.c   **** 	userInputBuffer[index] = '\0';
 1478              		.loc 1 524 0
 1479 00c0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1480 00c2 40F20003 		movw	r3, #:lower16:userInputBuffer
 1481 00c6 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1482 00ca 4FF00001 		mov	r1, #0
 1483 00ce 9954     		strb	r1, [r3, r2]
 525:.\console.c   **** 	
 526:.\console.c   **** 	if (index >= sizeof(userInputBuffer)-1)
 1484              		.loc 1 526 0
 1485 00d0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1486 00d2 262B     		cmp	r3, #38
 1487 00d4 02D9     		bls	.L97
 527:.\console.c   **** 	{
 528:.\console.c   **** 		return READ_BUFF_OVERFLOW;
 1488              		.loc 1 528 0
 1489 00d6 4FF00203 		mov	r3, #2
 1490 00da 09E0     		b	.L98
 1491              	.L97:
 529:.\console.c   **** 	}
 530:.\console.c   **** 	else
 531:.\console.c   **** 	{
 532:.\console.c   **** 		if (ticks >= TIMEOUT_TICKS)
 1492              		.loc 1 532 0
 1493 00dc BA8A     		ldrh	r2, [r7, #20]
 1494 00de 4CF24F33 		movw	r3, #49999
 1495 00e2 9A42     		cmp	r2, r3
 1496 00e4 02D9     		bls	.L99
 533:.\console.c   **** 		{
 534:.\console.c   **** 			return READ_TIMEOUT;
 1497              		.loc 1 534 0
 1498 00e6 4FF00103 		mov	r3, #1
 1499 00ea 01E0     		b	.L98
 1500              	.L99:
 535:.\console.c   **** 		}
 536:.\console.c   **** 		else
 537:.\console.c   **** 		{
 538:.\console.c   **** 			return READ_OK;
 1501              		.loc 1 538 0
 1502 00ec 4FF00003 		mov	r3, #0
 1503              	.L98:
 539:.\console.c   **** 		}
 540:.\console.c   **** 	}
 541:.\console.c   **** }	
 1504              		.loc 1 541 0
 1505 00f0 1846     		mov	r0, r3
 1506 00f2 07F11807 		add	r7, r7, #24
 1507 00f6 BD46     		mov	sp, r7
 1508 00f8 80BD     		pop	{r7, pc}
 1509              		.cfi_endproc
 1510              	.LFE67:
 1511              		.size	ReadUSBbuffer, .-ReadUSBbuffer
 1512 00fa 00BF     		.section	.rodata
 1513 04eb 00       		.align	2
 1514              	.LC70:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 41


 1515 04ec 2000     		.ascii	" \000"
 1516 04ee 0000     		.align	2
 1517              	.LC71:
 1518 04f0 62756666 		.ascii	"buff=\000"
 1518      3D00
 1519 04f6 0000     		.align	2
 1520              	.LC72:
 1521 04f8 5B625D00 		.ascii	"[b]\000"
 1522              		.align	2
 1523              	.LC73:
 1524 04fc 5B645D00 		.ascii	"[d]\000"
 1525              		.align	2
 1526              	.LC74:
 1527 0500 20746B31 		.ascii	" tk1=\000"
 1527      3D00
 1528 0506 0000     		.align	2
 1529              	.LC75:
 1530 0508 20746B32 		.ascii	" tk2=\000"
 1530      3D00
 1531 050e 0000     		.align	2
 1532              	.LC76:
 1533 0510 20746B33 		.ascii	" tk3=\000"
 1533      3D00
 1534 0516 0000     		.align	2
 1535              	.LC77:
 1536 0518 20746B34 		.ascii	" tk4=\000"
 1536      3D00
 1537              		.section	.text.scanner2,"ax",%progbits
 1538              		.align	2
 1539              		.global	scanner2
 1540              		.thumb
 1541              		.thumb_func
 1542              		.type	scanner2, %function
 1543              	scanner2:
 1544              	.LFB68:
 542:.\console.c   **** 
 543:.\console.c   **** // ************************************************************************
 544:.\console.c   **** // *** SCANNERIZER (pass 2 of 3)									    ***
 545:.\console.c   **** // ************************************************************************
 546:.\console.c   **** // *** Estrae quattro sottostinghe dallo Standard Input (USB)
 547:.\console.c   **** // *** e le associa ai token di actual_command:
 548:.\console.c   **** // *** actual_command.action    <-- primo token
 549:.\console.c   **** // *** actual_command.parameter <-- secondo token 
 550:.\console.c   **** // *** actual_command.number1   <-- terzo token
 551:.\console.c   **** // *** actual_command.number2   <-- quarto token
 552:.\console.c   **** // *** restituisce:
 553:.\console.c   **** // *** 0: SCAN_OK
 554:.\console.c   **** // *** 1: SCANNING ERROR (tokens > 4)
 555:.\console.c   **** // ************************************************************************
 556:.\console.c   **** 
 557:.\console.c   **** uint8 scanner2(bit verbose)
 558:.\console.c   **** {
 1545              		.loc 1 558 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 64
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 42


 1550              	.LCFI34:
 1551              		.cfi_def_cfa_offset 8
 1552              		.cfi_offset 7, -8
 1553              		.cfi_offset 14, -4
 1554 0002 90B0     		sub	sp, sp, #64
 1555              	.LCFI35:
 1556              		.cfi_def_cfa_offset 72
 1557 0004 00AF     		add	r7, sp, #0
 1558              	.LCFI36:
 1559              		.cfi_def_cfa_register 7
 1560 0006 0346     		mov	r3, r0
 1561 0008 FB71     		strb	r3, [r7, #7]
 559:.\console.c   **** 	uint8 rdstat=0;
 1562              		.loc 1 559 0
 1563 000a 4FF00003 		mov	r3, #0
 1564 000e 87F83730 		strb	r3, [r7, #55]
 560:.\console.c   **** 	uint8 uidx=0, uidy=0;	
 1565              		.loc 1 560 0
 1566 0012 4FF00003 		mov	r3, #0
 1567 0016 87F83F30 		strb	r3, [r7, #63]
 1568 001a 4FF00003 		mov	r3, #0
 1569 001e 87F83E30 		strb	r3, [r7, #62]
 561:.\console.c   **** 	char localBuffer[40];
 562:.\console.c   **** 	char* p;
 563:.\console.c   **** 
 564:.\console.c   **** 	clear_string(actual_cmd.action);
 1570              		.loc 1 564 0
 1571 0022 40F20000 		movw	r0, #:lower16:actual_cmd
 1572 0026 C0F20000 		movt	r0, #:upper16:actual_cmd
 1573 002a FFF7FEFF 		bl	clear_string
 565:.\console.c   **** 	clear_string(actual_cmd.parameter);	
 1574              		.loc 1 565 0
 1575 002e B248     		ldr	r0, .L124
 1576 0030 FFF7FEFF 		bl	clear_string
 566:.\console.c   **** 	clear_string(actual_cmd.number1);	
 1577              		.loc 1 566 0
 1578 0034 B148     		ldr	r0, .L124+4
 1579 0036 FFF7FEFF 		bl	clear_string
 567:.\console.c   **** 	clear_string(actual_cmd.number2);	
 1580              		.loc 1 567 0
 1581 003a B148     		ldr	r0, .L124+8
 1582 003c FFF7FEFF 		bl	clear_string
 568:.\console.c   **** 
 569:.\console.c   **** 	/* Reads from USB buffer (standard input) */
 570:.\console.c   **** 	rdstat=ReadUSBbuffer(ECHO_ON, TIMEOUT_OFF);
 1583              		.loc 1 570 0
 1584 0040 4FF00100 		mov	r0, #1
 1585 0044 4FF00001 		mov	r1, #0
 1586 0048 FFF7FEFF 		bl	ReadUSBbuffer
 1587 004c 0346     		mov	r3, r0
 1588 004e 87F83730 		strb	r3, [r7, #55]
 571:.\console.c   **** 	
 572:.\console.c   **** 	/* Extract 4 Tokens */
 573:.\console.c   **** 	if (rdstat == READ_OK)
 1589              		.loc 1 573 0
 1590 0052 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1591 0056 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 43


 1592 0058 40F0BB80 		bne	.L101
 574:.\console.c   **** 	{
 575:.\console.c   **** 		clear_string(localBuffer);
 1593              		.loc 1 575 0
 1594 005c 07F10C03 		add	r3, r7, #12
 1595 0060 1846     		mov	r0, r3
 1596 0062 FFF7FEFF 		bl	clear_string
 576:.\console.c   **** 		//strcpy(localBuffer, userInputBuffer);
 577:.\console.c   **** 
 578:.\console.c   **** 		/*** strcopy with BACKSPACE control	***/
 579:.\console.c   **** 		uidx = 0;												// reset user  buffer pointer
 1597              		.loc 1 579 0
 1598 0066 4FF00003 		mov	r3, #0
 1599 006a 87F83F30 		strb	r3, [r7, #63]
 580:.\console.c   **** 		uidy = 0;									 			// reset local buffer pointer
 1600              		.loc 1 580 0
 1601 006e 4FF00003 		mov	r3, #0
 1602 0072 87F83E30 		strb	r3, [r7, #62]
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1603              		.loc 1 581 0
 1604 0076 36E0     		b	.L102
 1605              	.L105:
 582:.\console.c   **** 		{
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 584:.\console.c   **** 			{
 585:.\console.c   **** 				uidx = uidx + 1;								//		points to the next char
 1606              		.loc 1 585 0
 1607 0078 97F83F30 		ldrb	r3, [r7, #63]
 1608 007c 03F10103 		add	r3, r3, #1
 1609 0080 87F83F30 		strb	r3, [r7, #63]
 586:.\console.c   **** 
 587:.\console.c   **** 				if (uidy>0)										//		if there are characters to cancel
 1610              		.loc 1 587 0
 1611 0084 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1612 0088 002B     		cmp	r3, #0
 1613 008a 05D0     		beq	.L103
 588:.\console.c   **** 				{												//
 589:.\console.c   **** 					uidy = uidy - 1;							//			cancel the previous copied characters
 1614              		.loc 1 589 0
 1615 008c 97F83E30 		ldrb	r3, [r7, #62]
 1616 0090 03F1FF33 		add	r3, r3, #-1
 1617 0094 87F83E30 		strb	r3, [r7, #62]
 1618              	.L103:
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 1619              		.loc 1 583 0 discriminator 1
 1620 0098 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1621 009c 272B     		cmp	r3, #39
 1622 009e 08D8     		bhi	.L104
 583:.\console.c   **** 			while ((uidx<40) && (userInputBuffer[uidx] == 8))	// 	while there is ASCII BACKSPACE   = 8 (\b, 
 1623              		.loc 1 583 0 is_stmt 0 discriminator 2
 1624 00a0 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1625 00a4 40F20003 		movw	r3, #:lower16:userInputBuffer
 1626 00a8 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1627 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1628 00ae 082B     		cmp	r3, #8
 1629 00b0 E2D0     		beq	.L105
 1630              	.L104:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 44


 590:.\console.c   **** 				}												//		
 591:.\console.c   **** 			}
 592:.\console.c   **** 			localBuffer[uidy] = userInputBuffer[uidx];			//	copy one character from user to local buffer
 1631              		.loc 1 592 0 is_stmt 1
 1632 00b2 97F83E10 		ldrb	r1, [r7, #62]	@ zero_extendqisi2
 1633 00b6 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1634 00ba 40F20003 		movw	r3, #:lower16:userInputBuffer
 1635 00be C0F20003 		movt	r3, #:upper16:userInputBuffer
 1636 00c2 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 1637 00c4 07F14000 		add	r0, r7, #64
 1638 00c8 4318     		adds	r3, r0, r1
 1639 00ca 03F8342C 		strb	r2, [r3, #-52]
 593:.\console.c   **** 			uidx++;												//	increments user  buffer pointer
 1640              		.loc 1 593 0
 1641 00ce 97F83F30 		ldrb	r3, [r7, #63]
 1642 00d2 03F10103 		add	r3, r3, #1
 1643 00d6 87F83F30 		strb	r3, [r7, #63]
 594:.\console.c   **** 			uidy++;												//	increments local buffer pointer
 1644              		.loc 1 594 0
 1645 00da 97F83E30 		ldrb	r3, [r7, #62]
 1646 00de 03F10103 		add	r3, r3, #1
 1647 00e2 87F83E30 		strb	r3, [r7, #62]
 1648              	.L102:
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1649              		.loc 1 581 0 discriminator 1
 1650 00e6 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1651 00ea 272B     		cmp	r3, #39
 1652 00ec 08D8     		bhi	.L106
 581:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))	// while there is string to copy
 1653              		.loc 1 581 0 is_stmt 0 discriminator 2
 1654 00ee 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1655 00f2 40F20003 		movw	r3, #:lower16:userInputBuffer
 1656 00f6 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1657 00fa 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1658 00fc 002B     		cmp	r3, #0
 1659 00fe CBD1     		bne	.L103
 1660              	.L106:
 595:.\console.c   **** 		}
 596:.\console.c   **** 		localBuffer[uidy] = '\0';								//terminate the local buffer string
 1661              		.loc 1 596 0 is_stmt 1
 1662 0100 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1663 0104 07F14002 		add	r2, r7, #64
 1664 0108 D318     		adds	r3, r2, r3
 1665 010a 4FF00002 		mov	r2, #0
 1666 010e 03F8342C 		strb	r2, [r3, #-52]
 597:.\console.c   **** 		/*** strcopy with BACKSPACE control END ***/
 598:.\console.c   **** 		
 599:.\console.c   **** 		p = strtok(localBuffer, " ");
 1667              		.loc 1 599 0
 1668 0112 07F10C03 		add	r3, r7, #12
 1669 0116 1846     		mov	r0, r3
 1670 0118 40F20001 		movw	r1, #:lower16:.LC70
 1671 011c C0F20001 		movt	r1, #:upper16:.LC70
 1672 0120 FFF7FEFF 		bl	strtok
 1673 0124 B863     		str	r0, [r7, #56]
 600:.\console.c   **** 
 601:.\console.c   **** 		if (p != NULL)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 45


 1674              		.loc 1 601 0
 1675 0126 BB6B     		ldr	r3, [r7, #56]
 1676 0128 002B     		cmp	r3, #0
 1677 012a 10D0     		beq	.L108
 602:.\console.c   **** 		{
 603:.\console.c   **** 			strcpy(actual_cmd.action, p);	
 1678              		.loc 1 603 0
 1679 012c 40F20000 		movw	r0, #:lower16:actual_cmd
 1680 0130 C0F20000 		movt	r0, #:upper16:actual_cmd
 1681 0134 B96B     		ldr	r1, [r7, #56]
 1682 0136 FFF7FEFF 		bl	strcpy
 604:.\console.c   **** 			p = strtok(NULL, " ");
 1683              		.loc 1 604 0
 1684 013a 4FF00000 		mov	r0, #0
 1685 013e 40F20001 		movw	r1, #:lower16:.LC70
 1686 0142 C0F20001 		movt	r1, #:upper16:.LC70
 1687 0146 FFF7FEFF 		bl	strtok
 1688 014a B863     		str	r0, [r7, #56]
 1689 014c 05E0     		b	.L109
 1690              	.L108:
 605:.\console.c   **** 		}
 606:.\console.c   **** 		else
 607:.\console.c   **** 		{
 608:.\console.c   **** 			clear_string(actual_cmd.action);
 1691              		.loc 1 608 0
 1692 014e 40F20000 		movw	r0, #:lower16:actual_cmd
 1693 0152 C0F20000 		movt	r0, #:upper16:actual_cmd
 1694 0156 FFF7FEFF 		bl	clear_string
 1695              	.L109:
 609:.\console.c   **** 		}
 610:.\console.c   **** 
 611:.\console.c   **** 		if (p != NULL)
 1696              		.loc 1 611 0
 1697 015a BB6B     		ldr	r3, [r7, #56]
 1698 015c 002B     		cmp	r3, #0
 1699 015e 0DD0     		beq	.L110
 612:.\console.c   **** 		{
 613:.\console.c   **** 			strcpy(actual_cmd.parameter, p);	
 1700              		.loc 1 613 0
 1701 0160 6548     		ldr	r0, .L124
 1702 0162 B96B     		ldr	r1, [r7, #56]
 1703 0164 FFF7FEFF 		bl	strcpy
 614:.\console.c   **** 			p = strtok(NULL, " ");
 1704              		.loc 1 614 0
 1705 0168 4FF00000 		mov	r0, #0
 1706 016c 40F20001 		movw	r1, #:lower16:.LC70
 1707 0170 C0F20001 		movt	r1, #:upper16:.LC70
 1708 0174 FFF7FEFF 		bl	strtok
 1709 0178 B863     		str	r0, [r7, #56]
 1710 017a 02E0     		b	.L111
 1711              	.L110:
 615:.\console.c   **** 		}
 616:.\console.c   **** 		else
 617:.\console.c   **** 		{
 618:.\console.c   **** 			clear_string(actual_cmd.parameter);
 1712              		.loc 1 618 0
 1713 017c 5E48     		ldr	r0, .L124
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 46


 1714 017e FFF7FEFF 		bl	clear_string
 1715              	.L111:
 619:.\console.c   **** 		}
 620:.\console.c   **** 		
 621:.\console.c   **** 		if (p != NULL)
 1716              		.loc 1 621 0
 1717 0182 BB6B     		ldr	r3, [r7, #56]
 1718 0184 002B     		cmp	r3, #0
 1719 0186 0DD0     		beq	.L112
 622:.\console.c   **** 		{
 623:.\console.c   **** 			strcpy(actual_cmd.number1, p);	
 1720              		.loc 1 623 0
 1721 0188 5C48     		ldr	r0, .L124+4
 1722 018a B96B     		ldr	r1, [r7, #56]
 1723 018c FFF7FEFF 		bl	strcpy
 624:.\console.c   **** 			p = strtok(NULL, " ");
 1724              		.loc 1 624 0
 1725 0190 4FF00000 		mov	r0, #0
 1726 0194 40F20001 		movw	r1, #:lower16:.LC70
 1727 0198 C0F20001 		movt	r1, #:upper16:.LC70
 1728 019c FFF7FEFF 		bl	strtok
 1729 01a0 B863     		str	r0, [r7, #56]
 1730 01a2 02E0     		b	.L113
 1731              	.L112:
 625:.\console.c   **** 		}
 626:.\console.c   **** 		else
 627:.\console.c   **** 		{
 628:.\console.c   **** 			clear_string(actual_cmd.number1);
 1732              		.loc 1 628 0
 1733 01a4 5548     		ldr	r0, .L124+4
 1734 01a6 FFF7FEFF 		bl	clear_string
 1735              	.L113:
 629:.\console.c   **** 		}
 630:.\console.c   **** 
 631:.\console.c   **** 		if (p != NULL)
 1736              		.loc 1 631 0
 1737 01aa BB6B     		ldr	r3, [r7, #56]
 1738 01ac 002B     		cmp	r3, #0
 1739 01ae 0DD0     		beq	.L114
 632:.\console.c   **** 		{
 633:.\console.c   **** 			strcpy(actual_cmd.number2, p);	
 1740              		.loc 1 633 0
 1741 01b0 5348     		ldr	r0, .L124+8
 1742 01b2 B96B     		ldr	r1, [r7, #56]
 1743 01b4 FFF7FEFF 		bl	strcpy
 634:.\console.c   **** 			p = strtok(NULL, " ");
 1744              		.loc 1 634 0
 1745 01b8 4FF00000 		mov	r0, #0
 1746 01bc 40F20001 		movw	r1, #:lower16:.LC70
 1747 01c0 C0F20001 		movt	r1, #:upper16:.LC70
 1748 01c4 FFF7FEFF 		bl	strtok
 1749 01c8 B863     		str	r0, [r7, #56]
 1750 01ca 02E0     		b	.L101
 1751              	.L114:
 635:.\console.c   **** 		}
 636:.\console.c   **** 		else
 637:.\console.c   **** 		{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 47


 638:.\console.c   **** 			clear_string(actual_cmd.number2);
 1752              		.loc 1 638 0
 1753 01cc 4C48     		ldr	r0, .L124+8
 1754 01ce FFF7FEFF 		bl	clear_string
 1755              	.L101:
 639:.\console.c   **** 		}
 640:.\console.c   **** 	
 641:.\console.c   **** 	}
 642:.\console.c   **** 
 643:.\console.c   **** 	if (verbose == VERBOSE_ON)
 1756              		.loc 1 643 0
 1757 01d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1758 01d4 012B     		cmp	r3, #1
 1759 01d6 7BD1     		bne	.L115
 644:.\console.c   **** 	{
 645:.\console.c   **** 		printf("\r\n");
 1760              		.loc 1 645 0
 1761 01d8 40F20000 		movw	r0, #:lower16:.LC42
 1762 01dc C0F20000 		movt	r0, #:upper16:.LC42
 1763 01e0 FFF7FEFF 		bl	puts
 646:.\console.c   **** 		printf("buff=");
 1764              		.loc 1 646 0
 1765 01e4 40F20000 		movw	r0, #:lower16:.LC71
 1766 01e8 C0F20000 		movt	r0, #:upper16:.LC71
 1767 01ec FFF7FEFF 		bl	printf
 647:.\console.c   **** 		//prints user input buffer until string termination
 648:.\console.c   **** 		uidx=0;
 1768              		.loc 1 648 0
 1769 01f0 4FF00003 		mov	r3, #0
 1770 01f4 87F83F30 		strb	r3, [r7, #63]
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1771              		.loc 1 649 0
 1772 01f8 2FE0     		b	.L116
 1773              	.L121:
 650:.\console.c   **** 		{
 651:.\console.c   **** 			if (userInputBuffer[uidx] == 8)			// ASCII BACKSPACE   = 8 (\b, ^H)
 1774              		.loc 1 651 0
 1775 01fa 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1776 01fe 40F20003 		movw	r3, #:lower16:userInputBuffer
 1777 0202 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1778 0206 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1779 0208 082B     		cmp	r3, #8
 1780 020a 06D1     		bne	.L117
 652:.\console.c   **** 			{
 653:.\console.c   **** 				printf("[b]");
 1781              		.loc 1 653 0
 1782 020c 40F20000 		movw	r0, #:lower16:.LC72
 1783 0210 C0F20000 		movt	r0, #:upper16:.LC72
 1784 0214 FFF7FEFF 		bl	printf
 1785 0218 19E0     		b	.L118
 1786              	.L117:
 654:.\console.c   **** 			}
 655:.\console.c   **** 			else if (userInputBuffer[uidx] == 127)	// ASCII DELETE7CANC = 127 (^?)
 1787              		.loc 1 655 0
 1788 021a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1789 021e 40F20003 		movw	r3, #:lower16:userInputBuffer
 1790 0222 C0F20003 		movt	r3, #:upper16:userInputBuffer
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 48


 1791 0226 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1792 0228 7F2B     		cmp	r3, #127
 1793 022a 06D1     		bne	.L119
 656:.\console.c   **** 			{
 657:.\console.c   **** 				printf("[d]");
 1794              		.loc 1 657 0
 1795 022c 40F20000 		movw	r0, #:lower16:.LC73
 1796 0230 C0F20000 		movt	r0, #:upper16:.LC73
 1797 0234 FFF7FEFF 		bl	printf
 1798 0238 09E0     		b	.L118
 1799              	.L119:
 658:.\console.c   **** 			}			
 659:.\console.c   **** 			else
 660:.\console.c   **** 			{
 661:.\console.c   **** 				printf ("%c", userInputBuffer[uidx]);
 1800              		.loc 1 661 0
 1801 023a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1802 023e 40F20003 		movw	r3, #:lower16:userInputBuffer
 1803 0242 C0F20003 		movt	r3, #:upper16:userInputBuffer
 1804 0246 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1805 0248 1846     		mov	r0, r3
 1806 024a FFF7FEFF 		bl	putchar
 1807              	.L118:
 662:.\console.c   **** 			}
 663:.\console.c   **** 			uidx++;
 1808              		.loc 1 663 0
 1809 024e 97F83F30 		ldrb	r3, [r7, #63]
 1810 0252 03F10103 		add	r3, r3, #1
 1811 0256 87F83F30 		strb	r3, [r7, #63]
 1812              	.L116:
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1813              		.loc 1 649 0 discriminator 1
 1814 025a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1815 025e 272B     		cmp	r3, #39
 1816 0260 08D8     		bhi	.L120
 649:.\console.c   **** 		while ((uidx<40) && (userInputBuffer[uidx] != '\0'))
 1817              		.loc 1 649 0 is_stmt 0 discriminator 2
 1818 0262 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1819 0266 40F20003 		movw	r3, #:lower16:userInputBuffer
 1820 026a C0F20003 		movt	r3, #:upper16:userInputBuffer
 1821 026e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1822 0270 002B     		cmp	r3, #0
 1823 0272 C2D1     		bne	.L121
 1824              	.L120:
 664:.\console.c   **** 		}
 665:.\console.c   **** //		printf(userInputBuffer);
 666:.\console.c   **** 		
 667:.\console.c   **** 		printf(" tk1=");
 1825              		.loc 1 667 0 is_stmt 1
 1826 0274 40F20000 		movw	r0, #:lower16:.LC74
 1827 0278 C0F20000 		movt	r0, #:upper16:.LC74
 1828 027c FFF7FEFF 		bl	printf
 668:.\console.c   **** 		printf(actual_cmd.action);
 1829              		.loc 1 668 0
 1830 0280 40F20000 		movw	r0, #:lower16:actual_cmd
 1831 0284 C0F20000 		movt	r0, #:upper16:actual_cmd
 1832 0288 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 49


 669:.\console.c   **** 		printf(" tk2=");
 1833              		.loc 1 669 0
 1834 028c 40F20000 		movw	r0, #:lower16:.LC75
 1835 0290 C0F20000 		movt	r0, #:upper16:.LC75
 1836 0294 FFF7FEFF 		bl	printf
 670:.\console.c   **** 		printf(actual_cmd.parameter);
 1837              		.loc 1 670 0
 1838 0298 1748     		ldr	r0, .L124
 1839 029a FFF7FEFF 		bl	printf
 671:.\console.c   **** 		printf(" tk3=");
 1840              		.loc 1 671 0
 1841 029e 40F20000 		movw	r0, #:lower16:.LC76
 1842 02a2 C0F20000 		movt	r0, #:upper16:.LC76
 1843 02a6 FFF7FEFF 		bl	printf
 672:.\console.c   **** 		printf(actual_cmd.number1);
 1844              		.loc 1 672 0
 1845 02aa 1448     		ldr	r0, .L124+4
 1846 02ac FFF7FEFF 		bl	printf
 673:.\console.c   **** 		printf(" tk4=");		
 1847              		.loc 1 673 0
 1848 02b0 40F20000 		movw	r0, #:lower16:.LC77
 1849 02b4 C0F20000 		movt	r0, #:upper16:.LC77
 1850 02b8 FFF7FEFF 		bl	printf
 674:.\console.c   **** 		printf(actual_cmd.number2);
 1851              		.loc 1 674 0
 1852 02bc 1048     		ldr	r0, .L124+8
 1853 02be FFF7FEFF 		bl	printf
 675:.\console.c   **** 		printf("\r\n");		
 1854              		.loc 1 675 0
 1855 02c2 40F20000 		movw	r0, #:lower16:.LC42
 1856 02c6 C0F20000 		movt	r0, #:upper16:.LC42
 1857 02ca FFF7FEFF 		bl	puts
 1858 02ce 0BE0     		b	.L122
 1859              	.L115:
 676:.\console.c   **** 	}
 677:.\console.c   **** 	else
 678:.\console.c   **** 	{
 679:.\console.c   **** 		printf("\r\n");	
 1860              		.loc 1 679 0
 1861 02d0 40F20000 		movw	r0, #:lower16:.LC42
 1862 02d4 C0F20000 		movt	r0, #:upper16:.LC42
 1863 02d8 FFF7FEFF 		bl	puts
 680:.\console.c   **** 		printf("\r\n");
 1864              		.loc 1 680 0
 1865 02dc 40F20000 		movw	r0, #:lower16:.LC42
 1866 02e0 C0F20000 		movt	r0, #:upper16:.LC42
 1867 02e4 FFF7FEFF 		bl	puts
 1868              	.L122:
 681:.\console.c   **** 	}
 682:.\console.c   **** 	
 683:.\console.c   **** 	return 0;	//SCAN_OK//	
 1869              		.loc 1 683 0
 1870 02e8 4FF00003 		mov	r3, #0
 684:.\console.c   **** }
 1871              		.loc 1 684 0
 1872 02ec 1846     		mov	r0, r3
 1873 02ee 07F14007 		add	r7, r7, #64
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 50


 1874 02f2 BD46     		mov	sp, r7
 1875 02f4 80BD     		pop	{r7, pc}
 1876              	.L125:
 1877 02f6 00BF     		.align	2
 1878              	.L124:
 1879 02f8 0F000000 		.word	actual_cmd+15
 1880 02fc 1E000000 		.word	actual_cmd+30
 1881 0300 28000000 		.word	actual_cmd+40
 1882              		.cfi_endproc
 1883              	.LFE68:
 1884              		.size	scanner2, .-scanner2
 1885              		.section	.rodata
 1886 051e 0000     		.align	2
 1887              	.LC78:
 1888 0520 626F6F74 		.ascii	"boot\000"
 1888      00
 1889 0525 000000   		.align	2
 1890              	.LC79:
 1891 0528 0D0A4172 		.ascii	"\015\012Are you sure to start Bootload [Y/N]?\000"
 1891      6520796F 
 1891      75207375 
 1891      72652074 
 1891      6F207374 
 1892              		.align	2
 1893              	.LC80:
 1894 0550 0D0A2121 		.ascii	"\015\012!!!Wait for Bootloading (power off to stop "
 1894      21576169 
 1894      7420666F 
 1894      7220426F 
 1894      6F746C6F 
 1895 057d 626F6F74 		.ascii	"bootloading process)\015\000"
 1895      6C6F6164 
 1895      696E6720 
 1895      70726F63 
 1895      65737329 
 1896 0593 00       		.align	2
 1897              	.LC81:
 1898 0594 0D0A426F 		.ascii	"\015\012Bootloading aborted!\000"
 1898      6F746C6F 
 1898      6164696E 
 1898      67206162 
 1898      6F727465 
 1899 05ab 00       		.align	2
 1900              	.LC82:
 1901 05ac 23455252 		.ascii	"#ERROR1: Too much parameters!\000"
 1901      4F52313A 
 1901      20546F6F 
 1901      206D7563 
 1901      68207061 
 1902 05ca 0000     		.align	2
 1903              	.LC83:
 1904 05cc 707000   		.ascii	"pp\000"
 1905 05cf 00       		.align	2
 1906              	.LC84:
 1907 05d0 2A414E41 		.ascii	"*ANAPOS ZERO +20!\015\000"
 1907      504F5320 
 1907      5A45524F 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 51


 1907      202B3230 
 1907      210D00
 1908 05e3 00       		.align	2
 1909              	.LC85:
 1910 05e4 2A657272 		.ascii	"*err\000"
 1910      00
 1911 05e9 000000   		.align	2
 1912              	.LC86:
 1913 05ec 70707000 		.ascii	"ppp\000"
 1914              		.align	2
 1915              	.LC87:
 1916 05f0 2A414E41 		.ascii	"*ANAPOS ZERO +100!\015\000"
 1916      504F5320 
 1916      5A45524F 
 1916      202B3130 
 1916      30210D00 
 1917              		.align	2
 1918              	.LC88:
 1919 0604 6D6D00   		.ascii	"mm\000"
 1920 0607 00       		.align	2
 1921              	.LC89:
 1922 0608 2A414E41 		.ascii	"*ANAPOS ZERO -20!\015\000"
 1922      504F5320 
 1922      5A45524F 
 1922      202D3230 
 1922      210D00
 1923 061b 00       		.align	2
 1924              	.LC90:
 1925 061c 6D6D6D00 		.ascii	"mmm\000"
 1926              		.align	2
 1927              	.LC91:
 1928 0620 2A414E41 		.ascii	"*ANAPOS ZERO -100!\015\000"
 1928      504F5320 
 1928      5A45524F 
 1928      202D3130 
 1928      30210D00 
 1929              		.align	2
 1930              	.LC92:
 1931 0634 7462757A 		.ascii	"tbuz\000"
 1931      00
 1932 0639 000000   		.align	2
 1933              	.LC93:
 1934 063c 42757A7A 		.ascii	"Buzzer testing!\015\000"
 1934      65722074 
 1934      65737469 
 1934      6E67210D 
 1934      00
 1935 064d 000000   		.align	2
 1936              	.LC94:
 1937 0650 746C6F72 		.ascii	"tlora\000"
 1937      6100
 1938 0656 0000     		.align	2
 1939              	.LC95:
 1940 0658 54657374 		.ascii	"Test LoRa started!\015\000"
 1940      204C6F52 
 1940      61207374 
 1940      61727465 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 52


 1940      64210D00 
 1941              		.align	2
 1942              	.LC96:
 1943 066c 6D797465 		.ascii	"mytest\000"
 1943      737400
 1944 0673 00       		.align	2
 1945              	.LC97:
 1946 0674 4D792074 		.ascii	"My test!\015\000"
 1946      65737421 
 1946      0D00
 1947 067e 0000     		.align	2
 1948              	.LC98:
 1949 0680 73746F70 		.ascii	"stopmapsm\000"
 1949      6D617073 
 1949      6D00
 1950 068a 0000     		.align	2
 1951              	.LC99:
 1952 068c 73746F70 		.ascii	"stopsm\000"
 1952      736D00
 1953 0693 00       		.align	2
 1954              	.LC100:
 1955 0694 4D415050 		.ascii	"MAPPING STATE MACHINE Stopped!\015\000"
 1955      494E4720 
 1955      53544154 
 1955      45204D41 
 1955      4348494E 
 1956              		.align	2
 1957              	.LC101:
 1958 06b4 6465656E 		.ascii	"deenergize\000"
 1958      65726769 
 1958      7A6500
 1959 06bf 00       		.align	2
 1960              	.LC102:
 1961 06c0 6465656E 		.ascii	"deen\000"
 1961      00
 1962 06c5 000000   		.align	2
 1963              	.LC103:
 1964 06c8 4D6F746F 		.ascii	"Motors DEENERGIZED & Driver Sleeped!\015\000"
 1964      72732044 
 1964      45454E45 
 1964      5247495A 
 1964      45442026 
 1965 06ee 0000     		.align	2
 1966              	.LC104:
 1967 06f0 656E6572 		.ascii	"energize\000"
 1967      67697A65 
 1967      00
 1968 06f9 000000   		.align	2
 1969              	.LC105:
 1970 06fc 656E00   		.ascii	"en\000"
 1971 06ff 00       		.align	2
 1972              	.LC106:
 1973 0700 4D6F746F 		.ascii	"Motors ENERGIZED!\015\000"
 1973      72732045 
 1973      4E455247 
 1973      495A4544 
 1973      210D00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 53


 1974 0713 00       		.align	2
 1975              	.LC107:
 1976 0714 766A6F79 		.ascii	"vjoyp\000"
 1976      7000
 1977 071a 0000     		.align	2
 1978              	.LC108:
 1979 071c 766A7000 		.ascii	"vjp\000"
 1980              		.align	2
 1981              	.LC109:
 1982 0720 50414E3A 		.ascii	"PAN: enc(t)=%+ld [step]\000"
 1982      20656E63 
 1982      2874293D 
 1982      252B6C64 
 1982      205B7374 
 1983              		.global	__aeabi_f2iz
 1984              		.align	2
 1985              	.LC110:
 1986 0738 20202061 		.ascii	"   abs_pos(t)=%+ld [step] \000"
 1986      62735F70 
 1986      6F732874 
 1986      293D252B 
 1986      6C64205B 
 1987              		.global	__aeabi_fmul
 1988 0753 00       		.align	2
 1989              	.LC111:
 1990 0754 20202076 		.ascii	"   vjoy(t)=%4.0f [step/sec]\000"
 1990      6A6F7928 
 1990      74293D25 
 1990      342E3066 
 1990      205B7374 
 1991              		.align	2
 1992              	.LC112:
 1993 0770 20282534 		.ascii	" (%4.3f [deg/sec])\000"
 1993      2E336620 
 1993      5B646567 
 1993      2F736563 
 1993      5D2900
 1994              		.global	__aeabi_fadd
 1995              		.global	__aeabi_fsub
 1996 0783 00       		.align	2
 1997              	.LC113:
 1998 0784 766A6F79 		.ascii	"vjoyt\000"
 1998      7400
 1999 078a 0000     		.align	2
 2000              	.LC114:
 2001 078c 766A7400 		.ascii	"vjt\000"
 2002              		.align	2
 2003              	.LC115:
 2004 0790 54494C54 		.ascii	"TILT: enc(t)=%+ld [step]\000"
 2004      3A20656E 
 2004      63287429 
 2004      3D252B6C 
 2004      64205B73 
 2005 07a9 000000   		.align	2
 2006              	.LC116:
 2007 07ac 766A6F79 		.ascii	"vjoy\000"
 2007      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 54


 2008 07b1 000000   		.align	2
 2009              	.LC117:
 2010 07b4 766A00   		.ascii	"vj\000"
 2011 07b7 00       		.align	2
 2012              	.LC118:
 2013 07b8 50414E3A 		.ascii	"PAN: \000"
 2013      2000
 2014 07be 0000     		.align	2
 2015              	.LC119:
 2016 07c0 766A6F79 		.ascii	"vjoy(t)=%4.0f [step/sec]\000"
 2016      2874293D 
 2016      25342E30 
 2016      66205B73 
 2016      7465702F 
 2017 07d9 000000   		.align	2
 2018              	.LC120:
 2019 07dc 20282535 		.ascii	" (%5.4f [A])\000"
 2019      2E346620 
 2019      5B415D29 
 2019      00
 2020 07e9 000000   		.align	2
 2021              	.LC121:
 2022 07ec 20202020 		.ascii	"    TILT: \000"
 2022      54494C54 
 2022      3A2000
 2023              		.global	__aeabi_fcmplt
 2024              		.global	__aeabi_fcmpgt
 2025 07f7 00       		.align	2
 2026              	.LC122:
 2027 07f8 7600     		.ascii	"v\000"
 2028 07fa 0000     		.align	2
 2029              	.LC123:
 2030 07fc 76657273 		.ascii	"version\000"
 2030      696F6E00 
 2031              		.align	2
 2032              	.LC124:
 2033 0804 476F4265 		.ascii	"GoBee Director FW V.0.0B-T34 24/01/19 C3.0\015\000"
 2033      65204469 
 2033      72656374 
 2033      6F722046 
 2033      5720562E 
 2034              		.align	2
 2035              	.LC125:
 2036 0830 28632920 		.ascii	"(c) 2017-2019 Gobee Srl (www.gobee.it)\015\000"
 2036      32303137 
 2036      2D323031 
 2036      3920476F 
 2036      62656520 
 2037              		.align	2
 2038              	.LC126:
 2039 0858 46572061 		.ascii	"FW and HW Designed by Graziano G. Ravizza\015\000"
 2039      6E642048 
 2039      57204465 
 2039      7369676E 
 2039      65642062 
 2040 0883 00       		.align	2
 2041              	.LC127:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 55


 2042 0884 4D454348 		.ascii	"MECHA     Designed by Cy.Pag. Team and Davide Danie"
 2042      41202020 
 2042      20204465 
 2042      7369676E 
 2042      65642062 
 2043 08b7 6C6C690D 		.ascii	"lli\015\000"
 2043      00
 2044              		.align	2
 2045              	.LC128:
 2046 08bc 434C5573 		.ascii	"CLUs      Designed by Gabriele Pisaneschi and Grazi"
 2046      20202020 
 2046      20204465 
 2046      7369676E 
 2046      65642062 
 2047 08ef 616E6F20 		.ascii	"ano G. Ravizza\015\000"
 2047      472E2052 
 2047      6176697A 
 2047      7A610D00 
 2048 08ff 00       		.align	2
 2049              	.LC129:
 2050 0900 20202020 		.ascii	"          Special Thanks to Fabio Allegreni, Claudi"
 2050      20202020 
 2050      20205370 
 2050      65636961 
 2050      6C205468 
 2051 0933 6F205061 		.ascii	"o Palumbo and all Cy.Pag. Team!\015\000"
 2051      6C756D62 
 2051      6F20616E 
 2051      6420616C 
 2051      6C204379 
 2052              		.align	2
 2053              	.LC130:
 2054 0954 70726F6D 		.ascii	"prompt\000"
 2054      707400
 2055 095b 00       		.align	2
 2056              	.LC131:
 2057 095c 50726F6D 		.ascii	"Prompt Flags:\015\000"
 2057      70742046 
 2057      6C616773 
 2057      3A0D00
 2058 096b 00       		.align	2
 2059              	.LC132:
 2060 096c 20205B46 		.ascii	"  [F]                  --> GoBee FAULT\015\000"
 2060      5D202020 
 2060      20202020 
 2060      20202020 
 2060      20202020 
 2061              		.align	2
 2062              	.LC133:
 2063 0994 20205B46 		.ascii	"  [FBK=AGYRO_VEL]      --> Analog Gyroscope Feedbac"
 2063      424B3D41 
 2063      4759524F 
 2063      5F56454C 
 2063      5D202020 
 2064 09c7 6B202856 		.ascii	"k (Velocity - Direct LOS)\015\000"
 2064      656C6F63 
 2064      69747920 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 56


 2064      2D204469 
 2064      72656374 
 2065 09e2 0000     		.align	2
 2066              	.LC134:
 2067 09e4 20205B46 		.ascii	"  [FBK=ENC_POS]        --> Digital Encoder Feedback"
 2067      424B3D45 
 2067      4E435F50 
 2067      4F535D20 
 2067      20202020 
 2068 0a17 2028506F 		.ascii	" (Position - Test Only)\015\000"
 2068      73697469 
 2068      6F6E202D 
 2068      20546573 
 2068      74204F6E 
 2069              		.align	2
 2070              	.LC135:
 2071 0a30 20205B46 		.ascii	"  [FBK=OPEN]           --> No Feedback (Open Loop)\015"
 2071      424B3D4F 
 2071      50454E5D 
 2071      20202020 
 2071      20202020 
 2072 0a63 00       		.ascii	"\000"
 2073              		.align	2
 2074              	.LC136:
 2075 0a64 3F00     		.ascii	"?\000"
 2076 0a66 0000     		.align	2
 2077              	.LC137:
 2078 0a68 6800     		.ascii	"h\000"
 2079 0a6a 0000     		.align	2
 2080              	.LC138:
 2081 0a6c 68656C70 		.ascii	"help\000"
 2081      00
 2082 0a71 000000   		.align	2
 2083              	.LC139:
 2084 0a74 476F4265 		.ascii	"GoBee Director Console Commands:\015\000"
 2084      65204469 
 2084      72656374 
 2084      6F722043 
 2084      6F6E736F 
 2085 0a96 0000     		.align	2
 2086              	.LC140:
 2087 0a98 3D3D3D3D 		.ascii	"=================================================\015"
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2087      3D3D3D3D 
 2088 0aca 00       		.ascii	"\000"
 2089 0acb 00       		.align	2
 2090              	.LC141:
 2091 0acc 53484F57 		.ascii	"SHOW,S: shows parameters and realtime values\015\000"
 2091      2C533A20 
 2091      73686F77 
 2091      73207061 
 2091      72616D65 
 2092 0afa 0000     		.align	2
 2093              	.LC142:
 2094 0afc 5345543A 		.ascii	"SET:  set GoBee parameters\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 57


 2094      20207365 
 2094      7420476F 
 2094      42656520 
 2094      70617261 
 2095              		.align	2
 2096              	.LC143:
 2097 0b18 50524F4D 		.ascii	"PROMPT: shows prompt flags\015\000"
 2097      50543A20 
 2097      73686F77 
 2097      73207072 
 2097      6F6D7074 
 2098              		.align	2
 2099              	.LC144:
 2100 0b34 424F4F54 		.ascii	"BOOT: starts FW Bootloading\015\000"
 2100      3A207374 
 2100      61727473 
 2100      20465720 
 2100      426F6F74 
 2101 0b51 000000   		.align	2
 2102              	.LC145:
 2103 0b54 56455253 		.ascii	"VERSION,V: displays firmware version\015\000"
 2103      494F4E2C 
 2103      563A2064 
 2103      6973706C 
 2103      61797320 
 2104 0b7a 0000     		.align	2
 2105              	.LC146:
 2106 0b7c 48454C50 		.ascii	"HELP Q: helps Q table codes\015\000"
 2106      20513A20 
 2106      68656C70 
 2106      73205120 
 2106      7461626C 
 2107 0b99 000000   		.align	2
 2108              	.LC147:
 2109 0b9c 48454C50 		.ascii	"HELP,H,?: this help\015\000"
 2109      2C482C3F 
 2109      3A207468 
 2109      69732068 
 2109      656C700D 
 2110 0bb1 000000   		.align	2
 2111              	.LC148:
 2112 0bb4 20202874 		.ascii	"  (type HELP <command> for detailed descriptions)\015"
 2112      79706520 
 2112      48454C50 
 2112      203C636F 
 2112      6D6D616E 
 2113 0be6 00       		.ascii	"\000"
 2114 0be7 00       		.align	2
 2115              	.LC149:
 2116 0be8 2D204D6F 		.ascii	"- Motor Control CMDs               -\015\000"
 2116      746F7220 
 2116      436F6E74 
 2116      726F6C20 
 2116      434D4473 
 2117 0c0e 0000     		.align	2
 2118              	.LC150:
 2119 0c10 2D2D2D2D 		.ascii	"------------------------------------\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 58


 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2119      2D2D2D2D 
 2120 0c36 0000     		.align	2
 2121              	.LC151:
 2122 0c38 2020454E 		.ascii	"  EN[ERGIZE]             (Energize motor)\015\000"
 2122      5B455247 
 2122      495A455D 
 2122      20202020 
 2122      20202020 
 2123 0c63 00       		.align	2
 2124              	.LC152:
 2125 0c64 20204445 		.ascii	"  DEEN[ERGIZE]           (Deenergize motor)\015\000"
 2125      454E5B45 
 2125      5247495A 
 2125      455D2020 
 2125      20202020 
 2126 0c91 000000   		.align	2
 2127              	.LC153:
 2128 0c94 2D204D6F 		.ascii	"- Mover CMDs                       -\015\000"
 2128      76657220 
 2128      434D4473 
 2128      20202020 
 2128      20202020 
 2129 0cba 0000     		.align	2
 2130              	.LC154:
 2131 0cbc 20204D4F 		.ascii	"  MOVP[ATH]     <n>      (Start Mover on Path 0..15"
 2131      56505B41 
 2131      54485D20 
 2131      20202020 
 2131      3C6E3E20 
 2132 0cef 290D00   		.ascii	")\015\000"
 2133 0cf2 0000     		.align	2
 2134              	.LC155:
 2135 0cf4 2020474F 		.ascii	"  GOTOH[OME]             (Start Mover to Goto Home)"
 2135      544F485B 
 2135      4F4D455D 
 2135      20202020 
 2135      20202020 
 2136 0d27 0D00     		.ascii	"\015\000"
 2137 0d29 000000   		.align	2
 2138              	.LC156:
 2139 0d2c 2020475B 		.ascii	"  G[OTOQ]       <n> <t>  (Start Mover to Goto Q num"
 2139      4F544F51 
 2139      5D202020 
 2139      20202020 
 2139      3C6E3E20 
 2140 0d5f 62657220 		.ascii	"ber <n> in time <t> sec)\015\000"
 2140      3C6E3E20 
 2140      696E2074 
 2140      696D6520 
 2140      3C743E20 
 2141 0d79 000000   		.align	2
 2142              	.LC157:
 2143 0d7c 2D205379 		.ascii	"- System TEST CMDs                 -\015\000"
 2143      7374656D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 59


 2143      20544553 
 2143      5420434D 
 2143      44732020 
 2144 0da2 0000     		.align	2
 2145              	.LC158:
 2146 0da4 20205442 		.ascii	"  TBUZ                   (Tests Buzzer)\015\000"
 2146      555A2020 
 2146      20202020 
 2146      20202020 
 2146      20202020 
 2147 0dcd 000000   		.align	2
 2148              	.LC159:
 2149 0dd0 2020544C 		.ascii	"  TLORA                  (Test LoRa HW)\015\000"
 2149      4F524120 
 2149      20202020 
 2149      20202020 
 2149      20202020 
 2150 0df9 000000   		.align	2
 2151              	.LC160:
 2152 0dfc 20205354 		.ascii	"  STOP[MAP]SM            (Stops the MAPPING STATE M"
 2152      4F505B4D 
 2152      41505D53 
 2152      4D202020 
 2152      20202020 
 2153 0e2f 41434849 		.ascii	"ACHINE (energize to restart))\015\000"
 2153      4E452028 
 2153      656E6572 
 2153      67697A65 
 2153      20746F20 
 2154 0e4e 0000     		.align	2
 2155              	.LC161:
 2156 0e50 2020564A 		.ascii	"  VJ[OY]P                (Pan  Virtual Joystick a=c"
 2156      5B4F595D 
 2156      50202020 
 2156      20202020 
 2156      20202020 
 2157 0e83 7720643D 		.ascii	"w d=ccw s=stop)\015\000"
 2157      63637720 
 2157      733D7374 
 2157      6F70290D 
 2157      00
 2158              		.align	2
 2159              	.LC162:
 2160 0e94 2020564A 		.ascii	"  VJ[OY]T                (Tilt Virtual Joystick w=c"
 2160      5B4F595D 
 2160      54202020 
 2160      20202020 
 2160      20202020 
 2161 0ec7 77207A3D 		.ascii	"w z=ccw s=stop)\015\000"
 2161      63637720 
 2161      733D7374 
 2161      6F70290D 
 2161      00
 2162              		.align	2
 2163              	.LC163:
 2164 0ed8 2020564A 		.ascii	"  VJ[OY]                 (Pan+Tilt Virtual Joystick"
 2164      5B4F595D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 60


 2164      20202020 
 2164      20202020 
 2164      20202020 
 2165 0f0b 290D00   		.ascii	")\015\000"
 2166 0f0e 0000     		.align	2
 2167              	.LC164:
 2168 0f10 2D20434C 		.ascii	"- CLU CMDs                         -\015\000"
 2168      5520434D 
 2168      44732020 
 2168      20202020 
 2168      20202020 
 2169 0f36 0000     		.align	2
 2170              	.LC165:
 2171 0f38 2020434C 		.ascii	"  CLUEXEC <clu_num>      (Start CLU   0 <= clu_num "
 2171      55455845 
 2171      43203C63 
 2171      6C755F6E 
 2171      756D3E20 
 2172 0f6b 3C3D2034 		.ascii	"<= 49)\015\000"
 2172      39290D00 
 2173 0f73 00       		.align	2
 2174              	.LC166:
 2175 0f74 2020434C 		.ascii	"  CLUSEQ  <pause>        (Start CLU sequence with <"
 2175      55534551 
 2175      20203C70 
 2175      61757365 
 2175      3E202020 
 2176 0fa7 70617573 		.ascii	"pause> msec)\015\000"
 2176      653E206D 
 2176      73656329 
 2176      0D00
 2177 0fb5 000000   		.align	2
 2178              	.LC167:
 2179 0fb8 73657400 		.ascii	"set\000"
 2180              		.align	2
 2181              	.LC168:
 2182 0fbc 53796E74 		.ascii	"Syntax:\015\000"
 2182      61783A0D 
 2182      00
 2183 0fc5 000000   		.align	2
 2184              	.LC169:
 2185 0fc8 20205345 		.ascii	"  SET POL[ARITY]P   <polarity> (Sets Pan  Motor Pol"
 2185      5420504F 
 2185      4C5B4152 
 2185      4954595D 
 2185      50202020 
 2186 0ffb 61726974 		.ascii	"arity)\015\000"
 2186      79290D00 
 2187 1003 00       		.align	2
 2188              	.LC170:
 2189 1004 20205345 		.ascii	"  SET POL[ARITY]T   <polarity> (Sets Tilt Motor Pol"
 2189      5420504F 
 2189      4C5B4152 
 2189      4954595D 
 2189      54202020 
 2190 1037 61726974 		.ascii	"arity)\015\000"
 2190      79290D00 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 61


 2191 103f 00       		.align	2
 2192              	.LC171:
 2193 1040 20205345 		.ascii	"  SET KPP           <kpvalue>  (Sets Pan  Motor PID"
 2193      54204B50 
 2193      50202020 
 2193      20202020 
 2193      20202020 
 2194 1073 204B7029 		.ascii	" Kp)\015\000"
 2194      0D00
 2195 1079 000000   		.align	2
 2196              	.LC172:
 2197 107c 20205345 		.ascii	"  SET KPT           <kpvalue>  (Sets Tilt Motor PID"
 2197      54204B50 
 2197      54202020 
 2197      20202020 
 2197      20202020 
 2198 10af 204B7029 		.ascii	" Kp)\015\000"
 2198      0D00
 2199 10b5 000000   		.align	2
 2200              	.LC173:
 2201 10b8 20205345 		.ascii	"  SET KDP           <kdvalue>  (Sets Pan  Motor PID"
 2201      54204B44 
 2201      50202020 
 2201      20202020 
 2201      20202020 
 2202 10eb 204B6429 		.ascii	" Kd)\015\000"
 2202      0D00
 2203 10f1 000000   		.align	2
 2204              	.LC174:
 2205 10f4 20205345 		.ascii	"  SET KDT           <kdvalue>  (Sets Tilt Motor PID"
 2205      54204B44 
 2205      54202020 
 2205      20202020 
 2205      20202020 
 2206 1127 204B6429 		.ascii	" Kd)\015\000"
 2206      0D00
 2207 112d 000000   		.align	2
 2208              	.LC175:
 2209 1130 20205345 		.ascii	"  SET KIP           <kivalue>  (Sets Pan  Motor PID"
 2209      54204B49 
 2209      50202020 
 2209      20202020 
 2209      20202020 
 2210 1163 204B6929 		.ascii	" Ki)\015\000"
 2210      0D00
 2211 1169 000000   		.align	2
 2212              	.LC176:
 2213 116c 20205345 		.ascii	"  SET KIT           <kivalue>  (Sets Tilt Motor PID"
 2213      54204B49 
 2213      54202020 
 2213      20202020 
 2213      20202020 
 2214 119f 204B6929 		.ascii	" Ki)\015\000"
 2214      0D00
 2215 11a5 000000   		.align	2
 2216              	.LC177:
 2217 11a8 20205345 		.ascii	"  SET KSIP          <ksivalue> (Sets Pan  Motor PID"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 62


 2217      54204B53 
 2217      49502020 
 2217      20202020 
 2217      20202020 
 2218 11db 204B7369 		.ascii	" Ksi)\015\000"
 2218      290D00
 2219 11e2 0000     		.align	2
 2220              	.LC178:
 2221 11e4 20205345 		.ascii	"  SET KSIT          <ksivalue> (Sets Tilt Motor PID"
 2221      54204B53 
 2221      49542020 
 2221      20202020 
 2221      20202020 
 2222 1217 204B7369 		.ascii	" Ksi)\015\000"
 2222      290D00
 2223 121e 0000     		.align	2
 2224              	.LC179:
 2225 1220 20205345 		.ascii	"  SET L[IMIT]CP     <onoff>    (Sets Pan  Motor Lim"
 2225      54204C5B 
 2225      494D4954 
 2225      5D435020 
 2225      20202020 
 2226 1253 69742043 		.ascii	"it Control)\015\000"
 2226      6F6E7472 
 2226      6F6C290D 
 2226      00
 2227              		.align	2
 2228              	.LC180:
 2229 1260 20205345 		.ascii	"  SET L[IMIT]CT     <onoff>    (Sets Tilt Motor Lim"
 2229      54204C5B 
 2229      494D4954 
 2229      5D435420 
 2229      20202020 
 2230 1293 69742043 		.ascii	"it Control)\015\000"
 2230      6F6E7472 
 2230      6F6C290D 
 2230      00
 2231              		.align	2
 2232              	.LC181:
 2233 12a0 20205345 		.ascii	"  SET INV[ABS]P     <onoff>    (Pan  Absolute Senso"
 2233      5420494E 
 2233      565B4142 
 2233      535D5020 
 2233      20202020 
 2234 12d3 7220496E 		.ascii	"r Invertion)\015\000"
 2234      76657274 
 2234      696F6E29 
 2234      0D00
 2235 12e1 000000   		.align	2
 2236              	.LC182:
 2237 12e4 20205345 		.ascii	"  SET RATIO[ABS]P   <ratio>    (Pan  Absolute Senso"
 2237      54205241 
 2237      54494F5B 
 2237      4142535D 
 2237      50202020 
 2238 1317 72206F76 		.ascii	"r over Encoder Ratio)\015\000"
 2238      65722045 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 63


 2238      6E636F64 
 2238      65722052 
 2238      6174696F 
 2239 132e 0000     		.align	2
 2240              	.LC183:
 2241 1330 20205345 		.ascii	"  SET Z[EROABS]P               (Pan  Absolute Senso"
 2241      54205A5B 
 2241      45524F41 
 2241      42535D50 
 2241      20202020 
 2242 1363 72205A65 		.ascii	"r Zero calc procedure)\015\000"
 2242      726F2063 
 2242      616C6320 
 2242      70726F63 
 2242      65647572 
 2243 137b 00       		.align	2
 2244              	.LC184:
 2245 137c 20205345 		.ascii	"  SET L[IMIT]MINP              (Pan  Absolute Senso"
 2245      54204C5B 
 2245      494D4954 
 2245      5D4D494E 
 2245      50202020 
 2246 13af 72204C69 		.ascii	"r Limit MIN calc procedure)\015\000"
 2246      6D697420 
 2246      4D494E20 
 2246      63616C63 
 2246      2070726F 
 2247              		.align	2
 2248              	.LC185:
 2249 13cc 20205345 		.ascii	"  SET L[IMIT]MAXP              (Pan  Absolute Senso"
 2249      54204C5B 
 2249      494D4954 
 2249      5D4D4158 
 2249      50202020 
 2250 13ff 72204C69 		.ascii	"r Limit MAX calc procedure)\015\000"
 2250      6D697420 
 2250      4D415820 
 2250      63616C63 
 2250      2070726F 
 2251              		.align	2
 2252              	.LC186:
 2253 141c 20205345 		.ascii	"  SET L[IMIT]HYSTP  <hyst>     (Pan  Absolute Senso"
 2253      54204C5B 
 2253      494D4954 
 2253      5D485953 
 2253      54502020 
 2254 144f 72204C69 		.ascii	"r Limit Hysteresis)\015\000"
 2254      6D697420 
 2254      48797374 
 2254      65726573 
 2254      6973290D 
 2255              		.align	2
 2256              	.LC187:
 2257 1464 20205345 		.ascii	"  SET INV[ABS]T     <onoff>    (Tilt Absolute Senso"
 2257      5420494E 
 2257      565B4142 
 2257      535D5420 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 64


 2257      20202020 
 2258 1497 7220496E 		.ascii	"r Invertion)\015\000"
 2258      76657274 
 2258      696F6E29 
 2258      0D00
 2259 14a5 000000   		.align	2
 2260              	.LC188:
 2261 14a8 20205345 		.ascii	"  SET RATIO[ABS]T   <ratio>    (Tilt Absolute Senso"
 2261      54205241 
 2261      54494F5B 
 2261      4142535D 
 2261      54202020 
 2262 14db 72206F76 		.ascii	"r over Encoder Ratio)\015\000"
 2262      65722045 
 2262      6E636F64 
 2262      65722052 
 2262      6174696F 
 2263 14f2 0000     		.align	2
 2264              	.LC189:
 2265 14f4 20205345 		.ascii	"  SET Z[EROABS]T               (Tilt Absolute Senso"
 2265      54205A5B 
 2265      45524F41 
 2265      42535D54 
 2265      20202020 
 2266 1527 72205A65 		.ascii	"r Zero calc procedure)\015\000"
 2266      726F2063 
 2266      616C6320 
 2266      70726F63 
 2266      65647572 
 2267 153f 00       		.align	2
 2268              	.LC190:
 2269 1540 20205345 		.ascii	"  SET L[IMIT]MINT              (Tilt Absolute Senso"
 2269      54204C5B 
 2269      494D4954 
 2269      5D4D494E 
 2269      54202020 
 2270 1573 72204C69 		.ascii	"r Limit MIN calc procedure)\015\000"
 2270      6D697420 
 2270      4D494E20 
 2270      63616C63 
 2270      2070726F 
 2271              		.align	2
 2272              	.LC191:
 2273 1590 20205345 		.ascii	"  SET L[IMIT]MAXT              (Tilt Absolute Senso"
 2273      54204C5B 
 2273      494D4954 
 2273      5D4D4158 
 2273      54202020 
 2274 15c3 72204C69 		.ascii	"r Limit MAX calc procedure)\015\000"
 2274      6D697420 
 2274      4D415820 
 2274      63616C63 
 2274      2070726F 
 2275              		.align	2
 2276              	.LC192:
 2277 15e0 20205345 		.ascii	"  SET L[IMIT]HYSTT  <hyst>     (Tilt Absolute Senso"
 2277      54204C5B 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 65


 2277      494D4954 
 2277      5D485953 
 2277      54542020 
 2278 1613 72204C69 		.ascii	"r Limit Hysteresis)\015\000"
 2278      6D697420 
 2278      48797374 
 2278      65726573 
 2278      6973290D 
 2279              		.align	2
 2280              	.LC193:
 2281 1628 20205345 		.ascii	"  SET Q|SHOT        <qn> <qm>  (Axis positions Q(SH"
 2281      5420517C 
 2281      53484F54 
 2281      20202020 
 2281      20202020 
 2282 165b 4F542920 		.ascii	"OT) number <qn>  into memory <qm>)\015\000"
 2282      6E756D62 
 2282      6572203C 
 2282      716E3E20 
 2282      20696E74 
 2283 167f 00       		.align	2
 2284              	.LC194:
 2285 1680 20205345 		.ascii	"  SET A[NAOUT]AXIS  <axis>     (Analog Output Axis "
 2285      5420415B 
 2285      4E414F55 
 2285      545D4158 
 2285      49532020 
 2286 16b3 53656C65 		.ascii	"Select)\015\000"
 2286      6374290D 
 2286      00
 2287              		.align	2
 2288              	.LC195:
 2289 16bc 20205345 		.ascii	"  SET AS[TIM]TYPE   <astype>   (Motors Autostimolus"
 2289      54204153 
 2289      5B54494D 
 2289      5D545950 
 2289      45202020 
 2290 16ef 20547970 		.ascii	" Type: VOLATILE!)\015\000"
 2290      653A2056 
 2290      4F4C4154 
 2290      494C4521 
 2290      290D00
 2291 1702 0000     		.align	2
 2292              	.LC196:
 2293 1704 20205345 		.ascii	"  SET ASTIMP        <onoff>    (Pan  Motor Autostim"
 2293      54204153 
 2293      54494D50 
 2293      20202020 
 2293      20202020 
 2294 1737 6F6C6F75 		.ascii	"olous on-off: VOLATILE!)\015\000"
 2294      73206F6E 
 2294      2D6F6666 
 2294      3A20564F 
 2294      4C415449 
 2295 1751 000000   		.align	2
 2296              	.LC197:
 2297 1754 20205345 		.ascii	"  SET KOPFP         <kofvalue> (Pan  Motor Autostim"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 66


 2297      54204B4F 
 2297      50465020 
 2297      20202020 
 2297      20202020 
 2298 1787 6F6C7573 		.ascii	"olus Input Gain)\015\000"
 2298      20496E70 
 2298      75742047 
 2298      61696E29 
 2298      0D00
 2299 1799 000000   		.align	2
 2300              	.LC198:
 2301 179c 20205345 		.ascii	"  SET AGAINP        <anagain>  (Pan  Motor Analog O"
 2301      54204147 
 2301      41494E50 
 2301      20202020 
 2301      20202020 
 2302 17cf 75747075 		.ascii	"utput Gain)\015\000"
 2302      74204761 
 2302      696E290D 
 2302      00
 2303              		.align	2
 2304              	.LC199:
 2305 17dc 20205345 		.ascii	"  SET COLORP        <color>    (Pan  Motor Analog O"
 2305      5420434F 
 2305      4C4F5250 
 2305      20202020 
 2305      20202020 
 2306 180f 75747075 		.ascii	"utput Mux)\015\000"
 2306      74204D75 
 2306      78290D00 
 2307 181b 00       		.align	2
 2308              	.LC200:
 2309 181c 20205345 		.ascii	"  SET ASTIMT        <onoff>    (Tilt Motor Autostim"
 2309      54204153 
 2309      54494D54 
 2309      20202020 
 2309      20202020 
 2310 184f 6F6C6F75 		.ascii	"olous on-off: VOLATILE!)\015\000"
 2310      73206F6E 
 2310      2D6F6666 
 2310      3A20564F 
 2310      4C415449 
 2311 1869 000000   		.align	2
 2312              	.LC201:
 2313 186c 20205345 		.ascii	"  SET KOPFT         <kofvalue> (Tilt Motor Autostim"
 2313      54204B4F 
 2313      50465420 
 2313      20202020 
 2313      20202020 
 2314 189f 6F6C7573 		.ascii	"olus Input Gain)\015\000"
 2314      20496E70 
 2314      75742047 
 2314      61696E29 
 2314      0D00
 2315 18b1 000000   		.align	2
 2316              	.LC202:
 2317 18b4 20205345 		.ascii	"  SET AGAINT        <anagain>  (Tilt Motor Analog O"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 67


 2317      54204147 
 2317      41494E54 
 2317      20202020 
 2317      20202020 
 2318 18e7 75747075 		.ascii	"utput Gain)\015\000"
 2318      74204761 
 2318      696E290D 
 2318      00
 2319              		.align	2
 2320              	.LC203:
 2321 18f4 20205345 		.ascii	"  SET COLORT        <color>    (Tilt Motor Analog O"
 2321      5420434F 
 2321      4C4F5254 
 2321      20202020 
 2321      20202020 
 2322 1927 75747075 		.ascii	"utput Mux)\015\000"
 2322      74204D75 
 2322      78290D00 
 2323 1933 00       		.align	2
 2324              	.LC204:
 2325 1934 20205345 		.ascii	"  SET GAMMA         <avalue>   (IMU Euler Angles Lo"
 2325      54204741 
 2325      4D4D4120 
 2325      20202020 
 2325      20202020 
 2326 1967 77205061 		.ascii	"w Pass Filter)\015\000"
 2326      73732046 
 2326      696C7465 
 2326      72290D00 
 2327 1977 00       		.align	2
 2328              	.LC205:
 2329 1978 20205345 		.ascii	"  SET IMU[INV]Y[AW] <onoff>    (IMU Yaw   Euler Ang"
 2329      5420494D 
 2329      555B494E 
 2329      565D595B 
 2329      41575D20 
 2330 19ab 6C652049 		.ascii	"le Invertion)\015\000"
 2330      6E766572 
 2330      74696F6E 
 2330      290D00
 2331 19ba 0000     		.align	2
 2332              	.LC206:
 2333 19bc 20205345 		.ascii	"  SET IMU[INV]P[ITCH]<onoff>   (IMU Pitch Euler Ang"
 2333      5420494D 
 2333      555B494E 
 2333      565D505B 
 2333      49544348 
 2334 19ef 6C652049 		.ascii	"le Invertion)\015\000"
 2334      6E766572 
 2334      74696F6E 
 2334      290D00
 2335 19fe 0000     		.align	2
 2336              	.LC207:
 2337 1a00 20205345 		.ascii	"  SET IMU[INV]R[OLL] <onoff>   (IMU Roll  Euler Ang"
 2337      5420494D 
 2337      555B494E 
 2337      565D525B 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 68


 2337      4F4C4C5D 
 2338 1a33 6C652049 		.ascii	"le Invertion)\015\000"
 2338      6E766572 
 2338      74696F6E 
 2338      290D00
 2339 1a42 0000     		.align	2
 2340              	.LC208:
 2341 1a44 20205345 		.ascii	"  SET PREX[CHANGE]  <onoff>    (IMU Pitch-Roll Eule"
 2341      54205052 
 2341      45585B43 
 2341      48414E47 
 2341      455D2020 
 2342 1a77 7220416E 		.ascii	"r Angle Exchange)\015\000"
 2342      676C6520 
 2342      45786368 
 2342      616E6765 
 2342      290D00
 2343 1a8a 0000     		.align	2
 2344              	.LC209:
 2345 1a8c 20205345 		.ascii	"  SET BETA          <avalue>   (Analog Acceleromete"
 2345      54204245 
 2345      54412020 
 2345      20202020 
 2345      20202020 
 2346 1abf 72204C6F 		.ascii	"r Low Pass Filter)\015\000"
 2346      77205061 
 2346      73732046 
 2346      696C7465 
 2346      72290D00 
 2347 1ad3 00       		.align	2
 2348              	.LC210:
 2349 1ad4 20205345 		.ascii	"  SET AACXOF[FSET]  <offset>   (Analog Acceleromete"
 2349      54204141 
 2349      43584F46 
 2349      5B465345 
 2349      545D2020 
 2350 1b07 72204178 		.ascii	"r Axis X ADC Offset)\015\000"
 2350      69732058 
 2350      20414443 
 2350      204F6666 
 2350      73657429 
 2351 1b1d 000000   		.align	2
 2352              	.LC211:
 2353 1b20 20205345 		.ascii	"  SET AACYOF[FSET]  <offset>   (Analog Acceleromete"
 2353      54204141 
 2353      43594F46 
 2353      5B465345 
 2353      545D2020 
 2354 1b53 72204178 		.ascii	"r Axis Y ADC Offset)\015\000"
 2354      69732059 
 2354      20414443 
 2354      204F6666 
 2354      73657429 
 2355 1b69 000000   		.align	2
 2356              	.LC212:
 2357 1b6c 20205345 		.ascii	"  SET AACZOF[FSET]  <offset>   (Analog Acceleromete"
 2357      54204141 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 69


 2357      435A4F46 
 2357      5B465345 
 2357      545D2020 
 2358 1b9f 72204178 		.ascii	"r Axis Z ADC Offset)\015\000"
 2358      6973205A 
 2358      20414443 
 2358      204F6666 
 2358      73657429 
 2359 1bb5 000000   		.align	2
 2360              	.LC213:
 2361 1bb8 20205345 		.ascii	"  SET JUMPTH        <avalue>   (EVENT PARAMETER: Ju"
 2361      54204A55 
 2361      4D505448 
 2361      20202020 
 2361      20202020 
 2362 1beb 6D702047 		.ascii	"mp G Threshold)\015\000"
 2362      20546872 
 2362      6573686F 
 2362      6C64290D 
 2362      00
 2363              		.align	2
 2364              	.LC214:
 2365 1bfc 20205345 		.ascii	"  SET ACCTH         <avalue>   (EVENT PARAMETER: Ac"
 2365      54204143 
 2365      43544820 
 2365      20202020 
 2365      20202020 
 2366 1c2f 63656C65 		.ascii	"celeration G Threshold)\015\000"
 2366      72617469 
 2366      6F6E2047 
 2366      20546872 
 2366      6573686F 
 2367              		.align	2
 2368              	.LC215:
 2369 1c48 20205345 		.ascii	"  SET DIR[ECTOR]    <director> (Director Style)\015"
 2369      54204449 
 2369      525B4543 
 2369      544F525D 
 2369      20202020 
 2370 1c78 00       		.ascii	"\000"
 2371 1c79 000000   		.align	2
 2372              	.LC216:
 2373 1c7c 20205345 		.ascii	"  SET MODE          <mode>     (Machine Mode)\015\000"
 2373      54204D4F 
 2373      44452020 
 2373      20202020 
 2373      20202020 
 2374 1cab 00       		.align	2
 2375              	.LC217:
 2376 1cac 20203C70 		.ascii	"  <polarity>   = 0..1 [true | invert]\015\000"
 2376      6F6C6172 
 2376      6974793E 
 2376      2020203D 
 2376      20302E2E 
 2377 1cd3 00       		.align	2
 2378              	.LC218:
 2379 1cd4 20203C6B 		.ascii	"  <kpvalue>    = 0..100     (float n.m)\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 70


 2379      7076616C 
 2379      75653E20 
 2379      2020203D 
 2379      20302E2E 
 2380 1cfd 000000   		.align	2
 2381              	.LC219:
 2382 1d00 20203C6B 		.ascii	"  <kdvalue>    = 0..1000    (float n.m)\015\000"
 2382      6476616C 
 2382      75653E20 
 2382      2020203D 
 2382      20302E2E 
 2383 1d29 000000   		.align	2
 2384              	.LC220:
 2385 1d2c 20203C6B 		.ascii	"  <kivalue>    = 0..100     (float n.m)\015\000"
 2385      6976616C 
 2385      75653E20 
 2385      2020203D 
 2385      20302E2E 
 2386 1d55 000000   		.align	2
 2387              	.LC221:
 2388 1d58 20203C6B 		.ascii	"  <ksivalue>   = 0..1000000 (float n.m)\015\000"
 2388      73697661 
 2388      6C75653E 
 2388      2020203D 
 2388      20302E2E 
 2389 1d81 000000   		.align	2
 2390              	.LC222:
 2391 1d84 20203C64 		.ascii	"  <dbvalue>    = 0..1000    (float n.m)\015\000"
 2391      6276616C 
 2391      75653E20 
 2391      2020203D 
 2391      20302E2E 
 2392 1dad 000000   		.align	2
 2393              	.LC223:
 2394 1db0 20203C6B 		.ascii	"  <kofvalue>   = 0..10      (float n.m)\015\000"
 2394      6F667661 
 2394      6C75653E 
 2394      2020203D 
 2394      20302E2E 
 2395 1dd9 000000   		.align	2
 2396              	.LC224:
 2397 1ddc 20203C61 		.ascii	"  <anagain>    = -1000..1000  (float n.m)\015\000"
 2397      6E616761 
 2397      696E3E20 
 2397      2020203D 
 2397      202D3130 
 2398 1e07 00       		.align	2
 2399              	.LC225:
 2400 1e08 20203C61 		.ascii	"  <astype>     = 0(no astim), 1(sine), 2(triangle),"
 2400      73747970 
 2400      653E2020 
 2400      2020203D 
 2400      2030286E 
 2401 1e3b 20332873 		.ascii	" 3(square)\015\000"
 2401      71756172 
 2401      65290D00 
 2402 1e47 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 71


 2403              	.LC226:
 2404 1e48 20203C63 		.ascii	"  <color>      = 0(gyro rate), 1(enc pos), 2(enc ve"
 2404      6F6C6F72 
 2404      3E202020 
 2404      2020203D 
 2404      20302867 
 2405 1e7b 6C292C20 		.ascii	"l), 3(astim), 4(e(t)), 5(d_e(t)/dt),\015\000"
 2405      33286173 
 2405      74696D29 
 2405      2C203428 
 2405      65287429 
 2406 1ea1 000000   		.align	2
 2407              	.LC227:
 2408 1ea4 20202020 		.ascii	"                 6(int_e(t)), 7(Ki*int_e(t)), 8(cv("
 2408      20202020 
 2408      20202020 
 2408      20202020 
 2408      20362869 
 2409 1ed7 7429290D 		.ascii	"t))\015\000"
 2409      00
 2410              		.align	2
 2411              	.LC228:
 2412 1edc 20203C61 		.ascii	"  <axis>       = [PAN | TILT]\015\000"
 2412      7869733E 
 2412      20202020 
 2412      2020203D 
 2412      205B5041 
 2413 1efb 00       		.align	2
 2414              	.LC229:
 2415 1efc 20203C61 		.ascii	"  <avalue>     = 0 .. 1 (float n.m)\015\000"
 2415      76616C75 
 2415      653E2020 
 2415      2020203D 
 2415      2030202E 
 2416 1f21 000000   		.align	2
 2417              	.LC230:
 2418 1f24 20203C6F 		.ascii	"  <onoff>      = 0 .. 1 [off | on]\015\000"
 2418      6E6F6666 
 2418      3E202020 
 2418      2020203D 
 2418      2030202E 
 2419              		.align	2
 2420              	.LC231:
 2421 1f48 20203C6D 		.ascii	"  <mode>       = 0(REMOTE CONTROL), 1(DIRECTOR)\015"
 2421      6F64653E 
 2421      20202020 
 2421      2020203D 
 2421      20302852 
 2422 1f78 00       		.ascii	"\000"
 2423 1f79 000000   		.align	2
 2424              	.LC232:
 2425 1f7c 20203C71 		.ascii	"  <qn>         = 0..99\015\000"
 2425      6E3E2020 
 2425      20202020 
 2425      2020203D 
 2425      20302E2E 
 2426              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 72


 2427              	.LC233:
 2428 1f94 20203C71 		.ascii	"  <qm>         = 0..32 (\"clear\" or \"c\" to clear"
 2428      6D3E2020 
 2428      20202020 
 2428      2020203D 
 2428      20302E2E 
 2429 1fc3 2051206D 		.ascii	" Q memory)\015\000"
 2429      656D6F72 
 2429      79290D00 
 2430 1fcf 00       		.align	2
 2431              	.LC234:
 2432 1fd0 20203C64 		.ascii	"  <director>   = 0(Kubrick), 1(Hitchcock), 2(De Pal"
 2432      69726563 
 2432      746F723E 
 2432      2020203D 
 2432      2030284B 
 2433 2003 6D61292C 		.ascii	"ma), 3(Chaplin), 4(Linch), 5(Coppola)\015\000"
 2433      20332843 
 2433      6861706C 
 2433      696E292C 
 2433      2034284C 
 2434 202a 0000     		.align	2
 2435              	.LC235:
 2436 202c 20202020 		.ascii	"                 6(Scorsese), 7(Tarantino), 8(Scott"
 2436      20202020 
 2436      20202020 
 2436      20202020 
 2436      20362853 
 2437 205f 292C2039 		.ascii	"), 9(Leone), 10(Spielberg), 11(Burton)\015\000"
 2437      284C656F 
 2437      6E65292C 
 2437      20313028 
 2437      53706965 
 2438 2087 00       		.align	2
 2439              	.LC236:
 2440 2088 20202020 		.ascii	"                 12(Craven), 13(Fellini), 14(Ford),"
 2440      20202020 
 2440      20202020 
 2440      20202020 
 2440      20313228 
 2441 20bb 20313528 		.ascii	" 15(Nolan), 16(Del Toro), 17(Lucas), 18(Abrams)\015"
 2441      4E6F6C61 
 2441      6E292C20 
 2441      31362844 
 2441      656C2054 
 2442 20eb 00       		.ascii	"\000"
 2443              		.align	2
 2444              	.LC237:
 2445 20ec 73686F77 		.ascii	"show\000"
 2445      00
 2446 20f1 000000   		.align	2
 2447              	.LC238:
 2448 20f4 20205348 		.ascii	"  SHOW [P | PARAMS]      (All GoBee Parameters)\015"
 2448      4F57205B 
 2448      50207C20 
 2448      50415241 
 2448      4D535D20 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 73


 2449 2124 00       		.ascii	"\000"
 2450 2125 000000   		.align	2
 2451              	.LC239:
 2452 2128 20204641 		.ascii	"  FAULT[S]               (System Faults or Warnings"
 2452      554C545B 
 2452      535D2020 
 2452      20202020 
 2452      20202020 
 2453 215b 290D00   		.ascii	")\015\000"
 2454 215e 0000     		.align	2
 2455              	.LC240:
 2456 2160 20205348 		.ascii	"  SHOW BUT[TON]          (SW1 pushbutton state) \015"
 2456      4F572042 
 2456      55545B54 
 2456      4F4E5D20 
 2456      20202020 
 2457 2191 00       		.ascii	"\000"
 2458 2192 0000     		.align	2
 2459              	.LC241:
 2460 2194 20205348 		.ascii	"  SHOW ANA[LOGS]         (Analog Inputs as sampled "
 2460      4F572041 
 2460      4E415B4C 
 2460      4F47535D 
 2460      20202020 
 2461 21c7 62792041 		.ascii	"by ADC)\015\000"
 2461      4443290D 
 2461      00
 2462              		.align	2
 2463              	.LC242:
 2464 21d0 20205348 		.ascii	"  SHOW A[NALOG]ACC       (Bike Frame Analog Acceler"
 2464      4F572041 
 2464      5B4E414C 
 2464      4F475D41 
 2464      43432020 
 2465 2203 6F6D6574 		.ascii	"ometer Values)\015\000"
 2465      65722056 
 2465      616C7565 
 2465      73290D00 
 2466 2213 00       		.align	2
 2467              	.LC243:
 2468 2214 20205348 		.ascii	"  SHOW BIKE[ANGLES]      (BIKE Frame Euler Angles)\015"
 2468      4F572042 
 2468      494B455B 
 2468      414E474C 
 2468      45535D20 
 2469 2247 00       		.ascii	"\000"
 2470              		.align	2
 2471              	.LC244:
 2472 2248 20205348 		.ascii	"  SHOW S[YS]DYN          (Real Time System Dynamic "
 2472      4F572053 
 2472      5B59535D 
 2472      44594E20 
 2472      20202020 
 2473 227b 5363616C 		.ascii	"Scalar Value)\015\000"
 2473      61722056 
 2473      616C7565 
 2473      290D00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 74


 2474 228a 0000     		.align	2
 2475              	.LC245:
 2476 228c 20205348 		.ascii	"  SHOW POS[ITION]        (Real Time relative and ab"
 2476      4F572050 
 2476      4F535B49 
 2476      54494F4E 
 2476      5D202020 
 2477 22bf 736F6C75 		.ascii	"solute position Values)\015\000"
 2477      74652070 
 2477      6F736974 
 2477      696F6E20 
 2477      56616C75 
 2478              		.align	2
 2479              	.LC246:
 2480 22d8 20205348 		.ascii	"  SHOW ENCF[BK]          (Real Time Feedback Encode"
 2480      4F572045 
 2480      4E43465B 
 2480      424B5D20 
 2480      20202020 
 2481 230b 7273290D 		.ascii	"rs)\015\000"
 2481      00
 2482              		.align	2
 2483              	.LC247:
 2484 2310 20205348 		.ascii	"  SHOW P[AN]LIM[ITS]     (Real Time Pan  Limits Ela"
 2484      4F572050 
 2484      5B414E5D 
 2484      4C494D5B 
 2484      4954535D 
 2485 2343 626F7261 		.ascii	"boration)\015\000"
 2485      74696F6E 
 2485      290D00
 2486 234e 0000     		.align	2
 2487              	.LC248:
 2488 2350 20205348 		.ascii	"  SHOW T[ILT]LIM[ITS]    (Real Time Tilt Limits Ela"
 2488      4F572054 
 2488      5B494C54 
 2488      5D4C494D 
 2488      5B495453 
 2489 2383 626F7261 		.ascii	"boration)\015\000"
 2489      74696F6E 
 2489      290D00
 2490 238e 0000     		.align	2
 2491              	.LC249:
 2492 2390 20205348 		.ascii	"  SHOW RATIO[ABS]P       (Pan  Encoder-Absolute Sen"
 2492      4F572052 
 2492      4154494F 
 2492      5B414253 
 2492      5D502020 
 2493 23c3 736F7220 		.ascii	"sor ratio r=reset; s=set; e=save)\015\000"
 2493      72617469 
 2493      6F20723D 
 2493      72657365 
 2493      743B2073 
 2494 23e6 0000     		.align	2
 2495              	.LC250:
 2496 23e8 20205348 		.ascii	"  SHOW RATIO[ABS]T       (Tilt Encoder-Absolute Sen"
 2496      4F572052 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 75


 2496      4154494F 
 2496      5B414253 
 2496      5D542020 
 2497 241b 736F7220 		.ascii	"sor ratio r=reset; s=set; e=save)\015\000"
 2497      72617469 
 2497      6F20723D 
 2497      72657365 
 2497      743B2073 
 2498 243e 0000     		.align	2
 2499              	.LC251:
 2500 2440 20205348 		.ascii	"  SHOW PABS[STATS]       (Pan  Absolute Sensor Stat"
 2500      4F572050 
 2500      4142535B 
 2500      53544154 
 2500      535D2020 
 2501 2473 69737469 		.ascii	"istics results)\015\000"
 2501      63732072 
 2501      6573756C 
 2501      7473290D 
 2501      00
 2502              		.align	2
 2503              	.LC252:
 2504 2484 20205348 		.ascii	"  SHOW TABS[STATS]       (Tilt Absolute Sensor Stat"
 2504      4F572054 
 2504      4142535B 
 2504      53544154 
 2504      535D2020 
 2505 24b7 69737469 		.ascii	"istics results)\015\000"
 2505      63732072 
 2505      6573756C 
 2505      7473290D 
 2505      00
 2506              		.align	2
 2507              	.LC253:
 2508 24c8 20205348 		.ascii	"  SHOW MOT[ORSTATUS]     (Motor Status - Current OK"
 2508      4F57204D 
 2508      4F545B4F 
 2508      52535441 
 2508      5455535D 
 2509 24fb 206F7220 		.ascii	" or PEAK)\015\000"
 2509      5045414B 
 2509      290D00
 2510 2506 0000     		.align	2
 2511              	.LC254:
 2512 2508 20205348 		.ascii	"  SHOW CURRENT|I         (Motor Currents [mA])\015\000"
 2512      4F572043 
 2512      55525245 
 2512      4E547C49 
 2512      20202020 
 2513              		.align	2
 2514              	.LC255:
 2515 2538 20205348 		.ascii	"  SHOW PMT[ORQUE]        (Real Time Pan  Motor  Tor"
 2515      4F572050 
 2515      4D545B4F 
 2515      52515545 
 2515      5D202020 
 2516 256b 71756520 		.ascii	"que Statistics)\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 76


 2516      53746174 
 2516      69737469 
 2516      6373290D 
 2516      00
 2517              		.align	2
 2518              	.LC256:
 2519 257c 20205348 		.ascii	"  SHOW POT[ORQUE]        (Real Time Pan  Output Tor"
 2519      4F572050 
 2519      4F545B4F 
 2519      52515545 
 2519      5D202020 
 2520 25af 71756520 		.ascii	"que Statistics)\015\000"
 2520      53746174 
 2520      69737469 
 2520      6373290D 
 2520      00
 2521              		.align	2
 2522              	.LC257:
 2523 25c0 20205348 		.ascii	"  SHOW PMP[OWER]         (Real Time Pan  Motor  Ero"
 2523      4F572050 
 2523      4D505B4F 
 2523      5745525D 
 2523      20202020 
 2524 25f3 67617465 		.ascii	"gated Power Statistics)\015\000"
 2524      6420506F 
 2524      77657220 
 2524      53746174 
 2524      69737469 
 2525              		.align	2
 2526              	.LC258:
 2527 260c 20205348 		.ascii	"  SHOW TMT[ORQUE]        (Real Time Tilt Motor  Tor"
 2527      4F572054 
 2527      4D545B4F 
 2527      52515545 
 2527      5D202020 
 2528 263f 71756520 		.ascii	"que Statistics)\015\000"
 2528      53746174 
 2528      69737469 
 2528      6373290D 
 2528      00
 2529              		.align	2
 2530              	.LC259:
 2531 2650 20205348 		.ascii	"  SHOW TOT[ORQUE]        (Real Time Tilt Output Tor"
 2531      4F572054 
 2531      4F545B4F 
 2531      52515545 
 2531      5D202020 
 2532 2683 71756520 		.ascii	"que Statistics)\015\000"
 2532      53746174 
 2532      69737469 
 2532      6373290D 
 2532      00
 2533              		.align	2
 2534              	.LC260:
 2535 2694 20205348 		.ascii	"  SHOW TMP[OWER]         (Real Time Tilt Motor  Ero"
 2535      4F572054 
 2535      4D505B4F 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 77


 2535      5745525D 
 2535      20202020 
 2536 26c7 67617465 		.ascii	"gated Power Statistics)\015\000"
 2536      6420506F 
 2536      77657220 
 2536      53746174 
 2536      69737469 
 2537              		.align	2
 2538              	.LC261:
 2539 26e0 20205348 		.ascii	"  SHOW VCC               (Input Power Voltage)\015\000"
 2539      4F572056 
 2539      43432020 
 2539      20202020 
 2539      20202020 
 2540              		.align	2
 2541              	.LC262:
 2542 2710 20205348 		.ascii	"  SHOW [CONTROL|CTRL]    (Real Time Control Loop Va"
 2542      4F57205B 
 2542      434F4E54 
 2542      524F4C7C 
 2542      4354524C 
 2543 2743 6C756573 		.ascii	"lues)\015\000"
 2543      290D00
 2544 274a 0000     		.align	2
 2545              	.LC263:
 2546 274c 20205348 		.ascii	"  SHOW ASTIM             (Real Time Autostimolus Va"
 2546      4F572041 
 2546      5354494D 
 2546      20202020 
 2546      20202020 
 2547 277f 6C756573 		.ascii	"lues)\015\000"
 2547      290D00
 2548 2786 0000     		.align	2
 2549              	.LC264:
 2550 2788 20205348 		.ascii	"  SHOW PA[TH]  <n>       (Path Trapezoid Values [n="
 2550      4F572050 
 2550      415B5448 
 2550      5D20203C 
 2550      6E3E2020 
 2551 27bb 302E2E31 		.ascii	"0..15])\015\000"
 2551      355D290D 
 2551      00
 2552              		.align	2
 2553              	.LC265:
 2554 27c4 20205348 		.ascii	"  SHOW MOV[ER] <n>       (Rendering Values of Path "
 2554      4F57204D 
 2554      4F565B45 
 2554      525D203C 
 2554      6E3E2020 
 2555 27f7 6E205B6E 		.ascii	"n [n=0..15])\015\000"
 2555      3D302E2E 
 2555      31355D29 
 2555      0D00
 2556 2805 000000   		.align	2
 2557              	.LC266:
 2558 2808 20205348 		.ascii	"  SHOW MOVERS            (Real time Pan and Tilt Mo"
 2558      4F57204D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 78


 2558      4F564552 
 2558      53202020 
 2558      20202020 
 2559 283b 76657273 		.ascii	"vers Values)\015\000"
 2559      2056616C 
 2559      75657329 
 2559      0D00
 2560 2849 000000   		.align	2
 2561              	.LC267:
 2562 284c 20205348 		.ascii	"  SHOW CLU     <clu_num> (CLU GML definition [clu_n"
 2562      4F572043 
 2562      4C552020 
 2562      2020203C 
 2562      636C755F 
 2563 287f 756D3D30 		.ascii	"um=0..49])\015\000"
 2563      2E2E3439 
 2563      5D290D00 
 2564 288b 00       		.align	2
 2565              	.LC268:
 2566 288c 20205348 		.ascii	"  SHOW Q|SHOT  <n>       (Axis positions Q(SHOT) nu"
 2566      4F572051 
 2566      7C53484F 
 2566      5420203C 
 2566      6E3E2020 
 2567 28bf 6D626572 		.ascii	"mber <n> or <all>)\015\000"
 2567      203C6E3E 
 2567      206F7220 
 2567      3C616C6C 
 2567      3E290D00 
 2568 28d3 00       		.align	2
 2569              	.LC269:
 2570 28d4 20205348 		.ascii	"  SHOW CLUSM             (CLU Execution State Machi"
 2570      4F572043 
 2570      4C55534D 
 2570      20202020 
 2570      20202020 
 2571 2907 6E65290D 		.ascii	"ne)\015\000"
 2571      00
 2572              		.align	2
 2573              	.LC270:
 2574 290c 20205348 		.ascii	"  SHOW [EVENTS|MAPSM]    (Events & Director's Mappi"
 2574      4F57205B 
 2574      4556454E 
 2574      54537C4D 
 2574      4150534D 
 2575 293f 6E672053 		.ascii	"ng State Machine)\015\000"
 2575      74617465 
 2575      204D6163 
 2575      68696E65 
 2575      290D00
 2576 2952 0000     		.align	2
 2577              	.LC271:
 2578 2954 20202870 		.ascii	"  (press anykey to stop flushing)\015\000"
 2578      72657373 
 2578      20616E79 
 2578      6B657920 
 2578      746F2073 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 79


 2579 2977 00       		.align	2
 2580              	.LC272:
 2581 2978 7100     		.ascii	"q\000"
 2582 297a 0000     		.align	2
 2583              	.LC273:
 2584 297c 51202873 		.ascii	"Q (shot) Table\015\000"
 2584      686F7429 
 2584      20546162 
 2584      6C650D00 
 2585              		.align	2
 2586              	.LC274:
 2587 298c 2D2D2D2D 		.ascii	"--------------\015\000"
 2587      2D2D2D2D 
 2587      2D2D2D2D 
 2587      2D2D0D00 
 2588              		.align	2
 2589              	.LC275:
 2590 299c 5130303A 		.ascii	"Q00: origin\015\000"
 2590      206F7269 
 2590      67696E0D 
 2590      00
 2591 29a9 000000   		.align	2
 2592              	.LC276:
 2593 29ac 5131313A 		.ascii	"Q11: face\015\000"
 2593      20666163 
 2593      650D00
 2594 29b7 00       		.align	2
 2595              	.LC277:
 2596 29b8 5131333A 		.ascii	"Q13: legs\015\000"
 2596      206C6567 
 2596      730D00
 2597 29c3 00       		.align	2
 2598              	.LC278:
 2599 29c4 5131343A 		.ascii	"Q14: hand dx\015\000"
 2599      2068616E 
 2599      64206478 
 2599      0D00
 2600 29d2 0000     		.align	2
 2601              	.LC279:
 2602 29d4 5131353A 		.ascii	"Q15: hand sx\015\000"
 2602      2068616E 
 2602      64207378 
 2602      0D00
 2603 29e2 0000     		.align	2
 2604              	.LC280:
 2605 29e4 5131363A 		.ascii	"Q16: pedal dx\015\000"
 2605      20706564 
 2605      616C2064 
 2605      780D00
 2606 29f3 00       		.align	2
 2607              	.LC281:
 2608 29f4 5131373A 		.ascii	"Q17: pedal sx\015\000"
 2608      20706564 
 2608      616C2073 
 2608      780D00
 2609 2a03 00       		.align	2
 2610              	.LC282:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 80


 2611 2a04 5132313A 		.ascii	"Q21: wheel\015\000"
 2611      20776865 
 2611      656C0D00 
 2612              		.align	2
 2613              	.LC283:
 2614 2a10 5133313A 		.ascii	"Q31: road\015\000"
 2614      20726F61 
 2614      640D00
 2615 2a1b 00       		.align	2
 2616              	.LC284:
 2617 2a1c 5133333A 		.ascii	"Q33: road side dx\015\000"
 2617      20726F61 
 2617      64207369 
 2617      64652064 
 2617      780D00
 2618 2a2f 00       		.align	2
 2619              	.LC285:
 2620 2a30 5133343A 		.ascii	"Q34: road side sx\015\000"
 2620      20726F61 
 2620      64207369 
 2620      64652073 
 2620      780D00
 2621 2a43 00       		.align	2
 2622              	.LC286:
 2623 2a44 5134303A 		.ascii	"Q40: panorama front\015\000"
 2623      2070616E 
 2623      6F72616D 
 2623      61206672 
 2623      6F6E740D 
 2624 2a59 000000   		.align	2
 2625              	.LC287:
 2626 2a5c 5134313A 		.ascii	"Q41: panorama dx\015\000"
 2626      2070616E 
 2626      6F72616D 
 2626      61206478 
 2626      0D00
 2627 2a6e 0000     		.align	2
 2628              	.LC288:
 2629 2a70 5134323A 		.ascii	"Q42: panorama sx\015\000"
 2629      2070616E 
 2629      6F72616D 
 2629      61207378 
 2629      0D00
 2630 2a82 0000     		.align	2
 2631              	.LC289:
 2632 2a84 5134333A 		.ascii	"Q43: panorama dx rear\015\000"
 2632      2070616E 
 2632      6F72616D 
 2632      61206478 
 2632      20726561 
 2633 2a9b 00       		.align	2
 2634              	.LC290:
 2635 2a9c 5134343A 		.ascii	"Q44: panorama sx rear\015\000"
 2635      2070616E 
 2635      6F72616D 
 2635      61207378 
 2635      20726561 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 81


 2636 2ab3 00       		.align	2
 2637              	.LC291:
 2638 2ab4 5135313A 		.ascii	"Q51: sky\015\000"
 2638      20736B79 
 2638      0D00
 2639 2abe 0000     		.align	2
 2640              	.LC292:
 2641 2ac0 5135323A 		.ascii	"Q52: sky sx\015\000"
 2641      20736B79 
 2641      2073780D 
 2641      00
 2642 2acd 000000   		.align	2
 2643              	.LC293:
 2644 2ad0 5135333A 		.ascii	"Q53: sky dx\015\000"
 2644      20736B79 
 2644      2064780D 
 2644      00
 2645 2add 000000   		.align	2
 2646              	.LC294:
 2647 2ae0 74657374 		.ascii	"testdac\000"
 2647      64616300 
 2648              		.align	2
 2649              	.LC295:
 2650 2ae8 54455354 		.ascii	"TESTDAC: tests STEER DAC OUTPUT\015\000"
 2650      4441433A 
 2650      20746573 
 2650      74732053 
 2650      54454552 
 2651 2b09 000000   		.align	2
 2652              	.LC296:
 2653 2b0c 20205445 		.ascii	"  TESTDAC\015\000"
 2653      53544441 
 2653      430D00
 2654 2b17 00       		.align	2
 2655              	.LC297:
 2656 2b18 20205052 		.ascii	"  PROMPT\015\000"
 2656      4F4D5054 
 2656      0D00
 2657 2b22 0000     		.align	2
 2658              	.LC298:
 2659 2b24 20205645 		.ascii	"  VERSION\015\000"
 2659      5253494F 
 2659      4E0D00
 2660 2b2f 00       		.align	2
 2661              	.LC299:
 2662 2b30 2020560D 		.ascii	"  V\015\000"
 2662      00
 2663 2b35 000000   		.align	2
 2664              	.LC300:
 2665 2b38 23455252 		.ascii	"#ERROR3: Bad parameter(s)!\000"
 2665      4F52333A 
 2665      20426164 
 2665      20706172 
 2665      616D6574 
 2666 2b53 00       		.align	2
 2667              	.LC301:
 2668 2b54 7300     		.ascii	"s\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 82


 2669 2b56 0000     		.align	2
 2670              	.LC302:
 2671 2b58 636F6E74 		.ascii	"control\000"
 2671      726F6C00 
 2672              		.align	2
 2673              	.LC303:
 2674 2b60 6374726C 		.ascii	"ctrl\000"
 2674      00
 2675 2b65 000000   		.align	2
 2676              	.LC304:
 2677 2b68 1B5B324A 		.ascii	"\033[2J\000"
 2677      00
 2678 2b6d 000000   		.align	2
 2679              	.LC305:
 2680 2b70 1B5B4800 		.ascii	"\033[H\000"
 2681              		.align	2
 2682              	.LC306:
 2683 2b74 2D2D2D2D 		.ascii	"---------------------------------\015\000"
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2683      2D2D2D2D 
 2684 2b97 00       		.align	2
 2685              	.LC307:
 2686 2b98 2D2D2D20 		.ascii	"--- GoBee Director RT CONTROL ---\015\000"
 2686      476F4265 
 2686      65204469 
 2686      72656374 
 2686      6F722052 
 2687 2bbb 00       		.align	2
 2688              	.LC308:
 2689 2bbc 61786973 		.ascii	"axis_res(P)=%+1.3f [step/2PI]\000"
 2689      5F726573 
 2689      2850293D 
 2689      252B312E 
 2689      3366205B 
 2690 2bda 0000     		.align	2
 2691              	.LC309:
 2692 2bdc 61786973 		.ascii	"axis_res(T)=%+1.3f [step/2PI]\000"
 2692      5F726573 
 2692      2854293D 
 2692      252B312E 
 2692      3366205B 
 2693              		.global	__aeabi_i2f
 2694 2bfa 0000     		.align	2
 2695              	.LC310:
 2696 2bfc 616E676C 		.ascii	"angle(P)=%+1.4f [deg]\000"
 2696      65285029 
 2696      3D252B31 
 2696      2E346620 
 2696      5B646567 
 2697 2c12 0000     		.align	2
 2698              	.LC311:
 2699 2c14 616E676C 		.ascii	"angle(T)=%+1.4f [deg]\000"
 2699      65285429 
 2699      3D252B31 
 2699      2E346620 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 83


 2699      5B646567 
 2700 2c2a 0000     		.align	2
 2701              	.LC312:
 2702 2c2c 66626B28 		.ascii	"fbk(P)=%+1.4f [step]\000"
 2702      50293D25 
 2702      2B312E34 
 2702      66205B73 
 2702      7465705D 
 2703 2c41 000000   		.align	2
 2704              	.LC313:
 2705 2c44 66626B28 		.ascii	"fbk(T)=%+1.4f [step]\000"
 2705      54293D25 
 2705      2B312E34 
 2705      66205B73 
 2705      7465705D 
 2706 2c59 000000   		.align	2
 2707              	.LC314:
 2708 2c5c 6D617374 		.ascii	"mast_enc(P)=%+1.4f [step]\000"
 2708      5F656E63 
 2708      2850293D 
 2708      252B312E 
 2708      3466205B 
 2709 2c76 0000     		.align	2
 2710              	.LC315:
 2711 2c78 6D617374 		.ascii	"mast_enc(T)=%+1.4f [step]\000"
 2711      5F656E63 
 2711      2854293D 
 2711      252B312E 
 2711      3466205B 
 2712 2c92 0000     		.align	2
 2713              	.LC316:
 2714 2c94 6D617374 		.ascii	"mast_joy(P)=%+1.4f [step]\000"
 2714      5F6A6F79 
 2714      2850293D 
 2714      252B312E 
 2714      3466205B 
 2715 2cae 0000     		.align	2
 2716              	.LC317:
 2717 2cb0 6D617374 		.ascii	"mast_joy(T)=%+1.4f [step]\000"
 2717      5F6A6F79 
 2717      2854293D 
 2717      252B312E 
 2717      3466205B 
 2718 2cca 0000     		.align	2
 2719              	.LC318:
 2720 2ccc 65727228 		.ascii	"err(P)=%+1.4f\000"
 2720      50293D25 
 2720      2B312E34 
 2720      6600
 2721 2cda 0000     		.align	2
 2722              	.LC319:
 2723 2cdc 65727228 		.ascii	"err(T)=%+1.4f\000"
 2723      54293D25 
 2723      2B312E34 
 2723      6600
 2724 2cea 0000     		.align	2
 2725              	.LC320:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 84


 2726 2cec 64657272 		.ascii	"derr(P)=%+1.4f\000"
 2726      2850293D 
 2726      252B312E 
 2726      346600
 2727 2cfb 00       		.align	2
 2728              	.LC321:
 2729 2cfc 64657272 		.ascii	"derr(T)=%+1.4f\000"
 2729      2854293D 
 2729      252B312E 
 2729      346600
 2730 2d0b 00       		.align	2
 2731              	.LC322:
 2732 2d0c 69657272 		.ascii	"ierr(P)=%+1.4f\000"
 2732      2850293D 
 2732      252B312E 
 2732      346600
 2733 2d1b 00       		.align	2
 2734              	.LC323:
 2735 2d1c 69657272 		.ascii	"ierr(T)=%+1.4f\000"
 2735      2854293D 
 2735      252B312E 
 2735      346600
 2736 2d2b 00       		.align	2
 2737              	.LC324:
 2738 2d2c 63762850 		.ascii	"cv(P)=%+1.4f\000"
 2738      293D252B 
 2738      312E3466 
 2738      00
 2739 2d39 000000   		.align	2
 2740              	.LC325:
 2741 2d3c 63762854 		.ascii	"cv(T)=%+1.4f\000"
 2741      293D252B 
 2741      312E3466 
 2741      00
 2742 2d49 000000   		.align	2
 2743              	.LC326:
 2744 2d4c 70776D5F 		.ascii	"pwm_var(P)= %4i\000"
 2744      76617228 
 2744      50293D20 
 2744      25346900 
 2745              		.align	2
 2746              	.LC327:
 2747 2d5c 70776D5F 		.ascii	"pwm_var(T)= %4i\000"
 2747      76617228 
 2747      54293D20 
 2747      25346900 
 2748              		.align	2
 2749              	.LC328:
 2750 2d6c 50414E20 		.ascii	"PAN  TORQUE:\000"
 2750      20544F52 
 2750      5155453A 
 2750      00
 2751 2d79 000000   		.align	2
 2752              	.LC329:
 2753 2d7c 54494C54 		.ascii	"TILT TORQUE:\000"
 2753      20544F52 
 2753      5155453A 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 85


 2753      00
 2754 2d89 000000   		.align	2
 2755              	.LC330:
 2756 2d8c 4D414348 		.ascii	"MACHINE\015\000"
 2756      494E450D 
 2756      00
 2757 2d95 000000   		.align	2
 2758              	.LC331:
 2759 2d98 2D2D2D2D 		.ascii	"-------\015\000"
 2759      2D2D2D0D 
 2759      00
 2760 2da1 000000   		.align	2
 2761              	.LC332:
 2762 2da4 506F7765 		.ascii	"Power Status =\000"
 2762      72205374 
 2762      61747573 
 2762      203D00
 2763 2db3 00       		.align	2
 2764              	.LC333:
 2765 2db4 20476C6F 		.ascii	" Global DEENERGIZED\015\000"
 2765      62616C20 
 2765      4445454E 
 2765      45524749 
 2765      5A45440D 
 2766 2dc9 000000   		.align	2
 2767              	.LC334:
 2768 2dcc 20476C6F 		.ascii	" Global ENERGIZED!\015\000"
 2768      62616C20 
 2768      454E4552 
 2768      47495A45 
 2768      44210D00 
 2769              		.align	2
 2770              	.LC335:
 2771 2de0 2044414E 		.ascii	" DANGER!!! INTERNAL FIRMWARE FAULT\015\000"
 2771      47455221 
 2771      21212049 
 2771      4E544552 
 2771      4E414C20 
 2772              		.align	2
 2773              	.LC336:
 2774 2e04 6374726C 		.ascii	"ctrl isr counters START=%5i STOP=%5i  \015\012\000"
 2774      20697372 
 2774      20636F75 
 2774      6E746572 
 2774      73205354 
 2775 2e2d 000000   		.align	2
 2776              	.LC337:
 2777 2e30 616E616C 		.ascii	"analogs\000"
 2777      6F677300 
 2778              		.align	2
 2779              	.LC338:
 2780 2e38 616E6100 		.ascii	"ana\000"
 2781              		.align	2
 2782              	.LC339:
 2783 2e3c 495F503D 		.ascii	"I_P=%5d\000"
 2783      25356400 
 2784              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 86


 2785              	.LC340:
 2786 2e44 20495F54 		.ascii	" I_T=%5d\000"
 2786      3D253564 
 2786      00
 2787 2e4d 000000   		.align	2
 2788              	.LC341:
 2789 2e50 20566363 		.ascii	" Vcc=%5d\000"
 2789      3D253564 
 2789      00
 2790 2e59 000000   		.align	2
 2791              	.LC342:
 2792 2e5c 2041783D 		.ascii	" Ax=%5d\000"
 2792      25356400 
 2793              		.align	2
 2794              	.LC343:
 2795 2e64 2041793D 		.ascii	" Ay=%5d\000"
 2795      25356400 
 2796              		.align	2
 2797              	.LC344:
 2798 2e6c 20417A3D 		.ascii	" Az=%5d\000"
 2798      25356400 
 2799              		.align	2
 2800              	.LC345:
 2801 2e74 20414253 		.ascii	" ABS_P=%5d\000"
 2801      5F503D25 
 2801      356400
 2802 2e7f 00       		.align	2
 2803              	.LC346:
 2804 2e80 20414253 		.ascii	" ABS_T=%5d\000"
 2804      5F543D25 
 2804      356400
 2805 2e8b 00       		.align	2
 2806              	.LC347:
 2807 2e8c 20617374 		.ascii	" astim=%5d\000"
 2807      696D3D25 
 2807      356400
 2808 2e97 00       		.align	2
 2809              	.LC348:
 2810 2e98 76636300 		.ascii	"vcc\000"
 2811              		.global	__aeabi_dmul
 2812              		.align	2
 2813              	.LC349:
 2814 2e9c 56434320 		.ascii	"VCC = %3.1f [V]\015\012\000"
 2814      3D202533 
 2814      2E316620 
 2814      5B565D0D 
 2814      0A00
 2815 2eae 0000     		.align	2
 2816              	.LC350:
 2817 2eb0 63757272 		.ascii	"current\000"
 2817      656E7400 
 2818              		.align	2
 2819              	.LC351:
 2820 2eb8 6900     		.ascii	"i\000"
 2821 2eba 0000     		.align	2
 2822              	.LC352:
 2823 2ebc 69287429 		.ascii	"i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 87


 2823      5F50414E 
 2823      203D2025 
 2823      352E3466 
 2823      205B415D 
 2824              		.align	2
 2825              	.LC353:
 2826 2ee8 20202020 		.ascii	"     Drive Status=%2u \000"
 2826      20447269 
 2826      76652053 
 2826      74617475 
 2826      733D2532 
 2827 2eff 00       		.align	2
 2828              	.LC354:
 2829 2f00 28692874 		.ascii	"(i(t)_PAN PEAK!) \000"
 2829      295F5041 
 2829      4E205045 
 2829      414B2129 
 2829      2000
 2830 2f12 0000     		.align	2
 2831              	.LC355:
 2832 2f14 28692874 		.ascii	"(i(t)_PAN OK!)  \000"
 2832      295F5041 
 2832      4E204F4B 
 2832      21292020 
 2832      00
 2833 2f25 000000   		.align	2
 2834              	.LC356:
 2835 2f28 28692874 		.ascii	"(i(t)_TILT PEAK!)\000"
 2835      295F5449 
 2835      4C542050 
 2835      45414B21 
 2835      2900
 2836 2f3a 0000     		.align	2
 2837              	.LC357:
 2838 2f3c 28692874 		.ascii	"(i(t)_TILT OK!)\000"
 2838      295F5449 
 2838      4C54204F 
 2838      4B212900 
 2839              		.align	2
 2840              	.LC358:
 2841 2f4c 706D746F 		.ascii	"pmtorque\000"
 2841      72717565 
 2841      00
 2842 2f55 000000   		.align	2
 2843              	.LC359:
 2844 2f58 706D7400 		.ascii	"pmt\000"
 2845              		.align	2
 2846              	.LC360:
 2847 2f5c 0D0A4178 		.ascii	"\015\012Axis=Pan\015\012\015\000"
 2847      69733D50 
 2847      616E0D0A 
 2847      0D00
 2848 2f6a 0000     		.align	2
 2849              	.LC361:
 2850 2f6c 695F743D 		.ascii	"i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_ma"
 2850      25332E33 
 2850      665B415D 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 88


 2850      20286E6C 
 2850      3D25332E 
 2851 2f9f 783D2533 		.ascii	"x=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_med=%3.2f[A]  TM"
 2851      2E32665B 
 2851      415D2020 
 2851      544D4F54 
 2851      5F6D6178 
 2852 2fd2 4F545F6D 		.ascii	"OT_med=%3.2f[mNm]\015\012\000"
 2852      65643D25 
 2852      332E3266 
 2852      5B6D4E6D 
 2852      5D0D0A00 
 2853 2fe6 0000     		.align	2
 2854              	.LC362:
 2855 2fe8 0D0A4261 		.ascii	"\015\012Battery Capacity Used=%3.2f [mAh]  Percenta"
 2855      74746572 
 2855      79204361 
 2855      70616369 
 2855      74792055 
 2856 3015 67652831 		.ascii	"ge(1000mAh)=%3.2f [%%]\015\012\000"
 2856      3030306D 
 2856      4168293D 
 2856      25332E32 
 2856      66205B25 
 2857 302e 0000     		.align	2
 2858              	.LC363:
 2859 3030 746D746F 		.ascii	"tmtorque\000"
 2859      72717565 
 2859      00
 2860 3039 000000   		.align	2
 2861              	.LC364:
 2862 303c 746D7400 		.ascii	"tmt\000"
 2863              		.align	2
 2864              	.LC365:
 2865 3040 0D0A4178 		.ascii	"\015\012Axis=Tilt\015\012\015\000"
 2865      69733D54 
 2865      696C740D 
 2865      0A0D00
 2866 304f 00       		.align	2
 2867              	.LC366:
 2868 3050 706F746F 		.ascii	"potorque\000"
 2868      72717565 
 2868      00
 2869 3059 000000   		.align	2
 2870              	.LC367:
 2871 305c 706F7400 		.ascii	"pot\000"
 2872              		.align	2
 2873              	.LC368:
 2874 3060 695F743D 		.ascii	"i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_ma"
 2874      25332E33 
 2874      665B415D 
 2874      20286E6C 
 2874      3D25332E 
 2875 3093 783D2533 		.ascii	"x=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_med=%3.2f[A]  TO"
 2875      2E32665B 
 2875      415D2020 
 2875      544F5554 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 89


 2875      5F6D6178 
 2876 30c6 55545F6D 		.ascii	"UT_med=%3.2f[mNm]\015\012\000"
 2876      65643D25 
 2876      332E3266 
 2876      5B6D4E6D 
 2876      5D0D0A00 
 2877 30da 0000     		.align	2
 2878              	.LC369:
 2879 30dc 746F746F 		.ascii	"totorque\000"
 2879      72717565 
 2879      00
 2880 30e5 000000   		.align	2
 2881              	.LC370:
 2882 30e8 746F7400 		.ascii	"tot\000"
 2883              		.align	2
 2884              	.LC371:
 2885 30ec 706D706F 		.ascii	"pmpower\000"
 2885      77657200 
 2886              		.align	2
 2887              	.LC372:
 2888 30f4 706D7000 		.ascii	"pmp\000"
 2889              		.align	2
 2890              	.LC373:
 2891 30f8 54287429 		.ascii	"T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p"
 2891      3D25332E 
 2891      31665B6D 
 2891      4E6D5D20 
 2891      20762874 
 2892 312b 2874293D 		.ascii	"(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed=%3.1f[mW]\015\012"
 2892      25332E31 
 2892      665B6D57 
 2892      5D202070 
 2892      6D61783D 
 2893 315a 00       		.ascii	"\000"
 2894 315b 00       		.align	2
 2895              	.LC374:
 2896 315c 746D706F 		.ascii	"tmpower\000"
 2896      77657200 
 2897              		.align	2
 2898              	.LC375:
 2899 3164 746D7000 		.ascii	"tmp\000"
 2900              		.align	2
 2901              	.LC376:
 2902 3168 70616273 		.ascii	"pabsstats\000"
 2902      73746174 
 2902      7300
 2903 3172 0000     		.align	2
 2904              	.LC377:
 2905 3174 70616273 		.ascii	"pabs\000"
 2905      00
 2906 3179 000000   		.align	2
 2907              	.LC378:
 2908 317c 50414E20 		.ascii	"PAN Absolute Sensor:\000"
 2908      4162736F 
 2908      6C757465 
 2908      2053656E 
 2908      736F723A 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 90


 2909 3191 000000   		.align	2
 2910              	.LC379:
 2911 3194 206D6561 		.ascii	" mean=%+1.1f [raw]\000"
 2911      6E3D252B 
 2911      312E3166 
 2911      205B7261 
 2911      775D00
 2912 31a7 00       		.align	2
 2913              	.LC380:
 2914 31a8 206D6178 		.ascii	" max=%+1.1f [raw]\000"
 2914      3D252B31 
 2914      2E316620 
 2914      5B726177 
 2914      5D00
 2915 31ba 0000     		.align	2
 2916              	.LC381:
 2917 31bc 206D696E 		.ascii	" min=%+1.1f [raw]\000"
 2917      3D252B31 
 2917      2E316620 
 2917      5B726177 
 2917      5D00
 2918 31ce 0000     		.align	2
 2919              	.LC382:
 2920 31d0 2072616E 		.ascii	" range=%+1.1f [raw]\000"
 2920      67653D25 
 2920      2B312E31 
 2920      66205B72 
 2920      61775D00 
 2921              		.align	2
 2922              	.LC383:
 2923 31e4 74616273 		.ascii	"tabsstats\000"
 2923      73746174 
 2923      7300
 2924 31ee 0000     		.align	2
 2925              	.LC384:
 2926 31f0 74616273 		.ascii	"tabs\000"
 2926      00
 2927 31f5 000000   		.align	2
 2928              	.LC385:
 2929 31f8 54494C54 		.ascii	"TILT Absolute Sensor:\000"
 2929      20416273 
 2929      6F6C7574 
 2929      65205365 
 2929      6E736F72 
 2930 320e 0000     		.align	2
 2931              	.LC386:
 2932 3210 61737469 		.ascii	"astim\000"
 2932      6D00
 2933 3216 0000     		.align	2
 2934              	.LC387:
 2935 3218 41535449 		.ascii	"ASTIM(ADC_INPUT) =%+5d [lsb]\000"
 2935      4D284144 
 2935      435F494E 
 2935      50555429 
 2935      203D252B 
 2936 3235 000000   		.align	2
 2937              	.LC388:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 91


 2938 3238 20202041 		.ascii	"   ASTIM(P)=%+5.1f [step]\000"
 2938      5354494D 
 2938      2850293D 
 2938      252B352E 
 2938      3166205B 
 2939 3252 0000     		.align	2
 2940              	.LC389:
 2941 3254 20202041 		.ascii	"   ASTIM(T)=%+5.1f [step]\015\012\000"
 2941      5354494D 
 2941      2854293D 
 2941      252B352E 
 2941      3166205B 
 2942              		.align	2
 2943              	.LC390:
 2944 3270 62696B65 		.ascii	"bikeangles\000"
 2944      616E676C 
 2944      657300
 2945 327b 00       		.align	2
 2946              	.LC391:
 2947 327c 62696B65 		.ascii	"bike\000"
 2947      00
 2948 3281 000000   		.align	2
 2949              	.LC392:
 2950 3284 42494B45 		.ascii	"BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt)"
 2950      2045554C 
 2950      4552204C 
 2950      50462041 
 2950      4E474C45 
 2951 32b7 3A25362E 		.ascii	":%6.3f | ROLL(roll):%6.3f |\015\012\000"
 2951      3366207C 
 2951      20524F4C 
 2951      4C28726F 
 2951      6C6C293A 
 2952 32d5 000000   		.align	2
 2953              	.LC393:
 2954 32d8 616E616C 		.ascii	"analogacc\000"
 2954      6F676163 
 2954      6300
 2955 32e2 0000     		.align	2
 2956              	.LC394:
 2957 32e4 61616363 		.ascii	"aacc\000"
 2957      00
 2958 32e9 000000   		.align	2
 2959              	.LC395:
 2960 32ec 783D252B 		.ascii	"x=%+1.4f[g] (%5i)\000"
 2960      312E3466 
 2960      5B675D20 
 2960      28253569 
 2960      2900
 2961 32fe 0000     		.align	2
 2962              	.LC396:
 2963 3300 20793D25 		.ascii	" y=%+1.4f[g] (%5i)\000"
 2963      2B312E34 
 2963      665B675D 
 2963      20282535 
 2963      692900
 2964 3313 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 92


 2965              	.LC397:
 2966 3314 207A3D25 		.ascii	" z=%+1.4f[g] (%5i)\000"
 2966      2B312E34 
 2966      665B675D 
 2966      20282535 
 2966      692900
 2967 3327 00       		.align	2
 2968              	.LC398:
 2969 3328 206D6F64 		.ascii	" modulo=%+1.4f[g]\000"
 2969      756C6F3D 
 2969      252B312E 
 2969      34665B67 
 2969      5D00
 2970 333a 0000     		.align	2
 2971              	.LC399:
 2972 333c 20736479 		.ascii	" sdyn=%+1.4f[g^2]\000"
 2972      6E3D252B 
 2972      312E3466 
 2972      5B675E32 
 2972      5D00
 2973 334e 0000     		.align	2
 2974              	.LC400:
 2975 3350 6576656E 		.ascii	"events\000"
 2975      747300
 2976 3357 00       		.align	2
 2977              	.LC401:
 2978 3358 6576656E 		.ascii	"event\000"
 2978      7400
 2979 335e 0000     		.align	2
 2980              	.LC402:
 2981 3360 6D617073 		.ascii	"mapsm\000"
 2981      6D00
 2982 3366 0000     		.align	2
 2983              	.LC403:
 2984 3368 4576656E 		.ascii	"Events\000"
 2984      747300
 2985 336f 00       		.align	2
 2986              	.LC404:
 2987 3370 206F6E5F 		.ascii	" on_origin_ticks=%ld\000"
 2987      6F726967 
 2987      696E5F74 
 2987      69636B73 
 2987      3D256C64 
 2988 3385 000000   		.align	2
 2989              	.LC405:
 2990 3388 20616E67 		.ascii	" angle_tilt=%2i\000"
 2990      6C655F74 
 2990      696C743D 
 2990      25326900 
 2991              		.align	2
 2992              	.LC406:
 2993 3398 20766962 		.ascii	" vibration=%2i\000"
 2993      72617469 
 2993      6F6E3D25 
 2993      326900
 2994 33a7 00       		.align	2
 2995              	.LC407:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 93


 2996 33a8 206A756D 		.ascii	" jump=%2i\000"
 2996      703D2532 
 2996      6900
 2997 33b2 0000     		.align	2
 2998              	.LC408:
 2999 33b4 20736D3D 		.ascii	" sm=%3i \000"
 2999      25336920 
 2999      00
 3000 33bd 000000   		.align	2
 3001              	.LC409:
 3002 33c0 636C7573 		.ascii	"clusm\000"
 3002      6D00
 3003 33c6 0000     		.align	2
 3004              	.LC410:
 3005 33c8 434C5520 		.ascii	"CLU SM: \000"
 3005      534D3A20 
 3005      00
 3006 33d1 000000   		.align	2
 3007              	.LC411:
 3008 33d4 206E756D 		.ascii	" number=%3i\000"
 3008      6265723D 
 3008      25336900 
 3009              		.align	2
 3010              	.LC412:
 3011 33e0 206C696E 		.ascii	" line=%3i\000"
 3011      653D2533 
 3011      6900
 3012 33ea 0000     		.align	2
 3013              	.LC413:
 3014 33ec 20706175 		.ascii	" pauseticks=%3i\000"
 3014      73657469 
 3014      636B733D 
 3014      25336900 
 3015              		.align	2
 3016              	.LC414:
 3017 33fc 20737461 		.ascii	" status=%3i \000"
 3017      7475733D 
 3017      25336920 
 3017      00
 3018 3409 000000   		.align	2
 3019              	.LC415:
 3020 340c 62757474 		.ascii	"buttons\000"
 3020      6F6E7300 
 3021              		.align	2
 3022              	.LC416:
 3023 3414 62757400 		.ascii	"but\000"
 3024              		.align	2
 3025              	.LC417:
 3026 3418 42555454 		.ascii	"BUTTONS = %3i\000"
 3026      4F4E5320 
 3026      3D202533 
 3026      6900
 3027 3426 0000     		.align	2
 3028              	.LC418:
 3029 3428 20284F4E 		.ascii	" (ON)\000"
 3029      2900
 3030 342e 0000     		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 94


 3031              	.LC419:
 3032 3430 20284357 		.ascii	" (CW)\000"
 3032      2900
 3033 3436 0000     		.align	2
 3034              	.LC420:
 3035 3438 20284343 		.ascii	" (CCW)\000"
 3035      572900
 3036 343f 00       		.align	2
 3037              	.LC421:
 3038 3440 73797364 		.ascii	"sysdyn\000"
 3038      796E00
 3039 3447 00       		.align	2
 3040              	.LC422:
 3041 3448 7364796E 		.ascii	"sdyn\000"
 3041      00
 3042 344d 000000   		.align	2
 3043              	.LC423:
 3044 3450 53797374 		.ascii	"System Dynamic Scalar=%1.8f  [xacc_ADC^2+yacc_ADC^2"
 3044      656D2044 
 3044      796E616D 
 3044      69632053 
 3044      63616C61 
 3045 3483 2D283167 		.ascii	"-(1g_ADC)^2]\000"
 3045      5F414443 
 3045      295E325D 
 3045      00
 3046              		.align	2
 3047              	.LC424:
 3048 3490 706F7369 		.ascii	"position\000"
 3048      74696F6E 
 3048      00
 3049 3499 000000   		.align	2
 3050              	.LC425:
 3051 349c 706F7300 		.ascii	"pos\000"
 3052              		.align	2
 3053              	.LC426:
 3054 34a0 20616273 		.ascii	" abs_pos(t)=%+ld [step]\000"
 3054      5F706F73 
 3054      2874293D 
 3054      252B6C64 
 3054      205B7374 
 3055              		.align	2
 3056              	.LC427:
 3057 34b8 2028252B 		.ascii	" (%+3.2f [rad])\000"
 3057      332E3266 
 3057      205B7261 
 3057      645D2900 
 3058              		.align	2
 3059              	.LC428:
 3060 34c8 20202020 		.ascii	"    TILT: enc(t)=%+ld [step]\000"
 3060      54494C54 
 3060      3A20656E 
 3060      63287429 
 3060      3D252B6C 
 3061 34e5 000000   		.align	2
 3062              	.LC429:
 3063 34e8 656E6366 		.ascii	"encfbk\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 95


 3063      626B00
 3064 34ef 00       		.align	2
 3065              	.LC430:
 3066 34f0 656E6366 		.ascii	"encf\000"
 3066      00
 3067 34f5 000000   		.align	2
 3068              	.LC431:
 3069 34f8 44414E47 		.ascii	"DANGER!!! THIS COMMAND DISABLES MOTOR CONTROL AND M"
 3069      45522121 
 3069      21205448 
 3069      49532043 
 3069      4F4D4D41 
 3070 352b 41592050 		.ascii	"AY PRODUCE LARGE MOVEMENTS!!!\015\000"
 3070      524F4455 
 3070      4345204C 
 3070      41524745 
 3070      204D4F56 
 3071 354a 0000     		.align	2
 3072              	.LC432:
 3073 354c 41726520 		.ascii	"Are you sure to show feedback encoders [Y/N]?\000"
 3073      796F7520 
 3073      73757265 
 3073      20746F20 
 3073      73686F77 
 3074 357a 0000     		.align	2
 3075              	.LC433:
 3076 357c 50414E5F 		.ascii	"PAN_FBK=%8ld\000"
 3076      46424B3D 
 3076      25386C64 
 3076      00
 3077 3589 000000   		.align	2
 3078              	.LC434:
 3079 358c 20205449 		.ascii	"  TILT_FBK=%8ld\015\012\000"
 3079      4C545F46 
 3079      424B3D25 
 3079      386C640D 
 3079      0A00
 3080 359e 0000     		.align	2
 3081              	.LC435:
 3082 35a0 6D6F746F 		.ascii	"motorstatus\000"
 3082      72737461 
 3082      74757300 
 3083              		.align	2
 3084              	.LC436:
 3085 35ac 6D6F7400 		.ascii	"mot\000"
 3086              		.align	2
 3087              	.LC437:
 3088 35b0 4D6F746F 		.ascii	"Motor Status=%2u \000"
 3088      72205374 
 3088      61747573 
 3088      3D253275 
 3088      2000
 3089 35c2 0000     		.align	2
 3090              	.LC438:
 3091 35c4 50414E20 		.ascii	"PAN CURRENT PEAK!) \000"
 3091      43555252 
 3091      454E5420 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 96


 3091      5045414B 
 3091      21292000 
 3092              		.align	2
 3093              	.LC439:
 3094 35d8 2850414E 		.ascii	"(PAN CURRENT OK!)  \000"
 3094      20435552 
 3094      52454E54 
 3094      204F4B21 
 3094      29202000 
 3095              		.align	2
 3096              	.LC440:
 3097 35ec 2854494C 		.ascii	"(TILT CURRENT PEAK!)\000"
 3097      54204355 
 3097      5252454E 
 3097      54205045 
 3097      414B2129 
 3098 3601 000000   		.align	2
 3099              	.LC441:
 3100 3604 2854494C 		.ascii	"(TILT CURRENT OK!)\000"
 3100      54204355 
 3100      5252454E 
 3100      54204F4B 
 3100      212900
 3101 3617 00       		.align	2
 3102              	.LC442:
 3103 3618 73686F74 		.ascii	"shot\000"
 3103      00
 3104 361d 000000   		.align	2
 3105              	.LC443:
 3106 3620 616C6C00 		.ascii	"all\000"
 3107              		.align	2
 3108              	.LC444:
 3109 3624 514D656D 		.ascii	"QMemory%02d NOT ALLOCATED!\015\012\000"
 3109      6F727925 
 3109      30326420 
 3109      4E4F5420 
 3109      414C4C4F 
 3110 3641 000000   		.align	2
 3111              	.LC445:
 3112 3644 514D656D 		.ascii	"QMemory%02d allocated to Q%02d\015\012\000"
 3112      6F727925 
 3112      30326420 
 3112      616C6C6F 
 3112      63617465 
 3113 3665 000000   		.align	2
 3114              	.LC446:
 3115 3668 51253032 		.ascii	"Q%02d PAN  ABS position=%+8ld [step]  default_param"
 3115      64205041 
 3115      4E202041 
 3115      42532070 
 3115      6F736974 
 3116 369b 3D252B38 		.ascii	"=%+8ld [step]  adjust_param=%+8ld [step]\015\012\000"
 3116      6C64205B 
 3116      73746570 
 3116      5D202061 
 3116      646A7573 
 3117 36c6 0000     		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 97


 3118              	.LC447:
 3119 36c8 51253032 		.ascii	"Q%02d TILT ABS position=%+8ld [step]  default_param"
 3119      64205449 
 3119      4C542041 
 3119      42532070 
 3119      6F736974 
 3120 36fb 3D252B38 		.ascii	"=%+8ld [step]  adjust_param=%+8ld [step]\015\012\000"
 3120      6C64205B 
 3120      73746570 
 3120      5D202061 
 3120      646A7573 
 3121 3726 0000     		.align	2
 3122              	.LC448:
 3123 3728 0D0A2851 		.ascii	"\015\012(Q%02d is allocated in Q memory number %02d"
 3123      25303264 
 3123      20697320 
 3123      616C6C6F 
 3123      63617465 
 3124 3755 290D0A00 		.ascii	")\015\012\000"
 3125 3759 000000   		.align	2
 3126              	.LC449:
 3127 375c 0D0A5125 		.ascii	"\015\012Q%02d is not allocated!\015\012\000"
 3127      30326420 
 3127      6973206E 
 3127      6F742061 
 3127      6C6C6F63 
 3128              		.align	2
 3129              	.LC450:
 3130 3778 23455252 		.ascii	"#ERROR5: Number not allowed!\000"
 3130      4F52353A 
 3130      204E756D 
 3130      62657220 
 3130      6E6F7420 
 3131 3795 000000   		.align	2
 3132              	.LC451:
 3133 3798 6D6F7665 		.ascii	"movers\000"
 3133      727300
 3134 379f 00       		.align	2
 3135              	.LC452:
 3136 37a0 4D6F7665 		.ascii	"Movers Ticks=%+ld, %+ld [ticks]\000"
 3136      72732054 
 3136      69636B73 
 3136      3D252B6C 
 3136      642C2025 
 3137              		.align	2
 3138              	.LC453:
 3139 37c0 20207374 		.ascii	"  status=%2i, %2i\000"
 3139      61747573 
 3139      3D253269 
 3139      2C202532 
 3139      6900
 3140 37d2 0000     		.align	2
 3141              	.LC454:
 3142 37d4 636C7500 		.ascii	"clu\000"
 3143              		.align	2
 3144              	.LC455:
 3145 37d8 70616E6C 		.ascii	"panlimits\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 98


 3145      696D6974 
 3145      7300
 3146 37e2 0000     		.align	2
 3147              	.LC456:
 3148 37e4 706C696D 		.ascii	"plim\000"
 3148      00
 3149 37e9 000000   		.align	2
 3150              	.LC457:
 3151 37ec 50414E20 		.ascii	"PAN LIMIT=%2u \000"
 3151      4C494D49 
 3151      543D2532 
 3151      752000
 3152 37fb 00       		.align	2
 3153              	.LC458:
 3154 37fc 74696C74 		.ascii	"tiltlimits\000"
 3154      6C696D69 
 3154      747300
 3155 3807 00       		.align	2
 3156              	.LC459:
 3157 3808 746C696D 		.ascii	"tlim\000"
 3157      00
 3158 380d 000000   		.align	2
 3159              	.LC460:
 3160 3810 54494C54 		.ascii	"TILT LIMIT=%2u \000"
 3160      204C494D 
 3160      49543D25 
 3160      32752000 
 3161              		.align	2
 3162              	.LC461:
 3163 3820 72617469 		.ascii	"ratioabsp\000"
 3163      6F616273 
 3163      7000
 3164 382a 0000     		.align	2
 3165              	.LC462:
 3166 382c 72617469 		.ascii	"ratiop\000"
 3166      6F7000
 3167 3833 00       		.align	2
 3168              	.LC463:
 3169 3834 41726520 		.ascii	"Are you sure to show absolute sensor ratios [Y/N]?\000"
 3169      796F7520 
 3169      73757265 
 3169      20746F20 
 3169      73686F77 
 3170 3867 00       		.align	2
 3171              	.LC464:
 3172 3868 50414E3A 		.ascii	"PAN: ABS_SENSOR=%5i[lsb]\000"
 3172      20414253 
 3172      5F53454E 
 3172      534F523D 
 3172      2535695B 
 3173 3881 000000   		.align	2
 3174              	.LC465:
 3175 3884 20454E43 		.ascii	" ENC=%9li[step]\000"
 3175      3D25396C 
 3175      695B7374 
 3175      65705D00 
 3176              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 99


 3177              	.LC466:
 3178 3894 20524154 		.ascii	" RATIO=%1.4f[step/lsb]\000"
 3178      494F3D25 
 3178      312E3466 
 3178      5B737465 
 3178      702F6C73 
 3179 38ab 00       		.align	2
 3180              	.LC467:
 3181 38ac 0D0A2A21 		.ascii	"\015\012*!point 0 sampling\015\012\015\000"
 3181      706F696E 
 3181      74203020 
 3181      73616D70 
 3181      6C696E67 
 3182              		.align	2
 3183              	.LC468:
 3184 38c4 0D0A2A21 		.ascii	"\015\012*!enc over abs ratio sampled\015\012\015\000"
 3184      656E6320 
 3184      6F766572 
 3184      20616273 
 3184      20726174 
 3185 38e6 0000     		.align	2
 3186              	.LC469:
 3187 38e8 0D0A2A21 		.ascii	"\015\012*!Absolute Sensor ratio PAN eeprom saved\015"
 3187      4162736F 
 3187      6C757465 
 3187      2053656E 
 3187      736F7220 
 3188 3913 0A0D00   		.ascii	"\012\015\000"
 3189 3916 0000     		.align	2
 3190              	.LC470:
 3191 3918 72617469 		.ascii	"ratioabst\000"
 3191      6F616273 
 3191      7400
 3192 3922 0000     		.align	2
 3193              	.LC471:
 3194 3924 72617469 		.ascii	"ratiot\000"
 3194      6F7400
 3195 392b 00       		.align	2
 3196              	.LC472:
 3197 392c 54494C54 		.ascii	"TILT: ABS_SENSOR=%5i[lsb]\000"
 3197      3A204142 
 3197      535F5345 
 3197      4E534F52 
 3197      3D253569 
 3198 3946 0000     		.align	2
 3199              	.LC473:
 3200 3948 0D0A2A21 		.ascii	"\015\012*!Absolute Sensor ratio TILT eeprom saved\015"
 3200      4162736F 
 3200      6C757465 
 3200      2053656E 
 3200      736F7220 
 3201 3974 0A0D00   		.ascii	"\012\015\000"
 3202 3977 00       		.align	2
 3203              	.LC474:
 3204 3978 6661756C 		.ascii	"faults\000"
 3204      747300
 3205 397f 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 100


 3206              	.LC475:
 3207 3980 6661756C 		.ascii	"fault\000"
 3207      7400
 3208 3986 0000     		.align	2
 3209              	.LC476:
 3210 3988 4E4F4E45 		.ascii	"NONE: ALL OK!\015\000"
 3210      3A20414C 
 3210      4C204F4B 
 3210      210D00
 3211 3997 00       		.align	2
 3212              	.LC477:
 3213 3998 40464155 		.ascii	"@FAULT#01: PAN  AXIS HAS PROBLEMS!\015\000"
 3213      4C542330 
 3213      313A2050 
 3213      414E2020 
 3213      41584953 
 3214              		.align	2
 3215              	.LC478:
 3216 39bc 40464155 		.ascii	"@FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!\015"
 3216      4C542331 
 3216      303A2046 
 3216      45454442 
 3216      41434B20 
 3217 39ed 00       		.ascii	"\000"
 3218 39ee 0000     		.align	2
 3219              	.LC479:
 3220 39f0 40464155 		.ascii	"@FAULT#02: TILT AXIS HAS PROBLEMS!\015\000"
 3220      4C542330 
 3220      323A2054 
 3220      494C5420 
 3220      41584953 
 3221              		.align	2
 3222              	.LC480:
 3223 3a14 70617261 		.ascii	"params\000"
 3223      6D7300
 3224 3a1b 00       		.align	2
 3225              	.LC481:
 3226 3a1c 7000     		.ascii	"p\000"
 3227 3a1e 0000     		.align	2
 3228              	.LC482:
 3229 3a20 476F4265 		.ascii	"GoBee DIRECTOR\015\000"
 3229      65204449 
 3229      52454354 
 3229      4F520D00 
 3230              		.align	2
 3231              	.LC483:
 3232 3a30 3D3D3D3D 		.ascii	"==============\015\000"
 3232      3D3D3D3D 
 3232      3D3D3D3D 
 3232      3D3D0D00 
 3233              		.align	2
 3234              	.LC484:
 3235 3a40 476F6265 		.ascii	"Gobee Mode                   =%2u: \000"
 3235      65204D6F 
 3235      64652020 
 3235      20202020 
 3235      20202020 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 101


 3236              		.align	2
 3237              	.LC485:
 3238 3a64 476F6265 		.ascii	"Gobee Selected Director      =%2u: \000"
 3238      65205365 
 3238      6C656374 
 3238      65642044 
 3238      69726563 
 3239              		.align	2
 3240              	.LC486:
 3241 3a88 476F4265 		.ascii	"GoBee PARAMETER LIST\015\000"
 3241      65205041 
 3241      52414D45 
 3241      54455220 
 3241      4C495354 
 3242 3a9e 0000     		.align	2
 3243              	.LC487:
 3244 3aa0 3D3D3D3D 		.ascii	"====================\015\000"
 3244      3D3D3D3D 
 3244      3D3D3D3D 
 3244      3D3D3D3D 
 3244      3D3D3D3D 
 3245 3ab6 0000     		.align	2
 3246              	.LC488:
 3247 3ab8 50616E20 		.ascii	"Pan  Axis Resolution         = \000"
 3247      20417869 
 3247      73205265 
 3247      736F6C75 
 3247      74696F6E 
 3248              		.align	2
 3249              	.LC489:
 3250 3ad8 25382E31 		.ascii	"%8.1f [step/2PI]\000"
 3250      66205B73 
 3250      7465702F 
 3250      3250495D 
 3250      00
 3251 3ae9 000000   		.align	2
 3252              	.LC490:
 3253 3aec 54696C74 		.ascii	"Tilt Axis Resolution         = \000"
 3253      20417869 
 3253      73205265 
 3253      736F6C75 
 3253      74696F6E 
 3254              		.align	2
 3255              	.LC491:
 3256 3b0c 4D6F746F 		.ascii	"Motor Control\015\000"
 3256      7220436F 
 3256      6E74726F 
 3256      6C0D00
 3257 3b1b 00       		.align	2
 3258              	.LC492:
 3259 3b1c 3D3D3D3D 		.ascii	"=============\015\000"
 3259      3D3D3D3D 
 3259      3D3D3D3D 
 3259      3D0D00
 3260 3b2b 00       		.align	2
 3261              	.LC493:
 3262 3b2c 50616E20 		.ascii	"Pan  Motor Polarity          = \000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 102


 3262      204D6F74 
 3262      6F722050 
 3262      6F6C6172 
 3262      69747920 
 3263              		.align	2
 3264              	.LC494:
 3265 3b4c 25317520 		.ascii	"%1u (0=true, 1=invert)\000"
 3265      28303D74 
 3265      7275652C 
 3265      20313D69 
 3265      6E766572 
 3266 3b63 00       		.align	2
 3267              	.LC495:
 3268 3b64 50616E20 		.ascii	"Pan  Motor Kp                = \000"
 3268      204D6F74 
 3268      6F72204B 
 3268      70202020 
 3268      20202020 
 3269              		.align	2
 3270              	.LC496:
 3271 3b84 25386600 		.ascii	"%8f\000"
 3272              		.align	2
 3273              	.LC497:
 3274 3b88 50616E20 		.ascii	"Pan  Motor Kd                = \000"
 3274      204D6F74 
 3274      6F72204B 
 3274      64202020 
 3274      20202020 
 3275              		.align	2
 3276              	.LC498:
 3277 3ba8 50616E20 		.ascii	"Pan  Motor Ki                = \000"
 3277      204D6F74 
 3277      6F72204B 
 3277      69202020 
 3277      20202020 
 3278              		.align	2
 3279              	.LC499:
 3280 3bc8 50616E20 		.ascii	"Pan  Motor Ksi               = \000"
 3280      204D6F74 
 3280      6F72204B 
 3280      73692020 
 3280      20202020 
 3281              		.align	2
 3282              	.LC500:
 3283 3be8 25386620 		.ascii	"%8f (max AZI=%8f)\000"
 3283      286D6178 
 3283      20415A49 
 3283      3D253866 
 3283      2900
 3284 3bfa 0000     		.align	2
 3285              	.LC501:
 3286 3bfc 50616E20 		.ascii	"Pan Limit Control            = \000"
 3286      4C696D69 
 3286      7420436F 
 3286      6E74726F 
 3286      6C202020 
 3287              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 103


 3288              	.LC502:
 3289 3c1c 25317520 		.ascii	"%1u (0=disabled, 1=enabled)\000"
 3289      28303D64 
 3289      69736162 
 3289      6C65642C 
 3289      20313D65 
 3290              		.align	2
 3291              	.LC503:
 3292 3c38 54696C74 		.ascii	"Tilt Motor Polarity          = \000"
 3292      204D6F74 
 3292      6F722050 
 3292      6F6C6172 
 3292      69747920 
 3293              		.align	2
 3294              	.LC504:
 3295 3c58 54696C74 		.ascii	"Tilt Motor Kp                = \000"
 3295      204D6F74 
 3295      6F72204B 
 3295      70202020 
 3295      20202020 
 3296              		.align	2
 3297              	.LC505:
 3298 3c78 54696C74 		.ascii	"Tilt Motor Kd                = \000"
 3298      204D6F74 
 3298      6F72204B 
 3298      64202020 
 3298      20202020 
 3299              		.align	2
 3300              	.LC506:
 3301 3c98 54696C74 		.ascii	"Tilt Motor Ki                = \000"
 3301      204D6F74 
 3301      6F72204B 
 3301      69202020 
 3301      20202020 
 3302              		.align	2
 3303              	.LC507:
 3304 3cb8 54696C74 		.ascii	"Tilt Motor Ksi               = \000"
 3304      204D6F74 
 3304      6F72204B 
 3304      73692020 
 3304      20202020 
 3305              		.align	2
 3306              	.LC508:
 3307 3cd8 54696C74 		.ascii	"Tilt Limit Control           = \000"
 3307      204C696D 
 3307      69742043 
 3307      6F6E7472 
 3307      6F6C2020 
 3308              		.align	2
 3309              	.LC509:
 3310 3cf8 4162736F 		.ascii	"Absolute Sensors\015\000"
 3310      6C757465 
 3310      2053656E 
 3310      736F7273 
 3310      0D00
 3311 3d0a 0000     		.align	2
 3312              	.LC510:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 104


 3313 3d0c 3D3D3D3D 		.ascii	"================\015\000"
 3313      3D3D3D3D 
 3313      3D3D3D3D 
 3313      3D3D3D3D 
 3313      0D00
 3314 3d1e 0000     		.align	2
 3315              	.LC511:
 3316 3d20 50616E20 		.ascii	"Pan  Absolute sensor HOME    = \000"
 3316      20416273 
 3316      6F6C7574 
 3316      65207365 
 3316      6E736F72 
 3317              		.align	2
 3318              	.LC512:
 3319 3d40 25366920 		.ascii	"%6i [ADC raw]    (invertion=%1d)\000"
 3319      5B414443 
 3319      20726177 
 3319      5D202020 
 3319      2028696E 
 3320 3d61 000000   		.align	2
 3321              	.LC513:
 3322 3d64 50616E20 		.ascii	"Pan  Absolute sensor LimitMAX= \000"
 3322      20416273 
 3322      6F6C7574 
 3322      65207365 
 3322      6E736F72 
 3323              		.align	2
 3324              	.LC514:
 3325 3d84 25366920 		.ascii	"%6i [ADC raw]\000"
 3325      5B414443 
 3325      20726177 
 3325      5D00
 3326 3d92 0000     		.align	2
 3327              	.LC515:
 3328 3d94 50616E20 		.ascii	"Pan  Absolute sensor Limitmin= \000"
 3328      20416273 
 3328      6F6C7574 
 3328      65207365 
 3328      6E736F72 
 3329              		.align	2
 3330              	.LC516:
 3331 3db4 50616E20 		.ascii	"Pan  Absolute sensor Hyster. = \000"
 3331      20416273 
 3331      6F6C7574 
 3331      65207365 
 3331      6E736F72 
 3332              		.align	2
 3333              	.LC517:
 3334 3dd4 50616E20 		.ascii	"Pan  Absolute sensor Ratio   = \000"
 3334      20416273 
 3334      6F6C7574 
 3334      65207365 
 3334      6E736F72 
 3335              		.align	2
 3336              	.LC518:
 3337 3df4 25332E33 		.ascii	"%3.3f [step/lsb]\000"
 3337      66205B73 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 105


 3337      7465702F 
 3337      6C73625D 
 3337      00
 3338 3e05 000000   		.align	2
 3339              	.LC519:
 3340 3e08 54696C74 		.ascii	"Tilt Absolute sensor HOME    = \000"
 3340      20416273 
 3340      6F6C7574 
 3340      65207365 
 3340      6E736F72 
 3341              		.align	2
 3342              	.LC520:
 3343 3e28 54696C74 		.ascii	"Tilt Absolute sensor LimitMAX= \000"
 3343      20416273 
 3343      6F6C7574 
 3343      65207365 
 3343      6E736F72 
 3344              		.align	2
 3345              	.LC521:
 3346 3e48 54696C74 		.ascii	"Tilt Absolute sensor Limitmin= \000"
 3346      20416273 
 3346      6F6C7574 
 3346      65207365 
 3346      6E736F72 
 3347              		.align	2
 3348              	.LC522:
 3349 3e68 54696C74 		.ascii	"Tilt Absolute sensor Hyster. = \000"
 3349      20416273 
 3349      6F6C7574 
 3349      65207365 
 3349      6E736F72 
 3350              		.align	2
 3351              	.LC523:
 3352 3e88 54696C74 		.ascii	"Tilt Absolute sensor Ratio   = \000"
 3352      20416273 
 3352      6F6C7574 
 3352      65207365 
 3352      6E736F72 
 3353              		.align	2
 3354              	.LC524:
 3355 3ea8 4D6F746F 		.ascii	"Motor Tuning\015\000"
 3355      72205475 
 3355      6E696E67 
 3355      0D00
 3356 3eb6 0000     		.align	2
 3357              	.LC525:
 3358 3eb8 3D3D3D3D 		.ascii	"============\015\000"
 3358      3D3D3D3D 
 3358      3D3D3D3D 
 3358      0D00
 3359 3ec6 0000     		.align	2
 3360              	.LC526:
 3361 3ec8 50616E20 		.ascii	"Pan  Motor Kopf              = \000"
 3361      204D6F74 
 3361      6F72204B 
 3361      6F706620 
 3361      20202020 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 106


 3362              		.align	2
 3363              	.LC527:
 3364 3ee8 20202041 		.ascii	"   AstimEN=%1u \000"
 3364      7374696D 
 3364      454E3D25 
 3364      31752000 
 3365              		.align	2
 3366              	.LC528:
 3367 3ef8 50616E20 		.ascii	"Pan  Anaout GAIN             = \000"
 3367      20416E61 
 3367      6F757420 
 3367      4741494E 
 3367      20202020 
 3368              		.align	2
 3369              	.LC529:
 3370 3f18 50616E20 		.ascii	"Pan  AnaOut Signal (color)   = \000"
 3370      20416E61 
 3370      4F757420 
 3370      5369676E 
 3370      616C2028 
 3371              		.align	2
 3372              	.LC530:
 3373 3f38 54696C74 		.ascii	"Tilt Motor Kopf              = \000"
 3373      204D6F74 
 3373      6F72204B 
 3373      6F706620 
 3373      20202020 
 3374              		.align	2
 3375              	.LC531:
 3376 3f58 54696C74 		.ascii	"Tilt Anaout GAIN             = \000"
 3376      20416E61 
 3376      6F757420 
 3376      4741494E 
 3376      20202020 
 3377              		.align	2
 3378              	.LC532:
 3379 3f78 54696C74 		.ascii	"Tilt AnaOut Signal (color)   = \000"
 3379      20416E61 
 3379      4F757420 
 3379      5369676E 
 3379      616C2028 
 3380              		.align	2
 3381              	.LC533:
 3382 3f98 416E616F 		.ascii	"Anaout Selected Axis         = \000"
 3382      75742053 
 3382      656C6563 
 3382      74656420 
 3382      41786973 
 3383              		.align	2
 3384              	.LC534:
 3385 3fb8 41636365 		.ascii	"Accelerometer (100Hz)\015\000"
 3385      6C65726F 
 3385      6D657465 
 3385      72202831 
 3385      3030487A 
 3386 3fcf 00       		.align	2
 3387              	.LC535:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 107


 3388 3fd0 3D3D3D3D 		.ascii	"=====================\015\000"
 3388      3D3D3D3D 
 3388      3D3D3D3D 
 3388      3D3D3D3D 
 3388      3D3D3D3D 
 3389 3fe7 00       		.align	2
 3390              	.LC536:
 3391 3fe8 62657461 		.ascii	"beta  (accelerometer LPF)    = \000"
 3391      20202861 
 3391      6363656C 
 3391      65726F6D 
 3391      65746572 
 3392              		.align	2
 3393              	.LC537:
 3394 4008 25386620 		.ascii	"%8f (tau=%1.4f [msec])\000"
 3394      28746175 
 3394      3D25312E 
 3394      3466205B 
 3394      6D736563 
 3395 401f 00       		.align	2
 3396              	.LC538:
 3397 4020 20286663 		.ascii	" (fc=%1.4f [Hz])\015\012\000"
 3397      3D25312E 
 3397      3466205B 
 3397      487A5D29 
 3397      0D0A00
 3398 4033 00       		.align	2
 3399              	.LC539:
 3400 4034 416E616C 		.ascii	"Analog Accel. X ADC Offset   = \000"
 3400      6F672041 
 3400      6363656C 
 3400      2E205820 
 3400      41444320 
 3401              		.align	2
 3402              	.LC540:
 3403 4054 25346420 		.ascii	"%4d [lsb]\000"
 3403      5B6C7362 
 3403      5D00
 3404 405e 0000     		.align	2
 3405              	.LC541:
 3406 4060 416E616C 		.ascii	"Analog Accel. Y ADC Offset   = \000"
 3406      6F672041 
 3406      6363656C 
 3406      2E205920 
 3406      41444320 
 3407              		.align	2
 3408              	.LC542:
 3409 4080 416E616C 		.ascii	"Analog Accel. Z ADC Offset   = \000"
 3409      6F672041 
 3409      6363656C 
 3409      2E205A20 
 3409      41444320 
 3410              		.align	2
 3411              	.LC543:
 3412 40a0 42696B65 		.ascii	"Bike Frame IMU (1.5kHz)\015\000"
 3412      20467261 
 3412      6D652049 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 108


 3412      4D552028 
 3412      312E356B 
 3413 40b9 000000   		.align	2
 3414              	.LC544:
 3415 40bc 3D3D3D3D 		.ascii	"=======================\015\000"
 3415      3D3D3D3D 
 3415      3D3D3D3D 
 3415      3D3D3D3D 
 3415      3D3D3D3D 
 3416 40d5 000000   		.align	2
 3417              	.LC545:
 3418 40d8 67616D6D 		.ascii	"gamma  (IMU LPF)             = \000"
 3418      61202028 
 3418      494D5520 
 3418      4C504629 
 3418      20202020 
 3419              		.align	2
 3420              	.LC546:
 3421 40f8 494D5520 		.ascii	"IMU Yaw angle invertion      = \000"
 3421      59617720 
 3421      616E676C 
 3421      6520696E 
 3421      76657274 
 3422              		.align	2
 3423              	.LC547:
 3424 4118 494D5520 		.ascii	"IMU Pitch angle invertion    = \000"
 3424      50697463 
 3424      6820616E 
 3424      676C6520 
 3424      696E7665 
 3425              		.align	2
 3426              	.LC548:
 3427 4138 494D5520 		.ascii	"IMU Roll angle invertion     = \000"
 3427      526F6C6C 
 3427      20616E67 
 3427      6C652069 
 3427      6E766572 
 3428              		.align	2
 3429              	.LC549:
 3430 4158 494D5520 		.ascii	"IMU Pith and Roll exchange   = \000"
 3430      50697468 
 3430      20616E64 
 3430      20526F6C 
 3430      6C206578 
 3431              		.align	2
 3432              	.LC550:
 3433 4178 25317520 		.ascii	"%1u (0=true, 1=exchanged)\000"
 3433      28303D74 
 3433      7275652C 
 3433      20313D65 
 3433      78636861 
 3434 4192 0000     		.align	2
 3435              	.LC551:
 3436 4194 4576656E 		.ascii	"Events Parameters\015\000"
 3436      74732050 
 3436      6172616D 
 3436      65746572 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 109


 3436      730D00
 3437 41a7 00       		.align	2
 3438              	.LC552:
 3439 41a8 3D3D3D3D 		.ascii	"=================\015\000"
 3439      3D3D3D3D 
 3439      3D3D3D3D 
 3439      3D3D3D3D 
 3439      3D0D00
 3440 41bb 00       		.align	2
 3441              	.LC553:
 3442 41bc 4A756D70 		.ascii	"Jump G Threshold             = \000"
 3442      20472054 
 3442      68726573 
 3442      686F6C64 
 3442      20202020 
 3443              		.align	2
 3444              	.LC554:
 3445 41dc 25386620 		.ascii	"%8f [g]\015\012\000"
 3445      5B675D0D 
 3445      0A00
 3446 41e6 0000     		.align	2
 3447              	.LC555:
 3448 41e8 41636365 		.ascii	"Acceleration G Threshold     = \000"
 3448      6C657261 
 3448      74696F6E 
 3448      20472054 
 3448      68726573 
 3449              		.align	2
 3450              	.LC556:
 3451 4208 636C7565 		.ascii	"cluexec\000"
 3451      78656300 
 3452              		.align	2
 3453              	.LC557:
 3454 4210 434C5520 		.ascii	"CLU %2i START!\015\012\000"
 3454      25326920 
 3454      53544152 
 3454      54210D0A 
 3454      00
 3455 4221 000000   		.align	2
 3456              	.LC558:
 3457 4224 0D0A434C 		.ascii	"\015\012CLU %2i END!\015\012\000"
 3457      55202532 
 3457      6920454E 
 3457      44210D0A 
 3457      00
 3458 4235 000000   		.align	2
 3459              	.LC559:
 3460 4238 434C5520 		.ascii	"CLU not started: selected CLU is empty!\015\000"
 3460      6E6F7420 
 3460      73746172 
 3460      7465643A 
 3460      2073656C 
 3461 4261 000000   		.align	2
 3462              	.LC560:
 3463 4264 434C5520 		.ascii	"CLU not started: energize the Gobee before!\015\000"
 3463      6E6F7420 
 3463      73746172 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 110


 3463      7465643A 
 3463      20656E65 
 3464 4291 000000   		.align	2
 3465              	.LC561:
 3466 4294 636C7573 		.ascii	"cluseq\000"
 3466      657100
 3467 429b 00       		.align	2
 3468              	.LC562:
 3469 429c 0D0A5573 		.ascii	"\015\012User Abort!\015\000"
 3469      65722041 
 3469      626F7274 
 3469      210D00
 3470 42ab 00       		.align	2
 3471              	.LC563:
 3472 42ac 0D0A434C 		.ascii	"\015\012CLU SEQUENCE END!\015\000"
 3472      55205345 
 3472      5155454E 
 3472      43452045 
 3472      4E44210D 
 3473 42c1 000000   		.align	2
 3474              	.LC564:
 3475 42c4 434C5553 		.ascii	"CLUSEQ not started: energize the Gobee before!\015\000"
 3475      4551206E 
 3475      6F742073 
 3475      74617274 
 3475      65643A20 
 3476              		.align	2
 3477              	.LC565:
 3478 42f4 676F746F 		.ascii	"gotohome\000"
 3478      686F6D65 
 3478      00
 3479 42fd 000000   		.align	2
 3480              	.LC566:
 3481 4300 676F746F 		.ascii	"gotoh\000"
 3481      6800
 3482 4306 0000     		.align	2
 3483              	.LC567:
 3484 4308 476F746F 		.ascii	"Goto Home Mover START!\015\000"
 3484      20486F6D 
 3484      65204D6F 
 3484      76657220 
 3484      53544152 
 3485              		.align	2
 3486              	.LC568:
 3487 4320 0D0A476F 		.ascii	"\015\012Goto Home Mover END!\015\000"
 3487      746F2048 
 3487      6F6D6520 
 3487      4D6F7665 
 3487      7220454E 
 3488              		.align	2
 3489              	.LC569:
 3490 4338 476F746F 		.ascii	"Goto Home Mover Not Started: energize the Gobee bef"
 3490      20486F6D 
 3490      65204D6F 
 3490      76657220 
 3490      4E6F7420 
 3491 436b 6F726521 		.ascii	"ore!\015\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 111


 3491      0D00
 3492 4371 000000   		.align	2
 3493              	.LC570:
 3494 4374 676F746F 		.ascii	"gotoq\000"
 3494      7100
 3495 437a 0000     		.align	2
 3496              	.LC571:
 3497 437c 6700     		.ascii	"g\000"
 3498              		.global	__aeabi_fcmpge
 3499              		.global	__aeabi_fcmple
 3500              		.global	__aeabi_fcmpeq
 3501 437e 0000     		.align	2
 3502              	.LC572:
 3503 4380 476F746F 		.ascii	"Goto Q Mover START!\015\000"
 3503      2051204D 
 3503      6F766572 
 3503      20535441 
 3503      5254210D 
 3504 4395 000000   		.align	2
 3505              	.LC573:
 3506 4398 0D0A476F 		.ascii	"\015\012Goto Q Mover END!\015\000"
 3506      746F2051 
 3506      204D6F76 
 3506      65722045 
 3506      4E44210D 
 3507 43ad 000000   		.align	2
 3508              	.LC574:
 3509 43b0 476F746F 		.ascii	"Goto Q Mover Not Started: QMemory %02d NOT ALLOCATE"
 3509      2051204D 
 3509      6F766572 
 3509      204E6F74 
 3509      20537461 
 3510 43e3 44210D0A 		.ascii	"D!\015\012\000"
 3510      00
 3511              		.align	2
 3512              	.LC575:
 3513 43e8 476F746F 		.ascii	"Goto Q Mover Not Started: energize the Gobee before"
 3513      2051204D 
 3513      6F766572 
 3513      204E6F74 
 3513      20537461 
 3514 441b 210D00   		.ascii	"!\015\000"
 3515 441e 0000     		.align	2
 3516              	.LC576:
 3517 4420 476F746F 		.ascii	"Goto Q Mover Not Started: Q maximum is 99!\015\000"
 3517      2051204D 
 3517      6F766572 
 3517      204E6F74 
 3517      20537461 
 3518              		.align	2
 3519              	.LC577:
 3520 444c 23455252 		.ascii	"#ERROR2: More parameters needed!\000"
 3520      4F52323A 
 3520      204D6F72 
 3520      65207061 
 3520      72616D65 
 3521 446d 000000   		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 112


 3522              	.LC578:
 3523 4470 64697265 		.ascii	"director\000"
 3523      63746F72 
 3523      00
 3524 4479 000000   		.align	2
 3525              	.LC579:
 3526 447c 64697200 		.ascii	"dir\000"
 3527              		.align	2
 3528              	.LC580:
 3529 4480 2A20476F 		.ascii	"* Gobee Director Number setted to %2u: \000"
 3529      62656520 
 3529      44697265 
 3529      63746F72 
 3529      204E756D 
 3530              		.align	2
 3531              	.LC581:
 3532 44a8 6D6F6465 		.ascii	"mode\000"
 3532      00
 3533 44ad 000000   		.align	2
 3534              	.LC582:
 3535 44b0 2A20476F 		.ascii	"* Gobee machine mode setted to %2u\000"
 3535      62656520 
 3535      6D616368 
 3535      696E6520 
 3535      6D6F6465 
 3536 44d3 00       		.align	2
 3537              	.LC583:
 3538 44d4 706F6C61 		.ascii	"polarityp\000"
 3538      72697479 
 3538      7000
 3539 44de 0000     		.align	2
 3540              	.LC584:
 3541 44e0 706F6C70 		.ascii	"polp\000"
 3541      00
 3542 44e5 000000   		.align	2
 3543              	.LC585:
 3544 44e8 2A205061 		.ascii	"* Pan Motor Polarity setted to %2u\000"
 3544      6E204D6F 
 3544      746F7220 
 3544      506F6C61 
 3544      72697479 
 3545 450b 00       		.align	2
 3546              	.LC586:
 3547 450c 706F6C61 		.ascii	"polarityt\000"
 3547      72697479 
 3547      7400
 3548 4516 0000     		.align	2
 3549              	.LC587:
 3550 4518 706F6C74 		.ascii	"polt\000"
 3550      00
 3551 451d 000000   		.align	2
 3552              	.LC588:
 3553 4520 2A205469 		.ascii	"* Tilt Motor Polarity setted to %2u\000"
 3553      6C74204D 
 3553      6F746F72 
 3553      20506F6C 
 3553      61726974 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 113


 3554              		.align	2
 3555              	.LC589:
 3556 4544 6C696D69 		.ascii	"limitcp\000"
 3556      74637000 
 3557              		.align	2
 3558              	.LC590:
 3559 454c 6C637000 		.ascii	"lcp\000"
 3560              		.align	2
 3561              	.LC591:
 3562 4550 2A205061 		.ascii	"* Pan Motor Limit Control setted to %2u\000"
 3562      6E204D6F 
 3562      746F7220 
 3562      4C696D69 
 3562      7420436F 
 3563              		.align	2
 3564              	.LC592:
 3565 4578 696E7661 		.ascii	"invabsp\000"
 3565      62737000 
 3566              		.align	2
 3567              	.LC593:
 3568 4580 696E7670 		.ascii	"invp\000"
 3568      00
 3569 4585 000000   		.align	2
 3570              	.LC594:
 3571 4588 2A205061 		.ascii	"* Pan Absolute Sensor Invertion setted to %2u\015\012"
 3571      6E204162 
 3571      736F6C75 
 3571      74652053 
 3571      656E736F 
 3572 45b7 00       		.ascii	"\000"
 3573              		.align	2
 3574              	.LC595:
 3575 45b8 7A65726F 		.ascii	"zeroabsp\000"
 3575      61627370 
 3575      00
 3576 45c1 000000   		.align	2
 3577              	.LC596:
 3578 45c4 7A7000   		.ascii	"zp\000"
 3579 45c7 00       		.align	2
 3580              	.LC597:
 3581 45c8 2A205761 		.ascii	"* Warning! Put PAN Axis to zero (HOME) position and"
 3581      726E696E 
 3581      67212050 
 3581      75742050 
 3581      414E2041 
 3582 45fb 20707265 		.ascii	" press y!\000"
 3582      73732079 
 3582      2100
 3583 4605 000000   		.align	2
 3584              	.LC598:
 3585 4608 0D0A2A20 		.ascii	"\015\012* Statistics start!\015\000"
 3585      53746174 
 3585      69737469 
 3585      63732073 
 3585      74617274 
 3586 461f 00       		.align	2
 3587              	.LC599:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 114


 3588 4620 2A205374 		.ascii	"* Statistics stop!\015\000"
 3588      61746973 
 3588      74696373 
 3588      2073746F 
 3588      70210D00 
 3589              		.align	2
 3590              	.LC600:
 3591 4634 2A205061 		.ascii	"* Pan Absolute Sensor ZERO POSITION (HOME) setted t"
 3591      6E204162 
 3591      736F6C75 
 3591      74652053 
 3591      656E736F 
 3592 4667 6F20252B 		.ascii	"o %+6d [adc raw]\015\012\000"
 3592      3664205B 
 3592      61646320 
 3592      7261775D 
 3592      0D0A00
 3593 467a 0000     		.align	2
 3594              	.LC601:
 3595 467c 0D0A2A20 		.ascii	"\015\012* Pan Absolute Sensor position not sampled!"
 3595      50616E20 
 3595      4162736F 
 3595      6C757465 
 3595      2053656E 
 3596 46a9 0D00     		.ascii	"\015\000"
 3597 46ab 00       		.align	2
 3598              	.LC602:
 3599 46ac 6C696D69 		.ascii	"limitminp\000"
 3599      746D696E 
 3599      7000
 3600 46b6 0000     		.align	2
 3601              	.LC603:
 3602 46b8 6C6D696E 		.ascii	"lminp\000"
 3602      7000
 3603 46be 0000     		.align	2
 3604              	.LC604:
 3605 46c0 2A205761 		.ascii	"* Warning! Put PAN Axis to limit MIN position and p"
 3605      726E696E 
 3605      67212050 
 3605      75742050 
 3605      414E2041 
 3606 46f3 72657373 		.ascii	"ress y!\000"
 3606      20792100 
 3607 46fb 00       		.align	2
 3608              	.LC605:
 3609 46fc 2A205061 		.ascii	"* Pan Absolute Sensor Limit MIN setted to %+6d [adc"
 3609      6E204162 
 3609      736F6C75 
 3609      74652053 
 3609      656E736F 
 3610 472f 20726177 		.ascii	" raw]\015\012\000"
 3610      5D0D0A00 
 3611 4737 00       		.align	2
 3612              	.LC606:
 3613 4738 6C696D69 		.ascii	"limitmaxp\000"
 3613      746D6178 
 3613      7000
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 115


 3614 4742 0000     		.align	2
 3615              	.LC607:
 3616 4744 6C6D6178 		.ascii	"lmaxp\000"
 3616      7000
 3617 474a 0000     		.align	2
 3618              	.LC608:
 3619 474c 2A205761 		.ascii	"* Warning! Put PAN Axis to limit MAX position and p"
 3619      726E696E 
 3619      67212050 
 3619      75742050 
 3619      414E2041 
 3620 477f 72657373 		.ascii	"ress y!\000"
 3620      20792100 
 3621 4787 00       		.align	2
 3622              	.LC609:
 3623 4788 2A205061 		.ascii	"* Pan Absolute Sensor Limit MAX setted to %+6d [adc"
 3623      6E204162 
 3623      736F6C75 
 3623      74652053 
 3623      656E736F 
 3624 47bb 20726177 		.ascii	" raw]\015\012\000"
 3624      5D0D0A00 
 3625 47c3 00       		.align	2
 3626              	.LC610:
 3627 47c4 6C696D69 		.ascii	"limithystp\000"
 3627      74687973 
 3627      747000
 3628 47cf 00       		.align	2
 3629              	.LC611:
 3630 47d0 6C687973 		.ascii	"lhystp\000"
 3630      747000
 3631 47d7 00       		.align	2
 3632              	.LC612:
 3633 47d8 2A205061 		.ascii	"* Pan Absolute Sensor Limit Hysteresis setted to %+"
 3633      6E204162 
 3633      736F6C75 
 3633      74652053 
 3633      656E736F 
 3634 480b 3664205B 		.ascii	"6d [adc raw]\015\012\000"
 3634      61646320 
 3634      7261775D 
 3634      0D0A00
 3635 481a 0000     		.align	2
 3636              	.LC613:
 3637 481c 2A205061 		.ascii	"* Pan Encoder over Absolute Sensor ratio setted to "
 3637      6E20456E 
 3637      636F6465 
 3637      72206F76 
 3637      65722041 
 3638 484f 252B322E 		.ascii	"%+2.6f [adc raw/step]\015\012\000"
 3638      3666205B 
 3638      61646320 
 3638      7261772F 
 3638      73746570 
 3639 4867 00       		.align	2
 3640              	.LC614:
 3641 4868 6C696D69 		.ascii	"limitct\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 116


 3641      74637400 
 3642              		.align	2
 3643              	.LC615:
 3644 4870 6C637400 		.ascii	"lct\000"
 3645              		.align	2
 3646              	.LC616:
 3647 4874 2A205469 		.ascii	"* Tilt Motor Limit Control setted to %2u\000"
 3647      6C74204D 
 3647      6F746F72 
 3647      204C696D 
 3647      69742043 
 3648 489d 000000   		.align	2
 3649              	.LC617:
 3650 48a0 696E7661 		.ascii	"invabst\000"
 3650      62737400 
 3651              		.align	2
 3652              	.LC618:
 3653 48a8 696E7674 		.ascii	"invt\000"
 3653      00
 3654 48ad 000000   		.align	2
 3655              	.LC619:
 3656 48b0 2A205469 		.ascii	"* Tilt Absolute Sensor Invertion setted to %2u\015\012"
 3656      6C742041 
 3656      62736F6C 
 3656      75746520 
 3656      53656E73 
 3657 48e0 00       		.ascii	"\000"
 3658 48e1 000000   		.align	2
 3659              	.LC620:
 3660 48e4 7A65726F 		.ascii	"zeroabst\000"
 3660      61627374 
 3660      00
 3661 48ed 000000   		.align	2
 3662              	.LC621:
 3663 48f0 7A7400   		.ascii	"zt\000"
 3664 48f3 00       		.align	2
 3665              	.LC622:
 3666 48f4 2A205761 		.ascii	"* Warning! Put TILT Axis to zero (HOME) position an"
 3666      726E696E 
 3666      67212050 
 3666      75742054 
 3666      494C5420 
 3667 4927 64207072 		.ascii	"d press y!\000"
 3667      65737320 
 3667      792100
 3668 4932 0000     		.align	2
 3669              	.LC623:
 3670 4934 2A205469 		.ascii	"* Tilt Absolute Sensor ZERO POSITION (HOME) setted "
 3670      6C742041 
 3670      62736F6C 
 3670      75746520 
 3670      53656E73 
 3671 4967 746F2025 		.ascii	"to %+6d [adc raw]\015\012\000"
 3671      2B366420 
 3671      5B616463 
 3671      20726177 
 3671      5D0D0A00 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 117


 3672 497b 00       		.align	2
 3673              	.LC624:
 3674 497c 0D0A2A20 		.ascii	"\015\012* Tilt Absolute Sensor position not sampled"
 3674      54696C74 
 3674      20416273 
 3674      6F6C7574 
 3674      65205365 
 3675 49a9 210D00   		.ascii	"!\015\000"
 3676              		.align	2
 3677              	.LC625:
 3678 49ac 6C696D69 		.ascii	"limitmint\000"
 3678      746D696E 
 3678      7400
 3679 49b6 0000     		.align	2
 3680              	.LC626:
 3681 49b8 6C6D696E 		.ascii	"lmint\000"
 3681      7400
 3682 49be 0000     		.align	2
 3683              	.LC627:
 3684 49c0 2A205761 		.ascii	"* Warning! Put TILT Axis to limit MIN position and "
 3684      726E696E 
 3684      67212050 
 3684      75742054 
 3684      494C5420 
 3685 49f3 70726573 		.ascii	"press y!\000"
 3685      73207921 
 3685      00
 3686              		.align	2
 3687              	.LC628:
 3688 49fc 2A205469 		.ascii	"* Tilt Absolute Sensor Limit MIN setted to %+6d [ad"
 3688      6C742041 
 3688      62736F6C 
 3688      75746520 
 3688      53656E73 
 3689 4a2f 63207261 		.ascii	"c raw]\015\012\000"
 3689      775D0D0A 
 3689      00
 3690              		.align	2
 3691              	.LC629:
 3692 4a38 6C696D69 		.ascii	"limitmaxt\000"
 3692      746D6178 
 3692      7400
 3693 4a42 0000     		.align	2
 3694              	.LC630:
 3695 4a44 6C6D6178 		.ascii	"lmaxt\000"
 3695      7400
 3696 4a4a 0000     		.align	2
 3697              	.LC631:
 3698 4a4c 2A205761 		.ascii	"* Warning! Put TILT Axis to limit MAX position and "
 3698      726E696E 
 3698      67212050 
 3698      75742054 
 3698      494C5420 
 3699 4a7f 70726573 		.ascii	"press y!\000"
 3699      73207921 
 3699      00
 3700              		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 118


 3701              	.LC632:
 3702 4a88 2A205469 		.ascii	"* Tilt Absolute Sensor Limit MAX setted to %+6d [ad"
 3702      6C742041 
 3702      62736F6C 
 3702      75746520 
 3702      53656E73 
 3703 4abb 63207261 		.ascii	"c raw]\015\012\000"
 3703      775D0D0A 
 3703      00
 3704              		.align	2
 3705              	.LC633:
 3706 4ac4 6C696D69 		.ascii	"limithystt\000"
 3706      74687973 
 3706      747400
 3707 4acf 00       		.align	2
 3708              	.LC634:
 3709 4ad0 6C687973 		.ascii	"lhystt\000"
 3709      747400
 3710 4ad7 00       		.align	2
 3711              	.LC635:
 3712 4ad8 2A205469 		.ascii	"* Tilt Absolute Sensor Limit Hysteresis setted to %"
 3712      6C742041 
 3712      62736F6C 
 3712      75746520 
 3712      53656E73 
 3713 4b0b 2B366420 		.ascii	"+6d [adc raw]\015\012\000"
 3713      5B616463 
 3713      20726177 
 3713      5D0D0A00 
 3714 4b1b 00       		.align	2
 3715              	.LC636:
 3716 4b1c 2A205469 		.ascii	"* Tilt Encoder over Absolute Sensor ratio setted to"
 3716      6C742045 
 3716      6E636F64 
 3716      6572206F 
 3716      76657220 
 3717 4b4f 20252B32 		.ascii	" %+2.6f [adc raw/step]\015\012\000"
 3717      2E366620 
 3717      5B616463 
 3717      20726177 
 3717      2F737465 
 3718              		.align	2
 3719              	.LC637:
 3720 4b68 696D7569 		.ascii	"imuinvyaw\000"
 3720      6E767961 
 3720      7700
 3721 4b72 0000     		.align	2
 3722              	.LC638:
 3723 4b74 696D7579 		.ascii	"imuy\000"
 3723      00
 3724 4b79 000000   		.align	2
 3725              	.LC639:
 3726 4b7c 2A20496E 		.ascii	"* Invertion Yaw setted to %1u\015\012\000"
 3726      76657274 
 3726      696F6E20 
 3726      59617720 
 3726      73657474 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 119


 3727              		.align	2
 3728              	.LC640:
 3729 4b9c 696D7569 		.ascii	"imuinvpitch\000"
 3729      6E767069 
 3729      74636800 
 3730              		.align	2
 3731              	.LC641:
 3732 4ba8 696D7570 		.ascii	"imup\000"
 3732      00
 3733 4bad 000000   		.align	2
 3734              	.LC642:
 3735 4bb0 2A20496E 		.ascii	"* Invertion Pitch setted to %1u\015\012\000"
 3735      76657274 
 3735      696F6E20 
 3735      50697463 
 3735      68207365 
 3736 4bd2 0000     		.align	2
 3737              	.LC643:
 3738 4bd4 696D7569 		.ascii	"imuinvroll\000"
 3738      6E76726F 
 3738      6C6C00
 3739 4bdf 00       		.align	2
 3740              	.LC644:
 3741 4be0 696D7572 		.ascii	"imur\000"
 3741      00
 3742 4be5 000000   		.align	2
 3743              	.LC645:
 3744 4be8 2A20496E 		.ascii	"* Invertion Roll setted to %1u\015\012\000"
 3744      76657274 
 3744      696F6E20 
 3744      526F6C6C 
 3744      20736574 
 3745 4c09 000000   		.align	2
 3746              	.LC646:
 3747 4c0c 70726578 		.ascii	"prexchange\000"
 3747      6368616E 
 3747      676500
 3748 4c17 00       		.align	2
 3749              	.LC647:
 3750 4c18 70726578 		.ascii	"prex\000"
 3750      00
 3751 4c1d 000000   		.align	2
 3752              	.LC648:
 3753 4c20 2A204578 		.ascii	"* Exchange Pitch Roll setted to %1u\015\012\000"
 3753      6368616E 
 3753      67652050 
 3753      69746368 
 3753      20526F6C 
 3754 4c46 0000     		.align	2
 3755              	.LC649:
 3756 4c48 636C6561 		.ascii	"clear\000"
 3756      7200
 3757 4c4e 0000     		.align	2
 3758              	.LC650:
 3759 4c50 6300     		.ascii	"c\000"
 3760 4c52 0000     		.align	2
 3761              	.LC651:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 120


 3762 4c54 0D0A2A20 		.ascii	"\015\012* Q%02d element (shot) Cleared!\015\012\000"
 3762      51253032 
 3762      6420656C 
 3762      656D656E 
 3762      74202873 
 3763              		.align	2
 3764              	.LC652:
 3765 4c78 23455252 		.ascii	"#ERROR7: EEPROM row out of bounds!\000"
 3765      4F52373A 
 3765      20454550 
 3765      524F4D20 
 3765      726F7720 
 3766 4c9b 00       		.align	2
 3767              	.LC653:
 3768 4c9c 0D0A2A20 		.ascii	"\015\012* Nothing to clear: Q element is not alloca"
 3768      4E6F7468 
 3768      696E6720 
 3768      746F2063 
 3768      6C656172 
 3769 4cc9 74656421 		.ascii	"ted!\015\000"
 3769      0D00
 3770 4ccf 00       		.align	2
 3771              	.LC654:
 3772 4cd0 2A205761 		.ascii	"* Warning! Put All Axes to desired position and pre"
 3772      726E696E 
 3772      67212050 
 3772      75742041 
 3772      6C6C2041 
 3773 4d03 73732079 		.ascii	"ss y!\000"
 3773      2100
 3774 4d09 000000   		.align	2
 3775              	.LC655:
 3776 4d0c 0D0A2A20 		.ascii	"\015\012* Q%02d element (shot) ABS position setted "
 3776      51253032 
 3776      6420656C 
 3776      656D656E 
 3776      74202873 
 3777 4d39 746F3A20 		.ascii	"to: pan=%+ld [step]   tilt=%+ld [step] and saved to"
 3777      70616E3D 
 3777      252B6C64 
 3777      205B7374 
 3777      65705D20 
 3778 4d6c 204D656D 		.ascii	" Memory%2d\015\012\000"
 3778      6F727925 
 3778      32640D0A 
 3778      00
 3779 4d79 000000   		.align	2
 3780              	.LC656:
 3781 4d7c 0D0A2A20 		.ascii	"\015\012* Q element (shot) position not sampled!\015"
 3781      5120656C 
 3781      656D656E 
 3781      74202873 
 3781      686F7429 
 3782 4da7 00       		.ascii	"\000"
 3783              		.align	2
 3784              	.LC657:
 3785 4da8 6B707000 		.ascii	"kpp\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 121


 3786              		.align	2
 3787              	.LC658:
 3788 4dac 2A205061 		.ascii	"* Pan Motor Kp setted to %1.4f\000"
 3788      6E204D6F 
 3788      746F7220 
 3788      4B702073 
 3788      65747465 
 3789 4dcb 00       		.align	2
 3790              	.LC659:
 3791 4dcc 6B707400 		.ascii	"kpt\000"
 3792              		.align	2
 3793              	.LC660:
 3794 4dd0 2A205469 		.ascii	"* Tilt Motor Kp setted to %1.4f\000"
 3794      6C74204D 
 3794      6F746F72 
 3794      204B7020 
 3794      73657474 
 3795              		.align	2
 3796              	.LC661:
 3797 4df0 6B647000 		.ascii	"kdp\000"
 3798              		.align	2
 3799              	.LC662:
 3800 4df4 2A205061 		.ascii	"* Pan Motor Kd setted to %1.4f\000"
 3800      6E204D6F 
 3800      746F7220 
 3800      4B642073 
 3800      65747465 
 3801 4e13 00       		.align	2
 3802              	.LC663:
 3803 4e14 6B647400 		.ascii	"kdt\000"
 3804              		.align	2
 3805              	.LC664:
 3806 4e18 2A205469 		.ascii	"* Tilt Motor Kd setted to %1.4f\000"
 3806      6C74204D 
 3806      6F746F72 
 3806      204B6420 
 3806      73657474 
 3807              		.align	2
 3808              	.LC665:
 3809 4e38 6B697000 		.ascii	"kip\000"
 3810              		.align	2
 3811              	.LC666:
 3812 4e3c 2A205061 		.ascii	"* Pan Motor Ki setted to %1.4f\000"
 3812      6E204D6F 
 3812      746F7220 
 3812      4B692073 
 3812      65747465 
 3813 4e5b 00       		.align	2
 3814              	.LC667:
 3815 4e5c 6B697400 		.ascii	"kit\000"
 3816              		.align	2
 3817              	.LC668:
 3818 4e60 2A205469 		.ascii	"* Tilt Motor Ki setted to %1.4f\000"
 3818      6C74204D 
 3818      6F746F72 
 3818      204B6920 
 3818      73657474 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 122


 3819              		.align	2
 3820              	.LC669:
 3821 4e80 6B736970 		.ascii	"ksip\000"
 3821      00
 3822 4e85 000000   		.align	2
 3823              	.LC670:
 3824 4e88 2A205061 		.ascii	"* Pan Motor Ksi setted to %1.4f\000"
 3824      6E204D6F 
 3824      746F7220 
 3824      4B736920 
 3824      73657474 
 3825              		.align	2
 3826              	.LC671:
 3827 4ea8 6B736974 		.ascii	"ksit\000"
 3827      00
 3828 4ead 000000   		.align	2
 3829              	.LC672:
 3830 4eb0 2A205469 		.ascii	"* Tilt Motor Ksi setted to %1.4f\000"
 3830      6C74204D 
 3830      6F746F72 
 3830      204B7369 
 3830      20736574 
 3831 4ed1 000000   		.align	2
 3832              	.LC673:
 3833 4ed4 616E616F 		.ascii	"anaoutaxis\000"
 3833      75746178 
 3833      697300
 3834 4edf 00       		.align	2
 3835              	.LC674:
 3836 4ee0 61617869 		.ascii	"aaxis\000"
 3836      7300
 3837 4ee6 0000     		.align	2
 3838              	.LC675:
 3839 4ee8 70616E00 		.ascii	"pan\000"
 3840              		.align	2
 3841              	.LC676:
 3842 4eec 74696C74 		.ascii	"tilt\000"
 3842      00
 3843 4ef1 000000   		.align	2
 3844              	.LC677:
 3845 4ef4 2A20416E 		.ascii	"* Anaout Axis setted to PAN\015\000"
 3845      616F7574 
 3845      20417869 
 3845      73207365 
 3845      74746564 
 3846 4f11 000000   		.align	2
 3847              	.LC678:
 3848 4f14 2A20414E 		.ascii	"* ANAPOS ZERO!\015\000"
 3848      41504F53 
 3848      205A4552 
 3848      4F210D00 
 3849              		.align	2
 3850              	.LC679:
 3851 4f24 2A20416E 		.ascii	"* Anaout Axis setted to TILT\015\000"
 3851      616F7574 
 3851      20417869 
 3851      73207365 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 123


 3851      74746564 
 3852 4f42 0000     		.align	2
 3853              	.LC680:
 3854 4f44 23455252 		.ascii	"#ERROR6: Axis may be [pan,tilt]!\000"
 3854      4F52363A 
 3854      20417869 
 3854      73206D61 
 3854      79206265 
 3855 4f65 000000   		.align	2
 3856              	.LC681:
 3857 4f68 636F6C6F 		.ascii	"colorp\000"
 3857      727000
 3858 4f6f 00       		.align	2
 3859              	.LC682:
 3860 4f70 2A205061 		.ascii	"* Pan Motor Analog Output Color setted to \000"
 3860      6E204D6F 
 3860      746F7220 
 3860      416E616C 
 3860      6F67204F 
 3861 4f9b 00       		.align	2
 3862              	.LC683:
 3863 4f9c 636F6C6F 		.ascii	"colort\000"
 3863      727400
 3864 4fa3 00       		.align	2
 3865              	.LC684:
 3866 4fa4 2A205469 		.ascii	"* Tilt Motor Analog Output Color setted to \000"
 3866      6C74204D 
 3866      6F746F72 
 3866      20416E61 
 3866      6C6F6720 
 3867              		.align	2
 3868              	.LC685:
 3869 4fd0 6B6F7066 		.ascii	"kopfp\000"
 3869      7000
 3870 4fd6 0000     		.align	2
 3871              	.LC686:
 3872 4fd8 2A205061 		.ascii	"* Pan Motor Kopf setted to %1.4f\000"
 3872      6E204D6F 
 3872      746F7220 
 3872      4B6F7066 
 3872      20736574 
 3873 4ff9 000000   		.align	2
 3874              	.LC687:
 3875 4ffc 6B6F7066 		.ascii	"kopft\000"
 3875      7400
 3876 5002 0000     		.align	2
 3877              	.LC688:
 3878 5004 2A205469 		.ascii	"* Tilt Motor Kopf setted to %1.4f\000"
 3878      6C74204D 
 3878      6F746F72 
 3878      204B6F70 
 3878      66207365 
 3879 5026 0000     		.align	2
 3880              	.LC689:
 3881 5028 61676169 		.ascii	"againp\000"
 3881      6E7000
 3882 502f 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 124


 3883              	.LC690:
 3884 5030 2A205061 		.ascii	"* Pan Motor Analog Output Gain setted to %1.4f\000"
 3884      6E204D6F 
 3884      746F7220 
 3884      416E616C 
 3884      6F67204F 
 3885 505f 00       		.align	2
 3886              	.LC691:
 3887 5060 61676169 		.ascii	"againt\000"
 3887      6E7400
 3888 5067 00       		.align	2
 3889              	.LC692:
 3890 5068 2A205469 		.ascii	"* Tilt Motor Analog Output Gain setted to %1.4f\000"
 3890      6C74204D 
 3890      6F746F72 
 3890      20416E61 
 3890      6C6F6720 
 3891              		.align	2
 3892              	.LC693:
 3893 5098 61616378 		.ascii	"aacxoffset\000"
 3893      6F666673 
 3893      657400
 3894 50a3 00       		.align	2
 3895              	.LC694:
 3896 50a4 61616378 		.ascii	"aacxof\000"
 3896      6F6600
 3897 50ab 00       		.align	2
 3898              	.LC695:
 3899 50ac 2A20416E 		.ascii	"* Analog Accel. X Axis ADC Offset setted to %4i\000"
 3899      616C6F67 
 3899      20416363 
 3899      656C2E20 
 3899      58204178 
 3900              		.align	2
 3901              	.LC696:
 3902 50dc 61616379 		.ascii	"aacyoffset\000"
 3902      6F666673 
 3902      657400
 3903 50e7 00       		.align	2
 3904              	.LC697:
 3905 50e8 61616379 		.ascii	"aacyof\000"
 3905      6F6600
 3906 50ef 00       		.align	2
 3907              	.LC698:
 3908 50f0 2A20416E 		.ascii	"* Analog Accel. Y Axis ADC Offset setted to %4i\000"
 3908      616C6F67 
 3908      20416363 
 3908      656C2E20 
 3908      59204178 
 3909              		.align	2
 3910              	.LC699:
 3911 5120 6161637A 		.ascii	"aaczoffset\000"
 3911      6F666673 
 3911      657400
 3912 512b 00       		.align	2
 3913              	.LC700:
 3914 512c 6161637A 		.ascii	"aaczof\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 125


 3914      6F6600
 3915 5133 00       		.align	2
 3916              	.LC701:
 3917 5134 2A20416E 		.ascii	"* Analog Accel. Z Axis ADC Offset setted to %4i\000"
 3917      616C6F67 
 3917      20416363 
 3917      656C2E20 
 3917      5A204178 
 3918              		.align	2
 3919              	.LC702:
 3920 5164 62657461 		.ascii	"beta\000"
 3920      00
 3921 5169 000000   		.align	2
 3922              	.LC703:
 3923 516c 2A206265 		.ascii	"* beta (accelerometer LPF) setted to %+1.9f\000"
 3923      74612028 
 3923      61636365 
 3923      6C65726F 
 3923      6D657465 
 3924              		.align	2
 3925              	.LC704:
 3926 5198 67616D6D 		.ascii	"gamma\000"
 3926      6100
 3927 519e 0000     		.align	2
 3928              	.LC705:
 3929 51a0 2A206761 		.ascii	"* gamma (IMU LPF) setted to %+1.9f\000"
 3929      6D6D6120 
 3929      28494D55 
 3929      204C5046 
 3929      29207365 
 3930 51c3 00       		.align	2
 3931              	.LC706:
 3932 51c4 6A756D70 		.ascii	"jumpth\000"
 3932      746800
 3933 51cb 00       		.align	2
 3934              	.LC707:
 3935 51cc 2A204A75 		.ascii	"* Jump G Threshold setted to %+1.4f[g]\000"
 3935      6D702047 
 3935      20546872 
 3935      6573686F 
 3935      6C642073 
 3936 51f3 00       		.align	2
 3937              	.LC708:
 3938 51f4 61636374 		.ascii	"accth\000"
 3938      6800
 3939 51fa 0000     		.align	2
 3940              	.LC709:
 3941 51fc 2A204163 		.ascii	"* Acceleration G Threshold setted to %+1.4f[g]\000"
 3941      63656C65 
 3941      72617469 
 3941      6F6E2047 
 3941      20546872 
 3942 522b 00       		.align	2
 3943              	.LC710:
 3944 522c 61737479 		.ascii	"astype\000"
 3944      706500
 3945 5233 00       		.align	2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 126


 3946              	.LC711:
 3947 5234 61737469 		.ascii	"astimtype\000"
 3947      6D747970 
 3947      6500
 3948 523e 0000     		.align	2
 3949              	.LC712:
 3950 5240 2A205061 		.ascii	"* Pan  Astim Type setted to %1u\015\012\000"
 3950      6E202041 
 3950      7374696D 
 3950      20547970 
 3950      65207365 
 3951 5262 0000     		.align	2
 3952              	.LC713:
 3953 5264 2A205469 		.ascii	"* Tilt Astim Type setted to %1u\015\012\000"
 3953      6C742041 
 3953      7374696D 
 3953      20547970 
 3953      65207365 
 3954 5286 0000     		.align	2
 3955              	.LC714:
 3956 5288 53696E65 		.ascii	"Sine Wave Astim Started!\015\000"
 3956      20576176 
 3956      65204173 
 3956      74696D20 
 3956      53746172 
 3957 52a2 0000     		.align	2
 3958              	.LC715:
 3959 52a4 54726961 		.ascii	"Triangle Wave Astim Started!\015\000"
 3959      6E676C65 
 3959      20576176 
 3959      65204173 
 3959      74696D20 
 3960 52c2 0000     		.align	2
 3961              	.LC716:
 3962 52c4 53717561 		.ascii	"Square Wave Astim Started!\015\000"
 3962      72652057 
 3962      61766520 
 3962      41737469 
 3962      6D205374 
 3963              		.align	2
 3964              	.LC717:
 3965 52e0 57617665 		.ascii	"Wave Astim Stopped!\015\000"
 3965      20417374 
 3965      696D2053 
 3965      746F7070 
 3965      6564210D 
 3966 52f5 000000   		.align	2
 3967              	.LC718:
 3968 52f8 61737469 		.ascii	"astimp\000"
 3968      6D7000
 3969 52ff 00       		.align	2
 3970              	.LC719:
 3971 5300 44414E47 		.ascii	"DANGER!!! THIS COMMAND MAY PRODUCE LARGE MOVEMENTS!"
 3971      45522121 
 3971      21205448 
 3971      49532043 
 3971      4F4D4D41 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 127


 3972 5333 21210D00 		.ascii	"!!\015\000"
 3973 5337 00       		.align	2
 3974              	.LC720:
 3975 5338 41726520 		.ascii	"Are you sure to apply auto-stimulus [Y/N]?\000"
 3975      796F7520 
 3975      73757265 
 3975      20746F20 
 3975      6170706C 
 3976 5363 00       		.align	2
 3977              	.LC721:
 3978 5364 2A205061 		.ascii	"* Pan Astim Enable setted to %1u\015\012\000"
 3978      6E204173 
 3978      74696D20 
 3978      456E6162 
 3978      6C652073 
 3979 5387 00       		.align	2
 3980              	.LC722:
 3981 5388 61737469 		.ascii	"astimt\000"
 3981      6D7400
 3982 538f 00       		.align	2
 3983              	.LC723:
 3984 5390 2A205469 		.ascii	"* Tilt Astim Enable setted to %1u\015\012\000"
 3984      6C742041 
 3984      7374696D 
 3984      20456E61 
 3984      626C6520 
 3985              		.align	2
 3986              	.LC724:
 3987 53b4 23455252 		.ascii	"#ERROR4: Bad command!\000"
 3987      4F52343A 
 3987      20426164 
 3987      20636F6D 
 3987      6D616E64 
 3988 53ca 0000     		.section	.text.parser,"ax",%progbits
 3989              		.align	2
 3990              		.global	parser
 3991              		.thumb
 3992              		.thumb_func
 3993              		.type	parser, %function
 3994              	parser:
 3995              	.LFB69:
 685:.\console.c   **** 
 686:.\console.c   **** 
 687:.\console.c   **** 
 688:.\console.c   **** 
 689:.\console.c   **** // ************************************************************************
 690:.\console.c   **** // *** PARSERIZER (pass 3 of 3)										    ***
 691:.\console.c   **** // ************************************************************************
 692:.\console.c   **** uint8 parser()
 693:.\console.c   **** {
 3996              		.loc 1 693 0
 3997              		.cfi_startproc
 3998              		@ args = 0, pretend = 0, frame = 280
 3999              		@ frame_needed = 1, uses_anonymous_args = 0
 4000 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4001              	.LCFI37:
 4002              		.cfi_def_cfa_offset 36
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 128


 4003              		.cfi_offset 4, -36
 4004              		.cfi_offset 5, -32
 4005              		.cfi_offset 6, -28
 4006              		.cfi_offset 7, -24
 4007              		.cfi_offset 8, -20
 4008              		.cfi_offset 9, -16
 4009              		.cfi_offset 10, -12
 4010              		.cfi_offset 11, -8
 4011              		.cfi_offset 14, -4
 4012 0004 D3B0     		sub	sp, sp, #332
 4013              	.LCFI38:
 4014              		.cfi_def_cfa_offset 368
 4015 0006 0CAF     		add	r7, sp, #48
 4016              	.LCFI39:
 4017              		.cfi_def_cfa 7, 320
 694:.\console.c   **** 	uint8 scanstat __attribute__ ((unused));
 695:.\console.c   **** 	
 696:.\console.c   **** 	uint8 director;			/* Director local								*/
 697:.\console.c   **** 	uint8 mode_loc;			/* Machine mode local							*/
 698:.\console.c   **** 	float beta=0;			/* beta local									*/	
 4018              		.loc 1 698 0
 4019 0008 4FF00003 		mov	r3, #0
 4020 000c C7F8F830 		str	r3, [r7, #248]	@ float
 699:.\console.c   **** 	float gamma=0;			/* gamma local									*/
 4021              		.loc 1 699 0
 4022 0010 4FF00003 		mov	r3, #0
 4023 0014 C7F8F430 		str	r3, [r7, #244]	@ float
 700:.\console.c   **** 	uint8 polarity=0;		/* Motor Polarity local							*/
 4024              		.loc 1 700 0
 4025 0018 4FF00003 		mov	r3, #0
 4026 001c 87F8F330 		strb	r3, [r7, #243]
 701:.\console.c   **** 	uint8 invertion=0;		/* IMU Invertion local							*/
 4027              		.loc 1 701 0
 4028 0020 4FF00003 		mov	r3, #0
 4029 0024 87F8F230 		strb	r3, [r7, #242]
 702:.\console.c   **** 	uint8 exchange=0;		/* IMU Exchange local							*/
 4030              		.loc 1 702 0
 4031 0028 4FF00003 		mov	r3, #0
 4032 002c 87F8F130 		strb	r3, [r7, #241]
 703:.\console.c   **** 	int16 offset=0;			/* generic int16 Offset							*/
 4033              		.loc 1 703 0
 4034 0030 4FF00003 		mov	r3, #0
 4035 0034 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 704:.\console.c   **** 	
 705:.\console.c   **** 	float Kp;				/* Kp local										*/
 706:.\console.c   **** 	float Kd;				/* Kd local										*/	
 707:.\console.c   **** 	float Ki;				/* Ki local										*/
 708:.\console.c   **** 	float Ksi;				/* Ksi local									*/	
 709:.\console.c   **** 	uint8 limit_control;	/* Limit Control local							*/
 710:.\console.c   **** 	uint8 raw_invertion;	/* raw invertion local							*/
 711:.\console.c   **** 	uint16 raw_limit_hyst; 	/* raw limit hysteresis local 					*/
 712:.\console.c   **** 	float step_abs_ratio;	/* encoder step/absolute sensor ratio local		*/
 713:.\console.c   **** 	float Kopf;				/* Kopf local									*/	
 714:.\console.c   **** 	float anaout_gain;		/* Analog Output Gain local						*/
 715:.\console.c   **** 	uint8 color;			/* color local									*/
 716:.\console.c   **** 	uint8 astim_type=0;		/* astim type loc								*/
 4036              		.loc 1 716 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 129


 4037 0038 4FF00003 		mov	r3, #0
 4038 003c 87F8ED30 		strb	r3, [r7, #237]
 717:.\console.c   **** 	uint8 astim_enable=0;	/* astim enable loc 							*/
 4039              		.loc 1 717 0
 4040 0040 4FF00003 		mov	r3, #0
 4041 0044 87F8EC30 		strb	r3, [r7, #236]
 718:.\console.c   **** 	uint8 path_n=0;			/* path number local							*/
 4042              		.loc 1 718 0
 4043 0048 4FF00003 		mov	r3, #0
 4044 004c 87F8EB30 		strb	r3, [r7, #235]
 719:.\console.c   **** 	uint8 clu_number=0;		/* clu number local								*/
 4045              		.loc 1 719 0
 4046 0050 4FF00003 		mov	r3, #0
 4047 0054 87F8EA30 		strb	r3, [r7, #234]
 720:.\console.c   **** 	uint8 clu_pause=0;		/* clu pause local								*/	
 4048              		.loc 1 720 0
 4049 0058 4FF00003 		mov	r3, #0
 4050 005c 87F8E930 		strb	r3, [r7, #233]
 721:.\console.c   **** 	uint16 memory_number=0;	/* memory number local							*/
 4051              		.loc 1 721 0
 4052 0060 4FF00003 		mov	r3, #0
 4053 0064 A7F8E630 		strh	r3, [r7, #230]	@ movhi
 722:.\console.c   **** 	uint8 q_number=0;		/* q number local								*/	
 4054              		.loc 1 722 0
 4055 0068 4FF00003 		mov	r3, #0
 4056 006c 87F8E530 		strb	r3, [r7, #229]
 723:.\console.c   **** 	float time_loc=0;		/* time float local								*/
 4057              		.loc 1 723 0
 4058 0070 4FF00003 		mov	r3, #0
 4059 0074 C7F81431 		str	r3, [r7, #276]	@ float
 724:.\console.c   **** 	float jump_g_th=0;		/* jump G threshold local						*/
 4060              		.loc 1 724 0
 4061 0078 4FF00003 		mov	r3, #0
 4062 007c C7F8E030 		str	r3, [r7, #224]	@ float
 725:.\console.c   **** 	float acc_g_th=0;		/* acceleration G threshold local				*/
 4063              		.loc 1 725 0
 4064 0080 4FF00003 		mov	r3, #0
 4065 0084 C7F8DC30 		str	r3, [r7, #220]	@ float
 726:.\console.c   **** 	
 727:.\console.c   **** 
 728:.\console.c   **** 	uint8 dummy __attribute__ ((unused));
 729:.\console.c   **** 	uint8 idx=0;
 4066              		.loc 1 729 0
 4067 0088 4FF00003 		mov	r3, #0
 4068 008c 87F81331 		strb	r3, [r7, #275]
 730:.\console.c   **** 	uint8 get_key=0;
 4069              		.loc 1 730 0
 4070 0090 4FF00003 		mov	r3, #0
 4071 0094 87F81231 		strb	r3, [r7, #274]
 731:.\console.c   **** 
 732:.\console.c   **** 	
 733:.\console.c   **** 	/* Scanner */
 734:.\console.c   **** 	scanstat = scanner2(VERBOSE_OFF);
 4072              		.loc 1 734 0
 4073 0098 4FF00000 		mov	r0, #0
 4074 009c FFF7FEFF 		bl	scanner2
 4075 00a0 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 130


 4076 00a2 87F8DB30 		strb	r3, [r7, #219]
 735:.\console.c   **** 
 736:.\console.c   **** 	
 737:.\console.c   **** 	//=====================================================================//
 738:.\console.c   **** 	//=== COMMANDS PARSING 												===//
 739:.\console.c   **** 	//=====================================================================//
 740:.\console.c   **** 
 741:.\console.c   **** 	/* CMD 'BOOT' */	
 742:.\console.c   **** 	if (strcmp(actual_cmd.action, "boot") == 0)
 4077              		.loc 1 742 0
 4078 00a6 40F20000 		movw	r0, #:lower16:actual_cmd
 4079 00aa C0F20000 		movt	r0, #:upper16:actual_cmd
 4080 00ae 40F20001 		movw	r1, #:lower16:.LC78
 4081 00b2 C0F20001 		movt	r1, #:upper16:.LC78
 4082 00b6 FFF7FEFF 		bl	strcmp
 4083 00ba 0346     		mov	r3, r0
 4084 00bc 002B     		cmp	r3, #0
 4085 00be 2CD1     		bne	.L127
 743:.\console.c   **** 	{
 744:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4086              		.loc 1 744 0
 4087 00c0 DC4B     		ldr	r3, .L712
 4088 00c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4089 00c4 002B     		cmp	r3, #0
 4090 00c6 20D1     		bne	.L128
 745:.\console.c   **** 		{
 746:.\console.c   **** 			printf("\r\nAre you sure to start Bootload [Y/N]?");		
 4091              		.loc 1 746 0
 4092 00c8 40F20000 		movw	r0, #:lower16:.LC79
 4093 00cc C0F20000 		movt	r0, #:upper16:.LC79
 4094 00d0 FFF7FEFF 		bl	printf
 747:.\console.c   **** 			if (ButtonYNChoice(ECHO_OFF) == _YES)
 4095              		.loc 1 747 0
 4096 00d4 4FF00000 		mov	r0, #0
 4097 00d8 FFF7FEFF 		bl	ButtonYNChoice
 4098 00dc 0346     		mov	r3, r0
 4099 00de 012B     		cmp	r3, #1
 4100 00e0 0BD1     		bne	.L129
 748:.\console.c   **** 			{
 749:.\console.c   **** 				printf("\r\n!!!Wait for Bootloading (power off to stop bootloading process)\r\n");
 4101              		.loc 1 749 0
 4102 00e2 40F20000 		movw	r0, #:lower16:.LC80
 4103 00e6 C0F20000 		movt	r0, #:upper16:.LC80
 4104 00ea FFF7FEFF 		bl	puts
 750:.\console.c   **** 				CyDelay(100);
 4105              		.loc 1 750 0
 4106 00ee 4FF06400 		mov	r0, #100
 4107 00f2 FFF7FEFF 		bl	CyDelay
 751:.\console.c   **** 				/* This API will pass the program control to the Bootloader portion of the flash.
 752:.\console.c   **** 			   	It will also cause the Bootloader to wait indefinitely for the host to start communication *
 753:.\console.c   **** 				//Bootloadable_Load();
 754:.\console.c   **** 			}
 755:.\console.c   **** 			else
 756:.\console.c   **** 			{
 757:.\console.c   **** 				printf("\r\nBootloading aborted!");
 758:.\console.c   **** 			}
 759:.\console.c   **** 		}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 131


 760:.\console.c   **** 		else
 761:.\console.c   **** 		{
 762:.\console.c   **** 			printf(STR_ERROR1);
 763:.\console.c   **** 		}
 764:.\console.c   **** 	goto exitpars;
 4108              		.loc 1 764 0
 4109 00f6 06F02BBF 		b	.L131
 4110              	.L129:
 757:.\console.c   **** 				printf("\r\nBootloading aborted!");
 4111              		.loc 1 757 0
 4112 00fa 40F20000 		movw	r0, #:lower16:.LC81
 4113 00fe C0F20000 		movt	r0, #:upper16:.LC81
 4114 0102 FFF7FEFF 		bl	printf
 4115              		.loc 1 764 0
 4116 0106 06F023BF 		b	.L131
 4117              	.L128:
 762:.\console.c   **** 			printf(STR_ERROR1);
 4118              		.loc 1 762 0
 4119 010a 40F20000 		movw	r0, #:lower16:.LC82
 4120 010e C0F20000 		movt	r0, #:upper16:.LC82
 4121 0112 FFF7FEFF 		bl	printf
 4122              		.loc 1 764 0
 4123 0116 06F01BBF 		b	.L131
 4124              	.L127:
 765:.\console.c   **** 	}
 766:.\console.c   **** 	/* END CMD BOOT */
 767:.\console.c   **** 
 768:.\console.c   **** 	
 769:.\console.c   **** 	/* CMD ANAPOS +20 */
 770:.\console.c   **** 	if (strcmp(actual_cmd.action, "pp") == 0)
 4125              		.loc 1 770 0
 4126 011a 40F20000 		movw	r0, #:lower16:actual_cmd
 4127 011e C0F20000 		movt	r0, #:upper16:actual_cmd
 4128 0122 40F20001 		movw	r1, #:lower16:.LC83
 4129 0126 C0F20001 		movt	r1, #:upper16:.LC83
 4130 012a FFF7FEFF 		bl	strcmp
 4131 012e 0346     		mov	r3, r0
 4132 0130 002B     		cmp	r3, #0
 4133 0132 23D1     		bne	.L132
 771:.\console.c   **** 	{
 772:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4134              		.loc 1 772 0
 4135 0134 BF4B     		ldr	r3, .L712
 4136 0136 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4137 0138 002B     		cmp	r3, #0
 4138 013a 17D1     		bne	.L133
 773:.\console.c   **** 		{
 774:.\console.c   **** 			printf ("*ANAPOS ZERO +20!\r\n");
 4139              		.loc 1 774 0
 4140 013c 40F20000 		movw	r0, #:lower16:.LC84
 4141 0140 C0F20000 		movt	r0, #:upper16:.LC84
 4142 0144 FFF7FEFF 		bl	puts
 775:.\console.c   **** 			anapos_offset = anapos_offset + 20;
 4143              		.loc 1 775 0
 4144 0148 40F20003 		movw	r3, #:lower16:anapos_offset
 4145 014c C0F20003 		movt	r3, #:upper16:anapos_offset
 4146 0150 1B68     		ldr	r3, [r3, #0]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 132


 4147 0152 03F11402 		add	r2, r3, #20
 4148 0156 40F20003 		movw	r3, #:lower16:anapos_offset
 4149 015a C0F20003 		movt	r3, #:upper16:anapos_offset
 4150 015e 1A60     		str	r2, [r3, #0]
 776:.\console.c   **** 			CyDelay(100);
 4151              		.loc 1 776 0
 4152 0160 4FF06400 		mov	r0, #100
 4153 0164 FFF7FEFF 		bl	CyDelay
 777:.\console.c   **** 		}
 778:.\console.c   **** 		else
 779:.\console.c   **** 		{
 780:.\console.c   **** 			printf ("*err\n");
 781:.\console.c   **** 		}
 782:.\console.c   **** 	goto exitpars;
 4154              		.loc 1 782 0
 4155 0168 06F0F2BE 		b	.L131
 4156              	.L133:
 780:.\console.c   **** 			printf ("*err\n");
 4157              		.loc 1 780 0
 4158 016c 40F20000 		movw	r0, #:lower16:.LC85
 4159 0170 C0F20000 		movt	r0, #:upper16:.LC85
 4160 0174 FFF7FEFF 		bl	puts
 4161              		.loc 1 782 0
 4162 0178 06F0EABE 		b	.L131
 4163              	.L132:
 783:.\console.c   **** 	}
 784:.\console.c   **** 	/* END ANAPOS +20 */
 785:.\console.c   **** 
 786:.\console.c   **** 
 787:.\console.c   **** 	/* CMD ANAPOS +100 */
 788:.\console.c   **** 	if (strcmp(actual_cmd.action, "ppp") == 0)
 4164              		.loc 1 788 0
 4165 017c 40F20000 		movw	r0, #:lower16:actual_cmd
 4166 0180 C0F20000 		movt	r0, #:upper16:actual_cmd
 4167 0184 40F20001 		movw	r1, #:lower16:.LC86
 4168 0188 C0F20001 		movt	r1, #:upper16:.LC86
 4169 018c FFF7FEFF 		bl	strcmp
 4170 0190 0346     		mov	r3, r0
 4171 0192 002B     		cmp	r3, #0
 4172 0194 23D1     		bne	.L135
 789:.\console.c   **** 	{
 790:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4173              		.loc 1 790 0
 4174 0196 A74B     		ldr	r3, .L712
 4175 0198 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4176 019a 002B     		cmp	r3, #0
 4177 019c 17D1     		bne	.L136
 791:.\console.c   **** 		{
 792:.\console.c   **** 			printf ("*ANAPOS ZERO +100!\r\n");
 4178              		.loc 1 792 0
 4179 019e 40F20000 		movw	r0, #:lower16:.LC87
 4180 01a2 C0F20000 		movt	r0, #:upper16:.LC87
 4181 01a6 FFF7FEFF 		bl	puts
 793:.\console.c   **** 			anapos_offset = anapos_offset + 100;
 4182              		.loc 1 793 0
 4183 01aa 40F20003 		movw	r3, #:lower16:anapos_offset
 4184 01ae C0F20003 		movt	r3, #:upper16:anapos_offset
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 133


 4185 01b2 1B68     		ldr	r3, [r3, #0]
 4186 01b4 03F16402 		add	r2, r3, #100
 4187 01b8 40F20003 		movw	r3, #:lower16:anapos_offset
 4188 01bc C0F20003 		movt	r3, #:upper16:anapos_offset
 4189 01c0 1A60     		str	r2, [r3, #0]
 794:.\console.c   **** 			CyDelay(100);
 4190              		.loc 1 794 0
 4191 01c2 4FF06400 		mov	r0, #100
 4192 01c6 FFF7FEFF 		bl	CyDelay
 795:.\console.c   **** 		}
 796:.\console.c   **** 		else
 797:.\console.c   **** 		{
 798:.\console.c   **** 			printf ("*err\n");
 799:.\console.c   **** 		}
 800:.\console.c   **** 	goto exitpars;
 4193              		.loc 1 800 0
 4194 01ca 06F0C1BE 		b	.L131
 4195              	.L136:
 798:.\console.c   **** 			printf ("*err\n");
 4196              		.loc 1 798 0
 4197 01ce 40F20000 		movw	r0, #:lower16:.LC85
 4198 01d2 C0F20000 		movt	r0, #:upper16:.LC85
 4199 01d6 FFF7FEFF 		bl	puts
 4200              		.loc 1 800 0
 4201 01da 06F0B9BE 		b	.L131
 4202              	.L135:
 801:.\console.c   **** 	}
 802:.\console.c   **** 	/* END ANAPOS +100 */
 803:.\console.c   **** 
 804:.\console.c   **** 
 805:.\console.c   **** 	/* CMD ANAPOS -20 */
 806:.\console.c   **** 	if (strcmp(actual_cmd.action, "mm") == 0)
 4203              		.loc 1 806 0
 4204 01de 40F20000 		movw	r0, #:lower16:actual_cmd
 4205 01e2 C0F20000 		movt	r0, #:upper16:actual_cmd
 4206 01e6 40F20001 		movw	r1, #:lower16:.LC88
 4207 01ea C0F20001 		movt	r1, #:upper16:.LC88
 4208 01ee FFF7FEFF 		bl	strcmp
 4209 01f2 0346     		mov	r3, r0
 4210 01f4 002B     		cmp	r3, #0
 4211 01f6 23D1     		bne	.L138
 807:.\console.c   **** 	{
 808:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4212              		.loc 1 808 0
 4213 01f8 8E4B     		ldr	r3, .L712
 4214 01fa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4215 01fc 002B     		cmp	r3, #0
 4216 01fe 17D1     		bne	.L139
 809:.\console.c   **** 		{
 810:.\console.c   **** 			printf ("*ANAPOS ZERO -20!\r\n");
 4217              		.loc 1 810 0
 4218 0200 40F20000 		movw	r0, #:lower16:.LC89
 4219 0204 C0F20000 		movt	r0, #:upper16:.LC89
 4220 0208 FFF7FEFF 		bl	puts
 811:.\console.c   **** 			anapos_offset = anapos_offset - 20;
 4221              		.loc 1 811 0
 4222 020c 40F20003 		movw	r3, #:lower16:anapos_offset
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 134


 4223 0210 C0F20003 		movt	r3, #:upper16:anapos_offset
 4224 0214 1B68     		ldr	r3, [r3, #0]
 4225 0216 A3F11402 		sub	r2, r3, #20
 4226 021a 40F20003 		movw	r3, #:lower16:anapos_offset
 4227 021e C0F20003 		movt	r3, #:upper16:anapos_offset
 4228 0222 1A60     		str	r2, [r3, #0]
 812:.\console.c   **** 			CyDelay(100);
 4229              		.loc 1 812 0
 4230 0224 4FF06400 		mov	r0, #100
 4231 0228 FFF7FEFF 		bl	CyDelay
 813:.\console.c   **** 		}
 814:.\console.c   **** 		else
 815:.\console.c   **** 		{
 816:.\console.c   **** 			printf ("*err\n");
 817:.\console.c   **** 		}
 818:.\console.c   **** 	goto exitpars;
 4232              		.loc 1 818 0
 4233 022c 06F090BE 		b	.L131
 4234              	.L139:
 816:.\console.c   **** 			printf ("*err\n");
 4235              		.loc 1 816 0
 4236 0230 40F20000 		movw	r0, #:lower16:.LC85
 4237 0234 C0F20000 		movt	r0, #:upper16:.LC85
 4238 0238 FFF7FEFF 		bl	puts
 4239              		.loc 1 818 0
 4240 023c 06F088BE 		b	.L131
 4241              	.L138:
 819:.\console.c   **** 	}
 820:.\console.c   **** 	/* END ANAPOS -20 */
 821:.\console.c   **** 
 822:.\console.c   **** 
 823:.\console.c   **** 	/* CMD ANAPOS -100 */
 824:.\console.c   **** 	if (strcmp(actual_cmd.action, "mmm") == 0)
 4242              		.loc 1 824 0
 4243 0240 40F20000 		movw	r0, #:lower16:actual_cmd
 4244 0244 C0F20000 		movt	r0, #:upper16:actual_cmd
 4245 0248 40F20001 		movw	r1, #:lower16:.LC90
 4246 024c C0F20001 		movt	r1, #:upper16:.LC90
 4247 0250 FFF7FEFF 		bl	strcmp
 4248 0254 0346     		mov	r3, r0
 4249 0256 002B     		cmp	r3, #0
 4250 0258 23D1     		bne	.L141
 825:.\console.c   **** 	{
 826:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4251              		.loc 1 826 0
 4252 025a 764B     		ldr	r3, .L712
 4253 025c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4254 025e 002B     		cmp	r3, #0
 4255 0260 17D1     		bne	.L142
 827:.\console.c   **** 		{
 828:.\console.c   **** 			printf ("*ANAPOS ZERO -100!\r\n");
 4256              		.loc 1 828 0
 4257 0262 40F20000 		movw	r0, #:lower16:.LC91
 4258 0266 C0F20000 		movt	r0, #:upper16:.LC91
 4259 026a FFF7FEFF 		bl	puts
 829:.\console.c   **** 			anapos_offset = anapos_offset - 100;
 4260              		.loc 1 829 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 135


 4261 026e 40F20003 		movw	r3, #:lower16:anapos_offset
 4262 0272 C0F20003 		movt	r3, #:upper16:anapos_offset
 4263 0276 1B68     		ldr	r3, [r3, #0]
 4264 0278 A3F16402 		sub	r2, r3, #100
 4265 027c 40F20003 		movw	r3, #:lower16:anapos_offset
 4266 0280 C0F20003 		movt	r3, #:upper16:anapos_offset
 4267 0284 1A60     		str	r2, [r3, #0]
 830:.\console.c   **** 			CyDelay(100);
 4268              		.loc 1 830 0
 4269 0286 4FF06400 		mov	r0, #100
 4270 028a FFF7FEFF 		bl	CyDelay
 831:.\console.c   **** 		}
 832:.\console.c   **** 		else
 833:.\console.c   **** 		{
 834:.\console.c   **** 			printf ("*err\n");
 835:.\console.c   **** 		}
 836:.\console.c   **** 	goto exitpars;
 4271              		.loc 1 836 0
 4272 028e 06F05FBE 		b	.L131
 4273              	.L142:
 834:.\console.c   **** 			printf ("*err\n");
 4274              		.loc 1 834 0
 4275 0292 40F20000 		movw	r0, #:lower16:.LC85
 4276 0296 C0F20000 		movt	r0, #:upper16:.LC85
 4277 029a FFF7FEFF 		bl	puts
 4278              		.loc 1 836 0
 4279 029e 06F057BE 		b	.L131
 4280              	.L141:
 837:.\console.c   **** 	}
 838:.\console.c   **** 	/* END ANAPOS -100 */	
 839:.\console.c   **** 	
 840:.\console.c   **** 	
 841:.\console.c   **** 	/* CMD TEST BUZZER */
 842:.\console.c   **** 	if (strcmp(actual_cmd.action, "tbuz") == 0)
 4281              		.loc 1 842 0
 4282 02a2 40F20000 		movw	r0, #:lower16:actual_cmd
 4283 02a6 C0F20000 		movt	r0, #:upper16:actual_cmd
 4284 02aa 40F20001 		movw	r1, #:lower16:.LC92
 4285 02ae C0F20001 		movt	r1, #:upper16:.LC92
 4286 02b2 FFF7FEFF 		bl	strcmp
 4287 02b6 0346     		mov	r3, r0
 4288 02b8 002B     		cmp	r3, #0
 4289 02ba 26D1     		bne	.L144
 843:.\console.c   **** 	{
 844:.\console.c   **** 		printf("Buzzer testing!\r\n");
 4290              		.loc 1 844 0
 4291 02bc 40F20000 		movw	r0, #:lower16:.LC93
 4292 02c0 C0F20000 		movt	r0, #:upper16:.LC93
 4293 02c4 FFF7FEFF 		bl	puts
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4294              		.loc 1 845 0
 4295 02c8 4FF00003 		mov	r3, #0
 4296 02cc 87F81331 		strb	r3, [r7, #275]
 4297 02d0 15E0     		b	.L145
 4298              	.L146:
 846:.\console.c   ****  		{			
 847:.\console.c   **** 			Control_Reg_BUZ_Write(BUZZER_ON);	/* buzzer on			*/
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 136


 4299              		.loc 1 847 0 discriminator 2
 4300 02d2 4FF00100 		mov	r0, #1
 4301 02d6 FFF7FEFF 		bl	Control_Reg_BUZ_Write
 848:.\console.c   **** 			CyDelay(250);						/* 250msec sec delay	*/
 4302              		.loc 1 848 0 discriminator 2
 4303 02da 4FF0FA00 		mov	r0, #250
 4304 02de FFF7FEFF 		bl	CyDelay
 849:.\console.c   **** 			Control_Reg_BUZ_Write(BUZZER_OFF);	/* buzzer off			*/
 4305              		.loc 1 849 0 discriminator 2
 4306 02e2 4FF00000 		mov	r0, #0
 4307 02e6 FFF7FEFF 		bl	Control_Reg_BUZ_Write
 850:.\console.c   **** 			CyDelay(125);						/* 125msec sec delay	*/			
 4308              		.loc 1 850 0 discriminator 2
 4309 02ea 4FF07D00 		mov	r0, #125
 4310 02ee FFF7FEFF 		bl	CyDelay
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4311              		.loc 1 845 0 discriminator 2
 4312 02f2 97F81331 		ldrb	r3, [r7, #275]
 4313 02f6 03F10103 		add	r3, r3, #1
 4314 02fa 87F81331 		strb	r3, [r7, #275]
 4315              	.L145:
 845:.\console.c   ****  		for (idx = 0; idx < 3; idx++)
 4316              		.loc 1 845 0 is_stmt 0 discriminator 1
 4317 02fe 97F81331 		ldrb	r3, [r7, #275]	@ zero_extendqisi2
 4318 0302 022B     		cmp	r3, #2
 4319 0304 E5D9     		bls	.L146
 851:.\console.c   **** 		}
 852:.\console.c   **** 	
 853:.\console.c   **** 		goto exitpars;
 4320              		.loc 1 853 0 is_stmt 1
 4321 0306 06F023BE 		b	.L131
 4322              	.L144:
 854:.\console.c   **** 	}
 855:.\console.c   **** 	/* END CMD TEST BUZZER */	
 856:.\console.c   **** 	
 857:.\console.c   **** 	
 858:.\console.c   **** 	/* HIDDEN CMD TEST LORA */	
 859:.\console.c   **** 	if (strcmp(actual_cmd.action, "tlora") == 0)
 4323              		.loc 1 859 0
 4324 030a 40F20000 		movw	r0, #:lower16:actual_cmd
 4325 030e C0F20000 		movt	r0, #:upper16:actual_cmd
 4326 0312 40F20001 		movw	r1, #:lower16:.LC94
 4327 0316 C0F20001 		movt	r1, #:upper16:.LC94
 4328 031a FFF7FEFF 		bl	strcmp
 4329 031e 0346     		mov	r3, r0
 4330 0320 002B     		cmp	r3, #0
 4331 0322 1BD1     		bne	.L147
 860:.\console.c   **** 	{
 861:.\console.c   **** 		printf("Test LoRa started!\r\n");
 4332              		.loc 1 861 0
 4333 0324 40F20000 		movw	r0, #:lower16:.LC95
 4334 0328 C0F20000 		movt	r0, #:upper16:.LC95
 4335 032c FFF7FEFF 		bl	puts
 862:.\console.c   **** 			
 863:.\console.c   **** 		sendLoRaATcmd(CMD_AT);					/* Send AT Command */
 4336              		.loc 1 863 0
 4337 0330 40F20000 		movw	r0, #:lower16:CMD_AT
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 137


 4338 0334 C0F20000 		movt	r0, #:upper16:CMD_AT
 4339 0338 FFF7FEFF 		bl	sendLoRaATcmd
 864:.\console.c   **** 		
 865:.\console.c   **** 		CyDelay(500);							/* delay waiting XTR-8LR100 chars */
 4340              		.loc 1 865 0
 4341 033c 4FF4FA70 		mov	r0, #500
 4342 0340 FFF7FEFF 		bl	CyDelay
 866:.\console.c   **** 						
 867:.\console.c   **** 		sendLoRaATcmd(CMD_AT_SHOWVERSION);		/* Send SHOW VERSION Command */
 4343              		.loc 1 867 0
 4344 0344 40F20000 		movw	r0, #:lower16:CMD_AT_SHOWVERSION
 4345 0348 C0F20000 		movt	r0, #:upper16:CMD_AT_SHOWVERSION
 4346 034c FFF7FEFF 		bl	sendLoRaATcmd
 868:.\console.c   **** 		
 869:.\console.c   **** 		CyDelay(500);							/* delay waiting XTR-8LR100 chars */
 4347              		.loc 1 869 0
 4348 0350 4FF4FA70 		mov	r0, #500
 4349 0354 FFF7FEFF 		bl	CyDelay
 870:.\console.c   **** 		
 871:.\console.c   **** 		goto exitpars;
 4350              		.loc 1 871 0
 4351 0358 06F0FABD 		b	.L131
 4352              	.L147:
 872:.\console.c   **** 	}
 873:.\console.c   **** 	/* END HIDDEN CMD TEST LORA */ 	
 874:.\console.c   **** 	
 875:.\console.c   **** 	
 876:.\console.c   **** //	/* HIDDEN CMD TEST LORA 2 (PINS) */	
 877:.\console.c   **** //	if (strcmp(actual_cmd.action, "tlora2") == 0)
 878:.\console.c   **** //	{
 879:.\console.c   **** //		printf("Test LoRa 2 (pins) started!\r\n");
 880:.\console.c   **** //			
 881:.\console.c   **** //		while (AnyButtonPressed() == NO_PRESSED)
 882:.\console.c   **** //		{	
 883:.\console.c   **** //			printf("RESET=L\r\n");
 884:.\console.c   **** //			Control_Reg_LORA_RESET_Write(0x00);		/* SET_A = L 		*/						
 885:.\console.c   **** //			CyDelay(100);						/* 0.5 sec delay 	*/
 886:.\console.c   **** //			printf("RESET=H\r\n");
 887:.\console.c   **** //			Control_Reg_LORA_RESET_Write(0xFF);		/* SET_A = L 		*/						
 888:.\console.c   **** //			CyDelay(100);						/* 0.5 sec delay 	*/			
 889:.\console.c   **** //		}
 890:.\console.c   **** //		
 891:.\console.c   **** //		Control_Reg_LORA_Write(0xFF);		/* SET_A = H */
 892:.\console.c   **** //		Control_Reg_LORA_RESET_Write(0xFF);	/* RESET = H */
 893:.\console.c   **** //		
 894:.\console.c   **** //		goto exitpars;
 895:.\console.c   **** //	}
 896:.\console.c   **** //	/* END HIDDEN CMD TEST LORA 2 (PINS) */ 	
 897:.\console.c   **** 	
 898:.\console.c   **** 	
 899:.\console.c   **** 	/* CMD MYTEST */
 900:.\console.c   **** 	if (strcmp(actual_cmd.action, "mytest") == 0)
 4353              		.loc 1 900 0
 4354 035c 40F20000 		movw	r0, #:lower16:actual_cmd
 4355 0360 C0F20000 		movt	r0, #:upper16:actual_cmd
 4356 0364 40F20001 		movw	r1, #:lower16:.LC96
 4357 0368 C0F20001 		movt	r1, #:upper16:.LC96
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 138


 4358 036c FFF7FEFF 		bl	strcmp
 4359 0370 0346     		mov	r3, r0
 4360 0372 002B     		cmp	r3, #0
 4361 0374 2DD1     		bne	.L148
 901:.\console.c   **** 	{
 902:.\console.c   **** 		printf("My test!\r\n");
 4362              		.loc 1 902 0
 4363 0376 40F20000 		movw	r0, #:lower16:.LC97
 4364 037a C0F20000 		movt	r0, #:upper16:.LC97
 4365 037e FFF7FEFF 		bl	puts
 903:.\console.c   **** 		while (AnyButtonPressed() == NO_PRESSED)
 4366              		.loc 1 903 0
 4367 0382 1FE0     		b	.L149
 4368              	.L150:
 904:.\console.c   **** 		{
 905:.\console.c   **** #if MEASURE_MYTEST
 906:.\console.c   **** 	Control_Reg_LED_Write(0x01);
 4369              		.loc 1 906 0
 4370 0384 4FF00100 		mov	r0, #1
 4371 0388 FFF7FEFF 		bl	Control_Reg_LED_Write
 907:.\console.c   **** #endif					
 908:.\console.c   **** 			InitPanGotoQPath(11, 0.2);				/* initialize the Pan Goto Q Path					*/
 4372              		.loc 1 908 0
 4373 038c 4FF00B00 		mov	r0, #11
 4374 0390 4CF6CD41 		movw	r1, #52429
 4375 0394 C3F64C61 		movt	r1, 15948
 4376 0398 FFF7FEFF 		bl	InitPanGotoQPath
 909:.\console.c   **** 			InitTiltGotoQPath(11, 0.2);				/* initialize the Tilt Goto Q Path					*/			
 4377              		.loc 1 909 0
 4378 039c 4FF00B00 		mov	r0, #11
 4379 03a0 4CF6CD41 		movw	r1, #52429
 4380 03a4 C3F64C61 		movt	r1, 15948
 4381 03a8 FFF7FEFF 		bl	InitTiltGotoQPath
 910:.\console.c   **** 			CalculatePanGotoQPath();				/* Calculate the  Pan Goto Q Path 					*/
 4382              		.loc 1 910 0
 4383 03ac FFF7FEFF 		bl	CalculatePanGotoQPath
 911:.\console.c   **** 			CalculateTiltGotoQPath();				/* Calculate the  Tilt Goto Q Path 					*/						
 4384              		.loc 1 911 0
 4385 03b0 FFF7FEFF 		bl	CalculateTiltGotoQPath
 912:.\console.c   **** #if MEASURE_MYTEST
 913:.\console.c   **** 	Control_Reg_LED_Write(0x00);
 4386              		.loc 1 913 0
 4387 03b4 4FF00000 		mov	r0, #0
 4388 03b8 FFF7FEFF 		bl	Control_Reg_LED_Write
 914:.\console.c   **** #endif					
 915:.\console.c   **** 			CyDelayUs(500);
 4389              		.loc 1 915 0
 4390 03bc 4FF4FA70 		mov	r0, #500
 4391 03c0 FFF7FEFF 		bl	CyDelayUs
 4392              	.L149:
 903:.\console.c   **** 		while (AnyButtonPressed() == NO_PRESSED)
 4393              		.loc 1 903 0 discriminator 1
 4394 03c4 FFF7FEFF 		bl	AnyButtonPressed
 4395 03c8 0346     		mov	r3, r0
 4396 03ca 002B     		cmp	r3, #0
 4397 03cc DAD0     		beq	.L150
 916:.\console.c   **** 		}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 139


 917:.\console.c   **** 				
 918:.\console.c   **** 		goto exitpars;
 4398              		.loc 1 918 0
 4399 03ce 06F0BFBD 		b	.L131
 4400              	.L148:
 919:.\console.c   **** 	}
 920:.\console.c   **** 	/* END CMD MYTEST */
 921:.\console.c   **** 	
 922:.\console.c   **** 	
 923:.\console.c   **** #if ITG_3701_ENABLED	
 924:.\console.c   **** 	/* CMD TEST INVENSENSE ITG3701 */
 925:.\console.c   **** 	if ((strcmp(actual_cmd.action, "titg3701") == 0) ||
 926:.\console.c   **** 	   (strcmp(actual_cmd.action, "t3701") == 0))
 927:.\console.c   **** 	{
 928:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 929:.\console.c   **** 		{
 930:.\console.c   **** 			printf("Invensense ITG-3701 testing!\r\n");
 931:.\console.c   **** 			ITG3701_test();
 932:.\console.c   **** 		}
 933:.\console.c   **** 		else
 934:.\console.c   **** 		{
 935:.\console.c   **** 			printf ("*err\n");
 936:.\console.c   **** 		}
 937:.\console.c   **** 	goto exitpars;
 938:.\console.c   **** 	}
 939:.\console.c   **** 	/* END CMD TEST INVENSENSE ITG3701 */	
 940:.\console.c   **** #endif
 941:.\console.c   **** 
 942:.\console.c   **** 	
 943:.\console.c   **** 	/* CMD STOP MAPPING STATE MACHINE */
 944:.\console.c   **** 	if ((strcmp(actual_cmd.action, "stopmapsm") == 0) ||
 4401              		.loc 1 944 0
 4402 03d2 40F20000 		movw	r0, #:lower16:actual_cmd
 4403 03d6 C0F20000 		movt	r0, #:upper16:actual_cmd
 4404 03da 40F20001 		movw	r1, #:lower16:.LC98
 4405 03de C0F20001 		movt	r1, #:upper16:.LC98
 4406 03e2 FFF7FEFF 		bl	strcmp
 4407 03e6 0346     		mov	r3, r0
 4408 03e8 002B     		cmp	r3, #0
 4409 03ea 0CD0     		beq	.L151
 945:.\console.c   **** 	   (strcmp(actual_cmd.action, "stopsm") == 0))
 4410              		.loc 1 945 0 discriminator 1
 4411 03ec 40F20000 		movw	r0, #:lower16:actual_cmd
 4412 03f0 C0F20000 		movt	r0, #:upper16:actual_cmd
 4413 03f4 40F20001 		movw	r1, #:lower16:.LC99
 4414 03f8 C0F20001 		movt	r1, #:upper16:.LC99
 4415 03fc FFF7FEFF 		bl	strcmp
 4416 0400 0346     		mov	r3, r0
 944:.\console.c   **** 	if ((strcmp(actual_cmd.action, "stopmapsm") == 0) ||
 4417              		.loc 1 944 0 discriminator 1
 4418 0402 002B     		cmp	r3, #0
 4419 0404 18D1     		bne	.L152
 4420              	.L151:
 946:.\console.c   **** 	{
 947:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4421              		.loc 1 947 0
 4422 0406 0B4B     		ldr	r3, .L712
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 140


 4423 0408 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4424 040a 002B     		cmp	r3, #0
 4425 040c 09D1     		bne	.L153
 948:.\console.c   **** 		{
 949:.\console.c   **** 			printf("MAPPING STATE MACHINE Stopped!\r\n");
 4426              		.loc 1 949 0
 4427 040e 40F20000 		movw	r0, #:lower16:.LC100
 4428 0412 C0F20000 		movt	r0, #:upper16:.LC100
 4429 0416 FFF7FEFF 		bl	puts
 950:.\console.c   **** 			
 951:.\console.c   **** 			/* Mapping State Machine Initialization */
 952:.\console.c   **** 			MappingStateMachineInit();
 4430              		.loc 1 952 0
 4431 041a FFF7FEFF 		bl	MappingStateMachineInit
 953:.\console.c   **** 		}
 954:.\console.c   **** 		else
 955:.\console.c   **** 		{
 956:.\console.c   **** 			printf ("*err\n");
 957:.\console.c   **** 		}
 958:.\console.c   **** 	goto exitpars;
 4432              		.loc 1 958 0
 4433 041e 06F097BD 		b	.L131
 4434              	.L153:
 956:.\console.c   **** 			printf ("*err\n");
 4435              		.loc 1 956 0
 4436 0422 40F20000 		movw	r0, #:lower16:.LC85
 4437 0426 C0F20000 		movt	r0, #:upper16:.LC85
 4438 042a FFF7FEFF 		bl	puts
 4439              		.loc 1 958 0
 4440 042e 06F08FBD 		b	.L131
 4441              	.L713:
 4442 0432 00BF     		.align	2
 4443              	.L712:
 4444 0434 0F000000 		.word	actual_cmd+15
 4445              	.L152:
 959:.\console.c   **** 	}
 960:.\console.c   **** 	/* END CMD STOP MAPPING STATE MACHINE */
 961:.\console.c   **** 
 962:.\console.c   **** 	
 963:.\console.c   **** 	/* CMD DEENERGIZE */
 964:.\console.c   **** 	if ((strcmp(actual_cmd.action, "deenergize") == 0) ||
 4446              		.loc 1 964 0
 4447 0438 40F20000 		movw	r0, #:lower16:actual_cmd
 4448 043c C0F20000 		movt	r0, #:upper16:actual_cmd
 4449 0440 40F20001 		movw	r1, #:lower16:.LC101
 4450 0444 C0F20001 		movt	r1, #:upper16:.LC101
 4451 0448 FFF7FEFF 		bl	strcmp
 4452 044c 0346     		mov	r3, r0
 4453 044e 002B     		cmp	r3, #0
 4454 0450 0CD0     		beq	.L155
 965:.\console.c   **** 	   (strcmp(actual_cmd.action, "deen") == 0))
 4455              		.loc 1 965 0 discriminator 1
 4456 0452 40F20000 		movw	r0, #:lower16:actual_cmd
 4457 0456 C0F20000 		movt	r0, #:upper16:actual_cmd
 4458 045a 40F20001 		movw	r1, #:lower16:.LC102
 4459 045e C0F20001 		movt	r1, #:upper16:.LC102
 4460 0462 FFF7FEFF 		bl	strcmp
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 141


 4461 0466 0346     		mov	r3, r0
 964:.\console.c   **** 	if ((strcmp(actual_cmd.action, "deenergize") == 0) ||
 4462              		.loc 1 964 0 discriminator 1
 4463 0468 002B     		cmp	r3, #0
 4464 046a 4BD1     		bne	.L156
 4465              	.L155:
 966:.\console.c   **** 	{
 967:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4466              		.loc 1 967 0
 4467 046c CE4B     		ldr	r3, .L714
 4468 046e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4469 0470 002B     		cmp	r3, #0
 4470 0472 3FD1     		bne	.L157
 968:.\console.c   **** 		{
 969:.\console.c   **** 			printf("Motors DEENERGIZED & Driver Sleeped!\r\n");
 4471              		.loc 1 969 0
 4472 0474 40F20000 		movw	r0, #:lower16:.LC103
 4473 0478 C0F20000 		movt	r0, #:upper16:.LC103
 4474 047c FFF7FEFF 		bl	puts
 970:.\console.c   **** 			machine_state = GOBEE_DEENERGIZED;
 4475              		.loc 1 970 0
 4476 0480 40F20003 		movw	r3, #:lower16:machine_state
 4477 0484 C0F20003 		movt	r3, #:upper16:machine_state
 4478 0488 4FF00602 		mov	r2, #6
 4479 048c 1A70     		strb	r2, [r3, #0]
 971:.\console.c   **** 			
 972:.\console.c   **** 			/* Mapping State Machine Initialization & STOP */
 973:.\console.c   **** 			MappingStateMachineInit();
 4480              		.loc 1 973 0
 4481 048e FFF7FEFF 		bl	MappingStateMachineInit
 974:.\console.c   **** 			
 975:.\console.c   **** 			/* CLU State Machine STOP */
 976:.\console.c   **** 			clu_sm.status = CLUSM_END;
 4482              		.loc 1 976 0
 4483 0492 40F20003 		movw	r3, #:lower16:clu_sm
 4484 0496 C0F20003 		movt	r3, #:upper16:clu_sm
 4485 049a 4FF00C02 		mov	r2, #12
 4486 049e 1A70     		strb	r2, [r3, #0]
 977:.\console.c   **** 			
 978:.\console.c   **** 			/* Movers STOP */
 979:.\console.c   **** 			mover_pan.status = MOVER_ENDED;
 4487              		.loc 1 979 0
 4488 04a0 40F20003 		movw	r3, #:lower16:mover_pan
 4489 04a4 C0F20003 		movt	r3, #:upper16:mover_pan
 4490 04a8 4FF00202 		mov	r2, #2
 4491 04ac 1A70     		strb	r2, [r3, #0]
 980:.\console.c   **** 			mover_pan.steps_to_move = 0;
 4492              		.loc 1 980 0
 4493 04ae 40F20003 		movw	r3, #:lower16:mover_pan
 4494 04b2 C0F20003 		movt	r3, #:upper16:mover_pan
 4495 04b6 4FF00002 		mov	r2, #0
 4496 04ba 1A62     		str	r2, [r3, #32]
 981:.\console.c   **** 			mover_tilt.status = MOVER_ENDED;
 4497              		.loc 1 981 0
 4498 04bc 40F20003 		movw	r3, #:lower16:mover_tilt
 4499 04c0 C0F20003 		movt	r3, #:upper16:mover_tilt
 4500 04c4 4FF00202 		mov	r2, #2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 142


 4501 04c8 1A70     		strb	r2, [r3, #0]
 982:.\console.c   **** 			mover_tilt.steps_to_move = 0;			
 4502              		.loc 1 982 0
 4503 04ca 40F20003 		movw	r3, #:lower16:mover_tilt
 4504 04ce C0F20003 		movt	r3, #:upper16:mover_tilt
 4505 04d2 4FF00002 		mov	r2, #0
 4506 04d6 1A62     		str	r2, [r3, #32]
 983:.\console.c   **** 			
 984:.\console.c   **** 			/* Sleep the Machine*/
 985:.\console.c   **** 			motor_sleep(&pan_axis);
 4507              		.loc 1 985 0
 4508 04d8 40F20000 		movw	r0, #:lower16:pan_axis
 4509 04dc C0F20000 		movt	r0, #:upper16:pan_axis
 4510 04e0 FFF7FEFF 		bl	motor_sleep
 986:.\console.c   **** 			motor_sleep(&tilt_axis);				
 4511              		.loc 1 986 0
 4512 04e4 40F20000 		movw	r0, #:lower16:tilt_axis
 4513 04e8 C0F20000 		movt	r0, #:upper16:tilt_axis
 4514 04ec FFF7FEFF 		bl	motor_sleep
 987:.\console.c   **** 		}
 988:.\console.c   **** 		else
 989:.\console.c   **** 		{
 990:.\console.c   **** 			printf ("*err\n");
 991:.\console.c   **** 		}
 992:.\console.c   **** 	goto exitpars;
 4515              		.loc 1 992 0
 4516 04f0 06F02EBD 		b	.L131
 4517              	.L157:
 990:.\console.c   **** 			printf ("*err\n");
 4518              		.loc 1 990 0
 4519 04f4 40F20000 		movw	r0, #:lower16:.LC85
 4520 04f8 C0F20000 		movt	r0, #:upper16:.LC85
 4521 04fc FFF7FEFF 		bl	puts
 4522              		.loc 1 992 0
 4523 0500 06F026BD 		b	.L131
 4524              	.L156:
 993:.\console.c   **** 	}
 994:.\console.c   **** 	/* END CMD DEENERGIZE */	
 995:.\console.c   **** 
 996:.\console.c   **** 	
 997:.\console.c   **** 	/* CMD ENERGIZE */
 998:.\console.c   **** 	if ((strcmp(actual_cmd.action, "energize") == 0) ||
 4525              		.loc 1 998 0
 4526 0504 40F20000 		movw	r0, #:lower16:actual_cmd
 4527 0508 C0F20000 		movt	r0, #:upper16:actual_cmd
 4528 050c 40F20001 		movw	r1, #:lower16:.LC104
 4529 0510 C0F20001 		movt	r1, #:upper16:.LC104
 4530 0514 FFF7FEFF 		bl	strcmp
 4531 0518 0346     		mov	r3, r0
 4532 051a 002B     		cmp	r3, #0
 4533 051c 0CD0     		beq	.L159
 999:.\console.c   **** 	   (strcmp(actual_cmd.action, "en") == 0))
 4534              		.loc 1 999 0 discriminator 1
 4535 051e 40F20000 		movw	r0, #:lower16:actual_cmd
 4536 0522 C0F20000 		movt	r0, #:upper16:actual_cmd
 4537 0526 40F20001 		movw	r1, #:lower16:.LC105
 4538 052a C0F20001 		movt	r1, #:upper16:.LC105
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 143


 4539 052e FFF7FEFF 		bl	strcmp
 4540 0532 0346     		mov	r3, r0
 998:.\console.c   **** 	if ((strcmp(actual_cmd.action, "energize") == 0) ||
 4541              		.loc 1 998 0 discriminator 1
 4542 0534 002B     		cmp	r3, #0
 4543 0536 3AD1     		bne	.L160
 4544              	.L159:
1000:.\console.c   **** 	{
1001:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 4545              		.loc 1 1001 0
 4546 0538 9B4B     		ldr	r3, .L714
 4547 053a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4548 053c 002B     		cmp	r3, #0
 4549 053e 2ED1     		bne	.L161
1002:.\console.c   **** 		{
1003:.\console.c   **** 			printf("Motors ENERGIZED!\r\n");
 4550              		.loc 1 1003 0
 4551 0540 40F20000 		movw	r0, #:lower16:.LC106
 4552 0544 C0F20000 		movt	r0, #:upper16:.LC106
 4553 0548 FFF7FEFF 		bl	puts
1004:.\console.c   **** //			printf("CLU state machine init!\r\n");
1005:.\console.c   **** //			printf("Mapping state machine start!\r\n");			
1006:.\console.c   **** 			
1007:.\console.c   **** 			motor_init(&pan_axis);						/* Initialize Pan Axis  */
 4554              		.loc 1 1007 0
 4555 054c 40F20000 		movw	r0, #:lower16:pan_axis
 4556 0550 C0F20000 		movt	r0, #:upper16:pan_axis
 4557 0554 FFF7FEFF 		bl	motor_init
1008:.\console.c   **** 			motor_init(&tilt_axis);						/* Initialize Tilt Axis */			
 4558              		.loc 1 1008 0
 4559 0558 40F20000 		movw	r0, #:lower16:tilt_axis
 4560 055c C0F20000 		movt	r0, #:upper16:tilt_axis
 4561 0560 FFF7FEFF 		bl	motor_init
1009:.\console.c   **** 			
1010:.\console.c   **** #if PAN_PSEUDOABS
1011:.\console.c   **** #else
1012:.\console.c   **** 			QuadDec_PAN_Start();						/* Reset PAN Feedback Encoder Counter	*/
 4562              		.loc 1 1012 0
 4563 0564 FFF7FEFF 		bl	QuadDec_PAN_Start
1013:.\console.c   **** 			QuadDec_TILT_Start();						/* Reset TILT Feedback Encoder Counter	*/
 4564              		.loc 1 1013 0
 4565 0568 FFF7FEFF 		bl	QuadDec_TILT_Start
1014:.\console.c   **** #endif
1015:.\console.c   **** 
1016:.\console.c   **** //			/* CLU state machine Init */
1017:.\console.c   **** //			clu_sm_init();
1018:.\console.c   **** //
1019:.\console.c   **** //			/* Mapping State Machine START */
1020:.\console.c   **** //			MappingStateMachineStart();
1021:.\console.c   **** 			
1022:.\console.c   **** 			CyDelay(100);
 4566              		.loc 1 1022 0
 4567 056c 4FF06400 		mov	r0, #100
 4568 0570 FFF7FEFF 		bl	CyDelay
1023:.\console.c   **** 			machine_state = GOBEE_ENERGIZED;			
 4569              		.loc 1 1023 0
 4570 0574 40F20003 		movw	r3, #:lower16:machine_state
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 144


 4571 0578 C0F20003 		movt	r3, #:upper16:machine_state
 4572 057c 4FF00502 		mov	r2, #5
 4573 0580 1A70     		strb	r2, [r3, #0]
1024:.\console.c   **** 			motor_energize(&pan_axis);
 4574              		.loc 1 1024 0
 4575 0582 40F20000 		movw	r0, #:lower16:pan_axis
 4576 0586 C0F20000 		movt	r0, #:upper16:pan_axis
 4577 058a FFF7FEFF 		bl	motor_energize
1025:.\console.c   **** 			motor_energize(&tilt_axis);			
 4578              		.loc 1 1025 0
 4579 058e 40F20000 		movw	r0, #:lower16:tilt_axis
 4580 0592 C0F20000 		movt	r0, #:upper16:tilt_axis
 4581 0596 FFF7FEFF 		bl	motor_energize
1026:.\console.c   **** 		}
1027:.\console.c   **** 		else
1028:.\console.c   **** 		{
1029:.\console.c   **** 			printf ("*err\n");
1030:.\console.c   **** 		}
1031:.\console.c   **** 	goto exitpars;
 4582              		.loc 1 1031 0
 4583 059a 06F0D9BC 		b	.L131
 4584              	.L161:
1029:.\console.c   **** 			printf ("*err\n");
 4585              		.loc 1 1029 0
 4586 059e 40F20000 		movw	r0, #:lower16:.LC85
 4587 05a2 C0F20000 		movt	r0, #:upper16:.LC85
 4588 05a6 FFF7FEFF 		bl	puts
 4589              		.loc 1 1031 0
 4590 05aa 06F0D1BC 		b	.L131
 4591              	.L160:
1032:.\console.c   **** 	}
1033:.\console.c   **** 	/* END CMD ENERGIZE */	
1034:.\console.c   **** 
1035:.\console.c   **** 	
1036:.\console.c   **** 	/* CMD VIRTUAL PAN JOYSTICK */
1037:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyp") == 0) ||
 4592              		.loc 1 1037 0
 4593 05ae 40F20000 		movw	r0, #:lower16:actual_cmd
 4594 05b2 C0F20000 		movt	r0, #:upper16:actual_cmd
 4595 05b6 40F20001 		movw	r1, #:lower16:.LC107
 4596 05ba C0F20001 		movt	r1, #:upper16:.LC107
 4597 05be FFF7FEFF 		bl	strcmp
 4598 05c2 0346     		mov	r3, r0
 4599 05c4 002B     		cmp	r3, #0
 4600 05c6 0DD0     		beq	.L163
1038:.\console.c   **** 		(strcmp(actual_cmd.action, "vjp") == 0))
 4601              		.loc 1 1038 0 discriminator 1
 4602 05c8 40F20000 		movw	r0, #:lower16:actual_cmd
 4603 05cc C0F20000 		movt	r0, #:upper16:actual_cmd
 4604 05d0 40F20001 		movw	r1, #:lower16:.LC108
 4605 05d4 C0F20001 		movt	r1, #:upper16:.LC108
 4606 05d8 FFF7FEFF 		bl	strcmp
 4607 05dc 0346     		mov	r3, r0
1037:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyp") == 0) ||
 4608              		.loc 1 1037 0 discriminator 1
 4609 05de 002B     		cmp	r3, #0
 4610 05e0 40F0BD80 		bne	.L164
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 145


 4611              	.L163:
 4612              	.LBB3:
1039:.\console.c   **** 	{
1040:.\console.c   **** 		float pan_joy_delta = 0;
 4613              		.loc 1 1040 0
 4614 05e4 4FF00003 		mov	r3, #0
 4615 05e8 C7F80C31 		str	r3, [r7, #268]	@ float
1041:.\console.c   **** 		
1042:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 4616              		.loc 1 1042 0
 4617 05ec 4FF00003 		mov	r3, #0
 4618 05f0 87F81231 		strb	r3, [r7, #274]
1043:.\console.c   **** 		while (get_key == 0)						
 4619              		.loc 1 1043 0
 4620 05f4 A5E0     		b	.L165
 4621              	.L172:
1044:.\console.c   **** 		{	
1045:.\console.c   **** 			printf("PAN: enc(t)=%+ld [step]", (int32)pan_axis.mc.slave_enc.position);
 4622              		.loc 1 1045 0
 4623 05f6 40F20003 		movw	r3, #:lower16:pan_axis
 4624 05fa C0F20003 		movt	r3, #:upper16:pan_axis
 4625 05fe 5B6C     		ldr	r3, [r3, #68]
 4626 0600 40F20000 		movw	r0, #:lower16:.LC109
 4627 0604 C0F20000 		movt	r0, #:upper16:.LC109
 4628 0608 1946     		mov	r1, r3
 4629 060a FFF7FEFF 		bl	printf
1046:.\console.c   **** 			printf("   abs_pos(t)=%+ld [step] ", (int32)pan_absolute_sensor.position);	
 4630              		.loc 1 1046 0
 4631 060e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 4632 0612 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 4633 0616 5B68     		ldr	r3, [r3, #4]	@ float
 4634 0618 1846     		mov	r0, r3
 4635 061a FFF7FEFF 		bl	__aeabi_f2iz
 4636 061e 0346     		mov	r3, r0
 4637 0620 40F20000 		movw	r0, #:lower16:.LC110
 4638 0624 C0F20000 		movt	r0, #:upper16:.LC110
 4639 0628 1946     		mov	r1, r3
 4640 062a FFF7FEFF 		bl	printf
1047:.\console.c   **** 			ShowLimits(&pan_axis);
 4641              		.loc 1 1047 0
 4642 062e 40F20000 		movw	r0, #:lower16:pan_axis
 4643 0632 C0F20000 		movt	r0, #:upper16:pan_axis
 4644 0636 FFF7FEFF 		bl	ShowLimits
1048:.\console.c   **** 			printf("   vjoy(t)=%4.0f [step/sec]", (float)pan_joy_delta * SAMPLING_FREQ);
 4645              		.loc 1 1048 0
 4646 063a D7F80C01 		ldr	r0, [r7, #268]	@ float
 4647 063e 4FF40041 		mov	r1, #32768
 4648 0642 C4F2BB41 		movt	r1, 17595
 4649 0646 FFF7FEFF 		bl	__aeabi_fmul
 4650 064a 0346     		mov	r3, r0
 4651 064c 1846     		mov	r0, r3
 4652 064e FFF7FEFF 		bl	__aeabi_f2d
 4653 0652 0246     		mov	r2, r0
 4654 0654 0B46     		mov	r3, r1
 4655 0656 40F20000 		movw	r0, #:lower16:.LC111
 4656 065a C0F20000 		movt	r0, #:upper16:.LC111
 4657 065e FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 146


1049:.\console.c   **** 			printf(" (%4.3f [deg/sec])", (float)(pan_joy_delta * SAMPLING_FREQ) / pan_axis.param.resolution.
 4658              		.loc 1 1049 0
 4659 0662 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4660 0666 4FF40041 		mov	r1, #32768
 4661 066a C4F2BB41 		movt	r1, 17595
 4662 066e FFF7FEFF 		bl	__aeabi_fmul
 4663 0672 0346     		mov	r3, r0
 4664 0674 1A46     		mov	r2, r3
 4665 0676 40F20003 		movw	r3, #:lower16:pan_axis
 4666 067a C0F20003 		movt	r3, #:upper16:pan_axis
 4667 067e DB68     		ldr	r3, [r3, #12]	@ float
 4668 0680 1046     		mov	r0, r2
 4669 0682 1946     		mov	r1, r3
 4670 0684 FFF7FEFF 		bl	__aeabi_fdiv
 4671 0688 0346     		mov	r3, r0
 4672 068a 1846     		mov	r0, r3
 4673 068c FFF7FEFF 		bl	__aeabi_f2d
 4674 0690 0246     		mov	r2, r0
 4675 0692 0B46     		mov	r3, r1
 4676 0694 40F20000 		movw	r0, #:lower16:.LC112
 4677 0698 C0F20000 		movt	r0, #:upper16:.LC112
 4678 069c FFF7FEFF 		bl	printf
1050:.\console.c   **** 			printf("\r\n");
 4679              		.loc 1 1050 0
 4680 06a0 40F20000 		movw	r0, #:lower16:.LC42
 4681 06a4 C0F20000 		movt	r0, #:upper16:.LC42
 4682 06a8 FFF7FEFF 		bl	puts
1051:.\console.c   **** 			
1052:.\console.c   **** 			/* internal one-key getchar */
1053:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 4683              		.loc 1 1053 0
 4684 06ac FFF7FEFF 		bl	UART_USB_GetChar
 4685 06b0 0346     		mov	r3, r0
 4686 06b2 87F81231 		strb	r3, [r7, #274]
1054:.\console.c   **** 			
1055:.\console.c   **** 			if 	((get_key == 'a') || (get_key == 'A'))
 4687              		.loc 1 1055 0
 4688 06b6 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4689 06ba 612B     		cmp	r3, #97
 4690 06bc 03D0     		beq	.L166
 4691              		.loc 1 1055 0 is_stmt 0 discriminator 1
 4692 06be 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4693 06c2 412B     		cmp	r3, #65
 4694 06c4 0DD1     		bne	.L167
 4695              	.L166:
1056:.\console.c   **** 			{	
1057:.\console.c   **** 				pan_joy_delta = pan_joy_delta + VJOYSTICK_SPEED;
 4696              		.loc 1 1057 0 is_stmt 1
 4697 06c6 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4698 06ca 4FF07E51 		mov	r1, #1065353216
 4699 06ce FFF7FEFF 		bl	__aeabi_fadd
 4700 06d2 0346     		mov	r3, r0
 4701 06d4 C7F80C31 		str	r3, [r7, #268]	@ float
1058:.\console.c   **** 				get_key = 0; //stay in while loop
 4702              		.loc 1 1058 0
 4703 06d8 4FF00003 		mov	r3, #0
 4704 06dc 87F81231 		strb	r3, [r7, #274]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 147


 4705 06e0 25E0     		b	.L168
 4706              	.L167:
1059:.\console.c   **** 			}
1060:.\console.c   **** 			else if 	((get_key == 'd') || (get_key == 'D'))
 4707              		.loc 1 1060 0
 4708 06e2 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4709 06e6 642B     		cmp	r3, #100
 4710 06e8 03D0     		beq	.L169
 4711              		.loc 1 1060 0 is_stmt 0 discriminator 1
 4712 06ea 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4713 06ee 442B     		cmp	r3, #68
 4714 06f0 0DD1     		bne	.L170
 4715              	.L169:
1061:.\console.c   **** 			{	
1062:.\console.c   **** 				pan_joy_delta = pan_joy_delta - VJOYSTICK_SPEED;
 4716              		.loc 1 1062 0 is_stmt 1
 4717 06f2 D7F80C01 		ldr	r0, [r7, #268]	@ float
 4718 06f6 4FF07E51 		mov	r1, #1065353216
 4719 06fa FFF7FEFF 		bl	__aeabi_fsub
 4720 06fe 0346     		mov	r3, r0
 4721 0700 C7F80C31 		str	r3, [r7, #268]	@ float
1063:.\console.c   **** 				get_key = 0; //stay in while loop
 4722              		.loc 1 1063 0
 4723 0704 4FF00003 		mov	r3, #0
 4724 0708 87F81231 		strb	r3, [r7, #274]
 4725 070c 0FE0     		b	.L168
 4726              	.L170:
1064:.\console.c   **** 			}
1065:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 4727              		.loc 1 1065 0
 4728 070e 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4729 0712 732B     		cmp	r3, #115
 4730 0714 03D0     		beq	.L171
 4731              		.loc 1 1065 0 is_stmt 0 discriminator 1
 4732 0716 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4733 071a 532B     		cmp	r3, #83
 4734 071c 07D1     		bne	.L168
 4735              	.L171:
1066:.\console.c   **** 			{	
1067:.\console.c   **** 				pan_joy_delta  = 0;
 4736              		.loc 1 1067 0 is_stmt 1
 4737 071e 4FF00003 		mov	r3, #0
 4738 0722 C7F80C31 		str	r3, [r7, #268]	@ float
1068:.\console.c   **** 				get_key = 0; //stay in while loop
 4739              		.loc 1 1068 0
 4740 0726 4FF00003 		mov	r3, #0
 4741 072a 87F81231 		strb	r3, [r7, #274]
 4742              	.L168:
1069:.\console.c   **** 			}
1070:.\console.c   **** 			
1071:.\console.c   **** 			pan_axis.mc.master_joy_sample_delta = (int32)pan_joy_delta;	//Make Pan Virtual Joystick
 4743              		.loc 1 1071 0
 4744 072e D7F80C01 		ldr	r0, [r7, #268]	@ float
 4745 0732 FFF7FEFF 		bl	__aeabi_f2iz
 4746 0736 0246     		mov	r2, r0
 4747 0738 40F20003 		movw	r3, #:lower16:pan_axis
 4748 073c C0F20003 		movt	r3, #:upper16:pan_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 148


 4749 0740 1A64     		str	r2, [r3, #64]
 4750              	.L165:
1043:.\console.c   **** 		while (get_key == 0)						
 4751              		.loc 1 1043 0 discriminator 1
 4752 0742 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4753 0746 002B     		cmp	r3, #0
 4754 0748 3FF455AF 		beq	.L172
1072:.\console.c   **** 		}
1073:.\console.c   **** 
1074:.\console.c   **** 		pan_axis.mc.master_joy_sample_delta = 0;							//stop Pan Virtual Joystick
 4755              		.loc 1 1074 0
 4756 074c 40F20003 		movw	r3, #:lower16:pan_axis
 4757 0750 C0F20003 		movt	r3, #:upper16:pan_axis
 4758 0754 4FF00002 		mov	r2, #0
 4759 0758 1A64     		str	r2, [r3, #64]
1075:.\console.c   **** 	
1076:.\console.c   **** 		goto exitpars;
 4760              		.loc 1 1076 0
 4761 075a 06F0F9BB 		b	.L131
 4762              	.L164:
 4763              	.LBE3:
1077:.\console.c   **** 	}
1078:.\console.c   **** 	/* END CMD VIRTUAL PAN JOYSTICK */
1079:.\console.c   **** 
1080:.\console.c   **** 	
1081:.\console.c   **** 	/* CMD VIRTUAL TILT JOYSTICK */
1082:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyt") == 0) ||
 4764              		.loc 1 1082 0
 4765 075e 40F20000 		movw	r0, #:lower16:actual_cmd
 4766 0762 C0F20000 		movt	r0, #:upper16:actual_cmd
 4767 0766 40F20001 		movw	r1, #:lower16:.LC113
 4768 076a C0F20001 		movt	r1, #:upper16:.LC113
 4769 076e FFF7FEFF 		bl	strcmp
 4770 0772 0346     		mov	r3, r0
 4771 0774 002B     		cmp	r3, #0
 4772 0776 0DD0     		beq	.L173
1083:.\console.c   **** 		(strcmp(actual_cmd.action, "vjt") == 0))
 4773              		.loc 1 1083 0 discriminator 1
 4774 0778 40F20000 		movw	r0, #:lower16:actual_cmd
 4775 077c C0F20000 		movt	r0, #:upper16:actual_cmd
 4776 0780 40F20001 		movw	r1, #:lower16:.LC114
 4777 0784 C0F20001 		movt	r1, #:upper16:.LC114
 4778 0788 FFF7FEFF 		bl	strcmp
 4779 078c 0346     		mov	r3, r0
1082:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoyt") == 0) ||
 4780              		.loc 1 1082 0 discriminator 1
 4781 078e 002B     		cmp	r3, #0
 4782 0790 40F0C880 		bne	.L174
 4783              	.L173:
 4784              	.LBB4:
1084:.\console.c   **** 	{
1085:.\console.c   **** 		float tilt_joy_delta = 0;
 4785              		.loc 1 1085 0
 4786 0794 4FF00003 		mov	r3, #0
 4787 0798 C7F80831 		str	r3, [r7, #264]	@ float
1086:.\console.c   **** 		
1087:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 149


 4788              		.loc 1 1087 0
 4789 079c 4FF00003 		mov	r3, #0
 4790 07a0 87F81231 		strb	r3, [r7, #274]
1088:.\console.c   **** 		while (get_key == 0)						
 4791              		.loc 1 1088 0
 4792 07a4 B0E0     		b	.L175
 4793              	.L715:
 4794 07a6 00BF     		.align	2
 4795              	.L714:
 4796 07a8 0F000000 		.word	actual_cmd+15
 4797              	.L182:
1089:.\console.c   **** 		{	
1090:.\console.c   **** 			printf("TILT: enc(t)=%+ld [step]", (int32)tilt_axis.mc.slave_enc.position);
 4798              		.loc 1 1090 0
 4799 07ac 40F20003 		movw	r3, #:lower16:tilt_axis
 4800 07b0 C0F20003 		movt	r3, #:upper16:tilt_axis
 4801 07b4 5B6C     		ldr	r3, [r3, #68]
 4802 07b6 40F20000 		movw	r0, #:lower16:.LC115
 4803 07ba C0F20000 		movt	r0, #:upper16:.LC115
 4804 07be 1946     		mov	r1, r3
 4805 07c0 FFF7FEFF 		bl	printf
1091:.\console.c   **** 			printf("   abs_pos(t)=%+ld [step] ", (int32)tilt_absolute_sensor.position);	
 4806              		.loc 1 1091 0
 4807 07c4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 4808 07c8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 4809 07cc 5B68     		ldr	r3, [r3, #4]	@ float
 4810 07ce 1846     		mov	r0, r3
 4811 07d0 FFF7FEFF 		bl	__aeabi_f2iz
 4812 07d4 0346     		mov	r3, r0
 4813 07d6 40F20000 		movw	r0, #:lower16:.LC110
 4814 07da C0F20000 		movt	r0, #:upper16:.LC110
 4815 07de 1946     		mov	r1, r3
 4816 07e0 FFF7FEFF 		bl	printf
1092:.\console.c   **** 			ShowLimits(&tilt_axis);
 4817              		.loc 1 1092 0
 4818 07e4 40F20000 		movw	r0, #:lower16:tilt_axis
 4819 07e8 C0F20000 		movt	r0, #:upper16:tilt_axis
 4820 07ec FFF7FEFF 		bl	ShowLimits
1093:.\console.c   **** 			printf("   vjoy(t)=%4.0f [step/sec]", (float)tilt_joy_delta * SAMPLING_FREQ);
 4821              		.loc 1 1093 0
 4822 07f0 D7F80801 		ldr	r0, [r7, #264]	@ float
 4823 07f4 4FF40041 		mov	r1, #32768
 4824 07f8 C4F2BB41 		movt	r1, 17595
 4825 07fc FFF7FEFF 		bl	__aeabi_fmul
 4826 0800 0346     		mov	r3, r0
 4827 0802 1846     		mov	r0, r3
 4828 0804 FFF7FEFF 		bl	__aeabi_f2d
 4829 0808 0246     		mov	r2, r0
 4830 080a 0B46     		mov	r3, r1
 4831 080c 40F20000 		movw	r0, #:lower16:.LC111
 4832 0810 C0F20000 		movt	r0, #:upper16:.LC111
 4833 0814 FFF7FEFF 		bl	printf
1094:.\console.c   **** 			printf(" (%4.3f [deg/sec])", (float)(tilt_joy_delta * SAMPLING_FREQ * 360) / tilt_axis.param.res
 4834              		.loc 1 1094 0
 4835 0818 D7F80801 		ldr	r0, [r7, #264]	@ float
 4836 081c 4FF40041 		mov	r1, #32768
 4837 0820 C4F2BB41 		movt	r1, 17595
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 150


 4838 0824 FFF7FEFF 		bl	__aeabi_fmul
 4839 0828 0346     		mov	r3, r0
 4840 082a 1846     		mov	r0, r3
 4841 082c 4FF00001 		mov	r1, #0
 4842 0830 C4F2B431 		movt	r1, 17332
 4843 0834 FFF7FEFF 		bl	__aeabi_fmul
 4844 0838 0346     		mov	r3, r0
 4845 083a 1A46     		mov	r2, r3
 4846 083c 40F20003 		movw	r3, #:lower16:tilt_axis
 4847 0840 C0F20003 		movt	r3, #:upper16:tilt_axis
 4848 0844 DB68     		ldr	r3, [r3, #12]	@ float
 4849 0846 1046     		mov	r0, r2
 4850 0848 1946     		mov	r1, r3
 4851 084a FFF7FEFF 		bl	__aeabi_fdiv
 4852 084e 0346     		mov	r3, r0
 4853 0850 1846     		mov	r0, r3
 4854 0852 FFF7FEFF 		bl	__aeabi_f2d
 4855 0856 0246     		mov	r2, r0
 4856 0858 0B46     		mov	r3, r1
 4857 085a 40F20000 		movw	r0, #:lower16:.LC112
 4858 085e C0F20000 		movt	r0, #:upper16:.LC112
 4859 0862 FFF7FEFF 		bl	printf
1095:.\console.c   **** 			printf("\r\n");
 4860              		.loc 1 1095 0
 4861 0866 40F20000 		movw	r0, #:lower16:.LC42
 4862 086a C0F20000 		movt	r0, #:upper16:.LC42
 4863 086e FFF7FEFF 		bl	puts
1096:.\console.c   **** 			
1097:.\console.c   **** 			/* internal one-key getchar */
1098:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 4864              		.loc 1 1098 0
 4865 0872 FFF7FEFF 		bl	UART_USB_GetChar
 4866 0876 0346     		mov	r3, r0
 4867 0878 87F81231 		strb	r3, [r7, #274]
1099:.\console.c   **** 			
1100:.\console.c   **** 			if 	((get_key == 'w') || (get_key == 'W'))
 4868              		.loc 1 1100 0
 4869 087c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4870 0880 772B     		cmp	r3, #119
 4871 0882 03D0     		beq	.L176
 4872              		.loc 1 1100 0 is_stmt 0 discriminator 1
 4873 0884 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4874 0888 572B     		cmp	r3, #87
 4875 088a 0DD1     		bne	.L177
 4876              	.L176:
1101:.\console.c   **** 			{	
1102:.\console.c   **** 				tilt_joy_delta = tilt_joy_delta + VJOYSTICK_SPEED;
 4877              		.loc 1 1102 0 is_stmt 1
 4878 088c D7F80801 		ldr	r0, [r7, #264]	@ float
 4879 0890 4FF07E51 		mov	r1, #1065353216
 4880 0894 FFF7FEFF 		bl	__aeabi_fadd
 4881 0898 0346     		mov	r3, r0
 4882 089a C7F80831 		str	r3, [r7, #264]	@ float
1103:.\console.c   **** 				get_key = 0; //stay in while loop
 4883              		.loc 1 1103 0
 4884 089e 4FF00003 		mov	r3, #0
 4885 08a2 87F81231 		strb	r3, [r7, #274]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 151


 4886 08a6 25E0     		b	.L178
 4887              	.L177:
1104:.\console.c   **** 			}
1105:.\console.c   **** 			else if 	((get_key == 'z') || (get_key == 'Z'))
 4888              		.loc 1 1105 0
 4889 08a8 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4890 08ac 7A2B     		cmp	r3, #122
 4891 08ae 03D0     		beq	.L179
 4892              		.loc 1 1105 0 is_stmt 0 discriminator 1
 4893 08b0 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4894 08b4 5A2B     		cmp	r3, #90
 4895 08b6 0DD1     		bne	.L180
 4896              	.L179:
1106:.\console.c   **** 			{	
1107:.\console.c   **** 				tilt_joy_delta = tilt_joy_delta - VJOYSTICK_SPEED;
 4897              		.loc 1 1107 0 is_stmt 1
 4898 08b8 D7F80801 		ldr	r0, [r7, #264]	@ float
 4899 08bc 4FF07E51 		mov	r1, #1065353216
 4900 08c0 FFF7FEFF 		bl	__aeabi_fsub
 4901 08c4 0346     		mov	r3, r0
 4902 08c6 C7F80831 		str	r3, [r7, #264]	@ float
1108:.\console.c   **** 				get_key = 0; //stay in while loop
 4903              		.loc 1 1108 0
 4904 08ca 4FF00003 		mov	r3, #0
 4905 08ce 87F81231 		strb	r3, [r7, #274]
 4906 08d2 0FE0     		b	.L178
 4907              	.L180:
1109:.\console.c   **** 			}
1110:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 4908              		.loc 1 1110 0
 4909 08d4 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4910 08d8 732B     		cmp	r3, #115
 4911 08da 03D0     		beq	.L181
 4912              		.loc 1 1110 0 is_stmt 0 discriminator 1
 4913 08dc 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4914 08e0 532B     		cmp	r3, #83
 4915 08e2 07D1     		bne	.L178
 4916              	.L181:
1111:.\console.c   **** 			{	
1112:.\console.c   **** 				tilt_joy_delta  = 0;
 4917              		.loc 1 1112 0 is_stmt 1
 4918 08e4 4FF00003 		mov	r3, #0
 4919 08e8 C7F80831 		str	r3, [r7, #264]	@ float
1113:.\console.c   **** 				get_key = 0; //stay in while loop
 4920              		.loc 1 1113 0
 4921 08ec 4FF00003 		mov	r3, #0
 4922 08f0 87F81231 		strb	r3, [r7, #274]
 4923              	.L178:
1114:.\console.c   **** 			}
1115:.\console.c   **** 			
1116:.\console.c   **** 			tilt_axis.mc.master_joy_sample_delta = (int32)tilt_joy_delta;	//Make Tilt Virtual Joystick
 4924              		.loc 1 1116 0
 4925 08f4 D7F80801 		ldr	r0, [r7, #264]	@ float
 4926 08f8 FFF7FEFF 		bl	__aeabi_f2iz
 4927 08fc 0246     		mov	r2, r0
 4928 08fe 40F20003 		movw	r3, #:lower16:tilt_axis
 4929 0902 C0F20003 		movt	r3, #:upper16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 152


 4930 0906 1A64     		str	r2, [r3, #64]
 4931              	.L175:
1088:.\console.c   **** 		while (get_key == 0)						
 4932              		.loc 1 1088 0 discriminator 1
 4933 0908 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 4934 090c 002B     		cmp	r3, #0
 4935 090e 3FF44DAF 		beq	.L182
1117:.\console.c   **** 		}
1118:.\console.c   **** 
1119:.\console.c   **** 		tilt_axis.mc.master_joy_sample_delta = 0;							//stop Tilt Virtual Joystick
 4936              		.loc 1 1119 0
 4937 0912 40F20003 		movw	r3, #:lower16:tilt_axis
 4938 0916 C0F20003 		movt	r3, #:upper16:tilt_axis
 4939 091a 4FF00002 		mov	r2, #0
 4940 091e 1A64     		str	r2, [r3, #64]
1120:.\console.c   **** 	
1121:.\console.c   **** 		goto exitpars;
 4941              		.loc 1 1121 0
 4942 0920 06F016BB 		b	.L131
 4943              	.L174:
 4944              	.LBE4:
1122:.\console.c   **** 	}
1123:.\console.c   **** 	/* END CMD VIRTUAL TILT JOYSTICK */
1124:.\console.c   **** 	
1125:.\console.c   **** 	
1126:.\console.c   **** 	/* CMD VIRTUAL PAN + TILT JOYSTICK */
1127:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoy") == 0) ||
 4945              		.loc 1 1127 0
 4946 0924 40F20000 		movw	r0, #:lower16:actual_cmd
 4947 0928 C0F20000 		movt	r0, #:upper16:actual_cmd
 4948 092c 40F20001 		movw	r1, #:lower16:.LC116
 4949 0930 C0F20001 		movt	r1, #:upper16:.LC116
 4950 0934 FFF7FEFF 		bl	strcmp
 4951 0938 0346     		mov	r3, r0
 4952 093a 002B     		cmp	r3, #0
 4953 093c 0DD0     		beq	.L183
1128:.\console.c   **** 		(strcmp(actual_cmd.action, "vj") == 0))
 4954              		.loc 1 1128 0 discriminator 1
 4955 093e 40F20000 		movw	r0, #:lower16:actual_cmd
 4956 0942 C0F20000 		movt	r0, #:upper16:actual_cmd
 4957 0946 40F20001 		movw	r1, #:lower16:.LC117
 4958 094a C0F20001 		movt	r1, #:upper16:.LC117
 4959 094e FFF7FEFF 		bl	strcmp
 4960 0952 0346     		mov	r3, r0
1127:.\console.c   **** 	if ((strcmp(actual_cmd.action, "vjoy") == 0) ||
 4961              		.loc 1 1127 0 discriminator 1
 4962 0954 002B     		cmp	r3, #0
 4963 0956 40F03981 		bne	.L184
 4964              	.L183:
 4965              	.LBB5:
1129:.\console.c   **** 	{
1130:.\console.c   **** 		float pan_joy_delta = 0;		
 4966              		.loc 1 1130 0
 4967 095a 4FF00003 		mov	r3, #0
 4968 095e C7F80431 		str	r3, [r7, #260]	@ float
1131:.\console.c   **** 		float tilt_joy_delta = 0;
 4969              		.loc 1 1131 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 153


 4970 0962 4FF00003 		mov	r3, #0
 4971 0966 C7F80031 		str	r3, [r7, #256]	@ float
1132:.\console.c   **** 		
1133:.\console.c   **** 		get_key = 0;						//clear internal loop getted char
 4972              		.loc 1 1133 0
 4973 096a 4FF00003 		mov	r3, #0
 4974 096e 87F81231 		strb	r3, [r7, #274]
1134:.\console.c   **** 		while (get_key == 0)						
 4975              		.loc 1 1134 0
 4976 0972 16E1     		b	.L185
 4977              	.L204:
1135:.\console.c   **** 		{						
1136:.\console.c   **** 			printf("PAN: ");
 4978              		.loc 1 1136 0
 4979 0974 40F20000 		movw	r0, #:lower16:.LC118
 4980 0978 C0F20000 		movt	r0, #:upper16:.LC118
 4981 097c FFF7FEFF 		bl	printf
1137:.\console.c   **** 			ShowLimits(&pan_axis);
 4982              		.loc 1 1137 0
 4983 0980 40F20000 		movw	r0, #:lower16:pan_axis
 4984 0984 C0F20000 		movt	r0, #:upper16:pan_axis
 4985 0988 FFF7FEFF 		bl	ShowLimits
1138:.\console.c   **** 			printf("vjoy(t)=%4.0f [step/sec]", (float)pan_joy_delta * SAMPLING_FREQ);
 4986              		.loc 1 1138 0
 4987 098c D7F80401 		ldr	r0, [r7, #260]	@ float
 4988 0990 4FF40041 		mov	r1, #32768
 4989 0994 C4F2BB41 		movt	r1, 17595
 4990 0998 FFF7FEFF 		bl	__aeabi_fmul
 4991 099c 0346     		mov	r3, r0
 4992 099e 1846     		mov	r0, r3
 4993 09a0 FFF7FEFF 		bl	__aeabi_f2d
 4994 09a4 0246     		mov	r2, r0
 4995 09a6 0B46     		mov	r3, r1
 4996 09a8 40F20000 		movw	r0, #:lower16:.LC119
 4997 09ac C0F20000 		movt	r0, #:upper16:.LC119
 4998 09b0 FFF7FEFF 		bl	printf
1139:.\console.c   **** 			printf(" (%5.4f [A])", (float)pan_axis.mc.current);	
 4999              		.loc 1 1139 0
 5000 09b4 40F20003 		movw	r3, #:lower16:pan_axis
 5001 09b8 C0F20003 		movt	r3, #:upper16:pan_axis
 5002 09bc 9B6F     		ldr	r3, [r3, #120]	@ float
 5003 09be 1846     		mov	r0, r3
 5004 09c0 FFF7FEFF 		bl	__aeabi_f2d
 5005 09c4 0246     		mov	r2, r0
 5006 09c6 0B46     		mov	r3, r1
 5007 09c8 40F20000 		movw	r0, #:lower16:.LC120
 5008 09cc C0F20000 		movt	r0, #:upper16:.LC120
 5009 09d0 FFF7FEFF 		bl	printf
1140:.\console.c   **** 			
1141:.\console.c   **** 			printf("    TILT: ");
 5010              		.loc 1 1141 0
 5011 09d4 40F20000 		movw	r0, #:lower16:.LC121
 5012 09d8 C0F20000 		movt	r0, #:upper16:.LC121
 5013 09dc FFF7FEFF 		bl	printf
1142:.\console.c   **** 			ShowLimits(&tilt_axis);
 5014              		.loc 1 1142 0
 5015 09e0 40F20000 		movw	r0, #:lower16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 154


 5016 09e4 C0F20000 		movt	r0, #:upper16:tilt_axis
 5017 09e8 FFF7FEFF 		bl	ShowLimits
1143:.\console.c   **** 			printf("vjoy(t)=%4.0f [step/sec]", (float)tilt_joy_delta * SAMPLING_FREQ);
 5018              		.loc 1 1143 0
 5019 09ec D7F80001 		ldr	r0, [r7, #256]	@ float
 5020 09f0 4FF40041 		mov	r1, #32768
 5021 09f4 C4F2BB41 		movt	r1, 17595
 5022 09f8 FFF7FEFF 		bl	__aeabi_fmul
 5023 09fc 0346     		mov	r3, r0
 5024 09fe 1846     		mov	r0, r3
 5025 0a00 FFF7FEFF 		bl	__aeabi_f2d
 5026 0a04 0246     		mov	r2, r0
 5027 0a06 0B46     		mov	r3, r1
 5028 0a08 40F20000 		movw	r0, #:lower16:.LC119
 5029 0a0c C0F20000 		movt	r0, #:upper16:.LC119
 5030 0a10 FFF7FEFF 		bl	printf
1144:.\console.c   **** 			printf(" (%5.4f [A])", (float)tilt_axis.mc.current);			
 5031              		.loc 1 1144 0
 5032 0a14 40F20003 		movw	r3, #:lower16:tilt_axis
 5033 0a18 C0F20003 		movt	r3, #:upper16:tilt_axis
 5034 0a1c 9B6F     		ldr	r3, [r3, #120]	@ float
 5035 0a1e 1846     		mov	r0, r3
 5036 0a20 FFF7FEFF 		bl	__aeabi_f2d
 5037 0a24 0246     		mov	r2, r0
 5038 0a26 0B46     		mov	r3, r1
 5039 0a28 40F20000 		movw	r0, #:lower16:.LC120
 5040 0a2c C0F20000 		movt	r0, #:upper16:.LC120
 5041 0a30 FFF7FEFF 		bl	printf
1145:.\console.c   **** 			printf("\r\n");
 5042              		.loc 1 1145 0
 5043 0a34 40F20000 		movw	r0, #:lower16:.LC42
 5044 0a38 C0F20000 		movt	r0, #:upper16:.LC42
 5045 0a3c FFF7FEFF 		bl	puts
1146:.\console.c   **** 			
1147:.\console.c   **** 			/* internal one-key getchar */
1148:.\console.c   **** 			get_key = UART_USB_GetChar();	/* get the char */
 5046              		.loc 1 1148 0
 5047 0a40 FFF7FEFF 		bl	UART_USB_GetChar
 5048 0a44 0346     		mov	r3, r0
 5049 0a46 87F81231 		strb	r3, [r7, #274]
1149:.\console.c   **** 			
1150:.\console.c   **** 			if 	((get_key == 'a') || (get_key == 'A'))
 5050              		.loc 1 1150 0
 5051 0a4a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5052 0a4e 612B     		cmp	r3, #97
 5053 0a50 03D0     		beq	.L186
 5054              		.loc 1 1150 0 is_stmt 0 discriminator 1
 5055 0a52 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5056 0a56 412B     		cmp	r3, #65
 5057 0a58 18D1     		bne	.L187
 5058              	.L186:
1151:.\console.c   **** 			{	
1152:.\console.c   **** 				//risoluzione encoder = 4096 step/giro
1153:.\console.c   **** 				//1330rpm/V  (a vuoto) --> 9310rpm su 7V --> 155 giri/sec * 4096 step/giro --> 635562 step/sec 
1154:.\console.c   **** 				//però sembrano troppi quindi metto 30 (30*1500=45000)
1155:.\console.c   **** 				if (pan_joy_delta < 100)
 5059              		.loc 1 1155 0 is_stmt 1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 155


 5060 0a5a D7F80401 		ldr	r0, [r7, #260]	@ float
 5061 0a5e 4FF00001 		mov	r1, #0
 5062 0a62 C4F2C821 		movt	r1, 17096
 5063 0a66 FFF7FEFF 		bl	__aeabi_fcmplt
 5064 0a6a 0346     		mov	r3, r0
 5065 0a6c 002B     		cmp	r3, #0
 5066 0a6e 08D0     		beq	.L188
 5067              	.L645:
1156:.\console.c   **** 				{
1157:.\console.c   **** 					pan_joy_delta = pan_joy_delta + VJOYSTICK_SPEED;
 5068              		.loc 1 1157 0
 5069 0a70 D7F80401 		ldr	r0, [r7, #260]	@ float
 5070 0a74 4FF07E51 		mov	r1, #1065353216
 5071 0a78 FFF7FEFF 		bl	__aeabi_fadd
 5072 0a7c 0346     		mov	r3, r0
 5073 0a7e C7F80431 		str	r3, [r7, #260]	@ float
 5074              	.L188:
1158:.\console.c   **** 				}
1159:.\console.c   **** 				get_key = 0; //stay in while loop
 5075              		.loc 1 1159 0
 5076 0a82 4FF00003 		mov	r3, #0
 5077 0a86 87F81231 		strb	r3, [r7, #274]
 5078 0a8a 76E0     		b	.L190
 5079              	.L187:
1160:.\console.c   **** 			}
1161:.\console.c   **** 			else if 	((get_key == 'd') || (get_key == 'D'))
 5080              		.loc 1 1161 0
 5081 0a8c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5082 0a90 642B     		cmp	r3, #100
 5083 0a92 03D0     		beq	.L191
 5084              		.loc 1 1161 0 is_stmt 0 discriminator 1
 5085 0a94 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5086 0a98 442B     		cmp	r3, #68
 5087 0a9a 18D1     		bne	.L192
 5088              	.L191:
1162:.\console.c   **** 			{	
1163:.\console.c   **** 				if (pan_joy_delta > -100)
 5089              		.loc 1 1163 0 is_stmt 1
 5090 0a9c D7F80401 		ldr	r0, [r7, #260]	@ float
 5091 0aa0 4FF00001 		mov	r1, #0
 5092 0aa4 CCF2C821 		movt	r1, 49864
 5093 0aa8 FFF7FEFF 		bl	__aeabi_fcmpgt
 5094 0aac 0346     		mov	r3, r0
 5095 0aae 002B     		cmp	r3, #0
 5096 0ab0 08D0     		beq	.L193
 5097              	.L646:
1164:.\console.c   **** 				{
1165:.\console.c   **** 					pan_joy_delta = pan_joy_delta - VJOYSTICK_SPEED;
 5098              		.loc 1 1165 0
 5099 0ab2 D7F80401 		ldr	r0, [r7, #260]	@ float
 5100 0ab6 4FF07E51 		mov	r1, #1065353216
 5101 0aba FFF7FEFF 		bl	__aeabi_fsub
 5102 0abe 0346     		mov	r3, r0
 5103 0ac0 C7F80431 		str	r3, [r7, #260]	@ float
 5104              	.L193:
1166:.\console.c   **** 				}
1167:.\console.c   **** 				get_key = 0; //stay in while loop
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 156


 5105              		.loc 1 1167 0
 5106 0ac4 4FF00003 		mov	r3, #0
 5107 0ac8 87F81231 		strb	r3, [r7, #274]
 5108 0acc 55E0     		b	.L190
 5109              	.L192:
1168:.\console.c   **** 			}			
1169:.\console.c   **** 			else if 	((get_key == 'w') || (get_key == 'W'))
 5110              		.loc 1 1169 0
 5111 0ace 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5112 0ad2 772B     		cmp	r3, #119
 5113 0ad4 03D0     		beq	.L195
 5114              		.loc 1 1169 0 is_stmt 0 discriminator 1
 5115 0ad6 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5116 0ada 572B     		cmp	r3, #87
 5117 0adc 18D1     		bne	.L196
 5118              	.L195:
1170:.\console.c   **** 			{	
1171:.\console.c   **** 				if (tilt_joy_delta < 100)
 5119              		.loc 1 1171 0 is_stmt 1
 5120 0ade D7F80001 		ldr	r0, [r7, #256]	@ float
 5121 0ae2 4FF00001 		mov	r1, #0
 5122 0ae6 C4F2C821 		movt	r1, 17096
 5123 0aea FFF7FEFF 		bl	__aeabi_fcmplt
 5124 0aee 0346     		mov	r3, r0
 5125 0af0 002B     		cmp	r3, #0
 5126 0af2 08D0     		beq	.L197
 5127              	.L647:
1172:.\console.c   **** 				{				
1173:.\console.c   **** 					tilt_joy_delta = tilt_joy_delta + VJOYSTICK_SPEED;
 5128              		.loc 1 1173 0
 5129 0af4 D7F80001 		ldr	r0, [r7, #256]	@ float
 5130 0af8 4FF07E51 		mov	r1, #1065353216
 5131 0afc FFF7FEFF 		bl	__aeabi_fadd
 5132 0b00 0346     		mov	r3, r0
 5133 0b02 C7F80031 		str	r3, [r7, #256]	@ float
 5134              	.L197:
1174:.\console.c   **** 				}
1175:.\console.c   **** 				get_key = 0; //stay in while loop
 5135              		.loc 1 1175 0
 5136 0b06 4FF00003 		mov	r3, #0
 5137 0b0a 87F81231 		strb	r3, [r7, #274]
 5138 0b0e 34E0     		b	.L190
 5139              	.L196:
1176:.\console.c   **** 			}
1177:.\console.c   **** 			else if 	((get_key == 'z') || (get_key == 'Z'))
 5140              		.loc 1 1177 0
 5141 0b10 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5142 0b14 7A2B     		cmp	r3, #122
 5143 0b16 03D0     		beq	.L199
 5144              		.loc 1 1177 0 is_stmt 0 discriminator 1
 5145 0b18 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5146 0b1c 5A2B     		cmp	r3, #90
 5147 0b1e 18D1     		bne	.L200
 5148              	.L199:
1178:.\console.c   **** 			{	
1179:.\console.c   **** 				if (tilt_joy_delta > -100)
 5149              		.loc 1 1179 0 is_stmt 1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 157


 5150 0b20 D7F80001 		ldr	r0, [r7, #256]	@ float
 5151 0b24 4FF00001 		mov	r1, #0
 5152 0b28 CCF2C821 		movt	r1, 49864
 5153 0b2c FFF7FEFF 		bl	__aeabi_fcmpgt
 5154 0b30 0346     		mov	r3, r0
 5155 0b32 002B     		cmp	r3, #0
 5156 0b34 08D0     		beq	.L201
 5157              	.L648:
1180:.\console.c   **** 				{					
1181:.\console.c   **** 					tilt_joy_delta = tilt_joy_delta - VJOYSTICK_SPEED;
 5158              		.loc 1 1181 0
 5159 0b36 D7F80001 		ldr	r0, [r7, #256]	@ float
 5160 0b3a 4FF07E51 		mov	r1, #1065353216
 5161 0b3e FFF7FEFF 		bl	__aeabi_fsub
 5162 0b42 0346     		mov	r3, r0
 5163 0b44 C7F80031 		str	r3, [r7, #256]	@ float
 5164              	.L201:
1182:.\console.c   **** 				}
1183:.\console.c   **** 				get_key = 0; //stay in while loop
 5165              		.loc 1 1183 0
 5166 0b48 4FF00003 		mov	r3, #0
 5167 0b4c 87F81231 		strb	r3, [r7, #274]
 5168 0b50 13E0     		b	.L190
 5169              	.L200:
1184:.\console.c   **** 			}
1185:.\console.c   **** 			else if 	((get_key == 's') || (get_key == 'S'))
 5170              		.loc 1 1185 0
 5171 0b52 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5172 0b56 732B     		cmp	r3, #115
 5173 0b58 03D0     		beq	.L203
 5174              		.loc 1 1185 0 is_stmt 0 discriminator 1
 5175 0b5a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5176 0b5e 532B     		cmp	r3, #83
 5177 0b60 0BD1     		bne	.L190
 5178              	.L203:
1186:.\console.c   **** 			{	
1187:.\console.c   **** 				pan_joy_delta   = 0;
 5179              		.loc 1 1187 0 is_stmt 1
 5180 0b62 4FF00003 		mov	r3, #0
 5181 0b66 C7F80431 		str	r3, [r7, #260]	@ float
1188:.\console.c   **** 				tilt_joy_delta  = 0;
 5182              		.loc 1 1188 0
 5183 0b6a 4FF00003 		mov	r3, #0
 5184 0b6e C7F80031 		str	r3, [r7, #256]	@ float
1189:.\console.c   **** 				get_key = 0; //stay in while loop
 5185              		.loc 1 1189 0
 5186 0b72 4FF00003 		mov	r3, #0
 5187 0b76 87F81231 		strb	r3, [r7, #274]
 5188              	.L190:
1190:.\console.c   **** 			}
1191:.\console.c   **** 			
1192:.\console.c   **** 			pan_axis.mc.master_joy_sample_delta  = (int32)pan_joy_delta;	//Make Pan  Virtual Joystick			
 5189              		.loc 1 1192 0
 5190 0b7a D7F80401 		ldr	r0, [r7, #260]	@ float
 5191 0b7e FFF7FEFF 		bl	__aeabi_f2iz
 5192 0b82 0246     		mov	r2, r0
 5193 0b84 40F20003 		movw	r3, #:lower16:pan_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 158


 5194 0b88 C0F20003 		movt	r3, #:upper16:pan_axis
 5195 0b8c 1A64     		str	r2, [r3, #64]
1193:.\console.c   **** 			tilt_axis.mc.master_joy_sample_delta = (int32)tilt_joy_delta;	//Make Tilt Virtual Joystick
 5196              		.loc 1 1193 0
 5197 0b8e D7F80001 		ldr	r0, [r7, #256]	@ float
 5198 0b92 FFF7FEFF 		bl	__aeabi_f2iz
 5199 0b96 0246     		mov	r2, r0
 5200 0b98 40F20003 		movw	r3, #:lower16:tilt_axis
 5201 0b9c C0F20003 		movt	r3, #:upper16:tilt_axis
 5202 0ba0 1A64     		str	r2, [r3, #64]
 5203              	.L185:
1134:.\console.c   **** 		while (get_key == 0)						
 5204              		.loc 1 1134 0 discriminator 1
 5205 0ba2 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 5206 0ba6 002B     		cmp	r3, #0
 5207 0ba8 3FF4E4AE 		beq	.L204
1194:.\console.c   **** 		}
1195:.\console.c   **** 		
1196:.\console.c   **** 		pan_axis.mc.master_joy_sample_delta  = 0;							//stop Pan  Virtual Joystick
 5208              		.loc 1 1196 0
 5209 0bac 40F20003 		movw	r3, #:lower16:pan_axis
 5210 0bb0 C0F20003 		movt	r3, #:upper16:pan_axis
 5211 0bb4 4FF00002 		mov	r2, #0
 5212 0bb8 1A64     		str	r2, [r3, #64]
1197:.\console.c   **** 		tilt_axis.mc.master_joy_sample_delta = 0;							//stop Tilt Virtual Joystick
 5213              		.loc 1 1197 0
 5214 0bba 40F20003 		movw	r3, #:lower16:tilt_axis
 5215 0bbe C0F20003 		movt	r3, #:upper16:tilt_axis
 5216 0bc2 4FF00002 		mov	r2, #0
 5217 0bc6 1A64     		str	r2, [r3, #64]
1198:.\console.c   **** 	
1199:.\console.c   **** 		goto exitpars;
 5218              		.loc 1 1199 0
 5219 0bc8 06F0C2B9 		b	.L131
 5220              	.L184:
 5221              	.LBE5:
1200:.\console.c   **** 	}
1201:.\console.c   **** 	/* END CMD VIRTUAL PAN+TILT JOYSTICK */	
1202:.\console.c   **** 
1203:.\console.c   **** 	
1204:.\console.c   **** 	/* NOP CMD */	
1205:.\console.c   **** 	if (strlen(actual_cmd.action) == 0)
 5222              		.loc 1 1205 0
 5223 0bcc 40F20003 		movw	r3, #:lower16:actual_cmd
 5224 0bd0 C0F20003 		movt	r3, #:upper16:actual_cmd
 5225 0bd4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5226 0bd6 002B     		cmp	r3, #0
 5227 0bd8 06F0AD81 		beq	.L691
 5228              	.L205:
1206:.\console.c   **** 	{
1207:.\console.c   **** 	goto exitpars;
1208:.\console.c   **** 	}
1209:.\console.c   **** 	/* END NOP CMD */
1210:.\console.c   **** 
1211:.\console.c   **** 	
1212:.\console.c   **** 	/* CMD 'VERSION' (alias V) */	
1213:.\console.c   **** 	if (((strcmp(actual_cmd.action, "v") == 0)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 159


 5229              		.loc 1 1213 0
 5230 0bdc 40F20000 		movw	r0, #:lower16:actual_cmd
 5231 0be0 C0F20000 		movt	r0, #:upper16:actual_cmd
 5232 0be4 40F20001 		movw	r1, #:lower16:.LC122
 5233 0be8 C0F20001 		movt	r1, #:upper16:.LC122
 5234 0bec FFF7FEFF 		bl	strcmp
 5235 0bf0 0346     		mov	r3, r0
 5236 0bf2 002B     		cmp	r3, #0
 5237 0bf4 0CD0     		beq	.L206
1214:.\console.c   **** 		|| (strcmp(actual_cmd.action, "version") == 0)))
 5238              		.loc 1 1214 0
 5239 0bf6 40F20000 		movw	r0, #:lower16:actual_cmd
 5240 0bfa C0F20000 		movt	r0, #:upper16:actual_cmd
 5241 0bfe 40F20001 		movw	r1, #:lower16:.LC123
 5242 0c02 C0F20001 		movt	r1, #:upper16:.LC123
 5243 0c06 FFF7FEFF 		bl	strcmp
 5244 0c0a 0346     		mov	r3, r0
 5245 0c0c 002B     		cmp	r3, #0
 5246 0c0e 31D1     		bne	.L207
 5247              	.L206:
1215:.\console.c   **** 	{
1216:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 5248              		.loc 1 1216 0
 5249 0c10 B84B     		ldr	r3, .L716
 5250 0c12 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5251 0c14 002B     		cmp	r3, #0
 5252 0c16 25D1     		bne	.L208
1217:.\console.c   **** 		{
1218:.\console.c   **** 			printf(STR_FW_VERS);
 5253              		.loc 1 1218 0
 5254 0c18 40F20000 		movw	r0, #:lower16:.LC124
 5255 0c1c C0F20000 		movt	r0, #:upper16:.LC124
 5256 0c20 FFF7FEFF 		bl	puts
1219:.\console.c   **** 			printf(STR_COPY);
 5257              		.loc 1 1219 0
 5258 0c24 40F20000 		movw	r0, #:lower16:.LC125
 5259 0c28 C0F20000 		movt	r0, #:upper16:.LC125
 5260 0c2c FFF7FEFF 		bl	puts
1220:.\console.c   **** 			printf(STR_AUTHOR1);
 5261              		.loc 1 1220 0
 5262 0c30 40F20000 		movw	r0, #:lower16:.LC126
 5263 0c34 C0F20000 		movt	r0, #:upper16:.LC126
 5264 0c38 FFF7FEFF 		bl	puts
1221:.\console.c   **** 			printf(STR_AUTHOR2);
 5265              		.loc 1 1221 0
 5266 0c3c 40F20000 		movw	r0, #:lower16:.LC127
 5267 0c40 C0F20000 		movt	r0, #:upper16:.LC127
 5268 0c44 FFF7FEFF 		bl	puts
1222:.\console.c   **** 			printf(STR_AUTHOR3);
 5269              		.loc 1 1222 0
 5270 0c48 40F20000 		movw	r0, #:lower16:.LC128
 5271 0c4c C0F20000 		movt	r0, #:upper16:.LC128
 5272 0c50 FFF7FEFF 		bl	puts
1223:.\console.c   **** 			printf(STR_AUTHOR4);			
 5273              		.loc 1 1223 0
 5274 0c54 40F20000 		movw	r0, #:lower16:.LC129
 5275 0c58 C0F20000 		movt	r0, #:upper16:.LC129
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 160


 5276 0c5c FFF7FEFF 		bl	puts
1224:.\console.c   **** 		}
1225:.\console.c   **** 		else
1226:.\console.c   **** 		{
1227:.\console.c   **** 			printf(STR_ERROR1);
1228:.\console.c   **** 		}
1229:.\console.c   **** 	goto exitpars;
 5277              		.loc 1 1229 0
 5278 0c60 06F076B9 		b	.L131
 5279              	.L208:
1227:.\console.c   **** 			printf(STR_ERROR1);
 5280              		.loc 1 1227 0
 5281 0c64 40F20000 		movw	r0, #:lower16:.LC82
 5282 0c68 C0F20000 		movt	r0, #:upper16:.LC82
 5283 0c6c FFF7FEFF 		bl	printf
 5284              		.loc 1 1229 0
 5285 0c70 06F06EB9 		b	.L131
 5286              	.L207:
1230:.\console.c   **** 	}
1231:.\console.c   **** 	/* END CMD VERSION */ 
1232:.\console.c   **** 
1233:.\console.c   **** 
1234:.\console.c   **** 	/* CMD 'PROMPT' */	
1235:.\console.c   **** 	if (strcmp(actual_cmd.action, "prompt") == 0)
 5287              		.loc 1 1235 0
 5288 0c74 40F20000 		movw	r0, #:lower16:actual_cmd
 5289 0c78 C0F20000 		movt	r0, #:upper16:actual_cmd
 5290 0c7c 40F20001 		movw	r1, #:lower16:.LC130
 5291 0c80 C0F20001 		movt	r1, #:upper16:.LC130
 5292 0c84 FFF7FEFF 		bl	strcmp
 5293 0c88 0346     		mov	r3, r0
 5294 0c8a 002B     		cmp	r3, #0
 5295 0c8c 2BD1     		bne	.L210
1236:.\console.c   **** 	{
1237:.\console.c   **** 		if (strlen(actual_cmd.parameter) == 0)
 5296              		.loc 1 1237 0
 5297 0c8e 994B     		ldr	r3, .L716
 5298 0c90 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5299 0c92 002B     		cmp	r3, #0
 5300 0c94 1FD1     		bne	.L211
1238:.\console.c   **** 		{
1239:.\console.c   **** 			printf(STR_PROMPT0);
 5301              		.loc 1 1239 0
 5302 0c96 40F20000 		movw	r0, #:lower16:.LC131
 5303 0c9a C0F20000 		movt	r0, #:upper16:.LC131
 5304 0c9e FFF7FEFF 		bl	puts
1240:.\console.c   **** 			printf(STR_PROMPT1);
 5305              		.loc 1 1240 0
 5306 0ca2 40F20000 		movw	r0, #:lower16:.LC132
 5307 0ca6 C0F20000 		movt	r0, #:upper16:.LC132
 5308 0caa FFF7FEFF 		bl	puts
1241:.\console.c   **** 			printf(STR_PROMPT2);
 5309              		.loc 1 1241 0
 5310 0cae 40F20000 		movw	r0, #:lower16:.LC133
 5311 0cb2 C0F20000 		movt	r0, #:upper16:.LC133
 5312 0cb6 FFF7FEFF 		bl	puts
1242:.\console.c   **** 			printf(STR_PROMPT3);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 161


 5313              		.loc 1 1242 0
 5314 0cba 40F20000 		movw	r0, #:lower16:.LC134
 5315 0cbe C0F20000 		movt	r0, #:upper16:.LC134
 5316 0cc2 FFF7FEFF 		bl	puts
1243:.\console.c   **** 			printf(STR_PROMPT4);			
 5317              		.loc 1 1243 0
 5318 0cc6 40F20000 		movw	r0, #:lower16:.LC135
 5319 0cca C0F20000 		movt	r0, #:upper16:.LC135
 5320 0cce FFF7FEFF 		bl	puts
1244:.\console.c   **** 		}
1245:.\console.c   **** 		else
1246:.\console.c   **** 		{
1247:.\console.c   **** 			printf(STR_ERROR1);
1248:.\console.c   **** 		}
1249:.\console.c   **** 	goto exitpars;
 5321              		.loc 1 1249 0
 5322 0cd2 06F03DB9 		b	.L131
 5323              	.L211:
1247:.\console.c   **** 			printf(STR_ERROR1);
 5324              		.loc 1 1247 0
 5325 0cd6 40F20000 		movw	r0, #:lower16:.LC82
 5326 0cda C0F20000 		movt	r0, #:upper16:.LC82
 5327 0cde FFF7FEFF 		bl	printf
 5328              		.loc 1 1249 0
 5329 0ce2 06F035B9 		b	.L131
 5330              	.L210:
1250:.\console.c   **** 	}
1251:.\console.c   **** 	/* END CMD PROMPT */ 
1252:.\console.c   **** 
1253:.\console.c   **** 		
1254:.\console.c   **** 	
1255:.\console.c   **** 		/* CMD 'HELP' (alias ?) */
1256:.\console.c   **** 		if ((strcmp(actual_cmd.action, "?") == 0)
 5331              		.loc 1 1256 0
 5332 0ce6 40F20000 		movw	r0, #:lower16:actual_cmd
 5333 0cea C0F20000 		movt	r0, #:upper16:actual_cmd
 5334 0cee 40F20001 		movw	r1, #:lower16:.LC136
 5335 0cf2 C0F20001 		movt	r1, #:upper16:.LC136
 5336 0cf6 FFF7FEFF 		bl	strcmp
 5337 0cfa 0346     		mov	r3, r0
 5338 0cfc 002B     		cmp	r3, #0
 5339 0cfe 1AD0     		beq	.L213
1257:.\console.c   **** 			||(strcmp(actual_cmd.action, "h") == 0)
 5340              		.loc 1 1257 0
 5341 0d00 40F20000 		movw	r0, #:lower16:actual_cmd
 5342 0d04 C0F20000 		movt	r0, #:upper16:actual_cmd
 5343 0d08 40F20001 		movw	r1, #:lower16:.LC137
 5344 0d0c C0F20001 		movt	r1, #:upper16:.LC137
 5345 0d10 FFF7FEFF 		bl	strcmp
 5346 0d14 0346     		mov	r3, r0
 5347 0d16 002B     		cmp	r3, #0
 5348 0d18 0DD0     		beq	.L213
1258:.\console.c   **** 			||(strcmp(actual_cmd.action, "help") == 0))
 5349              		.loc 1 1258 0
 5350 0d1a 40F20000 		movw	r0, #:lower16:actual_cmd
 5351 0d1e C0F20000 		movt	r0, #:upper16:actual_cmd
 5352 0d22 40F20001 		movw	r1, #:lower16:.LC138
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 162


 5353 0d26 C0F20001 		movt	r1, #:upper16:.LC138
 5354 0d2a FFF7FEFF 		bl	strcmp
 5355 0d2e 0346     		mov	r3, r0
 5356 0d30 002B     		cmp	r3, #0
 5357 0d32 40F07F84 		bne	.L214
 5358              	.L213:
1259:.\console.c   **** 		{
1260:.\console.c   **** 			if (strlen(actual_cmd.parameter) == 0)
 5359              		.loc 1 1260 0
 5360 0d36 6F4B     		ldr	r3, .L716
 5361 0d38 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5362 0d3a 002B     		cmp	r3, #0
 5363 0d3c 40F0DC80 		bne	.L215
1261:.\console.c   **** 			{
1262:.\console.c   **** 				// HELP "standard" command list
1263:.\console.c   **** 				printf(STR_HELP_PRES1);
 5364              		.loc 1 1263 0
 5365 0d40 40F20000 		movw	r0, #:lower16:.LC139
 5366 0d44 C0F20000 		movt	r0, #:upper16:.LC139
 5367 0d48 FFF7FEFF 		bl	puts
1264:.\console.c   **** 				printf(STR_HELP_PRES4);
 5368              		.loc 1 1264 0
 5369 0d4c 40F20000 		movw	r0, #:lower16:.LC140
 5370 0d50 C0F20000 		movt	r0, #:upper16:.LC140
 5371 0d54 FFF7FEFF 		bl	puts
1265:.\console.c   **** 				printf(STR_HELP_SHOW1);
 5372              		.loc 1 1265 0
 5373 0d58 40F20000 		movw	r0, #:lower16:.LC141
 5374 0d5c C0F20000 		movt	r0, #:upper16:.LC141
 5375 0d60 FFF7FEFF 		bl	puts
1266:.\console.c   **** 				printf(STR_HELP_SETT1);
 5376              		.loc 1 1266 0
 5377 0d64 40F20000 		movw	r0, #:lower16:.LC142
 5378 0d68 C0F20000 		movt	r0, #:upper16:.LC142
 5379 0d6c FFF7FEFF 		bl	puts
1267:.\console.c   **** 				printf(STR_HELP_PROM1);
 5380              		.loc 1 1267 0
 5381 0d70 40F20000 		movw	r0, #:lower16:.LC143
 5382 0d74 C0F20000 		movt	r0, #:upper16:.LC143
 5383 0d78 FFF7FEFF 		bl	puts
1268:.\console.c   **** 				printf(STR_HELP_BOOT1);				
 5384              		.loc 1 1268 0
 5385 0d7c 40F20000 		movw	r0, #:lower16:.LC144
 5386 0d80 C0F20000 		movt	r0, #:upper16:.LC144
 5387 0d84 FFF7FEFF 		bl	puts
1269:.\console.c   **** 				printf(STR_HELP_VERS1);
 5388              		.loc 1 1269 0
 5389 0d88 40F20000 		movw	r0, #:lower16:.LC145
 5390 0d8c C0F20000 		movt	r0, #:upper16:.LC145
 5391 0d90 FFF7FEFF 		bl	puts
1270:.\console.c   **** 				printf(STR_HELP_HELP0);				
 5392              		.loc 1 1270 0
 5393 0d94 40F20000 		movw	r0, #:lower16:.LC146
 5394 0d98 C0F20000 		movt	r0, #:upper16:.LC146
 5395 0d9c FFF7FEFF 		bl	puts
1271:.\console.c   **** 				printf(STR_HELP_HELP1);						
 5396              		.loc 1 1271 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 163


 5397 0da0 40F20000 		movw	r0, #:lower16:.LC147
 5398 0da4 C0F20000 		movt	r0, #:upper16:.LC147
 5399 0da8 FFF7FEFF 		bl	puts
1272:.\console.c   **** 				printf(STR_HELP_PRES2);
 5400              		.loc 1 1272 0
 5401 0dac 40F20000 		movw	r0, #:lower16:.LC148
 5402 0db0 C0F20000 		movt	r0, #:upper16:.LC148
 5403 0db4 FFF7FEFF 		bl	puts
1273:.\console.c   **** 				printf("\r\n");		
 5404              		.loc 1 1273 0
 5405 0db8 40F20000 		movw	r0, #:lower16:.LC42
 5406 0dbc C0F20000 		movt	r0, #:upper16:.LC42
 5407 0dc0 FFF7FEFF 		bl	puts
1274:.\console.c   **** 				
1275:.\console.c   **** 				/* Motor Control Command List */
1276:.\console.c   **** 				printf(STR_HELP_PRES5);
 5408              		.loc 1 1276 0
 5409 0dc4 40F20000 		movw	r0, #:lower16:.LC149
 5410 0dc8 C0F20000 		movt	r0, #:upper16:.LC149
 5411 0dcc FFF7FEFF 		bl	puts
1277:.\console.c   **** 				printf(STR_HELP_PRES6);
 5412              		.loc 1 1277 0
 5413 0dd0 40F20000 		movw	r0, #:lower16:.LC150
 5414 0dd4 C0F20000 		movt	r0, #:upper16:.LC150
 5415 0dd8 FFF7FEFF 		bl	puts
1278:.\console.c   **** 				printf(STR_HELP_ENERG);
 5416              		.loc 1 1278 0
 5417 0ddc 40F20000 		movw	r0, #:lower16:.LC151
 5418 0de0 C0F20000 		movt	r0, #:upper16:.LC151
 5419 0de4 FFF7FEFF 		bl	puts
1279:.\console.c   **** 				printf(STR_HELP_DEENE);				
 5420              		.loc 1 1279 0
 5421 0de8 40F20000 		movw	r0, #:lower16:.LC152
 5422 0dec C0F20000 		movt	r0, #:upper16:.LC152
 5423 0df0 FFF7FEFF 		bl	puts
1280:.\console.c   **** 				printf("\r\n");	
 5424              		.loc 1 1280 0
 5425 0df4 40F20000 		movw	r0, #:lower16:.LC42
 5426 0df8 C0F20000 		movt	r0, #:upper16:.LC42
 5427 0dfc FFF7FEFF 		bl	puts
1281:.\console.c   **** 
1282:.\console.c   **** 				/* Mover Command List		 */
1283:.\console.c   **** 				printf(STR_HELP_MOV01);
 5428              		.loc 1 1283 0
 5429 0e00 40F20000 		movw	r0, #:lower16:.LC153
 5430 0e04 C0F20000 		movt	r0, #:upper16:.LC153
 5431 0e08 FFF7FEFF 		bl	puts
1284:.\console.c   **** 				printf(STR_HELP_MOV02);
 5432              		.loc 1 1284 0
 5433 0e0c 40F20000 		movw	r0, #:lower16:.LC150
 5434 0e10 C0F20000 		movt	r0, #:upper16:.LC150
 5435 0e14 FFF7FEFF 		bl	puts
1285:.\console.c   **** 				printf(STR_HELP_MOV03);
 5436              		.loc 1 1285 0
 5437 0e18 40F20000 		movw	r0, #:lower16:.LC154
 5438 0e1c C0F20000 		movt	r0, #:upper16:.LC154
 5439 0e20 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 164


1286:.\console.c   **** 				printf(STR_HELP_MOV04);
 5440              		.loc 1 1286 0
 5441 0e24 40F20000 		movw	r0, #:lower16:.LC155
 5442 0e28 C0F20000 		movt	r0, #:upper16:.LC155
 5443 0e2c FFF7FEFF 		bl	puts
1287:.\console.c   **** 				printf(STR_HELP_MOV05);				
 5444              		.loc 1 1287 0
 5445 0e30 40F20000 		movw	r0, #:lower16:.LC156
 5446 0e34 C0F20000 		movt	r0, #:upper16:.LC156
 5447 0e38 FFF7FEFF 		bl	puts
1288:.\console.c   **** 				printf("\r\n");					
 5448              		.loc 1 1288 0
 5449 0e3c 40F20000 		movw	r0, #:lower16:.LC42
 5450 0e40 C0F20000 		movt	r0, #:upper16:.LC42
 5451 0e44 FFF7FEFF 		bl	puts
1289:.\console.c   **** 				
1290:.\console.c   **** 				/* System Test Command List  */
1291:.\console.c   **** 				printf(STR_HELP_PRES7);
 5452              		.loc 1 1291 0
 5453 0e48 40F20000 		movw	r0, #:lower16:.LC157
 5454 0e4c C0F20000 		movt	r0, #:upper16:.LC157
 5455 0e50 FFF7FEFF 		bl	puts
1292:.\console.c   **** 				printf(STR_HELP_PRES8);	
 5456              		.loc 1 1292 0
 5457 0e54 40F20000 		movw	r0, #:lower16:.LC150
 5458 0e58 C0F20000 		movt	r0, #:upper16:.LC150
 5459 0e5c FFF7FEFF 		bl	puts
1293:.\console.c   **** 				printf(STR_HELP_TBUZZ);	
 5460              		.loc 1 1293 0
 5461 0e60 40F20000 		movw	r0, #:lower16:.LC158
 5462 0e64 C0F20000 		movt	r0, #:upper16:.LC158
 5463 0e68 FFF7FEFF 		bl	puts
1294:.\console.c   **** 				printf(STR_HELP_TLORA);
 5464              		.loc 1 1294 0
 5465 0e6c 40F20000 		movw	r0, #:lower16:.LC159
 5466 0e70 C0F20000 		movt	r0, #:upper16:.LC159
 5467 0e74 FFF7FEFF 		bl	puts
1295:.\console.c   **** #if ITG_3701_ENABLED				
1296:.\console.c   **** 				printf(STR_HELP_TINV);
1297:.\console.c   **** #endif
1298:.\console.c   **** 				printf(STR_HELP_STSM);
 5468              		.loc 1 1298 0
 5469 0e78 40F20000 		movw	r0, #:lower16:.LC160
 5470 0e7c C0F20000 		movt	r0, #:upper16:.LC160
 5471 0e80 FFF7FEFF 		bl	puts
1299:.\console.c   **** 				printf(STR_HELP_DMAP);
 5472              		.loc 1 1299 0
 5473 0e84 40F20000 		movw	r0, #:lower16:.LC161
 5474 0e88 C0F20000 		movt	r0, #:upper16:.LC161
 5475 0e8c FFF7FEFF 		bl	puts
1300:.\console.c   **** 				printf(STR_HELP_DMAT);
 5476              		.loc 1 1300 0
 5477 0e90 40F20000 		movw	r0, #:lower16:.LC162
 5478 0e94 C0F20000 		movt	r0, #:upper16:.LC162
 5479 0e98 FFF7FEFF 		bl	puts
1301:.\console.c   **** 				printf(STR_HELP_DMPT);				
 5480              		.loc 1 1301 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 165


 5481 0e9c 40F20000 		movw	r0, #:lower16:.LC163
 5482 0ea0 C0F20000 		movt	r0, #:upper16:.LC163
 5483 0ea4 FFF7FEFF 		bl	puts
1302:.\console.c   **** 				printf("\r\n");	
 5484              		.loc 1 1302 0
 5485 0ea8 40F20000 		movw	r0, #:lower16:.LC42
 5486 0eac C0F20000 		movt	r0, #:upper16:.LC42
 5487 0eb0 FFF7FEFF 		bl	puts
1303:.\console.c   **** 				
1304:.\console.c   **** 				/* Mean Values & Statistics Measurments Command List */
1305:.\console.c   **** 				printf(STR_HELP_PRES9);
 5488              		.loc 1 1305 0
 5489 0eb4 40F20000 		movw	r0, #:lower16:.LC164
 5490 0eb8 C0F20000 		movt	r0, #:upper16:.LC164
 5491 0ebc FFF7FEFF 		bl	puts
1306:.\console.c   **** 				printf(STR_HELP_PRESA);
 5492              		.loc 1 1306 0
 5493 0ec0 40F20000 		movw	r0, #:lower16:.LC150
 5494 0ec4 C0F20000 		movt	r0, #:upper16:.LC150
 5495 0ec8 FFF7FEFF 		bl	puts
1307:.\console.c   **** 				printf(STR_HELP_AGSTA);
 5496              		.loc 1 1307 0
 5497 0ecc 40F20000 		movw	r0, #:lower16:.LC165
 5498 0ed0 C0F20000 		movt	r0, #:upper16:.LC165
 5499 0ed4 FFF7FEFF 		bl	puts
1308:.\console.c   **** 				printf(STR_HELP_AGSTO);				
 5500              		.loc 1 1308 0
 5501 0ed8 40F20000 		movw	r0, #:lower16:.LC166
 5502 0edc C0F20000 		movt	r0, #:upper16:.LC166
 5503 0ee0 FFF7FEFF 		bl	puts
1309:.\console.c   **** 				printf("\r\n");				
 5504              		.loc 1 1309 0
 5505 0ee4 40F20000 		movw	r0, #:lower16:.LC42
 5506 0ee8 C0F20000 		movt	r0, #:upper16:.LC42
 5507 0eec FFF7FEFF 		bl	puts
1310:.\console.c   **** 				
1311:.\console.c   **** //				/* DAS Command List */
1312:.\console.c   **** //				printf(STR_HELP_DAS01);
1313:.\console.c   **** //				printf(STR_HELP_DAS02);
1314:.\console.c   **** //				printf(STR_HELP_DAS03);				
1315:.\console.c   **** //				printf(STR_HELP_DAS04);
1316:.\console.c   **** //				printf(STR_HELP_DAS05);
1317:.\console.c   **** //				printf(STR_HELP_DAS06);
1318:.\console.c   **** //				printf(STR_HELP_DAS07);
1319:.\console.c   **** //				printf(STR_HELP_DAS08);
1320:.\console.c   **** //				printf(STR_HELP_DAS09);
1321:.\console.c   **** //				printf(STR_HELP_DAS0A);				
1322:.\console.c   **** 			}
1323:.\console.c   **** 			else
1324:.\console.c   **** 			{
1325:.\console.c   **** 				// SET command details
1326:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "set") == 0)
1327:.\console.c   **** 				{
1328:.\console.c   **** 					printf(STR_HELP_SETT1);
1329:.\console.c   **** 					printf(STR_HELP_SYNTX);			
1330:.\console.c   **** 					printf(STR_HELP_SETT2);
1331:.\console.c   **** 					printf(STR_HELP_SETT2T);					
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 166


1332:.\console.c   **** 					printf(STR_HELP_SETT3);
1333:.\console.c   **** 					printf(STR_HELP_SETT3T);					
1334:.\console.c   **** 					printf(STR_HELP_SETT4);
1335:.\console.c   **** 					printf(STR_HELP_SETT4T);					
1336:.\console.c   **** 					printf(STR_HELP_SETT5);
1337:.\console.c   **** 					printf(STR_HELP_SETT5T);					
1338:.\console.c   **** 					printf(STR_HELP_SETT6);
1339:.\console.c   **** 					printf(STR_HELP_SETT6T);
1340:.\console.c   **** 					printf(STR_HELP_SETT6U);
1341:.\console.c   **** 					printf(STR_HELP_SETT6V);					
1342:.\console.c   **** 					printf(STR_HELP_SET61);
1343:.\console.c   **** 					printf(STR_HELP_SET62);
1344:.\console.c   **** 					printf(STR_HELP_SET63);
1345:.\console.c   **** 					printf(STR_HELP_SET64);
1346:.\console.c   **** 					printf(STR_HELP_SET65);
1347:.\console.c   **** 					printf(STR_HELP_SET66);	
1348:.\console.c   **** 					printf(STR_HELP_SET67);
1349:.\console.c   **** 					printf(STR_HELP_SET68);
1350:.\console.c   **** 					printf(STR_HELP_SET69);
1351:.\console.c   **** 					printf(STR_HELP_SET70);					
1352:.\console.c   **** 					printf(STR_HELP_SET71);
1353:.\console.c   **** 					printf(STR_HELP_SET72);
1354:.\console.c   **** 					printf(STR_HELP_SET73);					
1355:.\console.c   **** 					
1356:.\console.c   **** 					printf(STR_HELP_SET80);
1357:.\console.c   **** 					printf(STR_HELP_SET81);	
1358:.\console.c   **** 					printf(STR_HELP_SET82);
1359:.\console.c   **** 					printf(STR_HELP_SET83);
1360:.\console.c   **** 					printf(STR_HELP_SET84);
1361:.\console.c   **** 					printf(STR_HELP_SET85);
1362:.\console.c   **** 					printf(STR_HELP_SET86);
1363:.\console.c   **** 					printf(STR_HELP_SET87);					
1364:.\console.c   **** 					printf(STR_HELP_SET88);
1365:.\console.c   **** 					printf(STR_HELP_SET89);		
1366:.\console.c   **** 					
1367:.\console.c   **** 					printf(STR_HELP_SETTC);					
1368:.\console.c   **** 					printf(STR_HELP_SETC1);	
1369:.\console.c   **** 					printf(STR_HELP_SETC2);	
1370:.\console.c   **** 					printf(STR_HELP_SETC3);	
1371:.\console.c   **** 					printf(STR_HELP_SETC4);	
1372:.\console.c   **** 					printf(STR_HELP_SETC5);	
1373:.\console.c   **** 					
1374:.\console.c   **** 					printf(STR_HELP_SETTF);
1375:.\console.c   **** 					printf(STR_HELP_SETTG);
1376:.\console.c   **** 					printf(STR_HELP_SETTH);
1377:.\console.c   **** 					printf(STR_HELP_SETTI);
1378:.\console.c   **** 					printf(STR_HELP_SETI1);					
1379:.\console.c   **** 					printf(STR_HELP_SETTJ);
1380:.\console.c   **** 					printf(STR_HELP_SETTK);
1381:.\console.c   **** 					
1382:.\console.c   **** 					printf("\r\n");		
1383:.\console.c   **** 					printf(STR_HELP_polar); 
1384:.\console.c   **** 					printf(STR_HELP_kpval);
1385:.\console.c   **** 					printf(STR_HELP_kdval);
1386:.\console.c   **** 					printf(STR_HELP_kival);					
1387:.\console.c   **** 					printf(STR_HELP_ksivl);
1388:.\console.c   **** 					printf(STR_HELP_dbval);					
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 167


1389:.\console.c   **** 					printf(STR_HELP_kofvl);	
1390:.\console.c   **** 					printf(STR_HELP_again);
1391:.\console.c   **** 					printf(STR_HELP_astyp);					
1392:.\console.c   **** 					printf(STR_HELP_color);
1393:.\console.c   **** 					printf(STR_HELP_colo1);
1394:.\console.c   **** 					printf(STR_HELP_axis);					
1395:.\console.c   **** 					printf(STR_HELP_avalu);					
1396:.\console.c   **** 					printf(STR_HELP_onoff);
1397:.\console.c   **** 					printf(STR_HELP_mode);
1398:.\console.c   **** 					printf(STR_HELP_qn);
1399:.\console.c   **** 					printf(STR_HELP_qm);
1400:.\console.c   **** 					printf(STR_HELP_dir);					
1401:.\console.c   **** 					printf(STR_HELP_dir1);
1402:.\console.c   **** 					printf(STR_HELP_dir2);					
1403:.\console.c   **** 					
1404:.\console.c   **** 					goto exitpars;
1405:.\console.c   **** 				}
1406:.\console.c   **** 	
1407:.\console.c   **** 	
1408:.\console.c   **** 				// HELP SHOW command details
1409:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "show") == 0)
1410:.\console.c   **** 				{
1411:.\console.c   **** 					printf(STR_HELP_SHOW1);
1412:.\console.c   **** 					printf(STR_HELP_SYNTX);
1413:.\console.c   **** 					printf(STR_HELP_SHOW2);
1414:.\console.c   **** 					printf(STR_HELP_SHO21);					
1415:.\console.c   **** 					printf(STR_HELP_SHOW3);					
1416:.\console.c   **** 					printf(STR_HELP_SHOW4);
1417:.\console.c   **** 					//printf(STR_HELP_SHOW5);						
1418:.\console.c   **** 					printf(STR_HELP_SHOW6);
1419:.\console.c   **** #if IMU_UM7_ENABLED
1420:.\console.c   **** 					printf(STR_HELP_SHW70);					
1421:.\console.c   **** 					printf(STR_HELP_SHW71);					
1422:.\console.c   **** 					printf(STR_HELP_SHW72);
1423:.\console.c   **** #endif					
1424:.\console.c   **** 					printf(STR_HELP_SHW73);
1425:.\console.c   **** 
1426:.\console.c   **** 					printf(STR_HELP_SHOW8);
1427:.\console.c   **** 					printf(STR_HELP_SHOW9);
1428:.\console.c   **** 					printf(STR_HELP_SHW90);					
1429:.\console.c   **** 					printf(STR_HELP_SHW91);
1430:.\console.c   **** 					printf(STR_HELP_SHW92);
1431:.\console.c   **** 					printf(STR_HELP_SHW93);
1432:.\console.c   **** 					printf(STR_HELP_SHW94);
1433:.\console.c   **** 					printf(STR_HELP_SHW95);
1434:.\console.c   **** 					printf(STR_HELP_SHW96);					
1435:.\console.c   **** 					printf(STR_HELP_SHOWA);
1436:.\console.c   **** 					printf(STR_HELP_SHWA1);
1437:.\console.c   **** 					printf(STR_HELP_SHWA2);	
1438:.\console.c   **** 					printf(STR_HELP_SHWA3);
1439:.\console.c   **** 					printf(STR_HELP_SHWA4);	
1440:.\console.c   **** 					printf(STR_HELP_SHWA5);	
1441:.\console.c   **** 					printf(STR_HELP_SHWA6);						
1442:.\console.c   **** 					printf(STR_HELP_SHWA7);						
1443:.\console.c   **** 					printf(STR_HELP_SHOWB);
1444:.\console.c   **** 					printf(STR_HELP_SHOWC);
1445:.\console.c   **** 					printf(STR_HELP_SHOWD);	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 168


1446:.\console.c   **** 					printf(STR_HELP_SHOWE);
1447:.\console.c   **** 					printf(STR_HELP_SHOWF);	
1448:.\console.c   **** 					printf(STR_HELP_SHOF1);
1449:.\console.c   **** 					printf(STR_HELP_SHOF2);
1450:.\console.c   **** 					printf(STR_HELP_SHOF3);					
1451:.\console.c   **** 					printf(STR_HELP_SHOWG);
1452:.\console.c   **** 					printf(STR_HELP_SHOWH);					
1453:.\console.c   **** 					printf(STR_HELP_SHOWZ);
1454:.\console.c   **** 					goto exitpars;
1455:.\console.c   **** 				}
1456:.\console.c   **** 	
1457:.\console.c   **** 				
1458:.\console.c   **** 				// HELP GOTOQ command details
1459:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "q") == 0)
1460:.\console.c   **** 				{					
1461:.\console.c   **** 					//Qtable
1462:.\console.c   **** 					printf(STR_QTAB0);
1463:.\console.c   **** 					printf(STR_QTAB1);
1464:.\console.c   **** 					printf(STR_Q000);
1465:.\console.c   **** 					printf(STR_Q011);					
1466:.\console.c   **** 					printf(STR_Q013);					
1467:.\console.c   **** 					printf(STR_Q014);			
1468:.\console.c   **** 					printf(STR_Q015);					
1469:.\console.c   **** 					printf(STR_Q016);					
1470:.\console.c   **** 					printf(STR_Q017);
1471:.\console.c   **** 					printf(STR_Q021);
1472:.\console.c   **** 					printf(STR_Q031);
1473:.\console.c   **** 					printf(STR_Q033);
1474:.\console.c   **** 					printf(STR_Q034);
1475:.\console.c   **** 					printf(STR_Q040);					
1476:.\console.c   **** 					printf(STR_Q041);					
1477:.\console.c   **** 					printf(STR_Q042);
1478:.\console.c   **** 					printf(STR_Q043);
1479:.\console.c   **** 					printf(STR_Q044);					
1480:.\console.c   **** 					printf(STR_Q051);
1481:.\console.c   **** 					printf(STR_Q052);
1482:.\console.c   **** 					printf(STR_Q053);					
1483:.\console.c   **** 					
1484:.\console.c   **** 					goto exitpars;
1485:.\console.c   **** 				}			
1486:.\console.c   **** 				
1487:.\console.c   **** 				
1488:.\console.c   **** 				// HELP TESTDAC command details
1489:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "testdac") == 0)
1490:.\console.c   **** 				{
1491:.\console.c   **** 					printf(STR_HELP_TDAC1);
1492:.\console.c   **** 					printf(STR_HELP_SYNTX);
1493:.\console.c   **** 					printf(STR_HELP_TDAC2);
1494:.\console.c   **** 					goto exitpars;
1495:.\console.c   **** 				}			
1496:.\console.c   **** 
1497:.\console.c   **** 
1498:.\console.c   **** 				// HELP PROMPT command details
1499:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "prompt") == 0)
1500:.\console.c   **** 				{
1501:.\console.c   **** 					printf(STR_HELP_PROM1);
1502:.\console.c   **** 					printf(STR_HELP_SYNTX);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 169


1503:.\console.c   **** 					printf(STR_HELP_PROM2);
1504:.\console.c   **** 					goto exitpars;
1505:.\console.c   **** 				}			
1506:.\console.c   **** 				
1507:.\console.c   **** 				
1508:.\console.c   **** 				// HELP VERSION command details
1509:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "version") == 0)
1510:.\console.c   **** 				||(strcmp(actual_cmd.parameter, "v") == 0))
1511:.\console.c   **** 				{
1512:.\console.c   **** 					printf(STR_HELP_VERS1);
1513:.\console.c   **** 					printf(STR_HELP_SYNTX);
1514:.\console.c   **** 					printf(STR_HELP_VERS2);
1515:.\console.c   **** 					printf(STR_HELP_VERS3);				
1516:.\console.c   **** 					goto exitpars;
1517:.\console.c   **** 				}
1518:.\console.c   **** 				printf(STR_ERROR3);	/* Bad Parameter(s) */
1519:.\console.c   **** 				goto exitpars;
1520:.\console.c   **** 			}
1521:.\console.c   **** 		goto exitpars;		
 5508              		.loc 1 1521 0
 5509 0ef0 06F02EB8 		b	.L131
 5510              	.L717:
 5511              		.align	2
 5512              	.L716:
 5513 0ef4 0F000000 		.word	actual_cmd+15
 5514              	.L215:
1326:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "set") == 0)
 5515              		.loc 1 1326 0
 5516 0ef8 DB48     		ldr	r0, .L718
 5517 0efa 40F20001 		movw	r1, #:lower16:.LC167
 5518 0efe C0F20001 		movt	r1, #:upper16:.LC167
 5519 0f02 FFF7FEFF 		bl	strcmp
 5520 0f06 0346     		mov	r3, r0
 5521 0f08 002B     		cmp	r3, #0
 5522 0f0a 40F0AF81 		bne	.L216
1328:.\console.c   **** 					printf(STR_HELP_SETT1);
 5523              		.loc 1 1328 0
 5524 0f0e 40F20000 		movw	r0, #:lower16:.LC142
 5525 0f12 C0F20000 		movt	r0, #:upper16:.LC142
 5526 0f16 FFF7FEFF 		bl	puts
1329:.\console.c   **** 					printf(STR_HELP_SYNTX);			
 5527              		.loc 1 1329 0
 5528 0f1a 40F20000 		movw	r0, #:lower16:.LC168
 5529 0f1e C0F20000 		movt	r0, #:upper16:.LC168
 5530 0f22 FFF7FEFF 		bl	puts
1330:.\console.c   **** 					printf(STR_HELP_SETT2);
 5531              		.loc 1 1330 0
 5532 0f26 40F20000 		movw	r0, #:lower16:.LC169
 5533 0f2a C0F20000 		movt	r0, #:upper16:.LC169
 5534 0f2e FFF7FEFF 		bl	puts
1331:.\console.c   **** 					printf(STR_HELP_SETT2T);					
 5535              		.loc 1 1331 0
 5536 0f32 40F20000 		movw	r0, #:lower16:.LC170
 5537 0f36 C0F20000 		movt	r0, #:upper16:.LC170
 5538 0f3a FFF7FEFF 		bl	puts
1332:.\console.c   **** 					printf(STR_HELP_SETT3);
 5539              		.loc 1 1332 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 170


 5540 0f3e 40F20000 		movw	r0, #:lower16:.LC171
 5541 0f42 C0F20000 		movt	r0, #:upper16:.LC171
 5542 0f46 FFF7FEFF 		bl	puts
1333:.\console.c   **** 					printf(STR_HELP_SETT3T);					
 5543              		.loc 1 1333 0
 5544 0f4a 40F20000 		movw	r0, #:lower16:.LC172
 5545 0f4e C0F20000 		movt	r0, #:upper16:.LC172
 5546 0f52 FFF7FEFF 		bl	puts
1334:.\console.c   **** 					printf(STR_HELP_SETT4);
 5547              		.loc 1 1334 0
 5548 0f56 40F20000 		movw	r0, #:lower16:.LC173
 5549 0f5a C0F20000 		movt	r0, #:upper16:.LC173
 5550 0f5e FFF7FEFF 		bl	puts
1335:.\console.c   **** 					printf(STR_HELP_SETT4T);					
 5551              		.loc 1 1335 0
 5552 0f62 40F20000 		movw	r0, #:lower16:.LC174
 5553 0f66 C0F20000 		movt	r0, #:upper16:.LC174
 5554 0f6a FFF7FEFF 		bl	puts
1336:.\console.c   **** 					printf(STR_HELP_SETT5);
 5555              		.loc 1 1336 0
 5556 0f6e 40F20000 		movw	r0, #:lower16:.LC175
 5557 0f72 C0F20000 		movt	r0, #:upper16:.LC175
 5558 0f76 FFF7FEFF 		bl	puts
1337:.\console.c   **** 					printf(STR_HELP_SETT5T);					
 5559              		.loc 1 1337 0
 5560 0f7a 40F20000 		movw	r0, #:lower16:.LC176
 5561 0f7e C0F20000 		movt	r0, #:upper16:.LC176
 5562 0f82 FFF7FEFF 		bl	puts
1338:.\console.c   **** 					printf(STR_HELP_SETT6);
 5563              		.loc 1 1338 0
 5564 0f86 40F20000 		movw	r0, #:lower16:.LC177
 5565 0f8a C0F20000 		movt	r0, #:upper16:.LC177
 5566 0f8e FFF7FEFF 		bl	puts
1339:.\console.c   **** 					printf(STR_HELP_SETT6T);
 5567              		.loc 1 1339 0
 5568 0f92 40F20000 		movw	r0, #:lower16:.LC178
 5569 0f96 C0F20000 		movt	r0, #:upper16:.LC178
 5570 0f9a FFF7FEFF 		bl	puts
1340:.\console.c   **** 					printf(STR_HELP_SETT6U);
 5571              		.loc 1 1340 0
 5572 0f9e 40F20000 		movw	r0, #:lower16:.LC179
 5573 0fa2 C0F20000 		movt	r0, #:upper16:.LC179
 5574 0fa6 FFF7FEFF 		bl	puts
1341:.\console.c   **** 					printf(STR_HELP_SETT6V);					
 5575              		.loc 1 1341 0
 5576 0faa 40F20000 		movw	r0, #:lower16:.LC180
 5577 0fae C0F20000 		movt	r0, #:upper16:.LC180
 5578 0fb2 FFF7FEFF 		bl	puts
1342:.\console.c   **** 					printf(STR_HELP_SET61);
 5579              		.loc 1 1342 0
 5580 0fb6 40F20000 		movw	r0, #:lower16:.LC181
 5581 0fba C0F20000 		movt	r0, #:upper16:.LC181
 5582 0fbe FFF7FEFF 		bl	puts
1343:.\console.c   **** 					printf(STR_HELP_SET62);
 5583              		.loc 1 1343 0
 5584 0fc2 40F20000 		movw	r0, #:lower16:.LC182
 5585 0fc6 C0F20000 		movt	r0, #:upper16:.LC182
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 171


 5586 0fca FFF7FEFF 		bl	puts
1344:.\console.c   **** 					printf(STR_HELP_SET63);
 5587              		.loc 1 1344 0
 5588 0fce 40F20000 		movw	r0, #:lower16:.LC183
 5589 0fd2 C0F20000 		movt	r0, #:upper16:.LC183
 5590 0fd6 FFF7FEFF 		bl	puts
1345:.\console.c   **** 					printf(STR_HELP_SET64);
 5591              		.loc 1 1345 0
 5592 0fda 40F20000 		movw	r0, #:lower16:.LC184
 5593 0fde C0F20000 		movt	r0, #:upper16:.LC184
 5594 0fe2 FFF7FEFF 		bl	puts
1346:.\console.c   **** 					printf(STR_HELP_SET65);
 5595              		.loc 1 1346 0
 5596 0fe6 40F20000 		movw	r0, #:lower16:.LC185
 5597 0fea C0F20000 		movt	r0, #:upper16:.LC185
 5598 0fee FFF7FEFF 		bl	puts
1347:.\console.c   **** 					printf(STR_HELP_SET66);	
 5599              		.loc 1 1347 0
 5600 0ff2 40F20000 		movw	r0, #:lower16:.LC186
 5601 0ff6 C0F20000 		movt	r0, #:upper16:.LC186
 5602 0ffa FFF7FEFF 		bl	puts
1348:.\console.c   **** 					printf(STR_HELP_SET67);
 5603              		.loc 1 1348 0
 5604 0ffe 40F20000 		movw	r0, #:lower16:.LC187
 5605 1002 C0F20000 		movt	r0, #:upper16:.LC187
 5606 1006 FFF7FEFF 		bl	puts
1349:.\console.c   **** 					printf(STR_HELP_SET68);
 5607              		.loc 1 1349 0
 5608 100a 40F20000 		movw	r0, #:lower16:.LC188
 5609 100e C0F20000 		movt	r0, #:upper16:.LC188
 5610 1012 FFF7FEFF 		bl	puts
1350:.\console.c   **** 					printf(STR_HELP_SET69);
 5611              		.loc 1 1350 0
 5612 1016 40F20000 		movw	r0, #:lower16:.LC189
 5613 101a C0F20000 		movt	r0, #:upper16:.LC189
 5614 101e FFF7FEFF 		bl	puts
1351:.\console.c   **** 					printf(STR_HELP_SET70);					
 5615              		.loc 1 1351 0
 5616 1022 40F20000 		movw	r0, #:lower16:.LC190
 5617 1026 C0F20000 		movt	r0, #:upper16:.LC190
 5618 102a FFF7FEFF 		bl	puts
1352:.\console.c   **** 					printf(STR_HELP_SET71);
 5619              		.loc 1 1352 0
 5620 102e 40F20000 		movw	r0, #:lower16:.LC191
 5621 1032 C0F20000 		movt	r0, #:upper16:.LC191
 5622 1036 FFF7FEFF 		bl	puts
1353:.\console.c   **** 					printf(STR_HELP_SET72);
 5623              		.loc 1 1353 0
 5624 103a 40F20000 		movw	r0, #:lower16:.LC192
 5625 103e C0F20000 		movt	r0, #:upper16:.LC192
 5626 1042 FFF7FEFF 		bl	puts
1354:.\console.c   **** 					printf(STR_HELP_SET73);					
 5627              		.loc 1 1354 0
 5628 1046 40F20000 		movw	r0, #:lower16:.LC193
 5629 104a C0F20000 		movt	r0, #:upper16:.LC193
 5630 104e FFF7FEFF 		bl	puts
1356:.\console.c   **** 					printf(STR_HELP_SET80);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 172


 5631              		.loc 1 1356 0
 5632 1052 40F20000 		movw	r0, #:lower16:.LC194
 5633 1056 C0F20000 		movt	r0, #:upper16:.LC194
 5634 105a FFF7FEFF 		bl	puts
1357:.\console.c   **** 					printf(STR_HELP_SET81);	
 5635              		.loc 1 1357 0
 5636 105e 40F20000 		movw	r0, #:lower16:.LC195
 5637 1062 C0F20000 		movt	r0, #:upper16:.LC195
 5638 1066 FFF7FEFF 		bl	puts
1358:.\console.c   **** 					printf(STR_HELP_SET82);
 5639              		.loc 1 1358 0
 5640 106a 40F20000 		movw	r0, #:lower16:.LC196
 5641 106e C0F20000 		movt	r0, #:upper16:.LC196
 5642 1072 FFF7FEFF 		bl	puts
1359:.\console.c   **** 					printf(STR_HELP_SET83);
 5643              		.loc 1 1359 0
 5644 1076 40F20000 		movw	r0, #:lower16:.LC197
 5645 107a C0F20000 		movt	r0, #:upper16:.LC197
 5646 107e FFF7FEFF 		bl	puts
1360:.\console.c   **** 					printf(STR_HELP_SET84);
 5647              		.loc 1 1360 0
 5648 1082 40F20000 		movw	r0, #:lower16:.LC198
 5649 1086 C0F20000 		movt	r0, #:upper16:.LC198
 5650 108a FFF7FEFF 		bl	puts
1361:.\console.c   **** 					printf(STR_HELP_SET85);
 5651              		.loc 1 1361 0
 5652 108e 40F20000 		movw	r0, #:lower16:.LC199
 5653 1092 C0F20000 		movt	r0, #:upper16:.LC199
 5654 1096 FFF7FEFF 		bl	puts
1362:.\console.c   **** 					printf(STR_HELP_SET86);
 5655              		.loc 1 1362 0
 5656 109a 40F20000 		movw	r0, #:lower16:.LC200
 5657 109e C0F20000 		movt	r0, #:upper16:.LC200
 5658 10a2 FFF7FEFF 		bl	puts
1363:.\console.c   **** 					printf(STR_HELP_SET87);					
 5659              		.loc 1 1363 0
 5660 10a6 40F20000 		movw	r0, #:lower16:.LC201
 5661 10aa C0F20000 		movt	r0, #:upper16:.LC201
 5662 10ae FFF7FEFF 		bl	puts
1364:.\console.c   **** 					printf(STR_HELP_SET88);
 5663              		.loc 1 1364 0
 5664 10b2 40F20000 		movw	r0, #:lower16:.LC202
 5665 10b6 C0F20000 		movt	r0, #:upper16:.LC202
 5666 10ba FFF7FEFF 		bl	puts
1365:.\console.c   **** 					printf(STR_HELP_SET89);		
 5667              		.loc 1 1365 0
 5668 10be 40F20000 		movw	r0, #:lower16:.LC203
 5669 10c2 C0F20000 		movt	r0, #:upper16:.LC203
 5670 10c6 FFF7FEFF 		bl	puts
1367:.\console.c   **** 					printf(STR_HELP_SETTC);					
 5671              		.loc 1 1367 0
 5672 10ca 40F20000 		movw	r0, #:lower16:.LC204
 5673 10ce C0F20000 		movt	r0, #:upper16:.LC204
 5674 10d2 FFF7FEFF 		bl	puts
1368:.\console.c   **** 					printf(STR_HELP_SETC1);	
 5675              		.loc 1 1368 0
 5676 10d6 40F20000 		movw	r0, #:lower16:.LC205
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 173


 5677 10da C0F20000 		movt	r0, #:upper16:.LC205
 5678 10de FFF7FEFF 		bl	puts
1369:.\console.c   **** 					printf(STR_HELP_SETC2);	
 5679              		.loc 1 1369 0
 5680 10e2 40F20000 		movw	r0, #:lower16:.LC206
 5681 10e6 C0F20000 		movt	r0, #:upper16:.LC206
 5682 10ea FFF7FEFF 		bl	puts
1370:.\console.c   **** 					printf(STR_HELP_SETC3);	
 5683              		.loc 1 1370 0
 5684 10ee 40F20000 		movw	r0, #:lower16:.LC207
 5685 10f2 C0F20000 		movt	r0, #:upper16:.LC207
 5686 10f6 FFF7FEFF 		bl	puts
1371:.\console.c   **** 					printf(STR_HELP_SETC4);	
 5687              		.loc 1 1371 0
 5688 10fa 40F20000 		movw	r0, #:lower16:.LC208
 5689 10fe C0F20000 		movt	r0, #:upper16:.LC208
 5690 1102 FFF7FEFF 		bl	puts
1372:.\console.c   **** 					printf(STR_HELP_SETC5);	
 5691              		.loc 1 1372 0
 5692 1106 40F20000 		movw	r0, #:lower16:.LC209
 5693 110a C0F20000 		movt	r0, #:upper16:.LC209
 5694 110e FFF7FEFF 		bl	puts
1374:.\console.c   **** 					printf(STR_HELP_SETTF);
 5695              		.loc 1 1374 0
 5696 1112 40F20000 		movw	r0, #:lower16:.LC210
 5697 1116 C0F20000 		movt	r0, #:upper16:.LC210
 5698 111a FFF7FEFF 		bl	puts
1375:.\console.c   **** 					printf(STR_HELP_SETTG);
 5699              		.loc 1 1375 0
 5700 111e 40F20000 		movw	r0, #:lower16:.LC211
 5701 1122 C0F20000 		movt	r0, #:upper16:.LC211
 5702 1126 FFF7FEFF 		bl	puts
1376:.\console.c   **** 					printf(STR_HELP_SETTH);
 5703              		.loc 1 1376 0
 5704 112a 40F20000 		movw	r0, #:lower16:.LC212
 5705 112e C0F20000 		movt	r0, #:upper16:.LC212
 5706 1132 FFF7FEFF 		bl	puts
1377:.\console.c   **** 					printf(STR_HELP_SETTI);
 5707              		.loc 1 1377 0
 5708 1136 40F20000 		movw	r0, #:lower16:.LC213
 5709 113a C0F20000 		movt	r0, #:upper16:.LC213
 5710 113e FFF7FEFF 		bl	puts
1378:.\console.c   **** 					printf(STR_HELP_SETI1);					
 5711              		.loc 1 1378 0
 5712 1142 40F20000 		movw	r0, #:lower16:.LC214
 5713 1146 C0F20000 		movt	r0, #:upper16:.LC214
 5714 114a FFF7FEFF 		bl	puts
1379:.\console.c   **** 					printf(STR_HELP_SETTJ);
 5715              		.loc 1 1379 0
 5716 114e 40F20000 		movw	r0, #:lower16:.LC215
 5717 1152 C0F20000 		movt	r0, #:upper16:.LC215
 5718 1156 FFF7FEFF 		bl	puts
1380:.\console.c   **** 					printf(STR_HELP_SETTK);
 5719              		.loc 1 1380 0
 5720 115a 40F20000 		movw	r0, #:lower16:.LC216
 5721 115e C0F20000 		movt	r0, #:upper16:.LC216
 5722 1162 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 174


1382:.\console.c   **** 					printf("\r\n");		
 5723              		.loc 1 1382 0
 5724 1166 40F20000 		movw	r0, #:lower16:.LC42
 5725 116a C0F20000 		movt	r0, #:upper16:.LC42
 5726 116e FFF7FEFF 		bl	puts
1383:.\console.c   **** 					printf(STR_HELP_polar); 
 5727              		.loc 1 1383 0
 5728 1172 40F20000 		movw	r0, #:lower16:.LC217
 5729 1176 C0F20000 		movt	r0, #:upper16:.LC217
 5730 117a FFF7FEFF 		bl	puts
1384:.\console.c   **** 					printf(STR_HELP_kpval);
 5731              		.loc 1 1384 0
 5732 117e 40F20000 		movw	r0, #:lower16:.LC218
 5733 1182 C0F20000 		movt	r0, #:upper16:.LC218
 5734 1186 FFF7FEFF 		bl	puts
1385:.\console.c   **** 					printf(STR_HELP_kdval);
 5735              		.loc 1 1385 0
 5736 118a 40F20000 		movw	r0, #:lower16:.LC219
 5737 118e C0F20000 		movt	r0, #:upper16:.LC219
 5738 1192 FFF7FEFF 		bl	puts
1386:.\console.c   **** 					printf(STR_HELP_kival);					
 5739              		.loc 1 1386 0
 5740 1196 40F20000 		movw	r0, #:lower16:.LC220
 5741 119a C0F20000 		movt	r0, #:upper16:.LC220
 5742 119e FFF7FEFF 		bl	puts
1387:.\console.c   **** 					printf(STR_HELP_ksivl);
 5743              		.loc 1 1387 0
 5744 11a2 40F20000 		movw	r0, #:lower16:.LC221
 5745 11a6 C0F20000 		movt	r0, #:upper16:.LC221
 5746 11aa FFF7FEFF 		bl	puts
1388:.\console.c   **** 					printf(STR_HELP_dbval);					
 5747              		.loc 1 1388 0
 5748 11ae 40F20000 		movw	r0, #:lower16:.LC222
 5749 11b2 C0F20000 		movt	r0, #:upper16:.LC222
 5750 11b6 FFF7FEFF 		bl	puts
1389:.\console.c   **** 					printf(STR_HELP_kofvl);	
 5751              		.loc 1 1389 0
 5752 11ba 40F20000 		movw	r0, #:lower16:.LC223
 5753 11be C0F20000 		movt	r0, #:upper16:.LC223
 5754 11c2 FFF7FEFF 		bl	puts
1390:.\console.c   **** 					printf(STR_HELP_again);
 5755              		.loc 1 1390 0
 5756 11c6 40F20000 		movw	r0, #:lower16:.LC224
 5757 11ca C0F20000 		movt	r0, #:upper16:.LC224
 5758 11ce FFF7FEFF 		bl	puts
1391:.\console.c   **** 					printf(STR_HELP_astyp);					
 5759              		.loc 1 1391 0
 5760 11d2 40F20000 		movw	r0, #:lower16:.LC225
 5761 11d6 C0F20000 		movt	r0, #:upper16:.LC225
 5762 11da FFF7FEFF 		bl	puts
1392:.\console.c   **** 					printf(STR_HELP_color);
 5763              		.loc 1 1392 0
 5764 11de 40F20000 		movw	r0, #:lower16:.LC226
 5765 11e2 C0F20000 		movt	r0, #:upper16:.LC226
 5766 11e6 FFF7FEFF 		bl	puts
1393:.\console.c   **** 					printf(STR_HELP_colo1);
 5767              		.loc 1 1393 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 175


 5768 11ea 40F20000 		movw	r0, #:lower16:.LC227
 5769 11ee C0F20000 		movt	r0, #:upper16:.LC227
 5770 11f2 FFF7FEFF 		bl	puts
1394:.\console.c   **** 					printf(STR_HELP_axis);					
 5771              		.loc 1 1394 0
 5772 11f6 40F20000 		movw	r0, #:lower16:.LC228
 5773 11fa C0F20000 		movt	r0, #:upper16:.LC228
 5774 11fe FFF7FEFF 		bl	puts
1395:.\console.c   **** 					printf(STR_HELP_avalu);					
 5775              		.loc 1 1395 0
 5776 1202 40F20000 		movw	r0, #:lower16:.LC229
 5777 1206 C0F20000 		movt	r0, #:upper16:.LC229
 5778 120a FFF7FEFF 		bl	puts
1396:.\console.c   **** 					printf(STR_HELP_onoff);
 5779              		.loc 1 1396 0
 5780 120e 40F20000 		movw	r0, #:lower16:.LC230
 5781 1212 C0F20000 		movt	r0, #:upper16:.LC230
 5782 1216 FFF7FEFF 		bl	puts
1397:.\console.c   **** 					printf(STR_HELP_mode);
 5783              		.loc 1 1397 0
 5784 121a 40F20000 		movw	r0, #:lower16:.LC231
 5785 121e C0F20000 		movt	r0, #:upper16:.LC231
 5786 1222 FFF7FEFF 		bl	puts
1398:.\console.c   **** 					printf(STR_HELP_qn);
 5787              		.loc 1 1398 0
 5788 1226 40F20000 		movw	r0, #:lower16:.LC232
 5789 122a C0F20000 		movt	r0, #:upper16:.LC232
 5790 122e FFF7FEFF 		bl	puts
1399:.\console.c   **** 					printf(STR_HELP_qm);
 5791              		.loc 1 1399 0
 5792 1232 40F20000 		movw	r0, #:lower16:.LC233
 5793 1236 C0F20000 		movt	r0, #:upper16:.LC233
 5794 123a FFF7FEFF 		bl	puts
1400:.\console.c   **** 					printf(STR_HELP_dir);					
 5795              		.loc 1 1400 0
 5796 123e 40F20000 		movw	r0, #:lower16:.LC234
 5797 1242 C0F20000 		movt	r0, #:upper16:.LC234
 5798 1246 FFF7FEFF 		bl	puts
1401:.\console.c   **** 					printf(STR_HELP_dir1);
 5799              		.loc 1 1401 0
 5800 124a 40F20000 		movw	r0, #:lower16:.LC235
 5801 124e C0F20000 		movt	r0, #:upper16:.LC235
 5802 1252 FFF7FEFF 		bl	puts
1402:.\console.c   **** 					printf(STR_HELP_dir2);					
 5803              		.loc 1 1402 0
 5804 1256 40F20000 		movw	r0, #:lower16:.LC236
 5805 125a C0F20000 		movt	r0, #:upper16:.LC236
 5806 125e FFF7FEFF 		bl	puts
1404:.\console.c   **** 					goto exitpars;
 5807              		.loc 1 1404 0
 5808 1262 05F075BE 		b	.L131
 5809              	.L719:
 5810 1266 00BF     		.align	2
 5811              	.L718:
 5812 1268 0F000000 		.word	actual_cmd+15
 5813              	.L216:
1409:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "show") == 0)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 176


 5814              		.loc 1 1409 0
 5815 126c F048     		ldr	r0, .L720
 5816 126e 40F20001 		movw	r1, #:lower16:.LC237
 5817 1272 C0F20001 		movt	r1, #:upper16:.LC237
 5818 1276 FFF7FEFF 		bl	strcmp
 5819 127a 0346     		mov	r3, r0
 5820 127c 002B     		cmp	r3, #0
 5821 127e 40F0DA80 		bne	.L217
1411:.\console.c   **** 					printf(STR_HELP_SHOW1);
 5822              		.loc 1 1411 0
 5823 1282 40F20000 		movw	r0, #:lower16:.LC141
 5824 1286 C0F20000 		movt	r0, #:upper16:.LC141
 5825 128a FFF7FEFF 		bl	puts
1412:.\console.c   **** 					printf(STR_HELP_SYNTX);
 5826              		.loc 1 1412 0
 5827 128e 40F20000 		movw	r0, #:lower16:.LC168
 5828 1292 C0F20000 		movt	r0, #:upper16:.LC168
 5829 1296 FFF7FEFF 		bl	puts
1413:.\console.c   **** 					printf(STR_HELP_SHOW2);
 5830              		.loc 1 1413 0
 5831 129a 40F20000 		movw	r0, #:lower16:.LC238
 5832 129e C0F20000 		movt	r0, #:upper16:.LC238
 5833 12a2 FFF7FEFF 		bl	puts
1414:.\console.c   **** 					printf(STR_HELP_SHO21);					
 5834              		.loc 1 1414 0
 5835 12a6 40F20000 		movw	r0, #:lower16:.LC239
 5836 12aa C0F20000 		movt	r0, #:upper16:.LC239
 5837 12ae FFF7FEFF 		bl	puts
1415:.\console.c   **** 					printf(STR_HELP_SHOW3);					
 5838              		.loc 1 1415 0
 5839 12b2 40F20000 		movw	r0, #:lower16:.LC240
 5840 12b6 C0F20000 		movt	r0, #:upper16:.LC240
 5841 12ba FFF7FEFF 		bl	puts
1416:.\console.c   **** 					printf(STR_HELP_SHOW4);
 5842              		.loc 1 1416 0
 5843 12be 40F20000 		movw	r0, #:lower16:.LC241
 5844 12c2 C0F20000 		movt	r0, #:upper16:.LC241
 5845 12c6 FFF7FEFF 		bl	puts
1418:.\console.c   **** 					printf(STR_HELP_SHOW6);
 5846              		.loc 1 1418 0
 5847 12ca 40F20000 		movw	r0, #:lower16:.LC242
 5848 12ce C0F20000 		movt	r0, #:upper16:.LC242
 5849 12d2 FFF7FEFF 		bl	puts
1424:.\console.c   **** 					printf(STR_HELP_SHW73);
 5850              		.loc 1 1424 0
 5851 12d6 40F20000 		movw	r0, #:lower16:.LC243
 5852 12da C0F20000 		movt	r0, #:upper16:.LC243
 5853 12de FFF7FEFF 		bl	puts
1426:.\console.c   **** 					printf(STR_HELP_SHOW8);
 5854              		.loc 1 1426 0
 5855 12e2 40F20000 		movw	r0, #:lower16:.LC244
 5856 12e6 C0F20000 		movt	r0, #:upper16:.LC244
 5857 12ea FFF7FEFF 		bl	puts
1427:.\console.c   **** 					printf(STR_HELP_SHOW9);
 5858              		.loc 1 1427 0
 5859 12ee 40F20000 		movw	r0, #:lower16:.LC245
 5860 12f2 C0F20000 		movt	r0, #:upper16:.LC245
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 177


 5861 12f6 FFF7FEFF 		bl	puts
1428:.\console.c   **** 					printf(STR_HELP_SHW90);					
 5862              		.loc 1 1428 0
 5863 12fa 40F20000 		movw	r0, #:lower16:.LC246
 5864 12fe C0F20000 		movt	r0, #:upper16:.LC246
 5865 1302 FFF7FEFF 		bl	puts
1429:.\console.c   **** 					printf(STR_HELP_SHW91);
 5866              		.loc 1 1429 0
 5867 1306 40F20000 		movw	r0, #:lower16:.LC247
 5868 130a C0F20000 		movt	r0, #:upper16:.LC247
 5869 130e FFF7FEFF 		bl	puts
1430:.\console.c   **** 					printf(STR_HELP_SHW92);
 5870              		.loc 1 1430 0
 5871 1312 40F20000 		movw	r0, #:lower16:.LC248
 5872 1316 C0F20000 		movt	r0, #:upper16:.LC248
 5873 131a FFF7FEFF 		bl	puts
1431:.\console.c   **** 					printf(STR_HELP_SHW93);
 5874              		.loc 1 1431 0
 5875 131e 40F20000 		movw	r0, #:lower16:.LC249
 5876 1322 C0F20000 		movt	r0, #:upper16:.LC249
 5877 1326 FFF7FEFF 		bl	puts
1432:.\console.c   **** 					printf(STR_HELP_SHW94);
 5878              		.loc 1 1432 0
 5879 132a 40F20000 		movw	r0, #:lower16:.LC250
 5880 132e C0F20000 		movt	r0, #:upper16:.LC250
 5881 1332 FFF7FEFF 		bl	puts
1433:.\console.c   **** 					printf(STR_HELP_SHW95);
 5882              		.loc 1 1433 0
 5883 1336 40F20000 		movw	r0, #:lower16:.LC251
 5884 133a C0F20000 		movt	r0, #:upper16:.LC251
 5885 133e FFF7FEFF 		bl	puts
1434:.\console.c   **** 					printf(STR_HELP_SHW96);					
 5886              		.loc 1 1434 0
 5887 1342 40F20000 		movw	r0, #:lower16:.LC252
 5888 1346 C0F20000 		movt	r0, #:upper16:.LC252
 5889 134a FFF7FEFF 		bl	puts
1435:.\console.c   **** 					printf(STR_HELP_SHOWA);
 5890              		.loc 1 1435 0
 5891 134e 40F20000 		movw	r0, #:lower16:.LC253
 5892 1352 C0F20000 		movt	r0, #:upper16:.LC253
 5893 1356 FFF7FEFF 		bl	puts
1436:.\console.c   **** 					printf(STR_HELP_SHWA1);
 5894              		.loc 1 1436 0
 5895 135a 40F20000 		movw	r0, #:lower16:.LC254
 5896 135e C0F20000 		movt	r0, #:upper16:.LC254
 5897 1362 FFF7FEFF 		bl	puts
1437:.\console.c   **** 					printf(STR_HELP_SHWA2);	
 5898              		.loc 1 1437 0
 5899 1366 40F20000 		movw	r0, #:lower16:.LC255
 5900 136a C0F20000 		movt	r0, #:upper16:.LC255
 5901 136e FFF7FEFF 		bl	puts
1438:.\console.c   **** 					printf(STR_HELP_SHWA3);
 5902              		.loc 1 1438 0
 5903 1372 40F20000 		movw	r0, #:lower16:.LC256
 5904 1376 C0F20000 		movt	r0, #:upper16:.LC256
 5905 137a FFF7FEFF 		bl	puts
1439:.\console.c   **** 					printf(STR_HELP_SHWA4);	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 178


 5906              		.loc 1 1439 0
 5907 137e 40F20000 		movw	r0, #:lower16:.LC257
 5908 1382 C0F20000 		movt	r0, #:upper16:.LC257
 5909 1386 FFF7FEFF 		bl	puts
1440:.\console.c   **** 					printf(STR_HELP_SHWA5);	
 5910              		.loc 1 1440 0
 5911 138a 40F20000 		movw	r0, #:lower16:.LC258
 5912 138e C0F20000 		movt	r0, #:upper16:.LC258
 5913 1392 FFF7FEFF 		bl	puts
1441:.\console.c   **** 					printf(STR_HELP_SHWA6);						
 5914              		.loc 1 1441 0
 5915 1396 40F20000 		movw	r0, #:lower16:.LC259
 5916 139a C0F20000 		movt	r0, #:upper16:.LC259
 5917 139e FFF7FEFF 		bl	puts
1442:.\console.c   **** 					printf(STR_HELP_SHWA7);						
 5918              		.loc 1 1442 0
 5919 13a2 40F20000 		movw	r0, #:lower16:.LC260
 5920 13a6 C0F20000 		movt	r0, #:upper16:.LC260
 5921 13aa FFF7FEFF 		bl	puts
1443:.\console.c   **** 					printf(STR_HELP_SHOWB);
 5922              		.loc 1 1443 0
 5923 13ae 40F20000 		movw	r0, #:lower16:.LC261
 5924 13b2 C0F20000 		movt	r0, #:upper16:.LC261
 5925 13b6 FFF7FEFF 		bl	puts
1444:.\console.c   **** 					printf(STR_HELP_SHOWC);
 5926              		.loc 1 1444 0
 5927 13ba 40F20000 		movw	r0, #:lower16:.LC262
 5928 13be C0F20000 		movt	r0, #:upper16:.LC262
 5929 13c2 FFF7FEFF 		bl	puts
1445:.\console.c   **** 					printf(STR_HELP_SHOWD);	
 5930              		.loc 1 1445 0
 5931 13c6 40F20000 		movw	r0, #:lower16:.LC263
 5932 13ca C0F20000 		movt	r0, #:upper16:.LC263
 5933 13ce FFF7FEFF 		bl	puts
1446:.\console.c   **** 					printf(STR_HELP_SHOWE);
 5934              		.loc 1 1446 0
 5935 13d2 40F20000 		movw	r0, #:lower16:.LC264
 5936 13d6 C0F20000 		movt	r0, #:upper16:.LC264
 5937 13da FFF7FEFF 		bl	puts
1447:.\console.c   **** 					printf(STR_HELP_SHOWF);	
 5938              		.loc 1 1447 0
 5939 13de 40F20000 		movw	r0, #:lower16:.LC265
 5940 13e2 C0F20000 		movt	r0, #:upper16:.LC265
 5941 13e6 FFF7FEFF 		bl	puts
1448:.\console.c   **** 					printf(STR_HELP_SHOF1);
 5942              		.loc 1 1448 0
 5943 13ea 40F20000 		movw	r0, #:lower16:.LC266
 5944 13ee C0F20000 		movt	r0, #:upper16:.LC266
 5945 13f2 FFF7FEFF 		bl	puts
1449:.\console.c   **** 					printf(STR_HELP_SHOF2);
 5946              		.loc 1 1449 0
 5947 13f6 40F20000 		movw	r0, #:lower16:.LC267
 5948 13fa C0F20000 		movt	r0, #:upper16:.LC267
 5949 13fe FFF7FEFF 		bl	puts
1450:.\console.c   **** 					printf(STR_HELP_SHOF3);					
 5950              		.loc 1 1450 0
 5951 1402 40F20000 		movw	r0, #:lower16:.LC268
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 179


 5952 1406 C0F20000 		movt	r0, #:upper16:.LC268
 5953 140a FFF7FEFF 		bl	puts
1451:.\console.c   **** 					printf(STR_HELP_SHOWG);
 5954              		.loc 1 1451 0
 5955 140e 40F20000 		movw	r0, #:lower16:.LC269
 5956 1412 C0F20000 		movt	r0, #:upper16:.LC269
 5957 1416 FFF7FEFF 		bl	puts
1452:.\console.c   **** 					printf(STR_HELP_SHOWH);					
 5958              		.loc 1 1452 0
 5959 141a 40F20000 		movw	r0, #:lower16:.LC270
 5960 141e C0F20000 		movt	r0, #:upper16:.LC270
 5961 1422 FFF7FEFF 		bl	puts
1453:.\console.c   **** 					printf(STR_HELP_SHOWZ);
 5962              		.loc 1 1453 0
 5963 1426 40F20000 		movw	r0, #:lower16:.LC271
 5964 142a C0F20000 		movt	r0, #:upper16:.LC271
 5965 142e FFF7FEFF 		bl	puts
1454:.\console.c   **** 					goto exitpars;
 5966              		.loc 1 1454 0
 5967 1432 05F08DBD 		b	.L131
 5968              	.L217:
1459:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "q") == 0)
 5969              		.loc 1 1459 0
 5970 1436 7E48     		ldr	r0, .L720
 5971 1438 40F20001 		movw	r1, #:lower16:.LC272
 5972 143c C0F20001 		movt	r1, #:upper16:.LC272
 5973 1440 FFF7FEFF 		bl	strcmp
 5974 1444 0346     		mov	r3, r0
 5975 1446 002B     		cmp	r3, #0
 5976 1448 7FD1     		bne	.L218
1462:.\console.c   **** 					printf(STR_QTAB0);
 5977              		.loc 1 1462 0
 5978 144a 40F20000 		movw	r0, #:lower16:.LC273
 5979 144e C0F20000 		movt	r0, #:upper16:.LC273
 5980 1452 FFF7FEFF 		bl	puts
1463:.\console.c   **** 					printf(STR_QTAB1);
 5981              		.loc 1 1463 0
 5982 1456 40F20000 		movw	r0, #:lower16:.LC274
 5983 145a C0F20000 		movt	r0, #:upper16:.LC274
 5984 145e FFF7FEFF 		bl	puts
1464:.\console.c   **** 					printf(STR_Q000);
 5985              		.loc 1 1464 0
 5986 1462 40F20000 		movw	r0, #:lower16:.LC275
 5987 1466 C0F20000 		movt	r0, #:upper16:.LC275
 5988 146a FFF7FEFF 		bl	puts
1465:.\console.c   **** 					printf(STR_Q011);					
 5989              		.loc 1 1465 0
 5990 146e 40F20000 		movw	r0, #:lower16:.LC276
 5991 1472 C0F20000 		movt	r0, #:upper16:.LC276
 5992 1476 FFF7FEFF 		bl	puts
1466:.\console.c   **** 					printf(STR_Q013);					
 5993              		.loc 1 1466 0
 5994 147a 40F20000 		movw	r0, #:lower16:.LC277
 5995 147e C0F20000 		movt	r0, #:upper16:.LC277
 5996 1482 FFF7FEFF 		bl	puts
1467:.\console.c   **** 					printf(STR_Q014);			
 5997              		.loc 1 1467 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 180


 5998 1486 40F20000 		movw	r0, #:lower16:.LC278
 5999 148a C0F20000 		movt	r0, #:upper16:.LC278
 6000 148e FFF7FEFF 		bl	puts
1468:.\console.c   **** 					printf(STR_Q015);					
 6001              		.loc 1 1468 0
 6002 1492 40F20000 		movw	r0, #:lower16:.LC279
 6003 1496 C0F20000 		movt	r0, #:upper16:.LC279
 6004 149a FFF7FEFF 		bl	puts
1469:.\console.c   **** 					printf(STR_Q016);					
 6005              		.loc 1 1469 0
 6006 149e 40F20000 		movw	r0, #:lower16:.LC280
 6007 14a2 C0F20000 		movt	r0, #:upper16:.LC280
 6008 14a6 FFF7FEFF 		bl	puts
1470:.\console.c   **** 					printf(STR_Q017);
 6009              		.loc 1 1470 0
 6010 14aa 40F20000 		movw	r0, #:lower16:.LC281
 6011 14ae C0F20000 		movt	r0, #:upper16:.LC281
 6012 14b2 FFF7FEFF 		bl	puts
1471:.\console.c   **** 					printf(STR_Q021);
 6013              		.loc 1 1471 0
 6014 14b6 40F20000 		movw	r0, #:lower16:.LC282
 6015 14ba C0F20000 		movt	r0, #:upper16:.LC282
 6016 14be FFF7FEFF 		bl	puts
1472:.\console.c   **** 					printf(STR_Q031);
 6017              		.loc 1 1472 0
 6018 14c2 40F20000 		movw	r0, #:lower16:.LC283
 6019 14c6 C0F20000 		movt	r0, #:upper16:.LC283
 6020 14ca FFF7FEFF 		bl	puts
1473:.\console.c   **** 					printf(STR_Q033);
 6021              		.loc 1 1473 0
 6022 14ce 40F20000 		movw	r0, #:lower16:.LC284
 6023 14d2 C0F20000 		movt	r0, #:upper16:.LC284
 6024 14d6 FFF7FEFF 		bl	puts
1474:.\console.c   **** 					printf(STR_Q034);
 6025              		.loc 1 1474 0
 6026 14da 40F20000 		movw	r0, #:lower16:.LC285
 6027 14de C0F20000 		movt	r0, #:upper16:.LC285
 6028 14e2 FFF7FEFF 		bl	puts
1475:.\console.c   **** 					printf(STR_Q040);					
 6029              		.loc 1 1475 0
 6030 14e6 40F20000 		movw	r0, #:lower16:.LC286
 6031 14ea C0F20000 		movt	r0, #:upper16:.LC286
 6032 14ee FFF7FEFF 		bl	puts
1476:.\console.c   **** 					printf(STR_Q041);					
 6033              		.loc 1 1476 0
 6034 14f2 40F20000 		movw	r0, #:lower16:.LC287
 6035 14f6 C0F20000 		movt	r0, #:upper16:.LC287
 6036 14fa FFF7FEFF 		bl	puts
1477:.\console.c   **** 					printf(STR_Q042);
 6037              		.loc 1 1477 0
 6038 14fe 40F20000 		movw	r0, #:lower16:.LC288
 6039 1502 C0F20000 		movt	r0, #:upper16:.LC288
 6040 1506 FFF7FEFF 		bl	puts
1478:.\console.c   **** 					printf(STR_Q043);
 6041              		.loc 1 1478 0
 6042 150a 40F20000 		movw	r0, #:lower16:.LC289
 6043 150e C0F20000 		movt	r0, #:upper16:.LC289
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 181


 6044 1512 FFF7FEFF 		bl	puts
1479:.\console.c   **** 					printf(STR_Q044);					
 6045              		.loc 1 1479 0
 6046 1516 40F20000 		movw	r0, #:lower16:.LC290
 6047 151a C0F20000 		movt	r0, #:upper16:.LC290
 6048 151e FFF7FEFF 		bl	puts
1480:.\console.c   **** 					printf(STR_Q051);
 6049              		.loc 1 1480 0
 6050 1522 40F20000 		movw	r0, #:lower16:.LC291
 6051 1526 C0F20000 		movt	r0, #:upper16:.LC291
 6052 152a FFF7FEFF 		bl	puts
1481:.\console.c   **** 					printf(STR_Q052);
 6053              		.loc 1 1481 0
 6054 152e 40F20000 		movw	r0, #:lower16:.LC292
 6055 1532 C0F20000 		movt	r0, #:upper16:.LC292
 6056 1536 FFF7FEFF 		bl	puts
1482:.\console.c   **** 					printf(STR_Q053);					
 6057              		.loc 1 1482 0
 6058 153a 40F20000 		movw	r0, #:lower16:.LC293
 6059 153e C0F20000 		movt	r0, #:upper16:.LC293
 6060 1542 FFF7FEFF 		bl	puts
1484:.\console.c   **** 					goto exitpars;
 6061              		.loc 1 1484 0
 6062 1546 05F003BD 		b	.L131
 6063              	.L218:
1489:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "testdac") == 0)
 6064              		.loc 1 1489 0
 6065 154a 3948     		ldr	r0, .L720
 6066 154c 40F20001 		movw	r1, #:lower16:.LC294
 6067 1550 C0F20001 		movt	r1, #:upper16:.LC294
 6068 1554 FFF7FEFF 		bl	strcmp
 6069 1558 0346     		mov	r3, r0
 6070 155a 002B     		cmp	r3, #0
 6071 155c 13D1     		bne	.L219
1491:.\console.c   **** 					printf(STR_HELP_TDAC1);
 6072              		.loc 1 1491 0
 6073 155e 40F20000 		movw	r0, #:lower16:.LC295
 6074 1562 C0F20000 		movt	r0, #:upper16:.LC295
 6075 1566 FFF7FEFF 		bl	puts
1492:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6076              		.loc 1 1492 0
 6077 156a 40F20000 		movw	r0, #:lower16:.LC168
 6078 156e C0F20000 		movt	r0, #:upper16:.LC168
 6079 1572 FFF7FEFF 		bl	puts
1493:.\console.c   **** 					printf(STR_HELP_TDAC2);
 6080              		.loc 1 1493 0
 6081 1576 40F20000 		movw	r0, #:lower16:.LC296
 6082 157a C0F20000 		movt	r0, #:upper16:.LC296
 6083 157e FFF7FEFF 		bl	puts
1494:.\console.c   **** 					goto exitpars;
 6084              		.loc 1 1494 0
 6085 1582 05F0E5BC 		b	.L131
 6086              	.L219:
1499:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "prompt") == 0)
 6087              		.loc 1 1499 0
 6088 1586 2A48     		ldr	r0, .L720
 6089 1588 40F20001 		movw	r1, #:lower16:.LC130
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 182


 6090 158c C0F20001 		movt	r1, #:upper16:.LC130
 6091 1590 FFF7FEFF 		bl	strcmp
 6092 1594 0346     		mov	r3, r0
 6093 1596 002B     		cmp	r3, #0
 6094 1598 13D1     		bne	.L220
1501:.\console.c   **** 					printf(STR_HELP_PROM1);
 6095              		.loc 1 1501 0
 6096 159a 40F20000 		movw	r0, #:lower16:.LC143
 6097 159e C0F20000 		movt	r0, #:upper16:.LC143
 6098 15a2 FFF7FEFF 		bl	puts
1502:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6099              		.loc 1 1502 0
 6100 15a6 40F20000 		movw	r0, #:lower16:.LC168
 6101 15aa C0F20000 		movt	r0, #:upper16:.LC168
 6102 15ae FFF7FEFF 		bl	puts
1503:.\console.c   **** 					printf(STR_HELP_PROM2);
 6103              		.loc 1 1503 0
 6104 15b2 40F20000 		movw	r0, #:lower16:.LC297
 6105 15b6 C0F20000 		movt	r0, #:upper16:.LC297
 6106 15ba FFF7FEFF 		bl	puts
1504:.\console.c   **** 					goto exitpars;
 6107              		.loc 1 1504 0
 6108 15be 05F0C7BC 		b	.L131
 6109              	.L220:
1509:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "version") == 0)
 6110              		.loc 1 1509 0
 6111 15c2 1B48     		ldr	r0, .L720
 6112 15c4 40F20001 		movw	r1, #:lower16:.LC123
 6113 15c8 C0F20001 		movt	r1, #:upper16:.LC123
 6114 15cc FFF7FEFF 		bl	strcmp
 6115 15d0 0346     		mov	r3, r0
 6116 15d2 002B     		cmp	r3, #0
 6117 15d4 09D0     		beq	.L221
1510:.\console.c   **** 				||(strcmp(actual_cmd.parameter, "v") == 0))
 6118              		.loc 1 1510 0
 6119 15d6 1648     		ldr	r0, .L720
 6120 15d8 40F20001 		movw	r1, #:lower16:.LC122
 6121 15dc C0F20001 		movt	r1, #:upper16:.LC122
 6122 15e0 FFF7FEFF 		bl	strcmp
 6123 15e4 0346     		mov	r3, r0
 6124 15e6 002B     		cmp	r3, #0
 6125 15e8 19D1     		bne	.L222
 6126              	.L221:
1512:.\console.c   **** 					printf(STR_HELP_VERS1);
 6127              		.loc 1 1512 0
 6128 15ea 40F20000 		movw	r0, #:lower16:.LC145
 6129 15ee C0F20000 		movt	r0, #:upper16:.LC145
 6130 15f2 FFF7FEFF 		bl	puts
1513:.\console.c   **** 					printf(STR_HELP_SYNTX);
 6131              		.loc 1 1513 0
 6132 15f6 40F20000 		movw	r0, #:lower16:.LC168
 6133 15fa C0F20000 		movt	r0, #:upper16:.LC168
 6134 15fe FFF7FEFF 		bl	puts
1514:.\console.c   **** 					printf(STR_HELP_VERS2);
 6135              		.loc 1 1514 0
 6136 1602 40F20000 		movw	r0, #:lower16:.LC298
 6137 1606 C0F20000 		movt	r0, #:upper16:.LC298
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 183


 6138 160a FFF7FEFF 		bl	puts
1515:.\console.c   **** 					printf(STR_HELP_VERS3);				
 6139              		.loc 1 1515 0
 6140 160e 40F20000 		movw	r0, #:lower16:.LC299
 6141 1612 C0F20000 		movt	r0, #:upper16:.LC299
 6142 1616 FFF7FEFF 		bl	puts
1516:.\console.c   **** 					goto exitpars;
 6143              		.loc 1 1516 0
 6144 161a 05F099BC 		b	.L131
 6145              	.L222:
1518:.\console.c   **** 				printf(STR_ERROR3);	/* Bad Parameter(s) */
 6146              		.loc 1 1518 0
 6147 161e 40F20000 		movw	r0, #:lower16:.LC300
 6148 1622 C0F20000 		movt	r0, #:upper16:.LC300
 6149 1626 FFF7FEFF 		bl	printf
1519:.\console.c   **** 				goto exitpars;
 6150              		.loc 1 1519 0
 6151 162a 05F091BC 		b	.L131
 6152              	.L721:
 6153 162e 00BF     		.align	2
 6154              	.L720:
 6155 1630 0F000000 		.word	actual_cmd+15
 6156              	.L214:
1522:.\console.c   **** 		}
1523:.\console.c   **** 		/* END CMD HELP */
1524:.\console.c   **** 	
1525:.\console.c   **** 	
1526:.\console.c   **** 		/* CMD SHOW */
1527:.\console.c   **** 		if ((strcmp(actual_cmd.action, "show") == 0) ||
 6157              		.loc 1 1527 0
 6158 1634 40F20000 		movw	r0, #:lower16:actual_cmd
 6159 1638 C0F20000 		movt	r0, #:upper16:actual_cmd
 6160 163c 40F20001 		movw	r1, #:lower16:.LC237
 6161 1640 C0F20001 		movt	r1, #:upper16:.LC237
 6162 1644 FFF7FEFF 		bl	strcmp
 6163 1648 0346     		mov	r3, r0
 6164 164a 002B     		cmp	r3, #0
 6165 164c 0DD0     		beq	.L223
1528:.\console.c   **** 		   (strcmp(actual_cmd.action, "s") == 0))
 6166              		.loc 1 1528 0 discriminator 1
 6167 164e 40F20000 		movw	r0, #:lower16:actual_cmd
 6168 1652 C0F20000 		movt	r0, #:upper16:actual_cmd
 6169 1656 40F20001 		movw	r1, #:lower16:.LC301
 6170 165a C0F20001 		movt	r1, #:upper16:.LC301
 6171 165e FFF7FEFF 		bl	strcmp
 6172 1662 0346     		mov	r3, r0
1527:.\console.c   **** 		if ((strcmp(actual_cmd.action, "show") == 0) ||
 6173              		.loc 1 1527 0 discriminator 1
 6174 1664 002B     		cmp	r3, #0
 6175 1666 42F0EA87 		bne	.L224
 6176              	.L223:
1529:.\console.c   **** 		{
1530:.\console.c   **** 			// SHOW CONTROL
1531:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "control") == 0)	
 6177              		.loc 1 1531 0
 6178 166a 1048     		ldr	r0, .L722
 6179 166c 40F20001 		movw	r1, #:lower16:.LC302
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 184


 6180 1670 C0F20001 		movt	r1, #:upper16:.LC302
 6181 1674 FFF7FEFF 		bl	strcmp
 6182 1678 0346     		mov	r3, r0
 6183 167a 002B     		cmp	r3, #0
 6184 167c 0ED0     		beq	.L225
1532:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ctrl") == 0) 
 6185              		.loc 1 1532 0
 6186 167e 0B48     		ldr	r0, .L722
 6187 1680 40F20001 		movw	r1, #:lower16:.LC303
 6188 1684 C0F20001 		movt	r1, #:upper16:.LC303
 6189 1688 FFF7FEFF 		bl	strcmp
 6190 168c 0346     		mov	r3, r0
 6191 168e 002B     		cmp	r3, #0
 6192 1690 04D0     		beq	.L225
1533:.\console.c   **** 			|| (strlen(actual_cmd.parameter) == 0))
 6193              		.loc 1 1533 0
 6194 1692 064B     		ldr	r3, .L722
 6195 1694 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6196 1696 002B     		cmp	r3, #0
 6197 1698 40F0D382 		bne	.L226
 6198              	.L225:
1534:.\console.c   **** 			{
1535:.\console.c   **** 				printf("\x1B[2J");			/* Erase Screen (ESC=\x1B) 	*/
 6199              		.loc 1 1535 0
 6200 169c 40F20000 		movw	r0, #:lower16:.LC304
 6201 16a0 C0F20000 		movt	r0, #:upper16:.LC304
 6202 16a4 FFF7FEFF 		bl	printf
1536:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6203              		.loc 1 1536 0
 6204 16a8 BDE2     		b	.L227
 6205              	.L723:
 6206 16aa 00BF     		.align	2
 6207              	.L722:
 6208 16ac 0F000000 		.word	actual_cmd+15
 6209              	.L231:
1537:.\console.c   **** 				{
1538:.\console.c   **** 					printf("\x1B[H");		/* Cursor Home (ESC=\x1B)	*/
 6210              		.loc 1 1538 0
 6211 16b0 40F20000 		movw	r0, #:lower16:.LC305
 6212 16b4 C0F20000 		movt	r0, #:upper16:.LC305
 6213 16b8 FFF7FEFF 		bl	printf
1539:.\console.c   **** 					printf("---------------------------------\r\n");
 6214              		.loc 1 1539 0
 6215 16bc 40F20000 		movw	r0, #:lower16:.LC306
 6216 16c0 C0F20000 		movt	r0, #:upper16:.LC306
 6217 16c4 FFF7FEFF 		bl	puts
1540:.\console.c   **** 					printf("--- GoBee Director RT CONTROL ---\r\n");
 6218              		.loc 1 1540 0
 6219 16c8 40F20000 		movw	r0, #:lower16:.LC307
 6220 16cc C0F20000 		movt	r0, #:upper16:.LC307
 6221 16d0 FFF7FEFF 		bl	puts
1541:.\console.c   **** 					printf("---------------------------------\r\n");
 6222              		.loc 1 1541 0
 6223 16d4 40F20000 		movw	r0, #:lower16:.LC306
 6224 16d8 C0F20000 		movt	r0, #:upper16:.LC306
 6225 16dc FFF7FEFF 		bl	puts
1542:.\console.c   **** 					printf("\r\n");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 185


 6226              		.loc 1 1542 0
 6227 16e0 40F20000 		movw	r0, #:lower16:.LC42
 6228 16e4 C0F20000 		movt	r0, #:upper16:.LC42
 6229 16e8 FFF7FEFF 		bl	puts
1543:.\console.c   **** 									
1544:.\console.c   **** //					printf("agyro rate=%1.4f", (float)agyro.rate);
1545:.\console.c   **** //					printf_spc(7);
1546:.\console.c   **** //					printf("  lpf(rate)=%1.4f [deg/s]", (float)agyro.rate_lowpass);
1547:.\console.c   **** //					printf_spc(7);
1548:.\console.c   **** //					printf("  angle=%1.4f [deg]", (float)agyro.angle);
1549:.\console.c   **** //					printf_spc(7);							
1550:.\console.c   **** //					printf("\r\n");	
1551:.\console.c   **** //					printf("\r\n");	
1552:.\console.c   **** 
1553:.\console.c   **** //					printf("fbk enc rate=%1.4f [deg/s]", (float)pan_feedback_encoder.angular_velocity);
1554:.\console.c   **** //					printf_spc(7);
1555:.\console.c   **** //					printf("  angle=%1.4f [deg]", (float)pan_feedback_encoder.angle);	
1556:.\console.c   **** 
1557:.\console.c   **** 					printf("axis_res(P)=%+1.3f [step/2PI]", (float)pan_axis.param.resolution.fnum);
 6230              		.loc 1 1557 0
 6231 16ec 40F20003 		movw	r3, #:lower16:pan_axis
 6232 16f0 C0F20003 		movt	r3, #:upper16:pan_axis
 6233 16f4 DB68     		ldr	r3, [r3, #12]	@ float
 6234 16f6 1846     		mov	r0, r3
 6235 16f8 FFF7FEFF 		bl	__aeabi_f2d
 6236 16fc 0246     		mov	r2, r0
 6237 16fe 0B46     		mov	r3, r1
 6238 1700 40F20000 		movw	r0, #:lower16:.LC308
 6239 1704 C0F20000 		movt	r0, #:upper16:.LC308
 6240 1708 FFF7FEFF 		bl	printf
1558:.\console.c   **** 					printf_spc(1);					
 6241              		.loc 1 1558 0
 6242 170c 4FF00100 		mov	r0, #1
 6243 1710 FFF7FEFF 		bl	printf_spc
1559:.\console.c   **** 					printf("axis_res(T)=%+1.3f [step/2PI]", (float)tilt_axis.param.resolution.fnum);
 6244              		.loc 1 1559 0
 6245 1714 40F20003 		movw	r3, #:lower16:tilt_axis
 6246 1718 C0F20003 		movt	r3, #:upper16:tilt_axis
 6247 171c DB68     		ldr	r3, [r3, #12]	@ float
 6248 171e 1846     		mov	r0, r3
 6249 1720 FFF7FEFF 		bl	__aeabi_f2d
 6250 1724 0246     		mov	r2, r0
 6251 1726 0B46     		mov	r3, r1
 6252 1728 40F20000 		movw	r0, #:lower16:.LC309
 6253 172c C0F20000 		movt	r0, #:upper16:.LC309
 6254 1730 FFF7FEFF 		bl	printf
1560:.\console.c   **** 					printf("\r\n");							
 6255              		.loc 1 1560 0
 6256 1734 40F20000 		movw	r0, #:lower16:.LC42
 6257 1738 C0F20000 		movt	r0, #:upper16:.LC42
 6258 173c FFF7FEFF 		bl	puts
1561:.\console.c   **** 					
1562:.\console.c   **** 					printf("angle(P)=%+1.4f [deg]", (float)pan_axis.mc.slave_enc.position * 360/pan_axis.param.res
 6259              		.loc 1 1562 0
 6260 1740 40F20003 		movw	r3, #:lower16:pan_axis
 6261 1744 C0F20003 		movt	r3, #:upper16:pan_axis
 6262 1748 5B6C     		ldr	r3, [r3, #68]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 186


 6263 174a 1846     		mov	r0, r3
 6264 174c FFF7FEFF 		bl	__aeabi_i2f
 6265 1750 0346     		mov	r3, r0
 6266 1752 1846     		mov	r0, r3
 6267 1754 4FF00001 		mov	r1, #0
 6268 1758 C4F2B431 		movt	r1, 17332
 6269 175c FFF7FEFF 		bl	__aeabi_fmul
 6270 1760 0346     		mov	r3, r0
 6271 1762 1A46     		mov	r2, r3
 6272 1764 40F20003 		movw	r3, #:lower16:pan_axis
 6273 1768 C0F20003 		movt	r3, #:upper16:pan_axis
 6274 176c DB68     		ldr	r3, [r3, #12]	@ float
 6275 176e 1046     		mov	r0, r2
 6276 1770 1946     		mov	r1, r3
 6277 1772 FFF7FEFF 		bl	__aeabi_fdiv
 6278 1776 0346     		mov	r3, r0
 6279 1778 1846     		mov	r0, r3
 6280 177a FFF7FEFF 		bl	__aeabi_f2d
 6281 177e 0246     		mov	r2, r0
 6282 1780 0B46     		mov	r3, r1
 6283 1782 40F20000 		movw	r0, #:lower16:.LC310
 6284 1786 C0F20000 		movt	r0, #:upper16:.LC310
 6285 178a FFF7FEFF 		bl	printf
1563:.\console.c   **** 					printf_spc(13);					
 6286              		.loc 1 1563 0
 6287 178e 4FF00D00 		mov	r0, #13
 6288 1792 FFF7FEFF 		bl	printf_spc
1564:.\console.c   **** 					printf("angle(T)=%+1.4f [deg]", (float)tilt_axis.mc.slave_enc.position * 360/tilt_axis.param.r
 6289              		.loc 1 1564 0
 6290 1796 40F20003 		movw	r3, #:lower16:tilt_axis
 6291 179a C0F20003 		movt	r3, #:upper16:tilt_axis
 6292 179e 5B6C     		ldr	r3, [r3, #68]
 6293 17a0 1846     		mov	r0, r3
 6294 17a2 FFF7FEFF 		bl	__aeabi_i2f
 6295 17a6 0346     		mov	r3, r0
 6296 17a8 1846     		mov	r0, r3
 6297 17aa 4FF00001 		mov	r1, #0
 6298 17ae C4F2B431 		movt	r1, 17332
 6299 17b2 FFF7FEFF 		bl	__aeabi_fmul
 6300 17b6 0346     		mov	r3, r0
 6301 17b8 1A46     		mov	r2, r3
 6302 17ba 40F20003 		movw	r3, #:lower16:tilt_axis
 6303 17be C0F20003 		movt	r3, #:upper16:tilt_axis
 6304 17c2 DB68     		ldr	r3, [r3, #12]	@ float
 6305 17c4 1046     		mov	r0, r2
 6306 17c6 1946     		mov	r1, r3
 6307 17c8 FFF7FEFF 		bl	__aeabi_fdiv
 6308 17cc 0346     		mov	r3, r0
 6309 17ce 1846     		mov	r0, r3
 6310 17d0 FFF7FEFF 		bl	__aeabi_f2d
 6311 17d4 0246     		mov	r2, r0
 6312 17d6 0B46     		mov	r3, r1
 6313 17d8 40F20000 		movw	r0, #:lower16:.LC311
 6314 17dc C0F20000 		movt	r0, #:upper16:.LC311
 6315 17e0 FFF7FEFF 		bl	printf
1565:.\console.c   **** 					printf("\r\n");						
 6316              		.loc 1 1565 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 187


 6317 17e4 40F20000 		movw	r0, #:lower16:.LC42
 6318 17e8 C0F20000 		movt	r0, #:upper16:.LC42
 6319 17ec FFF7FEFF 		bl	puts
1566:.\console.c   **** 					printf("\r\n");		
 6320              		.loc 1 1566 0
 6321 17f0 40F20000 		movw	r0, #:lower16:.LC42
 6322 17f4 C0F20000 		movt	r0, #:upper16:.LC42
 6323 17f8 FFF7FEFF 		bl	puts
1567:.\console.c   **** 					
1568:.\console.c   **** 					printf("fbk(P)=%+1.4f [step]", (float)pan_axis.mc.slave_enc.position);
 6324              		.loc 1 1568 0
 6325 17fc 40F20003 		movw	r3, #:lower16:pan_axis
 6326 1800 C0F20003 		movt	r3, #:upper16:pan_axis
 6327 1804 5B6C     		ldr	r3, [r3, #68]
 6328 1806 1846     		mov	r0, r3
 6329 1808 FFF7FEFF 		bl	__aeabi_i2f
 6330 180c 0346     		mov	r3, r0
 6331 180e 1846     		mov	r0, r3
 6332 1810 FFF7FEFF 		bl	__aeabi_f2d
 6333 1814 0246     		mov	r2, r0
 6334 1816 0B46     		mov	r3, r1
 6335 1818 40F20000 		movw	r0, #:lower16:.LC312
 6336 181c C0F20000 		movt	r0, #:upper16:.LC312
 6337 1820 FFF7FEFF 		bl	printf
1569:.\console.c   **** 					printf_spc(14);					
 6338              		.loc 1 1569 0
 6339 1824 4FF00E00 		mov	r0, #14
 6340 1828 FFF7FEFF 		bl	printf_spc
1570:.\console.c   **** 					printf("fbk(T)=%+1.4f [step]", (float)tilt_axis.mc.slave_enc.position);
 6341              		.loc 1 1570 0
 6342 182c 40F20003 		movw	r3, #:lower16:tilt_axis
 6343 1830 C0F20003 		movt	r3, #:upper16:tilt_axis
 6344 1834 5B6C     		ldr	r3, [r3, #68]
 6345 1836 1846     		mov	r0, r3
 6346 1838 FFF7FEFF 		bl	__aeabi_i2f
 6347 183c 0346     		mov	r3, r0
 6348 183e 1846     		mov	r0, r3
 6349 1840 FFF7FEFF 		bl	__aeabi_f2d
 6350 1844 0246     		mov	r2, r0
 6351 1846 0B46     		mov	r3, r1
 6352 1848 40F20000 		movw	r0, #:lower16:.LC313
 6353 184c C0F20000 		movt	r0, #:upper16:.LC313
 6354 1850 FFF7FEFF 		bl	printf
1571:.\console.c   **** 					printf("\r\n");						
 6355              		.loc 1 1571 0
 6356 1854 40F20000 		movw	r0, #:lower16:.LC42
 6357 1858 C0F20000 		movt	r0, #:upper16:.LC42
 6358 185c FFF7FEFF 		bl	puts
1572:.\console.c   **** 
1573:.\console.c   **** 					printf("mast_enc(P)=%+1.4f [step]", (float)pan_axis.mc.master_enc_position);
 6359              		.loc 1 1573 0
 6360 1860 40F20003 		movw	r3, #:lower16:pan_axis
 6361 1864 C0F20003 		movt	r3, #:upper16:pan_axis
 6362 1868 5B6B     		ldr	r3, [r3, #52]
 6363 186a 1846     		mov	r0, r3
 6364 186c FFF7FEFF 		bl	__aeabi_i2f
 6365 1870 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 188


 6366 1872 1846     		mov	r0, r3
 6367 1874 FFF7FEFF 		bl	__aeabi_f2d
 6368 1878 0246     		mov	r2, r0
 6369 187a 0B46     		mov	r3, r1
 6370 187c 40F20000 		movw	r0, #:lower16:.LC314
 6371 1880 C0F20000 		movt	r0, #:upper16:.LC314
 6372 1884 FFF7FEFF 		bl	printf
1574:.\console.c   **** 					printf_spc(9);					
 6373              		.loc 1 1574 0
 6374 1888 4FF00900 		mov	r0, #9
 6375 188c FFF7FEFF 		bl	printf_spc
1575:.\console.c   **** 					printf("mast_enc(T)=%+1.4f [step]", (float)tilt_axis.mc.master_enc_position);
 6376              		.loc 1 1575 0
 6377 1890 40F20003 		movw	r3, #:lower16:tilt_axis
 6378 1894 C0F20003 		movt	r3, #:upper16:tilt_axis
 6379 1898 5B6B     		ldr	r3, [r3, #52]
 6380 189a 1846     		mov	r0, r3
 6381 189c FFF7FEFF 		bl	__aeabi_i2f
 6382 18a0 0346     		mov	r3, r0
 6383 18a2 1846     		mov	r0, r3
 6384 18a4 FFF7FEFF 		bl	__aeabi_f2d
 6385 18a8 0246     		mov	r2, r0
 6386 18aa 0B46     		mov	r3, r1
 6387 18ac 40F20000 		movw	r0, #:lower16:.LC315
 6388 18b0 C0F20000 		movt	r0, #:upper16:.LC315
 6389 18b4 FFF7FEFF 		bl	printf
1576:.\console.c   **** 					printf("\r\n");
 6390              		.loc 1 1576 0
 6391 18b8 40F20000 		movw	r0, #:lower16:.LC42
 6392 18bc C0F20000 		movt	r0, #:upper16:.LC42
 6393 18c0 FFF7FEFF 		bl	puts
1577:.\console.c   **** 					
1578:.\console.c   **** 					printf("mast_joy(P)=%+1.4f [step]", (float)pan_axis.mc.master_joy_position);
 6394              		.loc 1 1578 0
 6395 18c4 40F20003 		movw	r3, #:lower16:pan_axis
 6396 18c8 C0F20003 		movt	r3, #:upper16:pan_axis
 6397 18cc DB6B     		ldr	r3, [r3, #60]
 6398 18ce 1846     		mov	r0, r3
 6399 18d0 FFF7FEFF 		bl	__aeabi_i2f
 6400 18d4 0346     		mov	r3, r0
 6401 18d6 1846     		mov	r0, r3
 6402 18d8 FFF7FEFF 		bl	__aeabi_f2d
 6403 18dc 0246     		mov	r2, r0
 6404 18de 0B46     		mov	r3, r1
 6405 18e0 40F20000 		movw	r0, #:lower16:.LC316
 6406 18e4 C0F20000 		movt	r0, #:upper16:.LC316
 6407 18e8 FFF7FEFF 		bl	printf
1579:.\console.c   **** 					printf_spc(9);					
 6408              		.loc 1 1579 0
 6409 18ec 4FF00900 		mov	r0, #9
 6410 18f0 FFF7FEFF 		bl	printf_spc
1580:.\console.c   **** 					printf("mast_joy(T)=%+1.4f [step]", (float)tilt_axis.mc.master_joy_position);					
 6411              		.loc 1 1580 0
 6412 18f4 40F20003 		movw	r3, #:lower16:tilt_axis
 6413 18f8 C0F20003 		movt	r3, #:upper16:tilt_axis
 6414 18fc DB6B     		ldr	r3, [r3, #60]
 6415 18fe 1846     		mov	r0, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 189


 6416 1900 FFF7FEFF 		bl	__aeabi_i2f
 6417 1904 0346     		mov	r3, r0
 6418 1906 1846     		mov	r0, r3
 6419 1908 FFF7FEFF 		bl	__aeabi_f2d
 6420 190c 0246     		mov	r2, r0
 6421 190e 0B46     		mov	r3, r1
 6422 1910 40F20000 		movw	r0, #:lower16:.LC317
 6423 1914 C0F20000 		movt	r0, #:upper16:.LC317
 6424 1918 FFF7FEFF 		bl	printf
1581:.\console.c   **** 					
1582:.\console.c   **** 					printf("\r\n");
 6425              		.loc 1 1582 0
 6426 191c 40F20000 		movw	r0, #:lower16:.LC42
 6427 1920 C0F20000 		movt	r0, #:upper16:.LC42
 6428 1924 FFF7FEFF 		bl	puts
1583:.\console.c   **** 					printf("\r\n");
 6429              		.loc 1 1583 0
 6430 1928 40F20000 		movw	r0, #:lower16:.LC42
 6431 192c C0F20000 		movt	r0, #:upper16:.LC42
 6432 1930 FFF7FEFF 		bl	puts
1584:.\console.c   **** 					
1585:.\console.c   **** 					printf("err(P)=%+1.4f", (float)pan_axis.mc.error);
 6433              		.loc 1 1585 0
 6434 1934 40F20003 		movw	r3, #:lower16:pan_axis
 6435 1938 C0F20003 		movt	r3, #:upper16:pan_axis
 6436 193c 9B6D     		ldr	r3, [r3, #88]	@ float
 6437 193e 1846     		mov	r0, r3
 6438 1940 FFF7FEFF 		bl	__aeabi_f2d
 6439 1944 0246     		mov	r2, r0
 6440 1946 0B46     		mov	r3, r1
 6441 1948 40F20000 		movw	r0, #:lower16:.LC318
 6442 194c C0F20000 		movt	r0, #:upper16:.LC318
 6443 1950 FFF7FEFF 		bl	printf
1586:.\console.c   **** 					printf_spc(21);					
 6444              		.loc 1 1586 0
 6445 1954 4FF01500 		mov	r0, #21
 6446 1958 FFF7FEFF 		bl	printf_spc
1587:.\console.c   **** 					printf("err(T)=%+1.4f", (float)tilt_axis.mc.error);
 6447              		.loc 1 1587 0
 6448 195c 40F20003 		movw	r3, #:lower16:tilt_axis
 6449 1960 C0F20003 		movt	r3, #:upper16:tilt_axis
 6450 1964 9B6D     		ldr	r3, [r3, #88]	@ float
 6451 1966 1846     		mov	r0, r3
 6452 1968 FFF7FEFF 		bl	__aeabi_f2d
 6453 196c 0246     		mov	r2, r0
 6454 196e 0B46     		mov	r3, r1
 6455 1970 40F20000 		movw	r0, #:lower16:.LC319
 6456 1974 C0F20000 		movt	r0, #:upper16:.LC319
 6457 1978 FFF7FEFF 		bl	printf
1588:.\console.c   **** 					printf("\r\n");	
 6458              		.loc 1 1588 0
 6459 197c 40F20000 		movw	r0, #:lower16:.LC42
 6460 1980 C0F20000 		movt	r0, #:upper16:.LC42
 6461 1984 FFF7FEFF 		bl	puts
1589:.\console.c   **** 					
1590:.\console.c   **** 					printf("derr(P)=%+1.4f", (float)pan_axis.mc.derror);
 6462              		.loc 1 1590 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 190


 6463 1988 40F20003 		movw	r3, #:lower16:pan_axis
 6464 198c C0F20003 		movt	r3, #:upper16:pan_axis
 6465 1990 5B6E     		ldr	r3, [r3, #100]	@ float
 6466 1992 1846     		mov	r0, r3
 6467 1994 FFF7FEFF 		bl	__aeabi_f2d
 6468 1998 0246     		mov	r2, r0
 6469 199a 0B46     		mov	r3, r1
 6470 199c 40F20000 		movw	r0, #:lower16:.LC320
 6471 19a0 C0F20000 		movt	r0, #:upper16:.LC320
 6472 19a4 FFF7FEFF 		bl	printf
1591:.\console.c   **** 					printf_spc(20);
 6473              		.loc 1 1591 0
 6474 19a8 4FF01400 		mov	r0, #20
 6475 19ac FFF7FEFF 		bl	printf_spc
1592:.\console.c   **** 					printf("derr(T)=%+1.4f", (float)tilt_axis.mc.derror);
 6476              		.loc 1 1592 0
 6477 19b0 40F20003 		movw	r3, #:lower16:tilt_axis
 6478 19b4 C0F20003 		movt	r3, #:upper16:tilt_axis
 6479 19b8 5B6E     		ldr	r3, [r3, #100]	@ float
 6480 19ba 1846     		mov	r0, r3
 6481 19bc FFF7FEFF 		bl	__aeabi_f2d
 6482 19c0 0246     		mov	r2, r0
 6483 19c2 0B46     		mov	r3, r1
 6484 19c4 40F20000 		movw	r0, #:lower16:.LC321
 6485 19c8 C0F20000 		movt	r0, #:upper16:.LC321
 6486 19cc FFF7FEFF 		bl	printf
1593:.\console.c   **** 					printf("\r\n");	
 6487              		.loc 1 1593 0
 6488 19d0 40F20000 		movw	r0, #:lower16:.LC42
 6489 19d4 C0F20000 		movt	r0, #:upper16:.LC42
 6490 19d8 FFF7FEFF 		bl	puts
1594:.\console.c   **** 
1595:.\console.c   **** 					printf("ierr(P)=%+1.4f", (float)pan_axis.mc.ierror);
 6491              		.loc 1 1595 0
 6492 19dc 40F20003 		movw	r3, #:lower16:pan_axis
 6493 19e0 C0F20003 		movt	r3, #:upper16:pan_axis
 6494 19e4 1B6E     		ldr	r3, [r3, #96]	@ float
 6495 19e6 1846     		mov	r0, r3
 6496 19e8 FFF7FEFF 		bl	__aeabi_f2d
 6497 19ec 0246     		mov	r2, r0
 6498 19ee 0B46     		mov	r3, r1
 6499 19f0 40F20000 		movw	r0, #:lower16:.LC322
 6500 19f4 C0F20000 		movt	r0, #:upper16:.LC322
 6501 19f8 FFF7FEFF 		bl	printf
1596:.\console.c   **** 					printf_spc(20);
 6502              		.loc 1 1596 0
 6503 19fc 4FF01400 		mov	r0, #20
 6504 1a00 FFF7FEFF 		bl	printf_spc
1597:.\console.c   **** 					printf("ierr(T)=%+1.4f", (float)tilt_axis.mc.ierror);
 6505              		.loc 1 1597 0
 6506 1a04 40F20003 		movw	r3, #:lower16:tilt_axis
 6507 1a08 C0F20003 		movt	r3, #:upper16:tilt_axis
 6508 1a0c 1B6E     		ldr	r3, [r3, #96]	@ float
 6509 1a0e 1846     		mov	r0, r3
 6510 1a10 FFF7FEFF 		bl	__aeabi_f2d
 6511 1a14 0246     		mov	r2, r0
 6512 1a16 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 191


 6513 1a18 40F20000 		movw	r0, #:lower16:.LC323
 6514 1a1c C0F20000 		movt	r0, #:upper16:.LC323
 6515 1a20 FFF7FEFF 		bl	printf
1598:.\console.c   **** 					printf("\r\n");	
 6516              		.loc 1 1598 0
 6517 1a24 40F20000 		movw	r0, #:lower16:.LC42
 6518 1a28 C0F20000 		movt	r0, #:upper16:.LC42
 6519 1a2c FFF7FEFF 		bl	puts
1599:.\console.c   **** 					
1600:.\console.c   **** 					printf("cv(P)=%+1.4f", (float)pan_axis.mc.ctrl_var);
 6520              		.loc 1 1600 0
 6521 1a30 40F20003 		movw	r3, #:lower16:pan_axis
 6522 1a34 C0F20003 		movt	r3, #:upper16:pan_axis
 6523 1a38 1B6F     		ldr	r3, [r3, #112]	@ float
 6524 1a3a 1846     		mov	r0, r3
 6525 1a3c FFF7FEFF 		bl	__aeabi_f2d
 6526 1a40 0246     		mov	r2, r0
 6527 1a42 0B46     		mov	r3, r1
 6528 1a44 40F20000 		movw	r0, #:lower16:.LC324
 6529 1a48 C0F20000 		movt	r0, #:upper16:.LC324
 6530 1a4c FFF7FEFF 		bl	printf
1601:.\console.c   **** 					printf_spc(22);
 6531              		.loc 1 1601 0
 6532 1a50 4FF01600 		mov	r0, #22
 6533 1a54 FFF7FEFF 		bl	printf_spc
1602:.\console.c   **** 					printf("cv(T)=%+1.4f", (float)tilt_axis.mc.ctrl_var);
 6534              		.loc 1 1602 0
 6535 1a58 40F20003 		movw	r3, #:lower16:tilt_axis
 6536 1a5c C0F20003 		movt	r3, #:upper16:tilt_axis
 6537 1a60 1B6F     		ldr	r3, [r3, #112]	@ float
 6538 1a62 1846     		mov	r0, r3
 6539 1a64 FFF7FEFF 		bl	__aeabi_f2d
 6540 1a68 0246     		mov	r2, r0
 6541 1a6a 0B46     		mov	r3, r1
 6542 1a6c 40F20000 		movw	r0, #:lower16:.LC325
 6543 1a70 C0F20000 		movt	r0, #:upper16:.LC325
 6544 1a74 FFF7FEFF 		bl	printf
1603:.\console.c   **** 					printf("\r\n");	
 6545              		.loc 1 1603 0
 6546 1a78 40F20000 		movw	r0, #:lower16:.LC42
 6547 1a7c C0F20000 		movt	r0, #:upper16:.LC42
 6548 1a80 FFF7FEFF 		bl	puts
1604:.\console.c   **** 					
1605:.\console.c   **** 					printf("pwm_var(P)= %4i", (uint16)pan_axis.mc.pwm_var);
 6549              		.loc 1 1605 0
 6550 1a84 40F20003 		movw	r3, #:lower16:pan_axis
 6551 1a88 C0F20003 		movt	r3, #:upper16:pan_axis
 6552 1a8c B3F87430 		ldrh	r3, [r3, #116]
 6553 1a90 9BB2     		uxth	r3, r3
 6554 1a92 40F20000 		movw	r0, #:lower16:.LC326
 6555 1a96 C0F20000 		movt	r0, #:upper16:.LC326
 6556 1a9a 1946     		mov	r1, r3
 6557 1a9c FFF7FEFF 		bl	printf
1606:.\console.c   **** 					printf_spc(19);
 6558              		.loc 1 1606 0
 6559 1aa0 4FF01300 		mov	r0, #19
 6560 1aa4 FFF7FEFF 		bl	printf_spc
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 192


1607:.\console.c   **** 					printf("pwm_var(T)= %4i", (uint16)tilt_axis.mc.pwm_var);
 6561              		.loc 1 1607 0
 6562 1aa8 40F20003 		movw	r3, #:lower16:tilt_axis
 6563 1aac C0F20003 		movt	r3, #:upper16:tilt_axis
 6564 1ab0 B3F87430 		ldrh	r3, [r3, #116]
 6565 1ab4 9BB2     		uxth	r3, r3
 6566 1ab6 40F20000 		movw	r0, #:lower16:.LC327
 6567 1aba C0F20000 		movt	r0, #:upper16:.LC327
 6568 1abe 1946     		mov	r1, r3
 6569 1ac0 FFF7FEFF 		bl	printf
1608:.\console.c   **** 					printf("\r\n");					
 6570              		.loc 1 1608 0
 6571 1ac4 40F20000 		movw	r0, #:lower16:.LC42
 6572 1ac8 C0F20000 		movt	r0, #:upper16:.LC42
 6573 1acc FFF7FEFF 		bl	puts
1609:.\console.c   **** 
1610:.\console.c   **** 					strcpy(slegenda,"PAN  TORQUE:"); 
 6574              		.loc 1 1610 0
 6575 1ad0 40F20002 		movw	r2, #:lower16:slegenda
 6576 1ad4 C0F20002 		movt	r2, #:upper16:slegenda
 6577 1ad8 40F20003 		movw	r3, #:lower16:.LC328
 6578 1adc C0F20003 		movt	r3, #:upper16:.LC328
 6579 1ae0 1446     		mov	r4, r2
 6580 1ae2 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 6581 1ae4 07C4     		stmia	r4!, {r0, r1, r2}
 6582 1ae6 2370     		strb	r3, [r4, #0]
1611:.\console.c   **** 					print_hystogram_border(50, &slegenda[0]);    
 6583              		.loc 1 1611 0
 6584 1ae8 4FF03200 		mov	r0, #50
 6585 1aec 40F20001 		movw	r1, #:lower16:slegenda
 6586 1af0 C0F20001 		movt	r1, #:upper16:slegenda
 6587 1af4 FFF7FEFF 		bl	print_hystogram_border
1612:.\console.c   **** 					print_abs_linear_hystogram((int16)pan_axis.mc.ctrl_var, MOTOR_PWM_PERIOD_HALF, 50, &slegenda[0
 6588              		.loc 1 1612 0
 6589 1af8 40F20003 		movw	r3, #:lower16:pan_axis
 6590 1afc C0F20003 		movt	r3, #:upper16:pan_axis
 6591 1b00 1B6F     		ldr	r3, [r3, #112]	@ float
 6592 1b02 1846     		mov	r0, r3
 6593 1b04 FFF7FEFF 		bl	__aeabi_f2iz
 6594 1b08 0346     		mov	r3, r0
 6595 1b0a 9BB2     		uxth	r3, r3
 6596 1b0c 1BB2     		sxth	r3, r3
 6597 1b0e 1846     		mov	r0, r3
 6598 1b10 4FF40071 		mov	r1, #512
 6599 1b14 4FF03202 		mov	r2, #50
 6600 1b18 40F20003 		movw	r3, #:lower16:slegenda
 6601 1b1c C0F20003 		movt	r3, #:upper16:slegenda
 6602 1b20 FFF7FEFF 		bl	print_abs_linear_hystogram
1613:.\console.c   **** //					print_hystogram_border(50, &slegenda[0]);					
1614:.\console.c   **** //					printf("\r\n");
1615:.\console.c   **** 					
1616:.\console.c   **** 					strcpy(slegenda,"TILT TORQUE:"); 
 6603              		.loc 1 1616 0
 6604 1b24 40F20002 		movw	r2, #:lower16:slegenda
 6605 1b28 C0F20002 		movt	r2, #:upper16:slegenda
 6606 1b2c 40F20003 		movw	r3, #:lower16:.LC329
 6607 1b30 C0F20003 		movt	r3, #:upper16:.LC329
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 193


 6608 1b34 1446     		mov	r4, r2
 6609 1b36 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 6610 1b38 07C4     		stmia	r4!, {r0, r1, r2}
 6611 1b3a 2370     		strb	r3, [r4, #0]
1617:.\console.c   **** 					print_abs_linear_hystogram((int16)tilt_axis.mc.ctrl_var, MOTOR_PWM_PERIOD_HALF, 50, &slegenda[
 6612              		.loc 1 1617 0
 6613 1b3c 40F20003 		movw	r3, #:lower16:tilt_axis
 6614 1b40 C0F20003 		movt	r3, #:upper16:tilt_axis
 6615 1b44 1B6F     		ldr	r3, [r3, #112]	@ float
 6616 1b46 1846     		mov	r0, r3
 6617 1b48 FFF7FEFF 		bl	__aeabi_f2iz
 6618 1b4c 0346     		mov	r3, r0
 6619 1b4e 9BB2     		uxth	r3, r3
 6620 1b50 1BB2     		sxth	r3, r3
 6621 1b52 1846     		mov	r0, r3
 6622 1b54 4FF40071 		mov	r1, #512
 6623 1b58 4FF03202 		mov	r2, #50
 6624 1b5c 40F20003 		movw	r3, #:lower16:slegenda
 6625 1b60 C0F20003 		movt	r3, #:upper16:slegenda
 6626 1b64 FFF7FEFF 		bl	print_abs_linear_hystogram
1618:.\console.c   **** 					print_hystogram_border(50, &slegenda[0]); 		
 6627              		.loc 1 1618 0
 6628 1b68 4FF03200 		mov	r0, #50
 6629 1b6c 40F20001 		movw	r1, #:lower16:slegenda
 6630 1b70 C0F20001 		movt	r1, #:upper16:slegenda
 6631 1b74 FFF7FEFF 		bl	print_hystogram_border
1619:.\console.c   **** 					
1620:.\console.c   **** 					printf("\r\n");
 6632              		.loc 1 1620 0
 6633 1b78 40F20000 		movw	r0, #:lower16:.LC42
 6634 1b7c C0F20000 		movt	r0, #:upper16:.LC42
 6635 1b80 FFF7FEFF 		bl	puts
1621:.\console.c   **** 					printf("MACHINE\r\n");
 6636              		.loc 1 1621 0
 6637 1b84 40F20000 		movw	r0, #:lower16:.LC330
 6638 1b88 C0F20000 		movt	r0, #:upper16:.LC330
 6639 1b8c FFF7FEFF 		bl	puts
1622:.\console.c   **** 					printf("-------\r\n");					
 6640              		.loc 1 1622 0
 6641 1b90 40F20000 		movw	r0, #:lower16:.LC331
 6642 1b94 C0F20000 		movt	r0, #:upper16:.LC331
 6643 1b98 FFF7FEFF 		bl	puts
1623:.\console.c   **** 					printf("Power Status =");
 6644              		.loc 1 1623 0
 6645 1b9c 40F20000 		movw	r0, #:lower16:.LC332
 6646 1ba0 C0F20000 		movt	r0, #:upper16:.LC332
 6647 1ba4 FFF7FEFF 		bl	printf
1624:.\console.c   **** 					if (machine_state == GOBEE_DEENERGIZED)
 6648              		.loc 1 1624 0
 6649 1ba8 40F20003 		movw	r3, #:lower16:machine_state
 6650 1bac C0F20003 		movt	r3, #:upper16:machine_state
 6651 1bb0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6652 1bb2 062B     		cmp	r3, #6
 6653 1bb4 06D1     		bne	.L228
1625:.\console.c   **** 					{
1626:.\console.c   **** 						printf(" Global DEENERGIZED\r\n");	/* Motor Control Power Global Deenergized */				
 6654              		.loc 1 1626 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 194


 6655 1bb6 40F20000 		movw	r0, #:lower16:.LC333
 6656 1bba C0F20000 		movt	r0, #:upper16:.LC333
 6657 1bbe FFF7FEFF 		bl	puts
 6658 1bc2 13E0     		b	.L229
 6659              	.L228:
1627:.\console.c   **** 					}		
1628:.\console.c   **** 					else if (machine_state == GOBEE_ENERGIZED)
 6660              		.loc 1 1628 0
 6661 1bc4 40F20003 		movw	r3, #:lower16:machine_state
 6662 1bc8 C0F20003 		movt	r3, #:upper16:machine_state
 6663 1bcc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6664 1bce 052B     		cmp	r3, #5
 6665 1bd0 06D1     		bne	.L230
1629:.\console.c   **** 					{
1630:.\console.c   **** 						printf(" Global ENERGIZED!\r\n");	/* Motor Control Power Global Energized */		
 6666              		.loc 1 1630 0
 6667 1bd2 40F20000 		movw	r0, #:lower16:.LC334
 6668 1bd6 C0F20000 		movt	r0, #:upper16:.LC334
 6669 1bda FFF7FEFF 		bl	puts
 6670 1bde 05E0     		b	.L229
 6671              	.L230:
1631:.\console.c   **** 					}			
1632:.\console.c   **** 					else
1633:.\console.c   **** 					{
1634:.\console.c   **** 						printf(" DANGER!!! INTERNAL FIRMWARE FAULT\r\n");	/* Firmware Fault */		
 6672              		.loc 1 1634 0
 6673 1be0 40F20000 		movw	r0, #:lower16:.LC335
 6674 1be4 C0F20000 		movt	r0, #:upper16:.LC335
 6675 1be8 FFF7FEFF 		bl	puts
 6676              	.L229:
1635:.\console.c   **** 					}	
1636:.\console.c   **** 					printf("ctrl isr counters START=%5i STOP=%5i  \r\n", (uint16)isr_START_check_counter,(uint16)i
 6677              		.loc 1 1636 0
 6678 1bec 40F20003 		movw	r3, #:lower16:isr_START_check_counter
 6679 1bf0 C0F20003 		movt	r3, #:upper16:isr_START_check_counter
 6680 1bf4 1B88     		ldrh	r3, [r3, #0]
 6681 1bf6 1A46     		mov	r2, r3
 6682 1bf8 40F20003 		movw	r3, #:lower16:isr_STOP_check_counter
 6683 1bfc C0F20003 		movt	r3, #:upper16:isr_STOP_check_counter
 6684 1c00 1B88     		ldrh	r3, [r3, #0]
 6685 1c02 40F20000 		movw	r0, #:lower16:.LC336
 6686 1c06 C0F20000 		movt	r0, #:upper16:.LC336
 6687 1c0a 1146     		mov	r1, r2
 6688 1c0c 1A46     		mov	r2, r3
 6689 1c0e FFF7FEFF 		bl	printf
1637:.\console.c   **** 	
1638:.\console.c   **** 					printf("\r\n");						
 6690              		.loc 1 1638 0
 6691 1c12 40F20000 		movw	r0, #:lower16:.LC42
 6692 1c16 C0F20000 		movt	r0, #:upper16:.LC42
 6693 1c1a FFF7FEFF 		bl	puts
1639:.\console.c   **** 					CyDelay(50);
 6694              		.loc 1 1639 0
 6695 1c1e 4FF03200 		mov	r0, #50
 6696 1c22 FFF7FEFF 		bl	CyDelay
 6697              	.L227:
1536:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 195


 6698              		.loc 1 1536 0 discriminator 1
 6699 1c26 FFF7FEFF 		bl	AnyButtonPressed
 6700 1c2a 0346     		mov	r3, r0
 6701 1c2c 002B     		cmp	r3, #0
 6702 1c2e 3FF43FAD 		beq	.L231
1640:.\console.c   **** 				}
1641:.\console.c   **** 				printf("\r\n");	
 6703              		.loc 1 1641 0
 6704 1c32 40F20000 		movw	r0, #:lower16:.LC42
 6705 1c36 C0F20000 		movt	r0, #:upper16:.LC42
 6706 1c3a FFF7FEFF 		bl	puts
1642:.\console.c   **** 				goto exitpars;	
 6707              		.loc 1 1642 0
 6708 1c3e 05F087B9 		b	.L131
 6709              	.L226:
1643:.\console.c   **** 			}
1644:.\console.c   **** 			// SHOW CONTROL END
1645:.\console.c   **** 			
1646:.\console.c   **** 			
1647:.\console.c   **** 			// SHOW ANALOG INPUTS
1648:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "analogs") == 0)	
 6710              		.loc 1 1648 0
 6711 1c42 C548     		ldr	r0, .L724+8
 6712 1c44 40F20001 		movw	r1, #:lower16:.LC337
 6713 1c48 C0F20001 		movt	r1, #:upper16:.LC337
 6714 1c4c FFF7FEFF 		bl	strcmp
 6715 1c50 0346     		mov	r3, r0
 6716 1c52 002B     		cmp	r3, #0
 6717 1c54 00F08C80 		beq	.L692
1649:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ana") == 0))
 6718              		.loc 1 1649 0
 6719 1c58 BF48     		ldr	r0, .L724+8
 6720 1c5a 40F20001 		movw	r1, #:lower16:.LC338
 6721 1c5e C0F20001 		movt	r1, #:upper16:.LC338
 6722 1c62 FFF7FEFF 		bl	strcmp
 6723 1c66 0346     		mov	r3, r0
 6724 1c68 002B     		cmp	r3, #0
 6725 1c6a 40F08A80 		bne	.L233
1650:.\console.c   **** 			{
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6726              		.loc 1 1651 0
 6727 1c6e 7FE0     		b	.L692
 6728              	.L235:
1652:.\console.c   **** 				{			
1653:.\console.c   **** 					printf("I_P=%5d",     (int16)AdcValue[SENSE_IPAN]);
 6729              		.loc 1 1653 0
 6730 1c70 40F20003 		movw	r3, #:lower16:AdcValue
 6731 1c74 C0F20003 		movt	r3, #:upper16:AdcValue
 6732 1c78 1B88     		ldrh	r3, [r3, #0]
 6733 1c7a 1BB2     		sxth	r3, r3
 6734 1c7c 40F20000 		movw	r0, #:lower16:.LC339
 6735 1c80 C0F20000 		movt	r0, #:upper16:.LC339
 6736 1c84 1946     		mov	r1, r3
 6737 1c86 FFF7FEFF 		bl	printf
1654:.\console.c   **** 					printf(" I_T=%5d", (int16)AdcValue[SENSE_ITILT]);					
 6738              		.loc 1 1654 0
 6739 1c8a 40F20003 		movw	r3, #:lower16:AdcValue
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 196


 6740 1c8e C0F20003 		movt	r3, #:upper16:AdcValue
 6741 1c92 5B88     		ldrh	r3, [r3, #2]
 6742 1c94 1BB2     		sxth	r3, r3
 6743 1c96 40F20000 		movw	r0, #:lower16:.LC340
 6744 1c9a C0F20000 		movt	r0, #:upper16:.LC340
 6745 1c9e 1946     		mov	r1, r3
 6746 1ca0 FFF7FEFF 		bl	printf
1655:.\console.c   **** 					printf(" Vcc=%5d",    (int16)AdcValue[SENSE_VCC]);
 6747              		.loc 1 1655 0
 6748 1ca4 40F20003 		movw	r3, #:lower16:AdcValue
 6749 1ca8 C0F20003 		movt	r3, #:upper16:AdcValue
 6750 1cac 9B88     		ldrh	r3, [r3, #4]
 6751 1cae 1BB2     		sxth	r3, r3
 6752 1cb0 40F20000 		movw	r0, #:lower16:.LC341
 6753 1cb4 C0F20000 		movt	r0, #:upper16:.LC341
 6754 1cb8 1946     		mov	r1, r3
 6755 1cba FFF7FEFF 		bl	printf
1656:.\console.c   **** 					printf(" Ax=%5d",     (int16)AdcValue[ADXL_X]);
 6756              		.loc 1 1656 0
 6757 1cbe 40F20003 		movw	r3, #:lower16:AdcValue
 6758 1cc2 C0F20003 		movt	r3, #:upper16:AdcValue
 6759 1cc6 DB88     		ldrh	r3, [r3, #6]
 6760 1cc8 1BB2     		sxth	r3, r3
 6761 1cca 40F20000 		movw	r0, #:lower16:.LC342
 6762 1cce C0F20000 		movt	r0, #:upper16:.LC342
 6763 1cd2 1946     		mov	r1, r3
 6764 1cd4 FFF7FEFF 		bl	printf
1657:.\console.c   **** 					printf(" Ay=%5d",     (int16)AdcValue[ADXL_Y]);
 6765              		.loc 1 1657 0
 6766 1cd8 40F20003 		movw	r3, #:lower16:AdcValue
 6767 1cdc C0F20003 		movt	r3, #:upper16:AdcValue
 6768 1ce0 1B89     		ldrh	r3, [r3, #8]
 6769 1ce2 1BB2     		sxth	r3, r3
 6770 1ce4 40F20000 		movw	r0, #:lower16:.LC343
 6771 1ce8 C0F20000 		movt	r0, #:upper16:.LC343
 6772 1cec 1946     		mov	r1, r3
 6773 1cee FFF7FEFF 		bl	printf
1658:.\console.c   **** 					printf(" Az=%5d",     (int16)AdcValue[ADXL_Z]);
 6774              		.loc 1 1658 0
 6775 1cf2 40F20003 		movw	r3, #:lower16:AdcValue
 6776 1cf6 C0F20003 		movt	r3, #:upper16:AdcValue
 6777 1cfa 5B89     		ldrh	r3, [r3, #10]
 6778 1cfc 1BB2     		sxth	r3, r3
 6779 1cfe 40F20000 		movw	r0, #:lower16:.LC344
 6780 1d02 C0F20000 		movt	r0, #:upper16:.LC344
 6781 1d06 1946     		mov	r1, r3
 6782 1d08 FFF7FEFF 		bl	printf
1659:.\console.c   **** 					printf(" ABS_P=%5d",     (int16)AdcValue[HOME_PAN_ABSV]);
 6783              		.loc 1 1659 0
 6784 1d0c 40F20003 		movw	r3, #:lower16:AdcValue
 6785 1d10 C0F20003 		movt	r3, #:upper16:AdcValue
 6786 1d14 9B89     		ldrh	r3, [r3, #12]
 6787 1d16 1BB2     		sxth	r3, r3
 6788 1d18 40F20000 		movw	r0, #:lower16:.LC345
 6789 1d1c C0F20000 		movt	r0, #:upper16:.LC345
 6790 1d20 1946     		mov	r1, r3
 6791 1d22 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 197


1660:.\console.c   **** 					printf(" ABS_T=%5d",     (int16)AdcValue[HOME_TILT_ABSV]);
 6792              		.loc 1 1660 0
 6793 1d26 40F20003 		movw	r3, #:lower16:AdcValue
 6794 1d2a C0F20003 		movt	r3, #:upper16:AdcValue
 6795 1d2e DB89     		ldrh	r3, [r3, #14]
 6796 1d30 1BB2     		sxth	r3, r3
 6797 1d32 40F20000 		movw	r0, #:lower16:.LC346
 6798 1d36 C0F20000 		movt	r0, #:upper16:.LC346
 6799 1d3a 1946     		mov	r1, r3
 6800 1d3c FFF7FEFF 		bl	printf
1661:.\console.c   **** 					printf(" astim=%5d",     (int16)AdcValue[CTRL_IN_ASTIM]);
 6801              		.loc 1 1661 0
 6802 1d40 40F20003 		movw	r3, #:lower16:AdcValue
 6803 1d44 C0F20003 		movt	r3, #:upper16:AdcValue
 6804 1d48 1B8A     		ldrh	r3, [r3, #16]
 6805 1d4a 1BB2     		sxth	r3, r3
 6806 1d4c 40F20000 		movw	r0, #:lower16:.LC347
 6807 1d50 C0F20000 		movt	r0, #:upper16:.LC347
 6808 1d54 1946     		mov	r1, r3
 6809 1d56 FFF7FEFF 		bl	printf
1662:.\console.c   **** 					
1663:.\console.c   **** 					printf("\r\n");	
 6810              		.loc 1 1663 0
 6811 1d5a 40F20000 		movw	r0, #:lower16:.LC42
 6812 1d5e C0F20000 		movt	r0, #:upper16:.LC42
 6813 1d62 FFF7FEFF 		bl	puts
1664:.\console.c   **** 					CyDelay(50);
 6814              		.loc 1 1664 0
 6815 1d66 4FF03200 		mov	r0, #50
 6816 1d6a FFF7FEFF 		bl	CyDelay
 6817 1d6e 00E0     		b	.L234
 6818              	.L692:
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6819              		.loc 1 1651 0
 6820 1d70 00BF     		nop
 6821              	.L234:
1651:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6822              		.loc 1 1651 0 is_stmt 0 discriminator 1
 6823 1d72 FFF7FEFF 		bl	AnyButtonPressed
 6824 1d76 0346     		mov	r3, r0
 6825 1d78 002B     		cmp	r3, #0
 6826 1d7a 3FF479AF 		beq	.L235
1665:.\console.c   **** 				}
1666:.\console.c   **** 				goto exitpars;	
 6827              		.loc 1 1666 0 is_stmt 1
 6828 1d7e 05F0E7B8 		b	.L131
 6829              	.L233:
1667:.\console.c   **** 			}
1668:.\console.c   **** 			// END SHOW ANALOG INPUTS
1669:.\console.c   **** 
1670:.\console.c   **** 			
1671:.\console.c   **** 			// SHOW VCC
1672:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "vcc") == 0)	
 6830              		.loc 1 1672 0
 6831 1d82 7548     		ldr	r0, .L724+8
 6832 1d84 40F20001 		movw	r1, #:lower16:.LC348
 6833 1d88 C0F20001 		movt	r1, #:upper16:.LC348
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 198


 6834 1d8c FFF7FEFF 		bl	strcmp
 6835 1d90 0346     		mov	r3, r0
 6836 1d92 002B     		cmp	r3, #0
 6837 1d94 35D1     		bne	.L236
1673:.\console.c   **** 			{
1674:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6838              		.loc 1 1674 0
 6839 1d96 2DE0     		b	.L237
 6840              	.L238:
1675:.\console.c   **** 				{
1676:.\console.c   **** 					// ADC_Count = VCC[V] * 5k/55k * (1+100/1000) * ADC_MAX_UNSGN/5  (14 bit resolution)
1677:.\console.c   **** 					// VCC[V] = ADC_Count * 50/ADC_MAX_UNSGN
1678:.\console.c   **** 					printf("VCC = %3.1f [V]\r\n", (float)AdcValue[SENSE_VCC]*5.0/ADC_MAX_COUNTS);
 6841              		.loc 1 1678 0
 6842 1d98 40F20003 		movw	r3, #:lower16:AdcValue
 6843 1d9c C0F20003 		movt	r3, #:upper16:AdcValue
 6844 1da0 9B88     		ldrh	r3, [r3, #4]
 6845 1da2 1BB2     		sxth	r3, r3
 6846 1da4 1846     		mov	r0, r3
 6847 1da6 FFF7FEFF 		bl	__aeabi_i2f
 6848 1daa 0346     		mov	r3, r0
 6849 1dac 1846     		mov	r0, r3
 6850 1dae FFF7FEFF 		bl	__aeabi_f2d
 6851 1db2 0246     		mov	r2, r0
 6852 1db4 0B46     		mov	r3, r1
 6853 1db6 1046     		mov	r0, r2
 6854 1db8 1946     		mov	r1, r3
 6855 1dba 4FF00002 		mov	r2, #0
 6856 1dbe 4FF00003 		mov	r3, #0
 6857 1dc2 C4F21403 		movt	r3, 16404
 6858 1dc6 FFF7FEFF 		bl	__aeabi_dmul
 6859 1dca 0246     		mov	r2, r0
 6860 1dcc 0B46     		mov	r3, r1
 6861 1dce 1046     		mov	r0, r2
 6862 1dd0 1946     		mov	r1, r3
 6863 1dd2 5FA3     		adr	r3, .L724
 6864 1dd4 D3E90023 		ldrd	r2, [r3]
 6865 1dd8 FFF7FEFF 		bl	__aeabi_ddiv
 6866 1ddc 0246     		mov	r2, r0
 6867 1dde 0B46     		mov	r3, r1
 6868 1de0 40F20000 		movw	r0, #:lower16:.LC349
 6869 1de4 C0F20000 		movt	r0, #:upper16:.LC349
 6870 1de8 FFF7FEFF 		bl	printf
1679:.\console.c   **** 					CyDelay(100);
 6871              		.loc 1 1679 0
 6872 1dec 4FF06400 		mov	r0, #100
 6873 1df0 FFF7FEFF 		bl	CyDelay
 6874              	.L237:
1674:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6875              		.loc 1 1674 0 discriminator 1
 6876 1df4 FFF7FEFF 		bl	AnyButtonPressed
 6877 1df8 0346     		mov	r3, r0
 6878 1dfa 002B     		cmp	r3, #0
 6879 1dfc CCD0     		beq	.L238
1680:.\console.c   **** 				}
1681:.\console.c   **** 				goto exitpars;	
 6880              		.loc 1 1681 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 199


 6881 1dfe 05F0A7B8 		b	.L131
 6882              	.L236:
1682:.\console.c   **** 			}
1683:.\console.c   **** 			// END SHOW VCC
1684:.\console.c   **** 			
1685:.\console.c   **** 			// SHOW CURRENT
1686:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "current") == 0) ||
 6883              		.loc 1 1686 0
 6884 1e02 5548     		ldr	r0, .L724+8
 6885 1e04 40F20001 		movw	r1, #:lower16:.LC350
 6886 1e08 C0F20001 		movt	r1, #:upper16:.LC350
 6887 1e0c FFF7FEFF 		bl	strcmp
 6888 1e10 0346     		mov	r3, r0
 6889 1e12 002B     		cmp	r3, #0
 6890 1e14 65D0     		beq	.L693
1687:.\console.c   **** 				(strcmp(actual_cmd.parameter, "i") == 0))
 6891              		.loc 1 1687 0 discriminator 1
 6892 1e16 5048     		ldr	r0, .L724+8
 6893 1e18 40F20001 		movw	r1, #:lower16:.LC351
 6894 1e1c C0F20001 		movt	r1, #:upper16:.LC351
 6895 1e20 FFF7FEFF 		bl	strcmp
 6896 1e24 0346     		mov	r3, r0
1686:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "current") == 0) ||
 6897              		.loc 1 1686 0 discriminator 1
 6898 1e26 002B     		cmp	r3, #0
 6899 1e28 63D1     		bne	.L240
1688:.\console.c   **** 			{
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6900              		.loc 1 1689 0
 6901 1e2a 5AE0     		b	.L693
 6902              	.L246:
1690:.\console.c   **** 				{					
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
1692:.\console.c   **** 							(float)pan_axis.mc.current,
 6903              		.loc 1 1692 0
 6904 1e2c 40F20003 		movw	r3, #:lower16:pan_axis
 6905 1e30 C0F20003 		movt	r3, #:upper16:pan_axis
 6906 1e34 9B6F     		ldr	r3, [r3, #120]	@ float
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
 6907              		.loc 1 1691 0
 6908 1e36 1846     		mov	r0, r3
 6909 1e38 FFF7FEFF 		bl	__aeabi_f2d
 6910 1e3c 0446     		mov	r4, r0
 6911 1e3e 0D46     		mov	r5, r1
1693:.\console.c   **** 							(float)tilt_axis.mc.current);
 6912              		.loc 1 1693 0
 6913 1e40 40F20003 		movw	r3, #:lower16:tilt_axis
 6914 1e44 C0F20003 		movt	r3, #:upper16:tilt_axis
 6915 1e48 9B6F     		ldr	r3, [r3, #120]	@ float
1691:.\console.c   **** 					printf("i(t)_PAN = %5.4f [A]  i(t)_TILT = %5.4f [A]",
 6916              		.loc 1 1691 0
 6917 1e4a 1846     		mov	r0, r3
 6918 1e4c FFF7FEFF 		bl	__aeabi_f2d
 6919 1e50 0246     		mov	r2, r0
 6920 1e52 0B46     		mov	r3, r1
 6921 1e54 CDE90023 		strd	r2, [sp]
 6922 1e58 40F20000 		movw	r0, #:lower16:.LC352
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 200


 6923 1e5c C0F20000 		movt	r0, #:upper16:.LC352
 6924 1e60 2246     		mov	r2, r4
 6925 1e62 2B46     		mov	r3, r5
 6926 1e64 FFF7FEFF 		bl	printf
1694:.\console.c   **** 					
1695:.\console.c   **** 					printf("     Drive Status=%2u ", (int16)Status_Reg_MOTORS_Read());
 6927              		.loc 1 1695 0
 6928 1e68 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 6929 1e6c 0346     		mov	r3, r0
 6930 1e6e 40F20000 		movw	r0, #:lower16:.LC353
 6931 1e72 C0F20000 		movt	r0, #:upper16:.LC353
 6932 1e76 1946     		mov	r1, r3
 6933 1e78 FFF7FEFF 		bl	printf
1696:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_PAN_MOT_FL) == 0)
 6934              		.loc 1 1696 0
 6935 1e7c FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 6936 1e80 0346     		mov	r3, r0
 6937 1e82 03F00103 		and	r3, r3, #1
 6938 1e86 002B     		cmp	r3, #0
 6939 1e88 06D1     		bne	.L242
1697:.\console.c   **** 					{
1698:.\console.c   **** 						printf("(i(t)_PAN PEAK!) ");	
 6940              		.loc 1 1698 0
 6941 1e8a 40F20000 		movw	r0, #:lower16:.LC354
 6942 1e8e C0F20000 		movt	r0, #:upper16:.LC354
 6943 1e92 FFF7FEFF 		bl	printf
 6944 1e96 05E0     		b	.L243
 6945              	.L242:
1699:.\console.c   **** 					}
1700:.\console.c   **** 					else
1701:.\console.c   **** 					{
1702:.\console.c   **** 						printf("(i(t)_PAN OK!)  ");						
 6946              		.loc 1 1702 0
 6947 1e98 40F20000 		movw	r0, #:lower16:.LC355
 6948 1e9c C0F20000 		movt	r0, #:upper16:.LC355
 6949 1ea0 FFF7FEFF 		bl	printf
 6950              	.L243:
1703:.\console.c   **** 					}
1704:.\console.c   **** 					
1705:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_TILT_MOT_FL) == 0)
 6951              		.loc 1 1705 0
 6952 1ea4 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 6953 1ea8 0346     		mov	r3, r0
 6954 1eaa 03F00203 		and	r3, r3, #2
 6955 1eae 002B     		cmp	r3, #0
 6956 1eb0 06D1     		bne	.L244
1706:.\console.c   **** 					{
1707:.\console.c   **** 						printf("(i(t)_TILT PEAK!)");	
 6957              		.loc 1 1707 0
 6958 1eb2 40F20000 		movw	r0, #:lower16:.LC356
 6959 1eb6 C0F20000 		movt	r0, #:upper16:.LC356
 6960 1eba FFF7FEFF 		bl	printf
 6961 1ebe 05E0     		b	.L245
 6962              	.L244:
1708:.\console.c   **** 					}
1709:.\console.c   **** 					else
1710:.\console.c   **** 					{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 201


1711:.\console.c   **** 						printf("(i(t)_TILT OK!)");						
 6963              		.loc 1 1711 0
 6964 1ec0 40F20000 		movw	r0, #:lower16:.LC357
 6965 1ec4 C0F20000 		movt	r0, #:upper16:.LC357
 6966 1ec8 FFF7FEFF 		bl	printf
 6967              	.L245:
1712:.\console.c   **** 					}	
1713:.\console.c   **** 					CyDelay(100);
 6968              		.loc 1 1713 0
 6969 1ecc 4FF06400 		mov	r0, #100
 6970 1ed0 FFF7FEFF 		bl	CyDelay
1714:.\console.c   **** 					printf("\r\n");
 6971              		.loc 1 1714 0
 6972 1ed4 40F20000 		movw	r0, #:lower16:.LC42
 6973 1ed8 C0F20000 		movt	r0, #:upper16:.LC42
 6974 1edc FFF7FEFF 		bl	puts
 6975 1ee0 00E0     		b	.L241
 6976              	.L693:
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6977              		.loc 1 1689 0
 6978 1ee2 00BF     		nop
 6979              	.L241:
1689:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 6980              		.loc 1 1689 0 is_stmt 0 discriminator 1
 6981 1ee4 FFF7FEFF 		bl	AnyButtonPressed
 6982 1ee8 0346     		mov	r3, r0
 6983 1eea 002B     		cmp	r3, #0
 6984 1eec 9ED0     		beq	.L246
1715:.\console.c   **** 				}
1716:.\console.c   **** 				goto exitpars;	
 6985              		.loc 1 1716 0 is_stmt 1
 6986 1eee 05F02FB8 		b	.L131
 6987              	.L240:
1717:.\console.c   **** 			}
1718:.\console.c   **** 			// END SHOW CURRENT
1719:.\console.c   **** 
1720:.\console.c   **** 			
1721:.\console.c   **** 			// SHOW PAN MOTOR TORQUE STATISTICS
1722:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmtorque") == 0) ||
 6988              		.loc 1 1722 0
 6989 1ef2 1948     		ldr	r0, .L724+8
 6990 1ef4 40F20001 		movw	r1, #:lower16:.LC358
 6991 1ef8 C0F20001 		movt	r1, #:upper16:.LC358
 6992 1efc FFF7FEFF 		bl	strcmp
 6993 1f00 0346     		mov	r3, r0
 6994 1f02 002B     		cmp	r3, #0
 6995 1f04 0AD0     		beq	.L247
1723:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pmt") == 0))
 6996              		.loc 1 1723 0 discriminator 1
 6997 1f06 1448     		ldr	r0, .L724+8
 6998 1f08 40F20001 		movw	r1, #:lower16:.LC359
 6999 1f0c C0F20001 		movt	r1, #:upper16:.LC359
 7000 1f10 FFF7FEFF 		bl	strcmp
 7001 1f14 0346     		mov	r3, r0
1722:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmtorque") == 0) ||
 7002              		.loc 1 1722 0 discriminator 1
 7003 1f16 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 202


 7004 1f18 40F0CB80 		bne	.L248
 7005              	.L247:
1724:.\console.c   **** 			{
1725:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7006              		.loc 1 1725 0
 7007 1f1c FFF7FEFF 		bl	isr_TORQUESTAT_Start
1726:.\console.c   **** 				
1727:.\console.c   **** 				current_statistics_start(&pan_current_stat);		/* start Pan current  statistics			*/
 7008              		.loc 1 1727 0
 7009 1f20 40F20000 		movw	r0, #:lower16:pan_current_stat
 7010 1f24 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7011 1f28 FFF7FEFF 		bl	current_statistics_start
1728:.\console.c   **** 				Battery_Energy_Integral_Reset(&pan_torque_stat);	/* Battery Energy Integral Reset 			*/
 7012              		.loc 1 1728 0
 7013 1f2c 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7014 1f30 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7015 1f34 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1729:.\console.c   **** 				
1730:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7016              		.loc 1 1730 0
 7017 1f38 40F20000 		movw	r0, #:lower16:.LC360
 7018 1f3c C0F20000 		movt	r0, #:upper16:.LC360
 7019 1f40 FFF7FEFF 		bl	puts
1731:.\console.c   **** 				CyDelay(500);
 7020              		.loc 1 1731 0
 7021 1f44 4FF4FA70 		mov	r0, #500
 7022 1f48 FFF7FEFF 		bl	CyDelay
1732:.\console.c   **** 				
1733:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7023              		.loc 1 1733 0
 7024 1f4c 74E0     		b	.L249
 7025              	.L725:
 7026 1f4e 00BF     		.align	3
 7027              	.L724:
 7028 1f50 00000000 		.word	0
 7029 1f54 00FEAF40 		.word	1085275648
 7030 1f58 0F000000 		.word	actual_cmd+15
 7031              	.L250:
1734:.\console.c   **** 				{
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
1736:.\console.c   **** 							(float)i_t(&pan_torque_stat),
 7032              		.loc 1 1736 0
 7033 1f5c 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7034 1f60 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7035 1f64 FFF7FEFF 		bl	i_t
 7036 1f68 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7037              		.loc 1 1735 0
 7038 1f6a 1846     		mov	r0, r3
 7039 1f6c FFF7FEFF 		bl	__aeabi_f2d
 7040 1f70 0446     		mov	r4, r0
 7041 1f72 0D46     		mov	r5, r1
1737:.\console.c   **** 							(float)i_noload(),
 7042              		.loc 1 1737 0
 7043 1f74 FFF7FEFF 		bl	i_noload
 7044 1f78 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 203


 7045              		.loc 1 1735 0
 7046 1f7a 1846     		mov	r0, r3
 7047 1f7c FFF7FEFF 		bl	__aeabi_f2d
 7048 1f80 C7E90401 		strd	r0, [r7, #16]
1738:.\console.c   **** 							(float)TMOT_t(&pan_torque_stat),							
 7049              		.loc 1 1738 0
 7050 1f84 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7051 1f88 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7052 1f8c FFF7FEFF 		bl	TMOT_t
 7053 1f90 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7054              		.loc 1 1735 0
 7055 1f92 1846     		mov	r0, r3
 7056 1f94 FFF7FEFF 		bl	__aeabi_f2d
 7057 1f98 C7E90201 		strd	r0, [r7, #8]
1739:.\console.c   **** 							(float)i_max(&pan_current_stat),
 7058              		.loc 1 1739 0
 7059 1f9c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7060 1fa0 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7061 1fa4 FFF7FEFF 		bl	i_max
 7062 1fa8 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7063              		.loc 1 1735 0
 7064 1faa 1846     		mov	r0, r3
 7065 1fac FFF7FEFF 		bl	__aeabi_f2d
 7066 1fb0 C7E90001 		strd	r0, [r7]
1740:.\console.c   **** 							(float)TMOT_max(&pan_current_stat),
 7067              		.loc 1 1740 0
 7068 1fb4 40F20000 		movw	r0, #:lower16:pan_current_stat
 7069 1fb8 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7070 1fbc FFF7FEFF 		bl	TMOT_max
 7071 1fc0 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7072              		.loc 1 1735 0
 7073 1fc2 1846     		mov	r0, r3
 7074 1fc4 FFF7FEFF 		bl	__aeabi_f2d
 7075 1fc8 8246     		mov	sl, r0
 7076 1fca 8B46     		mov	fp, r1
1741:.\console.c   **** 							(float)i_mean(&pan_current_stat),
 7077              		.loc 1 1741 0
 7078 1fcc 40F20000 		movw	r0, #:lower16:pan_current_stat
 7079 1fd0 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7080 1fd4 FFF7FEFF 		bl	i_mean
 7081 1fd8 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7082              		.loc 1 1735 0
 7083 1fda 1846     		mov	r0, r3
 7084 1fdc FFF7FEFF 		bl	__aeabi_f2d
 7085 1fe0 8046     		mov	r8, r0
 7086 1fe2 8946     		mov	r9, r1
1742:.\console.c   **** 							(float)TMOT_mean(&pan_current_stat));
 7087              		.loc 1 1742 0
 7088 1fe4 40F20000 		movw	r0, #:lower16:pan_current_stat
 7089 1fe8 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7090 1fec FFF7FEFF 		bl	TMOT_mean
 7091 1ff0 0346     		mov	r3, r0
1735:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 204


 7092              		.loc 1 1735 0
 7093 1ff2 1846     		mov	r0, r3
 7094 1ff4 FFF7FEFF 		bl	__aeabi_f2d
 7095 1ff8 0246     		mov	r2, r0
 7096 1ffa 0B46     		mov	r3, r1
 7097 1ffc D7E90401 		ldrd	r0, [r7, #16]
 7098 2000 CDE90001 		strd	r0, [sp]
 7099 2004 D7E90201 		ldrd	r0, [r7, #8]
 7100 2008 CDE90201 		strd	r0, [sp, #8]
 7101 200c D7E90001 		ldrd	r0, [r7]
 7102 2010 CDE90401 		strd	r0, [sp, #16]
 7103 2014 CDE906AB 		strd	sl, [sp, #24]
 7104 2018 CDE90889 		strd	r8, [sp, #32]
 7105 201c CDE90A23 		strd	r2, [sp, #40]
 7106 2020 40F20000 		movw	r0, #:lower16:.LC361
 7107 2024 C0F20000 		movt	r0, #:upper16:.LC361
 7108 2028 2246     		mov	r2, r4
 7109 202a 2B46     		mov	r3, r5
 7110 202c FFF7FEFF 		bl	printf
1743:.\console.c   **** 					
1744:.\console.c   **** 					CyDelay(30);
 7111              		.loc 1 1744 0
 7112 2030 4FF01E00 		mov	r0, #30
 7113 2034 FFF7FEFF 		bl	CyDelay
 7114              	.L249:
1733:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7115              		.loc 1 1733 0 discriminator 1
 7116 2038 FFF7FEFF 		bl	AnyButtonPressed
 7117 203c 0346     		mov	r3, r0
 7118 203e 002B     		cmp	r3, #0
 7119 2040 8CD0     		beq	.L250
1745:.\console.c   **** 				}
1746:.\console.c   **** 				current_statistics_stop(&pan_current_stat);		/* stop Pan current  statistics			*/
 7120              		.loc 1 1746 0
 7121 2042 40F20000 		movw	r0, #:lower16:pan_current_stat
 7122 2046 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7123 204a FFF7FEFF 		bl	current_statistics_stop
1747:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr			*/
 7124              		.loc 1 1747 0
 7125 204e FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1748:.\console.c   **** 				
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1750:.\console.c   **** 					(float)Battery_Energy(&pan_torque_stat, &pan_current_stat),
 7126              		.loc 1 1750 0
 7127 2052 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7128 2056 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7129 205a 40F20001 		movw	r1, #:lower16:pan_current_stat
 7130 205e C0F20001 		movt	r1, #:upper16:pan_current_stat
 7131 2062 FFF7FEFF 		bl	Battery_Energy
 7132 2066 0346     		mov	r3, r0
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7133              		.loc 1 1749 0
 7134 2068 1846     		mov	r0, r3
 7135 206a FFF7FEFF 		bl	__aeabi_f2d
 7136 206e 0446     		mov	r4, r0
 7137 2070 0D46     		mov	r5, r1
1751:.\console.c   **** 					(float)Battery_Energy_Meter(&pan_torque_stat, &pan_current_stat, 1000));
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 205


 7138              		.loc 1 1751 0
 7139 2072 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7140 2076 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7141 207a 40F20001 		movw	r1, #:lower16:pan_current_stat
 7142 207e C0F20001 		movt	r1, #:upper16:pan_current_stat
 7143 2082 4FF00002 		mov	r2, #0
 7144 2086 C4F27A42 		movt	r2, 17530
 7145 208a FFF7FEFF 		bl	Battery_Energy_Meter
 7146 208e 0346     		mov	r3, r0
1749:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7147              		.loc 1 1749 0
 7148 2090 1846     		mov	r0, r3
 7149 2092 FFF7FEFF 		bl	__aeabi_f2d
 7150 2096 0246     		mov	r2, r0
 7151 2098 0B46     		mov	r3, r1
 7152 209a CDE90023 		strd	r2, [sp]
 7153 209e 40F20000 		movw	r0, #:lower16:.LC362
 7154 20a2 C0F20000 		movt	r0, #:upper16:.LC362
 7155 20a6 2246     		mov	r2, r4
 7156 20a8 2B46     		mov	r3, r5
 7157 20aa FFF7FEFF 		bl	printf
1752:.\console.c   **** 				
1753:.\console.c   **** 				goto exitpars;	
 7158              		.loc 1 1753 0
 7159 20ae 04F04FBF 		b	.L131
 7160              	.L248:
1754:.\console.c   **** 			}
1755:.\console.c   **** 			// END SHOW PAN MOTOR TORQUE STATISTICS
1756:.\console.c   **** 			
1757:.\console.c   **** 			
1758:.\console.c   **** 			// SHOW TILT MOTOR TORQUE STATISTICS
1759:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmtorque") == 0) ||
 7161              		.loc 1 1759 0
 7162 20b2 8348     		ldr	r0, .L726
 7163 20b4 40F20001 		movw	r1, #:lower16:.LC363
 7164 20b8 C0F20001 		movt	r1, #:upper16:.LC363
 7165 20bc FFF7FEFF 		bl	strcmp
 7166 20c0 0346     		mov	r3, r0
 7167 20c2 002B     		cmp	r3, #0
 7168 20c4 0AD0     		beq	.L251
1760:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tmt") == 0))
 7169              		.loc 1 1760 0 discriminator 1
 7170 20c6 7E48     		ldr	r0, .L726
 7171 20c8 40F20001 		movw	r1, #:lower16:.LC364
 7172 20cc C0F20001 		movt	r1, #:upper16:.LC364
 7173 20d0 FFF7FEFF 		bl	strcmp
 7174 20d4 0346     		mov	r3, r0
1759:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmtorque") == 0) ||
 7175              		.loc 1 1759 0 discriminator 1
 7176 20d6 002B     		cmp	r3, #0
 7177 20d8 40F0C480 		bne	.L252
 7178              	.L251:
1761:.\console.c   **** 			{
1762:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7179              		.loc 1 1762 0
 7180 20dc FFF7FEFF 		bl	isr_TORQUESTAT_Start
1763:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 206


1764:.\console.c   **** 				current_statistics_start(&tilt_current_stat);		/* start Tilt current  statistics			*/
 7181              		.loc 1 1764 0
 7182 20e0 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7183 20e4 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7184 20e8 FFF7FEFF 		bl	current_statistics_start
1765:.\console.c   **** 				Battery_Energy_Integral_Reset(&tilt_torque_stat);	/* Battery Energy Integral Reset 			*/
 7185              		.loc 1 1765 0
 7186 20ec 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7187 20f0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7188 20f4 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1766:.\console.c   **** 				
1767:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7189              		.loc 1 1767 0
 7190 20f8 40F20000 		movw	r0, #:lower16:.LC365
 7191 20fc C0F20000 		movt	r0, #:upper16:.LC365
 7192 2100 FFF7FEFF 		bl	puts
1768:.\console.c   **** 				CyDelay(500);
 7193              		.loc 1 1768 0
 7194 2104 4FF4FA70 		mov	r0, #500
 7195 2108 FFF7FEFF 		bl	CyDelay
1769:.\console.c   **** 				
1770:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7196              		.loc 1 1770 0
 7197 210c 6DE0     		b	.L253
 7198              	.L254:
1771:.\console.c   **** 				{
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
1773:.\console.c   **** 							(float)i_t(&tilt_torque_stat),
 7199              		.loc 1 1773 0
 7200 210e 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7201 2112 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7202 2116 FFF7FEFF 		bl	i_t
 7203 211a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7204              		.loc 1 1772 0
 7205 211c 1846     		mov	r0, r3
 7206 211e FFF7FEFF 		bl	__aeabi_f2d
 7207 2122 0446     		mov	r4, r0
 7208 2124 0D46     		mov	r5, r1
1774:.\console.c   **** 							(float)i_noload(),							
 7209              		.loc 1 1774 0
 7210 2126 FFF7FEFF 		bl	i_noload
 7211 212a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7212              		.loc 1 1772 0
 7213 212c 1846     		mov	r0, r3
 7214 212e FFF7FEFF 		bl	__aeabi_f2d
 7215 2132 C7E90A01 		strd	r0, [r7, #40]
1775:.\console.c   **** 							(float)TMOT_t(&tilt_torque_stat),							
 7216              		.loc 1 1775 0
 7217 2136 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7218 213a C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7219 213e FFF7FEFF 		bl	TMOT_t
 7220 2142 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7221              		.loc 1 1772 0
 7222 2144 1846     		mov	r0, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 207


 7223 2146 FFF7FEFF 		bl	__aeabi_f2d
 7224 214a C7E90801 		strd	r0, [r7, #32]
1776:.\console.c   **** 							(float)i_max(&tilt_current_stat),
 7225              		.loc 1 1776 0
 7226 214e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7227 2152 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7228 2156 FFF7FEFF 		bl	i_max
 7229 215a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7230              		.loc 1 1772 0
 7231 215c 1846     		mov	r0, r3
 7232 215e FFF7FEFF 		bl	__aeabi_f2d
 7233 2162 C7E90601 		strd	r0, [r7, #24]
1777:.\console.c   **** 							(float)TMOT_max(&tilt_current_stat),
 7234              		.loc 1 1777 0
 7235 2166 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7236 216a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7237 216e FFF7FEFF 		bl	TMOT_max
 7238 2172 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7239              		.loc 1 1772 0
 7240 2174 1846     		mov	r0, r3
 7241 2176 FFF7FEFF 		bl	__aeabi_f2d
 7242 217a 8246     		mov	sl, r0
 7243 217c 8B46     		mov	fp, r1
1778:.\console.c   **** 							(float)i_mean(&tilt_current_stat),
 7244              		.loc 1 1778 0
 7245 217e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7246 2182 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7247 2186 FFF7FEFF 		bl	i_mean
 7248 218a 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7249              		.loc 1 1772 0
 7250 218c 1846     		mov	r0, r3
 7251 218e FFF7FEFF 		bl	__aeabi_f2d
 7252 2192 8046     		mov	r8, r0
 7253 2194 8946     		mov	r9, r1
1779:.\console.c   **** 							(float)TMOT_mean(&tilt_current_stat));
 7254              		.loc 1 1779 0
 7255 2196 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7256 219a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7257 219e FFF7FEFF 		bl	TMOT_mean
 7258 21a2 0346     		mov	r3, r0
1772:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TMOT_t=%3.2f[mNm]  i_max=%3.2f[A]  TMOT_max=%3.2f[mNm]  i_
 7259              		.loc 1 1772 0
 7260 21a4 1846     		mov	r0, r3
 7261 21a6 FFF7FEFF 		bl	__aeabi_f2d
 7262 21aa 0246     		mov	r2, r0
 7263 21ac 0B46     		mov	r3, r1
 7264 21ae D7E90A01 		ldrd	r0, [r7, #40]
 7265 21b2 CDE90001 		strd	r0, [sp]
 7266 21b6 D7E90801 		ldrd	r0, [r7, #32]
 7267 21ba CDE90201 		strd	r0, [sp, #8]
 7268 21be D7E90601 		ldrd	r0, [r7, #24]
 7269 21c2 CDE90401 		strd	r0, [sp, #16]
 7270 21c6 CDE906AB 		strd	sl, [sp, #24]
 7271 21ca CDE90889 		strd	r8, [sp, #32]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 208


 7272 21ce CDE90A23 		strd	r2, [sp, #40]
 7273 21d2 40F20000 		movw	r0, #:lower16:.LC361
 7274 21d6 C0F20000 		movt	r0, #:upper16:.LC361
 7275 21da 2246     		mov	r2, r4
 7276 21dc 2B46     		mov	r3, r5
 7277 21de FFF7FEFF 		bl	printf
1780:.\console.c   **** 					
1781:.\console.c   **** 					CyDelay(30);
 7278              		.loc 1 1781 0
 7279 21e2 4FF01E00 		mov	r0, #30
 7280 21e6 FFF7FEFF 		bl	CyDelay
 7281              	.L253:
1770:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7282              		.loc 1 1770 0 discriminator 1
 7283 21ea FFF7FEFF 		bl	AnyButtonPressed
 7284 21ee 0346     		mov	r3, r0
 7285 21f0 002B     		cmp	r3, #0
 7286 21f2 8CD0     		beq	.L254
1782:.\console.c   **** 				}
1783:.\console.c   **** 				current_statistics_stop(&tilt_current_stat);	/* stop Tilt current  statistics			*/				
 7287              		.loc 1 1783 0
 7288 21f4 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7289 21f8 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7290 21fc FFF7FEFF 		bl	current_statistics_stop
1784:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr				*/
 7291              		.loc 1 1784 0
 7292 2200 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1785:.\console.c   **** 				
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1787:.\console.c   **** 					(float)Battery_Energy(&tilt_torque_stat, &tilt_current_stat),
 7293              		.loc 1 1787 0
 7294 2204 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7295 2208 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7296 220c 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7297 2210 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7298 2214 FFF7FEFF 		bl	Battery_Energy
 7299 2218 0346     		mov	r3, r0
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7300              		.loc 1 1786 0
 7301 221a 1846     		mov	r0, r3
 7302 221c FFF7FEFF 		bl	__aeabi_f2d
 7303 2220 0446     		mov	r4, r0
 7304 2222 0D46     		mov	r5, r1
1788:.\console.c   **** 					(float)Battery_Energy_Meter(&tilt_torque_stat, &tilt_current_stat, 1000));
 7305              		.loc 1 1788 0
 7306 2224 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7307 2228 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7308 222c 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7309 2230 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7310 2234 4FF00002 		mov	r2, #0
 7311 2238 C4F27A42 		movt	r2, 17530
 7312 223c FFF7FEFF 		bl	Battery_Energy_Meter
 7313 2240 0346     		mov	r3, r0
1786:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7314              		.loc 1 1786 0
 7315 2242 1846     		mov	r0, r3
 7316 2244 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 209


 7317 2248 0246     		mov	r2, r0
 7318 224a 0B46     		mov	r3, r1
 7319 224c CDE90023 		strd	r2, [sp]
 7320 2250 40F20000 		movw	r0, #:lower16:.LC362
 7321 2254 C0F20000 		movt	r0, #:upper16:.LC362
 7322 2258 2246     		mov	r2, r4
 7323 225a 2B46     		mov	r3, r5
 7324 225c FFF7FEFF 		bl	printf
1789:.\console.c   **** 				
1790:.\console.c   **** 				goto exitpars;	
 7325              		.loc 1 1790 0
 7326 2260 04F076BE 		b	.L131
 7327              	.L252:
1791:.\console.c   **** 			}
1792:.\console.c   **** 			// END SHOW TILT MOTOR TORQUE STATISTICS
1793:.\console.c   **** 			
1794:.\console.c   **** 			
1795:.\console.c   **** 			// SHOW PAN OUTPUT TORQUE STATISTICS
1796:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "potorque") == 0) ||
 7328              		.loc 1 1796 0
 7329 2264 1648     		ldr	r0, .L726
 7330 2266 40F20001 		movw	r1, #:lower16:.LC366
 7331 226a C0F20001 		movt	r1, #:upper16:.LC366
 7332 226e FFF7FEFF 		bl	strcmp
 7333 2272 0346     		mov	r3, r0
 7334 2274 002B     		cmp	r3, #0
 7335 2276 0AD0     		beq	.L255
1797:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pot") == 0))
 7336              		.loc 1 1797 0 discriminator 1
 7337 2278 1148     		ldr	r0, .L726
 7338 227a 40F20001 		movw	r1, #:lower16:.LC367
 7339 227e C0F20001 		movt	r1, #:upper16:.LC367
 7340 2282 FFF7FEFF 		bl	strcmp
 7341 2286 0346     		mov	r3, r0
1796:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "potorque") == 0) ||
 7342              		.loc 1 1796 0 discriminator 1
 7343 2288 002B     		cmp	r3, #0
 7344 228a 40F0D280 		bne	.L256
 7345              	.L255:
1798:.\console.c   **** 			{
1799:.\console.c   **** 				isr_TORQUESTAT_Start();								/* start torque statistics isr	 			*/
 7346              		.loc 1 1799 0
 7347 228e FFF7FEFF 		bl	isr_TORQUESTAT_Start
1800:.\console.c   **** 				
1801:.\console.c   **** 				current_statistics_start(&pan_current_stat);		/* start Pan current  statistics			*/
 7348              		.loc 1 1801 0
 7349 2292 40F20000 		movw	r0, #:lower16:pan_current_stat
 7350 2296 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7351 229a FFF7FEFF 		bl	current_statistics_start
1802:.\console.c   **** 				Battery_Energy_Integral_Reset(&pan_torque_stat);	/* Battery Energy Integral Reset 			*/
 7352              		.loc 1 1802 0
 7353 229e 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7354 22a2 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7355 22a6 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1803:.\console.c   **** 				
1804:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7356              		.loc 1 1804 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 210


 7357 22aa 40F20000 		movw	r0, #:lower16:.LC360
 7358 22ae C0F20000 		movt	r0, #:upper16:.LC360
 7359 22b2 FFF7FEFF 		bl	puts
1805:.\console.c   **** 				CyDelay(500);
 7360              		.loc 1 1805 0
 7361 22b6 4FF4FA70 		mov	r0, #500
 7362 22ba FFF7FEFF 		bl	CyDelay
1806:.\console.c   **** 				
1807:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7363              		.loc 1 1807 0
 7364 22be 7BE0     		b	.L257
 7365              	.L727:
 7366              		.align	2
 7367              	.L726:
 7368 22c0 0F000000 		.word	actual_cmd+15
 7369              	.L258:
1808:.\console.c   **** 				{
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
1810:.\console.c   **** 							(float)i_t(&pan_torque_stat),
 7370              		.loc 1 1810 0
 7371 22c4 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7372 22c8 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7373 22cc FFF7FEFF 		bl	i_t
 7374 22d0 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7375              		.loc 1 1809 0
 7376 22d2 1846     		mov	r0, r3
 7377 22d4 FFF7FEFF 		bl	__aeabi_f2d
 7378 22d8 0446     		mov	r4, r0
 7379 22da 0D46     		mov	r5, r1
1811:.\console.c   **** 							(float)i_noload(),
 7380              		.loc 1 1811 0
 7381 22dc FFF7FEFF 		bl	i_noload
 7382 22e0 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7383              		.loc 1 1809 0
 7384 22e2 1846     		mov	r0, r3
 7385 22e4 FFF7FEFF 		bl	__aeabi_f2d
 7386 22e8 C7E91001 		strd	r0, [r7, #64]
1812:.\console.c   **** 							(float)TOUT_t(&pan_torque_stat, N_pan),							
 7387              		.loc 1 1812 0
 7388 22ec 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7389 22f0 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7390 22f4 4FF00001 		mov	r1, #0
 7391 22f8 C4F27821 		movt	r1, 17016
 7392 22fc FFF7FEFF 		bl	TOUT_t
 7393 2300 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7394              		.loc 1 1809 0
 7395 2302 1846     		mov	r0, r3
 7396 2304 FFF7FEFF 		bl	__aeabi_f2d
 7397 2308 C7E90E01 		strd	r0, [r7, #56]
1813:.\console.c   **** 							(float)i_max(&pan_current_stat),
 7398              		.loc 1 1813 0
 7399 230c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7400 2310 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7401 2314 FFF7FEFF 		bl	i_max
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 211


 7402 2318 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7403              		.loc 1 1809 0
 7404 231a 1846     		mov	r0, r3
 7405 231c FFF7FEFF 		bl	__aeabi_f2d
 7406 2320 C7E90C01 		strd	r0, [r7, #48]
1814:.\console.c   **** 							(float)TOUT_max(&pan_current_stat, N_pan),
 7407              		.loc 1 1814 0
 7408 2324 40F20000 		movw	r0, #:lower16:pan_current_stat
 7409 2328 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7410 232c 4FF00001 		mov	r1, #0
 7411 2330 C4F27821 		movt	r1, 17016
 7412 2334 FFF7FEFF 		bl	TOUT_max
 7413 2338 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7414              		.loc 1 1809 0
 7415 233a 1846     		mov	r0, r3
 7416 233c FFF7FEFF 		bl	__aeabi_f2d
 7417 2340 8246     		mov	sl, r0
 7418 2342 8B46     		mov	fp, r1
1815:.\console.c   **** 							(float)i_mean(&pan_current_stat),
 7419              		.loc 1 1815 0
 7420 2344 40F20000 		movw	r0, #:lower16:pan_current_stat
 7421 2348 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7422 234c FFF7FEFF 		bl	i_mean
 7423 2350 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7424              		.loc 1 1809 0
 7425 2352 1846     		mov	r0, r3
 7426 2354 FFF7FEFF 		bl	__aeabi_f2d
 7427 2358 8046     		mov	r8, r0
 7428 235a 8946     		mov	r9, r1
1816:.\console.c   **** 							(float)TOUT_mean(&pan_current_stat, N_pan));
 7429              		.loc 1 1816 0
 7430 235c 40F20000 		movw	r0, #:lower16:pan_current_stat
 7431 2360 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7432 2364 4FF00001 		mov	r1, #0
 7433 2368 C4F27821 		movt	r1, 17016
 7434 236c FFF7FEFF 		bl	TOUT_mean
 7435 2370 0346     		mov	r3, r0
1809:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7436              		.loc 1 1809 0
 7437 2372 1846     		mov	r0, r3
 7438 2374 FFF7FEFF 		bl	__aeabi_f2d
 7439 2378 0246     		mov	r2, r0
 7440 237a 0B46     		mov	r3, r1
 7441 237c D7E91001 		ldrd	r0, [r7, #64]
 7442 2380 CDE90001 		strd	r0, [sp]
 7443 2384 D7E90E01 		ldrd	r0, [r7, #56]
 7444 2388 CDE90201 		strd	r0, [sp, #8]
 7445 238c D7E90C01 		ldrd	r0, [r7, #48]
 7446 2390 CDE90401 		strd	r0, [sp, #16]
 7447 2394 CDE906AB 		strd	sl, [sp, #24]
 7448 2398 CDE90889 		strd	r8, [sp, #32]
 7449 239c CDE90A23 		strd	r2, [sp, #40]
 7450 23a0 40F20000 		movw	r0, #:lower16:.LC368
 7451 23a4 C0F20000 		movt	r0, #:upper16:.LC368
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 212


 7452 23a8 2246     		mov	r2, r4
 7453 23aa 2B46     		mov	r3, r5
 7454 23ac FFF7FEFF 		bl	printf
1817:.\console.c   **** 					
1818:.\console.c   **** 					CyDelay(30);
 7455              		.loc 1 1818 0
 7456 23b0 4FF01E00 		mov	r0, #30
 7457 23b4 FFF7FEFF 		bl	CyDelay
 7458              	.L257:
1807:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7459              		.loc 1 1807 0 discriminator 1
 7460 23b8 FFF7FEFF 		bl	AnyButtonPressed
 7461 23bc 0346     		mov	r3, r0
 7462 23be 002B     		cmp	r3, #0
 7463 23c0 80D0     		beq	.L258
1819:.\console.c   **** 				}
1820:.\console.c   **** 				current_statistics_stop(&pan_current_stat);			/* stop Pan current  statistics			*/				
 7464              		.loc 1 1820 0
 7465 23c2 40F20000 		movw	r0, #:lower16:pan_current_stat
 7466 23c6 C0F20000 		movt	r0, #:upper16:pan_current_stat
 7467 23ca FFF7FEFF 		bl	current_statistics_stop
1821:.\console.c   **** 				isr_TORQUESTAT_Stop();								/* stop torque statistics isr			*/
 7468              		.loc 1 1821 0
 7469 23ce FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1822:.\console.c   **** 				
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1824:.\console.c   **** 					(float)Battery_Energy(&pan_torque_stat, &pan_current_stat),
 7470              		.loc 1 1824 0
 7471 23d2 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7472 23d6 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7473 23da 40F20001 		movw	r1, #:lower16:pan_current_stat
 7474 23de C0F20001 		movt	r1, #:upper16:pan_current_stat
 7475 23e2 FFF7FEFF 		bl	Battery_Energy
 7476 23e6 0346     		mov	r3, r0
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7477              		.loc 1 1823 0
 7478 23e8 1846     		mov	r0, r3
 7479 23ea FFF7FEFF 		bl	__aeabi_f2d
 7480 23ee 0446     		mov	r4, r0
 7481 23f0 0D46     		mov	r5, r1
1825:.\console.c   **** 					(float)Battery_Energy_Meter(&pan_torque_stat, &pan_current_stat, 1000));
 7482              		.loc 1 1825 0
 7483 23f2 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7484 23f6 C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7485 23fa 40F20001 		movw	r1, #:lower16:pan_current_stat
 7486 23fe C0F20001 		movt	r1, #:upper16:pan_current_stat
 7487 2402 4FF00002 		mov	r2, #0
 7488 2406 C4F27A42 		movt	r2, 17530
 7489 240a FFF7FEFF 		bl	Battery_Energy_Meter
 7490 240e 0346     		mov	r3, r0
1823:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7491              		.loc 1 1823 0
 7492 2410 1846     		mov	r0, r3
 7493 2412 FFF7FEFF 		bl	__aeabi_f2d
 7494 2416 0246     		mov	r2, r0
 7495 2418 0B46     		mov	r3, r1
 7496 241a CDE90023 		strd	r2, [sp]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 213


 7497 241e 40F20000 		movw	r0, #:lower16:.LC362
 7498 2422 C0F20000 		movt	r0, #:upper16:.LC362
 7499 2426 2246     		mov	r2, r4
 7500 2428 2B46     		mov	r3, r5
 7501 242a FFF7FEFF 		bl	printf
1826:.\console.c   **** 				
1827:.\console.c   **** 				goto exitpars;	
 7502              		.loc 1 1827 0
 7503 242e 04F08FBD 		b	.L131
 7504              	.L256:
1828:.\console.c   **** 			}
1829:.\console.c   **** 			// END SHOW PAN OUTPUT TORQUE STATISTICS
1830:.\console.c   **** 			
1831:.\console.c   **** 			
1832:.\console.c   **** 			// SHOW TILT OUTPUT TORQUE STATISTICS
1833:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "totorque") == 0) ||
 7505              		.loc 1 1833 0
 7506 2432 C848     		ldr	r0, .L728
 7507 2434 40F20001 		movw	r1, #:lower16:.LC369
 7508 2438 C0F20001 		movt	r1, #:upper16:.LC369
 7509 243c FFF7FEFF 		bl	strcmp
 7510 2440 0346     		mov	r3, r0
 7511 2442 002B     		cmp	r3, #0
 7512 2444 0AD0     		beq	.L259
1834:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tot") == 0))
 7513              		.loc 1 1834 0 discriminator 1
 7514 2446 C348     		ldr	r0, .L728
 7515 2448 40F20001 		movw	r1, #:lower16:.LC370
 7516 244c C0F20001 		movt	r1, #:upper16:.LC370
 7517 2450 FFF7FEFF 		bl	strcmp
 7518 2454 0346     		mov	r3, r0
1833:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "totorque") == 0) ||
 7519              		.loc 1 1833 0 discriminator 1
 7520 2456 002B     		cmp	r3, #0
 7521 2458 40F0D080 		bne	.L260
 7522              	.L259:
1835:.\console.c   **** 			{
1836:.\console.c   **** 				isr_TORQUESTAT_Start();							/* start torque statistics isr	 			*/
 7523              		.loc 1 1836 0
 7524 245c FFF7FEFF 		bl	isr_TORQUESTAT_Start
1837:.\console.c   **** 				
1838:.\console.c   **** 				current_statistics_start(&tilt_current_stat);	/* start Tilt current  statistics			*/
 7525              		.loc 1 1838 0
 7526 2460 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7527 2464 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7528 2468 FFF7FEFF 		bl	current_statistics_start
1839:.\console.c   **** 				Battery_Energy_Integral_Reset(&tilt_torque_stat);	/* Battery Energy Integral Reset 			*/
 7529              		.loc 1 1839 0
 7530 246c 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7531 2470 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7532 2474 FFF7FEFF 		bl	Battery_Energy_Integral_Reset
1840:.\console.c   **** 				
1841:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7533              		.loc 1 1841 0
 7534 2478 40F20000 		movw	r0, #:lower16:.LC365
 7535 247c C0F20000 		movt	r0, #:upper16:.LC365
 7536 2480 FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 214


1842:.\console.c   **** 				CyDelay(500);
 7537              		.loc 1 1842 0
 7538 2484 4FF4FA70 		mov	r0, #500
 7539 2488 FFF7FEFF 		bl	CyDelay
1843:.\console.c   **** 				
1844:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7540              		.loc 1 1844 0
 7541 248c 79E0     		b	.L261
 7542              	.L262:
1845:.\console.c   **** 				{
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
1847:.\console.c   **** 							(float)i_t(&tilt_torque_stat),
 7543              		.loc 1 1847 0
 7544 248e 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7545 2492 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7546 2496 FFF7FEFF 		bl	i_t
 7547 249a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7548              		.loc 1 1846 0
 7549 249c 1846     		mov	r0, r3
 7550 249e FFF7FEFF 		bl	__aeabi_f2d
 7551 24a2 0446     		mov	r4, r0
 7552 24a4 0D46     		mov	r5, r1
1848:.\console.c   **** 							(float)i_noload(),							
 7553              		.loc 1 1848 0
 7554 24a6 FFF7FEFF 		bl	i_noload
 7555 24aa 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7556              		.loc 1 1846 0
 7557 24ac 1846     		mov	r0, r3
 7558 24ae FFF7FEFF 		bl	__aeabi_f2d
 7559 24b2 C7E91601 		strd	r0, [r7, #88]
1849:.\console.c   **** 							(float)TOUT_t(&tilt_torque_stat, N_tilt),							
 7560              		.loc 1 1849 0
 7561 24b6 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7562 24ba C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7563 24be 4FF00001 		mov	r1, #0
 7564 24c2 C4F22C31 		movt	r1, 17196
 7565 24c6 FFF7FEFF 		bl	TOUT_t
 7566 24ca 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7567              		.loc 1 1846 0
 7568 24cc 1846     		mov	r0, r3
 7569 24ce FFF7FEFF 		bl	__aeabi_f2d
 7570 24d2 C7E91401 		strd	r0, [r7, #80]
1850:.\console.c   **** 							(float)i_max(&tilt_current_stat),
 7571              		.loc 1 1850 0
 7572 24d6 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7573 24da C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7574 24de FFF7FEFF 		bl	i_max
 7575 24e2 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7576              		.loc 1 1846 0
 7577 24e4 1846     		mov	r0, r3
 7578 24e6 FFF7FEFF 		bl	__aeabi_f2d
 7579 24ea C7E91201 		strd	r0, [r7, #72]
1851:.\console.c   **** 							(float)TOUT_max(&tilt_current_stat, N_tilt),
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 215


 7580              		.loc 1 1851 0
 7581 24ee 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7582 24f2 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7583 24f6 4FF00001 		mov	r1, #0
 7584 24fa C4F22C31 		movt	r1, 17196
 7585 24fe FFF7FEFF 		bl	TOUT_max
 7586 2502 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7587              		.loc 1 1846 0
 7588 2504 1846     		mov	r0, r3
 7589 2506 FFF7FEFF 		bl	__aeabi_f2d
 7590 250a 8246     		mov	sl, r0
 7591 250c 8B46     		mov	fp, r1
1852:.\console.c   **** 							(float)i_mean(&tilt_current_stat),
 7592              		.loc 1 1852 0
 7593 250e 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7594 2512 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7595 2516 FFF7FEFF 		bl	i_mean
 7596 251a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7597              		.loc 1 1846 0
 7598 251c 1846     		mov	r0, r3
 7599 251e FFF7FEFF 		bl	__aeabi_f2d
 7600 2522 8046     		mov	r8, r0
 7601 2524 8946     		mov	r9, r1
1853:.\console.c   **** 							(float)TOUT_mean(&tilt_current_stat, N_tilt));					
 7602              		.loc 1 1853 0
 7603 2526 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7604 252a C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7605 252e 4FF00001 		mov	r1, #0
 7606 2532 C4F22C31 		movt	r1, 17196
 7607 2536 FFF7FEFF 		bl	TOUT_mean
 7608 253a 0346     		mov	r3, r0
1846:.\console.c   **** 					printf("i_t=%3.3f[A] (nl=%3.3f[A])  TOUT_t=%3.2f[mNm]  i_max=%3.2f[A]  TOUT_max=%3.2f[mNm]  i_
 7609              		.loc 1 1846 0
 7610 253c 1846     		mov	r0, r3
 7611 253e FFF7FEFF 		bl	__aeabi_f2d
 7612 2542 0246     		mov	r2, r0
 7613 2544 0B46     		mov	r3, r1
 7614 2546 D7E91601 		ldrd	r0, [r7, #88]
 7615 254a CDE90001 		strd	r0, [sp]
 7616 254e D7E91401 		ldrd	r0, [r7, #80]
 7617 2552 CDE90201 		strd	r0, [sp, #8]
 7618 2556 D7E91201 		ldrd	r0, [r7, #72]
 7619 255a CDE90401 		strd	r0, [sp, #16]
 7620 255e CDE906AB 		strd	sl, [sp, #24]
 7621 2562 CDE90889 		strd	r8, [sp, #32]
 7622 2566 CDE90A23 		strd	r2, [sp, #40]
 7623 256a 40F20000 		movw	r0, #:lower16:.LC368
 7624 256e C0F20000 		movt	r0, #:upper16:.LC368
 7625 2572 2246     		mov	r2, r4
 7626 2574 2B46     		mov	r3, r5
 7627 2576 FFF7FEFF 		bl	printf
1854:.\console.c   **** 					
1855:.\console.c   **** 					CyDelay(30);
 7628              		.loc 1 1855 0
 7629 257a 4FF01E00 		mov	r0, #30
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 216


 7630 257e FFF7FEFF 		bl	CyDelay
 7631              	.L261:
1844:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7632              		.loc 1 1844 0 discriminator 1
 7633 2582 FFF7FEFF 		bl	AnyButtonPressed
 7634 2586 0346     		mov	r3, r0
 7635 2588 002B     		cmp	r3, #0
 7636 258a 80D0     		beq	.L262
1856:.\console.c   **** 				}
1857:.\console.c   **** 				current_statistics_stop(&tilt_current_stat);	/* stop Tilt current  statistics			*/				
 7637              		.loc 1 1857 0
 7638 258c 40F20000 		movw	r0, #:lower16:tilt_current_stat
 7639 2590 C0F20000 		movt	r0, #:upper16:tilt_current_stat
 7640 2594 FFF7FEFF 		bl	current_statistics_stop
1858:.\console.c   **** 				isr_TORQUESTAT_Stop();							/* stop torque statistics isr				*/
 7641              		.loc 1 1858 0
 7642 2598 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1859:.\console.c   **** 				
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
1861:.\console.c   **** 					(float)Battery_Energy(&tilt_torque_stat, &tilt_current_stat),
 7643              		.loc 1 1861 0
 7644 259c 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7645 25a0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7646 25a4 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7647 25a8 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7648 25ac FFF7FEFF 		bl	Battery_Energy
 7649 25b0 0346     		mov	r3, r0
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7650              		.loc 1 1860 0
 7651 25b2 1846     		mov	r0, r3
 7652 25b4 FFF7FEFF 		bl	__aeabi_f2d
 7653 25b8 0446     		mov	r4, r0
 7654 25ba 0D46     		mov	r5, r1
1862:.\console.c   **** 					(float)Battery_Energy_Meter(&tilt_torque_stat, &tilt_current_stat, 1000));
 7655              		.loc 1 1862 0
 7656 25bc 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7657 25c0 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7658 25c4 40F20001 		movw	r1, #:lower16:tilt_current_stat
 7659 25c8 C0F20001 		movt	r1, #:upper16:tilt_current_stat
 7660 25cc 4FF00002 		mov	r2, #0
 7661 25d0 C4F27A42 		movt	r2, 17530
 7662 25d4 FFF7FEFF 		bl	Battery_Energy_Meter
 7663 25d8 0346     		mov	r3, r0
1860:.\console.c   **** 				printf("\r\nBattery Capacity Used=%3.2f [mAh]  Percentage(1000mAh)=%3.2f [%%]\r\n",
 7664              		.loc 1 1860 0
 7665 25da 1846     		mov	r0, r3
 7666 25dc FFF7FEFF 		bl	__aeabi_f2d
 7667 25e0 0246     		mov	r2, r0
 7668 25e2 0B46     		mov	r3, r1
 7669 25e4 CDE90023 		strd	r2, [sp]
 7670 25e8 40F20000 		movw	r0, #:lower16:.LC362
 7671 25ec C0F20000 		movt	r0, #:upper16:.LC362
 7672 25f0 2246     		mov	r2, r4
 7673 25f2 2B46     		mov	r3, r5
 7674 25f4 FFF7FEFF 		bl	printf
1863:.\console.c   **** 				
1864:.\console.c   **** 				goto exitpars;	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 217


 7675              		.loc 1 1864 0
 7676 25f8 04F0AABC 		b	.L131
 7677              	.L260:
1865:.\console.c   **** 			}
1866:.\console.c   **** 			// END SHOW TILT OUTPUT TORQUE STATISTICS			
1867:.\console.c   **** 	
1868:.\console.c   **** 
1869:.\console.c   **** 			// SHOW PAN MOTOR EROGATED POWER STATISTICS
1870:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmpower") == 0) ||
 7678              		.loc 1 1870 0
 7679 25fc 5548     		ldr	r0, .L728
 7680 25fe 40F20001 		movw	r1, #:lower16:.LC371
 7681 2602 C0F20001 		movt	r1, #:upper16:.LC371
 7682 2606 FFF7FEFF 		bl	strcmp
 7683 260a 0346     		mov	r3, r0
 7684 260c 002B     		cmp	r3, #0
 7685 260e 0AD0     		beq	.L263
1871:.\console.c   **** 				(strcmp(actual_cmd.parameter, "pmp") == 0))
 7686              		.loc 1 1871 0 discriminator 1
 7687 2610 5048     		ldr	r0, .L728
 7688 2612 40F20001 		movw	r1, #:lower16:.LC372
 7689 2616 C0F20001 		movt	r1, #:upper16:.LC372
 7690 261a FFF7FEFF 		bl	strcmp
 7691 261e 0346     		mov	r3, r0
1870:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pmpower") == 0) ||
 7692              		.loc 1 1870 0 discriminator 1
 7693 2620 002B     		cmp	r3, #0
 7694 2622 40F09980 		bne	.L264
 7695              	.L263:
1872:.\console.c   **** 			{
1873:.\console.c   **** 				isr_TORQUESTAT_Start();									/* start torque statistics isr	 						*/
 7696              		.loc 1 1873 0
 7697 2626 FFF7FEFF 		bl	isr_TORQUESTAT_Start
1874:.\console.c   **** 	
1875:.\console.c   **** 				motor_abs_velocity_sampling_init(&pan_torque_stat);		/* initialize Pan Motor abs(Angular Veloci
 7698              		.loc 1 1875 0
 7699 262a 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7700 262e C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7701 2632 FFF7FEFF 		bl	motor_abs_velocity_sampling_init
1876:.\console.c   **** 				qpower_statistics_start(&pan_qpower_stat);				/* start quasi-power Statistics							*/
 7702              		.loc 1 1876 0
 7703 2636 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7704 263a C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7705 263e FFF7FEFF 		bl	qpower_statistics_start
1877:.\console.c   **** 				
1878:.\console.c   **** 				printf("\r\nAxis=Pan\r\n\r\n");
 7706              		.loc 1 1878 0
 7707 2642 40F20000 		movw	r0, #:lower16:.LC360
 7708 2646 C0F20000 		movt	r0, #:upper16:.LC360
 7709 264a FFF7FEFF 		bl	puts
1879:.\console.c   **** 				CyDelay(500);
 7710              		.loc 1 1879 0
 7711 264e 4FF4FA70 		mov	r0, #500
 7712 2652 FFF7FEFF 		bl	CyDelay
1880:.\console.c   **** 				
1881:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7713              		.loc 1 1881 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 218


 7714 2656 6DE0     		b	.L265
 7715              	.L266:
 7716              	.LBB6:
1882:.\console.c   **** 				{
1883:.\console.c   **** 					//simultaneous sampling
1884:.\console.c   **** 					float my_torque = TMOT_t(&pan_torque_stat);
 7717              		.loc 1 1884 0
 7718 2658 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7719 265c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7720 2660 FFF7FEFF 		bl	TMOT_t
 7721 2664 C7F89400 		str	r0, [r7, #148]	@ float
1885:.\console.c   **** 					float my_omega  = omega_t(&pan_torque_stat);
 7722              		.loc 1 1885 0
 7723 2668 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7724 266c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7725 2670 FFF7FEFF 		bl	omega_t
 7726 2674 C7F89000 		str	r0, [r7, #144]	@ float
1886:.\console.c   **** 					float my_rpm    = rpm_t(&pan_torque_stat);
 7727              		.loc 1 1886 0
 7728 2678 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7729 267c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7730 2680 FFF7FEFF 		bl	rpm_t
 7731 2684 C7F88C00 		str	r0, [r7, #140]	@ float
1887:.\console.c   **** 					float my_pm_t   = PMOTE_t(&pan_torque_stat);
 7732              		.loc 1 1887 0
 7733 2688 40F20000 		movw	r0, #:lower16:pan_torque_stat
 7734 268c C0F20000 		movt	r0, #:upper16:pan_torque_stat
 7735 2690 FFF7FEFF 		bl	PMOTE_t
 7736 2694 C7F88800 		str	r0, [r7, #136]	@ float
1888:.\console.c   **** 					float my_pm_max = PMOTE_max(&pan_qpower_stat);
 7737              		.loc 1 1888 0
 7738 2698 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7739 269c C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7740 26a0 FFF7FEFF 		bl	PMOTE_max
 7741 26a4 C7F88400 		str	r0, [r7, #132]	@ float
1889:.\console.c   **** 					float my_pm_med = PMOTE_mean(&pan_qpower_stat);
 7742              		.loc 1 1889 0
 7743 26a8 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7744 26ac C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7745 26b0 FFF7FEFF 		bl	PMOTE_mean
 7746 26b4 C7F88000 		str	r0, [r7, #128]	@ float
1890:.\console.c   **** 					
1891:.\console.c   **** 					printf("T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed
 7747              		.loc 1 1891 0
 7748 26b8 D7F89400 		ldr	r0, [r7, #148]	@ float
 7749 26bc FFF7FEFF 		bl	__aeabi_f2d
 7750 26c0 0446     		mov	r4, r0
 7751 26c2 0D46     		mov	r5, r1
 7752 26c4 D7F89000 		ldr	r0, [r7, #144]	@ float
 7753 26c8 FFF7FEFF 		bl	__aeabi_f2d
 7754 26cc C7E91A01 		strd	r0, [r7, #104]
 7755 26d0 D7F88C00 		ldr	r0, [r7, #140]	@ float
 7756 26d4 FFF7FEFF 		bl	__aeabi_f2d
 7757 26d8 C7E91801 		strd	r0, [r7, #96]
 7758 26dc D7F88800 		ldr	r0, [r7, #136]	@ float
 7759 26e0 FFF7FEFF 		bl	__aeabi_f2d
 7760 26e4 8246     		mov	sl, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 219


 7761 26e6 8B46     		mov	fp, r1
 7762 26e8 D7F88400 		ldr	r0, [r7, #132]	@ float
 7763 26ec FFF7FEFF 		bl	__aeabi_f2d
 7764 26f0 8046     		mov	r8, r0
 7765 26f2 8946     		mov	r9, r1
 7766 26f4 D7F88000 		ldr	r0, [r7, #128]	@ float
 7767 26f8 FFF7FEFF 		bl	__aeabi_f2d
 7768 26fc 0246     		mov	r2, r0
 7769 26fe 0B46     		mov	r3, r1
 7770 2700 D7E91A01 		ldrd	r0, [r7, #104]
 7771 2704 CDE90001 		strd	r0, [sp]
 7772 2708 D7E91801 		ldrd	r0, [r7, #96]
 7773 270c CDE90201 		strd	r0, [sp, #8]
 7774 2710 CDE904AB 		strd	sl, [sp, #16]
 7775 2714 CDE90689 		strd	r8, [sp, #24]
 7776 2718 CDE90823 		strd	r2, [sp, #32]
 7777 271c 40F20000 		movw	r0, #:lower16:.LC373
 7778 2720 C0F20000 		movt	r0, #:upper16:.LC373
 7779 2724 2246     		mov	r2, r4
 7780 2726 2B46     		mov	r3, r5
 7781 2728 FFF7FEFF 		bl	printf
1892:.\console.c   **** 							(float)my_torque,
1893:.\console.c   **** 							(float)my_omega,
1894:.\console.c   **** 							(float)my_rpm,							
1895:.\console.c   **** 							(float)my_pm_t,
1896:.\console.c   **** 							(float)my_pm_max,
1897:.\console.c   **** 							(float)my_pm_med);
1898:.\console.c   **** 					
1899:.\console.c   **** 					CyDelay(30);
 7782              		.loc 1 1899 0
 7783 272c 4FF01E00 		mov	r0, #30
 7784 2730 FFF7FEFF 		bl	CyDelay
 7785              	.L265:
 7786              	.LBE6:
1881:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7787              		.loc 1 1881 0 discriminator 1
 7788 2734 FFF7FEFF 		bl	AnyButtonPressed
 7789 2738 0346     		mov	r3, r0
 7790 273a 002B     		cmp	r3, #0
 7791 273c 8CD0     		beq	.L266
1900:.\console.c   **** 				}
1901:.\console.c   **** 				qpower_statistics_stop(&pan_qpower_stat);				/* stop quasi-power Statistics	   						*/				
 7792              		.loc 1 1901 0
 7793 273e 40F20000 		movw	r0, #:lower16:pan_qpower_stat
 7794 2742 C0F20000 		movt	r0, #:upper16:pan_qpower_stat
 7795 2746 FFF7FEFF 		bl	qpower_statistics_stop
1902:.\console.c   **** 				isr_TORQUESTAT_Stop();									/* stop torque statistics isr							*/
 7796              		.loc 1 1902 0
 7797 274a FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1903:.\console.c   **** 								
1904:.\console.c   **** 				goto exitpars;	
 7798              		.loc 1 1904 0
 7799 274e 04F0FFBB 		b	.L131
 7800              	.L729:
 7801 2752 00BF     		.align	2
 7802              	.L728:
 7803 2754 0F000000 		.word	actual_cmd+15
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 220


 7804              	.L264:
1905:.\console.c   **** 			}
1906:.\console.c   **** 			// END SHOW PAN MOTOR EROGATED POWER STATISTICS			
1907:.\console.c   **** 		
1908:.\console.c   **** 			
1909:.\console.c   **** 			// SHOW TILT MOTOR EROGATED POWER STATISTICS
1910:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmpower") == 0) ||
 7805              		.loc 1 1910 0
 7806 2758 BC48     		ldr	r0, .L730
 7807 275a 40F20001 		movw	r1, #:lower16:.LC374
 7808 275e C0F20001 		movt	r1, #:upper16:.LC374
 7809 2762 FFF7FEFF 		bl	strcmp
 7810 2766 0346     		mov	r3, r0
 7811 2768 002B     		cmp	r3, #0
 7812 276a 0AD0     		beq	.L267
1911:.\console.c   **** 				(strcmp(actual_cmd.parameter, "tmp") == 0))
 7813              		.loc 1 1911 0 discriminator 1
 7814 276c B748     		ldr	r0, .L730
 7815 276e 40F20001 		movw	r1, #:lower16:.LC375
 7816 2772 C0F20001 		movt	r1, #:upper16:.LC375
 7817 2776 FFF7FEFF 		bl	strcmp
 7818 277a 0346     		mov	r3, r0
1910:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tmpower") == 0) ||
 7819              		.loc 1 1910 0 discriminator 1
 7820 277c 002B     		cmp	r3, #0
 7821 277e 40F09680 		bne	.L268
 7822              	.L267:
1912:.\console.c   **** 			{
1913:.\console.c   **** 				isr_TORQUESTAT_Start();									/* start torque statistics isr	 						*/
 7823              		.loc 1 1913 0
 7824 2782 FFF7FEFF 		bl	isr_TORQUESTAT_Start
1914:.\console.c   **** 	
1915:.\console.c   **** 				motor_abs_velocity_sampling_init(&tilt_torque_stat);	/* Initialize Tilt Motor abs(Angular Veloc
 7825              		.loc 1 1915 0
 7826 2786 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7827 278a C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7828 278e FFF7FEFF 		bl	motor_abs_velocity_sampling_init
1916:.\console.c   **** 				qpower_statistics_start(&tilt_qpower_stat);				/* initialize quasi-power Statistics					*/
 7829              		.loc 1 1916 0
 7830 2792 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7831 2796 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7832 279a FFF7FEFF 		bl	qpower_statistics_start
1917:.\console.c   **** 				
1918:.\console.c   **** 				printf("\r\nAxis=Tilt\r\n\r\n");
 7833              		.loc 1 1918 0
 7834 279e 40F20000 		movw	r0, #:lower16:.LC365
 7835 27a2 C0F20000 		movt	r0, #:upper16:.LC365
 7836 27a6 FFF7FEFF 		bl	puts
1919:.\console.c   **** 				CyDelay(500);
 7837              		.loc 1 1919 0
 7838 27aa 4FF4FA70 		mov	r0, #500
 7839 27ae FFF7FEFF 		bl	CyDelay
1920:.\console.c   **** 				
1921:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7840              		.loc 1 1921 0
 7841 27b2 6DE0     		b	.L269
 7842              	.L270:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 221


 7843              	.LBB7:
1922:.\console.c   **** 				{
1923:.\console.c   **** 					//simultaneous sampling
1924:.\console.c   **** 					float my_torque = TMOT_t(&tilt_torque_stat);
 7844              		.loc 1 1924 0
 7845 27b4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7846 27b8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7847 27bc FFF7FEFF 		bl	TMOT_t
 7848 27c0 C7F8AC00 		str	r0, [r7, #172]	@ float
1925:.\console.c   **** 					float my_omega  = omega_t(&tilt_torque_stat);
 7849              		.loc 1 1925 0
 7850 27c4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7851 27c8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7852 27cc FFF7FEFF 		bl	omega_t
 7853 27d0 C7F8A800 		str	r0, [r7, #168]	@ float
1926:.\console.c   **** 					float my_rpm    = rpm_t(&tilt_torque_stat);
 7854              		.loc 1 1926 0
 7855 27d4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7856 27d8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7857 27dc FFF7FEFF 		bl	rpm_t
 7858 27e0 C7F8A400 		str	r0, [r7, #164]	@ float
1927:.\console.c   **** 					float my_pm_t   = PMOTE_t(&tilt_torque_stat);
 7859              		.loc 1 1927 0
 7860 27e4 40F20000 		movw	r0, #:lower16:tilt_torque_stat
 7861 27e8 C0F20000 		movt	r0, #:upper16:tilt_torque_stat
 7862 27ec FFF7FEFF 		bl	PMOTE_t
 7863 27f0 C7F8A000 		str	r0, [r7, #160]	@ float
1928:.\console.c   **** 					float my_pm_max = PMOTE_max(&tilt_qpower_stat);
 7864              		.loc 1 1928 0
 7865 27f4 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7866 27f8 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7867 27fc FFF7FEFF 		bl	PMOTE_max
 7868 2800 C7F89C00 		str	r0, [r7, #156]	@ float
1929:.\console.c   **** 					float my_pm_med = PMOTE_mean(&tilt_qpower_stat);
 7869              		.loc 1 1929 0
 7870 2804 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7871 2808 C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7872 280c FFF7FEFF 		bl	PMOTE_mean
 7873 2810 C7F89800 		str	r0, [r7, #152]	@ float
1930:.\console.c   **** 					
1931:.\console.c   **** 					printf("T(t)=%3.1f[mNm]  v(t)=%3.1f[rad/sec](%3.1f[rpm])  p(t)=%3.1f[mW]  pmax=%3.1f[mW]  pmed
 7874              		.loc 1 1931 0
 7875 2814 D7F8AC00 		ldr	r0, [r7, #172]	@ float
 7876 2818 FFF7FEFF 		bl	__aeabi_f2d
 7877 281c 0446     		mov	r4, r0
 7878 281e 0D46     		mov	r5, r1
 7879 2820 D7F8A800 		ldr	r0, [r7, #168]	@ float
 7880 2824 FFF7FEFF 		bl	__aeabi_f2d
 7881 2828 C7E91E01 		strd	r0, [r7, #120]
 7882 282c D7F8A400 		ldr	r0, [r7, #164]	@ float
 7883 2830 FFF7FEFF 		bl	__aeabi_f2d
 7884 2834 C7E91C01 		strd	r0, [r7, #112]
 7885 2838 D7F8A000 		ldr	r0, [r7, #160]	@ float
 7886 283c FFF7FEFF 		bl	__aeabi_f2d
 7887 2840 8246     		mov	sl, r0
 7888 2842 8B46     		mov	fp, r1
 7889 2844 D7F89C00 		ldr	r0, [r7, #156]	@ float
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 222


 7890 2848 FFF7FEFF 		bl	__aeabi_f2d
 7891 284c 8046     		mov	r8, r0
 7892 284e 8946     		mov	r9, r1
 7893 2850 D7F89800 		ldr	r0, [r7, #152]	@ float
 7894 2854 FFF7FEFF 		bl	__aeabi_f2d
 7895 2858 0246     		mov	r2, r0
 7896 285a 0B46     		mov	r3, r1
 7897 285c D7E91E01 		ldrd	r0, [r7, #120]
 7898 2860 CDE90001 		strd	r0, [sp]
 7899 2864 D7E91C01 		ldrd	r0, [r7, #112]
 7900 2868 CDE90201 		strd	r0, [sp, #8]
 7901 286c CDE904AB 		strd	sl, [sp, #16]
 7902 2870 CDE90689 		strd	r8, [sp, #24]
 7903 2874 CDE90823 		strd	r2, [sp, #32]
 7904 2878 40F20000 		movw	r0, #:lower16:.LC373
 7905 287c C0F20000 		movt	r0, #:upper16:.LC373
 7906 2880 2246     		mov	r2, r4
 7907 2882 2B46     		mov	r3, r5
 7908 2884 FFF7FEFF 		bl	printf
1932:.\console.c   **** 							(float)my_torque,
1933:.\console.c   **** 							(float)my_omega,
1934:.\console.c   **** 							(float)my_rpm,							
1935:.\console.c   **** 							(float)my_pm_t,
1936:.\console.c   **** 							(float)my_pm_max,
1937:.\console.c   **** 							(float)my_pm_med);
1938:.\console.c   **** 					
1939:.\console.c   **** 					CyDelay(30);
 7909              		.loc 1 1939 0
 7910 2888 4FF01E00 		mov	r0, #30
 7911 288c FFF7FEFF 		bl	CyDelay
 7912              	.L269:
 7913              	.LBE7:
1921:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 7914              		.loc 1 1921 0 discriminator 1
 7915 2890 FFF7FEFF 		bl	AnyButtonPressed
 7916 2894 0346     		mov	r3, r0
 7917 2896 002B     		cmp	r3, #0
 7918 2898 8CD0     		beq	.L270
1940:.\console.c   **** 				}
1941:.\console.c   **** 				qpower_statistics_stop(&tilt_qpower_stat);	/* stops quasi-power Statistics							*/				
 7919              		.loc 1 1941 0
 7920 289a 40F20000 		movw	r0, #:lower16:tilt_qpower_stat
 7921 289e C0F20000 		movt	r0, #:upper16:tilt_qpower_stat
 7922 28a2 FFF7FEFF 		bl	qpower_statistics_stop
1942:.\console.c   **** 				isr_TORQUESTAT_Stop();						/* stop torque statistics isr							*/
 7923              		.loc 1 1942 0
 7924 28a6 FFF7FEFF 		bl	isr_TORQUESTAT_Stop
1943:.\console.c   **** 				
1944:.\console.c   **** 				goto exitpars;	
 7925              		.loc 1 1944 0
 7926 28aa 04F051BB 		b	.L131
 7927              	.L268:
1945:.\console.c   **** 			}
1946:.\console.c   **** 			// END SHOW TILT MOTOR EROGATED POWER STATISTICS				
1947:.\console.c   **** 			
1948:.\console.c   **** 			
1949:.\console.c   **** 			// SHOW PAN ABSOLUTE SENSOR STATS
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 223


1950:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "pabsstats") == 0)	
 7928              		.loc 1 1950 0
 7929 28ae 6748     		ldr	r0, .L730
 7930 28b0 40F20001 		movw	r1, #:lower16:.LC376
 7931 28b4 C0F20001 		movt	r1, #:upper16:.LC376
 7932 28b8 FFF7FEFF 		bl	strcmp
 7933 28bc 0346     		mov	r3, r0
 7934 28be 002B     		cmp	r3, #0
 7935 28c0 09D0     		beq	.L271
1951:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "pabs") == 0))
 7936              		.loc 1 1951 0
 7937 28c2 6248     		ldr	r0, .L730
 7938 28c4 40F20001 		movw	r1, #:lower16:.LC377
 7939 28c8 C0F20001 		movt	r1, #:upper16:.LC377
 7940 28cc FFF7FEFF 		bl	strcmp
 7941 28d0 0346     		mov	r3, r0
 7942 28d2 002B     		cmp	r3, #0
 7943 28d4 4DD1     		bne	.L272
 7944              	.L271:
1952:.\console.c   **** 			{			
1953:.\console.c   **** 				printf("PAN Absolute Sensor:");					
 7945              		.loc 1 1953 0
 7946 28d6 40F20000 		movw	r0, #:lower16:.LC378
 7947 28da C0F20000 		movt	r0, #:upper16:.LC378
 7948 28de FFF7FEFF 		bl	printf
1954:.\console.c   **** 				printf(" mean=%+1.1f [raw]", (float) pan_absolute_sensor_stat.mean);
 7949              		.loc 1 1954 0
 7950 28e2 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7951 28e6 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7952 28ea 5B68     		ldr	r3, [r3, #4]	@ float
 7953 28ec 1846     		mov	r0, r3
 7954 28ee FFF7FEFF 		bl	__aeabi_f2d
 7955 28f2 0246     		mov	r2, r0
 7956 28f4 0B46     		mov	r3, r1
 7957 28f6 40F20000 		movw	r0, #:lower16:.LC379
 7958 28fa C0F20000 		movt	r0, #:upper16:.LC379
 7959 28fe FFF7FEFF 		bl	printf
1955:.\console.c   **** 				printf(" max=%+1.1f [raw]", (float) pan_absolute_sensor_stat.max);
 7960              		.loc 1 1955 0
 7961 2902 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7962 2906 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7963 290a 1B69     		ldr	r3, [r3, #16]	@ float
 7964 290c 1846     		mov	r0, r3
 7965 290e FFF7FEFF 		bl	__aeabi_f2d
 7966 2912 0246     		mov	r2, r0
 7967 2914 0B46     		mov	r3, r1
 7968 2916 40F20000 		movw	r0, #:lower16:.LC380
 7969 291a C0F20000 		movt	r0, #:upper16:.LC380
 7970 291e FFF7FEFF 		bl	printf
1956:.\console.c   **** 				printf(" min=%+1.1f [raw]", (float) pan_absolute_sensor_stat.min);					
 7971              		.loc 1 1956 0
 7972 2922 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7973 2926 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7974 292a DB68     		ldr	r3, [r3, #12]	@ float
 7975 292c 1846     		mov	r0, r3
 7976 292e FFF7FEFF 		bl	__aeabi_f2d
 7977 2932 0246     		mov	r2, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 224


 7978 2934 0B46     		mov	r3, r1
 7979 2936 40F20000 		movw	r0, #:lower16:.LC381
 7980 293a C0F20000 		movt	r0, #:upper16:.LC381
 7981 293e FFF7FEFF 		bl	printf
1957:.\console.c   **** 				printf(" range=%+1.1f [raw]", (float) pan_absolute_sensor_stat.range);						
 7982              		.loc 1 1957 0
 7983 2942 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 7984 2946 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 7985 294a 5B69     		ldr	r3, [r3, #20]	@ float
 7986 294c 1846     		mov	r0, r3
 7987 294e FFF7FEFF 		bl	__aeabi_f2d
 7988 2952 0246     		mov	r2, r0
 7989 2954 0B46     		mov	r3, r1
 7990 2956 40F20000 		movw	r0, #:lower16:.LC382
 7991 295a C0F20000 		movt	r0, #:upper16:.LC382
 7992 295e FFF7FEFF 		bl	printf
1958:.\console.c   **** 					
1959:.\console.c   **** 				printf("\r\n");	
 7993              		.loc 1 1959 0
 7994 2962 40F20000 		movw	r0, #:lower16:.LC42
 7995 2966 C0F20000 		movt	r0, #:upper16:.LC42
 7996 296a FFF7FEFF 		bl	puts
1960:.\console.c   **** 
1961:.\console.c   **** 				goto exitpars;	
 7997              		.loc 1 1961 0
 7998 296e 04F0EFBA 		b	.L131
 7999              	.L272:
1962:.\console.c   **** 			}
1963:.\console.c   **** 			// SHOW PAN ABSOLUTE SENSOR STATS END	
1964:.\console.c   **** 			
1965:.\console.c   **** 			
1966:.\console.c   **** 			// SHOW TILT ABSOLUTE SENSOR STATS
1967:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tabsstats") == 0)	
 8000              		.loc 1 1967 0
 8001 2972 3648     		ldr	r0, .L730
 8002 2974 40F20001 		movw	r1, #:lower16:.LC383
 8003 2978 C0F20001 		movt	r1, #:upper16:.LC383
 8004 297c FFF7FEFF 		bl	strcmp
 8005 2980 0346     		mov	r3, r0
 8006 2982 002B     		cmp	r3, #0
 8007 2984 09D0     		beq	.L273
1968:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "tabs") == 0))
 8008              		.loc 1 1968 0
 8009 2986 3148     		ldr	r0, .L730
 8010 2988 40F20001 		movw	r1, #:lower16:.LC384
 8011 298c C0F20001 		movt	r1, #:upper16:.LC384
 8012 2990 FFF7FEFF 		bl	strcmp
 8013 2994 0346     		mov	r3, r0
 8014 2996 002B     		cmp	r3, #0
 8015 2998 4DD1     		bne	.L274
 8016              	.L273:
1969:.\console.c   **** 			{			
1970:.\console.c   **** 				printf("TILT Absolute Sensor:");					
 8017              		.loc 1 1970 0
 8018 299a 40F20000 		movw	r0, #:lower16:.LC385
 8019 299e C0F20000 		movt	r0, #:upper16:.LC385
 8020 29a2 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 225


1971:.\console.c   **** 				printf(" mean=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.mean);
 8021              		.loc 1 1971 0
 8022 29a6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8023 29aa C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8024 29ae 5B68     		ldr	r3, [r3, #4]	@ float
 8025 29b0 1846     		mov	r0, r3
 8026 29b2 FFF7FEFF 		bl	__aeabi_f2d
 8027 29b6 0246     		mov	r2, r0
 8028 29b8 0B46     		mov	r3, r1
 8029 29ba 40F20000 		movw	r0, #:lower16:.LC379
 8030 29be C0F20000 		movt	r0, #:upper16:.LC379
 8031 29c2 FFF7FEFF 		bl	printf
1972:.\console.c   **** 				printf(" max=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.max);
 8032              		.loc 1 1972 0
 8033 29c6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8034 29ca C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8035 29ce 1B69     		ldr	r3, [r3, #16]	@ float
 8036 29d0 1846     		mov	r0, r3
 8037 29d2 FFF7FEFF 		bl	__aeabi_f2d
 8038 29d6 0246     		mov	r2, r0
 8039 29d8 0B46     		mov	r3, r1
 8040 29da 40F20000 		movw	r0, #:lower16:.LC380
 8041 29de C0F20000 		movt	r0, #:upper16:.LC380
 8042 29e2 FFF7FEFF 		bl	printf
1973:.\console.c   **** 				printf(" min=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.min);					
 8043              		.loc 1 1973 0
 8044 29e6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8045 29ea C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8046 29ee DB68     		ldr	r3, [r3, #12]	@ float
 8047 29f0 1846     		mov	r0, r3
 8048 29f2 FFF7FEFF 		bl	__aeabi_f2d
 8049 29f6 0246     		mov	r2, r0
 8050 29f8 0B46     		mov	r3, r1
 8051 29fa 40F20000 		movw	r0, #:lower16:.LC381
 8052 29fe C0F20000 		movt	r0, #:upper16:.LC381
 8053 2a02 FFF7FEFF 		bl	printf
1974:.\console.c   **** 				printf(" range=%+1.1f [raw]", (float) tilt_absolute_sensor_stat.range);						
 8054              		.loc 1 1974 0
 8055 2a06 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 8056 2a0a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 8057 2a0e 5B69     		ldr	r3, [r3, #20]	@ float
 8058 2a10 1846     		mov	r0, r3
 8059 2a12 FFF7FEFF 		bl	__aeabi_f2d
 8060 2a16 0246     		mov	r2, r0
 8061 2a18 0B46     		mov	r3, r1
 8062 2a1a 40F20000 		movw	r0, #:lower16:.LC382
 8063 2a1e C0F20000 		movt	r0, #:upper16:.LC382
 8064 2a22 FFF7FEFF 		bl	printf
1975:.\console.c   **** 					
1976:.\console.c   **** 				printf("\r\n");	
 8065              		.loc 1 1976 0
 8066 2a26 40F20000 		movw	r0, #:lower16:.LC42
 8067 2a2a C0F20000 		movt	r0, #:upper16:.LC42
 8068 2a2e FFF7FEFF 		bl	puts
1977:.\console.c   **** 
1978:.\console.c   **** 				goto exitpars;	
 8069              		.loc 1 1978 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 226


 8070 2a32 04F08DBA 		b	.L131
 8071              	.L274:
1979:.\console.c   **** 			}
1980:.\console.c   **** 			// SHOW TILT ABSOLUTE SENSOR STATS END	
1981:.\console.c   **** 
1982:.\console.c   **** 			
1983:.\console.c   **** 			// SHOW ASTIM
1984:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "astim") == 0)	
 8072              		.loc 1 1984 0
 8073 2a36 0548     		ldr	r0, .L730
 8074 2a38 40F20001 		movw	r1, #:lower16:.LC386
 8075 2a3c C0F20001 		movt	r1, #:upper16:.LC386
 8076 2a40 FFF7FEFF 		bl	strcmp
 8077 2a44 0346     		mov	r3, r0
 8078 2a46 002B     		cmp	r3, #0
 8079 2a48 3AD1     		bne	.L275
1985:.\console.c   **** 			{
1986:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8080              		.loc 1 1986 0
 8081 2a4a 32E0     		b	.L276
 8082              	.L731:
 8083              		.align	2
 8084              	.L730:
 8085 2a4c 0F000000 		.word	actual_cmd+15
 8086              	.L277:
1987:.\console.c   **** 				{					
1988:.\console.c   **** 					printf("ASTIM(ADC_INPUT) =%+5d [lsb]", (int16)AdcValue[CTRL_IN_ASTIM]);					
 8087              		.loc 1 1988 0
 8088 2a50 40F20003 		movw	r3, #:lower16:AdcValue
 8089 2a54 C0F20003 		movt	r3, #:upper16:AdcValue
 8090 2a58 1B8A     		ldrh	r3, [r3, #16]
 8091 2a5a 1BB2     		sxth	r3, r3
 8092 2a5c 40F20000 		movw	r0, #:lower16:.LC387
 8093 2a60 C0F20000 		movt	r0, #:upper16:.LC387
 8094 2a64 1946     		mov	r1, r3
 8095 2a66 FFF7FEFF 		bl	printf
1989:.\console.c   **** 					printf("   ASTIM(P)=%+5.1f [step]", (float)pan_axis.mc.Float_ASTIM);
 8096              		.loc 1 1989 0
 8097 2a6a 40F20003 		movw	r3, #:lower16:pan_axis
 8098 2a6e C0F20003 		movt	r3, #:upper16:pan_axis
 8099 2a72 DB6F     		ldr	r3, [r3, #124]	@ float
 8100 2a74 1846     		mov	r0, r3
 8101 2a76 FFF7FEFF 		bl	__aeabi_f2d
 8102 2a7a 0246     		mov	r2, r0
 8103 2a7c 0B46     		mov	r3, r1
 8104 2a7e 40F20000 		movw	r0, #:lower16:.LC388
 8105 2a82 C0F20000 		movt	r0, #:upper16:.LC388
 8106 2a86 FFF7FEFF 		bl	printf
1990:.\console.c   **** 					printf("   ASTIM(T)=%+5.1f [step]\r\n", (float)tilt_axis.mc.Float_ASTIM);
 8107              		.loc 1 1990 0
 8108 2a8a 40F20003 		movw	r3, #:lower16:tilt_axis
 8109 2a8e C0F20003 		movt	r3, #:upper16:tilt_axis
 8110 2a92 DB6F     		ldr	r3, [r3, #124]	@ float
 8111 2a94 1846     		mov	r0, r3
 8112 2a96 FFF7FEFF 		bl	__aeabi_f2d
 8113 2a9a 0246     		mov	r2, r0
 8114 2a9c 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 227


 8115 2a9e 40F20000 		movw	r0, #:lower16:.LC389
 8116 2aa2 C0F20000 		movt	r0, #:upper16:.LC389
 8117 2aa6 FFF7FEFF 		bl	printf
1991:.\console.c   **** 					CyDelay(10);
 8118              		.loc 1 1991 0
 8119 2aaa 4FF00A00 		mov	r0, #10
 8120 2aae FFF7FEFF 		bl	CyDelay
 8121              	.L276:
1986:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8122              		.loc 1 1986 0 discriminator 1
 8123 2ab2 FFF7FEFF 		bl	AnyButtonPressed
 8124 2ab6 0346     		mov	r3, r0
 8125 2ab8 002B     		cmp	r3, #0
 8126 2aba C9D0     		beq	.L277
1992:.\console.c   **** 				}
1993:.\console.c   **** 				goto exitpars;	
 8127              		.loc 1 1993 0
 8128 2abc 04F048BA 		b	.L131
 8129              	.L275:
1994:.\console.c   **** 			}
1995:.\console.c   **** 			// END SHOW astim			
1996:.\console.c   **** 			
1997:.\console.c   **** 			
1998:.\console.c   **** #if ITG_3701_ENABLED			
1999:.\console.c   **** 			// SHOW ITG-3701 DIGITAL GYRO
2000:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "itg3701") == 0)	
2001:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "3701") == 0))
2002:.\console.c   **** 			{
2003:.\console.c   **** 				// Verify HW connection
2004:.\console.c   **** 				dummy = ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_WHO_AM_I);  // Read WHO_AM_I register for ITG
2005:.\console.c   **** 			  	printf("ITG3701 gyro; I AM 0x%02X (should be 0x68)\r\n",(uint16)dummy);
2006:.\console.c   **** 				CyDelay(1);
2007:.\console.c   **** 				
2008:.\console.c   **** //				// Initialize ITG-3701 gyro
2009:.\console.c   **** //				initITG3701();
2010:.\console.c   **** 
2011:.\console.c   **** //			    // Calibrate gyro loading biases in bias registers
2012:.\console.c   **** //			    gyrocalITG3701(gyroBias);
2013:.\console.c   **** 
2014:.\console.c   **** //				// get sensor resolutions, only need to do this once (calculates gRes)
2015:.\console.c   **** //			   	getGres();	
2016:.\console.c   **** 			   	printf("ITG3701 gyro sensitivity is %1.4f LSB/dps\r\n", (float)1.0/(gRes));	
2017:.\console.c   **** 				
2018:.\console.c   **** 				// verify and print sensor resolution HW register
2019:.\console.c   **** 				dummy = ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_GYRO_CONFIG); // Read ITG3701_GYRO_CONFIG reg
2020:.\console.c   **** 				printf("ITG3701_GYRO_CONFIG = 0x%02X\r\n\r\n",(uint16)dummy);
2021:.\console.c   **** 				
2022:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2023:.\console.c   **** 				{
2024:.\console.c   **** 					if (ITG3701_ReadByte(ITG3701_ADDRESS, ITG3701_INT_STATUS) & 0x01)  // check if new gyro data i
2025:.\console.c   **** 					{
2026:.\console.c   **** 						readGyroData(gyroCount);  // Read the x/y/z adc values
2027:.\console.c   **** 
2028:.\console.c   **** 					    // Calculate the gyro value into actual degrees per second
2029:.\console.c   **** 					    gx = (float)gyroCount[0]*gRes - gyroBias[0];  // get actual gyro value, this depends on sc
2030:.\console.c   **** 					    gy = (float)gyroCount[1]*gRes - gyroBias[1];  
2031:.\console.c   **** 					    gz = (float)gyroCount[2]*gRes - gyroBias[2]; 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 228


2032:.\console.c   **** 					}
2033:.\console.c   **** 					printf("gx=%1.4f gy=%1.4f gz=%1.4f\r\n",(float)gx, (float)gy, (float)gz);
2034:.\console.c   **** 					CyDelay(50);
2035:.\console.c   **** 				}
2036:.\console.c   **** 				goto exitpars;	
2037:.\console.c   **** 			}
2038:.\console.c   **** 			// SHOW ITG-3701 DIGITAL GYRO END			
2039:.\console.c   **** #endif
2040:.\console.c   **** 
2041:.\console.c   **** #if IMU_UM7_ENABLED
2042:.\console.c   **** 			// SHOW IMU CHR-UM7-LT CH ROBOTICS (rgatti code)
2043:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuum7") == 0)	
2044:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imu") == 0))
2045:.\console.c   **** 			{
2046:.\console.c   **** 				//IMU_UM7_PACKETIZER_Debug(true);
2047:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2048:.\console.c   **** 				{	
2049:.\console.c   **** 					print_euler_angles(&euler_angles);
2050:.\console.c   **** 					
2051:.\console.c   **** //					if(IMU_UM7_Error())
2052:.\console.c   **** //					{
2053:.\console.c   **** 						printf(" Serial errors=%d", IMU_UM7_serial_errors_count);
2054:.\console.c   **** //					}
2055:.\console.c   **** 					
2056:.\console.c   **** 					printf("\r\n");	
2057:.\console.c   **** 					CyDelay(50);
2058:.\console.c   **** 				}
2059:.\console.c   **** 				goto exitpars;	
2060:.\console.c   **** 			}
2061:.\console.c   **** 			// SHOW IMU CHR-UM7-LT CH ROBOTICS (rgatti code) END
2062:.\console.c   **** 			
2063:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SETTINGS (rgatti code)
2064:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuset") == 0)	
2065:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imusettings") == 0))
2066:.\console.c   **** 			{	
2067:.\console.c   **** //				isr_CTRL_Stop();				/* Stop Control ISR						 	 	 */
2068:.\console.c   **** //				CyDelay(10);	
2069:.\console.c   **** 				
2070:.\console.c   **** 				IMU_UM7_Stop();					/* Stop CH ROBOTICS UM7-LT IMU (rgatti code) 	 */				
2071:.\console.c   **** 				IMU_UM7_UART_ClearRxBuffer();	/* Clear IMU-UM7 Psoc HW Component RX Buffer	 */				
2072:.\console.c   **** 				IMU_UM7_InitAndStart();			/* Re-Start CH ROBOTICS UM7-LT IMU (rgatti code) */	
2073:.\console.c   **** 				CyDelay(10);					
2074:.\console.c   **** 				IMU_UM7_PrintSettings();
2075:.\console.c   **** 				
2076:.\console.c   **** 				printf("\r\nERRORS:");
2077:.\console.c   **** 				printf("\r\n  Serial errors=%d", IMU_UM7_serial_errors_count);
2078:.\console.c   **** 				
2079:.\console.c   **** 				printf("\r\n");	
2080:.\console.c   **** 				CyDelay(50);
2081:.\console.c   **** 			
2082:.\console.c   **** 				IMU_UM7_Stop();					/* Stop CH ROBOTICS UM7-LT IMU (rgatti code) 	*/
2083:.\console.c   **** 				IMU_UM7_UART_ClearRxBuffer();	/* Clear IMU-UM7 Psoc HW Component RX Buffer	*/				
2084:.\console.c   **** 				IMU_UM7_InitAndStart();			/* Re-Start CH ROBOTICS UM7-LT IMU (rgatti code)*/
2085:.\console.c   **** 				
2086:.\console.c   **** //				CyDelay(10);				
2087:.\console.c   **** //				isr_CTRL_Start();				/* Re-Start Control ISR				 	 	 	*/
2088:.\console.c   **** 					
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 229


2089:.\console.c   **** 				goto exitpars;	
2090:.\console.c   **** 			}
2091:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SETTINGS (rgatti code) END	
2092:.\console.c   **** 			
2093:.\console.c   **** 			
2094:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SERIAL ERRORS (rgatti code)
2095:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "imuerr") == 0)	
2096:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "imuerrors") == 0))
2097:.\console.c   **** 			{	
2098:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
2099:.\console.c   **** 				{					
2100:.\console.c   **** 					printf("\r\nIMU UM7-LT Serial errors=%d", IMU_UM7_serial_errors_count);
2101:.\console.c   **** 					CyDelay(50);
2102:.\console.c   **** 				}
2103:.\console.c   **** 				printf("\r\n");	
2104:.\console.c   **** 
2105:.\console.c   **** 				goto exitpars;	
2106:.\console.c   **** 			}
2107:.\console.c   **** 			// SHOW IMU CHR-UM7-LT SERIAL ERRORS (rgatti code) END				
2108:.\console.c   **** #endif			
2109:.\console.c   **** 
2110:.\console.c   **** 			// SHOW BIKE EULER ANGLES
2111:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "bikeangles") == 0)	
 8130              		.loc 1 2111 0
 8131 2ac0 B348     		ldr	r0, .L732
 8132 2ac2 40F20001 		movw	r1, #:lower16:.LC390
 8133 2ac6 C0F20001 		movt	r1, #:upper16:.LC390
 8134 2aca FFF7FEFF 		bl	strcmp
 8135 2ace 0346     		mov	r3, r0
 8136 2ad0 002B     		cmp	r3, #0
 8137 2ad2 39D0     		beq	.L694
2112:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "bike") == 0))
 8138              		.loc 1 2112 0
 8139 2ad4 AE48     		ldr	r0, .L732
 8140 2ad6 40F20001 		movw	r1, #:lower16:.LC391
 8141 2ada C0F20001 		movt	r1, #:upper16:.LC391
 8142 2ade FFF7FEFF 		bl	strcmp
 8143 2ae2 0346     		mov	r3, r0
 8144 2ae4 002B     		cmp	r3, #0
 8145 2ae6 37D1     		bne	.L279
2113:.\console.c   **** 			{
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8146              		.loc 1 2114 0
 8147 2ae8 2EE0     		b	.L694
 8148              	.L281:
2115:.\console.c   **** 				{	
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
2117:.\console.c   **** 							(float)IMU_sensor.bike_yaw_lpf,
 8149              		.loc 1 2117 0
 8150 2aea 40F20003 		movw	r3, #:lower16:IMU_sensor
 8151 2aee C0F20003 		movt	r3, #:upper16:IMU_sensor
 8152 2af2 DB68     		ldr	r3, [r3, #12]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8153              		.loc 1 2116 0
 8154 2af4 1846     		mov	r0, r3
 8155 2af6 FFF7FEFF 		bl	__aeabi_f2d
 8156 2afa 0446     		mov	r4, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 230


 8157 2afc 0D46     		mov	r5, r1
2118:.\console.c   **** 							(float)IMU_sensor.bike_pitch_lpf,
 8158              		.loc 1 2118 0
 8159 2afe 40F20003 		movw	r3, #:lower16:IMU_sensor
 8160 2b02 C0F20003 		movt	r3, #:upper16:IMU_sensor
 8161 2b06 1B69     		ldr	r3, [r3, #16]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8162              		.loc 1 2116 0
 8163 2b08 1846     		mov	r0, r3
 8164 2b0a FFF7FEFF 		bl	__aeabi_f2d
 8165 2b0e 8046     		mov	r8, r0
 8166 2b10 8946     		mov	r9, r1
2119:.\console.c   **** 							(float)IMU_sensor.bike_roll_lpf);
 8167              		.loc 1 2119 0
 8168 2b12 40F20003 		movw	r3, #:lower16:IMU_sensor
 8169 2b16 C0F20003 		movt	r3, #:upper16:IMU_sensor
 8170 2b1a 5B69     		ldr	r3, [r3, #20]	@ float
2116:.\console.c   ****    					 printf("BIKE EULER LPF ANGLES: YAW(pan):%6.3f | PITCH(tilt):%6.3f | ROLL(roll):%6.3f |\r\n
 8171              		.loc 1 2116 0
 8172 2b1c 1846     		mov	r0, r3
 8173 2b1e FFF7FEFF 		bl	__aeabi_f2d
 8174 2b22 0246     		mov	r2, r0
 8175 2b24 0B46     		mov	r3, r1
 8176 2b26 CDE90089 		strd	r8, [sp]
 8177 2b2a CDE90223 		strd	r2, [sp, #8]
 8178 2b2e 40F20000 		movw	r0, #:lower16:.LC392
 8179 2b32 C0F20000 		movt	r0, #:upper16:.LC392
 8180 2b36 2246     		mov	r2, r4
 8181 2b38 2B46     		mov	r3, r5
 8182 2b3a FFF7FEFF 		bl	printf
2120:.\console.c   **** 					CyDelay(50);
 8183              		.loc 1 2120 0
 8184 2b3e 4FF03200 		mov	r0, #50
 8185 2b42 FFF7FEFF 		bl	CyDelay
 8186 2b46 00E0     		b	.L280
 8187              	.L694:
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8188              		.loc 1 2114 0
 8189 2b48 00BF     		nop
 8190              	.L280:
2114:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8191              		.loc 1 2114 0 is_stmt 0 discriminator 1
 8192 2b4a FFF7FEFF 		bl	AnyButtonPressed
 8193 2b4e 0346     		mov	r3, r0
 8194 2b50 002B     		cmp	r3, #0
 8195 2b52 CAD0     		beq	.L281
2121:.\console.c   **** 				}
2122:.\console.c   **** 				goto exitpars;	
 8196              		.loc 1 2122 0 is_stmt 1
 8197 2b54 04F0FCB9 		b	.L131
 8198              	.L279:
2123:.\console.c   **** 			}
2124:.\console.c   **** 			// BIKE EULER ANGLES END			
2125:.\console.c   **** 
2126:.\console.c   **** 			
2127:.\console.c   **** 			// SHOW ANALOG 3D ACCELEROMETER
2128:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "analogacc") == 0)	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 231


 8199              		.loc 1 2128 0
 8200 2b58 8D48     		ldr	r0, .L732
 8201 2b5a 40F20001 		movw	r1, #:lower16:.LC393
 8202 2b5e C0F20001 		movt	r1, #:upper16:.LC393
 8203 2b62 FFF7FEFF 		bl	strcmp
 8204 2b66 0346     		mov	r3, r0
 8205 2b68 002B     		cmp	r3, #0
 8206 2b6a 00F08180 		beq	.L695
2129:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "aacc") == 0))
 8207              		.loc 1 2129 0
 8208 2b6e 8848     		ldr	r0, .L732
 8209 2b70 40F20001 		movw	r1, #:lower16:.LC394
 8210 2b74 C0F20001 		movt	r1, #:upper16:.LC394
 8211 2b78 FFF7FEFF 		bl	strcmp
 8212 2b7c 0346     		mov	r3, r0
 8213 2b7e 002B     		cmp	r3, #0
 8214 2b80 7ED1     		bne	.L283
2130:.\console.c   **** 			{
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8215              		.loc 1 2131 0
 8216 2b82 75E0     		b	.L695
 8217              	.L285:
2132:.\console.c   **** 				{
2133:.\console.c   **** 					printf("x=%+1.4f[g] (%5i)", (float) aacc.x_axis.acceleration_lpf, (int16)aacc.x_axis.ADC);
 8218              		.loc 1 2133 0
 8219 2b84 40F20003 		movw	r3, #:lower16:aacc
 8220 2b88 C0F20003 		movt	r3, #:upper16:aacc
 8221 2b8c DB68     		ldr	r3, [r3, #12]	@ float
 8222 2b8e 1846     		mov	r0, r3
 8223 2b90 FFF7FEFF 		bl	__aeabi_f2d
 8224 2b94 0446     		mov	r4, r0
 8225 2b96 0D46     		mov	r5, r1
 8226 2b98 40F20003 		movw	r3, #:lower16:aacc
 8227 2b9c C0F20003 		movt	r3, #:upper16:aacc
 8228 2ba0 1B88     		ldrh	r3, [r3, #0]
 8229 2ba2 1BB2     		sxth	r3, r3
 8230 2ba4 0093     		str	r3, [sp, #0]
 8231 2ba6 40F20000 		movw	r0, #:lower16:.LC395
 8232 2baa C0F20000 		movt	r0, #:upper16:.LC395
 8233 2bae 2246     		mov	r2, r4
 8234 2bb0 2B46     		mov	r3, r5
 8235 2bb2 FFF7FEFF 		bl	printf
2134:.\console.c   **** 					printf(" y=%+1.4f[g] (%5i)", (float) aacc.y_axis.acceleration_lpf, (int16)aacc.y_axis.ADC);			
 8236              		.loc 1 2134 0
 8237 2bb6 40F20003 		movw	r3, #:lower16:aacc
 8238 2bba C0F20003 		movt	r3, #:upper16:aacc
 8239 2bbe DB69     		ldr	r3, [r3, #28]	@ float
 8240 2bc0 1846     		mov	r0, r3
 8241 2bc2 FFF7FEFF 		bl	__aeabi_f2d
 8242 2bc6 0446     		mov	r4, r0
 8243 2bc8 0D46     		mov	r5, r1
 8244 2bca 40F20003 		movw	r3, #:lower16:aacc
 8245 2bce C0F20003 		movt	r3, #:upper16:aacc
 8246 2bd2 1B8A     		ldrh	r3, [r3, #16]
 8247 2bd4 1BB2     		sxth	r3, r3
 8248 2bd6 0093     		str	r3, [sp, #0]
 8249 2bd8 40F20000 		movw	r0, #:lower16:.LC396
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 232


 8250 2bdc C0F20000 		movt	r0, #:upper16:.LC396
 8251 2be0 2246     		mov	r2, r4
 8252 2be2 2B46     		mov	r3, r5
 8253 2be4 FFF7FEFF 		bl	printf
2135:.\console.c   **** 					printf(" z=%+1.4f[g] (%5i)", (float) aacc.z_axis.acceleration_lpf, (int16)aacc.z_axis.ADC);
 8254              		.loc 1 2135 0
 8255 2be8 40F20003 		movw	r3, #:lower16:aacc
 8256 2bec C0F20003 		movt	r3, #:upper16:aacc
 8257 2bf0 DB6A     		ldr	r3, [r3, #44]	@ float
 8258 2bf2 1846     		mov	r0, r3
 8259 2bf4 FFF7FEFF 		bl	__aeabi_f2d
 8260 2bf8 0446     		mov	r4, r0
 8261 2bfa 0D46     		mov	r5, r1
 8262 2bfc 40F20003 		movw	r3, #:lower16:aacc
 8263 2c00 C0F20003 		movt	r3, #:upper16:aacc
 8264 2c04 1B8C     		ldrh	r3, [r3, #32]
 8265 2c06 1BB2     		sxth	r3, r3
 8266 2c08 0093     		str	r3, [sp, #0]
 8267 2c0a 40F20000 		movw	r0, #:lower16:.LC397
 8268 2c0e C0F20000 		movt	r0, #:upper16:.LC397
 8269 2c12 2246     		mov	r2, r4
 8270 2c14 2B46     		mov	r3, r5
 8271 2c16 FFF7FEFF 		bl	printf
2136:.\console.c   **** 					printf(" modulo=%+1.4f[g]", (float) aacc.modulo);					
 8272              		.loc 1 2136 0
 8273 2c1a 40F20003 		movw	r3, #:lower16:aacc
 8274 2c1e C0F20003 		movt	r3, #:upper16:aacc
 8275 2c22 5B6B     		ldr	r3, [r3, #52]	@ float
 8276 2c24 1846     		mov	r0, r3
 8277 2c26 FFF7FEFF 		bl	__aeabi_f2d
 8278 2c2a 0246     		mov	r2, r0
 8279 2c2c 0B46     		mov	r3, r1
 8280 2c2e 40F20000 		movw	r0, #:lower16:.LC398
 8281 2c32 C0F20000 		movt	r0, #:upper16:.LC398
 8282 2c36 FFF7FEFF 		bl	printf
2137:.\console.c   **** 					printf(" sdyn=%+1.4f[g^2]", (float) aacc.system_dynamic_scalar);
 8283              		.loc 1 2137 0
 8284 2c3a 40F20003 		movw	r3, #:lower16:aacc
 8285 2c3e C0F20003 		movt	r3, #:upper16:aacc
 8286 2c42 9B6B     		ldr	r3, [r3, #56]	@ float
 8287 2c44 1846     		mov	r0, r3
 8288 2c46 FFF7FEFF 		bl	__aeabi_f2d
 8289 2c4a 0246     		mov	r2, r0
 8290 2c4c 0B46     		mov	r3, r1
 8291 2c4e 40F20000 		movw	r0, #:lower16:.LC399
 8292 2c52 C0F20000 		movt	r0, #:upper16:.LC399
 8293 2c56 FFF7FEFF 		bl	printf
2138:.\console.c   **** 
2139:.\console.c   **** 					printf("\r\n");	
 8294              		.loc 1 2139 0
 8295 2c5a 40F20000 		movw	r0, #:lower16:.LC42
 8296 2c5e C0F20000 		movt	r0, #:upper16:.LC42
 8297 2c62 FFF7FEFF 		bl	puts
2140:.\console.c   **** 					CyDelay(50);
 8298              		.loc 1 2140 0
 8299 2c66 4FF03200 		mov	r0, #50
 8300 2c6a FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 233


 8301 2c6e 00E0     		b	.L284
 8302              	.L695:
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8303              		.loc 1 2131 0
 8304 2c70 00BF     		nop
 8305              	.L284:
2131:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8306              		.loc 1 2131 0 is_stmt 0 discriminator 1
 8307 2c72 FFF7FEFF 		bl	AnyButtonPressed
 8308 2c76 0346     		mov	r3, r0
 8309 2c78 002B     		cmp	r3, #0
 8310 2c7a 83D0     		beq	.L285
2141:.\console.c   **** 				}
2142:.\console.c   **** 				goto exitpars;	
 8311              		.loc 1 2142 0 is_stmt 1
 8312 2c7c 04F068B9 		b	.L131
 8313              	.L283:
2143:.\console.c   **** 			}
2144:.\console.c   **** 			// SHOW ANALOG 3D ACCELEROMETER END
2145:.\console.c   **** 
2146:.\console.c   **** 			
2147:.\console.c   **** 			// SHOW ESTIMATED EVENTS
2148:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "events") == 0)	
 8314              		.loc 1 2148 0
 8315 2c80 4348     		ldr	r0, .L732
 8316 2c82 40F20001 		movw	r1, #:lower16:.LC400
 8317 2c86 C0F20001 		movt	r1, #:upper16:.LC400
 8318 2c8a FFF7FEFF 		bl	strcmp
 8319 2c8e 0346     		mov	r3, r0
 8320 2c90 002B     		cmp	r3, #0
 8321 2c92 69D0     		beq	.L696
2149:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "event") == 0)
 8322              		.loc 1 2149 0
 8323 2c94 3E48     		ldr	r0, .L732
 8324 2c96 40F20001 		movw	r1, #:lower16:.LC401
 8325 2c9a C0F20001 		movt	r1, #:upper16:.LC401
 8326 2c9e FFF7FEFF 		bl	strcmp
 8327 2ca2 0346     		mov	r3, r0
 8328 2ca4 002B     		cmp	r3, #0
 8329 2ca6 5FD0     		beq	.L696
2150:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "mapsm") == 0))			
 8330              		.loc 1 2150 0
 8331 2ca8 3948     		ldr	r0, .L732
 8332 2caa 40F20001 		movw	r1, #:lower16:.LC402
 8333 2cae C0F20001 		movt	r1, #:upper16:.LC402
 8334 2cb2 FFF7FEFF 		bl	strcmp
 8335 2cb6 0346     		mov	r3, r0
 8336 2cb8 002B     		cmp	r3, #0
 8337 2cba 5DD1     		bne	.L287
2151:.\console.c   **** 			{
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8338              		.loc 1 2152 0
 8339 2cbc 54E0     		b	.L696
 8340              	.L289:
2153:.\console.c   **** 				{
2154:.\console.c   **** 					printf("Events");
 8341              		.loc 1 2154 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 234


 8342 2cbe 40F20000 		movw	r0, #:lower16:.LC403
 8343 2cc2 C0F20000 		movt	r0, #:upper16:.LC403
 8344 2cc6 FFF7FEFF 		bl	printf
2155:.\console.c   **** 					printf(" on_origin_ticks=%ld", (uint32)events.timecode.on_origin_ticks);					
 8345              		.loc 1 2155 0
 8346 2cca 40F20003 		movw	r3, #:lower16:events
 8347 2cce C0F20003 		movt	r3, #:upper16:events
 8348 2cd2 DB68     		ldr	r3, [r3, #12]
 8349 2cd4 40F20000 		movw	r0, #:lower16:.LC404
 8350 2cd8 C0F20000 		movt	r0, #:upper16:.LC404
 8351 2cdc 1946     		mov	r1, r3
 8352 2cde FFF7FEFF 		bl	printf
2156:.\console.c   **** 					printf(" angle_tilt=%2i", (uint16)events.inertial.tilt_angle);
 8353              		.loc 1 2156 0
 8354 2ce2 40F20003 		movw	r3, #:lower16:events
 8355 2ce6 C0F20003 		movt	r3, #:upper16:events
 8356 2cea 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 8357 2cec 40F20000 		movw	r0, #:lower16:.LC405
 8358 2cf0 C0F20000 		movt	r0, #:upper16:.LC405
 8359 2cf4 1946     		mov	r1, r3
 8360 2cf6 FFF7FEFF 		bl	printf
2157:.\console.c   **** 					printf(" vibration=%2i", (uint16)events.inertial.vibration);	
 8361              		.loc 1 2157 0
 8362 2cfa 40F20003 		movw	r3, #:lower16:events
 8363 2cfe C0F20003 		movt	r3, #:upper16:events
 8364 2d02 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8365 2d04 40F20000 		movw	r0, #:lower16:.LC406
 8366 2d08 C0F20000 		movt	r0, #:upper16:.LC406
 8367 2d0c 1946     		mov	r1, r3
 8368 2d0e FFF7FEFF 		bl	printf
2158:.\console.c   **** 					printf(" jump=%2i", (uint16)events.inertial.jump);						
 8369              		.loc 1 2158 0
 8370 2d12 40F20003 		movw	r3, #:lower16:events
 8371 2d16 C0F20003 		movt	r3, #:upper16:events
 8372 2d1a 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 8373 2d1c 40F20000 		movw	r0, #:lower16:.LC407
 8374 2d20 C0F20000 		movt	r0, #:upper16:.LC407
 8375 2d24 1946     		mov	r1, r3
 8376 2d26 FFF7FEFF 		bl	printf
2159:.\console.c   **** 					printf(" sm=%3i ", (uint16)events.mapping_sm_status);
 8377              		.loc 1 2159 0
 8378 2d2a 40F20003 		movw	r3, #:lower16:events
 8379 2d2e C0F20003 		movt	r3, #:upper16:events
 8380 2d32 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8381 2d34 40F20000 		movw	r0, #:lower16:.LC408
 8382 2d38 C0F20000 		movt	r0, #:upper16:.LC408
 8383 2d3c 1946     		mov	r1, r3
 8384 2d3e FFF7FEFF 		bl	printf
2160:.\console.c   **** 					ShowStatusMappingSM(events.mapping_sm_status);
 8385              		.loc 1 2160 0
 8386 2d42 40F20003 		movw	r3, #:lower16:events
 8387 2d46 C0F20003 		movt	r3, #:upper16:events
 8388 2d4a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8389 2d4c 1846     		mov	r0, r3
 8390 2d4e FFF7FEFF 		bl	ShowStatusMappingSM
2161:.\console.c   **** 					printf("\r\n");	
 8391              		.loc 1 2161 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 235


 8392 2d52 40F20000 		movw	r0, #:lower16:.LC42
 8393 2d56 C0F20000 		movt	r0, #:upper16:.LC42
 8394 2d5a FFF7FEFF 		bl	puts
2162:.\console.c   **** 					CyDelay(50);
 8395              		.loc 1 2162 0
 8396 2d5e 4FF03200 		mov	r0, #50
 8397 2d62 FFF7FEFF 		bl	CyDelay
 8398 2d66 00E0     		b	.L288
 8399              	.L696:
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8400              		.loc 1 2152 0
 8401 2d68 00BF     		nop
 8402              	.L288:
2152:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8403              		.loc 1 2152 0 is_stmt 0 discriminator 1
 8404 2d6a FFF7FEFF 		bl	AnyButtonPressed
 8405 2d6e 0346     		mov	r3, r0
 8406 2d70 002B     		cmp	r3, #0
 8407 2d72 A4D0     		beq	.L289
2163:.\console.c   **** 				}
2164:.\console.c   **** 				goto exitpars;	
 8408              		.loc 1 2164 0 is_stmt 1
 8409 2d74 04F0ECB8 		b	.L131
 8410              	.L287:
2165:.\console.c   **** 			}
2166:.\console.c   **** 			// SHOW ESTIMATED EVENTS END			
2167:.\console.c   **** 
2168:.\console.c   **** 			
2169:.\console.c   **** 			// SHOW CLU STATE MACHINE
2170:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "clusm") == 0)
 8411              		.loc 1 2170 0
 8412 2d78 0548     		ldr	r0, .L732
 8413 2d7a 40F20001 		movw	r1, #:lower16:.LC409
 8414 2d7e C0F20001 		movt	r1, #:upper16:.LC409
 8415 2d82 FFF7FEFF 		bl	strcmp
 8416 2d86 0346     		mov	r3, r0
 8417 2d88 002B     		cmp	r3, #0
 8418 2d8a 52D1     		bne	.L290
2171:.\console.c   **** 			{
2172:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8419              		.loc 1 2172 0
 8420 2d8c 4AE0     		b	.L291
 8421              	.L733:
 8422 2d8e 00BF     		.align	2
 8423              	.L732:
 8424 2d90 0F000000 		.word	actual_cmd+15
 8425              	.L292:
2173:.\console.c   **** 				{
2174:.\console.c   **** 					printf("CLU SM: ");					
 8426              		.loc 1 2174 0
 8427 2d94 40F20000 		movw	r0, #:lower16:.LC410
 8428 2d98 C0F20000 		movt	r0, #:upper16:.LC410
 8429 2d9c FFF7FEFF 		bl	printf
2175:.\console.c   **** 					printf(" number=%3i", (uint16)clu_sm.clunumber);
 8430              		.loc 1 2175 0
 8431 2da0 40F20003 		movw	r3, #:lower16:clu_sm
 8432 2da4 C0F20003 		movt	r3, #:upper16:clu_sm
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 236


 8433 2da8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 8434 2daa 40F20000 		movw	r0, #:lower16:.LC411
 8435 2dae C0F20000 		movt	r0, #:upper16:.LC411
 8436 2db2 1946     		mov	r1, r3
 8437 2db4 FFF7FEFF 		bl	printf
2176:.\console.c   **** 					printf(" line=%3i", (uint16)clu_sm.cluline);
 8438              		.loc 1 2176 0
 8439 2db8 40F20003 		movw	r3, #:lower16:clu_sm
 8440 2dbc C0F20003 		movt	r3, #:upper16:clu_sm
 8441 2dc0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 8442 2dc2 40F20000 		movw	r0, #:lower16:.LC412
 8443 2dc6 C0F20000 		movt	r0, #:upper16:.LC412
 8444 2dca 1946     		mov	r1, r3
 8445 2dcc FFF7FEFF 		bl	printf
2177:.\console.c   **** 					printf(" pauseticks=%3i", (uint16)clu_sm.pauseticks);					
 8446              		.loc 1 2177 0
 8447 2dd0 40F20003 		movw	r3, #:lower16:clu_sm
 8448 2dd4 C0F20003 		movt	r3, #:upper16:clu_sm
 8449 2dd8 9B88     		ldrh	r3, [r3, #4]
 8450 2dda 40F20000 		movw	r0, #:lower16:.LC413
 8451 2dde C0F20000 		movt	r0, #:upper16:.LC413
 8452 2de2 1946     		mov	r1, r3
 8453 2de4 FFF7FEFF 		bl	printf
2178:.\console.c   **** 					printf(" status=%3i ", (uint16)clu_sm.status);	
 8454              		.loc 1 2178 0
 8455 2de8 40F20003 		movw	r3, #:lower16:clu_sm
 8456 2dec C0F20003 		movt	r3, #:upper16:clu_sm
 8457 2df0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8458 2df2 40F20000 		movw	r0, #:lower16:.LC414
 8459 2df6 C0F20000 		movt	r0, #:upper16:.LC414
 8460 2dfa 1946     		mov	r1, r3
 8461 2dfc FFF7FEFF 		bl	printf
2179:.\console.c   **** 					ShowCLUSM(clu_sm.status);					
 8462              		.loc 1 2179 0
 8463 2e00 40F20003 		movw	r3, #:lower16:clu_sm
 8464 2e04 C0F20003 		movt	r3, #:upper16:clu_sm
 8465 2e08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8466 2e0a 1846     		mov	r0, r3
 8467 2e0c FFF7FEFF 		bl	ShowCLUSM
2180:.\console.c   **** 					printf("\r\n");	
 8468              		.loc 1 2180 0
 8469 2e10 40F20000 		movw	r0, #:lower16:.LC42
 8470 2e14 C0F20000 		movt	r0, #:upper16:.LC42
 8471 2e18 FFF7FEFF 		bl	puts
2181:.\console.c   **** 					CyDelay(50);
 8472              		.loc 1 2181 0
 8473 2e1c 4FF03200 		mov	r0, #50
 8474 2e20 FFF7FEFF 		bl	CyDelay
 8475              	.L291:
2172:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8476              		.loc 1 2172 0 discriminator 1
 8477 2e24 FFF7FEFF 		bl	AnyButtonPressed
 8478 2e28 0346     		mov	r3, r0
 8479 2e2a 002B     		cmp	r3, #0
 8480 2e2c B2D0     		beq	.L292
2182:.\console.c   **** 				}
2183:.\console.c   **** 				goto exitpars;	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 237


 8481              		.loc 1 2183 0
 8482 2e2e 04F08FB8 		b	.L131
 8483              	.L290:
2184:.\console.c   **** 			}
2185:.\console.c   **** 			// SHOW CLU STATE MACHINE END
2186:.\console.c   **** 			
2187:.\console.c   **** 			
2188:.\console.c   **** 			// SHOW BUTTONS
2189:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "buttons") == 0)	
 8484              		.loc 1 2189 0
 8485 2e32 C848     		ldr	r0, .L734
 8486 2e34 40F20001 		movw	r1, #:lower16:.LC415
 8487 2e38 C0F20001 		movt	r1, #:upper16:.LC415
 8488 2e3c FFF7FEFF 		bl	strcmp
 8489 2e40 0346     		mov	r3, r0
 8490 2e42 002B     		cmp	r3, #0
 8491 2e44 42D0     		beq	.L697
2190:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "but") == 0))
 8492              		.loc 1 2190 0
 8493 2e46 C348     		ldr	r0, .L734
 8494 2e48 40F20001 		movw	r1, #:lower16:.LC416
 8495 2e4c C0F20001 		movt	r1, #:upper16:.LC416
 8496 2e50 FFF7FEFF 		bl	strcmp
 8497 2e54 0346     		mov	r3, r0
 8498 2e56 002B     		cmp	r3, #0
 8499 2e58 40D1     		bne	.L294
2191:.\console.c   **** 			{
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8500              		.loc 1 2192 0
 8501 2e5a 37E0     		b	.L697
 8502              	.L299:
2193:.\console.c   **** 				{
2194:.\console.c   **** 					printf("BUTTONS = %3i", (uint16)Status_Reg_BUTTON_Read());
 8503              		.loc 1 2194 0
 8504 2e5c FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8505 2e60 0346     		mov	r3, r0
 8506 2e62 40F20000 		movw	r0, #:lower16:.LC417
 8507 2e66 C0F20000 		movt	r0, #:upper16:.LC417
 8508 2e6a 1946     		mov	r1, r3
 8509 2e6c FFF7FEFF 		bl	printf
2195:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_ON)
 8510              		.loc 1 2195 0
 8511 2e70 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8512 2e74 0346     		mov	r3, r0
 8513 2e76 012B     		cmp	r3, #1
 8514 2e78 06D1     		bne	.L296
2196:.\console.c   **** 					{
2197:.\console.c   **** 						printf(" (ON)");
 8515              		.loc 1 2197 0
 8516 2e7a 40F20000 		movw	r0, #:lower16:.LC418
 8517 2e7e C0F20000 		movt	r0, #:upper16:.LC418
 8518 2e82 FFF7FEFF 		bl	printf
 8519 2e86 16E0     		b	.L297
 8520              	.L296:
2198:.\console.c   **** 					}
2199:.\console.c   **** 					else
2200:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_CW)					
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 238


 8521              		.loc 1 2200 0
 8522 2e88 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8523 2e8c 0346     		mov	r3, r0
 8524 2e8e 022B     		cmp	r3, #2
 8525 2e90 06D1     		bne	.L298
2201:.\console.c   **** 					{
2202:.\console.c   **** 						printf(" (CW)");
 8526              		.loc 1 2202 0
 8527 2e92 40F20000 		movw	r0, #:lower16:.LC419
 8528 2e96 C0F20000 		movt	r0, #:upper16:.LC419
 8529 2e9a FFF7FEFF 		bl	printf
 8530 2e9e 0AE0     		b	.L297
 8531              	.L298:
2203:.\console.c   **** 					}
2204:.\console.c   **** 					else
2205:.\console.c   **** 					if (Status_Reg_BUTTON_Read() == PUSH_CCW)					
 8532              		.loc 1 2205 0
 8533 2ea0 FFF7FEFF 		bl	Status_Reg_BUTTON_Read
 8534 2ea4 0346     		mov	r3, r0
 8535 2ea6 042B     		cmp	r3, #4
 8536 2ea8 05D1     		bne	.L297
2206:.\console.c   **** 					{
2207:.\console.c   **** 						printf(" (CCW)");
 8537              		.loc 1 2207 0
 8538 2eaa 40F20000 		movw	r0, #:lower16:.LC420
 8539 2eae C0F20000 		movt	r0, #:upper16:.LC420
 8540 2eb2 FFF7FEFF 		bl	printf
 8541              	.L297:
2208:.\console.c   **** 					}	
2209:.\console.c   **** 					printf("\r\n");	
 8542              		.loc 1 2209 0
 8543 2eb6 40F20000 		movw	r0, #:lower16:.LC42
 8544 2eba C0F20000 		movt	r0, #:upper16:.LC42
 8545 2ebe FFF7FEFF 		bl	puts
2210:.\console.c   **** 					CyDelay(50);
 8546              		.loc 1 2210 0
 8547 2ec2 4FF03200 		mov	r0, #50
 8548 2ec6 FFF7FEFF 		bl	CyDelay
 8549 2eca 00E0     		b	.L295
 8550              	.L697:
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8551              		.loc 1 2192 0
 8552 2ecc 00BF     		nop
 8553              	.L295:
2192:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8554              		.loc 1 2192 0 is_stmt 0 discriminator 1
 8555 2ece FFF7FEFF 		bl	AnyButtonPressed
 8556 2ed2 0346     		mov	r3, r0
 8557 2ed4 002B     		cmp	r3, #0
 8558 2ed6 C1D0     		beq	.L299
2211:.\console.c   **** 				}
2212:.\console.c   **** 				goto exitpars;	
 8559              		.loc 1 2212 0 is_stmt 1
 8560 2ed8 04F03AB8 		b	.L131
 8561              	.L294:
2213:.\console.c   **** 			}
2214:.\console.c   **** 			// SHOW BUTTONS END
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 239


2215:.\console.c   **** 
2216:.\console.c   **** 
2217:.\console.c   **** 			// SHOW SYSDYN (SYSTEM DYNAMIC ACCELERATION SCALAR)
2218:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "sysdyn") == 0)	
 8562              		.loc 1 2218 0
 8563 2edc 9D48     		ldr	r0, .L734
 8564 2ede 40F20001 		movw	r1, #:lower16:.LC421
 8565 2ee2 C0F20001 		movt	r1, #:upper16:.LC421
 8566 2ee6 FFF7FEFF 		bl	strcmp
 8567 2eea 0346     		mov	r3, r0
 8568 2eec 002B     		cmp	r3, #0
 8569 2eee 25D0     		beq	.L698
2219:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "sdyn") == 0))
 8570              		.loc 1 2219 0
 8571 2ef0 9848     		ldr	r0, .L734
 8572 2ef2 40F20001 		movw	r1, #:lower16:.LC422
 8573 2ef6 C0F20001 		movt	r1, #:upper16:.LC422
 8574 2efa FFF7FEFF 		bl	strcmp
 8575 2efe 0346     		mov	r3, r0
 8576 2f00 002B     		cmp	r3, #0
 8577 2f02 23D1     		bne	.L301
2220:.\console.c   **** 			{
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8578              		.loc 1 2221 0
 8579 2f04 1AE0     		b	.L698
 8580              	.L303:
2222:.\console.c   **** 				{
2223:.\console.c   **** 					printf("System Dynamic Scalar=%1.8f  [xacc_ADC^2+yacc_ADC^2-(1g_ADC)^2]", (float)aacc.system_d
 8581              		.loc 1 2223 0
 8582 2f06 40F20003 		movw	r3, #:lower16:aacc
 8583 2f0a C0F20003 		movt	r3, #:upper16:aacc
 8584 2f0e 9B6B     		ldr	r3, [r3, #56]	@ float
 8585 2f10 1846     		mov	r0, r3
 8586 2f12 FFF7FEFF 		bl	__aeabi_f2d
 8587 2f16 0246     		mov	r2, r0
 8588 2f18 0B46     		mov	r3, r1
 8589 2f1a 40F20000 		movw	r0, #:lower16:.LC423
 8590 2f1e C0F20000 		movt	r0, #:upper16:.LC423
 8591 2f22 FFF7FEFF 		bl	printf
2224:.\console.c   **** 					printf("\r\n");	
 8592              		.loc 1 2224 0
 8593 2f26 40F20000 		movw	r0, #:lower16:.LC42
 8594 2f2a C0F20000 		movt	r0, #:upper16:.LC42
 8595 2f2e FFF7FEFF 		bl	puts
2225:.\console.c   **** 					CyDelay(50);
 8596              		.loc 1 2225 0
 8597 2f32 4FF03200 		mov	r0, #50
 8598 2f36 FFF7FEFF 		bl	CyDelay
 8599 2f3a 00E0     		b	.L302
 8600              	.L698:
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8601              		.loc 1 2221 0
 8602 2f3c 00BF     		nop
 8603              	.L302:
2221:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8604              		.loc 1 2221 0 is_stmt 0 discriminator 1
 8605 2f3e FFF7FEFF 		bl	AnyButtonPressed
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 240


 8606 2f42 0346     		mov	r3, r0
 8607 2f44 002B     		cmp	r3, #0
 8608 2f46 DED0     		beq	.L303
2226:.\console.c   **** 				}
2227:.\console.c   **** 				goto exitpars;	
 8609              		.loc 1 2227 0 is_stmt 1
 8610 2f48 04F002B8 		b	.L131
 8611              	.L301:
2228:.\console.c   **** 			}
2229:.\console.c   **** 			// END SHOW SYSDYN (SYSTEM DYNAMIC ACCELERATION SCALAR)
2230:.\console.c   **** 
2231:.\console.c   **** 			
2232:.\console.c   **** 			// SHOW RELATIVE AND ABSOLUTE POSITION
2233:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "position") == 0)	
 8612              		.loc 1 2233 0
 8613 2f4c 8148     		ldr	r0, .L734
 8614 2f4e 40F20001 		movw	r1, #:lower16:.LC424
 8615 2f52 C0F20001 		movt	r1, #:upper16:.LC424
 8616 2f56 FFF7FEFF 		bl	strcmp
 8617 2f5a 0346     		mov	r3, r0
 8618 2f5c 002B     		cmp	r3, #0
 8619 2f5e 6DD0     		beq	.L699
2234:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "pos") == 0))
 8620              		.loc 1 2234 0
 8621 2f60 7C48     		ldr	r0, .L734
 8622 2f62 40F20001 		movw	r1, #:lower16:.LC425
 8623 2f66 C0F20001 		movt	r1, #:upper16:.LC425
 8624 2f6a FFF7FEFF 		bl	strcmp
 8625 2f6e 0346     		mov	r3, r0
 8626 2f70 002B     		cmp	r3, #0
 8627 2f72 6BD1     		bne	.L305
2235:.\console.c   **** 			{
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8628              		.loc 1 2236 0
 8629 2f74 62E0     		b	.L699
 8630              	.L307:
2237:.\console.c   **** 				{
2238:.\console.c   **** 					printf("PAN: enc(t)=%+ld [step]", (int32)pan_axis.mc.slave_enc.position);
 8631              		.loc 1 2238 0
 8632 2f76 40F20003 		movw	r3, #:lower16:pan_axis
 8633 2f7a C0F20003 		movt	r3, #:upper16:pan_axis
 8634 2f7e 5B6C     		ldr	r3, [r3, #68]
 8635 2f80 40F20000 		movw	r0, #:lower16:.LC109
 8636 2f84 C0F20000 		movt	r0, #:upper16:.LC109
 8637 2f88 1946     		mov	r1, r3
 8638 2f8a FFF7FEFF 		bl	printf
2239:.\console.c   **** 					printf(" abs_pos(t)=%+ld [step]", (int32)pan_absolute_sensor.position);
 8639              		.loc 1 2239 0
 8640 2f8e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 8641 2f92 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 8642 2f96 5B68     		ldr	r3, [r3, #4]	@ float
 8643 2f98 1846     		mov	r0, r3
 8644 2f9a FFF7FEFF 		bl	__aeabi_f2iz
 8645 2f9e 0346     		mov	r3, r0
 8646 2fa0 40F20000 		movw	r0, #:lower16:.LC426
 8647 2fa4 C0F20000 		movt	r0, #:upper16:.LC426
 8648 2fa8 1946     		mov	r1, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 241


 8649 2faa FFF7FEFF 		bl	printf
2240:.\console.c   **** 					printf(" (%+3.2f [rad])", (float)pan_absolute_sensor.angle_rad);
 8650              		.loc 1 2240 0
 8651 2fae 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 8652 2fb2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 8653 2fb6 1B69     		ldr	r3, [r3, #16]	@ float
 8654 2fb8 1846     		mov	r0, r3
 8655 2fba FFF7FEFF 		bl	__aeabi_f2d
 8656 2fbe 0246     		mov	r2, r0
 8657 2fc0 0B46     		mov	r3, r1
 8658 2fc2 40F20000 		movw	r0, #:lower16:.LC427
 8659 2fc6 C0F20000 		movt	r0, #:upper16:.LC427
 8660 2fca FFF7FEFF 		bl	printf
2241:.\console.c   **** 					printf("    TILT: enc(t)=%+ld [step]", (int32)tilt_axis.mc.slave_enc.position);
 8661              		.loc 1 2241 0
 8662 2fce 40F20003 		movw	r3, #:lower16:tilt_axis
 8663 2fd2 C0F20003 		movt	r3, #:upper16:tilt_axis
 8664 2fd6 5B6C     		ldr	r3, [r3, #68]
 8665 2fd8 40F20000 		movw	r0, #:lower16:.LC428
 8666 2fdc C0F20000 		movt	r0, #:upper16:.LC428
 8667 2fe0 1946     		mov	r1, r3
 8668 2fe2 FFF7FEFF 		bl	printf
2242:.\console.c   **** 					printf(" abs_pos(t)=%+ld [step]", (int32)tilt_absolute_sensor.position);					
 8669              		.loc 1 2242 0
 8670 2fe6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 8671 2fea C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 8672 2fee 5B68     		ldr	r3, [r3, #4]	@ float
 8673 2ff0 1846     		mov	r0, r3
 8674 2ff2 FFF7FEFF 		bl	__aeabi_f2iz
 8675 2ff6 0346     		mov	r3, r0
 8676 2ff8 40F20000 		movw	r0, #:lower16:.LC426
 8677 2ffc C0F20000 		movt	r0, #:upper16:.LC426
 8678 3000 1946     		mov	r1, r3
 8679 3002 FFF7FEFF 		bl	printf
2243:.\console.c   **** 					printf(" (%+3.2f [rad])", (float)tilt_absolute_sensor.angle_rad);
 8680              		.loc 1 2243 0
 8681 3006 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 8682 300a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 8683 300e 1B69     		ldr	r3, [r3, #16]	@ float
 8684 3010 1846     		mov	r0, r3
 8685 3012 FFF7FEFF 		bl	__aeabi_f2d
 8686 3016 0246     		mov	r2, r0
 8687 3018 0B46     		mov	r3, r1
 8688 301a 40F20000 		movw	r0, #:lower16:.LC427
 8689 301e C0F20000 		movt	r0, #:upper16:.LC427
 8690 3022 FFF7FEFF 		bl	printf
2244:.\console.c   **** 					printf("\r\n");	
 8691              		.loc 1 2244 0
 8692 3026 40F20000 		movw	r0, #:lower16:.LC42
 8693 302a C0F20000 		movt	r0, #:upper16:.LC42
 8694 302e FFF7FEFF 		bl	puts
2245:.\console.c   **** 					CyDelay(50);
 8695              		.loc 1 2245 0
 8696 3032 4FF03200 		mov	r0, #50
 8697 3036 FFF7FEFF 		bl	CyDelay
 8698 303a 00E0     		b	.L306
 8699              	.L699:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 242


2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8700              		.loc 1 2236 0
 8701 303c 00BF     		nop
 8702              	.L306:
2236:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8703              		.loc 1 2236 0 is_stmt 0 discriminator 1
 8704 303e FFF7FEFF 		bl	AnyButtonPressed
 8705 3042 0346     		mov	r3, r0
 8706 3044 002B     		cmp	r3, #0
 8707 3046 96D0     		beq	.L307
2246:.\console.c   **** 				}
2247:.\console.c   **** 				goto exitpars;	
 8708              		.loc 1 2247 0 is_stmt 1
 8709 3048 03F082BF 		b	.L131
 8710              	.L305:
2248:.\console.c   **** 			}
2249:.\console.c   **** 			// END SHOW RELATIVE AND ABSOLUTE POSITION
2250:.\console.c   **** 
2251:.\console.c   **** 			
2252:.\console.c   **** 			// SHOW ENCODERS FEEDBACK
2253:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "encfbk") == 0)	
 8711              		.loc 1 2253 0
 8712 304c 4148     		ldr	r0, .L734
 8713 304e 40F20001 		movw	r1, #:lower16:.LC429
 8714 3052 C0F20001 		movt	r1, #:upper16:.LC429
 8715 3056 FFF7FEFF 		bl	strcmp
 8716 305a 0346     		mov	r3, r0
 8717 305c 002B     		cmp	r3, #0
 8718 305e 09D0     		beq	.L308
2254:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "encf") == 0))
 8719              		.loc 1 2254 0
 8720 3060 3C48     		ldr	r0, .L734
 8721 3062 40F20001 		movw	r1, #:lower16:.LC430
 8722 3066 C0F20001 		movt	r1, #:upper16:.LC430
 8723 306a FFF7FEFF 		bl	strcmp
 8724 306e 0346     		mov	r3, r0
 8725 3070 002B     		cmp	r3, #0
 8726 3072 42D1     		bne	.L309
 8727              	.L308:
2255:.\console.c   **** 			{
2256:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 8728              		.loc 1 2256 0
 8729 3074 40F20000 		movw	r0, #:lower16:.LC431
 8730 3078 C0F20000 		movt	r0, #:upper16:.LC431
 8731 307c FFF7FEFF 		bl	puts
2257:.\console.c   **** 				printf(STR_SHOWENCFB);			//
 8732              		.loc 1 2257 0
 8733 3080 40F20000 		movw	r0, #:lower16:.LC432
 8734 3084 C0F20000 		movt	r0, #:upper16:.LC432
 8735 3088 FFF7FEFF 		bl	printf
2258:.\console.c   **** 			
2259:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 8736              		.loc 1 2259 0
 8737 308c 4FF00100 		mov	r0, #1
 8738 3090 FFF7FEFF 		bl	ButtonYNChoice
 8739 3094 0346     		mov	r3, r0
 8740 3096 012B     		cmp	r3, #1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 243


 8741 3098 43F04F87 		bne	.L700
2260:.\console.c   **** 				{
2261:.\console.c   **** 					isr_CTRL_Stop();				/* Stop Control ISR					*/
 8742              		.loc 1 2261 0
 8743 309c FFF7FEFF 		bl	isr_CTRL_Stop
2262:.\console.c   **** 
2263:.\console.c   **** 					PWM_MOTOR_PAN_WriteCompare(MOTOR_PWM_PERIOD_HALF);
 8744              		.loc 1 2263 0
 8745 30a0 4FF40070 		mov	r0, #512
 8746 30a4 FFF7FEFF 		bl	PWM_MOTOR_PAN_WriteCompare
2264:.\console.c   **** 					PWM_MOTOR_TILT_WriteCompare(MOTOR_PWM_PERIOD_HALF);
 8747              		.loc 1 2264 0
 8748 30a8 4FF40070 		mov	r0, #512
 8749 30ac FFF7FEFF 		bl	PWM_MOTOR_TILT_WriteCompare
2265:.\console.c   **** 					
2266:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 8750              		.loc 1 2266 0
 8751 30b0 18E0     		b	.L311
 8752              	.L313:
2267:.\console.c   **** 					{
2268:.\console.c   **** 						printf("PAN_FBK=%8ld", (int32)QuadDec_PAN_GetCounter());
 8753              		.loc 1 2268 0
 8754 30b2 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 8755 30b6 0346     		mov	r3, r0
 8756 30b8 40F20000 		movw	r0, #:lower16:.LC433
 8757 30bc C0F20000 		movt	r0, #:upper16:.LC433
 8758 30c0 1946     		mov	r1, r3
 8759 30c2 FFF7FEFF 		bl	printf
2269:.\console.c   **** 						printf("  TILT_FBK=%8ld\r\n", (int32)QuadDec_TILT_GetCounter());
 8760              		.loc 1 2269 0
 8761 30c6 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 8762 30ca 0346     		mov	r3, r0
 8763 30cc 40F20000 		movw	r0, #:lower16:.LC434
 8764 30d0 C0F20000 		movt	r0, #:upper16:.LC434
 8765 30d4 1946     		mov	r1, r3
 8766 30d6 FFF7FEFF 		bl	printf
2270:.\console.c   **** 						//printf("  ROLL_FBK=%8ld \r\n", (int32)QuadDec_ROLL_GetCounter());							
2271:.\console.c   **** 
2272:.\console.c   **** 						if (AnyButtonPressed() == PRESSED)
 8767              		.loc 1 2272 0
 8768 30da FFF7FEFF 		bl	AnyButtonPressed
 8769 30de 0346     		mov	r3, r0
 8770 30e0 012B     		cmp	r3, #1
 8771 30e2 05D0     		beq	.L701
 8772              	.L311:
2266:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 8773              		.loc 1 2266 0 discriminator 1
 8774 30e4 FFF7FEFF 		bl	AnyButtonPressed
 8775 30e8 0346     		mov	r3, r0
 8776 30ea 002B     		cmp	r3, #0
 8777 30ec E1D0     		beq	.L313
 8778 30ee 00E0     		b	.L312
 8779              	.L701:
2273:.\console.c   **** 							goto exit_showencf;
 8780              		.loc 1 2273 0
 8781 30f0 00BF     		nop
 8782              	.L312:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 244


2274:.\console.c   **** 					}
2275:.\console.c   **** exit_showencf:					
2276:.\console.c   **** 					isr_CTRL_Start();				/* RESTART Control ISR				*/	
 8783              		.loc 1 2276 0
 8784 30f2 FFF7FEFF 		bl	isr_CTRL_Start
2277:.\console.c   **** 				}	
2278:.\console.c   **** 				
2279:.\console.c   **** 				goto exitpars;	
 8785              		.loc 1 2279 0
 8786 30f6 03F020BF 		b	.L700
 8787              	.L309:
2280:.\console.c   **** 			}
2281:.\console.c   **** 			// SHOW ENCODERS FEEDBACK END			
2282:.\console.c   **** 			
2283:.\console.c   **** 			
2284:.\console.c   **** 			// SHOW MOTOR STATUS
2285:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "motorstatus") == 0)	
 8788              		.loc 1 2285 0
 8789 30fa 1648     		ldr	r0, .L734
 8790 30fc 40F20001 		movw	r1, #:lower16:.LC435
 8791 3100 C0F20001 		movt	r1, #:upper16:.LC435
 8792 3104 FFF7FEFF 		bl	strcmp
 8793 3108 0346     		mov	r3, r0
 8794 310a 002B     		cmp	r3, #0
 8795 310c 49D0     		beq	.L702
2286:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "mot") == 0))
 8796              		.loc 1 2286 0
 8797 310e 1148     		ldr	r0, .L734
 8798 3110 40F20001 		movw	r1, #:lower16:.LC436
 8799 3114 C0F20001 		movt	r1, #:upper16:.LC436
 8800 3118 FFF7FEFF 		bl	strcmp
 8801 311c 0346     		mov	r3, r0
 8802 311e 002B     		cmp	r3, #0
 8803 3120 47D1     		bne	.L315
2287:.\console.c   **** 			{
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8804              		.loc 1 2288 0
 8805 3122 3EE0     		b	.L702
 8806              	.L321:
2289:.\console.c   **** 				{
2290:.\console.c   **** 					printf("Motor Status=%2u ", (int16)Status_Reg_MOTORS_Read());
 8807              		.loc 1 2290 0
 8808 3124 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8809 3128 0346     		mov	r3, r0
 8810 312a 40F20000 		movw	r0, #:lower16:.LC437
 8811 312e C0F20000 		movt	r0, #:upper16:.LC437
 8812 3132 1946     		mov	r1, r3
 8813 3134 FFF7FEFF 		bl	printf
2291:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_PAN_MOT_FL) == 0)
 8814              		.loc 1 2291 0
 8815 3138 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8816 313c 0346     		mov	r3, r0
 8817 313e 03F00103 		and	r3, r3, #1
 8818 3142 002B     		cmp	r3, #0
 8819 3144 08D1     		bne	.L317
2292:.\console.c   **** 					{
2293:.\console.c   **** 						printf("PAN CURRENT PEAK!) ");	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 245


 8820              		.loc 1 2293 0
 8821 3146 40F20000 		movw	r0, #:lower16:.LC438
 8822 314a C0F20000 		movt	r0, #:upper16:.LC438
 8823 314e FFF7FEFF 		bl	printf
 8824 3152 07E0     		b	.L318
 8825              	.L735:
 8826              		.align	2
 8827              	.L734:
 8828 3154 0F000000 		.word	actual_cmd+15
 8829              	.L317:
2294:.\console.c   **** 					}
2295:.\console.c   **** 					else
2296:.\console.c   **** 					{
2297:.\console.c   **** 						printf("(PAN CURRENT OK!)  ");						
 8830              		.loc 1 2297 0
 8831 3158 40F20000 		movw	r0, #:lower16:.LC439
 8832 315c C0F20000 		movt	r0, #:upper16:.LC439
 8833 3160 FFF7FEFF 		bl	printf
 8834              	.L318:
2298:.\console.c   **** 					}
2299:.\console.c   **** 					
2300:.\console.c   **** 					if ((Status_Reg_MOTORS_Read() & SR_TILT_MOT_FL) == 0)
 8835              		.loc 1 2300 0
 8836 3164 FFF7FEFF 		bl	Status_Reg_MOTORS_Read
 8837 3168 0346     		mov	r3, r0
 8838 316a 03F00203 		and	r3, r3, #2
 8839 316e 002B     		cmp	r3, #0
 8840 3170 06D1     		bne	.L319
2301:.\console.c   **** 					{
2302:.\console.c   **** 						printf("(TILT CURRENT PEAK!)");	
 8841              		.loc 1 2302 0
 8842 3172 40F20000 		movw	r0, #:lower16:.LC440
 8843 3176 C0F20000 		movt	r0, #:upper16:.LC440
 8844 317a FFF7FEFF 		bl	printf
 8845 317e 05E0     		b	.L320
 8846              	.L319:
2303:.\console.c   **** 					}
2304:.\console.c   **** 					else
2305:.\console.c   **** 					{
2306:.\console.c   **** 						printf("(TILT CURRENT OK!)");						
 8847              		.loc 1 2306 0
 8848 3180 40F20000 		movw	r0, #:lower16:.LC441
 8849 3184 C0F20000 		movt	r0, #:upper16:.LC441
 8850 3188 FFF7FEFF 		bl	printf
 8851              	.L320:
2307:.\console.c   **** 					}					
2308:.\console.c   **** 					
2309:.\console.c   **** 					printf("\r\n");	
 8852              		.loc 1 2309 0
 8853 318c 40F20000 		movw	r0, #:lower16:.LC42
 8854 3190 C0F20000 		movt	r0, #:upper16:.LC42
 8855 3194 FFF7FEFF 		bl	puts
2310:.\console.c   **** 					CyDelay(50);
 8856              		.loc 1 2310 0
 8857 3198 4FF03200 		mov	r0, #50
 8858 319c FFF7FEFF 		bl	CyDelay
 8859 31a0 00E0     		b	.L316
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 246


 8860              	.L702:
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8861              		.loc 1 2288 0
 8862 31a2 00BF     		nop
 8863              	.L316:
2288:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 8864              		.loc 1 2288 0 is_stmt 0 discriminator 1
 8865 31a4 FFF7FEFF 		bl	AnyButtonPressed
 8866 31a8 0346     		mov	r3, r0
 8867 31aa 002B     		cmp	r3, #0
 8868 31ac BAD0     		beq	.L321
2311:.\console.c   **** 				}
2312:.\console.c   **** 				goto exitpars;	
 8869              		.loc 1 2312 0 is_stmt 1
 8870 31ae 03F0CFBE 		b	.L131
 8871              	.L315:
2313:.\console.c   **** 			}
2314:.\console.c   **** 			// END SHOW MOTOR STATUS			
2315:.\console.c   **** 
2316:.\console.c   **** 			
2317:.\console.c   **** //			// SHOW HOME SENSORS
2318:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "homesens") == 0)	
2319:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "hsens") == 0))
2320:.\console.c   **** //			{
2321:.\console.c   **** //				while (AnyButtonPressed() == NO_PRESSED)
2322:.\console.c   **** //				{
2323:.\console.c   **** //					//2 --> home pan (HOME_PAN = 4)
2324:.\console.c   **** //					//3 --> home tilt (HOME_TILT = 8)
2325:.\console.c   **** //					printf("R=%0x2; ", (int16)Status_Reg_MOTORS_Read());
2326:.\console.c   **** //					if ((Status_Reg_MOTORS_Read() & SR_HOME_PAN) == SR_HOME_PAN)
2327:.\console.c   **** //					{
2328:.\console.c   **** //						printf("HOME PAN=H; ");	
2329:.\console.c   **** //					}
2330:.\console.c   **** //					else
2331:.\console.c   **** //					{
2332:.\console.c   **** //						printf("HOME PAN=L; ");						
2333:.\console.c   **** //					}
2334:.\console.c   **** //
2335:.\console.c   **** //					if ((Status_Reg_MOTORS_Read() & SR_HOME_TILT) == SR_HOME_TILT)
2336:.\console.c   **** //					{
2337:.\console.c   **** //						printf("HOME TILT=H");	
2338:.\console.c   **** //					}
2339:.\console.c   **** //					else
2340:.\console.c   **** //					{
2341:.\console.c   **** //						printf("HOME TILT=L");						
2342:.\console.c   **** //					}
2343:.\console.c   **** //					
2344:.\console.c   **** //					printf("\r\n");	
2345:.\console.c   **** //					CyDelay(50);
2346:.\console.c   **** //				}
2347:.\console.c   **** //				goto exitpars;	
2348:.\console.c   **** //			}
2349:.\console.c   **** //			// END SHOW MOTOR STATUS			
2350:.\console.c   **** 			
2351:.\console.c   **** 			
2352:.\console.c   **** 			// SHOW Q (SHOT) N
2353:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "q") == 0)	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 247


 8872              		.loc 1 2353 0
 8873 31b2 B348     		ldr	r0, .L736
 8874 31b4 40F20001 		movw	r1, #:lower16:.LC272
 8875 31b8 C0F20001 		movt	r1, #:upper16:.LC272
 8876 31bc FFF7FEFF 		bl	strcmp
 8877 31c0 0346     		mov	r3, r0
 8878 31c2 002B     		cmp	r3, #0
 8879 31c4 0AD0     		beq	.L322
2354:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "shot") == 0))
 8880              		.loc 1 2354 0
 8881 31c6 AE48     		ldr	r0, .L736
 8882 31c8 40F20001 		movw	r1, #:lower16:.LC442
 8883 31cc C0F20001 		movt	r1, #:upper16:.LC442
 8884 31d0 FFF7FEFF 		bl	strcmp
 8885 31d4 0346     		mov	r3, r0
 8886 31d6 002B     		cmp	r3, #0
 8887 31d8 40F04381 		bne	.L323
 8888              	.L322:
2355:.\console.c   **** 			{
2356:.\console.c   **** 				if (strcmp(actual_cmd.number1, "all") == 0)
 8889              		.loc 1 2356 0
 8890 31dc A948     		ldr	r0, .L736+4
 8891 31de 40F20001 		movw	r1, #:lower16:.LC443
 8892 31e2 C0F20001 		movt	r1, #:upper16:.LC443
 8893 31e6 FFF7FEFF 		bl	strcmp
 8894 31ea 0346     		mov	r3, r0
 8895 31ec 002B     		cmp	r3, #0
 8896 31ee 44D1     		bne	.L324
 8897              	.LBB8:
2357:.\console.c   **** 				{
2358:.\console.c   **** 					int8 memory_num;
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8898              		.loc 1 2359 0
 8899 31f0 4FF00003 		mov	r3, #0
 8900 31f4 87F8FF30 		strb	r3, [r7, #255]
 8901 31f8 3AE0     		b	.L325
 8902              	.L328:
2360:.\console.c   **** 					{
2361:.\console.c   **** 						if (q[memory_num].number == Q_NUMBER_UNUSED)
 8903              		.loc 1 2361 0
 8904 31fa 97F9FF10 		ldrsb	r1, [r7, #255]
 8905 31fe 40F20002 		movw	r2, #:lower16:q
 8906 3202 C0F20002 		movt	r2, #:upper16:q
 8907 3206 0B46     		mov	r3, r1
 8908 3208 4FEAC303 		lsl	r3, r3, #3
 8909 320c 5B18     		adds	r3, r3, r1
 8910 320e 4FEA8303 		lsl	r3, r3, #2
 8911 3212 D318     		adds	r3, r2, r3
 8912 3214 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8913 3216 002B     		cmp	r3, #0
 8914 3218 0AD1     		bne	.L326
2362:.\console.c   **** 						{
2363:.\console.c   **** 							printf("QMemory%02d NOT ALLOCATED!\r\n",(uint16)memory_num);
 8915              		.loc 1 2363 0
 8916 321a 97F9FF30 		ldrsb	r3, [r7, #255]
 8917 321e 9BB2     		uxth	r3, r3
 8918 3220 40F20000 		movw	r0, #:lower16:.LC444
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 248


 8919 3224 C0F20000 		movt	r0, #:upper16:.LC444
 8920 3228 1946     		mov	r1, r3
 8921 322a FFF7FEFF 		bl	printf
 8922 322e 19E0     		b	.L327
 8923              	.L326:
2364:.\console.c   **** 						}
2365:.\console.c   **** 						else
2366:.\console.c   **** 						{
2367:.\console.c   **** 							printf("QMemory%02d allocated to Q%02d\r\n",(uint16)memory_num, (uint16)q[memory_num].number
 8924              		.loc 1 2367 0
 8925 3230 97F9FF30 		ldrsb	r3, [r7, #255]
 8926 3234 9BB2     		uxth	r3, r3
 8927 3236 1C46     		mov	r4, r3
 8928 3238 97F9FF10 		ldrsb	r1, [r7, #255]
 8929 323c 40F20002 		movw	r2, #:lower16:q
 8930 3240 C0F20002 		movt	r2, #:upper16:q
 8931 3244 0B46     		mov	r3, r1
 8932 3246 4FEAC303 		lsl	r3, r3, #3
 8933 324a 5B18     		adds	r3, r3, r1
 8934 324c 4FEA8303 		lsl	r3, r3, #2
 8935 3250 D318     		adds	r3, r2, r3
 8936 3252 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8937 3254 40F20000 		movw	r0, #:lower16:.LC445
 8938 3258 C0F20000 		movt	r0, #:upper16:.LC445
 8939 325c 2146     		mov	r1, r4
 8940 325e 1A46     		mov	r2, r3
 8941 3260 FFF7FEFF 		bl	printf
 8942              	.L327:
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8943              		.loc 1 2359 0
 8944 3264 97F8FF30 		ldrb	r3, [r7, #255]
 8945 3268 03F10103 		add	r3, r3, #1
 8946 326c 87F8FF30 		strb	r3, [r7, #255]
 8947              	.L325:
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8948              		.loc 1 2359 0 is_stmt 0 discriminator 1
 8949 3270 97F9FF30 		ldrsb	r3, [r7, #255]
 8950 3274 202B     		cmp	r3, #32
 8951 3276 C0DD     		ble	.L328
2359:.\console.c   **** 					for(memory_num=Q_MEMORY_NUMBER_MIN; memory_num <= Q_MEMORY_NUMBER_MAX; memory_num++)
 8952              		.loc 1 2359 0
 8953 3278 F1E0     		b	.L329
 8954              	.L324:
 8955              	.LBE8:
2368:.\console.c   **** 						}
2369:.\console.c   **** 					}
2370:.\console.c   **** 				}
2371:.\console.c   **** 				else if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 8956              		.loc 1 2371 0 is_stmt 1
 8957 327a 8248     		ldr	r0, .L736+4
 8958 327c FFF7FEFF 		bl	atoi
 8959 3280 0346     		mov	r3, r0
 8960 3282 87F8E530 		strb	r3, [r7, #229]
 8961 3286 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 8962 328a 002B     		cmp	r3, #0
 8963 328c 00F0DF80 		beq	.L330
2372:.\console.c   **** 				&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 249


 8964              		.loc 1 2372 0
 8965 3290 7C48     		ldr	r0, .L736+4
 8966 3292 FFF7FEFF 		bl	atoi
 8967 3296 0346     		mov	r3, r0
 8968 3298 87F8E530 		strb	r3, [r7, #229]
 8969 329c 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 8970 32a0 632B     		cmp	r3, #99
 8971 32a2 00F2D480 		bhi	.L330
2373:.\console.c   **** 				{	
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 8972              		.loc 1 2374 0
 8973 32a6 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 8974 32aa 40F20003 		movw	r3, #:lower16:q_table
 8975 32ae C0F20003 		movt	r3, #:upper16:q_table
 8976 32b2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 8977 32b4 FF2B     		cmp	r3, #255
 8978 32b6 00F0C080 		beq	.L331
2375:.\console.c   **** 					{
2376:.\console.c   **** 						//PAN 
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 8979              		.loc 1 2377 0
 8980 32ba 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
2378:.\console.c   **** 							(uint16)q_number,
2379:.\console.c   **** 							(int32)q[q_table[q_number]].mc.position[PAN_AXIS],							
 8981              		.loc 1 2379 0
 8982 32be 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 8983 32c2 40F20003 		movw	r3, #:lower16:q_table
 8984 32c6 C0F20003 		movt	r3, #:upper16:q_table
 8985 32ca 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 8986 32cc 1946     		mov	r1, r3
 8987 32ce 40F20002 		movw	r2, #:lower16:q
 8988 32d2 C0F20002 		movt	r2, #:upper16:q
 8989 32d6 0B46     		mov	r3, r1
 8990 32d8 4FEAC303 		lsl	r3, r3, #3
 8991 32dc 5B18     		adds	r3, r3, r1
 8992 32de 4FEA8303 		lsl	r3, r3, #2
 8993 32e2 D318     		adds	r3, r2, r3
 8994 32e4 03F11803 		add	r3, r3, #24
 8995 32e8 1B68     		ldr	r3, [r3, #0]	@ float
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 8996              		.loc 1 2377 0
 8997 32ea 1846     		mov	r0, r3
 8998 32ec FFF7FEFF 		bl	__aeabi_f2iz
 8999 32f0 0546     		mov	r5, r0
2380:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_default[PAN_AXIS].fnum,
 9000              		.loc 1 2380 0
 9001 32f2 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9002 32f6 40F20003 		movw	r3, #:lower16:q_table
 9003 32fa C0F20003 		movt	r3, #:upper16:q_table
 9004 32fe 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9005 3300 1946     		mov	r1, r3
 9006 3302 40F20002 		movw	r2, #:lower16:q
 9007 3306 C0F20002 		movt	r2, #:upper16:q
 9008 330a 0B46     		mov	r3, r1
 9009 330c 4FEAC303 		lsl	r3, r3, #3
 9010 3310 5B18     		adds	r3, r3, r1
 9011 3312 4FEA8303 		lsl	r3, r3, #2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 250


 9012 3316 D318     		adds	r3, r2, r3
 9013 3318 03F10403 		add	r3, r3, #4
 9014 331c 1B68     		ldr	r3, [r3, #0]	@ float
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9015              		.loc 1 2377 0
 9016 331e 1846     		mov	r0, r3
 9017 3320 FFF7FEFF 		bl	__aeabi_f2iz
 9018 3324 0446     		mov	r4, r0
2381:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_adjust[PAN_AXIS]);
 9019              		.loc 1 2381 0
 9020 3326 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9021 332a 40F20003 		movw	r3, #:lower16:q_table
 9022 332e C0F20003 		movt	r3, #:upper16:q_table
 9023 3332 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9024 3334 1946     		mov	r1, r3
 9025 3336 40F20002 		movw	r2, #:lower16:q
 9026 333a C0F20002 		movt	r2, #:upper16:q
 9027 333e 0B46     		mov	r3, r1
 9028 3340 4FEAC303 		lsl	r3, r3, #3
 9029 3344 5B18     		adds	r3, r3, r1
 9030 3346 4FEA8303 		lsl	r3, r3, #2
 9031 334a D318     		adds	r3, r2, r3
 9032 334c 03F10803 		add	r3, r3, #8
 9033 3350 1B89     		ldrh	r3, [r3, #8]
2377:.\console.c   **** 						printf("Q%02d PAN  ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9034              		.loc 1 2377 0
 9035 3352 1BB2     		sxth	r3, r3
 9036 3354 0093     		str	r3, [sp, #0]
 9037 3356 40F20000 		movw	r0, #:lower16:.LC446
 9038 335a C0F20000 		movt	r0, #:upper16:.LC446
 9039 335e 3146     		mov	r1, r6
 9040 3360 2A46     		mov	r2, r5
 9041 3362 2346     		mov	r3, r4
 9042 3364 FFF7FEFF 		bl	printf
2382:.\console.c   **** 						
2383:.\console.c   **** 						//TILT
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9043              		.loc 1 2384 0
 9044 3368 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
2385:.\console.c   **** 							(uint16)q_number,
2386:.\console.c   **** 							(int32)q[q_table[q_number]].mc.position[TILT_AXIS],            							
 9045              		.loc 1 2386 0
 9046 336c 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9047 3370 40F20003 		movw	r3, #:lower16:q_table
 9048 3374 C0F20003 		movt	r3, #:upper16:q_table
 9049 3378 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9050 337a 1946     		mov	r1, r3
 9051 337c 40F20002 		movw	r2, #:lower16:q
 9052 3380 C0F20002 		movt	r2, #:upper16:q
 9053 3384 0B46     		mov	r3, r1
 9054 3386 4FEAC303 		lsl	r3, r3, #3
 9055 338a 5B18     		adds	r3, r3, r1
 9056 338c 4FEA8303 		lsl	r3, r3, #2
 9057 3390 D318     		adds	r3, r2, r3
 9058 3392 03F11C03 		add	r3, r3, #28
 9059 3396 1B68     		ldr	r3, [r3, #0]	@ float
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 251


 9060              		.loc 1 2384 0
 9061 3398 1846     		mov	r0, r3
 9062 339a FFF7FEFF 		bl	__aeabi_f2iz
 9063 339e 0546     		mov	r5, r0
2387:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_default[TILT_AXIS].fnum,
 9064              		.loc 1 2387 0
 9065 33a0 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9066 33a4 40F20003 		movw	r3, #:lower16:q_table
 9067 33a8 C0F20003 		movt	r3, #:upper16:q_table
 9068 33ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9069 33ae 1946     		mov	r1, r3
 9070 33b0 40F20002 		movw	r2, #:lower16:q
 9071 33b4 C0F20002 		movt	r2, #:upper16:q
 9072 33b8 0B46     		mov	r3, r1
 9073 33ba 4FEAC303 		lsl	r3, r3, #3
 9074 33be 5B18     		adds	r3, r3, r1
 9075 33c0 4FEA8303 		lsl	r3, r3, #2
 9076 33c4 D318     		adds	r3, r2, r3
 9077 33c6 03F10803 		add	r3, r3, #8
 9078 33ca 1B68     		ldr	r3, [r3, #0]	@ float
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9079              		.loc 1 2384 0
 9080 33cc 1846     		mov	r0, r3
 9081 33ce FFF7FEFF 		bl	__aeabi_f2iz
 9082 33d2 0446     		mov	r4, r0
2388:.\console.c   **** 							(int32)q[q_table[q_number]].param.position_adjust[TILT_AXIS]);	
 9083              		.loc 1 2388 0
 9084 33d4 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9085 33d8 40F20003 		movw	r3, #:lower16:q_table
 9086 33dc C0F20003 		movt	r3, #:upper16:q_table
 9087 33e0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9088 33e2 1946     		mov	r1, r3
 9089 33e4 40F20002 		movw	r2, #:lower16:q
 9090 33e8 C0F20002 		movt	r2, #:upper16:q
 9091 33ec 0B46     		mov	r3, r1
 9092 33ee 4FEAC303 		lsl	r3, r3, #3
 9093 33f2 5B18     		adds	r3, r3, r1
 9094 33f4 4FEA8303 		lsl	r3, r3, #2
 9095 33f8 D318     		adds	r3, r2, r3
 9096 33fa 03F10A03 		add	r3, r3, #10
 9097 33fe 1B89     		ldrh	r3, [r3, #8]
2384:.\console.c   **** 						printf("Q%02d TILT ABS position=%+8ld [step]  default_param=%+8ld [step]  adjust_param=%+8ld 
 9098              		.loc 1 2384 0
 9099 3400 1BB2     		sxth	r3, r3
 9100 3402 0093     		str	r3, [sp, #0]
 9101 3404 40F20000 		movw	r0, #:lower16:.LC447
 9102 3408 C0F20000 		movt	r0, #:upper16:.LC447
 9103 340c 3146     		mov	r1, r6
 9104 340e 2A46     		mov	r2, r5
 9105 3410 2346     		mov	r3, r4
 9106 3412 FFF7FEFF 		bl	printf
2389:.\console.c   **** 						
2390:.\console.c   **** 						//Memory number
2391:.\console.c   **** 						printf("\r\n(Q%02d is allocated in Q memory number %02d)\r\n", (uint16)q_number, (int16)q_tab
 9107              		.loc 1 2391 0
 9108 3416 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 9109 341a 97F8E510 		ldrb	r1, [r7, #229]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 252


 9110 341e 40F20003 		movw	r3, #:lower16:q_table
 9111 3422 C0F20003 		movt	r3, #:upper16:q_table
 9112 3426 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 9113 3428 40F20000 		movw	r0, #:lower16:.LC448
 9114 342c C0F20000 		movt	r0, #:upper16:.LC448
 9115 3430 1146     		mov	r1, r2
 9116 3432 1A46     		mov	r2, r3
 9117 3434 FFF7FEFF 		bl	printf
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 9118              		.loc 1 2374 0
 9119 3438 11E0     		b	.L329
 9120              	.L331:
2392:.\console.c   **** 					}
2393:.\console.c   **** 					else
2394:.\console.c   **** 					{
2395:.\console.c   **** 						printf("\r\nQ%02d is not allocated!\r\n", (uint16)q_number);
 9121              		.loc 1 2395 0
 9122 343a 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 9123 343e 40F20000 		movw	r0, #:lower16:.LC449
 9124 3442 C0F20000 		movt	r0, #:upper16:.LC449
 9125 3446 1946     		mov	r1, r3
 9126 3448 FFF7FEFF 		bl	printf
2374:.\console.c   **** 					if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
 9127              		.loc 1 2374 0
 9128 344c 07E0     		b	.L329
 9129              	.L330:
2396:.\console.c   **** 					}
2397:.\console.c   **** 				}
2398:.\console.c   **** 				else
2399:.\console.c   **** 				{
2400:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9130              		.loc 1 2400 0
 9131 344e 40F20000 		movw	r0, #:lower16:.LC450
 9132 3452 C0F20000 		movt	r0, #:upper16:.LC450
 9133 3456 FFF7FEFF 		bl	printf
2401:.\console.c   **** 				}
2402:.\console.c   **** 				goto exitpars;	
 9134              		.loc 1 2402 0
 9135 345a 03F079BD 		b	.L131
 9136              	.L329:
 9137 345e 03F077BD 		b	.L131
 9138              	.L323:
2403:.\console.c   **** 			}
2404:.\console.c   **** 			// END SHOW Q (SHOT) N
2405:.\console.c   **** 			
2406:.\console.c   **** 			
2407:.\console.c   **** //			// SHOW PATH N
2408:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "path") == 0)	
2409:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "pa") == 0))
2410:.\console.c   **** //			{
2411:.\console.c   **** //				if (((path_n = atoi(actual_cmd.number1)) >= 0)
2412:.\console.c   **** //				&& (path_n = atoi(actual_cmd.number1)) <= 64)
2413:.\console.c   **** //				{
2414:.\console.c   **** //					for (idx=0; idx<path[path_n].param.Trapezoid_Number; idx++)
2415:.\console.c   **** //					{
2416:.\console.c   **** //						printf(" Trapezoid num =%3i\r\n", (int16)idx);	
2417:.\console.c   **** //						printf(" Acc           =%+1.2f [%%]\r\n", (float)path[path_n].trapezoid[idx].param.acc_pc.f
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 253


2418:.\console.c   **** //						printf(" Dec           =%+1.2f [%%]\r\n", (float)path[path_n].trapezoid[idx].param.dec_pc.f
2419:.\console.c   **** //						printf(" Time          =%+1.2f [sec]\r\n", (float)path[path_n].trapezoid[idx].param.time_se
2420:.\console.c   **** //						printf(" Steps         =%+1.2f [step]\r\n", (float)path[path_n].trapezoid[idx].param.steps)
2421:.\console.c   **** //						printf(" Last_flg      =%3i [1=last]\r\n", (int16)path[path_n].trapezoid[idx].param.last_fl
2422:.\console.c   **** //						printf("----------------------------\r\n");
2423:.\console.c   **** //						printf(" Ticks Initial =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.ticks_i
2424:.\console.c   **** //						printf(" Acc EndPoint  =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.acc_end
2425:.\console.c   **** //						printf(" Dec StartPoint=%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.dec_sta
2426:.\console.c   **** //						printf(" Dec EndPoint  =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.dec_end
2427:.\console.c   **** //						printf(" Ticks Final   =%+ld [ticks]\r\n", (int32)path[path_n].trapezoid[idx].mover.ticks_f
2428:.\console.c   **** //						printf(" Acc Ticks     =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover
2429:.\console.c   **** //						printf(" Vconst Ticks  =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover
2430:.\console.c   **** //						printf(" Dec Ticks     =%+1.2f [float ticks]\r\n", (float)path[path_n].trapezoid[idx].mover
2431:.\console.c   **** //						printf(" V initial     =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.
2432:.\console.c   **** //						printf(" Acc slope     =%+1.8f [step/ticks^2]\r\n", (float)path[path_n].trapezoid[idx].move
2433:.\console.c   **** //						printf(" V constant    =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.
2434:.\console.c   **** //						printf(" Dec slope     =%+1.8f [step/ticks^2]\r\n", (float)path[path_n].trapezoid[idx].move
2435:.\console.c   **** //						printf(" V final       =%+1.8f [step/ticks]\r\n", (float)path[path_n].trapezoid[idx].mover.
2436:.\console.c   **** //						printf("\r\n");						
2437:.\console.c   **** //					}				
2438:.\console.c   **** //				}
2439:.\console.c   **** //				else
2440:.\console.c   **** //				{
2441:.\console.c   **** //					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2442:.\console.c   **** //				}
2443:.\console.c   **** //				goto exitpars;	
2444:.\console.c   **** //			}
2445:.\console.c   **** //			// END SHOW PATH N				
2446:.\console.c   **** 
2447:.\console.c   **** 			
2448:.\console.c   **** //			// SHOW MOVER N
2449:.\console.c   **** //			if ((strcmp(actual_cmd.parameter, "mover") == 0)	
2450:.\console.c   **** //			|| (strcmp(actual_cmd.parameter, "mov") == 0))
2451:.\console.c   **** //			{	
2452:.\console.c   **** //				if (((path_n = atoi(actual_cmd.number1)) >= 0)
2453:.\console.c   **** //				&& (path_n = atoi(actual_cmd.number1)) <= 64)
2454:.\console.c   **** //				{				
2455:.\console.c   **** //					int32 steps_loc;
2456:.\console.c   **** //					int32 steps_integral_loc=0;
2457:.\console.c   **** //					
2458:.\console.c   **** //					MoverInit();	/* Initialize the Mover */
2459:.\console.c   **** //					
2460:.\console.c   **** //					while ((mover.ticks <= path[path_n].path_ticks_MAX) &&
2461:.\console.c   **** //						  (AnyButtonPressed() == NO_PRESSED))
2462:.\console.c   **** //					{
2463:.\console.c   **** //						steps_loc = MoverGeneratedSteps(&path[path_n], mover.ticks);
2464:.\console.c   **** //						steps_integral_loc = steps_integral_loc + steps_loc;
2465:.\console.c   **** //						
2466:.\console.c   **** //						printf("Ticks=%+ld [ticks]", (int32)mover.ticks);
2467:.\console.c   **** //						printf("  Steps=%+ld [step]", (int32)steps_loc);	
2468:.\console.c   **** //						printf("  Int(Steps)=%+ld [step]", (int32)steps_integral_loc);
2469:.\console.c   **** //						printf("  Mover_status=%2i", (int16)mover.status);							
2470:.\console.c   **** //						printf("\r\n");
2471:.\console.c   **** //						
2472:.\console.c   **** //						mover.ticks++;
2473:.\console.c   **** //					}
2474:.\console.c   **** //				}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 254


2475:.\console.c   **** //				else
2476:.\console.c   **** //				{
2477:.\console.c   **** //					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2478:.\console.c   **** //				}					
2479:.\console.c   **** //				goto exitpars;	
2480:.\console.c   **** //			}
2481:.\console.c   **** //			// END SHOW MOVER N			
2482:.\console.c   **** 
2483:.\console.c   **** 			
2484:.\console.c   **** 			// SHOW MOVERS
2485:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "movers") == 0)
 9139              		.loc 1 2485 0
 9140 3462 0748     		ldr	r0, .L736
 9141 3464 40F20001 		movw	r1, #:lower16:.LC451
 9142 3468 C0F20001 		movt	r1, #:upper16:.LC451
 9143 346c FFF7FEFF 		bl	strcmp
 9144 3470 0346     		mov	r3, r0
 9145 3472 002B     		cmp	r3, #0
 9146 3474 48D1     		bne	.L333
2486:.\console.c   **** 			{	
2487:.\console.c   **** 				if (strlen(actual_cmd.number1) == 0)
 9147              		.loc 1 2487 0
 9148 3476 034B     		ldr	r3, .L736+4
 9149 3478 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9150 347a 002B     		cmp	r3, #0
 9151 347c 3AD1     		bne	.L334
2488:.\console.c   **** 				{			
2489:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 9152              		.loc 1 2489 0
 9153 347e 33E0     		b	.L335
 9154              	.L737:
 9155              		.align	2
 9156              	.L736:
 9157 3480 0F000000 		.word	actual_cmd+15
 9158 3484 1E000000 		.word	actual_cmd+30
 9159              	.L336:
2490:.\console.c   **** 					{
2491:.\console.c   **** 						printf("Movers Ticks=%+ld, %+ld [ticks]", (int32)mover_pan.ticks, (int32)mover_tilt.ticks);
 9160              		.loc 1 2491 0
 9161 3488 40F20003 		movw	r3, #:lower16:mover_pan
 9162 348c C0F20003 		movt	r3, #:upper16:mover_pan
 9163 3490 5B68     		ldr	r3, [r3, #4]
 9164 3492 1A46     		mov	r2, r3
 9165 3494 40F20003 		movw	r3, #:lower16:mover_tilt
 9166 3498 C0F20003 		movt	r3, #:upper16:mover_tilt
 9167 349c 5B68     		ldr	r3, [r3, #4]
 9168 349e 40F20000 		movw	r0, #:lower16:.LC452
 9169 34a2 C0F20000 		movt	r0, #:upper16:.LC452
 9170 34a6 1146     		mov	r1, r2
 9171 34a8 1A46     		mov	r2, r3
 9172 34aa FFF7FEFF 		bl	printf
2492:.\console.c   **** //						printf("  Steps=%+ld [step]", (int32)steps_loc);	
2493:.\console.c   **** //						printf("  Int(Steps)=%+ld [step]", (int32)steps_integral_loc);
2494:.\console.c   **** 						printf("  status=%2i, %2i", (int16)mover_pan.status, (int16)mover_tilt.status);							
 9173              		.loc 1 2494 0
 9174 34ae 40F20003 		movw	r3, #:lower16:mover_pan
 9175 34b2 C0F20003 		movt	r3, #:upper16:mover_pan
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 255


 9176 34b6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9177 34b8 1A46     		mov	r2, r3
 9178 34ba 40F20003 		movw	r3, #:lower16:mover_tilt
 9179 34be C0F20003 		movt	r3, #:upper16:mover_tilt
 9180 34c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9181 34c4 40F20000 		movw	r0, #:lower16:.LC453
 9182 34c8 C0F20000 		movt	r0, #:upper16:.LC453
 9183 34cc 1146     		mov	r1, r2
 9184 34ce 1A46     		mov	r2, r3
 9185 34d0 FFF7FEFF 		bl	printf
2495:.\console.c   **** 						printf("\r\n");
 9186              		.loc 1 2495 0
 9187 34d4 40F20000 		movw	r0, #:lower16:.LC42
 9188 34d8 C0F20000 		movt	r0, #:upper16:.LC42
 9189 34dc FFF7FEFF 		bl	puts
2496:.\console.c   **** 						CyDelay(50);						
 9190              		.loc 1 2496 0
 9191 34e0 4FF03200 		mov	r0, #50
 9192 34e4 FFF7FEFF 		bl	CyDelay
 9193              	.L335:
2489:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 9194              		.loc 1 2489 0 discriminator 1
 9195 34e8 FFF7FEFF 		bl	AnyButtonPressed
 9196 34ec 0346     		mov	r3, r0
 9197 34ee 002B     		cmp	r3, #0
 9198 34f0 CAD0     		beq	.L336
2489:.\console.c   **** 					while (AnyButtonPressed() == NO_PRESSED)
 9199              		.loc 1 2489 0 is_stmt 0
 9200 34f2 07E0     		b	.L688
 9201              	.L334:
2497:.\console.c   **** 					}
2498:.\console.c   **** 				}
2499:.\console.c   **** 				else
2500:.\console.c   **** 				{
2501:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9202              		.loc 1 2501 0 is_stmt 1
 9203 34f4 40F20000 		movw	r0, #:lower16:.LC450
 9204 34f8 C0F20000 		movt	r0, #:upper16:.LC450
 9205 34fc FFF7FEFF 		bl	printf
2502:.\console.c   **** 				}					
2503:.\console.c   **** 				goto exitpars;	
 9206              		.loc 1 2503 0
 9207 3500 03F026BD 		b	.L131
 9208              	.L688:
 9209 3504 03F024BD 		b	.L131
 9210              	.L333:
2504:.\console.c   **** 			}
2505:.\console.c   **** 			// END SHOW MOVERS		
2506:.\console.c   **** 			
2507:.\console.c   **** 			// SHOW CLU N
2508:.\console.c   **** 			if (strcmp(actual_cmd.parameter, "clu") == 0)
 9211              		.loc 1 2508 0
 9212 3508 D448     		ldr	r0, .L738
 9213 350a 40F20001 		movw	r1, #:lower16:.LC454
 9214 350e C0F20001 		movt	r1, #:upper16:.LC454
 9215 3512 FFF7FEFF 		bl	strcmp
 9216 3516 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 256


 9217 3518 002B     		cmp	r3, #0
 9218 351a 1ED1     		bne	.L338
2509:.\console.c   **** 			{	
2510:.\console.c   **** 				if (((clu_number = atoi(actual_cmd.number1)) >= 0)
 9219              		.loc 1 2510 0
 9220 351c D048     		ldr	r0, .L738+4
 9221 351e FFF7FEFF 		bl	atoi
 9222 3522 0346     		mov	r3, r0
 9223 3524 87F8EA30 		strb	r3, [r7, #234]
2511:.\console.c   **** 				&& (clu_number = atoi(actual_cmd.number1)) < MAX_CLU_NUMBER)
 9224              		.loc 1 2511 0
 9225 3528 CD48     		ldr	r0, .L738+4
 9226 352a FFF7FEFF 		bl	atoi
 9227 352e 0346     		mov	r3, r0
 9228 3530 87F8EA30 		strb	r3, [r7, #234]
 9229 3534 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 9230 3538 312B     		cmp	r3, #49
 9231 353a 06D8     		bhi	.L339
2512:.\console.c   **** 				{				
2513:.\console.c   **** 					PrintClu(clu_number);
 9232              		.loc 1 2513 0
 9233 353c 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 9234 3540 1846     		mov	r0, r3
 9235 3542 FFF7FEFF 		bl	PrintClu
2514:.\console.c   **** 				}
2515:.\console.c   **** 				else
2516:.\console.c   **** 				{
2517:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
2518:.\console.c   **** 				}					
2519:.\console.c   **** 				goto exitpars;	
 9236              		.loc 1 2519 0
 9237 3546 03F003BD 		b	.L131
 9238              	.L339:
2517:.\console.c   **** 					printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 9239              		.loc 1 2517 0
 9240 354a 40F20000 		movw	r0, #:lower16:.LC450
 9241 354e C0F20000 		movt	r0, #:upper16:.LC450
 9242 3552 FFF7FEFF 		bl	printf
 9243              		.loc 1 2519 0
 9244 3556 03F0FBBC 		b	.L131
 9245              	.L338:
2520:.\console.c   **** 			}
2521:.\console.c   **** 			// END SHOW CLU N			
2522:.\console.c   **** 			
2523:.\console.c   **** 			
2524:.\console.c   **** 			// SHOW PAN LIMITS
2525:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "panlimits") == 0)	
 9246              		.loc 1 2525 0
 9247 355a C048     		ldr	r0, .L738
 9248 355c 40F20001 		movw	r1, #:lower16:.LC455
 9249 3560 C0F20001 		movt	r1, #:upper16:.LC455
 9250 3564 FFF7FEFF 		bl	strcmp
 9251 3568 0346     		mov	r3, r0
 9252 356a 002B     		cmp	r3, #0
 9253 356c 28D0     		beq	.L703
2526:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "plim") == 0))
 9254              		.loc 1 2526 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 257


 9255 356e BB48     		ldr	r0, .L738
 9256 3570 40F20001 		movw	r1, #:lower16:.LC456
 9257 3574 C0F20001 		movt	r1, #:upper16:.LC456
 9258 3578 FFF7FEFF 		bl	strcmp
 9259 357c 0346     		mov	r3, r0
 9260 357e 002B     		cmp	r3, #0
 9261 3580 26D1     		bne	.L342
2527:.\console.c   **** 			{
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9262              		.loc 1 2528 0
 9263 3582 1DE0     		b	.L703
 9264              	.L344:
2529:.\console.c   **** 				{
2530:.\console.c   **** 			        printf("PAN LIMIT=%2u ", (uint16)pan_axis.lc.status);					
 9265              		.loc 1 2530 0
 9266 3584 40F20003 		movw	r3, #:lower16:pan_axis
 9267 3588 C0F20003 		movt	r3, #:upper16:pan_axis
 9268 358c 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 9269 3590 40F20000 		movw	r0, #:lower16:.LC457
 9270 3594 C0F20000 		movt	r0, #:upper16:.LC457
 9271 3598 1946     		mov	r1, r3
 9272 359a FFF7FEFF 		bl	printf
2531:.\console.c   **** 					ShowLimits(&pan_axis);
 9273              		.loc 1 2531 0
 9274 359e 40F20000 		movw	r0, #:lower16:pan_axis
 9275 35a2 C0F20000 		movt	r0, #:upper16:pan_axis
 9276 35a6 FFF7FEFF 		bl	ShowLimits
2532:.\console.c   **** 					printf("\r\n");
 9277              		.loc 1 2532 0
 9278 35aa 40F20000 		movw	r0, #:lower16:.LC42
 9279 35ae C0F20000 		movt	r0, #:upper16:.LC42
 9280 35b2 FFF7FEFF 		bl	puts
2533:.\console.c   **** 					
2534:.\console.c   **** 					CyDelay(50);
 9281              		.loc 1 2534 0
 9282 35b6 4FF03200 		mov	r0, #50
 9283 35ba FFF7FEFF 		bl	CyDelay
 9284 35be 00E0     		b	.L343
 9285              	.L703:
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9286              		.loc 1 2528 0
 9287 35c0 00BF     		nop
 9288              	.L343:
2528:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9289              		.loc 1 2528 0 is_stmt 0 discriminator 1
 9290 35c2 FFF7FEFF 		bl	AnyButtonPressed
 9291 35c6 0346     		mov	r3, r0
 9292 35c8 002B     		cmp	r3, #0
 9293 35ca DBD0     		beq	.L344
2535:.\console.c   **** 				}
2536:.\console.c   **** 				goto exitpars;	
 9294              		.loc 1 2536 0 is_stmt 1
 9295 35cc 03F0C0BC 		b	.L131
 9296              	.L342:
2537:.\console.c   **** 			}
2538:.\console.c   **** 			// SHOW PAN LIMITS END			
2539:.\console.c   **** 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 258


2540:.\console.c   **** 			
2541:.\console.c   **** 			// SHOW TILT LIMITS
2542:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "tiltlimits") == 0)	
 9297              		.loc 1 2542 0
 9298 35d0 A248     		ldr	r0, .L738
 9299 35d2 40F20001 		movw	r1, #:lower16:.LC458
 9300 35d6 C0F20001 		movt	r1, #:upper16:.LC458
 9301 35da FFF7FEFF 		bl	strcmp
 9302 35de 0346     		mov	r3, r0
 9303 35e0 002B     		cmp	r3, #0
 9304 35e2 28D0     		beq	.L704
2543:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "tlim") == 0))
 9305              		.loc 1 2543 0
 9306 35e4 9D48     		ldr	r0, .L738
 9307 35e6 40F20001 		movw	r1, #:lower16:.LC459
 9308 35ea C0F20001 		movt	r1, #:upper16:.LC459
 9309 35ee FFF7FEFF 		bl	strcmp
 9310 35f2 0346     		mov	r3, r0
 9311 35f4 002B     		cmp	r3, #0
 9312 35f6 26D1     		bne	.L346
2544:.\console.c   **** 			{
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9313              		.loc 1 2545 0
 9314 35f8 1DE0     		b	.L704
 9315              	.L348:
2546:.\console.c   **** 				{
2547:.\console.c   **** 			        printf("TILT LIMIT=%2u ", (uint16)tilt_axis.lc.status);
 9316              		.loc 1 2547 0
 9317 35fa 40F20003 		movw	r3, #:lower16:tilt_axis
 9318 35fe C0F20003 		movt	r3, #:upper16:tilt_axis
 9319 3602 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 9320 3606 40F20000 		movw	r0, #:lower16:.LC460
 9321 360a C0F20000 		movt	r0, #:upper16:.LC460
 9322 360e 1946     		mov	r1, r3
 9323 3610 FFF7FEFF 		bl	printf
2548:.\console.c   **** 					ShowLimits(&tilt_axis);		
 9324              		.loc 1 2548 0
 9325 3614 40F20000 		movw	r0, #:lower16:tilt_axis
 9326 3618 C0F20000 		movt	r0, #:upper16:tilt_axis
 9327 361c FFF7FEFF 		bl	ShowLimits
2549:.\console.c   **** 					printf("\r\n");
 9328              		.loc 1 2549 0
 9329 3620 40F20000 		movw	r0, #:lower16:.LC42
 9330 3624 C0F20000 		movt	r0, #:upper16:.LC42
 9331 3628 FFF7FEFF 		bl	puts
2550:.\console.c   **** 					
2551:.\console.c   **** 					CyDelay(50);
 9332              		.loc 1 2551 0
 9333 362c 4FF03200 		mov	r0, #50
 9334 3630 FFF7FEFF 		bl	CyDelay
 9335 3634 00E0     		b	.L347
 9336              	.L704:
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 9337              		.loc 1 2545 0
 9338 3636 00BF     		nop
 9339              	.L347:
2545:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 259


 9340              		.loc 1 2545 0 is_stmt 0 discriminator 1
 9341 3638 FFF7FEFF 		bl	AnyButtonPressed
 9342 363c 0346     		mov	r3, r0
 9343 363e 002B     		cmp	r3, #0
 9344 3640 DBD0     		beq	.L348
2552:.\console.c   **** 				}
2553:.\console.c   **** 				goto exitpars;	
 9345              		.loc 1 2553 0 is_stmt 1
 9346 3642 03F085BC 		b	.L131
 9347              	.L346:
2554:.\console.c   **** 			}
2555:.\console.c   **** 			// SHOW TILT LIMITS END					
2556:.\console.c   **** 			
2557:.\console.c   **** 			
2558:.\console.c   **** 			// SHOW ABS RATIO PAN
2559:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0)	
 9348              		.loc 1 2559 0
 9349 3646 8548     		ldr	r0, .L738
 9350 3648 40F20001 		movw	r1, #:lower16:.LC461
 9351 364c C0F20001 		movt	r1, #:upper16:.LC461
 9352 3650 FFF7FEFF 		bl	strcmp
 9353 3654 0346     		mov	r3, r0
 9354 3656 002B     		cmp	r3, #0
 9355 3658 0AD0     		beq	.L349
2560:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ratiop") == 0))
 9356              		.loc 1 2560 0
 9357 365a 8048     		ldr	r0, .L738
 9358 365c 40F20001 		movw	r1, #:lower16:.LC462
 9359 3660 C0F20001 		movt	r1, #:upper16:.LC462
 9360 3664 FFF7FEFF 		bl	strcmp
 9361 3668 0346     		mov	r3, r0
 9362 366a 002B     		cmp	r3, #0
 9363 366c 40F00381 		bne	.L350
 9364              	.L349:
2561:.\console.c   **** 			{
2562:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 9365              		.loc 1 2562 0
 9366 3670 40F20000 		movw	r0, #:lower16:.LC431
 9367 3674 C0F20000 		movt	r0, #:upper16:.LC431
 9368 3678 FFF7FEFF 		bl	puts
2563:.\console.c   **** 				printf(STR_SHOWENCFC);			//
 9369              		.loc 1 2563 0
 9370 367c 40F20000 		movw	r0, #:lower16:.LC463
 9371 3680 C0F20000 		movt	r0, #:upper16:.LC463
 9372 3684 FFF7FEFF 		bl	printf
2564:.\console.c   **** 			
2565:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 9373              		.loc 1 2565 0
 9374 3688 4FF00100 		mov	r0, #1
 9375 368c FFF7FEFF 		bl	ButtonYNChoice
 9376 3690 0346     		mov	r3, r0
 9377 3692 012B     		cmp	r3, #1
 9378 3694 40F0EB80 		bne	.L351
2566:.\console.c   **** 				{
2567:.\console.c   **** 					isr_CTRL_Stop();					/* Stop Control ISR			*/	
 9379              		.loc 1 2567 0
 9380 3698 FFF7FEFF 		bl	isr_CTRL_Stop
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 260


2568:.\console.c   **** 					motor_init(&pan_axis);				/* Initialize Pan Axis  	*/
 9381              		.loc 1 2568 0
 9382 369c 40F20000 		movw	r0, #:lower16:pan_axis
 9383 36a0 C0F20000 		movt	r0, #:upper16:pan_axis
 9384 36a4 FFF7FEFF 		bl	motor_init
2569:.\console.c   **** 					motor_init(&tilt_axis);				/* Initialize Tilt Axis 	*/
 9385              		.loc 1 2569 0
 9386 36a8 40F20000 		movw	r0, #:lower16:tilt_axis
 9387 36ac C0F20000 		movt	r0, #:upper16:tilt_axis
 9388 36b0 FFF7FEFF 		bl	motor_init
2570:.\console.c   **** 					
2571:.\console.c   **** 					pan_absolute_sensor.ratio_tmp = 0;	//clear temporary ratio value
 9389              		.loc 1 2571 0
 9390 36b4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9391 36b8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9392 36bc 4FF00002 		mov	r2, #0
 9393 36c0 9A62     		str	r2, [r3, #40]	@ float
2572:.\console.c   **** 					get_key = 0;						//clear internal loop getted char
 9394              		.loc 1 2572 0
 9395 36c2 4FF00003 		mov	r3, #0
 9396 36c6 87F81231 		strb	r3, [r7, #274]
2573:.\console.c   **** 					
2574:.\console.c   **** 					while (get_key == 0)						
 9397              		.loc 1 2574 0
 9398 36ca CBE0     		b	.L352
 9399              	.L359:
2575:.\console.c   **** 					{						
2576:.\console.c   **** 						printf("PAN: ABS_SENSOR=%5i[lsb]", (int16)AdcValue[HOME_PAN_ABSV]);
 9400              		.loc 1 2576 0
 9401 36cc 40F20003 		movw	r3, #:lower16:AdcValue
 9402 36d0 C0F20003 		movt	r3, #:upper16:AdcValue
 9403 36d4 9B89     		ldrh	r3, [r3, #12]
 9404 36d6 1BB2     		sxth	r3, r3
 9405 36d8 40F20000 		movw	r0, #:lower16:.LC464
 9406 36dc C0F20000 		movt	r0, #:upper16:.LC464
 9407 36e0 1946     		mov	r1, r3
 9408 36e2 FFF7FEFF 		bl	printf
2577:.\console.c   **** 						printf(" ENC=%9li[step]", (int32)QuadDec_PAN_GetCounter());	
 9409              		.loc 1 2577 0
 9410 36e6 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9411 36ea 0346     		mov	r3, r0
 9412 36ec 40F20000 		movw	r0, #:lower16:.LC465
 9413 36f0 C0F20000 		movt	r0, #:upper16:.LC465
 9414 36f4 1946     		mov	r1, r3
 9415 36f6 FFF7FEFF 		bl	printf
2578:.\console.c   **** 						printf(" RATIO=%1.4f[step/lsb]",(float)pan_absolute_sensor.ratio_tmp);
 9416              		.loc 1 2578 0
 9417 36fa 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9418 36fe C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9419 3702 9B6A     		ldr	r3, [r3, #40]	@ float
 9420 3704 1846     		mov	r0, r3
 9421 3706 FFF7FEFF 		bl	__aeabi_f2d
 9422 370a 0246     		mov	r2, r0
 9423 370c 0B46     		mov	r3, r1
 9424 370e 40F20000 		movw	r0, #:lower16:.LC466
 9425 3712 C0F20000 		movt	r0, #:upper16:.LC466
 9426 3716 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 261


2579:.\console.c   **** 						printf("\r\n");
 9427              		.loc 1 2579 0
 9428 371a 40F20000 		movw	r0, #:lower16:.LC42
 9429 371e C0F20000 		movt	r0, #:upper16:.LC42
 9430 3722 FFF7FEFF 		bl	puts
2580:.\console.c   **** 						
2581:.\console.c   **** //						/******************************************************/
2582:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2583:.\console.c   **** //						/******************************************************/
2584:.\console.c   **** //						CyWdtClear();						
2585:.\console.c   **** 					
2586:.\console.c   **** 						/* internal one-key reset & sample */
2587:.\console.c   **** 						get_key = UART_USB_GetChar();	/* get the char */
 9431              		.loc 1 2587 0
 9432 3726 FFF7FEFF 		bl	UART_USB_GetChar
 9433 372a 0346     		mov	r3, r0
 9434 372c 87F81231 		strb	r3, [r7, #274]
2588:.\console.c   **** 						if 	((get_key == 'r') || (get_key == 'R'))
 9435              		.loc 1 2588 0
 9436 3730 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9437 3734 722B     		cmp	r3, #114
 9438 3736 03D0     		beq	.L353
 9439              		.loc 1 2588 0 is_stmt 0 discriminator 1
 9440 3738 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9441 373c 522B     		cmp	r3, #82
 9442 373e 1CD1     		bne	.L354
 9443              	.L353:
2589:.\console.c   **** 						{	
2590:.\console.c   **** 							pan_absolute_sensor.slave_encoder_step_p0 = (int32)QuadDec_PAN_GetCounter();/* Encoder Point
 9444              		.loc 1 2590 0 is_stmt 1
 9445 3740 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9446 3744 0246     		mov	r2, r0
 9447 3746 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9448 374a C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9449 374e 9A61     		str	r2, [r3, #24]
2591:.\console.c   **** 							pan_absolute_sensor.raw_adc_p0            = (int32)AdcValue[HOME_PAN_ABSV];	/* ABS Sensor AD
 9450              		.loc 1 2591 0
 9451 3750 40F20003 		movw	r3, #:lower16:AdcValue
 9452 3754 C0F20003 		movt	r3, #:upper16:AdcValue
 9453 3758 9B89     		ldrh	r3, [r3, #12]
 9454 375a 1AB2     		sxth	r2, r3
 9455 375c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9456 3760 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9457 3764 DA61     		str	r2, [r3, #28]
2592:.\console.c   **** 						
2593:.\console.c   **** 							printf("\r\n*!point 0 sampling\r\n\r\n");	
 9458              		.loc 1 2593 0
 9459 3766 40F20000 		movw	r0, #:lower16:.LC467
 9460 376a C0F20000 		movt	r0, #:upper16:.LC467
 9461 376e FFF7FEFF 		bl	puts
2594:.\console.c   **** 							get_key = 0; //stay in while loop
 9462              		.loc 1 2594 0
 9463 3772 4FF00003 		mov	r3, #0
 9464 3776 87F81231 		strb	r3, [r7, #274]
 9465              	.L354:
2595:.\console.c   **** 						}
2596:.\console.c   **** 						
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 262


2597:.\console.c   **** //						/******************************************************/
2598:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2599:.\console.c   **** //						/******************************************************/
2600:.\console.c   **** //						CyWdtClear();							
2601:.\console.c   **** 						
2602:.\console.c   **** 						/* internal one-key pot ratio calc */
2603:.\console.c   **** 						if 	((get_key == 's') || (get_key == 'S'))
 9466              		.loc 1 2603 0
 9467 377a 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9468 377e 732B     		cmp	r3, #115
 9469 3780 03D0     		beq	.L355
 9470              		.loc 1 2603 0 is_stmt 0 discriminator 1
 9471 3782 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9472 3786 532B     		cmp	r3, #83
 9473 3788 46D1     		bne	.L356
 9474              	.L355:
2604:.\console.c   **** 						{							
2605:.\console.c   **** 							pan_absolute_sensor.sample_d1 = (float)((int32)QuadDec_PAN_GetCounter() - pan_absolute_senso
 9475              		.loc 1 2605 0 is_stmt 1
 9476 378a FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 9477 378e 0246     		mov	r2, r0
 9478 3790 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9479 3794 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9480 3798 9B69     		ldr	r3, [r3, #24]
 9481 379a D31A     		subs	r3, r2, r3
 9482 379c 1846     		mov	r0, r3
 9483 379e FFF7FEFF 		bl	__aeabi_i2f
 9484 37a2 0246     		mov	r2, r0
 9485 37a4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9486 37a8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9487 37ac 1A62     		str	r2, [r3, #32]	@ float
2606:.\console.c   **** 							pan_absolute_sensor.sample_d2 = (float)((int32)AdcValue[HOME_PAN_ABSV]  - pan_absolute_senso
 9488              		.loc 1 2606 0
 9489 37ae 40F20003 		movw	r3, #:lower16:AdcValue
 9490 37b2 C0F20003 		movt	r3, #:upper16:AdcValue
 9491 37b6 9B89     		ldrh	r3, [r3, #12]
 9492 37b8 1AB2     		sxth	r2, r3
 9493 37ba 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9494 37be C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9495 37c2 DB69     		ldr	r3, [r3, #28]
 9496 37c4 D31A     		subs	r3, r2, r3
 9497 37c6 1846     		mov	r0, r3
 9498 37c8 FFF7FEFF 		bl	__aeabi_i2f
 9499 37cc 0246     		mov	r2, r0
 9500 37ce 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9501 37d2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9502 37d6 5A62     		str	r2, [r3, #36]	@ float
2607:.\console.c   **** 							pan_absolute_sensor.ratio_tmp = fabs(pan_absolute_sensor.sample_d1 / pan_absolute_sensor.sam
 9503              		.loc 1 2607 0
 9504 37d8 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9505 37dc C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9506 37e0 1A6A     		ldr	r2, [r3, #32]	@ float
 9507 37e2 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9508 37e6 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9509 37ea 5B6A     		ldr	r3, [r3, #36]	@ float
 9510 37ec 1046     		mov	r0, r2
 9511 37ee 1946     		mov	r1, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 263


 9512 37f0 FFF7FEFF 		bl	__aeabi_fdiv
 9513 37f4 0346     		mov	r3, r0
 9514 37f6 23F00042 		bic	r2, r3, #-2147483648
 9515 37fa 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9516 37fe C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9517 3802 9A62     		str	r2, [r3, #40]	@ float
2608:.\console.c   **** 						
2609:.\console.c   **** 							printf("\r\n*!enc over abs ratio sampled\r\n\r\n");	
 9518              		.loc 1 2609 0
 9519 3804 40F20000 		movw	r0, #:lower16:.LC468
 9520 3808 C0F20000 		movt	r0, #:upper16:.LC468
 9521 380c FFF7FEFF 		bl	puts
2610:.\console.c   **** 							get_key = 0; //stay in while loop
 9522              		.loc 1 2610 0
 9523 3810 4FF00003 		mov	r3, #0
 9524 3814 87F81231 		strb	r3, [r7, #274]
 9525              	.L356:
2611:.\console.c   **** 						}
2612:.\console.c   **** 						
2613:.\console.c   **** //						/******************************************************/
2614:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2615:.\console.c   **** //						/******************************************************/
2616:.\console.c   **** //						CyWdtClear();	
2617:.\console.c   **** 						
2618:.\console.c   **** 						/* internal one-key pot ratio eeprom save */
2619:.\console.c   **** 						if 	((get_key == 'e') || (get_key == 'E'))
 9526              		.loc 1 2619 0
 9527 3818 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9528 381c 652B     		cmp	r3, #101
 9529 381e 03D0     		beq	.L357
 9530              		.loc 1 2619 0 is_stmt 0 discriminator 1
 9531 3820 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9532 3824 452B     		cmp	r3, #69
 9533 3826 1DD1     		bne	.L352
 9534              	.L357:
2620:.\console.c   **** 						{	
2621:.\console.c   **** 							/* update global parameters */
2622:.\console.c   **** 							pan_absolute_sensor.param.step_over_abs_ratio.fnum = pan_absolute_sensor.ratio_tmp;
 9535              		.loc 1 2622 0 is_stmt 1
 9536 3828 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9537 382c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9538 3830 9A6A     		ldr	r2, [r3, #40]	@ float
 9539 3832 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 9540 3836 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 9541 383a 9A63     		str	r2, [r3, #56]	@ float
2623:.\console.c   **** 							
2624:.\console.c   **** 							goto PsavetoEE;
 9542              		.loc 1 2624 0
 9543 383c 00BF     		nop
 9544              	.L358:
2625:.\console.c   **** 						}						
2626:.\console.c   **** 					}
2627:.\console.c   **** 				}				
2628:.\console.c   **** 				
2629:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
2630:.\console.c   **** 		
2631:.\console.c   **** 				goto exitpars;	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 264


2632:.\console.c   **** PsavetoEE:
2633:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/	
 9545              		.loc 1 2633 0
 9546 383e FFF7FEFF 		bl	isr_CTRL_Start
2634:.\console.c   **** 				
2635:.\console.c   **** 				/* Update EEPROM */
2636:.\console.c   **** 				dummy = WriteAllEEparams();
 9547              		.loc 1 2636 0
 9548 3842 FFF7FEFF 		bl	WriteAllEEparams
 9549 3846 0346     		mov	r3, r0
 9550 3848 87F8D930 		strb	r3, [r7, #217]
2637:.\console.c   **** 										
2638:.\console.c   **** 				printf("\r\n*!Absolute Sensor ratio PAN eeprom saved\r\n\r\n");	
 9551              		.loc 1 2638 0
 9552 384c 40F20000 		movw	r0, #:lower16:.LC469
 9553 3850 C0F20000 		movt	r0, #:upper16:.LC469
 9554 3854 FFF7FEFF 		bl	puts
2639:.\console.c   **** 				goto exitpars;				
 9555              		.loc 1 2639 0
 9556 3858 03F07ABB 		b	.L131
 9557              	.L739:
 9558              		.align	2
 9559              	.L738:
 9560 385c 0F000000 		.word	actual_cmd+15
 9561 3860 1E000000 		.word	actual_cmd+30
 9562              	.L352:
2574:.\console.c   **** 					while (get_key == 0)						
 9563              		.loc 1 2574 0 discriminator 1
 9564 3864 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9565 3868 002B     		cmp	r3, #0
 9566 386a 3FF42FAF 		beq	.L359
 9567              	.L351:
2629:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
 9568              		.loc 1 2629 0
 9569 386e FFF7FEFF 		bl	isr_CTRL_Start
2631:.\console.c   **** 				goto exitpars;	
 9570              		.loc 1 2631 0
 9571 3872 03F06DBB 		b	.L131
 9572              	.L350:
2640:.\console.c   **** 			}		
2641:.\console.c   **** 			// END SHOW ABS RATIO PAN				
2642:.\console.c   **** 			
2643:.\console.c   **** 			
2644:.\console.c   **** 			// SHOW ABS RATIO TILT
2645:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "ratioabst") == 0)	
 9573              		.loc 1 2645 0
 9574 3876 BB48     		ldr	r0, .L740
 9575 3878 40F20001 		movw	r1, #:lower16:.LC470
 9576 387c C0F20001 		movt	r1, #:upper16:.LC470
 9577 3880 FFF7FEFF 		bl	strcmp
 9578 3884 0346     		mov	r3, r0
 9579 3886 002B     		cmp	r3, #0
 9580 3888 0AD0     		beq	.L360
2646:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "ratiot") == 0))
 9581              		.loc 1 2646 0
 9582 388a B648     		ldr	r0, .L740
 9583 388c 40F20001 		movw	r1, #:lower16:.LC471
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 265


 9584 3890 C0F20001 		movt	r1, #:upper16:.LC471
 9585 3894 FFF7FEFF 		bl	strcmp
 9586 3898 0346     		mov	r3, r0
 9587 389a 002B     		cmp	r3, #0
 9588 389c 40F0FF80 		bne	.L361
 9589              	.L360:
2647:.\console.c   **** 			{
2648:.\console.c   **** 				printf(STR_SHOWENCFA);			//DANGER PROMPT
 9590              		.loc 1 2648 0
 9591 38a0 40F20000 		movw	r0, #:lower16:.LC431
 9592 38a4 C0F20000 		movt	r0, #:upper16:.LC431
 9593 38a8 FFF7FEFF 		bl	puts
2649:.\console.c   **** 				printf(STR_SHOWENCFC);			//
 9594              		.loc 1 2649 0
 9595 38ac 40F20000 		movw	r0, #:lower16:.LC463
 9596 38b0 C0F20000 		movt	r0, #:upper16:.LC463
 9597 38b4 FFF7FEFF 		bl	printf
2650:.\console.c   **** 			
2651:.\console.c   **** 				if (ButtonYNChoice(ECHO_ON) == _YES)
 9598              		.loc 1 2651 0
 9599 38b8 4FF00100 		mov	r0, #1
 9600 38bc FFF7FEFF 		bl	ButtonYNChoice
 9601 38c0 0346     		mov	r3, r0
 9602 38c2 012B     		cmp	r3, #1
 9603 38c4 40F0E780 		bne	.L362
2652:.\console.c   **** 				{
2653:.\console.c   **** 					isr_CTRL_Stop();					/* Stop Control ISR			*/	
 9604              		.loc 1 2653 0
 9605 38c8 FFF7FEFF 		bl	isr_CTRL_Stop
2654:.\console.c   **** 					motor_init(&pan_axis);				/* Initialize Pan Axis  	*/
 9606              		.loc 1 2654 0
 9607 38cc 40F20000 		movw	r0, #:lower16:pan_axis
 9608 38d0 C0F20000 		movt	r0, #:upper16:pan_axis
 9609 38d4 FFF7FEFF 		bl	motor_init
2655:.\console.c   **** 					motor_init(&tilt_axis);				/* Initialize Tilt Axis 	*/
 9610              		.loc 1 2655 0
 9611 38d8 40F20000 		movw	r0, #:lower16:tilt_axis
 9612 38dc C0F20000 		movt	r0, #:upper16:tilt_axis
 9613 38e0 FFF7FEFF 		bl	motor_init
2656:.\console.c   **** 					
2657:.\console.c   **** 					tilt_absolute_sensor.ratio_tmp = 0;	//clear temporary ratio value
 9614              		.loc 1 2657 0
 9615 38e4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9616 38e8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9617 38ec 4FF00002 		mov	r2, #0
 9618 38f0 9A62     		str	r2, [r3, #40]	@ float
2658:.\console.c   **** 					get_key = 0;						//clear internal loop getted char
 9619              		.loc 1 2658 0
 9620 38f2 4FF00003 		mov	r3, #0
 9621 38f6 87F81231 		strb	r3, [r7, #274]
2659:.\console.c   **** 					
2660:.\console.c   **** 					while (get_key == 0)						
 9622              		.loc 1 2660 0
 9623 38fa C7E0     		b	.L363
 9624              	.L370:
2661:.\console.c   **** 					{						
2662:.\console.c   **** 						printf("TILT: ABS_SENSOR=%5i[lsb]", (int16)AdcValue[HOME_TILT_ABSV]);
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 266


 9625              		.loc 1 2662 0
 9626 38fc 40F20003 		movw	r3, #:lower16:AdcValue
 9627 3900 C0F20003 		movt	r3, #:upper16:AdcValue
 9628 3904 DB89     		ldrh	r3, [r3, #14]
 9629 3906 1BB2     		sxth	r3, r3
 9630 3908 40F20000 		movw	r0, #:lower16:.LC472
 9631 390c C0F20000 		movt	r0, #:upper16:.LC472
 9632 3910 1946     		mov	r1, r3
 9633 3912 FFF7FEFF 		bl	printf
2663:.\console.c   **** 						printf(" ENC=%9li[step]", (int32)QuadDec_TILT_GetCounter());	
 9634              		.loc 1 2663 0
 9635 3916 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 9636 391a 0346     		mov	r3, r0
 9637 391c 40F20000 		movw	r0, #:lower16:.LC465
 9638 3920 C0F20000 		movt	r0, #:upper16:.LC465
 9639 3924 1946     		mov	r1, r3
 9640 3926 FFF7FEFF 		bl	printf
2664:.\console.c   **** 						printf(" RATIO=%1.4f[step/lsb]",(float)tilt_absolute_sensor.ratio_tmp);
 9641              		.loc 1 2664 0
 9642 392a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9643 392e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9644 3932 9B6A     		ldr	r3, [r3, #40]	@ float
 9645 3934 1846     		mov	r0, r3
 9646 3936 FFF7FEFF 		bl	__aeabi_f2d
 9647 393a 0246     		mov	r2, r0
 9648 393c 0B46     		mov	r3, r1
 9649 393e 40F20000 		movw	r0, #:lower16:.LC466
 9650 3942 C0F20000 		movt	r0, #:upper16:.LC466
 9651 3946 FFF7FEFF 		bl	printf
2665:.\console.c   **** 						printf("\r\n");
 9652              		.loc 1 2665 0
 9653 394a 40F20000 		movw	r0, #:lower16:.LC42
 9654 394e C0F20000 		movt	r0, #:upper16:.LC42
 9655 3952 FFF7FEFF 		bl	puts
2666:.\console.c   **** 						
2667:.\console.c   **** //						/******************************************************/
2668:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2669:.\console.c   **** //						/******************************************************/
2670:.\console.c   **** //						CyWdtClear();						
2671:.\console.c   **** 					
2672:.\console.c   **** 						/* internal one-key reset & sample */
2673:.\console.c   **** 						get_key = UART_USB_GetChar();	/* get the char */
 9656              		.loc 1 2673 0
 9657 3956 FFF7FEFF 		bl	UART_USB_GetChar
 9658 395a 0346     		mov	r3, r0
 9659 395c 87F81231 		strb	r3, [r7, #274]
2674:.\console.c   **** 						if 	((get_key == 'r') || (get_key == 'R'))
 9660              		.loc 1 2674 0
 9661 3960 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9662 3964 722B     		cmp	r3, #114
 9663 3966 03D0     		beq	.L364
 9664              		.loc 1 2674 0 is_stmt 0 discriminator 1
 9665 3968 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9666 396c 522B     		cmp	r3, #82
 9667 396e 1CD1     		bne	.L365
 9668              	.L364:
2675:.\console.c   **** 						{	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 267


2676:.\console.c   **** 							tilt_absolute_sensor.slave_encoder_step_p0 = (int32)QuadDec_TILT_GetCounter();	/* Encoder Po
 9669              		.loc 1 2676 0 is_stmt 1
 9670 3970 FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 9671 3974 0246     		mov	r2, r0
 9672 3976 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9673 397a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9674 397e 9A61     		str	r2, [r3, #24]
2677:.\console.c   **** 							tilt_absolute_sensor.raw_adc_p0            = (int32)AdcValue[HOME_TILT_ABSV];	/* ABS Sensor 
 9675              		.loc 1 2677 0
 9676 3980 40F20003 		movw	r3, #:lower16:AdcValue
 9677 3984 C0F20003 		movt	r3, #:upper16:AdcValue
 9678 3988 DB89     		ldrh	r3, [r3, #14]
 9679 398a 1AB2     		sxth	r2, r3
 9680 398c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9681 3990 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9682 3994 DA61     		str	r2, [r3, #28]
2678:.\console.c   **** 						
2679:.\console.c   **** 							printf("\r\n*!point 0 sampling\r\n\r\n");	
 9683              		.loc 1 2679 0
 9684 3996 40F20000 		movw	r0, #:lower16:.LC467
 9685 399a C0F20000 		movt	r0, #:upper16:.LC467
 9686 399e FFF7FEFF 		bl	puts
2680:.\console.c   **** 							get_key = 0; //stay in while loop
 9687              		.loc 1 2680 0
 9688 39a2 4FF00003 		mov	r3, #0
 9689 39a6 87F81231 		strb	r3, [r7, #274]
 9690              	.L365:
2681:.\console.c   **** 						}
2682:.\console.c   **** 						
2683:.\console.c   **** //						/******************************************************/
2684:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2685:.\console.c   **** //						/******************************************************/
2686:.\console.c   **** //						CyWdtClear();							
2687:.\console.c   **** 						
2688:.\console.c   **** 						/* internal one-key pot ratio calc */
2689:.\console.c   **** 						if 	((get_key == 's') || (get_key == 'S'))
 9691              		.loc 1 2689 0
 9692 39aa 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9693 39ae 732B     		cmp	r3, #115
 9694 39b0 03D0     		beq	.L366
 9695              		.loc 1 2689 0 is_stmt 0 discriminator 1
 9696 39b2 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9697 39b6 532B     		cmp	r3, #83
 9698 39b8 46D1     		bne	.L367
 9699              	.L366:
2690:.\console.c   **** 						{							
2691:.\console.c   **** 							tilt_absolute_sensor.sample_d1 = (float)((int32)QuadDec_TILT_GetCounter() - tilt_absolute_se
 9700              		.loc 1 2691 0 is_stmt 1
 9701 39ba FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 9702 39be 0246     		mov	r2, r0
 9703 39c0 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9704 39c4 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9705 39c8 9B69     		ldr	r3, [r3, #24]
 9706 39ca D31A     		subs	r3, r2, r3
 9707 39cc 1846     		mov	r0, r3
 9708 39ce FFF7FEFF 		bl	__aeabi_i2f
 9709 39d2 0246     		mov	r2, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 268


 9710 39d4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9711 39d8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9712 39dc 1A62     		str	r2, [r3, #32]	@ float
2692:.\console.c   **** 							tilt_absolute_sensor.sample_d2 = (float)((int32)AdcValue[HOME_TILT_ABSV]  - tilt_absolute_se
 9713              		.loc 1 2692 0
 9714 39de 40F20003 		movw	r3, #:lower16:AdcValue
 9715 39e2 C0F20003 		movt	r3, #:upper16:AdcValue
 9716 39e6 DB89     		ldrh	r3, [r3, #14]
 9717 39e8 1AB2     		sxth	r2, r3
 9718 39ea 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9719 39ee C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9720 39f2 DB69     		ldr	r3, [r3, #28]
 9721 39f4 D31A     		subs	r3, r2, r3
 9722 39f6 1846     		mov	r0, r3
 9723 39f8 FFF7FEFF 		bl	__aeabi_i2f
 9724 39fc 0246     		mov	r2, r0
 9725 39fe 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9726 3a02 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9727 3a06 5A62     		str	r2, [r3, #36]	@ float
2693:.\console.c   **** 							tilt_absolute_sensor.ratio_tmp = fabs(tilt_absolute_sensor.sample_d1 / tilt_absolute_sensor.
 9728              		.loc 1 2693 0
 9729 3a08 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9730 3a0c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9731 3a10 1A6A     		ldr	r2, [r3, #32]	@ float
 9732 3a12 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9733 3a16 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9734 3a1a 5B6A     		ldr	r3, [r3, #36]	@ float
 9735 3a1c 1046     		mov	r0, r2
 9736 3a1e 1946     		mov	r1, r3
 9737 3a20 FFF7FEFF 		bl	__aeabi_fdiv
 9738 3a24 0346     		mov	r3, r0
 9739 3a26 23F00042 		bic	r2, r3, #-2147483648
 9740 3a2a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9741 3a2e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9742 3a32 9A62     		str	r2, [r3, #40]	@ float
2694:.\console.c   **** 						
2695:.\console.c   **** 							printf("\r\n*!enc over abs ratio sampled\r\n\r\n");	
 9743              		.loc 1 2695 0
 9744 3a34 40F20000 		movw	r0, #:lower16:.LC468
 9745 3a38 C0F20000 		movt	r0, #:upper16:.LC468
 9746 3a3c FFF7FEFF 		bl	puts
2696:.\console.c   **** 							get_key = 0; //stay in while loop
 9747              		.loc 1 2696 0
 9748 3a40 4FF00003 		mov	r3, #0
 9749 3a44 87F81231 		strb	r3, [r7, #274]
 9750              	.L367:
2697:.\console.c   **** 						}
2698:.\console.c   **** 						
2699:.\console.c   **** //						/******************************************************/
2700:.\console.c   **** //						/*** WDT CLEAR	(32–48msec max)						***/
2701:.\console.c   **** //						/******************************************************/
2702:.\console.c   **** //						CyWdtClear();	
2703:.\console.c   **** 						
2704:.\console.c   **** 						/* internal one-key pot ratio eeprom save */
2705:.\console.c   **** 						if 	((get_key == 'e') || (get_key == 'E'))
 9751              		.loc 1 2705 0
 9752 3a48 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 269


 9753 3a4c 652B     		cmp	r3, #101
 9754 3a4e 03D0     		beq	.L368
 9755              		.loc 1 2705 0 is_stmt 0 discriminator 1
 9756 3a50 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9757 3a54 452B     		cmp	r3, #69
 9758 3a56 19D1     		bne	.L363
 9759              	.L368:
2706:.\console.c   **** 						{	
2707:.\console.c   **** 							/* update global parameters */
2708:.\console.c   **** 							tilt_absolute_sensor.param.step_over_abs_ratio.fnum = tilt_absolute_sensor.ratio_tmp;
 9760              		.loc 1 2708 0 is_stmt 1
 9761 3a58 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9762 3a5c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9763 3a60 9A6A     		ldr	r2, [r3, #40]	@ float
 9764 3a62 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 9765 3a66 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 9766 3a6a 9A63     		str	r2, [r3, #56]	@ float
2709:.\console.c   **** 							
2710:.\console.c   **** 							goto TsavetoEE;
 9767              		.loc 1 2710 0
 9768 3a6c 00BF     		nop
 9769              	.L369:
2711:.\console.c   **** 						}						
2712:.\console.c   **** 					}
2713:.\console.c   **** 				}				
2714:.\console.c   **** 				
2715:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
2716:.\console.c   **** 		
2717:.\console.c   **** 				goto exitpars;	
2718:.\console.c   **** TsavetoEE:
2719:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/	
 9770              		.loc 1 2719 0
 9771 3a6e FFF7FEFF 		bl	isr_CTRL_Start
2720:.\console.c   **** 				
2721:.\console.c   **** 				/* Update EEPROM */
2722:.\console.c   **** 				dummy = WriteAllEEparams();
 9772              		.loc 1 2722 0
 9773 3a72 FFF7FEFF 		bl	WriteAllEEparams
 9774 3a76 0346     		mov	r3, r0
 9775 3a78 87F8D930 		strb	r3, [r7, #217]
2723:.\console.c   **** 										
2724:.\console.c   **** 				printf("\r\n*!Absolute Sensor ratio TILT eeprom saved\r\n\r\n");	
 9776              		.loc 1 2724 0
 9777 3a7c 40F20000 		movw	r0, #:lower16:.LC473
 9778 3a80 C0F20000 		movt	r0, #:upper16:.LC473
 9779 3a84 FFF7FEFF 		bl	puts
2725:.\console.c   **** 				goto exitpars;				
 9780              		.loc 1 2725 0
 9781 3a88 03F062BA 		b	.L131
 9782              	.L363:
2660:.\console.c   **** 					while (get_key == 0)						
 9783              		.loc 1 2660 0 discriminator 1
 9784 3a8c 97F81231 		ldrb	r3, [r7, #274]	@ zero_extendqisi2
 9785 3a90 002B     		cmp	r3, #0
 9786 3a92 3FF433AF 		beq	.L370
 9787              	.L362:
2715:.\console.c   **** 				isr_CTRL_Start();				/* RESTART Control ISR				*/					
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 270


 9788              		.loc 1 2715 0
 9789 3a96 FFF7FEFF 		bl	isr_CTRL_Start
2717:.\console.c   **** 				goto exitpars;	
 9790              		.loc 1 2717 0
 9791 3a9a 03F059BA 		b	.L131
 9792              	.L361:
2726:.\console.c   **** 			}		
2727:.\console.c   **** 			// END SHOW ABS RATIO TILT	
2728:.\console.c   **** 			
2729:.\console.c   **** 			
2730:.\console.c   **** 			// SHOW FAULTS
2731:.\console.c   **** 			if ((strcmp(actual_cmd.parameter, "faults") == 0)	
 9793              		.loc 1 2731 0
 9794 3a9e 3148     		ldr	r0, .L740
 9795 3aa0 40F20001 		movw	r1, #:lower16:.LC474
 9796 3aa4 C0F20001 		movt	r1, #:upper16:.LC474
 9797 3aa8 FFF7FEFF 		bl	strcmp
 9798 3aac 0346     		mov	r3, r0
 9799 3aae 002B     		cmp	r3, #0
 9800 3ab0 09D0     		beq	.L371
2732:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "fault") == 0))	
 9801              		.loc 1 2732 0
 9802 3ab2 2C48     		ldr	r0, .L740
 9803 3ab4 40F20001 		movw	r1, #:lower16:.LC475
 9804 3ab8 C0F20001 		movt	r1, #:upper16:.LC475
 9805 3abc FFF7FEFF 		bl	strcmp
 9806 3ac0 0346     		mov	r3, r0
 9807 3ac2 002B     		cmp	r3, #0
 9808 3ac4 50D1     		bne	.L372
 9809              	.L371:
2733:.\console.c   **** 			{
2734:.\console.c   **** 				if (gobeeFaults.general == GEN_NOFAULTS)
 9810              		.loc 1 2734 0
 9811 3ac6 40F20003 		movw	r3, #:lower16:gobeeFaults
 9812 3aca C0F20003 		movt	r3, #:upper16:gobeeFaults
 9813 3ace 1B88     		ldrh	r3, [r3, #0]
 9814 3ad0 002B     		cmp	r3, #0
 9815 3ad2 07D1     		bne	.L373
2735:.\console.c   **** 				{
2736:.\console.c   **** 					printf(STR_FULT0);   /* NONE: ALL OK! */
 9816              		.loc 1 2736 0
 9817 3ad4 40F20000 		movw	r0, #:lower16:.LC476
 9818 3ad8 C0F20000 		movt	r0, #:upper16:.LC476
 9819 3adc FFF7FEFF 		bl	puts
2737:.\console.c   **** 				}
2738:.\console.c   **** 				else
2739:.\console.c   **** 				{
2740:.\console.c   **** //					if ((sysFaults.general & GEN_FUSE_FAULT) == GEN_FUSE_FAULT)
2741:.\console.c   **** //					{
2742:.\console.c   **** //						printf(STR_FULT1);   /* @FAULT: FUSE OPEN! */
2743:.\console.c   **** //					}
2744:.\console.c   **** //					else
2745:.\console.c   **** //					{
2746:.\console.c   **** //						if ((sysFaults.general & GEN_LOWVCC_FAULT) == GEN_LOWVCC_FAULT)
2747:.\console.c   **** //						{
2748:.\console.c   **** //							printf(STR_FULT2);   /* @FAULT: LOW VCC! (VCC<11V) */
2749:.\console.c   **** //						}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 271


2750:.\console.c   **** //					}
2751:.\console.c   **** 					
2752:.\console.c   **** 					if ((gobeeFaults.general & GEN_PAN_FAULT) == GEN_PAN_FAULT)
2753:.\console.c   **** 					{
2754:.\console.c   **** 						printf(STR_FULTP);   		/* @FAULT#01: GENERAL PAN FAULT */
2755:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
2756:.\console.c   **** 						{
2757:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
2758:.\console.c   **** 						}							
2759:.\console.c   **** 					}		
2760:.\console.c   **** 					
2761:.\console.c   **** 					if ((gobeeFaults.general & GEN_TILT_FAULT) == GEN_TILT_FAULT)
2762:.\console.c   **** 					{
2763:.\console.c   **** 						printf(STR_FULTT);   		/* @FAULT#02: GENERAL TILT FAULT */
2764:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
2765:.\console.c   **** 						{
2766:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
2767:.\console.c   **** 						}							
2768:.\console.c   **** 					}					
2769:.\console.c   **** 				}
2770:.\console.c   **** 				goto exitpars;
 9820              		.loc 1 2770 0
 9821 3ae0 03F02DBA 		b	.L705
 9822              	.L373:
2752:.\console.c   **** 					if ((gobeeFaults.general & GEN_PAN_FAULT) == GEN_PAN_FAULT)
 9823              		.loc 1 2752 0
 9824 3ae4 40F20003 		movw	r3, #:lower16:gobeeFaults
 9825 3ae8 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9826 3aec 1B88     		ldrh	r3, [r3, #0]
 9827 3aee 03F00803 		and	r3, r3, #8
 9828 3af2 002B     		cmp	r3, #0
 9829 3af4 14D0     		beq	.L375
2754:.\console.c   **** 						printf(STR_FULTP);   		/* @FAULT#01: GENERAL PAN FAULT */
 9830              		.loc 1 2754 0
 9831 3af6 40F20000 		movw	r0, #:lower16:.LC477
 9832 3afa C0F20000 		movt	r0, #:upper16:.LC477
 9833 3afe FFF7FEFF 		bl	puts
2755:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
 9834              		.loc 1 2755 0
 9835 3b02 40F20003 		movw	r3, #:lower16:gobeeFaults
 9836 3b06 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9837 3b0a 1B88     		ldrh	r3, [r3, #0]
 9838 3b0c 03F00203 		and	r3, r3, #2
 9839 3b10 002B     		cmp	r3, #0
 9840 3b12 05D0     		beq	.L375
2757:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
 9841              		.loc 1 2757 0
 9842 3b14 40F20000 		movw	r0, #:lower16:.LC478
 9843 3b18 C0F20000 		movt	r0, #:upper16:.LC478
 9844 3b1c FFF7FEFF 		bl	puts
 9845              	.L375:
2761:.\console.c   **** 					if ((gobeeFaults.general & GEN_TILT_FAULT) == GEN_TILT_FAULT)
 9846              		.loc 1 2761 0
 9847 3b20 40F20003 		movw	r3, #:lower16:gobeeFaults
 9848 3b24 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9849 3b28 1B88     		ldrh	r3, [r3, #0]
 9850 3b2a 03F01003 		and	r3, r3, #16
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 272


 9851 3b2e 002B     		cmp	r3, #0
 9852 3b30 03F00582 		beq	.L705
2763:.\console.c   **** 						printf(STR_FULTT);   		/* @FAULT#02: GENERAL TILT FAULT */
 9853              		.loc 1 2763 0
 9854 3b34 40F20000 		movw	r0, #:lower16:.LC479
 9855 3b38 C0F20000 		movt	r0, #:upper16:.LC479
 9856 3b3c FFF7FEFF 		bl	puts
2764:.\console.c   **** 						if ((gobeeFaults.general & GEN_FBKENC_FAULT) == GEN_FBKENC_FAULT)
 9857              		.loc 1 2764 0
 9858 3b40 40F20003 		movw	r3, #:lower16:gobeeFaults
 9859 3b44 C0F20003 		movt	r3, #:upper16:gobeeFaults
 9860 3b48 1B88     		ldrh	r3, [r3, #0]
 9861 3b4a 03F00203 		and	r3, r3, #2
 9862 3b4e 002B     		cmp	r3, #0
 9863 3b50 03F0F581 		beq	.L705
2766:.\console.c   **** 							printf(STR_FULTI);	 	/* @FAULT#10: FEEDBACK ENCODER INVALID TRANSITIONS!*/
 9864              		.loc 1 2766 0
 9865 3b54 40F20000 		movw	r0, #:lower16:.LC478
 9866 3b58 C0F20000 		movt	r0, #:upper16:.LC478
 9867 3b5c FFF7FEFF 		bl	puts
 9868              		.loc 1 2770 0
 9869 3b60 03F0EDB9 		b	.L705
 9870              	.L741:
 9871              		.align	2
 9872              	.L740:
 9873 3b64 0F000000 		.word	actual_cmd+15
 9874              	.L372:
2771:.\console.c   **** 			}
2772:.\console.c   **** 			
2773:.\console.c   **** 			
2774:.\console.c   **** 			// SHOW PARAMS
2775:.\console.c   **** 			if (((strcmp(actual_cmd.parameter, "params") == 0))
 9875              		.loc 1 2775 0
 9876 3b68 0A48     		ldr	r0, .L742
 9877 3b6a 40F20001 		movw	r1, #:lower16:.LC480
 9878 3b6e C0F20001 		movt	r1, #:upper16:.LC480
 9879 3b72 FFF7FEFF 		bl	strcmp
 9880 3b76 0346     		mov	r3, r0
 9881 3b78 002B     		cmp	r3, #0
 9882 3b7a 0DD0     		beq	.L376
2776:.\console.c   **** 			|| (strcmp(actual_cmd.parameter, "p") == 0))
 9883              		.loc 1 2776 0
 9884 3b7c 0548     		ldr	r0, .L742
 9885 3b7e 40F20001 		movw	r1, #:lower16:.LC481
 9886 3b82 C0F20001 		movt	r1, #:upper16:.LC481
 9887 3b86 FFF7FEFF 		bl	strcmp
 9888 3b8a 0346     		mov	r3, r0
 9889 3b8c 002B     		cmp	r3, #0
 9890 3b8e 43F0D881 		bne	.L706
 9891 3b92 01E0     		b	.L743
 9892              	.L744:
 9893              		.align	2
 9894              	.L742:
 9895 3b94 0F000000 		.word	actual_cmd+15
 9896              	.L743:
 9897              	.L376:
2777:.\console.c   **** 			{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 273


2778:.\console.c   **** 				printf("GoBee DIRECTOR\r\n");
 9898              		.loc 1 2778 0
 9899 3b98 40F20000 		movw	r0, #:lower16:.LC482
 9900 3b9c C0F20000 		movt	r0, #:upper16:.LC482
 9901 3ba0 FFF7FEFF 		bl	puts
2779:.\console.c   **** 				printf("==============\r\n");
 9902              		.loc 1 2779 0
 9903 3ba4 40F20000 		movw	r0, #:lower16:.LC483
 9904 3ba8 C0F20000 		movt	r0, #:upper16:.LC483
 9905 3bac FFF7FEFF 		bl	puts
2780:.\console.c   **** 				printf("Gobee Mode                   =%2u: ", gobee_param.mode);
 9906              		.loc 1 2780 0
 9907 3bb0 40F20003 		movw	r3, #:lower16:gobee_param
 9908 3bb4 C0F20003 		movt	r3, #:upper16:gobee_param
 9909 3bb8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9910 3bba 40F20000 		movw	r0, #:lower16:.LC484
 9911 3bbe C0F20000 		movt	r0, #:upper16:.LC484
 9912 3bc2 1946     		mov	r1, r3
 9913 3bc4 FFF7FEFF 		bl	printf
2781:.\console.c   **** 				ShowParamsMode();				
 9914              		.loc 1 2781 0
 9915 3bc8 FFF7FEFF 		bl	ShowParamsMode
2782:.\console.c   **** 				printf("Gobee Selected Director      =%2u: ", gobee_param.director);
 9916              		.loc 1 2782 0
 9917 3bcc 40F20003 		movw	r3, #:lower16:gobee_param
 9918 3bd0 C0F20003 		movt	r3, #:upper16:gobee_param
 9919 3bd4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 9920 3bd6 40F20000 		movw	r0, #:lower16:.LC485
 9921 3bda C0F20000 		movt	r0, #:upper16:.LC485
 9922 3bde 1946     		mov	r1, r3
 9923 3be0 FFF7FEFF 		bl	printf
2783:.\console.c   **** 				ShowParamsDirector();			
 9924              		.loc 1 2783 0
 9925 3be4 FFF7FEFF 		bl	ShowParamsDirector
2784:.\console.c   **** 				printf("\r\n");		
 9926              		.loc 1 2784 0
 9927 3be8 40F20000 		movw	r0, #:lower16:.LC42
 9928 3bec C0F20000 		movt	r0, #:upper16:.LC42
 9929 3bf0 FFF7FEFF 		bl	puts
2785:.\console.c   **** 				printf("\r\n");					
 9930              		.loc 1 2785 0
 9931 3bf4 40F20000 		movw	r0, #:lower16:.LC42
 9932 3bf8 C0F20000 		movt	r0, #:upper16:.LC42
 9933 3bfc FFF7FEFF 		bl	puts
2786:.\console.c   **** 				
2787:.\console.c   **** 				printf("GoBee PARAMETER LIST\r\n");
 9934              		.loc 1 2787 0
 9935 3c00 40F20000 		movw	r0, #:lower16:.LC486
 9936 3c04 C0F20000 		movt	r0, #:upper16:.LC486
 9937 3c08 FFF7FEFF 		bl	puts
2788:.\console.c   **** 				printf("====================\r\n");
 9938              		.loc 1 2788 0
 9939 3c0c 40F20000 		movw	r0, #:lower16:.LC487
 9940 3c10 C0F20000 		movt	r0, #:upper16:.LC487
 9941 3c14 FFF7FEFF 		bl	puts
2789:.\console.c   **** 					
2790:.\console.c   **** 				//axis main params
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 274


2791:.\console.c   **** 				printf("Pan  Axis Resolution         = ");
 9942              		.loc 1 2791 0
 9943 3c18 40F20000 		movw	r0, #:lower16:.LC488
 9944 3c1c C0F20000 		movt	r0, #:upper16:.LC488
 9945 3c20 FFF7FEFF 		bl	printf
2792:.\console.c   **** 				printf("%8.1f [step/2PI]",(float)(pan_axis.param.resolution.fnum));
 9946              		.loc 1 2792 0
 9947 3c24 40F20003 		movw	r3, #:lower16:pan_axis
 9948 3c28 C0F20003 		movt	r3, #:upper16:pan_axis
 9949 3c2c DB68     		ldr	r3, [r3, #12]	@ float
 9950 3c2e 1846     		mov	r0, r3
 9951 3c30 FFF7FEFF 		bl	__aeabi_f2d
 9952 3c34 0246     		mov	r2, r0
 9953 3c36 0B46     		mov	r3, r1
 9954 3c38 40F20000 		movw	r0, #:lower16:.LC489
 9955 3c3c C0F20000 		movt	r0, #:upper16:.LC489
 9956 3c40 FFF7FEFF 		bl	printf
2793:.\console.c   **** 				printf("\r\n");
 9957              		.loc 1 2793 0
 9958 3c44 40F20000 		movw	r0, #:lower16:.LC42
 9959 3c48 C0F20000 		movt	r0, #:upper16:.LC42
 9960 3c4c FFF7FEFF 		bl	puts
2794:.\console.c   **** 				
2795:.\console.c   **** 				printf("Tilt Axis Resolution         = ");
 9961              		.loc 1 2795 0
 9962 3c50 40F20000 		movw	r0, #:lower16:.LC490
 9963 3c54 C0F20000 		movt	r0, #:upper16:.LC490
 9964 3c58 FFF7FEFF 		bl	printf
2796:.\console.c   **** 				printf("%8.1f [step/2PI]",(float)(tilt_axis.param.resolution.fnum));
 9965              		.loc 1 2796 0
 9966 3c5c 40F20003 		movw	r3, #:lower16:tilt_axis
 9967 3c60 C0F20003 		movt	r3, #:upper16:tilt_axis
 9968 3c64 DB68     		ldr	r3, [r3, #12]	@ float
 9969 3c66 1846     		mov	r0, r3
 9970 3c68 FFF7FEFF 		bl	__aeabi_f2d
 9971 3c6c 0246     		mov	r2, r0
 9972 3c6e 0B46     		mov	r3, r1
 9973 3c70 40F20000 		movw	r0, #:lower16:.LC489
 9974 3c74 C0F20000 		movt	r0, #:upper16:.LC489
 9975 3c78 FFF7FEFF 		bl	printf
2797:.\console.c   **** 				printf("\r\n");	
 9976              		.loc 1 2797 0
 9977 3c7c 40F20000 		movw	r0, #:lower16:.LC42
 9978 3c80 C0F20000 		movt	r0, #:upper16:.LC42
 9979 3c84 FFF7FEFF 		bl	puts
2798:.\console.c   **** 				printf("\r\n");
 9980              		.loc 1 2798 0
 9981 3c88 40F20000 		movw	r0, #:lower16:.LC42
 9982 3c8c C0F20000 		movt	r0, #:upper16:.LC42
 9983 3c90 FFF7FEFF 		bl	puts
2799:.\console.c   **** 				
2800:.\console.c   **** 				
2801:.\console.c   **** 				printf("Motor Control\r\n");
 9984              		.loc 1 2801 0
 9985 3c94 40F20000 		movw	r0, #:lower16:.LC491
 9986 3c98 C0F20000 		movt	r0, #:upper16:.LC491
 9987 3c9c FFF7FEFF 		bl	puts
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 275


2802:.\console.c   **** 				printf("=============\r\n");		
 9988              		.loc 1 2802 0
 9989 3ca0 40F20000 		movw	r0, #:lower16:.LC492
 9990 3ca4 C0F20000 		movt	r0, #:upper16:.LC492
 9991 3ca8 FFF7FEFF 		bl	puts
2803:.\console.c   **** 				
2804:.\console.c   **** 				//pan motor main params
2805:.\console.c   **** 				printf("Pan  Motor Polarity          = ");
 9992              		.loc 1 2805 0
 9993 3cac 40F20000 		movw	r0, #:lower16:.LC493
 9994 3cb0 C0F20000 		movt	r0, #:upper16:.LC493
 9995 3cb4 FFF7FEFF 		bl	printf
2806:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(pan_axis.param.polarity));
 9996              		.loc 1 2806 0
 9997 3cb8 40F20003 		movw	r3, #:lower16:pan_axis
 9998 3cbc C0F20003 		movt	r3, #:upper16:pan_axis
 9999 3cc0 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 10000 3cc2 40F20000 		movw	r0, #:lower16:.LC494
 10001 3cc6 C0F20000 		movt	r0, #:upper16:.LC494
 10002 3cca 1946     		mov	r1, r3
 10003 3ccc FFF7FEFF 		bl	printf
2807:.\console.c   **** 				printf("\r\n");
 10004              		.loc 1 2807 0
 10005 3cd0 40F20000 		movw	r0, #:lower16:.LC42
 10006 3cd4 C0F20000 		movt	r0, #:upper16:.LC42
 10007 3cd8 FFF7FEFF 		bl	puts
2808:.\console.c   **** 
2809:.\console.c   **** 				printf("Pan  Motor Kp                = ");
 10008              		.loc 1 2809 0
 10009 3cdc 40F20000 		movw	r0, #:lower16:.LC495
 10010 3ce0 C0F20000 		movt	r0, #:upper16:.LC495
 10011 3ce4 FFF7FEFF 		bl	printf
2810:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kpf.fnum));
 10012              		.loc 1 2810 0
 10013 3ce8 40F20003 		movw	r3, #:lower16:pan_axis
 10014 3cec C0F20003 		movt	r3, #:upper16:pan_axis
 10015 3cf0 5B69     		ldr	r3, [r3, #20]	@ float
 10016 3cf2 1846     		mov	r0, r3
 10017 3cf4 FFF7FEFF 		bl	__aeabi_f2d
 10018 3cf8 0246     		mov	r2, r0
 10019 3cfa 0B46     		mov	r3, r1
 10020 3cfc 40F20000 		movw	r0, #:lower16:.LC496
 10021 3d00 C0F20000 		movt	r0, #:upper16:.LC496
 10022 3d04 FFF7FEFF 		bl	printf
2811:.\console.c   **** 				printf("\r\n");
 10023              		.loc 1 2811 0
 10024 3d08 40F20000 		movw	r0, #:lower16:.LC42
 10025 3d0c C0F20000 		movt	r0, #:upper16:.LC42
 10026 3d10 FFF7FEFF 		bl	puts
2812:.\console.c   **** 
2813:.\console.c   **** 				printf("Pan  Motor Kd                = ");
 10027              		.loc 1 2813 0
 10028 3d14 40F20000 		movw	r0, #:lower16:.LC497
 10029 3d18 C0F20000 		movt	r0, #:upper16:.LC497
 10030 3d1c FFF7FEFF 		bl	printf
2814:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kdf.fnum));
 10031              		.loc 1 2814 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 276


 10032 3d20 40F20003 		movw	r3, #:lower16:pan_axis
 10033 3d24 C0F20003 		movt	r3, #:upper16:pan_axis
 10034 3d28 9B69     		ldr	r3, [r3, #24]	@ float
 10035 3d2a 1846     		mov	r0, r3
 10036 3d2c FFF7FEFF 		bl	__aeabi_f2d
 10037 3d30 0246     		mov	r2, r0
 10038 3d32 0B46     		mov	r3, r1
 10039 3d34 40F20000 		movw	r0, #:lower16:.LC496
 10040 3d38 C0F20000 		movt	r0, #:upper16:.LC496
 10041 3d3c FFF7FEFF 		bl	printf
2815:.\console.c   **** 				printf("\r\n");
 10042              		.loc 1 2815 0
 10043 3d40 40F20000 		movw	r0, #:lower16:.LC42
 10044 3d44 C0F20000 		movt	r0, #:upper16:.LC42
 10045 3d48 FFF7FEFF 		bl	puts
2816:.\console.c   **** 
2817:.\console.c   **** 				printf("Pan  Motor Ki                = ");
 10046              		.loc 1 2817 0
 10047 3d4c 40F20000 		movw	r0, #:lower16:.LC498
 10048 3d50 C0F20000 		movt	r0, #:upper16:.LC498
 10049 3d54 FFF7FEFF 		bl	printf
2818:.\console.c   **** 				ShowParamsKiPan();
 10050              		.loc 1 2818 0
 10051 3d58 FFF7FEFF 		bl	ShowParamsKiPan
2819:.\console.c   **** 				printf("\r\n");
 10052              		.loc 1 2819 0
 10053 3d5c 40F20000 		movw	r0, #:lower16:.LC42
 10054 3d60 C0F20000 		movt	r0, #:upper16:.LC42
 10055 3d64 FFF7FEFF 		bl	puts
2820:.\console.c   **** 				
2821:.\console.c   **** 				printf("Pan  Motor Ksi               = ");
 10056              		.loc 1 2821 0
 10057 3d68 40F20000 		movw	r0, #:lower16:.LC499
 10058 3d6c C0F20000 		movt	r0, #:upper16:.LC499
 10059 3d70 FFF7FEFF 		bl	printf
2822:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(pan_axis.param.Ksif.fnum),
 10060              		.loc 1 2822 0
 10061 3d74 40F20003 		movw	r3, #:lower16:pan_axis
 10062 3d78 C0F20003 		movt	r3, #:upper16:pan_axis
 10063 3d7c 1B6A     		ldr	r3, [r3, #32]	@ float
 10064 3d7e 1846     		mov	r0, r3
 10065 3d80 FFF7FEFF 		bl	__aeabi_f2d
 10066 3d84 0446     		mov	r4, r0
 10067 3d86 0D46     		mov	r5, r1
2823:.\console.c   **** 										   (float)(pan_axis.param.Ksif.fnum * pan_axis.param.Kif.fnum));
 10068              		.loc 1 2823 0
 10069 3d88 40F20003 		movw	r3, #:lower16:pan_axis
 10070 3d8c C0F20003 		movt	r3, #:upper16:pan_axis
 10071 3d90 1A6A     		ldr	r2, [r3, #32]	@ float
 10072 3d92 40F20003 		movw	r3, #:lower16:pan_axis
 10073 3d96 C0F20003 		movt	r3, #:upper16:pan_axis
 10074 3d9a DB69     		ldr	r3, [r3, #28]	@ float
 10075 3d9c 1046     		mov	r0, r2
 10076 3d9e 1946     		mov	r1, r3
 10077 3da0 FFF7FEFF 		bl	__aeabi_fmul
 10078 3da4 0346     		mov	r3, r0
2822:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(pan_axis.param.Ksif.fnum),
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 277


 10079              		.loc 1 2822 0
 10080 3da6 1846     		mov	r0, r3
 10081 3da8 FFF7FEFF 		bl	__aeabi_f2d
 10082 3dac 0246     		mov	r2, r0
 10083 3dae 0B46     		mov	r3, r1
 10084 3db0 CDE90023 		strd	r2, [sp]
 10085 3db4 40F20000 		movw	r0, #:lower16:.LC500
 10086 3db8 C0F20000 		movt	r0, #:upper16:.LC500
 10087 3dbc 2246     		mov	r2, r4
 10088 3dbe 2B46     		mov	r3, r5
 10089 3dc0 FFF7FEFF 		bl	printf
2824:.\console.c   **** 				printf("\r\n");	
 10090              		.loc 1 2824 0
 10091 3dc4 40F20000 		movw	r0, #:lower16:.LC42
 10092 3dc8 C0F20000 		movt	r0, #:upper16:.LC42
 10093 3dcc FFF7FEFF 		bl	puts
2825:.\console.c   **** 				
2826:.\console.c   **** 				printf("Pan Limit Control            = ");
 10094              		.loc 1 2826 0
 10095 3dd0 40F20000 		movw	r0, #:lower16:.LC501
 10096 3dd4 C0F20000 		movt	r0, #:upper16:.LC501
 10097 3dd8 FFF7FEFF 		bl	printf
2827:.\console.c   **** 				printf("%1u (0=disabled, 1=enabled)",(int16)(pan_axis.param.limit_control));
 10098              		.loc 1 2827 0
 10099 3ddc 40F20003 		movw	r3, #:lower16:pan_axis
 10100 3de0 C0F20003 		movt	r3, #:upper16:pan_axis
 10101 3de4 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 10102 3de8 40F20000 		movw	r0, #:lower16:.LC502
 10103 3dec C0F20000 		movt	r0, #:upper16:.LC502
 10104 3df0 1946     		mov	r1, r3
 10105 3df2 FFF7FEFF 		bl	printf
2828:.\console.c   **** 				printf("\r\n");				
 10106              		.loc 1 2828 0
 10107 3df6 40F20000 		movw	r0, #:lower16:.LC42
 10108 3dfa C0F20000 		movt	r0, #:upper16:.LC42
 10109 3dfe FFF7FEFF 		bl	puts
2829:.\console.c   **** 				
2830:.\console.c   **** 	
2831:.\console.c   **** 				//tilt motor main params	
2832:.\console.c   **** 				printf("Tilt Motor Polarity          = ");
 10110              		.loc 1 2832 0
 10111 3e02 40F20000 		movw	r0, #:lower16:.LC503
 10112 3e06 C0F20000 		movt	r0, #:upper16:.LC503
 10113 3e0a FFF7FEFF 		bl	printf
2833:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(tilt_axis.param.polarity));
 10114              		.loc 1 2833 0
 10115 3e0e 40F20003 		movw	r3, #:lower16:tilt_axis
 10116 3e12 C0F20003 		movt	r3, #:upper16:tilt_axis
 10117 3e16 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 10118 3e18 40F20000 		movw	r0, #:lower16:.LC494
 10119 3e1c C0F20000 		movt	r0, #:upper16:.LC494
 10120 3e20 1946     		mov	r1, r3
 10121 3e22 FFF7FEFF 		bl	printf
2834:.\console.c   **** 				printf("\r\n");
 10122              		.loc 1 2834 0
 10123 3e26 40F20000 		movw	r0, #:lower16:.LC42
 10124 3e2a C0F20000 		movt	r0, #:upper16:.LC42
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 278


 10125 3e2e FFF7FEFF 		bl	puts
2835:.\console.c   **** 
2836:.\console.c   **** 				printf("Tilt Motor Kp                = ");
 10126              		.loc 1 2836 0
 10127 3e32 40F20000 		movw	r0, #:lower16:.LC504
 10128 3e36 C0F20000 		movt	r0, #:upper16:.LC504
 10129 3e3a FFF7FEFF 		bl	printf
2837:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kpf.fnum));
 10130              		.loc 1 2837 0
 10131 3e3e 40F20003 		movw	r3, #:lower16:tilt_axis
 10132 3e42 C0F20003 		movt	r3, #:upper16:tilt_axis
 10133 3e46 5B69     		ldr	r3, [r3, #20]	@ float
 10134 3e48 1846     		mov	r0, r3
 10135 3e4a FFF7FEFF 		bl	__aeabi_f2d
 10136 3e4e 0246     		mov	r2, r0
 10137 3e50 0B46     		mov	r3, r1
 10138 3e52 40F20000 		movw	r0, #:lower16:.LC496
 10139 3e56 C0F20000 		movt	r0, #:upper16:.LC496
 10140 3e5a FFF7FEFF 		bl	printf
2838:.\console.c   **** 				printf("\r\n");
 10141              		.loc 1 2838 0
 10142 3e5e 40F20000 		movw	r0, #:lower16:.LC42
 10143 3e62 C0F20000 		movt	r0, #:upper16:.LC42
 10144 3e66 FFF7FEFF 		bl	puts
2839:.\console.c   **** 
2840:.\console.c   **** 				printf("Tilt Motor Kd                = ");
 10145              		.loc 1 2840 0
 10146 3e6a 40F20000 		movw	r0, #:lower16:.LC505
 10147 3e6e C0F20000 		movt	r0, #:upper16:.LC505
 10148 3e72 FFF7FEFF 		bl	printf
2841:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kdf.fnum));
 10149              		.loc 1 2841 0
 10150 3e76 40F20003 		movw	r3, #:lower16:tilt_axis
 10151 3e7a C0F20003 		movt	r3, #:upper16:tilt_axis
 10152 3e7e 9B69     		ldr	r3, [r3, #24]	@ float
 10153 3e80 1846     		mov	r0, r3
 10154 3e82 FFF7FEFF 		bl	__aeabi_f2d
 10155 3e86 0246     		mov	r2, r0
 10156 3e88 0B46     		mov	r3, r1
 10157 3e8a 40F20000 		movw	r0, #:lower16:.LC496
 10158 3e8e C0F20000 		movt	r0, #:upper16:.LC496
 10159 3e92 FFF7FEFF 		bl	printf
2842:.\console.c   **** 				printf("\r\n");
 10160              		.loc 1 2842 0
 10161 3e96 40F20000 		movw	r0, #:lower16:.LC42
 10162 3e9a C0F20000 		movt	r0, #:upper16:.LC42
 10163 3e9e FFF7FEFF 		bl	puts
2843:.\console.c   **** 
2844:.\console.c   **** 				printf("Tilt Motor Ki                = ");
 10164              		.loc 1 2844 0
 10165 3ea2 40F20000 		movw	r0, #:lower16:.LC506
 10166 3ea6 C0F20000 		movt	r0, #:upper16:.LC506
 10167 3eaa FFF7FEFF 		bl	printf
2845:.\console.c   **** 				ShowParamsKiTilt();
 10168              		.loc 1 2845 0
 10169 3eae FFF7FEFF 		bl	ShowParamsKiTilt
2846:.\console.c   **** 				printf("\r\n");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 279


 10170              		.loc 1 2846 0
 10171 3eb2 40F20000 		movw	r0, #:lower16:.LC42
 10172 3eb6 C0F20000 		movt	r0, #:upper16:.LC42
 10173 3eba FFF7FEFF 		bl	puts
2847:.\console.c   **** 				
2848:.\console.c   **** 				printf("Tilt Motor Ksi               = ");
 10174              		.loc 1 2848 0
 10175 3ebe 40F20000 		movw	r0, #:lower16:.LC507
 10176 3ec2 C0F20000 		movt	r0, #:upper16:.LC507
 10177 3ec6 FFF7FEFF 		bl	printf
2849:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(tilt_axis.param.Ksif.fnum),
 10178              		.loc 1 2849 0
 10179 3eca 40F20003 		movw	r3, #:lower16:tilt_axis
 10180 3ece C0F20003 		movt	r3, #:upper16:tilt_axis
 10181 3ed2 1B6A     		ldr	r3, [r3, #32]	@ float
 10182 3ed4 1846     		mov	r0, r3
 10183 3ed6 FFF7FEFF 		bl	__aeabi_f2d
 10184 3eda 0446     		mov	r4, r0
 10185 3edc 0D46     		mov	r5, r1
2850:.\console.c   **** 										   (float)(tilt_axis.param.Ksif.fnum * tilt_axis.param.Kif.fnum));
 10186              		.loc 1 2850 0
 10187 3ede 40F20003 		movw	r3, #:lower16:tilt_axis
 10188 3ee2 C0F20003 		movt	r3, #:upper16:tilt_axis
 10189 3ee6 1A6A     		ldr	r2, [r3, #32]	@ float
 10190 3ee8 40F20003 		movw	r3, #:lower16:tilt_axis
 10191 3eec C0F20003 		movt	r3, #:upper16:tilt_axis
 10192 3ef0 DB69     		ldr	r3, [r3, #28]	@ float
 10193 3ef2 1046     		mov	r0, r2
 10194 3ef4 1946     		mov	r1, r3
 10195 3ef6 FFF7FEFF 		bl	__aeabi_fmul
 10196 3efa 0346     		mov	r3, r0
2849:.\console.c   **** 				printf("%8f (max AZI=%8f)",(float)(tilt_axis.param.Ksif.fnum),
 10197              		.loc 1 2849 0
 10198 3efc 1846     		mov	r0, r3
 10199 3efe FFF7FEFF 		bl	__aeabi_f2d
 10200 3f02 0246     		mov	r2, r0
 10201 3f04 0B46     		mov	r3, r1
 10202 3f06 CDE90023 		strd	r2, [sp]
 10203 3f0a 40F20000 		movw	r0, #:lower16:.LC500
 10204 3f0e C0F20000 		movt	r0, #:upper16:.LC500
 10205 3f12 2246     		mov	r2, r4
 10206 3f14 2B46     		mov	r3, r5
 10207 3f16 FFF7FEFF 		bl	printf
2851:.\console.c   **** 				printf("\r\n");		
 10208              		.loc 1 2851 0
 10209 3f1a 40F20000 		movw	r0, #:lower16:.LC42
 10210 3f1e C0F20000 		movt	r0, #:upper16:.LC42
 10211 3f22 FFF7FEFF 		bl	puts
2852:.\console.c   **** 				
2853:.\console.c   **** 				printf("Tilt Limit Control           = ");
 10212              		.loc 1 2853 0
 10213 3f26 40F20000 		movw	r0, #:lower16:.LC508
 10214 3f2a C0F20000 		movt	r0, #:upper16:.LC508
 10215 3f2e FFF7FEFF 		bl	printf
2854:.\console.c   **** 				printf("%1u (0=disabled, 1=enabled)",(int16)(tilt_axis.param.limit_control));
 10216              		.loc 1 2854 0
 10217 3f32 40F20003 		movw	r3, #:lower16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 280


 10218 3f36 C0F20003 		movt	r3, #:upper16:tilt_axis
 10219 3f3a 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 10220 3f3e 40F20000 		movw	r0, #:lower16:.LC502
 10221 3f42 C0F20000 		movt	r0, #:upper16:.LC502
 10222 3f46 1946     		mov	r1, r3
 10223 3f48 FFF7FEFF 		bl	printf
2855:.\console.c   **** 				printf("\r\n");						
 10224              		.loc 1 2855 0
 10225 3f4c 40F20000 		movw	r0, #:lower16:.LC42
 10226 3f50 C0F20000 		movt	r0, #:upper16:.LC42
 10227 3f54 FFF7FEFF 		bl	puts
2856:.\console.c   **** 				printf("\r\n");					
 10228              		.loc 1 2856 0
 10229 3f58 40F20000 		movw	r0, #:lower16:.LC42
 10230 3f5c C0F20000 		movt	r0, #:upper16:.LC42
 10231 3f60 FFF7FEFF 		bl	puts
2857:.\console.c   **** 				
2858:.\console.c   **** 				printf("Absolute Sensors\r\n");
 10232              		.loc 1 2858 0
 10233 3f64 40F20000 		movw	r0, #:lower16:.LC509
 10234 3f68 C0F20000 		movt	r0, #:upper16:.LC509
 10235 3f6c FFF7FEFF 		bl	puts
2859:.\console.c   **** 				printf("================\r\n");			
 10236              		.loc 1 2859 0
 10237 3f70 40F20000 		movw	r0, #:lower16:.LC510
 10238 3f74 C0F20000 		movt	r0, #:upper16:.LC510
 10239 3f78 FFF7FEFF 		bl	puts
2860:.\console.c   **** 
2861:.\console.c   **** 				//pan absolute sensor main params
2862:.\console.c   **** 				printf("Pan  Absolute sensor HOME    = ");
 10240              		.loc 1 2862 0
 10241 3f7c 40F20000 		movw	r0, #:lower16:.LC511
 10242 3f80 C0F20000 		movt	r0, #:upper16:.LC511
 10243 3f84 FFF7FEFF 		bl	printf
2863:.\console.c   **** 				printf("%6i [ADC raw]    (invertion=%1d)",(int16)(pan_absolute_sensor.param.raw_home), (int16)p
 10244              		.loc 1 2863 0
 10245 3f88 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10246 3f8c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10247 3f90 DB8D     		ldrh	r3, [r3, #46]
 10248 3f92 1AB2     		sxth	r2, r3
 10249 3f94 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10250 3f98 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10251 3f9c 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 10252 3fa0 40F20000 		movw	r0, #:lower16:.LC512
 10253 3fa4 C0F20000 		movt	r0, #:upper16:.LC512
 10254 3fa8 1146     		mov	r1, r2
 10255 3faa 1A46     		mov	r2, r3
 10256 3fac FFF7FEFF 		bl	printf
2864:.\console.c   **** 				printf("\r\n");
 10257              		.loc 1 2864 0
 10258 3fb0 40F20000 		movw	r0, #:lower16:.LC42
 10259 3fb4 C0F20000 		movt	r0, #:upper16:.LC42
 10260 3fb8 FFF7FEFF 		bl	puts
2865:.\console.c   **** 				
2866:.\console.c   **** 				printf("Pan  Absolute sensor LimitMAX= ");
 10261              		.loc 1 2866 0
 10262 3fbc 40F20000 		movw	r0, #:lower16:.LC513
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 281


 10263 3fc0 C0F20000 		movt	r0, #:upper16:.LC513
 10264 3fc4 FFF7FEFF 		bl	printf
2867:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_max));
 10265              		.loc 1 2867 0
 10266 3fc8 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10267 3fcc C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10268 3fd0 1B8E     		ldrh	r3, [r3, #48]
 10269 3fd2 1BB2     		sxth	r3, r3
 10270 3fd4 40F20000 		movw	r0, #:lower16:.LC514
 10271 3fd8 C0F20000 		movt	r0, #:upper16:.LC514
 10272 3fdc 1946     		mov	r1, r3
 10273 3fde FFF7FEFF 		bl	printf
2868:.\console.c   **** 				printf("\r\n");
 10274              		.loc 1 2868 0
 10275 3fe2 40F20000 		movw	r0, #:lower16:.LC42
 10276 3fe6 C0F20000 		movt	r0, #:upper16:.LC42
 10277 3fea FFF7FEFF 		bl	puts
2869:.\console.c   **** 				
2870:.\console.c   **** 				printf("Pan  Absolute sensor Limitmin= ");
 10278              		.loc 1 2870 0
 10279 3fee 40F20000 		movw	r0, #:lower16:.LC515
 10280 3ff2 C0F20000 		movt	r0, #:upper16:.LC515
 10281 3ff6 FFF7FEFF 		bl	printf
2871:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_min));
 10282              		.loc 1 2871 0
 10283 3ffa 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10284 3ffe C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10285 4002 5B8E     		ldrh	r3, [r3, #50]
 10286 4004 1BB2     		sxth	r3, r3
 10287 4006 40F20000 		movw	r0, #:lower16:.LC514
 10288 400a C0F20000 		movt	r0, #:upper16:.LC514
 10289 400e 1946     		mov	r1, r3
 10290 4010 FFF7FEFF 		bl	printf
2872:.\console.c   **** 				printf("\r\n");				
 10291              		.loc 1 2872 0
 10292 4014 40F20000 		movw	r0, #:lower16:.LC42
 10293 4018 C0F20000 		movt	r0, #:upper16:.LC42
 10294 401c FFF7FEFF 		bl	puts
2873:.\console.c   **** 
2874:.\console.c   **** 				printf("Pan  Absolute sensor Hyster. = ");
 10295              		.loc 1 2874 0
 10296 4020 40F20000 		movw	r0, #:lower16:.LC516
 10297 4024 C0F20000 		movt	r0, #:upper16:.LC516
 10298 4028 FFF7FEFF 		bl	printf
2875:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(pan_absolute_sensor.param.raw_limit_hysteresis));
 10299              		.loc 1 2875 0
 10300 402c 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10301 4030 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10302 4034 9B8E     		ldrh	r3, [r3, #52]
 10303 4036 1BB2     		sxth	r3, r3
 10304 4038 40F20000 		movw	r0, #:lower16:.LC514
 10305 403c C0F20000 		movt	r0, #:upper16:.LC514
 10306 4040 1946     		mov	r1, r3
 10307 4042 FFF7FEFF 		bl	printf
2876:.\console.c   **** 				printf("\r\n");	
 10308              		.loc 1 2876 0
 10309 4046 40F20000 		movw	r0, #:lower16:.LC42
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 282


 10310 404a C0F20000 		movt	r0, #:upper16:.LC42
 10311 404e FFF7FEFF 		bl	puts
2877:.\console.c   **** 				
2878:.\console.c   **** 				printf("Pan  Absolute sensor Ratio   = ");
 10312              		.loc 1 2878 0
 10313 4052 40F20000 		movw	r0, #:lower16:.LC517
 10314 4056 C0F20000 		movt	r0, #:upper16:.LC517
 10315 405a FFF7FEFF 		bl	printf
2879:.\console.c   **** 				printf("%3.3f [step/lsb]",(float)(pan_absolute_sensor.param.step_over_abs_ratio.fnum));
 10316              		.loc 1 2879 0
 10317 405e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 10318 4062 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 10319 4066 9B6B     		ldr	r3, [r3, #56]	@ float
 10320 4068 1846     		mov	r0, r3
 10321 406a FFF7FEFF 		bl	__aeabi_f2d
 10322 406e 0246     		mov	r2, r0
 10323 4070 0B46     		mov	r3, r1
 10324 4072 40F20000 		movw	r0, #:lower16:.LC518
 10325 4076 C0F20000 		movt	r0, #:upper16:.LC518
 10326 407a FFF7FEFF 		bl	printf
2880:.\console.c   **** 				printf("\r\n");					
 10327              		.loc 1 2880 0
 10328 407e 40F20000 		movw	r0, #:lower16:.LC42
 10329 4082 C0F20000 		movt	r0, #:upper16:.LC42
 10330 4086 FFF7FEFF 		bl	puts
2881:.\console.c   **** 				
2882:.\console.c   **** 
2883:.\console.c   **** 				//tilt absolute sensor main params
2884:.\console.c   **** 				printf("Tilt Absolute sensor HOME    = ");
 10331              		.loc 1 2884 0
 10332 408a 40F20000 		movw	r0, #:lower16:.LC519
 10333 408e C0F20000 		movt	r0, #:upper16:.LC519
 10334 4092 FFF7FEFF 		bl	printf
2885:.\console.c   **** 				printf("%6i [ADC raw]    (invertion=%1d)",(int16)(tilt_absolute_sensor.param.raw_home), (int16)
 10335              		.loc 1 2885 0
 10336 4096 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10337 409a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10338 409e DB8D     		ldrh	r3, [r3, #46]
 10339 40a0 1AB2     		sxth	r2, r3
 10340 40a2 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10341 40a6 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10342 40aa 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 10343 40ae 40F20000 		movw	r0, #:lower16:.LC512
 10344 40b2 C0F20000 		movt	r0, #:upper16:.LC512
 10345 40b6 1146     		mov	r1, r2
 10346 40b8 1A46     		mov	r2, r3
 10347 40ba FFF7FEFF 		bl	printf
2886:.\console.c   **** 				printf("\r\n");	
 10348              		.loc 1 2886 0
 10349 40be 40F20000 		movw	r0, #:lower16:.LC42
 10350 40c2 C0F20000 		movt	r0, #:upper16:.LC42
 10351 40c6 FFF7FEFF 		bl	puts
2887:.\console.c   **** 				
2888:.\console.c   **** 				printf("Tilt Absolute sensor LimitMAX= ");
 10352              		.loc 1 2888 0
 10353 40ca 40F20000 		movw	r0, #:lower16:.LC520
 10354 40ce C0F20000 		movt	r0, #:upper16:.LC520
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 283


 10355 40d2 FFF7FEFF 		bl	printf
2889:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_max));
 10356              		.loc 1 2889 0
 10357 40d6 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10358 40da C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10359 40de 1B8E     		ldrh	r3, [r3, #48]
 10360 40e0 1BB2     		sxth	r3, r3
 10361 40e2 40F20000 		movw	r0, #:lower16:.LC514
 10362 40e6 C0F20000 		movt	r0, #:upper16:.LC514
 10363 40ea 1946     		mov	r1, r3
 10364 40ec FFF7FEFF 		bl	printf
2890:.\console.c   **** 				printf("\r\n");
 10365              		.loc 1 2890 0
 10366 40f0 40F20000 		movw	r0, #:lower16:.LC42
 10367 40f4 C0F20000 		movt	r0, #:upper16:.LC42
 10368 40f8 FFF7FEFF 		bl	puts
2891:.\console.c   **** 				
2892:.\console.c   **** 				printf("Tilt Absolute sensor Limitmin= ");
 10369              		.loc 1 2892 0
 10370 40fc 40F20000 		movw	r0, #:lower16:.LC521
 10371 4100 C0F20000 		movt	r0, #:upper16:.LC521
 10372 4104 FFF7FEFF 		bl	printf
2893:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_min));
 10373              		.loc 1 2893 0
 10374 4108 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10375 410c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10376 4110 5B8E     		ldrh	r3, [r3, #50]
 10377 4112 1BB2     		sxth	r3, r3
 10378 4114 40F20000 		movw	r0, #:lower16:.LC514
 10379 4118 C0F20000 		movt	r0, #:upper16:.LC514
 10380 411c 1946     		mov	r1, r3
 10381 411e FFF7FEFF 		bl	printf
2894:.\console.c   **** 				printf("\r\n");				
 10382              		.loc 1 2894 0
 10383 4122 40F20000 		movw	r0, #:lower16:.LC42
 10384 4126 C0F20000 		movt	r0, #:upper16:.LC42
 10385 412a FFF7FEFF 		bl	puts
2895:.\console.c   **** 
2896:.\console.c   **** 				printf("Tilt Absolute sensor Hyster. = ");
 10386              		.loc 1 2896 0
 10387 412e 40F20000 		movw	r0, #:lower16:.LC522
 10388 4132 C0F20000 		movt	r0, #:upper16:.LC522
 10389 4136 FFF7FEFF 		bl	printf
2897:.\console.c   **** 				printf("%6i [ADC raw]",(int16)(tilt_absolute_sensor.param.raw_limit_hysteresis));
 10390              		.loc 1 2897 0
 10391 413a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10392 413e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10393 4142 9B8E     		ldrh	r3, [r3, #52]
 10394 4144 1BB2     		sxth	r3, r3
 10395 4146 40F20000 		movw	r0, #:lower16:.LC514
 10396 414a C0F20000 		movt	r0, #:upper16:.LC514
 10397 414e 1946     		mov	r1, r3
 10398 4150 FFF7FEFF 		bl	printf
2898:.\console.c   **** 				printf("\r\n");
 10399              		.loc 1 2898 0
 10400 4154 40F20000 		movw	r0, #:lower16:.LC42
 10401 4158 C0F20000 		movt	r0, #:upper16:.LC42
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 284


 10402 415c FFF7FEFF 		bl	puts
2899:.\console.c   **** 				
2900:.\console.c   **** 				printf("Tilt Absolute sensor Ratio   = ");
 10403              		.loc 1 2900 0
 10404 4160 40F20000 		movw	r0, #:lower16:.LC523
 10405 4164 C0F20000 		movt	r0, #:upper16:.LC523
 10406 4168 FFF7FEFF 		bl	printf
2901:.\console.c   **** 				printf("%3.3f [step/lsb]",(float)(tilt_absolute_sensor.param.step_over_abs_ratio.fnum));	
 10407              		.loc 1 2901 0
 10408 416c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 10409 4170 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 10410 4174 9B6B     		ldr	r3, [r3, #56]	@ float
 10411 4176 1846     		mov	r0, r3
 10412 4178 FFF7FEFF 		bl	__aeabi_f2d
 10413 417c 0246     		mov	r2, r0
 10414 417e 0B46     		mov	r3, r1
 10415 4180 40F20000 		movw	r0, #:lower16:.LC518
 10416 4184 C0F20000 		movt	r0, #:upper16:.LC518
 10417 4188 FFF7FEFF 		bl	printf
2902:.\console.c   **** 				printf("\r\n");					
 10418              		.loc 1 2902 0
 10419 418c 40F20000 		movw	r0, #:lower16:.LC42
 10420 4190 C0F20000 		movt	r0, #:upper16:.LC42
 10421 4194 FFF7FEFF 		bl	puts
2903:.\console.c   **** 				printf("\r\n");	
 10422              		.loc 1 2903 0
 10423 4198 40F20000 		movw	r0, #:lower16:.LC42
 10424 419c C0F20000 		movt	r0, #:upper16:.LC42
 10425 41a0 FFF7FEFF 		bl	puts
2904:.\console.c   **** 				
2905:.\console.c   **** 				
2906:.\console.c   **** 				printf("Motor Tuning\r\n");
 10426              		.loc 1 2906 0
 10427 41a4 40F20000 		movw	r0, #:lower16:.LC524
 10428 41a8 C0F20000 		movt	r0, #:upper16:.LC524
 10429 41ac FFF7FEFF 		bl	puts
2907:.\console.c   **** 				printf("============\r\n");					
 10430              		.loc 1 2907 0
 10431 41b0 40F20000 		movw	r0, #:lower16:.LC525
 10432 41b4 C0F20000 		movt	r0, #:upper16:.LC525
 10433 41b8 FFF7FEFF 		bl	puts
2908:.\console.c   **** 				printf("Pan  Motor Kopf              = ");
 10434              		.loc 1 2908 0
 10435 41bc 40F20000 		movw	r0, #:lower16:.LC526
 10436 41c0 C0F20000 		movt	r0, #:upper16:.LC526
 10437 41c4 FFF7FEFF 		bl	printf
2909:.\console.c   **** 				printf("%8f",(float)(pan_axis.param.Kopf.fnum));
 10438              		.loc 1 2909 0
 10439 41c8 40F20003 		movw	r3, #:lower16:pan_axis
 10440 41cc C0F20003 		movt	r3, #:upper16:pan_axis
 10441 41d0 5B6A     		ldr	r3, [r3, #36]	@ float
 10442 41d2 1846     		mov	r0, r3
 10443 41d4 FFF7FEFF 		bl	__aeabi_f2d
 10444 41d8 0246     		mov	r2, r0
 10445 41da 0B46     		mov	r3, r1
 10446 41dc 40F20000 		movw	r0, #:lower16:.LC496
 10447 41e0 C0F20000 		movt	r0, #:upper16:.LC496
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 285


 10448 41e4 FFF7FEFF 		bl	printf
2910:.\console.c   **** 				printf("   AstimEN=%1u ",(int16)(pan_axis.vparam.astim_enable));
 10449              		.loc 1 2910 0
 10450 41e8 40F20003 		movw	r3, #:lower16:pan_axis
 10451 41ec C0F20003 		movt	r3, #:upper16:pan_axis
 10452 41f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10453 41f2 40F20000 		movw	r0, #:lower16:.LC527
 10454 41f6 C0F20000 		movt	r0, #:upper16:.LC527
 10455 41fa 1946     		mov	r1, r3
 10456 41fc FFF7FEFF 		bl	printf
2911:.\console.c   **** 				ShowParamsAstim(&pan_axis);
 10457              		.loc 1 2911 0
 10458 4200 40F20000 		movw	r0, #:lower16:pan_axis
 10459 4204 C0F20000 		movt	r0, #:upper16:pan_axis
 10460 4208 FFF7FEFF 		bl	ShowParamsAstim
2912:.\console.c   **** 				
2913:.\console.c   **** 				printf("Pan  Anaout GAIN             = ");
 10461              		.loc 1 2913 0
 10462 420c 40F20000 		movw	r0, #:lower16:.LC528
 10463 4210 C0F20000 		movt	r0, #:upper16:.LC528
 10464 4214 FFF7FEFF 		bl	printf
2914:.\console.c   **** 				ShowParamsGainAnaout(&pan_axis);			
 10465              		.loc 1 2914 0
 10466 4218 40F20000 		movw	r0, #:lower16:pan_axis
 10467 421c C0F20000 		movt	r0, #:upper16:pan_axis
 10468 4220 FFF7FEFF 		bl	ShowParamsGainAnaout
2915:.\console.c   **** 				
2916:.\console.c   **** 				printf("Pan  AnaOut Signal (color)   = ");
 10469              		.loc 1 2916 0
 10470 4224 40F20000 		movw	r0, #:lower16:.LC529
 10471 4228 C0F20000 		movt	r0, #:upper16:.LC529
 10472 422c FFF7FEFF 		bl	printf
2917:.\console.c   **** 				ShowParamsColor(&pan_axis);						
 10473              		.loc 1 2917 0
 10474 4230 40F20000 		movw	r0, #:lower16:pan_axis
 10475 4234 C0F20000 		movt	r0, #:upper16:pan_axis
 10476 4238 FFF7FEFF 		bl	ShowParamsColor
2918:.\console.c   **** 				printf("\r\n");				
 10477              		.loc 1 2918 0
 10478 423c 40F20000 		movw	r0, #:lower16:.LC42
 10479 4240 C0F20000 		movt	r0, #:upper16:.LC42
 10480 4244 FFF7FEFF 		bl	puts
2919:.\console.c   **** 
2920:.\console.c   **** 				printf("Tilt Motor Kopf              = ");
 10481              		.loc 1 2920 0
 10482 4248 40F20000 		movw	r0, #:lower16:.LC530
 10483 424c C0F20000 		movt	r0, #:upper16:.LC530
 10484 4250 FFF7FEFF 		bl	printf
2921:.\console.c   **** 				printf("%8f",(float)(tilt_axis.param.Kopf.fnum));
 10485              		.loc 1 2921 0
 10486 4254 40F20003 		movw	r3, #:lower16:tilt_axis
 10487 4258 C0F20003 		movt	r3, #:upper16:tilt_axis
 10488 425c 5B6A     		ldr	r3, [r3, #36]	@ float
 10489 425e 1846     		mov	r0, r3
 10490 4260 FFF7FEFF 		bl	__aeabi_f2d
 10491 4264 0246     		mov	r2, r0
 10492 4266 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 286


 10493 4268 40F20000 		movw	r0, #:lower16:.LC496
 10494 426c C0F20000 		movt	r0, #:upper16:.LC496
 10495 4270 FFF7FEFF 		bl	printf
2922:.\console.c   **** 				printf("   AstimEN=%1u ",(int16)(tilt_axis.vparam.astim_enable));
 10496              		.loc 1 2922 0
 10497 4274 40F20003 		movw	r3, #:lower16:tilt_axis
 10498 4278 C0F20003 		movt	r3, #:upper16:tilt_axis
 10499 427c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10500 427e 40F20000 		movw	r0, #:lower16:.LC527
 10501 4282 C0F20000 		movt	r0, #:upper16:.LC527
 10502 4286 1946     		mov	r1, r3
 10503 4288 FFF7FEFF 		bl	printf
2923:.\console.c   **** 				ShowParamsAstim(&pan_axis);
 10504              		.loc 1 2923 0
 10505 428c 40F20000 		movw	r0, #:lower16:pan_axis
 10506 4290 C0F20000 		movt	r0, #:upper16:pan_axis
 10507 4294 FFF7FEFF 		bl	ShowParamsAstim
2924:.\console.c   **** 				
2925:.\console.c   **** 				printf("Tilt Anaout GAIN             = ");
 10508              		.loc 1 2925 0
 10509 4298 40F20000 		movw	r0, #:lower16:.LC531
 10510 429c C0F20000 		movt	r0, #:upper16:.LC531
 10511 42a0 FFF7FEFF 		bl	printf
2926:.\console.c   **** 				ShowParamsGainAnaout(&tilt_axis);			
 10512              		.loc 1 2926 0
 10513 42a4 40F20000 		movw	r0, #:lower16:tilt_axis
 10514 42a8 C0F20000 		movt	r0, #:upper16:tilt_axis
 10515 42ac FFF7FEFF 		bl	ShowParamsGainAnaout
2927:.\console.c   **** 				
2928:.\console.c   **** 				printf("Tilt AnaOut Signal (color)   = ");
 10516              		.loc 1 2928 0
 10517 42b0 40F20000 		movw	r0, #:lower16:.LC532
 10518 42b4 C0F20000 		movt	r0, #:upper16:.LC532
 10519 42b8 FFF7FEFF 		bl	printf
2929:.\console.c   **** 				ShowParamsColor(&tilt_axis);						
 10520              		.loc 1 2929 0
 10521 42bc 40F20000 		movw	r0, #:lower16:tilt_axis
 10522 42c0 C0F20000 		movt	r0, #:upper16:tilt_axis
 10523 42c4 FFF7FEFF 		bl	ShowParamsColor
2930:.\console.c   **** 				printf("\r\n");				
 10524              		.loc 1 2930 0
 10525 42c8 40F20000 		movw	r0, #:lower16:.LC42
 10526 42cc C0F20000 		movt	r0, #:upper16:.LC42
 10527 42d0 FFF7FEFF 		bl	puts
2931:.\console.c   **** 				
2932:.\console.c   **** 				printf("Anaout Selected Axis         = ");
 10528              		.loc 1 2932 0
 10529 42d4 40F20000 		movw	r0, #:lower16:.LC533
 10530 42d8 C0F20000 		movt	r0, #:upper16:.LC533
 10531 42dc FFF7FEFF 		bl	printf
2933:.\console.c   **** 				ShowParamsAnaoutSelectedAxis(Selected_ANAOUT);	
 10532              		.loc 1 2933 0
 10533 42e0 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 10534 42e4 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 10535 42e8 1B68     		ldr	r3, [r3, #0]
 10536 42ea 1846     		mov	r0, r3
 10537 42ec FFF7FEFF 		bl	ShowParamsAnaoutSelectedAxis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 287


2934:.\console.c   **** 				printf("\r\n");
 10538              		.loc 1 2934 0
 10539 42f0 40F20000 		movw	r0, #:lower16:.LC42
 10540 42f4 C0F20000 		movt	r0, #:upper16:.LC42
 10541 42f8 FFF7FEFF 		bl	puts
2935:.\console.c   **** 				printf("\r\n");				
 10542              		.loc 1 2935 0
 10543 42fc 40F20000 		movw	r0, #:lower16:.LC42
 10544 4300 C0F20000 		movt	r0, #:upper16:.LC42
 10545 4304 FFF7FEFF 		bl	puts
2936:.\console.c   **** 
2937:.\console.c   **** 				printf("Accelerometer (100Hz)\r\n");
 10546              		.loc 1 2937 0
 10547 4308 40F20000 		movw	r0, #:lower16:.LC534
 10548 430c C0F20000 		movt	r0, #:upper16:.LC534
 10549 4310 FFF7FEFF 		bl	puts
2938:.\console.c   **** 				printf("=====================\r\n");					
 10550              		.loc 1 2938 0
 10551 4314 40F20000 		movw	r0, #:lower16:.LC535
 10552 4318 C0F20000 		movt	r0, #:upper16:.LC535
 10553 431c FFF7FEFF 		bl	puts
2939:.\console.c   **** 				printf("beta  (accelerometer LPF)    = ");
 10554              		.loc 1 2939 0
 10555 4320 40F20000 		movw	r0, #:lower16:.LC536
 10556 4324 C0F20000 		movt	r0, #:upper16:.LC536
 10557 4328 FFF7FEFF 		bl	printf
2940:.\console.c   **** 				printf("%8f (tau=%1.4f [msec])",(float)(gobee_param.beta.fnum), (float)LPFtau(gobee_param.beta.
 10558              		.loc 1 2940 0
 10559 432c 40F20003 		movw	r3, #:lower16:gobee_param
 10560 4330 C0F20003 		movt	r3, #:upper16:gobee_param
 10561 4334 5B68     		ldr	r3, [r3, #4]	@ float
 10562 4336 1846     		mov	r0, r3
 10563 4338 FFF7FEFF 		bl	__aeabi_f2d
 10564 433c 0446     		mov	r4, r0
 10565 433e 0D46     		mov	r5, r1
 10566 4340 40F20003 		movw	r3, #:lower16:gobee_param
 10567 4344 C0F20003 		movt	r3, #:upper16:gobee_param
 10568 4348 5B68     		ldr	r3, [r3, #4]	@ float
 10569 434a 1846     		mov	r0, r3
 10570 434c 4DF20A71 		movw	r1, #55050
 10571 4350 C3F62341 		movt	r1, 15395
 10572 4354 FFF7FEFF 		bl	LPFtau
 10573 4358 0346     		mov	r3, r0
 10574 435a 1846     		mov	r0, r3
 10575 435c FFF7FEFF 		bl	__aeabi_f2d
 10576 4360 0246     		mov	r2, r0
 10577 4362 0B46     		mov	r3, r1
 10578 4364 CDE90023 		strd	r2, [sp]
 10579 4368 40F20000 		movw	r0, #:lower16:.LC537
 10580 436c C0F20000 		movt	r0, #:upper16:.LC537
 10581 4370 2246     		mov	r2, r4
 10582 4372 2B46     		mov	r3, r5
 10583 4374 FFF7FEFF 		bl	printf
2941:.\console.c   **** 				printf(" (fc=%1.4f [Hz])\r\n", (float)LPFfreq(gobee_param.beta.fnum, H_DeltaT_const));				
 10584              		.loc 1 2941 0
 10585 4378 40F20003 		movw	r3, #:lower16:gobee_param
 10586 437c C0F20003 		movt	r3, #:upper16:gobee_param
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 288


 10587 4380 5B68     		ldr	r3, [r3, #4]	@ float
 10588 4382 1846     		mov	r0, r3
 10589 4384 4DF20A71 		movw	r1, #55050
 10590 4388 C3F62341 		movt	r1, 15395
 10591 438c FFF7FEFF 		bl	LPFfreq
 10592 4390 0346     		mov	r3, r0
 10593 4392 1846     		mov	r0, r3
 10594 4394 FFF7FEFF 		bl	__aeabi_f2d
 10595 4398 0246     		mov	r2, r0
 10596 439a 0B46     		mov	r3, r1
 10597 439c 40F20000 		movw	r0, #:lower16:.LC538
 10598 43a0 C0F20000 		movt	r0, #:upper16:.LC538
 10599 43a4 FFF7FEFF 		bl	printf
2942:.\console.c   **** 
2943:.\console.c   **** 				printf("Analog Accel. X ADC Offset   = ");
 10600              		.loc 1 2943 0
 10601 43a8 40F20000 		movw	r0, #:lower16:.LC539
 10602 43ac C0F20000 		movt	r0, #:upper16:.LC539
 10603 43b0 FFF7FEFF 		bl	printf
2944:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.x_acc_ADC_offset));
 10604              		.loc 1 2944 0
 10605 43b4 40F20003 		movw	r3, #:lower16:gobee_param
 10606 43b8 C0F20003 		movt	r3, #:upper16:gobee_param
 10607 43bc 1B89     		ldrh	r3, [r3, #8]
 10608 43be 1BB2     		sxth	r3, r3
 10609 43c0 40F20000 		movw	r0, #:lower16:.LC540
 10610 43c4 C0F20000 		movt	r0, #:upper16:.LC540
 10611 43c8 1946     		mov	r1, r3
 10612 43ca FFF7FEFF 		bl	printf
2945:.\console.c   **** 				printf("\r\n");	
 10613              		.loc 1 2945 0
 10614 43ce 40F20000 		movw	r0, #:lower16:.LC42
 10615 43d2 C0F20000 		movt	r0, #:upper16:.LC42
 10616 43d6 FFF7FEFF 		bl	puts
2946:.\console.c   **** 				
2947:.\console.c   **** 				printf("Analog Accel. Y ADC Offset   = ");
 10617              		.loc 1 2947 0
 10618 43da 40F20000 		movw	r0, #:lower16:.LC541
 10619 43de C0F20000 		movt	r0, #:upper16:.LC541
 10620 43e2 FFF7FEFF 		bl	printf
2948:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.y_acc_ADC_offset));
 10621              		.loc 1 2948 0
 10622 43e6 40F20003 		movw	r3, #:lower16:gobee_param
 10623 43ea C0F20003 		movt	r3, #:upper16:gobee_param
 10624 43ee 5B89     		ldrh	r3, [r3, #10]
 10625 43f0 1BB2     		sxth	r3, r3
 10626 43f2 40F20000 		movw	r0, #:lower16:.LC540
 10627 43f6 C0F20000 		movt	r0, #:upper16:.LC540
 10628 43fa 1946     		mov	r1, r3
 10629 43fc FFF7FEFF 		bl	printf
2949:.\console.c   **** 				printf("\r\n");
 10630              		.loc 1 2949 0
 10631 4400 40F20000 		movw	r0, #:lower16:.LC42
 10632 4404 C0F20000 		movt	r0, #:upper16:.LC42
 10633 4408 FFF7FEFF 		bl	puts
2950:.\console.c   **** 				
2951:.\console.c   **** 				printf("Analog Accel. Z ADC Offset   = ");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 289


 10634              		.loc 1 2951 0
 10635 440c 40F20000 		movw	r0, #:lower16:.LC542
 10636 4410 C0F20000 		movt	r0, #:upper16:.LC542
 10637 4414 FFF7FEFF 		bl	printf
2952:.\console.c   **** 				printf("%4d [lsb]",(int16)(gobee_param.z_acc_ADC_offset));
 10638              		.loc 1 2952 0
 10639 4418 40F20003 		movw	r3, #:lower16:gobee_param
 10640 441c C0F20003 		movt	r3, #:upper16:gobee_param
 10641 4420 9B89     		ldrh	r3, [r3, #12]
 10642 4422 1BB2     		sxth	r3, r3
 10643 4424 40F20000 		movw	r0, #:lower16:.LC540
 10644 4428 C0F20000 		movt	r0, #:upper16:.LC540
 10645 442c 1946     		mov	r1, r3
 10646 442e FFF7FEFF 		bl	printf
2953:.\console.c   **** 				printf("\r\n");				
 10647              		.loc 1 2953 0
 10648 4432 40F20000 		movw	r0, #:lower16:.LC42
 10649 4436 C0F20000 		movt	r0, #:upper16:.LC42
 10650 443a FFF7FEFF 		bl	puts
2954:.\console.c   **** 				printf("\r\n");	
 10651              		.loc 1 2954 0
 10652 443e 40F20000 		movw	r0, #:lower16:.LC42
 10653 4442 C0F20000 		movt	r0, #:upper16:.LC42
 10654 4446 FFF7FEFF 		bl	puts
2955:.\console.c   **** 				
2956:.\console.c   **** 				printf("Bike Frame IMU (1.5kHz)\r\n");
 10655              		.loc 1 2956 0
 10656 444a 40F20000 		movw	r0, #:lower16:.LC543
 10657 444e C0F20000 		movt	r0, #:upper16:.LC543
 10658 4452 FFF7FEFF 		bl	puts
2957:.\console.c   **** 				printf("=======================\r\n");					
 10659              		.loc 1 2957 0
 10660 4456 40F20000 		movw	r0, #:lower16:.LC544
 10661 445a C0F20000 		movt	r0, #:upper16:.LC544
 10662 445e FFF7FEFF 		bl	puts
2958:.\console.c   **** 				printf("gamma  (IMU LPF)             = ");
 10663              		.loc 1 2958 0
 10664 4462 40F20000 		movw	r0, #:lower16:.LC545
 10665 4466 C0F20000 		movt	r0, #:upper16:.LC545
 10666 446a FFF7FEFF 		bl	printf
2959:.\console.c   **** 				printf("%8f (tau=%1.4f [msec])",(float)(IMU_sensor.param.gamma.fnum), (float)LPFtau(IMU_sensor.
 10667              		.loc 1 2959 0
 10668 446e 40F20003 		movw	r3, #:lower16:IMU_sensor
 10669 4472 C0F20003 		movt	r3, #:upper16:IMU_sensor
 10670 4476 9B6A     		ldr	r3, [r3, #40]	@ float
 10671 4478 1846     		mov	r0, r3
 10672 447a FFF7FEFF 		bl	__aeabi_f2d
 10673 447e 0446     		mov	r4, r0
 10674 4480 0D46     		mov	r5, r1
 10675 4482 40F20003 		movw	r3, #:lower16:IMU_sensor
 10676 4486 C0F20003 		movt	r3, #:upper16:IMU_sensor
 10677 448a 9B6A     		ldr	r3, [r3, #40]	@ float
 10678 448c 1846     		mov	r0, r3
 10679 448e 4CF24431 		movw	r1, #49988
 10680 4492 C3F62E21 		movt	r1, 14894
 10681 4496 FFF7FEFF 		bl	LPFtau
 10682 449a 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 290


 10683 449c 1846     		mov	r0, r3
 10684 449e FFF7FEFF 		bl	__aeabi_f2d
 10685 44a2 0246     		mov	r2, r0
 10686 44a4 0B46     		mov	r3, r1
 10687 44a6 CDE90023 		strd	r2, [sp]
 10688 44aa 40F20000 		movw	r0, #:lower16:.LC537
 10689 44ae C0F20000 		movt	r0, #:upper16:.LC537
 10690 44b2 2246     		mov	r2, r4
 10691 44b4 2B46     		mov	r3, r5
 10692 44b6 FFF7FEFF 		bl	printf
2960:.\console.c   **** 				printf(" (fc=%1.4f [Hz])\r\n", (float)LPFfreq(IMU_sensor.param.gamma.fnum, DeltaT_const));
 10693              		.loc 1 2960 0
 10694 44ba 40F20003 		movw	r3, #:lower16:IMU_sensor
 10695 44be C0F20003 		movt	r3, #:upper16:IMU_sensor
 10696 44c2 9B6A     		ldr	r3, [r3, #40]	@ float
 10697 44c4 1846     		mov	r0, r3
 10698 44c6 4CF24431 		movw	r1, #49988
 10699 44ca C3F62E21 		movt	r1, 14894
 10700 44ce FFF7FEFF 		bl	LPFfreq
 10701 44d2 0346     		mov	r3, r0
 10702 44d4 1846     		mov	r0, r3
 10703 44d6 FFF7FEFF 		bl	__aeabi_f2d
 10704 44da 0246     		mov	r2, r0
 10705 44dc 0B46     		mov	r3, r1
 10706 44de 40F20000 		movw	r0, #:lower16:.LC538
 10707 44e2 C0F20000 		movt	r0, #:upper16:.LC538
 10708 44e6 FFF7FEFF 		bl	printf
2961:.\console.c   **** 				
2962:.\console.c   **** 				printf("IMU Yaw angle invertion      = ");
 10709              		.loc 1 2962 0
 10710 44ea 40F20000 		movw	r0, #:lower16:.LC546
 10711 44ee C0F20000 		movt	r0, #:upper16:.LC546
 10712 44f2 FFF7FEFF 		bl	printf
2963:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.yaw_invertion));
 10713              		.loc 1 2963 0
 10714 44f6 40F20003 		movw	r3, #:lower16:IMU_sensor
 10715 44fa C0F20003 		movt	r3, #:upper16:IMU_sensor
 10716 44fe 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 10717 4502 40F20000 		movw	r0, #:lower16:.LC494
 10718 4506 C0F20000 		movt	r0, #:upper16:.LC494
 10719 450a 1946     		mov	r1, r3
 10720 450c FFF7FEFF 		bl	printf
2964:.\console.c   **** 				printf("\r\n");
 10721              		.loc 1 2964 0
 10722 4510 40F20000 		movw	r0, #:lower16:.LC42
 10723 4514 C0F20000 		movt	r0, #:upper16:.LC42
 10724 4518 FFF7FEFF 		bl	puts
2965:.\console.c   **** 				
2966:.\console.c   **** 				printf("IMU Pitch angle invertion    = ");
 10725              		.loc 1 2966 0
 10726 451c 40F20000 		movw	r0, #:lower16:.LC547
 10727 4520 C0F20000 		movt	r0, #:upper16:.LC547
 10728 4524 FFF7FEFF 		bl	printf
2967:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.pitch_invertion));
 10729              		.loc 1 2967 0
 10730 4528 40F20003 		movw	r3, #:lower16:IMU_sensor
 10731 452c C0F20003 		movt	r3, #:upper16:IMU_sensor
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 291


 10732 4530 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 10733 4534 40F20000 		movw	r0, #:lower16:.LC494
 10734 4538 C0F20000 		movt	r0, #:upper16:.LC494
 10735 453c 1946     		mov	r1, r3
 10736 453e FFF7FEFF 		bl	printf
2968:.\console.c   **** 				printf("\r\n");
 10737              		.loc 1 2968 0
 10738 4542 40F20000 		movw	r0, #:lower16:.LC42
 10739 4546 C0F20000 		movt	r0, #:upper16:.LC42
 10740 454a FFF7FEFF 		bl	puts
2969:.\console.c   **** 				
2970:.\console.c   **** 				printf("IMU Roll angle invertion     = ");
 10741              		.loc 1 2970 0
 10742 454e 40F20000 		movw	r0, #:lower16:.LC548
 10743 4552 C0F20000 		movt	r0, #:upper16:.LC548
 10744 4556 FFF7FEFF 		bl	printf
2971:.\console.c   **** 				printf("%1u (0=true, 1=invert)",(int16)(IMU_sensor.param.roll_invertion));
 10745              		.loc 1 2971 0
 10746 455a 40F20003 		movw	r3, #:lower16:IMU_sensor
 10747 455e C0F20003 		movt	r3, #:upper16:IMU_sensor
 10748 4562 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 10749 4566 40F20000 		movw	r0, #:lower16:.LC494
 10750 456a C0F20000 		movt	r0, #:upper16:.LC494
 10751 456e 1946     		mov	r1, r3
 10752 4570 FFF7FEFF 		bl	printf
2972:.\console.c   **** 				printf("\r\n");
 10753              		.loc 1 2972 0
 10754 4574 40F20000 		movw	r0, #:lower16:.LC42
 10755 4578 C0F20000 		movt	r0, #:upper16:.LC42
 10756 457c FFF7FEFF 		bl	puts
2973:.\console.c   **** 				
2974:.\console.c   **** 				printf("IMU Pith and Roll exchange   = ");
 10757              		.loc 1 2974 0
 10758 4580 40F20000 		movw	r0, #:lower16:.LC549
 10759 4584 C0F20000 		movt	r0, #:upper16:.LC549
 10760 4588 FFF7FEFF 		bl	printf
2975:.\console.c   **** 				printf("%1u (0=true, 1=exchanged)",(int16)(IMU_sensor.param.pitch_roll_exchange));
 10761              		.loc 1 2975 0
 10762 458c 40F20003 		movw	r3, #:lower16:IMU_sensor
 10763 4590 C0F20003 		movt	r3, #:upper16:IMU_sensor
 10764 4594 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 10765 4598 40F20000 		movw	r0, #:lower16:.LC550
 10766 459c C0F20000 		movt	r0, #:upper16:.LC550
 10767 45a0 1946     		mov	r1, r3
 10768 45a2 FFF7FEFF 		bl	printf
2976:.\console.c   **** 				printf("\r\n");				
 10769              		.loc 1 2976 0
 10770 45a6 40F20000 		movw	r0, #:lower16:.LC42
 10771 45aa C0F20000 		movt	r0, #:upper16:.LC42
 10772 45ae FFF7FEFF 		bl	puts
2977:.\console.c   **** 				printf("\r\n");					
 10773              		.loc 1 2977 0
 10774 45b2 40F20000 		movw	r0, #:lower16:.LC42
 10775 45b6 C0F20000 		movt	r0, #:upper16:.LC42
 10776 45ba FFF7FEFF 		bl	puts
2978:.\console.c   **** 				
2979:.\console.c   **** 				printf("Events Parameters\r\n");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 292


 10777              		.loc 1 2979 0
 10778 45be 40F20000 		movw	r0, #:lower16:.LC551
 10779 45c2 C0F20000 		movt	r0, #:upper16:.LC551
 10780 45c6 FFF7FEFF 		bl	puts
2980:.\console.c   **** 				printf("=================\r\n");				
 10781              		.loc 1 2980 0
 10782 45ca 40F20000 		movw	r0, #:lower16:.LC552
 10783 45ce C0F20000 		movt	r0, #:upper16:.LC552
 10784 45d2 FFF7FEFF 		bl	puts
2981:.\console.c   **** 				
2982:.\console.c   **** 				printf("Jump G Threshold             = ");
 10785              		.loc 1 2982 0
 10786 45d6 40F20000 		movw	r0, #:lower16:.LC553
 10787 45da C0F20000 		movt	r0, #:upper16:.LC553
 10788 45de FFF7FEFF 		bl	printf
2983:.\console.c   **** 				printf("%8f [g]\r\n",(float)(gobee_param.jump_g_threshold.fnum));				
 10789              		.loc 1 2983 0
 10790 45e2 40F20003 		movw	r3, #:lower16:gobee_param
 10791 45e6 C0F20003 		movt	r3, #:upper16:gobee_param
 10792 45ea 1B69     		ldr	r3, [r3, #16]	@ float
 10793 45ec 1846     		mov	r0, r3
 10794 45ee FFF7FEFF 		bl	__aeabi_f2d
 10795 45f2 0246     		mov	r2, r0
 10796 45f4 0B46     		mov	r3, r1
 10797 45f6 40F20000 		movw	r0, #:lower16:.LC554
 10798 45fa C0F20000 		movt	r0, #:upper16:.LC554
 10799 45fe FFF7FEFF 		bl	printf
2984:.\console.c   **** 
2985:.\console.c   **** 				printf("Acceleration G Threshold     = ");
 10800              		.loc 1 2985 0
 10801 4602 40F20000 		movw	r0, #:lower16:.LC555
 10802 4606 C0F20000 		movt	r0, #:upper16:.LC555
 10803 460a FFF7FEFF 		bl	printf
2986:.\console.c   **** 				printf("%8f [g]\r\n",(float)(gobee_param.acc_g_threshold.fnum));				
 10804              		.loc 1 2986 0
 10805 460e 40F20003 		movw	r3, #:lower16:gobee_param
 10806 4612 C0F20003 		movt	r3, #:upper16:gobee_param
 10807 4616 5B69     		ldr	r3, [r3, #20]	@ float
 10808 4618 1846     		mov	r0, r3
 10809 461a FFF7FEFF 		bl	__aeabi_f2d
 10810 461e 0246     		mov	r2, r0
 10811 4620 0B46     		mov	r3, r1
 10812 4622 40F20000 		movw	r0, #:lower16:.LC554
 10813 4626 C0F20000 		movt	r0, #:upper16:.LC554
 10814 462a FFF7FEFF 		bl	printf
2987:.\console.c   **** 				printf("\r\n");
 10815              		.loc 1 2987 0
 10816 462e 40F20000 		movw	r0, #:lower16:.LC42
 10817 4632 C0F20000 		movt	r0, #:upper16:.LC42
 10818 4636 FFF7FEFF 		bl	puts
2988:.\console.c   **** 				
2989:.\console.c   **** 				goto exitpars;
 10819              		.loc 1 2989 0
 10820 463a 02F089BC 		b	.L131
 10821              	.L224:
2990:.\console.c   **** 			}
2991:.\console.c   **** 		goto exitpars;	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 293


2992:.\console.c   **** 		}
2993:.\console.c   **** 		
2994:.\console.c   **** 		
2995:.\console.c   **** //		/* CMD MOVEPATH */
2996:.\console.c   **** //		if ((strcmp(actual_cmd.action, "movepath") == 0) ||
2997:.\console.c   **** //		   (strcmp(actual_cmd.action, "movep") == 0))
2998:.\console.c   **** //		{	
2999:.\console.c   **** //			if (((path_n = atoi(actual_cmd.parameter)) >= 0)
3000:.\console.c   **** //			&& (path_n = atoi(actual_cmd.parameter)) <= PATH_N_MAX-1)
3001:.\console.c   **** //			{
3002:.\console.c   **** //				if (machine_state == GOBEE_ENERGIZED)
3003:.\console.c   **** //				{
3004:.\console.c   **** //					printf("Path %2i Mover START!\r\n", (int16)path_n);				
3005:.\console.c   **** //					MoverStart(path_n);	/* Initialize & Start the Mover over path n		*/
3006:.\console.c   **** //					
3007:.\console.c   **** //					while (AnyButtonPressed() == NO_PRESSED)
3008:.\console.c   **** //					{
3009:.\console.c   **** //						//print . every 1 sec
3010:.\console.c   **** //						if (mover.ticks % MOVER_FREQ)
3011:.\console.c   **** //						printf(".");
3012:.\console.c   **** //						
3013:.\console.c   **** //						if (mover.status == MOVER_ENDED)
3014:.\console.c   **** //						{
3015:.\console.c   **** //							printf("\r\nPath %2i Mover END!\r\n", (int16)path_n);						
3016:.\console.c   **** //							goto exitpars;
3017:.\console.c   **** //						}
3018:.\console.c   **** //					}
3019:.\console.c   **** //				}
3020:.\console.c   **** //				else
3021:.\console.c   **** //				{
3022:.\console.c   **** //					printf("Mover Not Started: energize the Gobee before!\r\n");	
3023:.\console.c   **** //				}
3024:.\console.c   **** //			}
3025:.\console.c   **** //			else
3026:.\console.c   **** //			{
3027:.\console.c   **** //				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3028:.\console.c   **** //			}
3029:.\console.c   **** //			goto exitpars;	
3030:.\console.c   **** //		}	
3031:.\console.c   **** 
3032:.\console.c   **** 		
3033:.\console.c   **** 		/* CMD CLUEXEC */
3034:.\console.c   **** 		if (strcmp(actual_cmd.action, "cluexec") == 0)
 10822              		.loc 1 3034 0
 10823 463e 40F20000 		movw	r0, #:lower16:actual_cmd
 10824 4642 C0F20000 		movt	r0, #:upper16:actual_cmd
 10825 4646 40F20001 		movw	r1, #:lower16:.LC556
 10826 464a C0F20001 		movt	r1, #:upper16:.LC556
 10827 464e FFF7FEFF 		bl	strcmp
 10828 4652 0346     		mov	r3, r0
 10829 4654 002B     		cmp	r3, #0
 10830 4656 5ED1     		bne	.L378
3035:.\console.c   **** 		{	
3036:.\console.c   **** 			if (((clu_number = atoi(actual_cmd.parameter)) >= 0)
 10831              		.loc 1 3036 0
 10832 4658 B148     		ldr	r0, .L745
 10833 465a FFF7FEFF 		bl	atoi
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 294


 10834 465e 0346     		mov	r3, r0
 10835 4660 87F8EA30 		strb	r3, [r7, #234]
3037:.\console.c   **** 			&& (clu_number = atoi(actual_cmd.parameter)) <= MAX_CLU_NUMBER)
 10836              		.loc 1 3037 0
 10837 4664 AE48     		ldr	r0, .L745
 10838 4666 FFF7FEFF 		bl	atoi
 10839 466a 0346     		mov	r3, r0
 10840 466c 87F8EA30 		strb	r3, [r7, #234]
 10841 4670 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10842 4674 322B     		cmp	r3, #50
 10843 4676 44D8     		bhi	.L379
3038:.\console.c   **** 			{
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10844              		.loc 1 3039 0
 10845 4678 40F20003 		movw	r3, #:lower16:machine_state
 10846 467c C0F20003 		movt	r3, #:upper16:machine_state
 10847 4680 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10848 4682 052B     		cmp	r3, #5
 10849 4684 35D1     		bne	.L380
3040:.\console.c   **** 				{
3041:.\console.c   **** 					if (isCluEmpty(clu_number) == CLU_IS_NOT_EMPTY)
 10850              		.loc 1 3041 0
 10851 4686 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10852 468a 1846     		mov	r0, r3
 10853 468c FFF7FEFF 		bl	isCluEmpty
 10854 4690 0346     		mov	r3, r0
 10855 4692 002B     		cmp	r3, #0
 10856 4694 26D1     		bne	.L381
3042:.\console.c   **** 					{
3043:.\console.c   **** 						printf("CLU %2i START!\r\n", (int16)clu_number);
 10857              		.loc 1 3043 0
 10858 4696 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10859 469a 40F20000 		movw	r0, #:lower16:.LC557
 10860 469e C0F20000 		movt	r0, #:upper16:.LC557
 10861 46a2 1946     		mov	r1, r3
 10862 46a4 FFF7FEFF 		bl	printf
3044:.\console.c   **** 						clu_sm_start((uint8)clu_number);
 10863              		.loc 1 3044 0
 10864 46a8 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10865 46ac 1846     		mov	r0, r3
 10866 46ae FFF7FEFF 		bl	clu_sm_start
3045:.\console.c   **** 						
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 10867              		.loc 1 3046 0
 10868 46b2 11E0     		b	.L382
 10869              	.L383:
3047:.\console.c   **** 						{					
3048:.\console.c   **** 							if (clu_sm.status == CLUSM_END)
 10870              		.loc 1 3048 0
 10871 46b4 40F20003 		movw	r3, #:lower16:clu_sm
 10872 46b8 C0F20003 		movt	r3, #:upper16:clu_sm
 10873 46bc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10874 46be 0C2B     		cmp	r3, #12
 10875 46c0 0AD1     		bne	.L382
3049:.\console.c   **** 							{
3050:.\console.c   **** 								printf("\r\nCLU %2i END!\r\n", (int16)clu_number);						
 10876              		.loc 1 3050 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 295


 10877 46c2 97F8EA30 		ldrb	r3, [r7, #234]	@ zero_extendqisi2
 10878 46c6 40F20000 		movw	r0, #:lower16:.LC558
 10879 46ca C0F20000 		movt	r0, #:upper16:.LC558
 10880 46ce 1946     		mov	r1, r3
 10881 46d0 FFF7FEFF 		bl	printf
3051:.\console.c   **** 								goto exitpars;
 10882              		.loc 1 3051 0
 10883 46d4 02F03CBC 		b	.L131
 10884              	.L382:
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 10885              		.loc 1 3046 0 discriminator 1
 10886 46d8 FFF7FEFF 		bl	AnyButtonPressed
 10887 46dc 0346     		mov	r3, r0
 10888 46de 002B     		cmp	r3, #0
 10889 46e0 E8D0     		beq	.L383
3046:.\console.c   **** 						while (AnyButtonPressed() == NO_PRESSED)
 10890              		.loc 1 3046 0 is_stmt 0
 10891 46e2 0DE0     		b	.L689
 10892              	.L381:
3052:.\console.c   **** 							}
3053:.\console.c   **** 						}
3054:.\console.c   **** 					}
3055:.\console.c   **** 					else
3056:.\console.c   **** 					{
3057:.\console.c   **** 						printf("CLU not started: selected CLU is empty!\r\n");	
 10893              		.loc 1 3057 0 is_stmt 1
 10894 46e4 40F20000 		movw	r0, #:lower16:.LC559
 10895 46e8 C0F20000 		movt	r0, #:upper16:.LC559
 10896 46ec FFF7FEFF 		bl	puts
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10897              		.loc 1 3039 0
 10898 46f0 0FE0     		b	.L385
 10899              	.L380:
3058:.\console.c   **** 					}
3059:.\console.c   **** 				}
3060:.\console.c   **** 				else
3061:.\console.c   **** 				{
3062:.\console.c   **** 					printf("CLU not started: energize the Gobee before!\r\n");	
 10900              		.loc 1 3062 0
 10901 46f2 40F20000 		movw	r0, #:lower16:.LC560
 10902 46f6 C0F20000 		movt	r0, #:upper16:.LC560
 10903 46fa FFF7FEFF 		bl	puts
3039:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10904              		.loc 1 3039 0
 10905 46fe 08E0     		b	.L385
 10906              	.L689:
 10907 4700 07E0     		b	.L385
 10908              	.L379:
3063:.\console.c   **** 				}
3064:.\console.c   **** 			}
3065:.\console.c   **** 			else
3066:.\console.c   **** 			{
3067:.\console.c   **** 				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 10909              		.loc 1 3067 0
 10910 4702 40F20000 		movw	r0, #:lower16:.LC450
 10911 4706 C0F20000 		movt	r0, #:upper16:.LC450
 10912 470a FFF7FEFF 		bl	printf
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 296


3068:.\console.c   **** 			}
3069:.\console.c   **** 			goto exitpars;	
 10913              		.loc 1 3069 0
 10914 470e 02F01FBC 		b	.L131
 10915              	.L385:
 10916 4712 02F01DBC 		b	.L131
 10917              	.L378:
3070:.\console.c   **** 		}
3071:.\console.c   **** 		/* END CMD CLUEXEC*/
3072:.\console.c   **** 		
3073:.\console.c   **** 		
3074:.\console.c   **** 		/* CMD CLUSEQUENCE */
3075:.\console.c   **** 		if (strcmp(actual_cmd.action, "cluseq") == 0)
 10918              		.loc 1 3075 0
 10919 4716 40F20000 		movw	r0, #:lower16:actual_cmd
 10920 471a C0F20000 		movt	r0, #:upper16:actual_cmd
 10921 471e 40F20001 		movw	r1, #:lower16:.LC561
 10922 4722 C0F20001 		movt	r1, #:upper16:.LC561
 10923 4726 FFF7FEFF 		bl	strcmp
 10924 472a 0346     		mov	r3, r0
 10925 472c 002B     		cmp	r3, #0
 10926 472e 79D1     		bne	.L386
3076:.\console.c   **** 		{	
3077:.\console.c   **** 			if (((clu_pause = atoi(actual_cmd.parameter)) >= 0)
 10927              		.loc 1 3077 0
 10928 4730 7B48     		ldr	r0, .L745
 10929 4732 FFF7FEFF 		bl	atoi
 10930 4736 0346     		mov	r3, r0
 10931 4738 87F8E930 		strb	r3, [r7, #233]
3078:.\console.c   **** 			&& (clu_pause = atoi(actual_cmd.parameter)) <= 30000)
 10932              		.loc 1 3078 0
 10933 473c 7848     		ldr	r0, .L745
 10934 473e FFF7FEFF 		bl	atoi
 10935 4742 0346     		mov	r3, r0
 10936 4744 87F8E930 		strb	r3, [r7, #233]
3079:.\console.c   **** 			{
3080:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 10937              		.loc 1 3080 0
 10938 4748 40F20003 		movw	r3, #:lower16:machine_state
 10939 474c C0F20003 		movt	r3, #:upper16:machine_state
 10940 4750 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10941 4752 052B     		cmp	r3, #5
 10942 4754 5DD1     		bne	.L387
 10943              	.LBB9:
3081:.\console.c   **** 				{				
3082:.\console.c   **** 					InitCluSequence();
 10944              		.loc 1 3082 0
 10945 4756 FFF7FEFF 		bl	InitCluSequence
3083:.\console.c   **** 					
3084:.\console.c   **** 					uint8 clu_step = 0;
 10946              		.loc 1 3084 0
 10947 475a 4FF00003 		mov	r3, #0
 10948 475e 87F8FE30 		strb	r3, [r7, #254]
3085:.\console.c   **** 					while (clu_sequence[clu_step] != 0xFF)
 10949              		.loc 1 3085 0
 10950 4762 45E0     		b	.L388
 10951              	.L391:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 297


3086:.\console.c   **** 					{
3087:.\console.c   **** 						printf("CLU %2i START!\r\n", (int16)clu_sequence[clu_step]);
 10952              		.loc 1 3087 0
 10953 4764 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 10954 4768 40F20003 		movw	r3, #:lower16:clu_sequence
 10955 476c C0F20003 		movt	r3, #:upper16:clu_sequence
 10956 4770 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10957 4772 40F20000 		movw	r0, #:lower16:.LC557
 10958 4776 C0F20000 		movt	r0, #:upper16:.LC557
 10959 477a 1946     		mov	r1, r3
 10960 477c FFF7FEFF 		bl	printf
3088:.\console.c   **** 						clu_sm_start((uint8)clu_sequence[clu_step]);
 10961              		.loc 1 3088 0
 10962 4780 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 10963 4784 40F20003 		movw	r3, #:lower16:clu_sequence
 10964 4788 C0F20003 		movt	r3, #:upper16:clu_sequence
 10965 478c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10966 478e 1846     		mov	r0, r3
 10967 4790 FFF7FEFF 		bl	clu_sm_start
3089:.\console.c   **** 
3090:.\console.c   **** 						while (clu_sm.status != CLUSM_END)
 10968              		.loc 1 3090 0
 10969 4794 0CE0     		b	.L389
 10970              	.L390:
3091:.\console.c   **** 						{
3092:.\console.c   **** 							if (AnyButtonPressed() == PRESSED)
 10971              		.loc 1 3092 0
 10972 4796 FFF7FEFF 		bl	AnyButtonPressed
 10973 479a 0346     		mov	r3, r0
 10974 479c 012B     		cmp	r3, #1
 10975 479e 07D1     		bne	.L389
3093:.\console.c   **** 							{
3094:.\console.c   **** 								printf("\r\nUser Abort!\r\n");
 10976              		.loc 1 3094 0
 10977 47a0 40F20000 		movw	r0, #:lower16:.LC562
 10978 47a4 C0F20000 		movt	r0, #:upper16:.LC562
 10979 47a8 FFF7FEFF 		bl	puts
3095:.\console.c   **** 								
3096:.\console.c   **** 								goto exitpars;	
 10980              		.loc 1 3096 0
 10981 47ac 02F0D0BB 		b	.L131
 10982              	.L389:
3090:.\console.c   **** 						while (clu_sm.status != CLUSM_END)
 10983              		.loc 1 3090 0 discriminator 1
 10984 47b0 40F20003 		movw	r3, #:lower16:clu_sm
 10985 47b4 C0F20003 		movt	r3, #:upper16:clu_sm
 10986 47b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 10987 47ba 0C2B     		cmp	r3, #12
 10988 47bc EBD1     		bne	.L390
3097:.\console.c   **** 							}	
3098:.\console.c   **** 						}
3099:.\console.c   **** 						printf("\r\nCLU %2i END!\r\n", (int16)clu_sequence[clu_step]);
 10989              		.loc 1 3099 0
 10990 47be 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 10991 47c2 40F20003 		movw	r3, #:lower16:clu_sequence
 10992 47c6 C0F20003 		movt	r3, #:upper16:clu_sequence
 10993 47ca 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 298


 10994 47cc 40F20000 		movw	r0, #:lower16:.LC558
 10995 47d0 C0F20000 		movt	r0, #:upper16:.LC558
 10996 47d4 1946     		mov	r1, r3
 10997 47d6 FFF7FEFF 		bl	printf
3100:.\console.c   **** 						CyDelay(clu_pause);
 10998              		.loc 1 3100 0
 10999 47da 97F8E930 		ldrb	r3, [r7, #233]	@ zero_extendqisi2
 11000 47de 1846     		mov	r0, r3
 11001 47e0 FFF7FEFF 		bl	CyDelay
3101:.\console.c   **** 						clu_step++;
 11002              		.loc 1 3101 0
 11003 47e4 97F8FE30 		ldrb	r3, [r7, #254]
 11004 47e8 03F10103 		add	r3, r3, #1
 11005 47ec 87F8FE30 		strb	r3, [r7, #254]
 11006              	.L388:
3085:.\console.c   **** 					while (clu_sequence[clu_step] != 0xFF)
 11007              		.loc 1 3085 0 discriminator 1
 11008 47f0 97F8FE20 		ldrb	r2, [r7, #254]	@ zero_extendqisi2
 11009 47f4 40F20003 		movw	r3, #:lower16:clu_sequence
 11010 47f8 C0F20003 		movt	r3, #:upper16:clu_sequence
 11011 47fc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 11012 47fe FF2B     		cmp	r3, #255
 11013 4800 B0D1     		bne	.L391
3102:.\console.c   **** 					}
3103:.\console.c   **** 					printf("\r\nCLU SEQUENCE END!\r\n");
 11014              		.loc 1 3103 0
 11015 4802 40F20000 		movw	r0, #:lower16:.LC563
 11016 4806 C0F20000 		movt	r0, #:upper16:.LC563
 11017 480a FFF7FEFF 		bl	puts
3104:.\console.c   **** 					goto exitpars;
 11018              		.loc 1 3104 0
 11019 480e 02F09FBB 		b	.L131
 11020              	.L387:
 11021              	.LBE9:
3105:.\console.c   **** 				}
3106:.\console.c   **** 				else
3107:.\console.c   **** 				{
3108:.\console.c   **** 					printf("CLUSEQ not started: energize the Gobee before!\r\n");	
 11022              		.loc 1 3108 0 discriminator 1
 11023 4812 40F20000 		movw	r0, #:lower16:.LC564
 11024 4816 C0F20000 		movt	r0, #:upper16:.LC564
 11025 481a FFF7FEFF 		bl	puts
3080:.\console.c   **** 				if (machine_state == GOBEE_ENERGIZED)
 11026              		.loc 1 3080 0 discriminator 1
 11027 481e 00BF     		nop
3109:.\console.c   **** 				}				
3110:.\console.c   **** 			}
3111:.\console.c   **** 			else
3112:.\console.c   **** 			{
3113:.\console.c   **** 				printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3114:.\console.c   **** 			}
3115:.\console.c   **** 			goto exitpars;	
 11028              		.loc 1 3115 0 discriminator 1
 11029 4820 02F096BB 		b	.L131
 11030              	.L386:
3116:.\console.c   **** 		}
3117:.\console.c   **** 		/* END CMD CLUSEQUENCE*/		
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 299


3118:.\console.c   **** 		
3119:.\console.c   **** 		
3120:.\console.c   **** 		/* CMD GOTOHOME */
3121:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotohome") == 0) ||
 11031              		.loc 1 3121 0
 11032 4824 40F20000 		movw	r0, #:lower16:actual_cmd
 11033 4828 C0F20000 		movt	r0, #:upper16:actual_cmd
 11034 482c 40F20001 		movw	r1, #:lower16:.LC565
 11035 4830 C0F20001 		movt	r1, #:upper16:.LC565
 11036 4834 FFF7FEFF 		bl	strcmp
 11037 4838 0346     		mov	r3, r0
 11038 483a 002B     		cmp	r3, #0
 11039 483c 0CD0     		beq	.L392
3122:.\console.c   **** 		   (strcmp(actual_cmd.action, "gotoh") == 0))
 11040              		.loc 1 3122 0 discriminator 1
 11041 483e 40F20000 		movw	r0, #:lower16:actual_cmd
 11042 4842 C0F20000 		movt	r0, #:upper16:actual_cmd
 11043 4846 40F20001 		movw	r1, #:lower16:.LC566
 11044 484a C0F20001 		movt	r1, #:upper16:.LC566
 11045 484e FFF7FEFF 		bl	strcmp
 11046 4852 0346     		mov	r3, r0
3121:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotohome") == 0) ||
 11047              		.loc 1 3121 0 discriminator 1
 11048 4854 002B     		cmp	r3, #0
 11049 4856 65D1     		bne	.L393
 11050              	.L392:
3123:.\console.c   **** 		{	
3124:.\console.c   **** 			if (machine_state == GOBEE_ENERGIZED)
 11051              		.loc 1 3124 0
 11052 4858 40F20003 		movw	r3, #:lower16:machine_state
 11053 485c C0F20003 		movt	r3, #:upper16:machine_state
 11054 4860 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11055 4862 052B     		cmp	r3, #5
 11056 4864 52D1     		bne	.L394
3125:.\console.c   **** 			{
3126:.\console.c   **** 				printf("Goto Home Mover START!\r\n");	
 11057              		.loc 1 3126 0
 11058 4866 40F20000 		movw	r0, #:lower16:.LC567
 11059 486a C0F20000 		movt	r0, #:upper16:.LC567
 11060 486e FFF7FEFF 		bl	puts
3127:.\console.c   **** 				InitPanGotoHomePath();						/* initialize the Pan Goto Home Path					*/
 11061              		.loc 1 3127 0
 11062 4872 FFF7FEFF 		bl	InitPanGotoHomePath
3128:.\console.c   **** 				InitTiltGotoHomePath();						/* initialize the Tilt Goto Home Path					*/			
 11063              		.loc 1 3128 0
 11064 4876 FFF7FEFF 		bl	InitTiltGotoHomePath
3129:.\console.c   **** 				CalculatePanGotoHomePath();					/* Calculate the  Pan Goto Home Path 					*/
 11065              		.loc 1 3129 0
 11066 487a FFF7FEFF 		bl	CalculatePanGotoHomePath
3130:.\console.c   **** 				CalculateTiltGotoHomePath();				/* Calculate the  Tilt Goto Home Path 					*/			
 11067              		.loc 1 3130 0
 11068 487e FFF7FEFF 		bl	CalculateTiltGotoHomePath
3131:.\console.c   **** 				MoverStart(&mover_pan, PATH_PGOTOHOME);		/* Initialize & Start the Mover over Pan path to Home	
 11069              		.loc 1 3131 0
 11070 4882 40F20000 		movw	r0, #:lower16:mover_pan
 11071 4886 C0F20000 		movt	r0, #:upper16:mover_pan
 11072 488a 4FF00201 		mov	r1, #2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 300


 11073 488e FFF7FEFF 		bl	MoverStart
3132:.\console.c   **** 				MoverStart(&mover_tilt, PATH_TGOTOHOME);	/* Initialize & Start the Mover over Tilt path to Home
 11074              		.loc 1 3132 0
 11075 4892 40F20000 		movw	r0, #:lower16:mover_tilt
 11076 4896 C0F20000 		movt	r0, #:upper16:mover_tilt
 11077 489a 4FF00301 		mov	r1, #3
 11078 489e FFF7FEFF 		bl	MoverStart
3133:.\console.c   **** 				
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11079              		.loc 1 3134 0
 11080 48a2 2DE0     		b	.L395
 11081              	.L397:
3135:.\console.c   **** 				{
3136:.\console.c   **** 					//print . every 1 sec
3137:.\console.c   **** 					if ((mover_pan.ticks % MOVER_FREQ) == 0)
 11082              		.loc 1 3137 0
 11083 48a4 40F20003 		movw	r3, #:lower16:mover_pan
 11084 48a8 C0F20003 		movt	r3, #:upper16:mover_pan
 11085 48ac 5A68     		ldr	r2, [r3, #4]
 11086 48ae 41F6F113 		movw	r3, #6641
 11087 48b2 C0F27653 		movt	r3, 1398
 11088 48b6 A3FB0213 		umull	r1, r3, r3, r2
 11089 48ba 4FEA5313 		lsr	r3, r3, #5
 11090 48be 40F2DC51 		movw	r1, #1500
 11091 48c2 01FB03F3 		mul	r3, r1, r3
 11092 48c6 D31A     		subs	r3, r2, r3
 11093 48c8 002B     		cmp	r3, #0
 11094 48ca 03D1     		bne	.L396
3138:.\console.c   **** 					printf(".");
 11095              		.loc 1 3138 0
 11096 48cc 4FF02E00 		mov	r0, #46
 11097 48d0 FFF7FEFF 		bl	putchar
 11098              	.L396:
3139:.\console.c   **** 					
3140:.\console.c   **** 					if ((mover_pan.status == MOVER_ENDED) && (mover_tilt.status == MOVER_ENDED))
 11099              		.loc 1 3140 0
 11100 48d4 40F20003 		movw	r3, #:lower16:mover_pan
 11101 48d8 C0F20003 		movt	r3, #:upper16:mover_pan
 11102 48dc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11103 48de 022B     		cmp	r3, #2
 11104 48e0 0ED1     		bne	.L395
 11105              		.loc 1 3140 0 is_stmt 0 discriminator 1
 11106 48e2 40F20003 		movw	r3, #:lower16:mover_tilt
 11107 48e6 C0F20003 		movt	r3, #:upper16:mover_tilt
 11108 48ea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11109 48ec 022B     		cmp	r3, #2
 11110 48ee 07D1     		bne	.L395
3141:.\console.c   **** 					{
3142:.\console.c   **** 						printf("\r\nGoto Home Mover END!\r\n");						
 11111              		.loc 1 3142 0 is_stmt 1
 11112 48f0 40F20000 		movw	r0, #:lower16:.LC568
 11113 48f4 C0F20000 		movt	r0, #:upper16:.LC568
 11114 48f8 FFF7FEFF 		bl	puts
3143:.\console.c   **** 						goto exitpars;
 11115              		.loc 1 3143 0
 11116 48fc 02F028BB 		b	.L131
 11117              	.L395:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 301


3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11118              		.loc 1 3134 0 discriminator 1
 11119 4900 FFF7FEFF 		bl	AnyButtonPressed
 11120 4904 0346     		mov	r3, r0
 11121 4906 002B     		cmp	r3, #0
 11122 4908 CCD0     		beq	.L397
3134:.\console.c   **** 				while (AnyButtonPressed() == NO_PRESSED)
 11123              		.loc 1 3134 0 is_stmt 0
 11124 490a 07E0     		b	.L690
 11125              	.L394:
3144:.\console.c   **** 					}
3145:.\console.c   **** 				}
3146:.\console.c   **** 			}
3147:.\console.c   **** 			else
3148:.\console.c   **** 			{
3149:.\console.c   **** 				printf("Goto Home Mover Not Started: energize the Gobee before!\r\n");	
 11126              		.loc 1 3149 0 is_stmt 1
 11127 490c 40F20000 		movw	r0, #:lower16:.LC569
 11128 4910 C0F20000 		movt	r0, #:upper16:.LC569
 11129 4914 FFF7FEFF 		bl	puts
3150:.\console.c   **** 			}
3151:.\console.c   **** 			goto exitpars;	
 11130              		.loc 1 3151 0
 11131 4918 02F01ABB 		b	.L131
 11132              	.L690:
 11133 491c 02F018BB 		b	.L131
 11134              	.L746:
 11135              		.align	2
 11136              	.L745:
 11137 4920 0F000000 		.word	actual_cmd+15
 11138              	.L393:
3152:.\console.c   **** 		}
3153:.\console.c   **** 		/* CMD GOTOHOME END */
3154:.\console.c   **** 		
3155:.\console.c   **** 		
3156:.\console.c   **** 		/* CMD GOTOQ */
3157:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotoq") == 0) ||
 11139              		.loc 1 3157 0
 11140 4924 40F20000 		movw	r0, #:lower16:actual_cmd
 11141 4928 C0F20000 		movt	r0, #:upper16:actual_cmd
 11142 492c 40F20001 		movw	r1, #:lower16:.LC570
 11143 4930 C0F20001 		movt	r1, #:upper16:.LC570
 11144 4934 FFF7FEFF 		bl	strcmp
 11145 4938 0346     		mov	r3, r0
 11146 493a 002B     		cmp	r3, #0
 11147 493c 0DD0     		beq	.L399
3158:.\console.c   **** 		    (strcmp(actual_cmd.action, "g") == 0))
 11148              		.loc 1 3158 0 discriminator 1
 11149 493e 40F20000 		movw	r0, #:lower16:actual_cmd
 11150 4942 C0F20000 		movt	r0, #:upper16:actual_cmd
 11151 4946 40F20001 		movw	r1, #:lower16:.LC571
 11152 494a C0F20001 		movt	r1, #:upper16:.LC571
 11153 494e FFF7FEFF 		bl	strcmp
 11154 4952 0346     		mov	r3, r0
3157:.\console.c   **** 		if ((strcmp(actual_cmd.action, "gotoq") == 0) ||
 11155              		.loc 1 3157 0 discriminator 1
 11156 4954 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 302


 11157 4956 40F0DC80 		bne	.L400
 11158              	.L399:
3159:.\console.c   **** 		
3160:.\console.c   **** 		{	
3161:.\console.c   **** 			if (((q_number = atoi(actual_cmd.parameter)) >= Q_NUMBER_MIN)
 11159              		.loc 1 3161 0
 11160 495a BA48     		ldr	r0, .L747
 11161 495c FFF7FEFF 		bl	atoi
 11162 4960 0346     		mov	r3, r0
 11163 4962 87F8E530 		strb	r3, [r7, #229]
 11164 4966 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11165 496a 002B     		cmp	r3, #0
 11166 496c 00F0C780 		beq	.L401
3162:.\console.c   **** 			&& (q_number = atoi(actual_cmd.parameter)) <= Q_NUMBER_MAX)
 11167              		.loc 1 3162 0
 11168 4970 B448     		ldr	r0, .L747
 11169 4972 FFF7FEFF 		bl	atoi
 11170 4976 0346     		mov	r3, r0
 11171 4978 87F8E530 		strb	r3, [r7, #229]
 11172 497c 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11173 4980 632B     		cmp	r3, #99
 11174 4982 00F2BC80 		bhi	.L401
3163:.\console.c   **** 			{	
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11175              		.loc 1 3164 0
 11176 4986 B048     		ldr	r0, .L747+4
 11177 4988 FFF7FEFF 		bl	atof
 11178 498c 0246     		mov	r2, r0
 11179 498e 0B46     		mov	r3, r1
 11180 4990 1046     		mov	r0, r2
 11181 4992 1946     		mov	r1, r3
 11182 4994 FFF7FEFF 		bl	__aeabi_d2f
 11183 4998 0346     		mov	r3, r0
 11184 499a C7F81431 		str	r3, [r7, #276]	@ float
 11185 499e D7F81401 		ldr	r0, [r7, #276]	@ float
 11186 49a2 4FF00001 		mov	r1, #0
 11187 49a6 FFF7FEFF 		bl	__aeabi_fcmpge
 11188 49aa 0346     		mov	r3, r0
 11189 49ac 002B     		cmp	r3, #0
 11190 49ae 00F0AE80 		beq	.L412
 11191              	.L649:
3165:.\console.c   **** 				&& (time_loc = atof(actual_cmd.number1)) <= 30)		//[sec]
 11192              		.loc 1 3165 0
 11193 49b2 A548     		ldr	r0, .L747+4
 11194 49b4 FFF7FEFF 		bl	atof
 11195 49b8 0246     		mov	r2, r0
 11196 49ba 0B46     		mov	r3, r1
 11197 49bc 1046     		mov	r0, r2
 11198 49be 1946     		mov	r1, r3
 11199 49c0 FFF7FEFF 		bl	__aeabi_d2f
 11200 49c4 0346     		mov	r3, r0
 11201 49c6 C7F81431 		str	r3, [r7, #276]	@ float
 11202 49ca D7F81401 		ldr	r0, [r7, #276]	@ float
 11203 49ce 4FF00001 		mov	r1, #0
 11204 49d2 C4F2F011 		movt	r1, 16880
 11205 49d6 FFF7FEFF 		bl	__aeabi_fcmple
 11206 49da 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 303


 11207 49dc 002B     		cmp	r3, #0
 11208 49de 00F08D80 		beq	.L402
 11209              	.L650:
3166:.\console.c   **** 				{
3167:.\console.c   **** 					if (machine_state == GOBEE_ENERGIZED)
 11210              		.loc 1 3167 0
 11211 49e2 40F20003 		movw	r3, #:lower16:machine_state
 11212 49e6 C0F20003 		movt	r3, #:upper16:machine_state
 11213 49ea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11214 49ec 052B     		cmp	r3, #5
 11215 49ee 7ED1     		bne	.L405
3168:.\console.c   **** 					{
3169:.\console.c   **** 						if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)		//is Q allocated on any memory?
 11216              		.loc 1 3169 0
 11217 49f0 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 11218 49f4 40F20003 		movw	r3, #:lower16:q_table
 11219 49f8 C0F20003 		movt	r3, #:upper16:q_table
 11220 49fc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 11221 49fe FF2B     		cmp	r3, #255
 11222 4a00 6BD0     		beq	.L406
3170:.\console.c   **** 						{
3171:.\console.c   **** 							if (time_loc == 0)
 11223              		.loc 1 3171 0
 11224 4a02 D7F81401 		ldr	r0, [r7, #276]	@ float
 11225 4a06 4FF00001 		mov	r1, #0
 11226 4a0a FFF7FEFF 		bl	__aeabi_fcmpeq
 11227 4a0e 0346     		mov	r3, r0
 11228 4a10 002B     		cmp	r3, #0
 11229 4a12 03D0     		beq	.L407
 11230              	.L651:
3172:.\console.c   **** 							{
3173:.\console.c   **** 								time_loc = 2;	//default 2 sec	
 11231              		.loc 1 3173 0
 11232 4a14 4FF08043 		mov	r3, #1073741824
 11233 4a18 C7F81431 		str	r3, [r7, #276]	@ float
 11234              	.L407:
3174:.\console.c   **** 							}
3175:.\console.c   **** 							
3176:.\console.c   **** 							printf("Goto Q Mover START!\r\n");	
 11235              		.loc 1 3176 0
 11236 4a1c 40F20000 		movw	r0, #:lower16:.LC572
 11237 4a20 C0F20000 		movt	r0, #:upper16:.LC572
 11238 4a24 FFF7FEFF 		bl	puts
3177:.\console.c   **** 							InitPanGotoQPath(q_number, time_loc);	/* initialize the Pan Goto Q Path					*/
 11239              		.loc 1 3177 0
 11240 4a28 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11241 4a2c 5BB2     		sxtb	r3, r3
 11242 4a2e 1846     		mov	r0, r3
 11243 4a30 D7F81411 		ldr	r1, [r7, #276]	@ float
 11244 4a34 FFF7FEFF 		bl	InitPanGotoQPath
3178:.\console.c   **** 							InitTiltGotoQPath(q_number, time_loc);	/* initialize the Tilt Goto Q Path					*/			
 11245              		.loc 1 3178 0
 11246 4a38 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11247 4a3c 5BB2     		sxtb	r3, r3
 11248 4a3e 1846     		mov	r0, r3
 11249 4a40 D7F81411 		ldr	r1, [r7, #276]	@ float
 11250 4a44 FFF7FEFF 		bl	InitTiltGotoQPath
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 304


3179:.\console.c   **** 							CalculatePanGotoQPath();				/* Calculate the  Pan Goto Q Path 					*/
 11251              		.loc 1 3179 0
 11252 4a48 FFF7FEFF 		bl	CalculatePanGotoQPath
3180:.\console.c   **** 							CalculateTiltGotoQPath();				/* Calculate the  Tilt Goto Q Path 					*/			
 11253              		.loc 1 3180 0
 11254 4a4c FFF7FEFF 		bl	CalculateTiltGotoQPath
3181:.\console.c   **** 							MoverStart(&mover_pan, PATH_PGOTOQ);	/* Initialize & Start the Mover over Pan path to Q	*/
 11255              		.loc 1 3181 0
 11256 4a50 40F20000 		movw	r0, #:lower16:mover_pan
 11257 4a54 C0F20000 		movt	r0, #:upper16:mover_pan
 11258 4a58 4FF00401 		mov	r1, #4
 11259 4a5c FFF7FEFF 		bl	MoverStart
3182:.\console.c   **** 							MoverStart(&mover_tilt, PATH_TGOTOQ);	/* Initialize & Start the Mover over Tilt path to Q	*/
 11260              		.loc 1 3182 0
 11261 4a60 40F20000 		movw	r0, #:lower16:mover_tilt
 11262 4a64 C0F20000 		movt	r0, #:upper16:mover_tilt
 11263 4a68 4FF00501 		mov	r1, #5
 11264 4a6c FFF7FEFF 		bl	MoverStart
3183:.\console.c   **** 							
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11265              		.loc 1 3184 0
 11266 4a70 2DE0     		b	.L409
 11267              	.L411:
3185:.\console.c   **** 							{
3186:.\console.c   **** 								//print . every 1 sec
3187:.\console.c   **** 								if ((mover_pan.ticks % MOVER_FREQ) == 0)
 11268              		.loc 1 3187 0
 11269 4a72 40F20003 		movw	r3, #:lower16:mover_pan
 11270 4a76 C0F20003 		movt	r3, #:upper16:mover_pan
 11271 4a7a 5A68     		ldr	r2, [r3, #4]
 11272 4a7c 41F6F113 		movw	r3, #6641
 11273 4a80 C0F27653 		movt	r3, 1398
 11274 4a84 A3FB0203 		umull	r0, r3, r3, r2
 11275 4a88 4FEA5313 		lsr	r3, r3, #5
 11276 4a8c 40F2DC51 		movw	r1, #1500
 11277 4a90 01FB03F3 		mul	r3, r1, r3
 11278 4a94 D31A     		subs	r3, r2, r3
 11279 4a96 002B     		cmp	r3, #0
 11280 4a98 03D1     		bne	.L410
3188:.\console.c   **** 								printf(".");
 11281              		.loc 1 3188 0
 11282 4a9a 4FF02E00 		mov	r0, #46
 11283 4a9e FFF7FEFF 		bl	putchar
 11284              	.L410:
3189:.\console.c   **** 								
3190:.\console.c   **** 								if ((mover_pan.status == MOVER_ENDED) && (mover_tilt.status == MOVER_ENDED))
 11285              		.loc 1 3190 0
 11286 4aa2 40F20003 		movw	r3, #:lower16:mover_pan
 11287 4aa6 C0F20003 		movt	r3, #:upper16:mover_pan
 11288 4aaa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11289 4aac 022B     		cmp	r3, #2
 11290 4aae 0ED1     		bne	.L409
 11291              		.loc 1 3190 0 is_stmt 0 discriminator 1
 11292 4ab0 40F20003 		movw	r3, #:lower16:mover_tilt
 11293 4ab4 C0F20003 		movt	r3, #:upper16:mover_tilt
 11294 4ab8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11295 4aba 022B     		cmp	r3, #2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 305


 11296 4abc 07D1     		bne	.L409
3191:.\console.c   **** 								{
3192:.\console.c   **** 									printf("\r\nGoto Q Mover END!\r\n");						
 11297              		.loc 1 3192 0 is_stmt 1
 11298 4abe 40F20000 		movw	r0, #:lower16:.LC573
 11299 4ac2 C0F20000 		movt	r0, #:upper16:.LC573
 11300 4ac6 FFF7FEFF 		bl	puts
3193:.\console.c   **** 									goto exitpars;
 11301              		.loc 1 3193 0
 11302 4aca 02F041BA 		b	.L131
 11303              	.L409:
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11304              		.loc 1 3184 0 discriminator 1
 11305 4ace FFF7FEFF 		bl	AnyButtonPressed
 11306 4ad2 0346     		mov	r3, r0
 11307 4ad4 002B     		cmp	r3, #0
 11308 4ad6 CCD0     		beq	.L411
3184:.\console.c   **** 							while (AnyButtonPressed() == NO_PRESSED)
 11309              		.loc 1 3184 0 is_stmt 0
 11310 4ad8 10E0     		b	.L402
 11311              	.L406:
3194:.\console.c   **** 								}
3195:.\console.c   **** 							}
3196:.\console.c   **** 						}
3197:.\console.c   **** 						else
3198:.\console.c   **** 						{
3199:.\console.c   **** 							printf("Goto Q Mover Not Started: QMemory %02d NOT ALLOCATED!\r\n",(uint16)q_number);
 11312              		.loc 1 3199 0 is_stmt 1
 11313 4ada 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 11314 4ade 40F20000 		movw	r0, #:lower16:.LC574
 11315 4ae2 C0F20000 		movt	r0, #:upper16:.LC574
 11316 4ae6 1946     		mov	r1, r3
 11317 4ae8 FFF7FEFF 		bl	printf
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11318              		.loc 1 3164 0
 11319 4aec 0FE0     		b	.L412
 11320              	.L405:
3200:.\console.c   **** 						}						
3201:.\console.c   **** 					}
3202:.\console.c   **** 					else
3203:.\console.c   **** 					{
3204:.\console.c   **** 						printf("Goto Q Mover Not Started: energize the Gobee before!\r\n");	
 11321              		.loc 1 3204 0
 11322 4aee 40F20000 		movw	r0, #:lower16:.LC575
 11323 4af2 C0F20000 		movt	r0, #:upper16:.LC575
 11324 4af6 FFF7FEFF 		bl	puts
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11325              		.loc 1 3164 0
 11326 4afa 08E0     		b	.L412
 11327              	.L402:
3164:.\console.c   **** 				if (((time_loc = atof(actual_cmd.number1)) >= 0)
 11328              		.loc 1 3164 0 is_stmt 0 discriminator 1
 11329 4afc 07E0     		b	.L412
 11330              	.L401:
3205:.\console.c   **** 					}
3206:.\console.c   **** 				}
3207:.\console.c   **** 			}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 306


3208:.\console.c   **** 			else
3209:.\console.c   **** 			{
3210:.\console.c   **** 				printf("Goto Q Mover Not Started: Q maximum is 99!\r\n");	
 11331              		.loc 1 3210 0 is_stmt 1
 11332 4afe 40F20000 		movw	r0, #:lower16:.LC576
 11333 4b02 C0F20000 		movt	r0, #:upper16:.LC576
 11334 4b06 FFF7FEFF 		bl	puts
3211:.\console.c   **** 			}
3212:.\console.c   **** 			goto exitpars;	
 11335              		.loc 1 3212 0
 11336 4b0a 02F021BA 		b	.L131
 11337              	.L412:
 11338 4b0e 02F01FBA 		b	.L131
 11339              	.L400:
3213:.\console.c   **** 		}
3214:.\console.c   **** 		/* CMD GOTOQ END */
3215:.\console.c   **** 
3216:.\console.c   **** 		
3217:.\console.c   **** //		/* CMD CIAK */
3218:.\console.c   **** //		if (strcmp(actual_cmd.action, "ciak") == 0)
3219:.\console.c   **** //		{	
3220:.\console.c   **** //			if (machine_state == GOBEE_ENERGIZED)
3221:.\console.c   **** //			{
3222:.\console.c   **** //				int8 ciak_num = 2;	/* ciak path iterations */
3223:.\console.c   **** //				
3224:.\console.c   **** //				printf("CIAK Mover START!\r\n");	
3225:.\console.c   **** //				MoverStart(5);				/* Initialize & Start the Mover over path 5	*/
3226:.\console.c   **** //				
3227:.\console.c   **** //				while (AnyButtonPressed() == NO_PRESSED)
3228:.\console.c   **** //				{
3229:.\console.c   **** //					//print . every 1 sec
3230:.\console.c   **** //					if (mover.ticks % MOVER_FREQ)
3231:.\console.c   **** //					printf(".");
3232:.\console.c   **** //					
3233:.\console.c   **** //					if (mover.status == MOVER_ENDED)
3234:.\console.c   **** //					{
3235:.\console.c   **** //						ciak_num--;
3236:.\console.c   **** //						if (ciak_num>0)
3237:.\console.c   **** //						{
3238:.\console.c   **** //							MoverStart(5);				/* Redo CIAK */
3239:.\console.c   **** //						}
3240:.\console.c   **** //						else
3241:.\console.c   **** //						{
3242:.\console.c   **** //						printf("\r\nCIAK Mover END!\r\n");						
3243:.\console.c   **** //						goto exitpars;
3244:.\console.c   **** //						}
3245:.\console.c   **** //					}
3246:.\console.c   **** //				}
3247:.\console.c   **** //			}
3248:.\console.c   **** //			else
3249:.\console.c   **** //			{
3250:.\console.c   **** //				printf("CIAK Mover Not Started: energize the Gobee before!\r\n");	
3251:.\console.c   **** //			}
3252:.\console.c   **** //			goto exitpars;	
3253:.\console.c   **** //		}					
3254:.\console.c   **** 		
3255:.\console.c   **** 		
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 307


3256:.\console.c   **** 		/* CMD SET*/
3257:.\console.c   **** 		if (strcmp(actual_cmd.action, "set") == 0)
 11340              		.loc 1 3257 0
 11341 4b12 40F20000 		movw	r0, #:lower16:actual_cmd
 11342 4b16 C0F20000 		movt	r0, #:upper16:actual_cmd
 11343 4b1a 40F20001 		movw	r1, #:lower16:.LC167
 11344 4b1e C0F20001 		movt	r1, #:upper16:.LC167
 11345 4b22 FFF7FEFF 		bl	strcmp
 11346 4b26 0346     		mov	r3, r0
 11347 4b28 002B     		cmp	r3, #0
 11348 4b2a 42F0FD81 		bne	.L413
3258:.\console.c   **** 		{
3259:.\console.c   **** 			if (strlen(actual_cmd.parameter) == 0)
 11349              		.loc 1 3259 0
 11350 4b2e 454B     		ldr	r3, .L747
 11351 4b30 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 11352 4b32 002B     		cmp	r3, #0
 11353 4b34 07D1     		bne	.L414
3260:.\console.c   **** 			{
3261:.\console.c   **** 				printf(STR_ERROR2);		/* ERROR2: more parameters needed! */
 11354              		.loc 1 3261 0
 11355 4b36 40F20000 		movw	r0, #:lower16:.LC577
 11356 4b3a C0F20000 		movt	r0, #:upper16:.LC577
 11357 4b3e FFF7FEFF 		bl	printf
3262:.\console.c   **** 			}
3263:.\console.c   **** 			else
3264:.\console.c   **** 			{
3265:.\console.c   **** 				// SET DIRECTOR
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
3267:.\console.c   **** 					(strcmp(actual_cmd.parameter, "dir") == 0))
3268:.\console.c   **** 				{	
3269:.\console.c   **** 					if (((director = atoi(actual_cmd.number1)) >= STANLEY)
3270:.\console.c   **** 					&& (director = atoi(actual_cmd.number1)) <= JJ)
3271:.\console.c   **** 					{
3272:.\console.c   **** 						gobee_param.director = director;
3273:.\console.c   **** 						
3274:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3275:.\console.c   **** 						dummy = WriteAllEEparams();
3276:.\console.c   **** 						printf(STR_REM_SEDR, (uint16)director);   /* REM: director setted to...*/
3277:.\console.c   **** 						ShowParamsDirector();
3278:.\console.c   **** 					}
3279:.\console.c   **** 					else
3280:.\console.c   **** 					{
3281:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3282:.\console.c   **** 					}
3283:.\console.c   **** 					goto exitpars;
3284:.\console.c   **** 				}	
3285:.\console.c   **** 				// END SET DIRECTOR
3286:.\console.c   **** 				
3287:.\console.c   **** 				
3288:.\console.c   **** 				// SET MACHINE MODE
3289:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "mode") == 0)
3290:.\console.c   **** 				{	
3291:.\console.c   **** 					if (((mode_loc = atoi(actual_cmd.number1)) >= REMOTECONTROL_MODE)
3292:.\console.c   **** 					&& (mode_loc = atoi(actual_cmd.number1)) <= DIRECTOR_MODE)
3293:.\console.c   **** 					{
3294:.\console.c   **** 						gobee_param.mode = mode_loc;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 308


3295:.\console.c   **** 						
3296:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3297:.\console.c   **** 						dummy = WriteAllEEparams();
3298:.\console.c   **** 						printf(STR_REM_SMOD, (uint16)mode_loc);   /* REM: machine mode setted to...*/					
3299:.\console.c   **** 					}
3300:.\console.c   **** 					else
3301:.\console.c   **** 					{
3302:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3303:.\console.c   **** 					}
3304:.\console.c   **** 					goto exitpars;
3305:.\console.c   **** 				}	
3306:.\console.c   **** 				// END SET MACHINE MODE
3307:.\console.c   **** 				
3308:.\console.c   **** 				
3309:.\console.c   **** 				// SET PAN MOTOR POLARITY
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
3311:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polp") == 0))
3312:.\console.c   **** 				{	
3313:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
3314:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
3315:.\console.c   **** 					{
3316:.\console.c   **** 						pan_axis.param.polarity = polarity;
3317:.\console.c   **** 						
3318:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3319:.\console.c   **** 						dummy = WriteAllEEparams();
3320:.\console.c   **** 						printf(STR_REM_SETP, (uint16)polarity);   /* REM: pan axis polarity setted to...*/					
3321:.\console.c   **** 					}
3322:.\console.c   **** 					else
3323:.\console.c   **** 					{
3324:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3325:.\console.c   **** 					}
3326:.\console.c   **** 					goto exitpars;
3327:.\console.c   **** 				}	
3328:.\console.c   **** 				// END PAN MOTOR POLARITY
3329:.\console.c   **** 
3330:.\console.c   **** 				
3331:.\console.c   **** 				// SET TILT MOTOR POLARITY
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
3333:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polt") == 0))
3334:.\console.c   **** 				{	
3335:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
3336:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
3337:.\console.c   **** 					{
3338:.\console.c   **** 						tilt_axis.param.polarity = polarity;
3339:.\console.c   **** 						
3340:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3341:.\console.c   **** 						dummy = WriteAllEEparams();
3342:.\console.c   **** 						printf(STR_REM_SETPT, (uint16)polarity);   /* REM: tilt axis polarity setted to...*/					
3343:.\console.c   **** 					}
3344:.\console.c   **** 					else
3345:.\console.c   **** 					{
3346:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3347:.\console.c   **** 					}
3348:.\console.c   **** 					goto exitpars;
3349:.\console.c   **** 				}	
3350:.\console.c   **** 				// END TILT MOTOR POLARITY
3351:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 309


3352:.\console.c   **** 
3353:.\console.c   **** 				// SET PAN MOTOR LIMIT CONTROL
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
3355:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lcp") == 0))
3356:.\console.c   **** 				{	
3357:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
3358:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
3359:.\console.c   **** 					{
3360:.\console.c   **** 						pan_axis.param.limit_control = limit_control;
3361:.\console.c   **** 						
3362:.\console.c   **** 						/* Writes parameter on EEPROM */
3363:.\console.c   **** 						dummy = WriteAllEEparams();
3364:.\console.c   **** 						printf(STR_REM_STLP, (uint16)limit_control);   /* REM: pan axis limit control setted to...*/	
3365:.\console.c   **** 					}
3366:.\console.c   **** 					else
3367:.\console.c   **** 					{
3368:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3369:.\console.c   **** 					}
3370:.\console.c   **** 					goto exitpars;
3371:.\console.c   **** 				}	
3372:.\console.c   **** 				// END PAN MOTOR LIMIT CONTROL		
3373:.\console.c   **** 				
3374:.\console.c   **** 				
3375:.\console.c   **** 				// SET ABSOLUTE SENSOR PAN INVERTION
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
3377:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invp") == 0))
3378:.\console.c   **** 				{	
3379:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
3380:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
3381:.\console.c   **** 					{
3382:.\console.c   **** 						pan_absolute_sensor.param.raw_invertion = raw_invertion;
3383:.\console.c   **** 						
3384:.\console.c   **** 						/* Writes parameter on EEPROM */
3385:.\console.c   **** 						dummy = WriteAllEEparams();
3386:.\console.c   **** 						printf(STR_REM_SIVP, (uint16)raw_invertion);   /* REM: pan axis absoluter sensor invertion se
3387:.\console.c   **** 					}
3388:.\console.c   **** 					else
3389:.\console.c   **** 					{
3390:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3391:.\console.c   **** 					}
3392:.\console.c   **** 					goto exitpars;
3393:.\console.c   **** 				}	
3394:.\console.c   **** 				// END ABSOLUTE SENSOR PAN INVERTION				
3395:.\console.c   **** 				
3396:.\console.c   **** 				
3397:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN ZERO (HOME)
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
3399:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zp") == 0))
3400:.\console.c   **** 				{	
3401:.\console.c   **** 					printf("* Warning! Put PAN Axis to zero (HOME) position and press y!");
3402:.\console.c   **** 					
3403:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3404:.\console.c   **** 					{						
3405:.\console.c   **** 						pan_absolute_sensor.param.raw_home = 0; 		/* reset absolute pan sensor zero raw 			*/
3406:.\console.c   **** 
3407:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3408:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 310


3409:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3410:.\console.c   **** 						
3411:.\console.c   **** 						//Delay
3412:.\console.c   **** 						CyDelay(1000);
3413:.\console.c   **** 						
3414:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3415:.\console.c   **** 						printf("* Statistics stop!\r\n");						
3416:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3417:.\console.c   **** 								
3418:.\console.c   **** 	
3419:.\console.c   **** 						/* Update Global Parameter			*/
3420:.\console.c   **** 						pan_absolute_sensor.param.raw_home = (int16)pan_absolute_sensor_stat.mean;
3421:.\console.c   **** 						printf(STR_REM_PASZ, (int16)pan_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Zer
3422:.\console.c   **** 					}
3423:.\console.c   **** 					else
3424:.\console.c   **** 					{
3425:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3426:.\console.c   **** 					}
3427:.\console.c   **** 						
3428:.\console.c   **** 					/* Update EEPROM */
3429:.\console.c   **** 					dummy = WriteAllEEparams();
3430:.\console.c   **** 
3431:.\console.c   **** 					goto exitpars;
3432:.\console.c   **** 				}	
3433:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN ZERO (HOME)
3434:.\console.c   **** 			
3435:.\console.c   **** 				
3436:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN LIMIT MIN
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
3438:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lminp") == 0))
3439:.\console.c   **** 				{	
3440:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MIN position and press y!");
3441:.\console.c   **** 					
3442:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3443:.\console.c   **** 					{						
3444:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute pan sensor limit min raw 	*/
3445:.\console.c   **** 
3446:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3447:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3448:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3449:.\console.c   **** 						
3450:.\console.c   **** 						//Delay
3451:.\console.c   **** 						CyDelay(1000);
3452:.\console.c   **** 						
3453:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3454:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3455:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3456:.\console.c   **** 	
3457:.\console.c   **** 						/* Update Global Parameter			*/
3458:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = (int16)pan_absolute_sensor_stat.mean;														
3459:.\console.c   **** 						printf(STR_REM_PMIN, (int16)pan_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Senso
3460:.\console.c   **** 					}
3461:.\console.c   **** 					else
3462:.\console.c   **** 					{
3463:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3464:.\console.c   **** 					}
3465:.\console.c   **** 						
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 311


3466:.\console.c   **** 					/* Update EEPROM */
3467:.\console.c   **** 					dummy = WriteAllEEparams();
3468:.\console.c   **** 
3469:.\console.c   **** 					goto exitpars;
3470:.\console.c   **** 				}	
3471:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN LIMIT MIN
3472:.\console.c   **** 				
3473:.\console.c   **** 				
3474:.\console.c   **** 				//SET ABSOLUTE SENSOR PAN LIMIT MAX
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
3476:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxp") == 0))
3477:.\console.c   **** 				{	
3478:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MAX position and press y!");
3479:.\console.c   **** 					
3480:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3481:.\console.c   **** 					{						
3482:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute pan sensor limit max raw 	*/
3483:.\console.c   **** 
3484:.\console.c   **** 						//start Pan Absolute Sensor Statistics
3485:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3486:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
3487:.\console.c   **** 						
3488:.\console.c   **** 						//Delay
3489:.\console.c   **** 						CyDelay(1000);
3490:.\console.c   **** 						
3491:.\console.c   **** 						//stop Pan Absolute Sensor Statistics
3492:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
3493:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3494:.\console.c   **** 	
3495:.\console.c   **** 						/* Update Global Parameter			*/
3496:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = (int16)pan_absolute_sensor_stat.mean;
3497:.\console.c   **** 						printf(STR_REM_PMAX, (int16)pan_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Senso
3498:.\console.c   **** 					}
3499:.\console.c   **** 					else
3500:.\console.c   **** 					{
3501:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
3502:.\console.c   **** 					}
3503:.\console.c   **** 						
3504:.\console.c   **** 					/* Update EEPROM */
3505:.\console.c   **** 					dummy = WriteAllEEparams();
3506:.\console.c   **** 
3507:.\console.c   **** 					goto exitpars;
3508:.\console.c   **** 				}	
3509:.\console.c   **** 				//END SET ABSOLUTE SENSOR PAN LIMIT MAX)
3510:.\console.c   **** 				
3511:.\console.c   **** 				
3512:.\console.c   **** 				// SET ABSOLUTE SENSOR PAN LIMIT HYSTERESIS
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
3514:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystp") == 0))
3515:.\console.c   **** 				{	
3516:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
3517:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
3518:.\console.c   **** 					{
3519:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
3520:.\console.c   **** 						
3521:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3522:.\console.c   **** 						dummy = WriteAllEEparams();
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 312


3523:.\console.c   **** 						printf(STR_REM_PLHY, (uint16)raw_limit_hyst);   /* REM: pan axis absolute sensor limit hyster
3524:.\console.c   **** 					}
3525:.\console.c   **** 					else
3526:.\console.c   **** 					{
3527:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3528:.\console.c   **** 					}
3529:.\console.c   **** 					goto exitpars;
3530:.\console.c   **** 				}	
3531:.\console.c   **** 				// END ABSOLUTE SENSOR PAN LIMIT HYSTERESIS		
3532:.\console.c   **** 				
3533:.\console.c   **** 				
3534:.\console.c   **** 				// SET PAN ENCODER OVER ABSOLUTE SENSOR RATIO
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
3536:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiop") == 0))
3537:.\console.c   **** 				{	
3538:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
3539:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
3540:.\console.c   **** 					{
3541:.\console.c   **** 						pan_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
3542:.\console.c   **** 						
3543:.\console.c   **** 						/* Writes Parameter on EEPROM */
3544:.\console.c   **** 						dummy = WriteAllEEparams();
3545:.\console.c   **** 						printf(STR_REM_PEAR, (float)step_abs_ratio);   /* REM: pan encoder over absolute sensor ratio
3546:.\console.c   **** 					}
3547:.\console.c   **** 					else
3548:.\console.c   **** 					{
3549:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3550:.\console.c   **** 					}
3551:.\console.c   **** 					goto exitpars;
3552:.\console.c   **** 				}	
3553:.\console.c   **** 				// END PAN ENCODER OVER ABSOLUTE SENSOR RATIO	
3554:.\console.c   **** 				
3555:.\console.c   **** 				
3556:.\console.c   **** 				// SET TILT MOTOR LIMIT CONTROL
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
3558:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lct") == 0))
3559:.\console.c   **** 				{	
3560:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
3561:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
3562:.\console.c   **** 					{
3563:.\console.c   **** 						tilt_axis.param.limit_control = limit_control;
3564:.\console.c   **** 						
3565:.\console.c   **** 						/* Writes parameter on EEPROM */
3566:.\console.c   **** 						dummy = WriteAllEEparams();
3567:.\console.c   **** 						printf(STR_REM_STLT, (uint16)limit_control);   /* REM: tilt axis limit control setted to...*/
3568:.\console.c   **** 					}
3569:.\console.c   **** 					else
3570:.\console.c   **** 					{
3571:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3572:.\console.c   **** 					}
3573:.\console.c   **** 					goto exitpars;
3574:.\console.c   **** 				}	
3575:.\console.c   **** 				// END TILT MOTOR LIMIT CONTROL	
3576:.\console.c   **** 				
3577:.\console.c   **** 				
3578:.\console.c   **** 				// SET ABSOLUTE SENSOR TILT INVERTION
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 313


3580:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invt") == 0))
3581:.\console.c   **** 				{	
3582:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
3583:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
3584:.\console.c   **** 					{
3585:.\console.c   **** 						tilt_absolute_sensor.param.raw_invertion = raw_invertion;
3586:.\console.c   **** 						
3587:.\console.c   **** 						/* Writes parameter on EEPROM */
3588:.\console.c   **** 						dummy = WriteAllEEparams();
3589:.\console.c   **** 						printf(STR_REM_SIVT, (uint16)raw_invertion);   /* REM: tilt axis absoluter sensor invertion s
3590:.\console.c   **** 					}
3591:.\console.c   **** 					else
3592:.\console.c   **** 					{
3593:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3594:.\console.c   **** 					}
3595:.\console.c   **** 					goto exitpars;
3596:.\console.c   **** 				}	
3597:.\console.c   **** 				// END ABSOLUTE SENSOR TILT INVERTION				
3598:.\console.c   **** 				
3599:.\console.c   **** 				
3600:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT ZERO (HOME)
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
3602:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zt") == 0))
3603:.\console.c   **** 				{	
3604:.\console.c   **** 					printf("* Warning! Put TILT Axis to zero (HOME) position and press y!");
3605:.\console.c   **** 					
3606:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3607:.\console.c   **** 					{						
3608:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = 0; 		/* reset absolute tilt sensor zero raw 			*/
3609:.\console.c   **** 
3610:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3611:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3612:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3613:.\console.c   **** 						
3614:.\console.c   **** 						//Delay
3615:.\console.c   **** 						CyDelay(1000);
3616:.\console.c   **** 						
3617:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3618:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3619:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3620:.\console.c   **** 	
3621:.\console.c   **** 						/* Update Global Parameter			*/
3622:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = (int16)tilt_absolute_sensor_stat.mean;
3623:.\console.c   **** 						printf(STR_REM_TASZ, (int16)tilt_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Ze
3624:.\console.c   **** 					}
3625:.\console.c   **** 					else
3626:.\console.c   **** 					{
3627:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3628:.\console.c   **** 					}
3629:.\console.c   **** 						
3630:.\console.c   **** 					/* Update EEPROM */
3631:.\console.c   **** 					dummy = WriteAllEEparams();
3632:.\console.c   **** 
3633:.\console.c   **** 					goto exitpars;
3634:.\console.c   **** 				}	
3635:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT ZERO (HOME)				
3636:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 314


3637:.\console.c   **** 				
3638:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT LIMIT MIN
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
3640:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmint") == 0))
3641:.\console.c   **** 				{	
3642:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MIN position and press y!");
3643:.\console.c   **** 					
3644:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3645:.\console.c   **** 					{						
3646:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute tilt sensor limit min raw 	
3647:.\console.c   **** 
3648:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3649:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3650:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3651:.\console.c   **** 						
3652:.\console.c   **** 						//Delay
3653:.\console.c   **** 						CyDelay(1000);
3654:.\console.c   **** 						
3655:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
3656:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3657:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3658:.\console.c   **** 	
3659:.\console.c   **** 						/* Update Global Parameter			*/
3660:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = (int16)tilt_absolute_sensor_stat.mean;												
3661:.\console.c   **** 						printf(STR_REM_TMIN, (int16)tilt_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Sens
3662:.\console.c   **** 					}
3663:.\console.c   **** 					else
3664:.\console.c   **** 					{
3665:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3666:.\console.c   **** 					}
3667:.\console.c   **** 						
3668:.\console.c   **** 					/* Update EEPROM */
3669:.\console.c   **** 					dummy = WriteAllEEparams();
3670:.\console.c   **** 
3671:.\console.c   **** 					goto exitpars;
3672:.\console.c   **** 				}	
3673:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT LIMIT MIN
3674:.\console.c   **** 				
3675:.\console.c   **** 				
3676:.\console.c   **** 				//SET ABSOLUTE SENSOR TILT LIMIT MAX
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
3678:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxt") == 0))
3679:.\console.c   **** 				{	
3680:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MAX position and press y!");
3681:.\console.c   **** 					
3682:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
3683:.\console.c   **** 					{						
3684:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute tilt sensor limit max raw 	
3685:.\console.c   **** 
3686:.\console.c   **** 						//start Tilt Absolute Sensor Statistics
3687:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
3688:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
3689:.\console.c   **** 						
3690:.\console.c   **** 						//Delay
3691:.\console.c   **** 						CyDelay(1000);
3692:.\console.c   **** 						
3693:.\console.c   **** 						//stop Tilt Absolute Sensor Statistics
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 315


3694:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
3695:.\console.c   **** 						printf("* Statistics stop!\r\n");								
3696:.\console.c   **** 	
3697:.\console.c   **** 						/* Update Global Parameter			*/
3698:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = (int16)tilt_absolute_sensor_stat.mean;
3699:.\console.c   **** 						printf(STR_REM_TMAX, (int16)tilt_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Sens
3700:.\console.c   **** 					}
3701:.\console.c   **** 					else
3702:.\console.c   **** 					{
3703:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
3704:.\console.c   **** 					}
3705:.\console.c   **** 						
3706:.\console.c   **** 					/* Update EEPROM */
3707:.\console.c   **** 					dummy = WriteAllEEparams();
3708:.\console.c   **** 
3709:.\console.c   **** 					goto exitpars;
3710:.\console.c   **** 				}	
3711:.\console.c   **** 				//END SET ABSOLUTE SENSOR TILT LIMIT MAX)
3712:.\console.c   **** 
3713:.\console.c   **** 				
3714:.\console.c   **** 				// SET ABSOLUTE SENSOR TILT LIMIT HYSTERESIS
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
3716:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystt") == 0))
3717:.\console.c   **** 				{	
3718:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
3719:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
3720:.\console.c   **** 					{
3721:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
3722:.\console.c   **** 						
3723:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3724:.\console.c   **** 						dummy = WriteAllEEparams();
3725:.\console.c   **** 						printf(STR_REM_TLHY, (uint16)raw_limit_hyst);   /* REM: tilt axis absolute sensor limit hyste
3726:.\console.c   **** 					}
3727:.\console.c   **** 					else
3728:.\console.c   **** 					{
3729:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3730:.\console.c   **** 					}
3731:.\console.c   **** 					goto exitpars;
3732:.\console.c   **** 				}	
3733:.\console.c   **** 				// END ABSOLUTE SENSOR TILT LIMIT HYSTERESIS		
3734:.\console.c   **** 			
3735:.\console.c   **** 				
3736:.\console.c   **** 				// SET TILT ENCODER OVER ABSOLUTE SENSOR RATIO
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
3738:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiot") == 0))
3739:.\console.c   **** 				{	
3740:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
3741:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
3742:.\console.c   **** 					{
3743:.\console.c   **** 						tilt_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
3744:.\console.c   **** 						
3745:.\console.c   **** 						/* Writes Parameter on EEPROM */
3746:.\console.c   **** 						dummy = WriteAllEEparams();
3747:.\console.c   **** 						printf(STR_REM_TEAR, (float)step_abs_ratio);   /* REM: tilt encoder over absolute sensor rati
3748:.\console.c   **** 					}
3749:.\console.c   **** 					else
3750:.\console.c   **** 					{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 316


3751:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3752:.\console.c   **** 					}
3753:.\console.c   **** 					goto exitpars;
3754:.\console.c   **** 				}	
3755:.\console.c   **** 				// END TILT ENCODER OVER ABSOLUTE SENSOR RATIO					
3756:.\console.c   **** 								
3757:.\console.c   **** 				
3758:.\console.c   **** 				// SET INVERTION YAW (IMU)
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
3760:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imuy") == 0))
3761:.\console.c   **** 				{	
3762:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3763:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3764:.\console.c   **** 					{
3765:.\console.c   **** 						IMU_sensor.param.yaw_invertion = invertion;
3766:.\console.c   **** 						
3767:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3768:.\console.c   **** 						dummy = WriteAllEEparams();
3769:.\console.c   **** 						printf(STR_REM_SINY, (uint16)IMU_sensor.param.yaw_invertion);   /* REM: Invertion Yaw setted 
3770:.\console.c   **** 					}
3771:.\console.c   **** 					else
3772:.\console.c   **** 					{
3773:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3774:.\console.c   **** 					}
3775:.\console.c   **** 					goto exitpars;
3776:.\console.c   **** 				}	
3777:.\console.c   **** 				// END SET INVERTION YAW (IMU)	
3778:.\console.c   **** 				
3779:.\console.c   **** 				
3780:.\console.c   **** 				// SET INVERTION PITCH (IMU)
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
3782:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imup") == 0))
3783:.\console.c   **** 				{	
3784:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3785:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
3786:.\console.c   **** 					{
3787:.\console.c   **** 						IMU_sensor.param.pitch_invertion = invertion;
3788:.\console.c   **** 						
3789:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3790:.\console.c   **** 						dummy = WriteAllEEparams();
3791:.\console.c   **** 						printf(STR_REM_SINP, (uint16)IMU_sensor.param.pitch_invertion);   /* REM: Invertion Pitch set
3792:.\console.c   **** 					}
3793:.\console.c   **** 					else
3794:.\console.c   **** 					{
3795:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3796:.\console.c   **** 					}
3797:.\console.c   **** 					goto exitpars;
3798:.\console.c   **** 				}	
3799:.\console.c   **** 				// END SET INVERTION PITCH (IMU)	
3800:.\console.c   **** 				
3801:.\console.c   **** 				
3802:.\console.c   **** 				// SET INVERTION ROLL (IMU)
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
3804:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imur") == 0))
3805:.\console.c   **** 				{	
3806:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
3807:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 317


3808:.\console.c   **** 					{
3809:.\console.c   **** 						IMU_sensor.param.roll_invertion = invertion;
3810:.\console.c   **** 						
3811:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3812:.\console.c   **** 						dummy = WriteAllEEparams();
3813:.\console.c   **** 						printf(STR_REM_SINR, (uint16)IMU_sensor.param.roll_invertion);   /* REM: Invertion Roll sette
3814:.\console.c   **** 					}
3815:.\console.c   **** 					else
3816:.\console.c   **** 					{
3817:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3818:.\console.c   **** 					}
3819:.\console.c   **** 					goto exitpars;
3820:.\console.c   **** 				}	
3821:.\console.c   **** 				// END SET INVERTION ROLL (IMU)	
3822:.\console.c   **** 				
3823:.\console.c   **** 				
3824:.\console.c   **** 				// SET PITCH ROLL EXCHANGE (IMU)
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
3826:.\console.c   **** 					(strcmp(actual_cmd.parameter, "prex") == 0))
3827:.\console.c   **** 				{	
3828:.\console.c   **** 					if (((exchange = atoi(actual_cmd.number1)) >= 0)
3829:.\console.c   **** 					&& (exchange = atoi(actual_cmd.number1)) <= 1)
3830:.\console.c   **** 					{
3831:.\console.c   **** 						IMU_sensor.param.pitch_roll_exchange = exchange;
3832:.\console.c   **** 						
3833:.\console.c   **** 						/* Writes Burst Period on EEPROM */
3834:.\console.c   **** 						dummy = WriteAllEEparams();
3835:.\console.c   **** 						printf(STR_REM_SPRX, (uint16)IMU_sensor.param.pitch_roll_exchange);   /* REM: Invertion Roll 
3836:.\console.c   **** 					}
3837:.\console.c   **** 					else
3838:.\console.c   **** 					{
3839:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3840:.\console.c   **** 					}
3841:.\console.c   **** 					goto exitpars;
3842:.\console.c   **** 				}	
3843:.\console.c   **** 				// END SET PITCH ROLL EXCHANGE (IMU)					
3844:.\console.c   **** 				
3845:.\console.c   **** 				
3846:.\console.c   **** 				//SET Q ELEMENT (SHOT)
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
3848:.\console.c   **** 					(strcmp(actual_cmd.parameter, "shot") == 0))
3849:.\console.c   **** 				{	
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
3851:.\console.c   **** 					    (strcmp(actual_cmd.number2, "c") == 0))
3852:.\console.c   **** 					   
3853:.\console.c   **** 					{					
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3855:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3856:.\console.c   **** 						{	
3857:.\console.c   **** 							/* Update Global Parameter and RT data	*/
3858:.\console.c   **** 							//if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
3859:.\console.c   **** 							if (q[q_table[q_number]].number != Q_NUMBER_UNUSED)
3860:.\console.c   **** 							{						
3861:.\console.c   **** 								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
3862:.\console.c   **** 								
3863:.\console.c   **** 								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
3864:.\console.c   **** 								
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 318


3865:.\console.c   **** 								/* Update EEPROM */
3866:.\console.c   **** 								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3867:.\console.c   **** 								{
3868:.\console.c   **** 									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3869:.\console.c   **** 								}
3870:.\console.c   **** 							}
3871:.\console.c   **** 							else
3872:.\console.c   **** 							{
3873:.\console.c   **** 								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
3874:.\console.c   **** 							}
3875:.\console.c   **** 						}
3876:.\console.c   **** 					}
3877:.\console.c   **** 					else if (((memory_number = atoi(actual_cmd.number2)) >= Q_MEMORY_NUMBER_MIN)
3878:.\console.c   **** 						    && (memory_number = atoi(actual_cmd.number2)) < Q_MEMORY_NUMBER_MAX)
3879:.\console.c   **** 					{					
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3881:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3882:.\console.c   **** 						{							
3883:.\console.c   **** 							printf("* Warning! Put All Axes to desired position and press y!");
3884:.\console.c   **** 							
3885:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _YES)
3886:.\console.c   **** 							{														
3887:.\console.c   **** 								if (strlen(actual_cmd.number2) != 0)
3888:.\console.c   **** 								{	
3889:.\console.c   **** 									//user defined memory number
3890:.\console.c   **** 									q_table[q_number] 			= memory_number;				  		/* save for fast indexing 	*/
3891:.\console.c   **** 								}
3892:.\console.c   **** 								else
3893:.\console.c   **** 								{
3894:.\console.c   **** 									//table standard memory number
3895:.\console.c   **** 									q_table[q_number] 			= qmemory_standard_address[q_number];	/* save for fast indexing 	*/
3896:.\console.c   **** 								}
3897:.\console.c   **** 								
3898:.\console.c   **** 								/* Update Global Parameters and RT data	*/
3899:.\console.c   **** 								q[q_table[q_number]].number									= (uint8)(q_number);
3900:.\console.c   **** 								q[q_table[q_number]].mc.position[PAN_AXIS]             		= pan_absolute_sensor.position;			
3901:.\console.c   **** 								q[q_table[q_number]].param.position_default[PAN_AXIS].fnum  = pan_absolute_sensor.position;
3902:.\console.c   **** 
3903:.\console.c   **** 								q[q_table[q_number]].mc.position[TILT_AXIS]            		= tilt_absolute_sensor.position;		
3904:.\console.c   **** 								q[q_table[q_number]].param.position_default[TILT_AXIS].fnum = tilt_absolute_sensor.position
3905:.\console.c   **** 								
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
3907:.\console.c   **** 									(uint16)q_number,
3908:.\console.c   **** 									(int32)pan_absolute_sensor.position,
3909:.\console.c   **** 									(int32)tilt_absolute_sensor.position,
3910:.\console.c   **** 									(int16)q_table[q_number]);	
3911:.\console.c   **** 							}
3912:.\console.c   **** 							else
3913:.\console.c   **** 							{
3914:.\console.c   **** 								printf("\r\n* Q element (shot) position not sampled!\r\n");								
3915:.\console.c   **** 							}
3916:.\console.c   **** 								
3917:.\console.c   **** 							/* Update EEPROM */
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3919:.\console.c   **** 							{
3920:.\console.c   **** 								printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3921:.\console.c   **** 							}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 319


3922:.\console.c   **** 						}
3923:.\console.c   **** 						else
3924:.\console.c   **** 						{
3925:.\console.c   **** 							printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
3926:.\console.c   **** 						}						
3927:.\console.c   **** 					}
3928:.\console.c   **** //					else if (strcmp(actual_cmd.number2, "c") == 0)
3929:.\console.c   **** //					//else if ((memory_number = atoi(actual_cmd.number2)) == Q_MEMORY_CLEAR_FLAG)
3930:.\console.c   **** //					{					
3931:.\console.c   **** //						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
3932:.\console.c   **** //						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
3933:.\console.c   **** //						{	
3934:.\console.c   **** //							/* Update Global Parameter and RT data	*/
3935:.\console.c   **** //							if (q_table[q_number] != Q_MEMORY_NOT_ALLOCATED)
3936:.\console.c   **** //							{						
3937:.\console.c   **** //								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
3938:.\console.c   **** //								
3939:.\console.c   **** //								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
3940:.\console.c   **** //								
3941:.\console.c   **** //								/* Update EEPROM */
3942:.\console.c   **** //								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
3943:.\console.c   **** //								{
3944:.\console.c   **** //									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
3945:.\console.c   **** //								}
3946:.\console.c   **** //							}
3947:.\console.c   **** //							else
3948:.\console.c   **** //							{
3949:.\console.c   **** //								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
3950:.\console.c   **** //							}
3951:.\console.c   **** //							
3952:.\console.c   **** //						}
3953:.\console.c   **** //					}
3954:.\console.c   **** 					else
3955:.\console.c   **** 					{
3956:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
3957:.\console.c   **** 					}
3958:.\console.c   **** 					goto exitpars;
3959:.\console.c   **** 				}	
3960:.\console.c   **** 				//END SET SET Q ELEMENT (SHOT)
3961:.\console.c   **** 				
3962:.\console.c   **** 				
3963:.\console.c   **** 				// SET PAN MOTOR Kp
3964:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpp") == 0)
3965:.\console.c   **** 				{	
3966:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
3967:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
3968:.\console.c   **** 					{
3969:.\console.c   **** 						pan_axis.param.Kpf.fnum = Kp;
3970:.\console.c   **** 						
3971:.\console.c   **** 						/* Writes Kp on EEPROM */
3972:.\console.c   **** 						dummy = WriteAllEEparams();
3973:.\console.c   **** 						printf(STR_REM_PMKP, (float)pan_axis.param.Kpf.fnum);   /* REM: Pan Motor Kp setted to...*/		
3974:.\console.c   **** 					}
3975:.\console.c   **** 					else
3976:.\console.c   **** 					{
3977:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3978:.\console.c   **** 					}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 320


3979:.\console.c   **** 					goto exitpars;
3980:.\console.c   **** 				}	
3981:.\console.c   **** 				// END SET PAN MOTOR Kp
3982:.\console.c   **** 
3983:.\console.c   **** 				
3984:.\console.c   **** 				// SET TILT MOTOR Kp
3985:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpt") == 0)
3986:.\console.c   **** 				{	
3987:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
3988:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
3989:.\console.c   **** 					{
3990:.\console.c   **** 						tilt_axis.param.Kpf.fnum = Kp;
3991:.\console.c   **** 						
3992:.\console.c   **** 						/* Writes Kp on EEPROM */
3993:.\console.c   **** 						dummy = WriteAllEEparams();
3994:.\console.c   **** 						printf(STR_REM_TMKP, (float)tilt_axis.param.Kpf.fnum);   /* REM: Tilt Motor Kp setted to...*/
3995:.\console.c   **** 					}
3996:.\console.c   **** 					else
3997:.\console.c   **** 					{
3998:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
3999:.\console.c   **** 					}
4000:.\console.c   **** 					goto exitpars;
4001:.\console.c   **** 				}	
4002:.\console.c   **** 				// END SET TILT MOTOR Kp				
4003:.\console.c   **** 				
4004:.\console.c   **** 				
4005:.\console.c   **** 				// SET PAN MOTOR Kd
4006:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdp") == 0)
4007:.\console.c   **** 				{	
4008:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
4009:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
4010:.\console.c   **** 					{
4011:.\console.c   **** 						pan_axis.param.Kdf.fnum = Kd;
4012:.\console.c   **** 						
4013:.\console.c   **** 						/* Writes Kp on EEPROM */
4014:.\console.c   **** 						dummy = WriteAllEEparams();
4015:.\console.c   **** 						printf(STR_REM_PMKD, (float)pan_axis.param.Kdf.fnum);   /* REM: Pan Motor Kd setted to...*/		
4016:.\console.c   **** 					}
4017:.\console.c   **** 					else
4018:.\console.c   **** 					{
4019:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4020:.\console.c   **** 					}
4021:.\console.c   **** 					goto exitpars;
4022:.\console.c   **** 				}	
4023:.\console.c   **** 				// END SET PAN MOTOR Kd
4024:.\console.c   **** 
4025:.\console.c   **** 				
4026:.\console.c   **** 				// SET TILT MOTOR Kd
4027:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdt") == 0)
4028:.\console.c   **** 				{	
4029:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
4030:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
4031:.\console.c   **** 					{
4032:.\console.c   **** 						tilt_axis.param.Kdf.fnum = Kd;
4033:.\console.c   **** 						
4034:.\console.c   **** 						/* Writes Kp on EEPROM */
4035:.\console.c   **** 						dummy = WriteAllEEparams();
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 321


4036:.\console.c   **** 						printf(STR_REM_TMKD, (float)tilt_axis.param.Kdf.fnum);   /* REM: Tilt Motor Kd setted to...*/
4037:.\console.c   **** 					}
4038:.\console.c   **** 					else
4039:.\console.c   **** 					{
4040:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4041:.\console.c   **** 					}
4042:.\console.c   **** 					goto exitpars;
4043:.\console.c   **** 				}	
4044:.\console.c   **** 				// END SET TILT MOTOR Kd				
4045:.\console.c   **** 				
4046:.\console.c   **** 				
4047:.\console.c   **** 				// SET PAN MOTOR Ki
4048:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kip") == 0)
4049:.\console.c   **** 				{	
4050:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
4051:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
4052:.\console.c   **** 					{
4053:.\console.c   **** 						pan_axis.param.Kif.fnum = Ki;
4054:.\console.c   **** 						
4055:.\console.c   **** 						/* Writes Ki on EEPROM */
4056:.\console.c   **** 						dummy = WriteAllEEparams();
4057:.\console.c   **** 						printf(STR_REM_PMKI, (float)pan_axis.param.Kif.fnum);   /* REM: Pan Motor Ki setted to...*/		
4058:.\console.c   **** 					}
4059:.\console.c   **** 					else
4060:.\console.c   **** 					{
4061:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4062:.\console.c   **** 					}
4063:.\console.c   **** 					goto exitpars;
4064:.\console.c   **** 				}	
4065:.\console.c   **** 				// END SET PAN MOTOR Ki
4066:.\console.c   **** 
4067:.\console.c   **** 				
4068:.\console.c   **** 				// SET TILT MOTOR Ki
4069:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kit") == 0)
4070:.\console.c   **** 				{	
4071:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
4072:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
4073:.\console.c   **** 					{
4074:.\console.c   **** 						tilt_axis.param.Kif.fnum = Ki;
4075:.\console.c   **** 						
4076:.\console.c   **** 						/* Writes Ki on EEPROM */
4077:.\console.c   **** 						dummy = WriteAllEEparams();
4078:.\console.c   **** 						printf(STR_REM_TMKI, (float)tilt_axis.param.Kif.fnum);   /* REM: Tilt Motor Ki setted to...*/
4079:.\console.c   **** 					}
4080:.\console.c   **** 					else
4081:.\console.c   **** 					{
4082:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4083:.\console.c   **** 					}
4084:.\console.c   **** 					goto exitpars;
4085:.\console.c   **** 				}	
4086:.\console.c   **** 				// END SET TILT MOTOR Ki				
4087:.\console.c   **** 				
4088:.\console.c   **** 				
4089:.\console.c   **** 				// SET PAN MOTOR Ksi
4090:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksip") == 0)
4091:.\console.c   **** 				{	
4092:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 322


4093:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
4094:.\console.c   **** 					{
4095:.\console.c   **** 						pan_axis.param.Ksif.fnum = Ksi;
4096:.\console.c   **** 						
4097:.\console.c   **** 						/* Writes Ksi on EEPROM */
4098:.\console.c   **** 						dummy = WriteAllEEparams();
4099:.\console.c   **** 						printf(STR_REM_PMKS, (float)pan_axis.param.Ksif.fnum);   /* REM: Pan Motor Ksi setted to...*/
4100:.\console.c   **** 					}
4101:.\console.c   **** 					else
4102:.\console.c   **** 					{
4103:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4104:.\console.c   **** 					}
4105:.\console.c   **** 					goto exitpars;
4106:.\console.c   **** 				}	
4107:.\console.c   **** 				// END SET PAN MOTOR Ksi
4108:.\console.c   **** 
4109:.\console.c   **** 				
4110:.\console.c   **** 				// SET TILT MOTOR Ksi
4111:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksit") == 0)
4112:.\console.c   **** 				{	
4113:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
4114:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
4115:.\console.c   **** 					{
4116:.\console.c   **** 						tilt_axis.param.Ksif.fnum = Ksi;
4117:.\console.c   **** 						
4118:.\console.c   **** 						/* Writes Ksi on EEPROM */
4119:.\console.c   **** 						dummy = WriteAllEEparams();
4120:.\console.c   **** 						printf(STR_REM_TMKS, (float)tilt_axis.param.Ksif.fnum);   /* REM: Tilt Motor Ksi setted to...
4121:.\console.c   **** 					}
4122:.\console.c   **** 					else
4123:.\console.c   **** 					{
4124:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4125:.\console.c   **** 					}
4126:.\console.c   **** 					goto exitpars;
4127:.\console.c   **** 				}	
4128:.\console.c   **** 				// END SET TILT MOTOR Ksi				
4129:.\console.c   **** 				
4130:.\console.c   **** 				
4131:.\console.c   **** 				// SET A[NAOUT]AXIS
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
4133:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaxis") == 0))
4134:.\console.c   **** 				{			
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
4136:.\console.c   **** 					{							
4137:.\console.c   **** 						if (strcmp(actual_cmd.number1, "pan") == 0)
4138:.\console.c   **** 						{								
4139:.\console.c   **** 							/* Update Global Volatile Parameter			*/
4140:.\console.c   **** 							Selected_ANAOUT=&pan_axis;
4141:.\console.c   **** 							printf(STR_REM_ANAXP);   /* REM: Anaout Axis setted to PAN*/
4142:.\console.c   **** 							
4143:.\console.c   **** 							CyDelay(100);
4144:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
4145:.\console.c   **** 							/* anapos_offset <-- correct value to zero oscilloscope output */
4146:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();							
4147:.\console.c   **** 						}
4148:.\console.c   **** 						
4149:.\console.c   **** 						if (strcmp(actual_cmd.number1, "tilt") == 0)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 323


4150:.\console.c   **** 						{
4151:.\console.c   **** 							/* Update Global Volatile Parameter			*/
4152:.\console.c   **** 							Selected_ANAOUT=&tilt_axis;
4153:.\console.c   **** 							printf(STR_REM_ANAXT);   /* REM: Anaout Axis setted to TILT*/
4154:.\console.c   **** 							
4155:.\console.c   **** 							CyDelay(100);
4156:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
4157:.\console.c   **** 							/* anapos_offset <-- correct value to zero oscilloscope output */
4158:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();	
4159:.\console.c   **** 						}
4160:.\console.c   **** 					
4161:.\console.c   **** 						/* Update EEPROM */
4162:.\console.c   **** 						dummy = WriteAllEEparams();
4163:.\console.c   **** 					}
4164:.\console.c   **** 					else
4165:.\console.c   **** 					{
4166:.\console.c   **** 						printf(STR_ERROR6);			/* ERROR6: Axis may be [pan,tilt,roll,all] */
4167:.\console.c   **** 					}
4168:.\console.c   **** 					goto exitpars;
4169:.\console.c   **** 				}	
4170:.\console.c   **** 				//END SET A[NAOUT]AXIS							
4171:.\console.c   **** 				
4172:.\console.c   **** 				
4173:.\console.c   **** 				// SET PAN MOTOR COLOR
4174:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colorp") == 0)
4175:.\console.c   **** 				{	
4176:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
4177:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
4178:.\console.c   **** 					{
4179:.\console.c   **** 						pan_axis.param.color = color;
4180:.\console.c   **** 						
4181:.\console.c   **** 						/* Writes Burst Period on EEPROM */
4182:.\console.c   **** 						dummy = WriteAllEEparams();
4183:.\console.c   **** 						printf(STR_REM_SCOL);   /* REM: pan axis color setted to...*/
4184:.\console.c   **** 						ShowParamsColor(&pan_axis);
4185:.\console.c   **** 					}
4186:.\console.c   **** 					else
4187:.\console.c   **** 					{
4188:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4189:.\console.c   **** 					}
4190:.\console.c   **** 					goto exitpars;
4191:.\console.c   **** 				}	
4192:.\console.c   **** 				// END PAN MOTOR COLOR
4193:.\console.c   **** 				
4194:.\console.c   **** 				
4195:.\console.c   **** 				// SET TILT MOTOR COLOR
4196:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colort") == 0)
4197:.\console.c   **** 				{	
4198:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
4199:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
4200:.\console.c   **** 					{
4201:.\console.c   **** 						tilt_axis.param.color = color;
4202:.\console.c   **** 						
4203:.\console.c   **** 						/* Writes Burst Period on EEPROM */
4204:.\console.c   **** 						dummy = WriteAllEEparams();
4205:.\console.c   **** 						printf(STR_REM_SCOLT);   /* REM: tilt axis color setted to...*/
4206:.\console.c   **** 						ShowParamsColor(&tilt_axis);						
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 324


4207:.\console.c   **** 					}
4208:.\console.c   **** 					else
4209:.\console.c   **** 					{
4210:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4211:.\console.c   **** 					}
4212:.\console.c   **** 					goto exitpars;
4213:.\console.c   **** 				}	
4214:.\console.c   **** 				// END SET TILT MOTOR COLOR				
4215:.\console.c   **** 				
4216:.\console.c   **** 				
4217:.\console.c   **** 				// SET PAN MOTOR Kopf
4218:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopfp") == 0)
4219:.\console.c   **** 				{	
4220:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
4221:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
4222:.\console.c   **** 					{
4223:.\console.c   **** 						pan_axis.param.Kopf.fnum = Kopf;
4224:.\console.c   **** 						
4225:.\console.c   **** 						/* Writes Ksi on EEPROM */
4226:.\console.c   **** 						dummy = WriteAllEEparams();
4227:.\console.c   **** 						printf(STR_REM_PKOF, (float)pan_axis.param.Kopf.fnum);   /* REM: Pan Motor Kopf setted to...*
4228:.\console.c   **** 					}
4229:.\console.c   **** 					else
4230:.\console.c   **** 					{
4231:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4232:.\console.c   **** 					}
4233:.\console.c   **** 					goto exitpars;
4234:.\console.c   **** 				}	
4235:.\console.c   **** 				// END SET PAN MOTOR Kopf		
4236:.\console.c   **** 				
4237:.\console.c   **** 				
4238:.\console.c   **** 				// SET TILT MOTOR Kopf
4239:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopft") == 0)
4240:.\console.c   **** 				{	
4241:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
4242:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
4243:.\console.c   **** 					{
4244:.\console.c   **** 						tilt_axis.param.Kopf.fnum = Kopf;
4245:.\console.c   **** 						
4246:.\console.c   **** 						/* Writes Ksi on EEPROM */
4247:.\console.c   **** 						dummy = WriteAllEEparams();
4248:.\console.c   **** 						printf(STR_REM_TKOF, (float)tilt_axis.param.Kopf.fnum);   /* REM: Tilt Motor Kopf setted to..
4249:.\console.c   **** 					}
4250:.\console.c   **** 					else
4251:.\console.c   **** 					{
4252:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4253:.\console.c   **** 					}
4254:.\console.c   **** 					goto exitpars;
4255:.\console.c   **** 				}	
4256:.\console.c   **** 				// END SET TILT MOTOR Kopf 					
4257:.\console.c   **** 
4258:.\console.c   **** 				
4259:.\console.c   **** 				// SET PAN MOTOR Again
4260:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againp") == 0)
4261:.\console.c   **** 				{	
4262:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
4263:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 325


4264:.\console.c   **** 					{
4265:.\console.c   **** 						pan_axis.param.Gain_ANAOUT.fnum = anaout_gain;
4266:.\console.c   **** 						
4267:.\console.c   **** 						/* Writes Ksi on EEPROM */
4268:.\console.c   **** 						dummy = WriteAllEEparams();
4269:.\console.c   **** 						printf(STR_REM_PAGA, (float)pan_axis.param.Gain_ANAOUT.fnum);   /* REM: Pan Motor Anaout Gain
4270:.\console.c   **** 					}
4271:.\console.c   **** 					else
4272:.\console.c   **** 					{
4273:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4274:.\console.c   **** 					}
4275:.\console.c   **** 					goto exitpars;
4276:.\console.c   **** 				}	
4277:.\console.c   **** 				// END SET PAN MOTOR Again	
4278:.\console.c   **** 				
4279:.\console.c   **** 				
4280:.\console.c   **** 				// SET TILT MOTOR Again
4281:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againt") == 0)
4282:.\console.c   **** 				{	
4283:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
4284:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
4285:.\console.c   **** 					{
4286:.\console.c   **** 						tilt_axis.param.Gain_ANAOUT.fnum = anaout_gain;
4287:.\console.c   **** 						
4288:.\console.c   **** 						/* Writes Ksi on EEPROM */
4289:.\console.c   **** 						dummy = WriteAllEEparams();
4290:.\console.c   **** 						printf(STR_REM_TAGA, (float)tilt_axis.param.Gain_ANAOUT.fnum);   /* REM: Tilt Motor Anaout Ga
4291:.\console.c   **** 					}
4292:.\console.c   **** 					else
4293:.\console.c   **** 					{
4294:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4295:.\console.c   **** 					}
4296:.\console.c   **** 					goto exitpars;
4297:.\console.c   **** 				}	
4298:.\console.c   **** 				// END SET TILT MOTOR Again				
4299:.\console.c   **** 				
4300:.\console.c   **** 				
4301:.\console.c   **** //				// SET KPLOWPASS
4302:.\console.c   **** //				if ((strcmp(actual_cmd.parameter, "kplowpass") == 0) ||
4303:.\console.c   **** //					(strcmp(actual_cmd.parameter, "kpl") == 0))
4304:.\console.c   **** //				{	
4305:.\console.c   **** //					if (((kplowpass = atoi(actual_cmd.number1)) >= 0)
4306:.\console.c   **** //					&& (kplowpass = atoi(actual_cmd.number1)) <= 1)
4307:.\console.c   **** //					{
4308:.\console.c   **** //						gobee_param.kplowpass = kplowpass;
4309:.\console.c   **** //						
4310:.\console.c   **** //						/* Writes Kp Low Pass flag on EEPROM */
4311:.\console.c   **** //						dummy = WriteAllEEparams();
4312:.\console.c   **** //						printf(STR_REM_SEKL, (uint16)kplowpass);   /* REM: kp Low Pass setted to...*/					
4313:.\console.c   **** //					}
4314:.\console.c   **** //					else
4315:.\console.c   **** //					{
4316:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4317:.\console.c   **** //					}
4318:.\console.c   **** //					goto exitpars;
4319:.\console.c   **** //				}	
4320:.\console.c   **** //				// END SET KP LOWPASS
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 326


4321:.\console.c   **** 
4322:.\console.c   **** 
4323:.\console.c   **** 				// SET ACC X AXIS ADC OFFSET
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
4325:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacxof") == 0))
4326:.\console.c   **** 				{	
4327:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4328:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4329:.\console.c   **** 					{
4330:.\console.c   **** 						gobee_param.x_acc_ADC_offset = (int16)offset;
4331:.\console.c   **** 						
4332:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4333:.\console.c   **** 						dummy = WriteAllEEparams();
4334:.\console.c   **** 						printf(STR_REM_SEAX, (int16)offset);   /* REM: ACC AXIS X ADC offset setted to...*/					
4335:.\console.c   **** 					}
4336:.\console.c   **** 					else
4337:.\console.c   **** 					{
4338:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4339:.\console.c   **** 					}
4340:.\console.c   **** 					goto exitpars;
4341:.\console.c   **** 				}	
4342:.\console.c   **** 				// END SET ACC X AXIS ADC OFFSET
4343:.\console.c   **** 
4344:.\console.c   **** 
4345:.\console.c   **** 				// SET ACC Y AXIS ADC OFFSET
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
4347:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacyof") == 0))
4348:.\console.c   **** 				{	
4349:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4350:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4351:.\console.c   **** 					{
4352:.\console.c   **** 						gobee_param.y_acc_ADC_offset = (int16)offset;
4353:.\console.c   **** 						
4354:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4355:.\console.c   **** 						dummy = WriteAllEEparams();
4356:.\console.c   **** 						printf(STR_REM_SEAY, (int16)offset);   /* REM: ACC AXIS Y ADC offset setted to...*/					
4357:.\console.c   **** 					}
4358:.\console.c   **** 					else
4359:.\console.c   **** 					{
4360:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4361:.\console.c   **** 					}
4362:.\console.c   **** 					goto exitpars;
4363:.\console.c   **** 				}	
4364:.\console.c   **** 				// END SET ACC Y AXIS ADC OFFSET
4365:.\console.c   **** 
4366:.\console.c   **** 				
4367:.\console.c   **** 				// SET ACC Z AXIS ADC OFFSET
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
4369:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaczof") == 0))
4370:.\console.c   **** 				{	
4371:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
4372:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
4373:.\console.c   **** 					{
4374:.\console.c   **** 						gobee_param.z_acc_ADC_offset = (int16)offset;
4375:.\console.c   **** 						
4376:.\console.c   **** 						/* Writes STEER DAC OFFSET on EEPROM */
4377:.\console.c   **** 						dummy = WriteAllEEparams();
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 327


4378:.\console.c   **** 						printf(STR_REM_SEAZ, (int16)offset);   /* REM: ACC AXIS Z ADC offset setted to...*/					
4379:.\console.c   **** 					}
4380:.\console.c   **** 					else
4381:.\console.c   **** 					{
4382:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4383:.\console.c   **** 					}
4384:.\console.c   **** 					goto exitpars;
4385:.\console.c   **** 				}	
4386:.\console.c   **** 				// END SET ACC Z AXIS ADC OFFSET				
4387:.\console.c   **** 		
4388:.\console.c   **** 				
4389:.\console.c   **** //				// SET Digital Gyro Offset FINE
4390:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "dgfine") == 0)
4391:.\console.c   **** //				{	
4392:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -10)
4393:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +10)
4394:.\console.c   **** //					{
4395:.\console.c   **** //						gobee_param.dgyro_offset_fine.fnum = offset_fine;
4396:.\console.c   **** //						
4397:.\console.c   **** //						/* Writes Ki on EEPROM */
4398:.\console.c   **** //						dummy = WriteAllEEparams();
4399:.\console.c   **** //						printf(STR_REM_STDF, (float)offset_fine);   /* REM: Digital Gyro Offset Fine...*/					
4400:.\console.c   **** //					}
4401:.\console.c   **** //					else
4402:.\console.c   **** //					{
4403:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4404:.\console.c   **** //					}
4405:.\console.c   **** //					goto exitpars;
4406:.\console.c   **** //				}	
4407:.\console.c   **** //				// END SET Digital Gyro Offset FINE
4408:.\console.c   **** 
4409:.\console.c   **** 
4410:.\console.c   **** //				// SET Analog Gyro Offset FINE
4411:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "agfine") == 0)
4412:.\console.c   **** //				{	
4413:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -10)
4414:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +10)
4415:.\console.c   **** //					{
4416:.\console.c   **** //						gobee_param.gyro_offset_fine.fnum = offset_fine;
4417:.\console.c   **** //						
4418:.\console.c   **** //						/* Writes Ki on EEPROM */
4419:.\console.c   **** //						dummy = WriteAllEEparams();
4420:.\console.c   **** //						printf(STR_REM_STOF, (float)offset_fine);   /* REM: Analog Gyro Offset Fine...*/					
4421:.\console.c   **** //					}
4422:.\console.c   **** //					else
4423:.\console.c   **** //					{
4424:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4425:.\console.c   **** //					}
4426:.\console.c   **** //					goto exitpars;
4427:.\console.c   **** //				}	
4428:.\console.c   **** //				// END SET Analog Gyro Offset FINE
4429:.\console.c   **** 
4430:.\console.c   **** 
4431:.\console.c   **** //				// SET Analog Gyro Scale Offset FINE
4432:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "agsfine") == 0)
4433:.\console.c   **** //				{	
4434:.\console.c   **** //					if (((offset_fine = atof(actual_cmd.number1)) >= -0.1)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 328


4435:.\console.c   **** //					&& (offset_fine = atof(actual_cmd.number1)) <= +0.1)
4436:.\console.c   **** //					{
4437:.\console.c   **** //						gobee_param.gyro_scale_offset_fine.fnum = offset_fine;
4438:.\console.c   **** //						
4439:.\console.c   **** //						/* Writes Ki on EEPROM */
4440:.\console.c   **** //						dummy = WriteAllEEparams();
4441:.\console.c   **** //						printf(STR_REM_STSF, (float)offset_fine);   /* REM: Analog Gyro Scale Offset Fine...*/					
4442:.\console.c   **** //					}
4443:.\console.c   **** //					else
4444:.\console.c   **** //					{
4445:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4446:.\console.c   **** //					}
4447:.\console.c   **** //					goto exitpars;
4448:.\console.c   **** //				}	
4449:.\console.c   **** //				// END SET Analog Gyro Scale Offset FINE
4450:.\console.c   **** 
4451:.\console.c   **** 
4452:.\console.c   **** 
4453:.\console.c   **** //			// SET alpha
4454:.\console.c   **** //				if (strcmp(actual_cmd.parameter, "alpha") == 0)
4455:.\console.c   **** //				{	
4456:.\console.c   **** //					if (((alpha = atof(actual_cmd.number1)) >= 0)
4457:.\console.c   **** //					&& (alpha = atof(actual_cmd.number1)) <= 1)
4458:.\console.c   **** //					{
4459:.\console.c   **** //						gobee_param.alpha.fnum = alpha;
4460:.\console.c   **** //						
4461:.\console.c   **** //						/* Writes alpha on EEPROM */
4462:.\console.c   **** //						dummy = WriteAllEEparams();
4463:.\console.c   **** //						printf(STR_REM_STAL, (float)gobee_param.alpha.fnum);   /* REM: alpha setted to...*/					
4464:.\console.c   **** //					}
4465:.\console.c   **** //					else
4466:.\console.c   **** //					{
4467:.\console.c   **** //						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4468:.\console.c   **** //					}
4469:.\console.c   **** //					goto exitpars;
4470:.\console.c   **** //				}	
4471:.\console.c   **** //				// END SET alpha
4472:.\console.c   **** 				
4473:.\console.c   **** 				
4474:.\console.c   **** 			// SET beta
4475:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "beta") == 0)
4476:.\console.c   **** 				{	
4477:.\console.c   **** 					if (((beta = atof(actual_cmd.number1)) >= 0)
4478:.\console.c   **** 					&& (beta = atof(actual_cmd.number1)) <= 1)
4479:.\console.c   **** 					{
4480:.\console.c   **** 						gobee_param.beta.fnum = beta;
4481:.\console.c   **** 						
4482:.\console.c   **** 						/* Writes alpha on EEPROM */
4483:.\console.c   **** 						dummy = WriteAllEEparams();
4484:.\console.c   **** 						printf(STR_REM_STBT, (float)gobee_param.beta.fnum);   /* REM: beta setted to...*/					
4485:.\console.c   **** 					}
4486:.\console.c   **** 					else
4487:.\console.c   **** 					{
4488:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4489:.\console.c   **** 					}
4490:.\console.c   **** 					goto exitpars;
4491:.\console.c   **** 				}	
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 329


4492:.\console.c   **** 				// END SET beta				
4493:.\console.c   **** 
4494:.\console.c   **** 				
4495:.\console.c   **** 				// SET gamma (IMU LPF)
4496:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "gamma") == 0)
4497:.\console.c   **** 				{	
4498:.\console.c   **** 					if (((gamma = atof(actual_cmd.number1)) >= 0)
4499:.\console.c   **** 					&& (gamma = atof(actual_cmd.number1)) <= 1)
4500:.\console.c   **** 					{
4501:.\console.c   **** 						IMU_sensor.param.gamma.fnum = gamma;
4502:.\console.c   **** 						
4503:.\console.c   **** 						/* Writes alpha on EEPROM */
4504:.\console.c   **** 						dummy = WriteAllEEparams();
4505:.\console.c   **** 						printf(STR_REM_STGM, (float)IMU_sensor.param.gamma.fnum);   /* REM: gamma setted to...*/					
4506:.\console.c   **** 					}
4507:.\console.c   **** 					else
4508:.\console.c   **** 					{
4509:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4510:.\console.c   **** 					}
4511:.\console.c   **** 					goto exitpars;
4512:.\console.c   **** 				}	
4513:.\console.c   **** 				// END SET gamma (IMU LPF)
4514:.\console.c   **** 
4515:.\console.c   **** 				
4516:.\console.c   **** 				// SET Jump G Threshold
4517:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "jumpth") == 0)
4518:.\console.c   **** 				{	
4519:.\console.c   **** 					if (((jump_g_th = atof(actual_cmd.number1)) >= 0)
4520:.\console.c   **** 					&& (jump_g_th = atof(actual_cmd.number1)) <= 10)
4521:.\console.c   **** 					{
4522:.\console.c   **** 						gobee_param.jump_g_threshold.fnum = jump_g_th;
4523:.\console.c   **** 						
4524:.\console.c   **** 						/* Writes alpha on EEPROM */
4525:.\console.c   **** 						dummy = WriteAllEEparams();
4526:.\console.c   **** 						printf(STR_REM_STJG, (float)gobee_param.jump_g_threshold.fnum);   /* REM: jump g thr setted t
4527:.\console.c   **** 					}
4528:.\console.c   **** 					else
4529:.\console.c   **** 					{
4530:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4531:.\console.c   **** 					}
4532:.\console.c   **** 					goto exitpars;
4533:.\console.c   **** 				}	
4534:.\console.c   **** 				// END SET Jump G Threshold		
4535:.\console.c   **** 				
4536:.\console.c   **** 				
4537:.\console.c   **** 				// SET Acceleration G Threshold
4538:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "accth") == 0)
4539:.\console.c   **** 				{	
4540:.\console.c   **** 					if (((acc_g_th = atof(actual_cmd.number1)) >= 0)
4541:.\console.c   **** 					&& (acc_g_th = atof(actual_cmd.number1)) <= 10)
4542:.\console.c   **** 					{
4543:.\console.c   **** 						gobee_param.acc_g_threshold.fnum = acc_g_th;
4544:.\console.c   **** 						
4545:.\console.c   **** 						/* Writes alpha on EEPROM */
4546:.\console.c   **** 						dummy = WriteAllEEparams();
4547:.\console.c   **** 						printf(STR_REM_STAG, (float)gobee_param.acc_g_threshold.fnum);   /* REM: acc g thr setted to.
4548:.\console.c   **** 					}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 330


4549:.\console.c   **** 					else
4550:.\console.c   **** 					{
4551:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4552:.\console.c   **** 					}
4553:.\console.c   **** 					goto exitpars;
4554:.\console.c   **** 				}	
4555:.\console.c   **** 				// END SET Acceleration G Threshold					
4556:.\console.c   **** 				
4557:.\console.c   **** 				
4558:.\console.c   **** 				// SET ASTIM TYPE
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
4560:.\console.c   **** 				   (strcmp(actual_cmd.parameter, "astimtype") == 0)) 
4561:.\console.c   **** 				{	
4562:.\console.c   **** 					if (((astim_type = atoi(actual_cmd.number1)) >= NO_ASTIM)
4563:.\console.c   **** 					&& (astim_type = atoi(actual_cmd.number1)) <= SQUARE_ASTIM)
4564:.\console.c   **** 					{		
4565:.\console.c   **** //						if (astim_type != NO_ASTIM)
4566:.\console.c   **** //						{
4567:.\console.c   **** //							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4568:.\console.c   **** //							printf(STR_ASTIMB);				//
4569:.\console.c   **** //							
4570:.\console.c   **** //							if (ButtonYNChoice(ECHO_ON) == _NO)
4571:.\console.c   **** //							{
4572:.\console.c   **** //								goto exitpars;
4573:.\console.c   **** //							}
4574:.\console.c   **** //							printf("\r\n");
4575:.\console.c   **** 							
4576:.\console.c   **** 							/* Update Global Volatile Parameter		*/
4577:.\console.c   **** 							pan_axis.vparam.astim_type  = astim_type;
4578:.\console.c   **** 							tilt_axis.vparam.astim_type = astim_type;						
4579:.\console.c   **** 							
4580:.\console.c   **** 							printf(STR_REM_ASTP, (uint16)astim_type);   /* REM: PAN  Astim Type Configured to...*/
4581:.\console.c   **** 							printf(STR_REM_ASTT, (uint16)astim_type);   /* REM: TILT Astim Type Configured to...*/						
4582:.\console.c   **** 							
4583:.\console.c   **** 							WaveDAC8_Start();					//Starts WaveDAC8	
4584:.\console.c   **** 							PGA_ASTIM_Start();					//Starts PGA_ASTIM
4585:.\console.c   **** 							
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
4587:.\console.c   **** 							{
4588:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
4589:.\console.c   **** 								Control_Reg_WS_Write(0);			//Selects wave 0
4590:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4591:.\console.c   **** 								printf("Sine Wave Astim Started!\r\n");							
4592:.\console.c   **** 							}
4593:.\console.c   **** 							else if (astim_type == TRIANGLE_ASTIM)
4594:.\console.c   **** 							{
4595:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
4596:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1																	
4597:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_triangle, WaveDAC8_WAVE_TRIANGLE_LENGTH);	//SELECTS TRIAN
4598:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4599:.\console.c   **** 								printf("Triangle Wave Astim Started!\r\n");								
4600:.\console.c   **** 							}
4601:.\console.c   **** 							else if (astim_type == SQUARE_ASTIM)
4602:.\console.c   **** 							{
4603:.\console.c   **** 								WaveDAC8_Stop();					//Stops 						
4604:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1	
4605:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_square, WaveDAC8_WAVE_SQUARE_LENGTH);	//SELECTS SQUARE
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 331


4606:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
4607:.\console.c   **** 								printf("Square Wave Astim Started!\r\n");								
4608:.\console.c   **** 							}						
4609:.\console.c   **** 							else if (astim_type == NO_ASTIM)
4610:.\console.c   **** 							{
4611:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8
4612:.\console.c   **** 								PGA_ASTIM_Stop();					//Stops PGA_ASTIM
4613:.\console.c   **** 								printf("Wave Astim Stopped!\r\n");							
4614:.\console.c   **** 							}	
4615:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4616:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4617:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4618:.\console.c   **** //						}
4619:.\console.c   **** 					}
4620:.\console.c   **** 					else
4621:.\console.c   **** 					{
4622:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4623:.\console.c   **** 					}
4624:.\console.c   **** 					goto exitpars;
4625:.\console.c   **** 				}	
4626:.\console.c   **** 				//END SET ASTIM TYPE
4627:.\console.c   **** 				
4628:.\console.c   **** 				
4629:.\console.c   **** 				// SET ASTIM PAN ENABLE
4630:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimp") == 0) 
4631:.\console.c   **** 				{	
4632:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
4633:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
4634:.\console.c   **** 					{		
4635:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
4636:.\console.c   **** 						{
4637:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4638:.\console.c   **** 							printf(STR_ASTIMB);				//
4639:.\console.c   **** 							
4640:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
4641:.\console.c   **** 							{
4642:.\console.c   **** 								goto exitpars;
4643:.\console.c   **** 							}
4644:.\console.c   **** 							printf("\r\n");	
4645:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4646:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4647:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4648:.\console.c   **** 						}
4649:.\console.c   **** 						/* Update Global Volatile Parameter		*/
4650:.\console.c   **** 						pan_axis.vparam.astim_enable  = astim_enable;
4651:.\console.c   **** 						
4652:.\console.c   **** 						printf(STR_REM_ASEP, (uint16)astim_enable);   /* REM: PAN  Astim Type Configured to...*/
4653:.\console.c   **** 					}
4654:.\console.c   **** 					else
4655:.\console.c   **** 					{
4656:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4657:.\console.c   **** 					}
4658:.\console.c   **** 					goto exitpars;
4659:.\console.c   **** 				}	
4660:.\console.c   **** 				//END SET ASTIM PAN ENABLE				
4661:.\console.c   **** 				
4662:.\console.c   **** 				
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 332


4663:.\console.c   **** 				// SET ASTIM TILT ENABLE
4664:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimt") == 0) 
4665:.\console.c   **** 				{	
4666:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
4667:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
4668:.\console.c   **** 					{		
4669:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
4670:.\console.c   **** 						{
4671:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
4672:.\console.c   **** 							printf(STR_ASTIMB);				//
4673:.\console.c   **** 							
4674:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
4675:.\console.c   **** 							{
4676:.\console.c   **** 								goto exitpars;
4677:.\console.c   **** 							}
4678:.\console.c   **** 							printf("\r\n");
4679:.\console.c   **** 	//						/* Autozero anapos offset when change Astim types				*/
4680:.\console.c   **** 	//						/* anapos_offset <-- correct value to zero oscilloscope output 	*/
4681:.\console.c   **** 	//						anapos_offset = GetAnaposOffsetZero();									
4682:.\console.c   **** 						}
4683:.\console.c   **** 							/* Update Global Volatile Parameter		*/
4684:.\console.c   **** 							tilt_axis.vparam.astim_enable  = astim_enable;
4685:.\console.c   **** 							
4686:.\console.c   **** 							printf(STR_REM_ASET, (uint16)astim_enable);   /* REM: TILT  Astim Type Configured to...*/
4687:.\console.c   **** 					}
4688:.\console.c   **** 					else
4689:.\console.c   **** 					{
4690:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
4691:.\console.c   **** 					}
4692:.\console.c   **** 					goto exitpars;
4693:.\console.c   **** 				}	
4694:.\console.c   **** 				//END SET ASTIM TILT ENABLE					
4695:.\console.c   **** 				
4696:.\console.c   **** 				
4697:.\console.c   **** //				// SET DEFAULT machine parameters
4698:.\console.c   **** //				if ((strcmp(actual_cmd.parameter, "default") == 0)
4699:.\console.c   **** //				|| (strcmp(actual_cmd.parameter, "defaults") == 0))
4700:.\console.c   **** //				{	
4701:.\console.c   **** //					if ((strlen(actual_cmd.number1)) == 0)
4702:.\console.c   **** //					{
4703:.\console.c   **** //						printf("Are you sure [Y/N]?");
4704:.\console.c   **** //						
4705:.\console.c   **** //						if (ButtonYNChoice(ECHO_ON) == _YES)
4706:.\console.c   **** //						{
4707:.\console.c   **** //							cys_param.nodeid = 1;					/* Default CAN/RS485 nodeid = 1 				*/
4708:.\console.c   **** //							cys_param.maxmotors = 8;				/* Default max motor number = 8 				*/
4709:.\console.c   **** //							cys_param.maxcurrent = 64; 				/* Default Medium Current 						*/
4710:.\console.c   **** //							cys_param.speed = VSTOP;				/* Default All Motor Stop 						*/
4711:.\console.c   **** //							cys_param.moveTimeoutms = 20000;		/* Default 20secs of moving before FAULT 		*/
4712:.\console.c   **** //							cys_param.currTimeoutms = 500;			/* Default 500msec before Current Fault     	*/
4713:.\console.c   **** //							cys_param.faultcurrent = 600;			/* Default faulcurrent=600*2,014362[mA]=1200[mA]*/	
4714:.\console.c   **** //				
4715:.\console.c   **** //							strcpy(cys_param.unicode, "12345678");	/* Deafult Unicode = "12345678"					*/									
4716:.\console.c   **** //							
4717:.\console.c   **** //							for (idx=0;idx<=7;idx++)
4718:.\console.c   **** //							{
4719:.\console.c   **** //								cys_param.targets1[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 1 Default */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 333


4720:.\console.c   **** //								cys_param.targets2[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 2 Default */
4721:.\console.c   **** //								cys_param.targets3[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 3 Default */
4722:.\console.c   **** //								cys_param.targets4[idx] = DEFAULT_TARGET_STEPS;	/* Target Steps Scene 4 Default */
4723:.\console.c   **** //							}
4724:.\console.c   **** //	
4725:.\console.c   **** //							/* Writes MAXCURRENT on DACS */
4726:.\console.c   **** //							VDAC_IREF_12_SetValue(cys_param.maxcurrent);
4727:.\console.c   **** //							VDAC_IREF_34_SetValue(cys_param.maxcurrent);
4728:.\console.c   **** //							VDAC_IREF_56_SetValue(cys_param.maxcurrent);
4729:.\console.c   **** //							VDAC_IREF_78_SetValue(cys_param.maxcurrent);	
4730:.\console.c   **** //	
4731:.\console.c   **** //							/* Writes DEFAULT parameters on EEPROM */
4732:.\console.c   **** //							dummy = WriteAllEEparams();						
4733:.\console.c   **** //							
4734:.\console.c   **** //							printf(STR_REM_DEFL);   /* REM: *All machine parameters setted to factory DEFAULT! */
4735:.\console.c   **** //						}
4736:.\console.c   **** //						else
4737:.\console.c   **** //						{
4738:.\console.c   **** //							printf(STR_REM_NODF);   /* REM: Machine parameters UNCHANGED! */
4739:.\console.c   **** //						}
4740:.\console.c   **** //					}
4741:.\console.c   **** //					else
4742:.\console.c   **** //					{
4743:.\console.c   **** //						printf(STR_ERROR1);		/* ERROR1: Too much parameters! */
4744:.\console.c   **** //					}
4745:.\console.c   **** //					goto exitpars;
4746:.\console.c   **** //				}					
4747:.\console.c   **** //				
4748:.\console.c   **** //				printf(STR_ERROR3);				/* ERROR3: Bad parameters */
4749:.\console.c   **** //				// altri casi di set
4750:.\console.c   **** //
4751:.\console.c   **** 			}
4752:.\console.c   **** 		goto exitpars;	
 11358              		.loc 1 4752 0
 11359 4b42 02F002BA 		b	.L710
 11360              	.L414:
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
 11361              		.loc 1 3266 0
 11362 4b46 3F48     		ldr	r0, .L747
 11363 4b48 40F20001 		movw	r1, #:lower16:.LC578
 11364 4b4c C0F20001 		movt	r1, #:upper16:.LC578
 11365 4b50 FFF7FEFF 		bl	strcmp
 11366 4b54 0346     		mov	r3, r0
 11367 4b56 002B     		cmp	r3, #0
 11368 4b58 09D0     		beq	.L416
3267:.\console.c   **** 					(strcmp(actual_cmd.parameter, "dir") == 0))
 11369              		.loc 1 3267 0 discriminator 1
 11370 4b5a 3A48     		ldr	r0, .L747
 11371 4b5c 40F20001 		movw	r1, #:lower16:.LC579
 11372 4b60 C0F20001 		movt	r1, #:upper16:.LC579
 11373 4b64 FFF7FEFF 		bl	strcmp
 11374 4b68 0346     		mov	r3, r0
3266:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "director") == 0) ||
 11375              		.loc 1 3266 0 discriminator 1
 11376 4b6a 002B     		cmp	r3, #0
 11377 4b6c 30D1     		bne	.L417
 11378              	.L416:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 334


3269:.\console.c   **** 					if (((director = atoi(actual_cmd.number1)) >= STANLEY)
 11379              		.loc 1 3269 0
 11380 4b6e 3648     		ldr	r0, .L747+4
 11381 4b70 FFF7FEFF 		bl	atoi
 11382 4b74 0346     		mov	r3, r0
 11383 4b76 87F8B330 		strb	r3, [r7, #179]
3270:.\console.c   **** 					&& (director = atoi(actual_cmd.number1)) <= JJ)
 11384              		.loc 1 3270 0
 11385 4b7a 3348     		ldr	r0, .L747+4
 11386 4b7c FFF7FEFF 		bl	atoi
 11387 4b80 0346     		mov	r3, r0
 11388 4b82 87F8B330 		strb	r3, [r7, #179]
 11389 4b86 97F8B330 		ldrb	r3, [r7, #179]	@ zero_extendqisi2
 11390 4b8a 122B     		cmp	r3, #18
 11391 4b8c 18D8     		bhi	.L418
3272:.\console.c   **** 						gobee_param.director = director;
 11392              		.loc 1 3272 0
 11393 4b8e 40F20003 		movw	r3, #:lower16:gobee_param
 11394 4b92 C0F20003 		movt	r3, #:upper16:gobee_param
 11395 4b96 97F8B320 		ldrb	r2, [r7, #179]
 11396 4b9a 5A70     		strb	r2, [r3, #1]
3275:.\console.c   **** 						dummy = WriteAllEEparams();
 11397              		.loc 1 3275 0
 11398 4b9c FFF7FEFF 		bl	WriteAllEEparams
 11399 4ba0 0346     		mov	r3, r0
 11400 4ba2 87F8D930 		strb	r3, [r7, #217]
3276:.\console.c   **** 						printf(STR_REM_SEDR, (uint16)director);   /* REM: director setted to...*/
 11401              		.loc 1 3276 0
 11402 4ba6 97F8B330 		ldrb	r3, [r7, #179]	@ zero_extendqisi2
 11403 4baa 40F20000 		movw	r0, #:lower16:.LC580
 11404 4bae C0F20000 		movt	r0, #:upper16:.LC580
 11405 4bb2 1946     		mov	r1, r3
 11406 4bb4 FFF7FEFF 		bl	printf
3277:.\console.c   **** 						ShowParamsDirector();
 11407              		.loc 1 3277 0
 11408 4bb8 FFF7FEFF 		bl	ShowParamsDirector
3283:.\console.c   **** 					goto exitpars;
 11409              		.loc 1 3283 0
 11410 4bbc 02F0C8B9 		b	.L131
 11411              	.L418:
3281:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11412              		.loc 1 3281 0
 11413 4bc0 40F20000 		movw	r0, #:lower16:.LC450
 11414 4bc4 C0F20000 		movt	r0, #:upper16:.LC450
 11415 4bc8 FFF7FEFF 		bl	printf
3283:.\console.c   **** 					goto exitpars;
 11416              		.loc 1 3283 0
 11417 4bcc 02F0C0B9 		b	.L131
 11418              	.L417:
3289:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "mode") == 0)
 11419              		.loc 1 3289 0
 11420 4bd0 1C48     		ldr	r0, .L747
 11421 4bd2 40F20001 		movw	r1, #:lower16:.LC581
 11422 4bd6 C0F20001 		movt	r1, #:upper16:.LC581
 11423 4bda FFF7FEFF 		bl	strcmp
 11424 4bde 0346     		mov	r3, r0
 11425 4be0 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 335


 11426 4be2 33D1     		bne	.L420
3291:.\console.c   **** 					if (((mode_loc = atoi(actual_cmd.number1)) >= REMOTECONTROL_MODE)
 11427              		.loc 1 3291 0
 11428 4be4 1848     		ldr	r0, .L747+4
 11429 4be6 FFF7FEFF 		bl	atoi
 11430 4bea 0346     		mov	r3, r0
 11431 4bec 87F8DA30 		strb	r3, [r7, #218]
3292:.\console.c   **** 					&& (mode_loc = atoi(actual_cmd.number1)) <= DIRECTOR_MODE)
 11432              		.loc 1 3292 0
 11433 4bf0 1548     		ldr	r0, .L747+4
 11434 4bf2 FFF7FEFF 		bl	atoi
 11435 4bf6 0346     		mov	r3, r0
 11436 4bf8 87F8DA30 		strb	r3, [r7, #218]
 11437 4bfc 97F8DA30 		ldrb	r3, [r7, #218]	@ zero_extendqisi2
 11438 4c00 012B     		cmp	r3, #1
 11439 4c02 16D8     		bhi	.L421
3294:.\console.c   **** 						gobee_param.mode = mode_loc;
 11440              		.loc 1 3294 0
 11441 4c04 40F20003 		movw	r3, #:lower16:gobee_param
 11442 4c08 C0F20003 		movt	r3, #:upper16:gobee_param
 11443 4c0c 97F8DA20 		ldrb	r2, [r7, #218]
 11444 4c10 1A70     		strb	r2, [r3, #0]
3297:.\console.c   **** 						dummy = WriteAllEEparams();
 11445              		.loc 1 3297 0
 11446 4c12 FFF7FEFF 		bl	WriteAllEEparams
 11447 4c16 0346     		mov	r3, r0
 11448 4c18 87F8D930 		strb	r3, [r7, #217]
3298:.\console.c   **** 						printf(STR_REM_SMOD, (uint16)mode_loc);   /* REM: machine mode setted to...*/					
 11449              		.loc 1 3298 0
 11450 4c1c 97F8DA30 		ldrb	r3, [r7, #218]	@ zero_extendqisi2
 11451 4c20 40F20000 		movw	r0, #:lower16:.LC582
 11452 4c24 C0F20000 		movt	r0, #:upper16:.LC582
 11453 4c28 1946     		mov	r1, r3
 11454 4c2a FFF7FEFF 		bl	printf
3304:.\console.c   **** 					goto exitpars;
 11455              		.loc 1 3304 0
 11456 4c2e 02F08FB9 		b	.L131
 11457              	.L421:
3302:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11458              		.loc 1 3302 0
 11459 4c32 40F20000 		movw	r0, #:lower16:.LC450
 11460 4c36 C0F20000 		movt	r0, #:upper16:.LC450
 11461 4c3a FFF7FEFF 		bl	printf
3304:.\console.c   **** 					goto exitpars;
 11462              		.loc 1 3304 0
 11463 4c3e 02F087B9 		b	.L131
 11464              	.L748:
 11465 4c42 00BF     		.align	2
 11466              	.L747:
 11467 4c44 0F000000 		.word	actual_cmd+15
 11468 4c48 1E000000 		.word	actual_cmd+30
 11469              	.L420:
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
 11470              		.loc 1 3310 0
 11471 4c4c BD48     		ldr	r0, .L749
 11472 4c4e 40F20001 		movw	r1, #:lower16:.LC583
 11473 4c52 C0F20001 		movt	r1, #:upper16:.LC583
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 336


 11474 4c56 FFF7FEFF 		bl	strcmp
 11475 4c5a 0346     		mov	r3, r0
 11476 4c5c 002B     		cmp	r3, #0
 11477 4c5e 09D0     		beq	.L423
3311:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polp") == 0))
 11478              		.loc 1 3311 0 discriminator 1
 11479 4c60 B848     		ldr	r0, .L749
 11480 4c62 40F20001 		movw	r1, #:lower16:.LC584
 11481 4c66 C0F20001 		movt	r1, #:upper16:.LC584
 11482 4c6a FFF7FEFF 		bl	strcmp
 11483 4c6e 0346     		mov	r3, r0
3310:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityp") == 0) ||
 11484              		.loc 1 3310 0 discriminator 1
 11485 4c70 002B     		cmp	r3, #0
 11486 4c72 2ED1     		bne	.L424
 11487              	.L423:
3313:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
 11488              		.loc 1 3313 0
 11489 4c74 B448     		ldr	r0, .L749+4
 11490 4c76 FFF7FEFF 		bl	atoi
 11491 4c7a 0346     		mov	r3, r0
 11492 4c7c 87F8F330 		strb	r3, [r7, #243]
3314:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
 11493              		.loc 1 3314 0
 11494 4c80 B148     		ldr	r0, .L749+4
 11495 4c82 FFF7FEFF 		bl	atoi
 11496 4c86 0346     		mov	r3, r0
 11497 4c88 87F8F330 		strb	r3, [r7, #243]
 11498 4c8c 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11499 4c90 012B     		cmp	r3, #1
 11500 4c92 16D8     		bhi	.L425
3316:.\console.c   **** 						pan_axis.param.polarity = polarity;
 11501              		.loc 1 3316 0
 11502 4c94 40F20003 		movw	r3, #:lower16:pan_axis
 11503 4c98 C0F20003 		movt	r3, #:upper16:pan_axis
 11504 4c9c 97F8F320 		ldrb	r2, [r7, #243]
 11505 4ca0 1A74     		strb	r2, [r3, #16]
3319:.\console.c   **** 						dummy = WriteAllEEparams();
 11506              		.loc 1 3319 0
 11507 4ca2 FFF7FEFF 		bl	WriteAllEEparams
 11508 4ca6 0346     		mov	r3, r0
 11509 4ca8 87F8D930 		strb	r3, [r7, #217]
3320:.\console.c   **** 						printf(STR_REM_SETP, (uint16)polarity);   /* REM: pan axis polarity setted to...*/					
 11510              		.loc 1 3320 0
 11511 4cac 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11512 4cb0 40F20000 		movw	r0, #:lower16:.LC585
 11513 4cb4 C0F20000 		movt	r0, #:upper16:.LC585
 11514 4cb8 1946     		mov	r1, r3
 11515 4cba FFF7FEFF 		bl	printf
3326:.\console.c   **** 					goto exitpars;
 11516              		.loc 1 3326 0
 11517 4cbe 02F047B9 		b	.L131
 11518              	.L425:
3324:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11519              		.loc 1 3324 0
 11520 4cc2 40F20000 		movw	r0, #:lower16:.LC450
 11521 4cc6 C0F20000 		movt	r0, #:upper16:.LC450
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 337


 11522 4cca FFF7FEFF 		bl	printf
3326:.\console.c   **** 					goto exitpars;
 11523              		.loc 1 3326 0
 11524 4cce 02F03FB9 		b	.L131
 11525              	.L424:
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
 11526              		.loc 1 3332 0
 11527 4cd2 9C48     		ldr	r0, .L749
 11528 4cd4 40F20001 		movw	r1, #:lower16:.LC586
 11529 4cd8 C0F20001 		movt	r1, #:upper16:.LC586
 11530 4cdc FFF7FEFF 		bl	strcmp
 11531 4ce0 0346     		mov	r3, r0
 11532 4ce2 002B     		cmp	r3, #0
 11533 4ce4 09D0     		beq	.L427
3333:.\console.c   **** 					(strcmp(actual_cmd.parameter, "polt") == 0))
 11534              		.loc 1 3333 0 discriminator 1
 11535 4ce6 9748     		ldr	r0, .L749
 11536 4ce8 40F20001 		movw	r1, #:lower16:.LC587
 11537 4cec C0F20001 		movt	r1, #:upper16:.LC587
 11538 4cf0 FFF7FEFF 		bl	strcmp
 11539 4cf4 0346     		mov	r3, r0
3332:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "polarityt") == 0) ||
 11540              		.loc 1 3332 0 discriminator 1
 11541 4cf6 002B     		cmp	r3, #0
 11542 4cf8 2ED1     		bne	.L428
 11543              	.L427:
3335:.\console.c   **** 					if (((polarity = atoi(actual_cmd.number1)) >= 0)
 11544              		.loc 1 3335 0
 11545 4cfa 9348     		ldr	r0, .L749+4
 11546 4cfc FFF7FEFF 		bl	atoi
 11547 4d00 0346     		mov	r3, r0
 11548 4d02 87F8F330 		strb	r3, [r7, #243]
3336:.\console.c   **** 					&& (polarity = atoi(actual_cmd.number1)) <= 1)
 11549              		.loc 1 3336 0
 11550 4d06 9048     		ldr	r0, .L749+4
 11551 4d08 FFF7FEFF 		bl	atoi
 11552 4d0c 0346     		mov	r3, r0
 11553 4d0e 87F8F330 		strb	r3, [r7, #243]
 11554 4d12 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11555 4d16 012B     		cmp	r3, #1
 11556 4d18 16D8     		bhi	.L429
3338:.\console.c   **** 						tilt_axis.param.polarity = polarity;
 11557              		.loc 1 3338 0
 11558 4d1a 40F20003 		movw	r3, #:lower16:tilt_axis
 11559 4d1e C0F20003 		movt	r3, #:upper16:tilt_axis
 11560 4d22 97F8F320 		ldrb	r2, [r7, #243]
 11561 4d26 1A74     		strb	r2, [r3, #16]
3341:.\console.c   **** 						dummy = WriteAllEEparams();
 11562              		.loc 1 3341 0
 11563 4d28 FFF7FEFF 		bl	WriteAllEEparams
 11564 4d2c 0346     		mov	r3, r0
 11565 4d2e 87F8D930 		strb	r3, [r7, #217]
3342:.\console.c   **** 						printf(STR_REM_SETPT, (uint16)polarity);   /* REM: tilt axis polarity setted to...*/					
 11566              		.loc 1 3342 0
 11567 4d32 97F8F330 		ldrb	r3, [r7, #243]	@ zero_extendqisi2
 11568 4d36 40F20000 		movw	r0, #:lower16:.LC588
 11569 4d3a C0F20000 		movt	r0, #:upper16:.LC588
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 338


 11570 4d3e 1946     		mov	r1, r3
 11571 4d40 FFF7FEFF 		bl	printf
3348:.\console.c   **** 					goto exitpars;
 11572              		.loc 1 3348 0
 11573 4d44 02F004B9 		b	.L131
 11574              	.L429:
3346:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11575              		.loc 1 3346 0
 11576 4d48 40F20000 		movw	r0, #:lower16:.LC450
 11577 4d4c C0F20000 		movt	r0, #:upper16:.LC450
 11578 4d50 FFF7FEFF 		bl	printf
3348:.\console.c   **** 					goto exitpars;
 11579              		.loc 1 3348 0
 11580 4d54 02F0FCB8 		b	.L131
 11581              	.L428:
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
 11582              		.loc 1 3354 0
 11583 4d58 7A48     		ldr	r0, .L749
 11584 4d5a 40F20001 		movw	r1, #:lower16:.LC589
 11585 4d5e C0F20001 		movt	r1, #:upper16:.LC589
 11586 4d62 FFF7FEFF 		bl	strcmp
 11587 4d66 0346     		mov	r3, r0
 11588 4d68 002B     		cmp	r3, #0
 11589 4d6a 09D0     		beq	.L431
3355:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lcp") == 0))
 11590              		.loc 1 3355 0 discriminator 1
 11591 4d6c 7548     		ldr	r0, .L749
 11592 4d6e 40F20001 		movw	r1, #:lower16:.LC590
 11593 4d72 C0F20001 		movt	r1, #:upper16:.LC590
 11594 4d76 FFF7FEFF 		bl	strcmp
 11595 4d7a 0346     		mov	r3, r0
3354:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitcp") == 0) ||
 11596              		.loc 1 3354 0 discriminator 1
 11597 4d7c 002B     		cmp	r3, #0
 11598 4d7e 2FD1     		bne	.L432
 11599              	.L431:
3357:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
 11600              		.loc 1 3357 0
 11601 4d80 7148     		ldr	r0, .L749+4
 11602 4d82 FFF7FEFF 		bl	atoi
 11603 4d86 0346     		mov	r3, r0
 11604 4d88 87F8B430 		strb	r3, [r7, #180]
3358:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
 11605              		.loc 1 3358 0
 11606 4d8c 6E48     		ldr	r0, .L749+4
 11607 4d8e FFF7FEFF 		bl	atoi
 11608 4d92 0346     		mov	r3, r0
 11609 4d94 87F8B430 		strb	r3, [r7, #180]
 11610 4d98 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 11611 4d9c 012B     		cmp	r3, #1
 11612 4d9e 17D8     		bhi	.L433
3360:.\console.c   **** 						pan_axis.param.limit_control = limit_control;
 11613              		.loc 1 3360 0
 11614 4da0 40F20003 		movw	r3, #:lower16:pan_axis
 11615 4da4 C0F20003 		movt	r3, #:upper16:pan_axis
 11616 4da8 97F8B420 		ldrb	r2, [r7, #180]
 11617 4dac 83F82D20 		strb	r2, [r3, #45]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 339


3363:.\console.c   **** 						dummy = WriteAllEEparams();
 11618              		.loc 1 3363 0
 11619 4db0 FFF7FEFF 		bl	WriteAllEEparams
 11620 4db4 0346     		mov	r3, r0
 11621 4db6 87F8D930 		strb	r3, [r7, #217]
3364:.\console.c   **** 						printf(STR_REM_STLP, (uint16)limit_control);   /* REM: pan axis limit control setted to...*/	
 11622              		.loc 1 3364 0
 11623 4dba 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 11624 4dbe 40F20000 		movw	r0, #:lower16:.LC591
 11625 4dc2 C0F20000 		movt	r0, #:upper16:.LC591
 11626 4dc6 1946     		mov	r1, r3
 11627 4dc8 FFF7FEFF 		bl	printf
3370:.\console.c   **** 					goto exitpars;
 11628              		.loc 1 3370 0
 11629 4dcc 02F0C0B8 		b	.L131
 11630              	.L433:
3368:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11631              		.loc 1 3368 0
 11632 4dd0 40F20000 		movw	r0, #:lower16:.LC450
 11633 4dd4 C0F20000 		movt	r0, #:upper16:.LC450
 11634 4dd8 FFF7FEFF 		bl	printf
3370:.\console.c   **** 					goto exitpars;
 11635              		.loc 1 3370 0
 11636 4ddc 02F0B8B8 		b	.L131
 11637              	.L432:
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
 11638              		.loc 1 3376 0
 11639 4de0 5848     		ldr	r0, .L749
 11640 4de2 40F20001 		movw	r1, #:lower16:.LC592
 11641 4de6 C0F20001 		movt	r1, #:upper16:.LC592
 11642 4dea FFF7FEFF 		bl	strcmp
 11643 4dee 0346     		mov	r3, r0
 11644 4df0 002B     		cmp	r3, #0
 11645 4df2 09D0     		beq	.L435
3377:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invp") == 0))
 11646              		.loc 1 3377 0 discriminator 1
 11647 4df4 5348     		ldr	r0, .L749
 11648 4df6 40F20001 		movw	r1, #:lower16:.LC593
 11649 4dfa C0F20001 		movt	r1, #:upper16:.LC593
 11650 4dfe FFF7FEFF 		bl	strcmp
 11651 4e02 0346     		mov	r3, r0
3376:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabsp") == 0) ||
 11652              		.loc 1 3376 0 discriminator 1
 11653 4e04 002B     		cmp	r3, #0
 11654 4e06 2FD1     		bne	.L436
 11655              	.L435:
3379:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
 11656              		.loc 1 3379 0
 11657 4e08 4F48     		ldr	r0, .L749+4
 11658 4e0a FFF7FEFF 		bl	atoi
 11659 4e0e 0346     		mov	r3, r0
 11660 4e10 87F8B530 		strb	r3, [r7, #181]
3380:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
 11661              		.loc 1 3380 0
 11662 4e14 4C48     		ldr	r0, .L749+4
 11663 4e16 FFF7FEFF 		bl	atoi
 11664 4e1a 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 340


 11665 4e1c 87F8B530 		strb	r3, [r7, #181]
 11666 4e20 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 11667 4e24 012B     		cmp	r3, #1
 11668 4e26 17D8     		bhi	.L437
3382:.\console.c   **** 						pan_absolute_sensor.param.raw_invertion = raw_invertion;
 11669              		.loc 1 3382 0
 11670 4e28 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11671 4e2c C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11672 4e30 97F8B520 		ldrb	r2, [r7, #181]
 11673 4e34 83F82C20 		strb	r2, [r3, #44]
3385:.\console.c   **** 						dummy = WriteAllEEparams();
 11674              		.loc 1 3385 0
 11675 4e38 FFF7FEFF 		bl	WriteAllEEparams
 11676 4e3c 0346     		mov	r3, r0
 11677 4e3e 87F8D930 		strb	r3, [r7, #217]
3386:.\console.c   **** 						printf(STR_REM_SIVP, (uint16)raw_invertion);   /* REM: pan axis absoluter sensor invertion se
 11678              		.loc 1 3386 0
 11679 4e42 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 11680 4e46 40F20000 		movw	r0, #:lower16:.LC594
 11681 4e4a C0F20000 		movt	r0, #:upper16:.LC594
 11682 4e4e 1946     		mov	r1, r3
 11683 4e50 FFF7FEFF 		bl	printf
3392:.\console.c   **** 					goto exitpars;
 11684              		.loc 1 3392 0
 11685 4e54 02F07CB8 		b	.L131
 11686              	.L437:
3390:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 11687              		.loc 1 3390 0
 11688 4e58 40F20000 		movw	r0, #:lower16:.LC450
 11689 4e5c C0F20000 		movt	r0, #:upper16:.LC450
 11690 4e60 FFF7FEFF 		bl	printf
3392:.\console.c   **** 					goto exitpars;
 11691              		.loc 1 3392 0
 11692 4e64 02F074B8 		b	.L131
 11693              	.L436:
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
 11694              		.loc 1 3398 0
 11695 4e68 3648     		ldr	r0, .L749
 11696 4e6a 40F20001 		movw	r1, #:lower16:.LC595
 11697 4e6e C0F20001 		movt	r1, #:upper16:.LC595
 11698 4e72 FFF7FEFF 		bl	strcmp
 11699 4e76 0346     		mov	r3, r0
 11700 4e78 002B     		cmp	r3, #0
 11701 4e7a 09D0     		beq	.L439
3399:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zp") == 0))
 11702              		.loc 1 3399 0 discriminator 1
 11703 4e7c 3148     		ldr	r0, .L749
 11704 4e7e 40F20001 		movw	r1, #:lower16:.LC596
 11705 4e82 C0F20001 		movt	r1, #:upper16:.LC596
 11706 4e86 FFF7FEFF 		bl	strcmp
 11707 4e8a 0346     		mov	r3, r0
3398:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabsp") == 0) ||
 11708              		.loc 1 3398 0 discriminator 1
 11709 4e8c 002B     		cmp	r3, #0
 11710 4e8e 5DD1     		bne	.L440
 11711              	.L439:
3401:.\console.c   **** 					printf("* Warning! Put PAN Axis to zero (HOME) position and press y!");
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 341


 11712              		.loc 1 3401 0
 11713 4e90 40F20000 		movw	r0, #:lower16:.LC597
 11714 4e94 C0F20000 		movt	r0, #:upper16:.LC597
 11715 4e98 FFF7FEFF 		bl	printf
3403:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 11716              		.loc 1 3403 0
 11717 4e9c 4FF00100 		mov	r0, #1
 11718 4ea0 FFF7FEFF 		bl	ButtonYNChoice
 11719 4ea4 0346     		mov	r3, r0
 11720 4ea6 012B     		cmp	r3, #1
 11721 4ea8 3FD1     		bne	.L441
3405:.\console.c   **** 						pan_absolute_sensor.param.raw_home = 0; 		/* reset absolute pan sensor zero raw 			*/
 11722              		.loc 1 3405 0
 11723 4eaa 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11724 4eae C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11725 4eb2 4FF00002 		mov	r2, #0
 11726 4eb6 DA85     		strh	r2, [r3, #46]	@ movhi
3408:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 11727              		.loc 1 3408 0
 11728 4eb8 40F20000 		movw	r0, #:lower16:.LC598
 11729 4ebc C0F20000 		movt	r0, #:upper16:.LC598
 11730 4ec0 FFF7FEFF 		bl	puts
3409:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 11731              		.loc 1 3409 0
 11732 4ec4 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11733 4ec8 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11734 4ecc FFF7FEFF 		bl	statistics_start
3412:.\console.c   **** 						CyDelay(1000);
 11735              		.loc 1 3412 0
 11736 4ed0 4FF47A70 		mov	r0, #1000
 11737 4ed4 FFF7FEFF 		bl	CyDelay
3415:.\console.c   **** 						printf("* Statistics stop!\r\n");						
 11738              		.loc 1 3415 0
 11739 4ed8 40F20000 		movw	r0, #:lower16:.LC599
 11740 4edc C0F20000 		movt	r0, #:upper16:.LC599
 11741 4ee0 FFF7FEFF 		bl	puts
3416:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 11742              		.loc 1 3416 0
 11743 4ee4 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11744 4ee8 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11745 4eec FFF7FEFF 		bl	statistics_stop
3420:.\console.c   **** 						pan_absolute_sensor.param.raw_home = (int16)pan_absolute_sensor_stat.mean;
 11746              		.loc 1 3420 0
 11747 4ef0 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 11748 4ef4 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 11749 4ef8 5B68     		ldr	r3, [r3, #4]	@ float
 11750 4efa 1846     		mov	r0, r3
 11751 4efc FFF7FEFF 		bl	__aeabi_f2iz
 11752 4f00 0346     		mov	r3, r0
 11753 4f02 9AB2     		uxth	r2, r3
 11754 4f04 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11755 4f08 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11756 4f0c DA85     		strh	r2, [r3, #46]	@ movhi
3421:.\console.c   **** 						printf(STR_REM_PASZ, (int16)pan_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Zer
 11757              		.loc 1 3421 0
 11758 4f0e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11759 4f12 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 342


 11760 4f16 DB8D     		ldrh	r3, [r3, #46]
 11761 4f18 1BB2     		sxth	r3, r3
 11762 4f1a 40F20000 		movw	r0, #:lower16:.LC600
 11763 4f1e C0F20000 		movt	r0, #:upper16:.LC600
 11764 4f22 1946     		mov	r1, r3
 11765 4f24 FFF7FEFF 		bl	printf
 11766 4f28 05E0     		b	.L442
 11767              	.L441:
3425:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 11768              		.loc 1 3425 0
 11769 4f2a 40F20000 		movw	r0, #:lower16:.LC601
 11770 4f2e C0F20000 		movt	r0, #:upper16:.LC601
 11771 4f32 FFF7FEFF 		bl	puts
 11772              	.L442:
3429:.\console.c   **** 					dummy = WriteAllEEparams();
 11773              		.loc 1 3429 0
 11774 4f36 FFF7FEFF 		bl	WriteAllEEparams
 11775 4f3a 0346     		mov	r3, r0
 11776 4f3c 87F8D930 		strb	r3, [r7, #217]
3431:.\console.c   **** 					goto exitpars;
 11777              		.loc 1 3431 0
 11778 4f40 02F006B8 		b	.L131
 11779              	.L750:
 11780              		.align	2
 11781              	.L749:
 11782 4f44 0F000000 		.word	actual_cmd+15
 11783 4f48 1E000000 		.word	actual_cmd+30
 11784              	.L440:
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
 11785              		.loc 1 3437 0
 11786 4f4c C148     		ldr	r0, .L751
 11787 4f4e 40F20001 		movw	r1, #:lower16:.LC602
 11788 4f52 C0F20001 		movt	r1, #:upper16:.LC602
 11789 4f56 FFF7FEFF 		bl	strcmp
 11790 4f5a 0346     		mov	r3, r0
 11791 4f5c 002B     		cmp	r3, #0
 11792 4f5e 09D0     		beq	.L443
3438:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lminp") == 0))
 11793              		.loc 1 3438 0 discriminator 1
 11794 4f60 BC48     		ldr	r0, .L751
 11795 4f62 40F20001 		movw	r1, #:lower16:.LC603
 11796 4f66 C0F20001 		movt	r1, #:upper16:.LC603
 11797 4f6a FFF7FEFF 		bl	strcmp
 11798 4f6e 0346     		mov	r3, r0
3437:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitminp") == 0) ||
 11799              		.loc 1 3437 0 discriminator 1
 11800 4f70 002B     		cmp	r3, #0
 11801 4f72 59D1     		bne	.L444
 11802              	.L443:
3440:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MIN position and press y!");
 11803              		.loc 1 3440 0
 11804 4f74 40F20000 		movw	r0, #:lower16:.LC604
 11805 4f78 C0F20000 		movt	r0, #:upper16:.LC604
 11806 4f7c FFF7FEFF 		bl	printf
3442:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 11807              		.loc 1 3442 0
 11808 4f80 4FF00100 		mov	r0, #1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 343


 11809 4f84 FFF7FEFF 		bl	ButtonYNChoice
 11810 4f88 0346     		mov	r3, r0
 11811 4f8a 012B     		cmp	r3, #1
 11812 4f8c 3FD1     		bne	.L445
3444:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute pan sensor limit min raw 	*/
 11813              		.loc 1 3444 0
 11814 4f8e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11815 4f92 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11816 4f96 4FF00002 		mov	r2, #0
 11817 4f9a 5A86     		strh	r2, [r3, #50]	@ movhi
3447:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 11818              		.loc 1 3447 0
 11819 4f9c 40F20000 		movw	r0, #:lower16:.LC598
 11820 4fa0 C0F20000 		movt	r0, #:upper16:.LC598
 11821 4fa4 FFF7FEFF 		bl	puts
3448:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 11822              		.loc 1 3448 0
 11823 4fa8 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11824 4fac C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11825 4fb0 FFF7FEFF 		bl	statistics_start
3451:.\console.c   **** 						CyDelay(1000);
 11826              		.loc 1 3451 0
 11827 4fb4 4FF47A70 		mov	r0, #1000
 11828 4fb8 FFF7FEFF 		bl	CyDelay
3454:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 11829              		.loc 1 3454 0
 11830 4fbc 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11831 4fc0 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11832 4fc4 FFF7FEFF 		bl	statistics_stop
3455:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 11833              		.loc 1 3455 0
 11834 4fc8 40F20000 		movw	r0, #:lower16:.LC599
 11835 4fcc C0F20000 		movt	r0, #:upper16:.LC599
 11836 4fd0 FFF7FEFF 		bl	puts
3458:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_min = (int16)pan_absolute_sensor_stat.mean;														
 11837              		.loc 1 3458 0
 11838 4fd4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 11839 4fd8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 11840 4fdc 5B68     		ldr	r3, [r3, #4]	@ float
 11841 4fde 1846     		mov	r0, r3
 11842 4fe0 FFF7FEFF 		bl	__aeabi_f2iz
 11843 4fe4 0346     		mov	r3, r0
 11844 4fe6 9AB2     		uxth	r2, r3
 11845 4fe8 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11846 4fec C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11847 4ff0 5A86     		strh	r2, [r3, #50]	@ movhi
3459:.\console.c   **** 						printf(STR_REM_PMIN, (int16)pan_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Senso
 11848              		.loc 1 3459 0
 11849 4ff2 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11850 4ff6 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11851 4ffa 5B8E     		ldrh	r3, [r3, #50]
 11852 4ffc 1BB2     		sxth	r3, r3
 11853 4ffe 40F20000 		movw	r0, #:lower16:.LC605
 11854 5002 C0F20000 		movt	r0, #:upper16:.LC605
 11855 5006 1946     		mov	r1, r3
 11856 5008 FFF7FEFF 		bl	printf
 11857 500c 05E0     		b	.L446
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 344


 11858              	.L445:
3463:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 11859              		.loc 1 3463 0
 11860 500e 40F20000 		movw	r0, #:lower16:.LC601
 11861 5012 C0F20000 		movt	r0, #:upper16:.LC601
 11862 5016 FFF7FEFF 		bl	puts
 11863              	.L446:
3467:.\console.c   **** 					dummy = WriteAllEEparams();
 11864              		.loc 1 3467 0
 11865 501a FFF7FEFF 		bl	WriteAllEEparams
 11866 501e 0346     		mov	r3, r0
 11867 5020 87F8D930 		strb	r3, [r7, #217]
3469:.\console.c   **** 					goto exitpars;
 11868              		.loc 1 3469 0
 11869 5024 01F094BF 		b	.L131
 11870              	.L444:
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
 11871              		.loc 1 3475 0
 11872 5028 8A48     		ldr	r0, .L751
 11873 502a 40F20001 		movw	r1, #:lower16:.LC606
 11874 502e C0F20001 		movt	r1, #:upper16:.LC606
 11875 5032 FFF7FEFF 		bl	strcmp
 11876 5036 0346     		mov	r3, r0
 11877 5038 002B     		cmp	r3, #0
 11878 503a 09D0     		beq	.L447
3476:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxp") == 0))
 11879              		.loc 1 3476 0 discriminator 1
 11880 503c 8548     		ldr	r0, .L751
 11881 503e 40F20001 		movw	r1, #:lower16:.LC607
 11882 5042 C0F20001 		movt	r1, #:upper16:.LC607
 11883 5046 FFF7FEFF 		bl	strcmp
 11884 504a 0346     		mov	r3, r0
3475:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxp") == 0) ||
 11885              		.loc 1 3475 0 discriminator 1
 11886 504c 002B     		cmp	r3, #0
 11887 504e 59D1     		bne	.L448
 11888              	.L447:
3478:.\console.c   **** 					printf("* Warning! Put PAN Axis to limit MAX position and press y!");
 11889              		.loc 1 3478 0
 11890 5050 40F20000 		movw	r0, #:lower16:.LC608
 11891 5054 C0F20000 		movt	r0, #:upper16:.LC608
 11892 5058 FFF7FEFF 		bl	printf
3480:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 11893              		.loc 1 3480 0
 11894 505c 4FF00100 		mov	r0, #1
 11895 5060 FFF7FEFF 		bl	ButtonYNChoice
 11896 5064 0346     		mov	r3, r0
 11897 5066 012B     		cmp	r3, #1
 11898 5068 3FD1     		bne	.L449
3482:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute pan sensor limit max raw 	*/
 11899              		.loc 1 3482 0
 11900 506a 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11901 506e C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11902 5072 4FF00002 		mov	r2, #0
 11903 5076 1A86     		strh	r2, [r3, #48]	@ movhi
3485:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 11904              		.loc 1 3485 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 345


 11905 5078 40F20000 		movw	r0, #:lower16:.LC598
 11906 507c C0F20000 		movt	r0, #:upper16:.LC598
 11907 5080 FFF7FEFF 		bl	puts
3486:.\console.c   **** 						statistics_start(&pan_absolute_sensor_stat);
 11908              		.loc 1 3486 0
 11909 5084 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11910 5088 C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11911 508c FFF7FEFF 		bl	statistics_start
3489:.\console.c   **** 						CyDelay(1000);
 11912              		.loc 1 3489 0
 11913 5090 4FF47A70 		mov	r0, #1000
 11914 5094 FFF7FEFF 		bl	CyDelay
3492:.\console.c   **** 						statistics_stop(&pan_absolute_sensor_stat);
 11915              		.loc 1 3492 0
 11916 5098 40F20000 		movw	r0, #:lower16:pan_absolute_sensor_stat
 11917 509c C0F20000 		movt	r0, #:upper16:pan_absolute_sensor_stat
 11918 50a0 FFF7FEFF 		bl	statistics_stop
3493:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 11919              		.loc 1 3493 0
 11920 50a4 40F20000 		movw	r0, #:lower16:.LC599
 11921 50a8 C0F20000 		movt	r0, #:upper16:.LC599
 11922 50ac FFF7FEFF 		bl	puts
3496:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_max = (int16)pan_absolute_sensor_stat.mean;
 11923              		.loc 1 3496 0
 11924 50b0 40F20003 		movw	r3, #:lower16:pan_absolute_sensor_stat
 11925 50b4 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor_stat
 11926 50b8 5B68     		ldr	r3, [r3, #4]	@ float
 11927 50ba 1846     		mov	r0, r3
 11928 50bc FFF7FEFF 		bl	__aeabi_f2iz
 11929 50c0 0346     		mov	r3, r0
 11930 50c2 9AB2     		uxth	r2, r3
 11931 50c4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11932 50c8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11933 50cc 1A86     		strh	r2, [r3, #48]	@ movhi
3497:.\console.c   **** 						printf(STR_REM_PMAX, (int16)pan_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Senso
 11934              		.loc 1 3497 0
 11935 50ce 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11936 50d2 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11937 50d6 1B8E     		ldrh	r3, [r3, #48]
 11938 50d8 1BB2     		sxth	r3, r3
 11939 50da 40F20000 		movw	r0, #:lower16:.LC609
 11940 50de C0F20000 		movt	r0, #:upper16:.LC609
 11941 50e2 1946     		mov	r1, r3
 11942 50e4 FFF7FEFF 		bl	printf
 11943 50e8 05E0     		b	.L450
 11944              	.L449:
3501:.\console.c   **** 						printf("\r\n* Pan Absolute Sensor position not sampled!\r\n");								
 11945              		.loc 1 3501 0
 11946 50ea 40F20000 		movw	r0, #:lower16:.LC601
 11947 50ee C0F20000 		movt	r0, #:upper16:.LC601
 11948 50f2 FFF7FEFF 		bl	puts
 11949              	.L450:
3505:.\console.c   **** 					dummy = WriteAllEEparams();
 11950              		.loc 1 3505 0
 11951 50f6 FFF7FEFF 		bl	WriteAllEEparams
 11952 50fa 0346     		mov	r3, r0
 11953 50fc 87F8D930 		strb	r3, [r7, #217]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 346


3507:.\console.c   **** 					goto exitpars;
 11954              		.loc 1 3507 0
 11955 5100 01F026BF 		b	.L131
 11956              	.L448:
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
 11957              		.loc 1 3513 0
 11958 5104 5348     		ldr	r0, .L751
 11959 5106 40F20001 		movw	r1, #:lower16:.LC610
 11960 510a C0F20001 		movt	r1, #:upper16:.LC610
 11961 510e FFF7FEFF 		bl	strcmp
 11962 5112 0346     		mov	r3, r0
 11963 5114 002B     		cmp	r3, #0
 11964 5116 09D0     		beq	.L451
3514:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystp") == 0))
 11965              		.loc 1 3514 0 discriminator 1
 11966 5118 4E48     		ldr	r0, .L751
 11967 511a 40F20001 		movw	r1, #:lower16:.LC611
 11968 511e C0F20001 		movt	r1, #:upper16:.LC611
 11969 5122 FFF7FEFF 		bl	strcmp
 11970 5126 0346     		mov	r3, r0
3513:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystp") == 0) ||
 11971              		.loc 1 3513 0 discriminator 1
 11972 5128 002B     		cmp	r3, #0
 11973 512a 2ED1     		bne	.L452
 11974              	.L451:
3516:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
 11975              		.loc 1 3516 0
 11976 512c 4A48     		ldr	r0, .L751+4
 11977 512e FFF7FEFF 		bl	atoi
 11978 5132 0346     		mov	r3, r0
 11979 5134 A7F8B630 		strh	r3, [r7, #182]	@ movhi
3517:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
 11980              		.loc 1 3517 0
 11981 5138 4748     		ldr	r0, .L751+4
 11982 513a FFF7FEFF 		bl	atoi
 11983 513e 0346     		mov	r3, r0
 11984 5140 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 11985 5144 B7F8B630 		ldrh	r3, [r7, #182]
 11986 5148 642B     		cmp	r3, #100
 11987 514a 16D8     		bhi	.L453
3519:.\console.c   **** 						pan_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
 11988              		.loc 1 3519 0
 11989 514c B7F8B620 		ldrh	r2, [r7, #182]
 11990 5150 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 11991 5154 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 11992 5158 9A86     		strh	r2, [r3, #52]	@ movhi
3522:.\console.c   **** 						dummy = WriteAllEEparams();
 11993              		.loc 1 3522 0
 11994 515a FFF7FEFF 		bl	WriteAllEEparams
 11995 515e 0346     		mov	r3, r0
 11996 5160 87F8D930 		strb	r3, [r7, #217]
3523:.\console.c   **** 						printf(STR_REM_PLHY, (uint16)raw_limit_hyst);   /* REM: pan axis absolute sensor limit hyster
 11997              		.loc 1 3523 0
 11998 5164 B7F8B630 		ldrh	r3, [r7, #182]
 11999 5168 40F20000 		movw	r0, #:lower16:.LC612
 12000 516c C0F20000 		movt	r0, #:upper16:.LC612
 12001 5170 1946     		mov	r1, r3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 347


 12002 5172 FFF7FEFF 		bl	printf
3529:.\console.c   **** 					goto exitpars;
 12003              		.loc 1 3529 0
 12004 5176 01F0EBBE 		b	.L131
 12005              	.L453:
3527:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12006              		.loc 1 3527 0
 12007 517a 40F20000 		movw	r0, #:lower16:.LC450
 12008 517e C0F20000 		movt	r0, #:upper16:.LC450
 12009 5182 FFF7FEFF 		bl	printf
3529:.\console.c   **** 					goto exitpars;
 12010              		.loc 1 3529 0
 12011 5186 01F0E3BE 		b	.L131
 12012              	.L452:
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
 12013              		.loc 1 3535 0
 12014 518a 3248     		ldr	r0, .L751
 12015 518c 40F20001 		movw	r1, #:lower16:.LC461
 12016 5190 C0F20001 		movt	r1, #:upper16:.LC461
 12017 5194 FFF7FEFF 		bl	strcmp
 12018 5198 0346     		mov	r3, r0
 12019 519a 002B     		cmp	r3, #0
 12020 519c 09D0     		beq	.L455
3536:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiop") == 0))
 12021              		.loc 1 3536 0 discriminator 1
 12022 519e 2D48     		ldr	r0, .L751
 12023 51a0 40F20001 		movw	r1, #:lower16:.LC462
 12024 51a4 C0F20001 		movt	r1, #:upper16:.LC462
 12025 51a8 FFF7FEFF 		bl	strcmp
 12026 51ac 0346     		mov	r3, r0
3535:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabsp") == 0) ||
 12027              		.loc 1 3535 0 discriminator 1
 12028 51ae 002B     		cmp	r3, #0
 12029 51b0 54D1     		bne	.L456
 12030              	.L455:
3538:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
 12031              		.loc 1 3538 0
 12032 51b2 2948     		ldr	r0, .L751+4
 12033 51b4 FFF7FEFF 		bl	atof
 12034 51b8 0246     		mov	r2, r0
 12035 51ba 0B46     		mov	r3, r1
 12036 51bc 1046     		mov	r0, r2
 12037 51be 1946     		mov	r1, r3
 12038 51c0 FFF7FEFF 		bl	__aeabi_d2f
 12039 51c4 0346     		mov	r3, r0
 12040 51c6 C7F8B830 		str	r3, [r7, #184]	@ float
 12041 51ca D7F8B800 		ldr	r0, [r7, #184]	@ float
 12042 51ce 4FF48041 		mov	r1, #16384
 12043 51d2 CCF21C61 		movt	r1, 50716
 12044 51d6 FFF7FEFF 		bl	__aeabi_fcmpge
 12045 51da 0346     		mov	r3, r0
 12046 51dc 002B     		cmp	r3, #0
 12047 51de 30D0     		beq	.L457
 12048              	.L652:
3539:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
 12049              		.loc 1 3539 0
 12050 51e0 1D48     		ldr	r0, .L751+4
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 348


 12051 51e2 FFF7FEFF 		bl	atof
 12052 51e6 0246     		mov	r2, r0
 12053 51e8 0B46     		mov	r3, r1
 12054 51ea 1046     		mov	r0, r2
 12055 51ec 1946     		mov	r1, r3
 12056 51ee FFF7FEFF 		bl	__aeabi_d2f
 12057 51f2 0346     		mov	r3, r0
 12058 51f4 C7F8B830 		str	r3, [r7, #184]	@ float
 12059 51f8 D7F8B800 		ldr	r0, [r7, #184]	@ float
 12060 51fc 4FF48041 		mov	r1, #16384
 12061 5200 C4F21C61 		movt	r1, 17948
 12062 5204 FFF7FEFF 		bl	__aeabi_fcmple
 12063 5208 0346     		mov	r3, r0
 12064 520a 002B     		cmp	r3, #0
 12065 520c 19D0     		beq	.L457
 12066              	.L653:
3541:.\console.c   **** 						pan_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
 12067              		.loc 1 3541 0
 12068 520e 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 12069 5212 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 12070 5216 D7F8B820 		ldr	r2, [r7, #184]	@ float
 12071 521a 9A63     		str	r2, [r3, #56]	@ float
3544:.\console.c   **** 						dummy = WriteAllEEparams();
 12072              		.loc 1 3544 0
 12073 521c FFF7FEFF 		bl	WriteAllEEparams
 12074 5220 0346     		mov	r3, r0
 12075 5222 87F8D930 		strb	r3, [r7, #217]
3545:.\console.c   **** 						printf(STR_REM_PEAR, (float)step_abs_ratio);   /* REM: pan encoder over absolute sensor ratio
 12076              		.loc 1 3545 0
 12077 5226 D7F8B800 		ldr	r0, [r7, #184]	@ float
 12078 522a FFF7FEFF 		bl	__aeabi_f2d
 12079 522e 0246     		mov	r2, r0
 12080 5230 0B46     		mov	r3, r1
 12081 5232 40F20000 		movw	r0, #:lower16:.LC613
 12082 5236 C0F20000 		movt	r0, #:upper16:.LC613
 12083 523a FFF7FEFF 		bl	printf
3551:.\console.c   **** 					goto exitpars;
 12084              		.loc 1 3551 0
 12085 523e 01F087BE 		b	.L131
 12086              	.L457:
3549:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12087              		.loc 1 3549 0
 12088 5242 40F20000 		movw	r0, #:lower16:.LC450
 12089 5246 C0F20000 		movt	r0, #:upper16:.LC450
 12090 524a FFF7FEFF 		bl	printf
3551:.\console.c   **** 					goto exitpars;
 12091              		.loc 1 3551 0
 12092 524e 01F07FBE 		b	.L131
 12093              	.L752:
 12094 5252 00BF     		.align	2
 12095              	.L751:
 12096 5254 0F000000 		.word	actual_cmd+15
 12097 5258 1E000000 		.word	actual_cmd+30
 12098              	.L456:
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
 12099              		.loc 1 3557 0
 12100 525c B148     		ldr	r0, .L753
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 349


 12101 525e 40F20001 		movw	r1, #:lower16:.LC614
 12102 5262 C0F20001 		movt	r1, #:upper16:.LC614
 12103 5266 FFF7FEFF 		bl	strcmp
 12104 526a 0346     		mov	r3, r0
 12105 526c 002B     		cmp	r3, #0
 12106 526e 09D0     		beq	.L461
3558:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lct") == 0))
 12107              		.loc 1 3558 0 discriminator 1
 12108 5270 AC48     		ldr	r0, .L753
 12109 5272 40F20001 		movw	r1, #:lower16:.LC615
 12110 5276 C0F20001 		movt	r1, #:upper16:.LC615
 12111 527a FFF7FEFF 		bl	strcmp
 12112 527e 0346     		mov	r3, r0
3557:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitct") == 0) ||
 12113              		.loc 1 3557 0 discriminator 1
 12114 5280 002B     		cmp	r3, #0
 12115 5282 2FD1     		bne	.L462
 12116              	.L461:
3560:.\console.c   **** 					if (((limit_control = atoi(actual_cmd.number1)) >= LIMIT_CONTROL_DISABLED)
 12117              		.loc 1 3560 0
 12118 5284 A848     		ldr	r0, .L753+4
 12119 5286 FFF7FEFF 		bl	atoi
 12120 528a 0346     		mov	r3, r0
 12121 528c 87F8B430 		strb	r3, [r7, #180]
3561:.\console.c   **** 					&& (limit_control = atoi(actual_cmd.number1)) <= LIMIT_CONTROL_ENABLED)
 12122              		.loc 1 3561 0
 12123 5290 A548     		ldr	r0, .L753+4
 12124 5292 FFF7FEFF 		bl	atoi
 12125 5296 0346     		mov	r3, r0
 12126 5298 87F8B430 		strb	r3, [r7, #180]
 12127 529c 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 12128 52a0 012B     		cmp	r3, #1
 12129 52a2 17D8     		bhi	.L463
3563:.\console.c   **** 						tilt_axis.param.limit_control = limit_control;
 12130              		.loc 1 3563 0
 12131 52a4 40F20003 		movw	r3, #:lower16:tilt_axis
 12132 52a8 C0F20003 		movt	r3, #:upper16:tilt_axis
 12133 52ac 97F8B420 		ldrb	r2, [r7, #180]
 12134 52b0 83F82D20 		strb	r2, [r3, #45]
3566:.\console.c   **** 						dummy = WriteAllEEparams();
 12135              		.loc 1 3566 0
 12136 52b4 FFF7FEFF 		bl	WriteAllEEparams
 12137 52b8 0346     		mov	r3, r0
 12138 52ba 87F8D930 		strb	r3, [r7, #217]
3567:.\console.c   **** 						printf(STR_REM_STLT, (uint16)limit_control);   /* REM: tilt axis limit control setted to...*/
 12139              		.loc 1 3567 0
 12140 52be 97F8B430 		ldrb	r3, [r7, #180]	@ zero_extendqisi2
 12141 52c2 40F20000 		movw	r0, #:lower16:.LC616
 12142 52c6 C0F20000 		movt	r0, #:upper16:.LC616
 12143 52ca 1946     		mov	r1, r3
 12144 52cc FFF7FEFF 		bl	printf
3573:.\console.c   **** 					goto exitpars;
 12145              		.loc 1 3573 0
 12146 52d0 01F03EBE 		b	.L131
 12147              	.L463:
3571:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12148              		.loc 1 3571 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 350


 12149 52d4 40F20000 		movw	r0, #:lower16:.LC450
 12150 52d8 C0F20000 		movt	r0, #:upper16:.LC450
 12151 52dc FFF7FEFF 		bl	printf
3573:.\console.c   **** 					goto exitpars;
 12152              		.loc 1 3573 0
 12153 52e0 01F036BE 		b	.L131
 12154              	.L462:
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
 12155              		.loc 1 3579 0
 12156 52e4 8F48     		ldr	r0, .L753
 12157 52e6 40F20001 		movw	r1, #:lower16:.LC617
 12158 52ea C0F20001 		movt	r1, #:upper16:.LC617
 12159 52ee FFF7FEFF 		bl	strcmp
 12160 52f2 0346     		mov	r3, r0
 12161 52f4 002B     		cmp	r3, #0
 12162 52f6 09D0     		beq	.L465
3580:.\console.c   **** 					(strcmp(actual_cmd.parameter, "invt") == 0))
 12163              		.loc 1 3580 0 discriminator 1
 12164 52f8 8A48     		ldr	r0, .L753
 12165 52fa 40F20001 		movw	r1, #:lower16:.LC618
 12166 52fe C0F20001 		movt	r1, #:upper16:.LC618
 12167 5302 FFF7FEFF 		bl	strcmp
 12168 5306 0346     		mov	r3, r0
3579:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "invabst") == 0) ||
 12169              		.loc 1 3579 0 discriminator 1
 12170 5308 002B     		cmp	r3, #0
 12171 530a 2FD1     		bne	.L466
 12172              	.L465:
3582:.\console.c   **** 					if (((raw_invertion = atoi(actual_cmd.number1)) >= ABS_SENSOR_TRUE)
 12173              		.loc 1 3582 0
 12174 530c 8648     		ldr	r0, .L753+4
 12175 530e FFF7FEFF 		bl	atoi
 12176 5312 0346     		mov	r3, r0
 12177 5314 87F8B530 		strb	r3, [r7, #181]
3583:.\console.c   **** 					&& (raw_invertion = atoi(actual_cmd.number1)) <= ABS_SENSOR_INVERTED)
 12178              		.loc 1 3583 0
 12179 5318 8348     		ldr	r0, .L753+4
 12180 531a FFF7FEFF 		bl	atoi
 12181 531e 0346     		mov	r3, r0
 12182 5320 87F8B530 		strb	r3, [r7, #181]
 12183 5324 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
 12184 5328 012B     		cmp	r3, #1
 12185 532a 17D8     		bhi	.L467
3585:.\console.c   **** 						tilt_absolute_sensor.param.raw_invertion = raw_invertion;
 12186              		.loc 1 3585 0
 12187 532c 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12188 5330 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12189 5334 97F8B520 		ldrb	r2, [r7, #181]
 12190 5338 83F82C20 		strb	r2, [r3, #44]
3588:.\console.c   **** 						dummy = WriteAllEEparams();
 12191              		.loc 1 3588 0
 12192 533c FFF7FEFF 		bl	WriteAllEEparams
 12193 5340 0346     		mov	r3, r0
 12194 5342 87F8D930 		strb	r3, [r7, #217]
3589:.\console.c   **** 						printf(STR_REM_SIVT, (uint16)raw_invertion);   /* REM: tilt axis absoluter sensor invertion s
 12195              		.loc 1 3589 0
 12196 5346 97F8B530 		ldrb	r3, [r7, #181]	@ zero_extendqisi2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 351


 12197 534a 40F20000 		movw	r0, #:lower16:.LC619
 12198 534e C0F20000 		movt	r0, #:upper16:.LC619
 12199 5352 1946     		mov	r1, r3
 12200 5354 FFF7FEFF 		bl	printf
3595:.\console.c   **** 					goto exitpars;
 12201              		.loc 1 3595 0
 12202 5358 01F0FABD 		b	.L131
 12203              	.L467:
3593:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12204              		.loc 1 3593 0
 12205 535c 40F20000 		movw	r0, #:lower16:.LC450
 12206 5360 C0F20000 		movt	r0, #:upper16:.LC450
 12207 5364 FFF7FEFF 		bl	printf
3595:.\console.c   **** 					goto exitpars;
 12208              		.loc 1 3595 0
 12209 5368 01F0F2BD 		b	.L131
 12210              	.L466:
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
 12211              		.loc 1 3601 0
 12212 536c 6D48     		ldr	r0, .L753
 12213 536e 40F20001 		movw	r1, #:lower16:.LC620
 12214 5372 C0F20001 		movt	r1, #:upper16:.LC620
 12215 5376 FFF7FEFF 		bl	strcmp
 12216 537a 0346     		mov	r3, r0
 12217 537c 002B     		cmp	r3, #0
 12218 537e 09D0     		beq	.L469
3602:.\console.c   **** 					(strcmp(actual_cmd.parameter, "zt") == 0))
 12219              		.loc 1 3602 0 discriminator 1
 12220 5380 6848     		ldr	r0, .L753
 12221 5382 40F20001 		movw	r1, #:lower16:.LC621
 12222 5386 C0F20001 		movt	r1, #:upper16:.LC621
 12223 538a FFF7FEFF 		bl	strcmp
 12224 538e 0346     		mov	r3, r0
3601:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "zeroabst") == 0) ||
 12225              		.loc 1 3601 0 discriminator 1
 12226 5390 002B     		cmp	r3, #0
 12227 5392 59D1     		bne	.L470
 12228              	.L469:
3604:.\console.c   **** 					printf("* Warning! Put TILT Axis to zero (HOME) position and press y!");
 12229              		.loc 1 3604 0
 12230 5394 40F20000 		movw	r0, #:lower16:.LC622
 12231 5398 C0F20000 		movt	r0, #:upper16:.LC622
 12232 539c FFF7FEFF 		bl	printf
3606:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12233              		.loc 1 3606 0
 12234 53a0 4FF00100 		mov	r0, #1
 12235 53a4 FFF7FEFF 		bl	ButtonYNChoice
 12236 53a8 0346     		mov	r3, r0
 12237 53aa 012B     		cmp	r3, #1
 12238 53ac 3FD1     		bne	.L471
3608:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = 0; 		/* reset absolute tilt sensor zero raw 			*/
 12239              		.loc 1 3608 0
 12240 53ae 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12241 53b2 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12242 53b6 4FF00002 		mov	r2, #0
 12243 53ba DA85     		strh	r2, [r3, #46]	@ movhi
3611:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 352


 12244              		.loc 1 3611 0
 12245 53bc 40F20000 		movw	r0, #:lower16:.LC598
 12246 53c0 C0F20000 		movt	r0, #:upper16:.LC598
 12247 53c4 FFF7FEFF 		bl	puts
3612:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12248              		.loc 1 3612 0
 12249 53c8 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12250 53cc C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12251 53d0 FFF7FEFF 		bl	statistics_start
3615:.\console.c   **** 						CyDelay(1000);
 12252              		.loc 1 3615 0
 12253 53d4 4FF47A70 		mov	r0, #1000
 12254 53d8 FFF7FEFF 		bl	CyDelay
3618:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12255              		.loc 1 3618 0
 12256 53dc 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12257 53e0 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12258 53e4 FFF7FEFF 		bl	statistics_stop
3619:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12259              		.loc 1 3619 0
 12260 53e8 40F20000 		movw	r0, #:lower16:.LC599
 12261 53ec C0F20000 		movt	r0, #:upper16:.LC599
 12262 53f0 FFF7FEFF 		bl	puts
3622:.\console.c   **** 						tilt_absolute_sensor.param.raw_home = (int16)tilt_absolute_sensor_stat.mean;
 12263              		.loc 1 3622 0
 12264 53f4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12265 53f8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12266 53fc 5B68     		ldr	r3, [r3, #4]	@ float
 12267 53fe 1846     		mov	r0, r3
 12268 5400 FFF7FEFF 		bl	__aeabi_f2iz
 12269 5404 0346     		mov	r3, r0
 12270 5406 9AB2     		uxth	r2, r3
 12271 5408 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12272 540c C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12273 5410 DA85     		strh	r2, [r3, #46]	@ movhi
3623:.\console.c   **** 						printf(STR_REM_TASZ, (int16)tilt_absolute_sensor.param.raw_home); 	/* REM: Absolute Sensor Ze
 12274              		.loc 1 3623 0
 12275 5412 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12276 5416 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12277 541a DB8D     		ldrh	r3, [r3, #46]
 12278 541c 1BB2     		sxth	r3, r3
 12279 541e 40F20000 		movw	r0, #:lower16:.LC623
 12280 5422 C0F20000 		movt	r0, #:upper16:.LC623
 12281 5426 1946     		mov	r1, r3
 12282 5428 FFF7FEFF 		bl	printf
 12283 542c 05E0     		b	.L472
 12284              	.L471:
3627:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12285              		.loc 1 3627 0
 12286 542e 40F20000 		movw	r0, #:lower16:.LC624
 12287 5432 C0F20000 		movt	r0, #:upper16:.LC624
 12288 5436 FFF7FEFF 		bl	puts
 12289              	.L472:
3631:.\console.c   **** 					dummy = WriteAllEEparams();
 12290              		.loc 1 3631 0
 12291 543a FFF7FEFF 		bl	WriteAllEEparams
 12292 543e 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 353


 12293 5440 87F8D930 		strb	r3, [r7, #217]
3633:.\console.c   **** 					goto exitpars;
 12294              		.loc 1 3633 0
 12295 5444 01F084BD 		b	.L131
 12296              	.L470:
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
 12297              		.loc 1 3639 0
 12298 5448 3648     		ldr	r0, .L753
 12299 544a 40F20001 		movw	r1, #:lower16:.LC625
 12300 544e C0F20001 		movt	r1, #:upper16:.LC625
 12301 5452 FFF7FEFF 		bl	strcmp
 12302 5456 0346     		mov	r3, r0
 12303 5458 002B     		cmp	r3, #0
 12304 545a 09D0     		beq	.L473
3640:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmint") == 0))
 12305              		.loc 1 3640 0 discriminator 1
 12306 545c 3148     		ldr	r0, .L753
 12307 545e 40F20001 		movw	r1, #:lower16:.LC626
 12308 5462 C0F20001 		movt	r1, #:upper16:.LC626
 12309 5466 FFF7FEFF 		bl	strcmp
 12310 546a 0346     		mov	r3, r0
3639:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmint") == 0) ||
 12311              		.loc 1 3639 0 discriminator 1
 12312 546c 002B     		cmp	r3, #0
 12313 546e 5DD1     		bne	.L474
 12314              	.L473:
3642:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MIN position and press y!");
 12315              		.loc 1 3642 0
 12316 5470 40F20000 		movw	r0, #:lower16:.LC627
 12317 5474 C0F20000 		movt	r0, #:upper16:.LC627
 12318 5478 FFF7FEFF 		bl	printf
3644:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12319              		.loc 1 3644 0
 12320 547c 4FF00100 		mov	r0, #1
 12321 5480 FFF7FEFF 		bl	ButtonYNChoice
 12322 5484 0346     		mov	r3, r0
 12323 5486 012B     		cmp	r3, #1
 12324 5488 3FD1     		bne	.L475
3646:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = 0; 		/* reset absolute tilt sensor limit min raw 	
 12325              		.loc 1 3646 0
 12326 548a 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12327 548e C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12328 5492 4FF00002 		mov	r2, #0
 12329 5496 5A86     		strh	r2, [r3, #50]	@ movhi
3649:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12330              		.loc 1 3649 0
 12331 5498 40F20000 		movw	r0, #:lower16:.LC598
 12332 549c C0F20000 		movt	r0, #:upper16:.LC598
 12333 54a0 FFF7FEFF 		bl	puts
3650:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12334              		.loc 1 3650 0
 12335 54a4 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12336 54a8 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12337 54ac FFF7FEFF 		bl	statistics_start
3653:.\console.c   **** 						CyDelay(1000);
 12338              		.loc 1 3653 0
 12339 54b0 4FF47A70 		mov	r0, #1000
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 354


 12340 54b4 FFF7FEFF 		bl	CyDelay
3656:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12341              		.loc 1 3656 0
 12342 54b8 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12343 54bc C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12344 54c0 FFF7FEFF 		bl	statistics_stop
3657:.\console.c   **** 						printf("* Statistics stop!\r\n");								
 12345              		.loc 1 3657 0
 12346 54c4 40F20000 		movw	r0, #:lower16:.LC599
 12347 54c8 C0F20000 		movt	r0, #:upper16:.LC599
 12348 54cc FFF7FEFF 		bl	puts
3660:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_min = (int16)tilt_absolute_sensor_stat.mean;												
 12349              		.loc 1 3660 0
 12350 54d0 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12351 54d4 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12352 54d8 5B68     		ldr	r3, [r3, #4]	@ float
 12353 54da 1846     		mov	r0, r3
 12354 54dc FFF7FEFF 		bl	__aeabi_f2iz
 12355 54e0 0346     		mov	r3, r0
 12356 54e2 9AB2     		uxth	r2, r3
 12357 54e4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12358 54e8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12359 54ec 5A86     		strh	r2, [r3, #50]	@ movhi
3661:.\console.c   **** 						printf(STR_REM_TMIN, (int16)tilt_absolute_sensor.param.raw_limit_min); 	/* REM: Absolute Sens
 12360              		.loc 1 3661 0
 12361 54ee 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12362 54f2 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12363 54f6 5B8E     		ldrh	r3, [r3, #50]
 12364 54f8 1BB2     		sxth	r3, r3
 12365 54fa 40F20000 		movw	r0, #:lower16:.LC628
 12366 54fe C0F20000 		movt	r0, #:upper16:.LC628
 12367 5502 1946     		mov	r1, r3
 12368 5504 FFF7FEFF 		bl	printf
 12369 5508 05E0     		b	.L476
 12370              	.L475:
3665:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12371              		.loc 1 3665 0
 12372 550a 40F20000 		movw	r0, #:lower16:.LC624
 12373 550e C0F20000 		movt	r0, #:upper16:.LC624
 12374 5512 FFF7FEFF 		bl	puts
 12375              	.L476:
3669:.\console.c   **** 					dummy = WriteAllEEparams();
 12376              		.loc 1 3669 0
 12377 5516 FFF7FEFF 		bl	WriteAllEEparams
 12378 551a 0346     		mov	r3, r0
 12379 551c 87F8D930 		strb	r3, [r7, #217]
3671:.\console.c   **** 					goto exitpars;
 12380              		.loc 1 3671 0
 12381 5520 01F016BD 		b	.L131
 12382              	.L754:
 12383              		.align	2
 12384              	.L753:
 12385 5524 0F000000 		.word	actual_cmd+15
 12386 5528 1E000000 		.word	actual_cmd+30
 12387              	.L474:
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
 12388              		.loc 1 3677 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 355


 12389 552c D248     		ldr	r0, .L755
 12390 552e 40F20001 		movw	r1, #:lower16:.LC629
 12391 5532 C0F20001 		movt	r1, #:upper16:.LC629
 12392 5536 FFF7FEFF 		bl	strcmp
 12393 553a 0346     		mov	r3, r0
 12394 553c 002B     		cmp	r3, #0
 12395 553e 09D0     		beq	.L477
3678:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lmaxt") == 0))
 12396              		.loc 1 3678 0 discriminator 1
 12397 5540 CD48     		ldr	r0, .L755
 12398 5542 40F20001 		movw	r1, #:lower16:.LC630
 12399 5546 C0F20001 		movt	r1, #:upper16:.LC630
 12400 554a FFF7FEFF 		bl	strcmp
 12401 554e 0346     		mov	r3, r0
3677:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limitmaxt") == 0) ||
 12402              		.loc 1 3677 0 discriminator 1
 12403 5550 002B     		cmp	r3, #0
 12404 5552 59D1     		bne	.L478
 12405              	.L477:
3680:.\console.c   **** 					printf("* Warning! Put TILT Axis to limit MAX position and press y!");
 12406              		.loc 1 3680 0
 12407 5554 40F20000 		movw	r0, #:lower16:.LC631
 12408 5558 C0F20000 		movt	r0, #:upper16:.LC631
 12409 555c FFF7FEFF 		bl	printf
3682:.\console.c   **** 					if (ButtonYNChoice(ECHO_ON) == _YES)
 12410              		.loc 1 3682 0
 12411 5560 4FF00100 		mov	r0, #1
 12412 5564 FFF7FEFF 		bl	ButtonYNChoice
 12413 5568 0346     		mov	r3, r0
 12414 556a 012B     		cmp	r3, #1
 12415 556c 3FD1     		bne	.L479
3684:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = 0; 		/* reset absolute tilt sensor limit max raw 	
 12416              		.loc 1 3684 0
 12417 556e 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12418 5572 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12419 5576 4FF00002 		mov	r2, #0
 12420 557a 1A86     		strh	r2, [r3, #48]	@ movhi
3687:.\console.c   **** 						printf("\r\n* Statistics start!\r\n");							
 12421              		.loc 1 3687 0
 12422 557c 40F20000 		movw	r0, #:lower16:.LC598
 12423 5580 C0F20000 		movt	r0, #:upper16:.LC598
 12424 5584 FFF7FEFF 		bl	puts
3688:.\console.c   **** 						statistics_start(&tilt_absolute_sensor_stat);
 12425              		.loc 1 3688 0
 12426 5588 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12427 558c C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12428 5590 FFF7FEFF 		bl	statistics_start
3691:.\console.c   **** 						CyDelay(1000);
 12429              		.loc 1 3691 0
 12430 5594 4FF47A70 		mov	r0, #1000
 12431 5598 FFF7FEFF 		bl	CyDelay
3694:.\console.c   **** 						statistics_stop(&tilt_absolute_sensor_stat);
 12432              		.loc 1 3694 0
 12433 559c 40F20000 		movw	r0, #:lower16:tilt_absolute_sensor_stat
 12434 55a0 C0F20000 		movt	r0, #:upper16:tilt_absolute_sensor_stat
 12435 55a4 FFF7FEFF 		bl	statistics_stop
3695:.\console.c   **** 						printf("* Statistics stop!\r\n");								
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 356


 12436              		.loc 1 3695 0
 12437 55a8 40F20000 		movw	r0, #:lower16:.LC599
 12438 55ac C0F20000 		movt	r0, #:upper16:.LC599
 12439 55b0 FFF7FEFF 		bl	puts
3698:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_max = (int16)tilt_absolute_sensor_stat.mean;
 12440              		.loc 1 3698 0
 12441 55b4 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor_stat
 12442 55b8 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor_stat
 12443 55bc 5B68     		ldr	r3, [r3, #4]	@ float
 12444 55be 1846     		mov	r0, r3
 12445 55c0 FFF7FEFF 		bl	__aeabi_f2iz
 12446 55c4 0346     		mov	r3, r0
 12447 55c6 9AB2     		uxth	r2, r3
 12448 55c8 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12449 55cc C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12450 55d0 1A86     		strh	r2, [r3, #48]	@ movhi
3699:.\console.c   **** 						printf(STR_REM_TMAX, (int16)tilt_absolute_sensor.param.raw_limit_max); 	/* REM: Absolute Sens
 12451              		.loc 1 3699 0
 12452 55d2 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12453 55d6 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12454 55da 1B8E     		ldrh	r3, [r3, #48]
 12455 55dc 1BB2     		sxth	r3, r3
 12456 55de 40F20000 		movw	r0, #:lower16:.LC632
 12457 55e2 C0F20000 		movt	r0, #:upper16:.LC632
 12458 55e6 1946     		mov	r1, r3
 12459 55e8 FFF7FEFF 		bl	printf
 12460 55ec 05E0     		b	.L480
 12461              	.L479:
3703:.\console.c   **** 						printf("\r\n* Tilt Absolute Sensor position not sampled!\r\n");								
 12462              		.loc 1 3703 0
 12463 55ee 40F20000 		movw	r0, #:lower16:.LC624
 12464 55f2 C0F20000 		movt	r0, #:upper16:.LC624
 12465 55f6 FFF7FEFF 		bl	puts
 12466              	.L480:
3707:.\console.c   **** 					dummy = WriteAllEEparams();
 12467              		.loc 1 3707 0
 12468 55fa FFF7FEFF 		bl	WriteAllEEparams
 12469 55fe 0346     		mov	r3, r0
 12470 5600 87F8D930 		strb	r3, [r7, #217]
3709:.\console.c   **** 					goto exitpars;
 12471              		.loc 1 3709 0
 12472 5604 01F0A4BC 		b	.L131
 12473              	.L478:
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
 12474              		.loc 1 3715 0
 12475 5608 9B48     		ldr	r0, .L755
 12476 560a 40F20001 		movw	r1, #:lower16:.LC633
 12477 560e C0F20001 		movt	r1, #:upper16:.LC633
 12478 5612 FFF7FEFF 		bl	strcmp
 12479 5616 0346     		mov	r3, r0
 12480 5618 002B     		cmp	r3, #0
 12481 561a 09D0     		beq	.L481
3716:.\console.c   **** 					(strcmp(actual_cmd.parameter, "lhystt") == 0))
 12482              		.loc 1 3716 0 discriminator 1
 12483 561c 9648     		ldr	r0, .L755
 12484 561e 40F20001 		movw	r1, #:lower16:.LC634
 12485 5622 C0F20001 		movt	r1, #:upper16:.LC634
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 357


 12486 5626 FFF7FEFF 		bl	strcmp
 12487 562a 0346     		mov	r3, r0
3715:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "limithystt") == 0) ||
 12488              		.loc 1 3715 0 discriminator 1
 12489 562c 002B     		cmp	r3, #0
 12490 562e 2ED1     		bne	.L482
 12491              	.L481:
3718:.\console.c   **** 					if (((raw_limit_hyst = atoi(actual_cmd.number1)) >= -100)
 12492              		.loc 1 3718 0
 12493 5630 9248     		ldr	r0, .L755+4
 12494 5632 FFF7FEFF 		bl	atoi
 12495 5636 0346     		mov	r3, r0
 12496 5638 A7F8B630 		strh	r3, [r7, #182]	@ movhi
3719:.\console.c   **** 					&& (raw_limit_hyst = atoi(actual_cmd.number1)) <= 100)
 12497              		.loc 1 3719 0
 12498 563c 8F48     		ldr	r0, .L755+4
 12499 563e FFF7FEFF 		bl	atoi
 12500 5642 0346     		mov	r3, r0
 12501 5644 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 12502 5648 B7F8B630 		ldrh	r3, [r7, #182]
 12503 564c 642B     		cmp	r3, #100
 12504 564e 16D8     		bhi	.L483
3721:.\console.c   **** 						tilt_absolute_sensor.param.raw_limit_hysteresis = raw_limit_hyst;
 12505              		.loc 1 3721 0
 12506 5650 B7F8B620 		ldrh	r2, [r7, #182]
 12507 5654 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12508 5658 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12509 565c 9A86     		strh	r2, [r3, #52]	@ movhi
3724:.\console.c   **** 						dummy = WriteAllEEparams();
 12510              		.loc 1 3724 0
 12511 565e FFF7FEFF 		bl	WriteAllEEparams
 12512 5662 0346     		mov	r3, r0
 12513 5664 87F8D930 		strb	r3, [r7, #217]
3725:.\console.c   **** 						printf(STR_REM_TLHY, (uint16)raw_limit_hyst);   /* REM: tilt axis absolute sensor limit hyste
 12514              		.loc 1 3725 0
 12515 5668 B7F8B630 		ldrh	r3, [r7, #182]
 12516 566c 40F20000 		movw	r0, #:lower16:.LC635
 12517 5670 C0F20000 		movt	r0, #:upper16:.LC635
 12518 5674 1946     		mov	r1, r3
 12519 5676 FFF7FEFF 		bl	printf
3731:.\console.c   **** 					goto exitpars;
 12520              		.loc 1 3731 0
 12521 567a 01F069BC 		b	.L131
 12522              	.L483:
3729:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12523              		.loc 1 3729 0
 12524 567e 40F20000 		movw	r0, #:lower16:.LC450
 12525 5682 C0F20000 		movt	r0, #:upper16:.LC450
 12526 5686 FFF7FEFF 		bl	printf
3731:.\console.c   **** 					goto exitpars;
 12527              		.loc 1 3731 0
 12528 568a 01F061BC 		b	.L131
 12529              	.L482:
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
 12530              		.loc 1 3737 0
 12531 568e 7A48     		ldr	r0, .L755
 12532 5690 40F20001 		movw	r1, #:lower16:.LC470
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 358


 12533 5694 C0F20001 		movt	r1, #:upper16:.LC470
 12534 5698 FFF7FEFF 		bl	strcmp
 12535 569c 0346     		mov	r3, r0
 12536 569e 002B     		cmp	r3, #0
 12537 56a0 09D0     		beq	.L485
3738:.\console.c   **** 					(strcmp(actual_cmd.parameter, "ratiot") == 0))
 12538              		.loc 1 3738 0 discriminator 1
 12539 56a2 7548     		ldr	r0, .L755
 12540 56a4 40F20001 		movw	r1, #:lower16:.LC471
 12541 56a8 C0F20001 		movt	r1, #:upper16:.LC471
 12542 56ac FFF7FEFF 		bl	strcmp
 12543 56b0 0346     		mov	r3, r0
3737:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "ratioabst") == 0) ||
 12544              		.loc 1 3737 0 discriminator 1
 12545 56b2 002B     		cmp	r3, #0
 12546 56b4 4FD1     		bne	.L486
 12547              	.L485:
3740:.\console.c   **** 					if (((step_abs_ratio = atof(actual_cmd.number1)) >= -10000)
 12548              		.loc 1 3740 0
 12549 56b6 7148     		ldr	r0, .L755+4
 12550 56b8 FFF7FEFF 		bl	atof
 12551 56bc 0246     		mov	r2, r0
 12552 56be 0B46     		mov	r3, r1
 12553 56c0 1046     		mov	r0, r2
 12554 56c2 1946     		mov	r1, r3
 12555 56c4 FFF7FEFF 		bl	__aeabi_d2f
 12556 56c8 0346     		mov	r3, r0
 12557 56ca C7F8B830 		str	r3, [r7, #184]	@ float
 12558 56ce D7F8B800 		ldr	r0, [r7, #184]	@ float
 12559 56d2 4FF48041 		mov	r1, #16384
 12560 56d6 CCF21C61 		movt	r1, 50716
 12561 56da FFF7FEFF 		bl	__aeabi_fcmpge
 12562 56de 0346     		mov	r3, r0
 12563 56e0 002B     		cmp	r3, #0
 12564 56e2 30D0     		beq	.L487
 12565              	.L654:
3741:.\console.c   **** 					&& (step_abs_ratio = atof(actual_cmd.number1)) <= 10000)
 12566              		.loc 1 3741 0
 12567 56e4 6548     		ldr	r0, .L755+4
 12568 56e6 FFF7FEFF 		bl	atof
 12569 56ea 0246     		mov	r2, r0
 12570 56ec 0B46     		mov	r3, r1
 12571 56ee 1046     		mov	r0, r2
 12572 56f0 1946     		mov	r1, r3
 12573 56f2 FFF7FEFF 		bl	__aeabi_d2f
 12574 56f6 0346     		mov	r3, r0
 12575 56f8 C7F8B830 		str	r3, [r7, #184]	@ float
 12576 56fc D7F8B800 		ldr	r0, [r7, #184]	@ float
 12577 5700 4FF48041 		mov	r1, #16384
 12578 5704 C4F21C61 		movt	r1, 17948
 12579 5708 FFF7FEFF 		bl	__aeabi_fcmple
 12580 570c 0346     		mov	r3, r0
 12581 570e 002B     		cmp	r3, #0
 12582 5710 19D0     		beq	.L487
 12583              	.L655:
3743:.\console.c   **** 						tilt_absolute_sensor.param.step_over_abs_ratio.fnum = step_abs_ratio;
 12584              		.loc 1 3743 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 359


 12585 5712 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 12586 5716 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 12587 571a D7F8B820 		ldr	r2, [r7, #184]	@ float
 12588 571e 9A63     		str	r2, [r3, #56]	@ float
3746:.\console.c   **** 						dummy = WriteAllEEparams();
 12589              		.loc 1 3746 0
 12590 5720 FFF7FEFF 		bl	WriteAllEEparams
 12591 5724 0346     		mov	r3, r0
 12592 5726 87F8D930 		strb	r3, [r7, #217]
3747:.\console.c   **** 						printf(STR_REM_TEAR, (float)step_abs_ratio);   /* REM: tilt encoder over absolute sensor rati
 12593              		.loc 1 3747 0
 12594 572a D7F8B800 		ldr	r0, [r7, #184]	@ float
 12595 572e FFF7FEFF 		bl	__aeabi_f2d
 12596 5732 0246     		mov	r2, r0
 12597 5734 0B46     		mov	r3, r1
 12598 5736 40F20000 		movw	r0, #:lower16:.LC636
 12599 573a C0F20000 		movt	r0, #:upper16:.LC636
 12600 573e FFF7FEFF 		bl	printf
3753:.\console.c   **** 					goto exitpars;
 12601              		.loc 1 3753 0
 12602 5742 01F005BC 		b	.L131
 12603              	.L487:
3751:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12604              		.loc 1 3751 0
 12605 5746 40F20000 		movw	r0, #:lower16:.LC450
 12606 574a C0F20000 		movt	r0, #:upper16:.LC450
 12607 574e FFF7FEFF 		bl	printf
3753:.\console.c   **** 					goto exitpars;
 12608              		.loc 1 3753 0
 12609 5752 01F0FDBB 		b	.L131
 12610              	.L486:
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
 12611              		.loc 1 3759 0
 12612 5756 4848     		ldr	r0, .L755
 12613 5758 40F20001 		movw	r1, #:lower16:.LC637
 12614 575c C0F20001 		movt	r1, #:upper16:.LC637
 12615 5760 FFF7FEFF 		bl	strcmp
 12616 5764 0346     		mov	r3, r0
 12617 5766 002B     		cmp	r3, #0
 12618 5768 09D0     		beq	.L491
3760:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imuy") == 0))
 12619              		.loc 1 3760 0 discriminator 1
 12620 576a 4348     		ldr	r0, .L755
 12621 576c 40F20001 		movw	r1, #:lower16:.LC638
 12622 5770 C0F20001 		movt	r1, #:upper16:.LC638
 12623 5774 FFF7FEFF 		bl	strcmp
 12624 5778 0346     		mov	r3, r0
3759:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvyaw") == 0) ||
 12625              		.loc 1 3759 0 discriminator 1
 12626 577a 002B     		cmp	r3, #0
 12627 577c 33D1     		bne	.L492
 12628              	.L491:
3762:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 12629              		.loc 1 3762 0
 12630 577e 3F48     		ldr	r0, .L755+4
 12631 5780 FFF7FEFF 		bl	atoi
 12632 5784 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 360


 12633 5786 87F8F230 		strb	r3, [r7, #242]
3763:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 12634              		.loc 1 3763 0
 12635 578a 3C48     		ldr	r0, .L755+4
 12636 578c FFF7FEFF 		bl	atoi
 12637 5790 0346     		mov	r3, r0
 12638 5792 87F8F230 		strb	r3, [r7, #242]
 12639 5796 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 12640 579a 012B     		cmp	r3, #1
 12641 579c 1BD8     		bhi	.L493
3765:.\console.c   **** 						IMU_sensor.param.yaw_invertion = invertion;
 12642              		.loc 1 3765 0
 12643 579e 40F20003 		movw	r3, #:lower16:IMU_sensor
 12644 57a2 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12645 57a6 97F8F220 		ldrb	r2, [r7, #242]
 12646 57aa 83F82420 		strb	r2, [r3, #36]
3768:.\console.c   **** 						dummy = WriteAllEEparams();
 12647              		.loc 1 3768 0
 12648 57ae FFF7FEFF 		bl	WriteAllEEparams
 12649 57b2 0346     		mov	r3, r0
 12650 57b4 87F8D930 		strb	r3, [r7, #217]
3769:.\console.c   **** 						printf(STR_REM_SINY, (uint16)IMU_sensor.param.yaw_invertion);   /* REM: Invertion Yaw setted 
 12651              		.loc 1 3769 0
 12652 57b8 40F20003 		movw	r3, #:lower16:IMU_sensor
 12653 57bc C0F20003 		movt	r3, #:upper16:IMU_sensor
 12654 57c0 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 12655 57c4 40F20000 		movw	r0, #:lower16:.LC639
 12656 57c8 C0F20000 		movt	r0, #:upper16:.LC639
 12657 57cc 1946     		mov	r1, r3
 12658 57ce FFF7FEFF 		bl	printf
3775:.\console.c   **** 					goto exitpars;
 12659              		.loc 1 3775 0
 12660 57d2 01F0BDBB 		b	.L131
 12661              	.L493:
3773:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12662              		.loc 1 3773 0
 12663 57d6 40F20000 		movw	r0, #:lower16:.LC450
 12664 57da C0F20000 		movt	r0, #:upper16:.LC450
 12665 57de FFF7FEFF 		bl	printf
3775:.\console.c   **** 					goto exitpars;
 12666              		.loc 1 3775 0
 12667 57e2 01F0B5BB 		b	.L131
 12668              	.L492:
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
 12669              		.loc 1 3781 0
 12670 57e6 2448     		ldr	r0, .L755
 12671 57e8 40F20001 		movw	r1, #:lower16:.LC640
 12672 57ec C0F20001 		movt	r1, #:upper16:.LC640
 12673 57f0 FFF7FEFF 		bl	strcmp
 12674 57f4 0346     		mov	r3, r0
 12675 57f6 002B     		cmp	r3, #0
 12676 57f8 09D0     		beq	.L495
3782:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imup") == 0))
 12677              		.loc 1 3782 0 discriminator 1
 12678 57fa 1F48     		ldr	r0, .L755
 12679 57fc 40F20001 		movw	r1, #:lower16:.LC641
 12680 5800 C0F20001 		movt	r1, #:upper16:.LC641
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 361


 12681 5804 FFF7FEFF 		bl	strcmp
 12682 5808 0346     		mov	r3, r0
3781:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvpitch") == 0) ||
 12683              		.loc 1 3781 0 discriminator 1
 12684 580a 002B     		cmp	r3, #0
 12685 580c 38D1     		bne	.L496
 12686              	.L495:
3784:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 12687              		.loc 1 3784 0
 12688 580e 1B48     		ldr	r0, .L755+4
 12689 5810 FFF7FEFF 		bl	atoi
 12690 5814 0346     		mov	r3, r0
 12691 5816 87F8F230 		strb	r3, [r7, #242]
3785:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 12692              		.loc 1 3785 0
 12693 581a 1848     		ldr	r0, .L755+4
 12694 581c FFF7FEFF 		bl	atoi
 12695 5820 0346     		mov	r3, r0
 12696 5822 87F8F230 		strb	r3, [r7, #242]
 12697 5826 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 12698 582a 012B     		cmp	r3, #1
 12699 582c 1BD8     		bhi	.L497
3787:.\console.c   **** 						IMU_sensor.param.pitch_invertion = invertion;
 12700              		.loc 1 3787 0
 12701 582e 40F20003 		movw	r3, #:lower16:IMU_sensor
 12702 5832 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12703 5836 97F8F220 		ldrb	r2, [r7, #242]
 12704 583a 83F82520 		strb	r2, [r3, #37]
3790:.\console.c   **** 						dummy = WriteAllEEparams();
 12705              		.loc 1 3790 0
 12706 583e FFF7FEFF 		bl	WriteAllEEparams
 12707 5842 0346     		mov	r3, r0
 12708 5844 87F8D930 		strb	r3, [r7, #217]
3791:.\console.c   **** 						printf(STR_REM_SINP, (uint16)IMU_sensor.param.pitch_invertion);   /* REM: Invertion Pitch set
 12709              		.loc 1 3791 0
 12710 5848 40F20003 		movw	r3, #:lower16:IMU_sensor
 12711 584c C0F20003 		movt	r3, #:upper16:IMU_sensor
 12712 5850 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 12713 5854 40F20000 		movw	r0, #:lower16:.LC642
 12714 5858 C0F20000 		movt	r0, #:upper16:.LC642
 12715 585c 1946     		mov	r1, r3
 12716 585e FFF7FEFF 		bl	printf
3797:.\console.c   **** 					goto exitpars;
 12717              		.loc 1 3797 0
 12718 5862 01F075BB 		b	.L131
 12719              	.L497:
3795:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12720              		.loc 1 3795 0
 12721 5866 40F20000 		movw	r0, #:lower16:.LC450
 12722 586a C0F20000 		movt	r0, #:upper16:.LC450
 12723 586e FFF7FEFF 		bl	printf
3797:.\console.c   **** 					goto exitpars;
 12724              		.loc 1 3797 0
 12725 5872 01F06DBB 		b	.L131
 12726              	.L756:
 12727 5876 00BF     		.align	2
 12728              	.L755:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 362


 12729 5878 0F000000 		.word	actual_cmd+15
 12730 587c 1E000000 		.word	actual_cmd+30
 12731              	.L496:
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
 12732              		.loc 1 3803 0
 12733 5880 BB48     		ldr	r0, .L757
 12734 5882 40F20001 		movw	r1, #:lower16:.LC643
 12735 5886 C0F20001 		movt	r1, #:upper16:.LC643
 12736 588a FFF7FEFF 		bl	strcmp
 12737 588e 0346     		mov	r3, r0
 12738 5890 002B     		cmp	r3, #0
 12739 5892 09D0     		beq	.L499
3804:.\console.c   **** 					(strcmp(actual_cmd.parameter, "imur") == 0))
 12740              		.loc 1 3804 0 discriminator 1
 12741 5894 B648     		ldr	r0, .L757
 12742 5896 40F20001 		movw	r1, #:lower16:.LC644
 12743 589a C0F20001 		movt	r1, #:upper16:.LC644
 12744 589e FFF7FEFF 		bl	strcmp
 12745 58a2 0346     		mov	r3, r0
3803:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "imuinvroll") == 0) ||
 12746              		.loc 1 3803 0 discriminator 1
 12747 58a4 002B     		cmp	r3, #0
 12748 58a6 33D1     		bne	.L500
 12749              	.L499:
3806:.\console.c   **** 					if (((invertion = atoi(actual_cmd.number1)) >= 0)
 12750              		.loc 1 3806 0
 12751 58a8 B248     		ldr	r0, .L757+4
 12752 58aa FFF7FEFF 		bl	atoi
 12753 58ae 0346     		mov	r3, r0
 12754 58b0 87F8F230 		strb	r3, [r7, #242]
3807:.\console.c   **** 					&& (invertion = atoi(actual_cmd.number1)) <= 1)
 12755              		.loc 1 3807 0
 12756 58b4 AF48     		ldr	r0, .L757+4
 12757 58b6 FFF7FEFF 		bl	atoi
 12758 58ba 0346     		mov	r3, r0
 12759 58bc 87F8F230 		strb	r3, [r7, #242]
 12760 58c0 97F8F230 		ldrb	r3, [r7, #242]	@ zero_extendqisi2
 12761 58c4 012B     		cmp	r3, #1
 12762 58c6 1BD8     		bhi	.L501
3809:.\console.c   **** 						IMU_sensor.param.roll_invertion = invertion;
 12763              		.loc 1 3809 0
 12764 58c8 40F20003 		movw	r3, #:lower16:IMU_sensor
 12765 58cc C0F20003 		movt	r3, #:upper16:IMU_sensor
 12766 58d0 97F8F220 		ldrb	r2, [r7, #242]
 12767 58d4 83F82620 		strb	r2, [r3, #38]
3812:.\console.c   **** 						dummy = WriteAllEEparams();
 12768              		.loc 1 3812 0
 12769 58d8 FFF7FEFF 		bl	WriteAllEEparams
 12770 58dc 0346     		mov	r3, r0
 12771 58de 87F8D930 		strb	r3, [r7, #217]
3813:.\console.c   **** 						printf(STR_REM_SINR, (uint16)IMU_sensor.param.roll_invertion);   /* REM: Invertion Roll sette
 12772              		.loc 1 3813 0
 12773 58e2 40F20003 		movw	r3, #:lower16:IMU_sensor
 12774 58e6 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12775 58ea 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 12776 58ee 40F20000 		movw	r0, #:lower16:.LC645
 12777 58f2 C0F20000 		movt	r0, #:upper16:.LC645
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 363


 12778 58f6 1946     		mov	r1, r3
 12779 58f8 FFF7FEFF 		bl	printf
3819:.\console.c   **** 					goto exitpars;
 12780              		.loc 1 3819 0
 12781 58fc 01F028BB 		b	.L131
 12782              	.L501:
3817:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12783              		.loc 1 3817 0
 12784 5900 40F20000 		movw	r0, #:lower16:.LC450
 12785 5904 C0F20000 		movt	r0, #:upper16:.LC450
 12786 5908 FFF7FEFF 		bl	printf
3819:.\console.c   **** 					goto exitpars;
 12787              		.loc 1 3819 0
 12788 590c 01F020BB 		b	.L131
 12789              	.L500:
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
 12790              		.loc 1 3825 0
 12791 5910 9748     		ldr	r0, .L757
 12792 5912 40F20001 		movw	r1, #:lower16:.LC646
 12793 5916 C0F20001 		movt	r1, #:upper16:.LC646
 12794 591a FFF7FEFF 		bl	strcmp
 12795 591e 0346     		mov	r3, r0
 12796 5920 002B     		cmp	r3, #0
 12797 5922 09D0     		beq	.L503
3826:.\console.c   **** 					(strcmp(actual_cmd.parameter, "prex") == 0))
 12798              		.loc 1 3826 0 discriminator 1
 12799 5924 9248     		ldr	r0, .L757
 12800 5926 40F20001 		movw	r1, #:lower16:.LC647
 12801 592a C0F20001 		movt	r1, #:upper16:.LC647
 12802 592e FFF7FEFF 		bl	strcmp
 12803 5932 0346     		mov	r3, r0
3825:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "prexchange") == 0) ||
 12804              		.loc 1 3825 0 discriminator 1
 12805 5934 002B     		cmp	r3, #0
 12806 5936 33D1     		bne	.L504
 12807              	.L503:
3828:.\console.c   **** 					if (((exchange = atoi(actual_cmd.number1)) >= 0)
 12808              		.loc 1 3828 0
 12809 5938 8E48     		ldr	r0, .L757+4
 12810 593a FFF7FEFF 		bl	atoi
 12811 593e 0346     		mov	r3, r0
 12812 5940 87F8F130 		strb	r3, [r7, #241]
3829:.\console.c   **** 					&& (exchange = atoi(actual_cmd.number1)) <= 1)
 12813              		.loc 1 3829 0
 12814 5944 8B48     		ldr	r0, .L757+4
 12815 5946 FFF7FEFF 		bl	atoi
 12816 594a 0346     		mov	r3, r0
 12817 594c 87F8F130 		strb	r3, [r7, #241]
 12818 5950 97F8F130 		ldrb	r3, [r7, #241]	@ zero_extendqisi2
 12819 5954 012B     		cmp	r3, #1
 12820 5956 1BD8     		bhi	.L505
3831:.\console.c   **** 						IMU_sensor.param.pitch_roll_exchange = exchange;
 12821              		.loc 1 3831 0
 12822 5958 40F20003 		movw	r3, #:lower16:IMU_sensor
 12823 595c C0F20003 		movt	r3, #:upper16:IMU_sensor
 12824 5960 97F8F120 		ldrb	r2, [r7, #241]
 12825 5964 83F82720 		strb	r2, [r3, #39]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 364


3834:.\console.c   **** 						dummy = WriteAllEEparams();
 12826              		.loc 1 3834 0
 12827 5968 FFF7FEFF 		bl	WriteAllEEparams
 12828 596c 0346     		mov	r3, r0
 12829 596e 87F8D930 		strb	r3, [r7, #217]
3835:.\console.c   **** 						printf(STR_REM_SPRX, (uint16)IMU_sensor.param.pitch_roll_exchange);   /* REM: Invertion Roll 
 12830              		.loc 1 3835 0
 12831 5972 40F20003 		movw	r3, #:lower16:IMU_sensor
 12832 5976 C0F20003 		movt	r3, #:upper16:IMU_sensor
 12833 597a 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 12834 597e 40F20000 		movw	r0, #:lower16:.LC648
 12835 5982 C0F20000 		movt	r0, #:upper16:.LC648
 12836 5986 1946     		mov	r1, r3
 12837 5988 FFF7FEFF 		bl	printf
3841:.\console.c   **** 					goto exitpars;
 12838              		.loc 1 3841 0
 12839 598c 01F0E0BA 		b	.L131
 12840              	.L505:
3839:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 12841              		.loc 1 3839 0
 12842 5990 40F20000 		movw	r0, #:lower16:.LC450
 12843 5994 C0F20000 		movt	r0, #:upper16:.LC450
 12844 5998 FFF7FEFF 		bl	printf
3841:.\console.c   **** 					goto exitpars;
 12845              		.loc 1 3841 0
 12846 599c 01F0D8BA 		b	.L131
 12847              	.L504:
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
 12848              		.loc 1 3847 0
 12849 59a0 7348     		ldr	r0, .L757
 12850 59a2 40F20001 		movw	r1, #:lower16:.LC272
 12851 59a6 C0F20001 		movt	r1, #:upper16:.LC272
 12852 59aa FFF7FEFF 		bl	strcmp
 12853 59ae 0346     		mov	r3, r0
 12854 59b0 002B     		cmp	r3, #0
 12855 59b2 0AD0     		beq	.L507
3848:.\console.c   **** 					(strcmp(actual_cmd.parameter, "shot") == 0))
 12856              		.loc 1 3848 0 discriminator 1
 12857 59b4 6E48     		ldr	r0, .L757
 12858 59b6 40F20001 		movw	r1, #:lower16:.LC442
 12859 59ba C0F20001 		movt	r1, #:upper16:.LC442
 12860 59be FFF7FEFF 		bl	strcmp
 12861 59c2 0346     		mov	r3, r0
3847:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "q") == 0) ||
 12862              		.loc 1 3847 0 discriminator 1
 12863 59c4 002B     		cmp	r3, #0
 12864 59c6 40F0BE81 		bne	.L508
 12865              	.L507:
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
 12866              		.loc 1 3850 0
 12867 59ca 6B48     		ldr	r0, .L757+8
 12868 59cc 40F20001 		movw	r1, #:lower16:.LC649
 12869 59d0 C0F20001 		movt	r1, #:upper16:.LC649
 12870 59d4 FFF7FEFF 		bl	strcmp
 12871 59d8 0346     		mov	r3, r0
 12872 59da 002B     		cmp	r3, #0
 12873 59dc 09D0     		beq	.L509
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 365


3851:.\console.c   **** 					    (strcmp(actual_cmd.number2, "c") == 0))
 12874              		.loc 1 3851 0 discriminator 1
 12875 59de 6648     		ldr	r0, .L757+8
 12876 59e0 40F20001 		movw	r1, #:lower16:.LC650
 12877 59e4 C0F20001 		movt	r1, #:upper16:.LC650
 12878 59e8 FFF7FEFF 		bl	strcmp
 12879 59ec 0346     		mov	r3, r0
3850:.\console.c   **** 					if ((strcmp(actual_cmd.number2, "clear") == 0) ||
 12880              		.loc 1 3850 0 discriminator 1
 12881 59ee 002B     		cmp	r3, #0
 12882 59f0 7AD1     		bne	.L510
 12883              	.L509:
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12884              		.loc 1 3854 0
 12885 59f2 6048     		ldr	r0, .L757+4
 12886 59f4 FFF7FEFF 		bl	atoi
 12887 59f8 0346     		mov	r3, r0
 12888 59fa 87F8E530 		strb	r3, [r7, #229]
 12889 59fe 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 12890 5a02 002B     		cmp	r3, #0
 12891 5a04 00F09C81 		beq	.L707
3855:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 12892              		.loc 1 3855 0
 12893 5a08 5A48     		ldr	r0, .L757+4
 12894 5a0a FFF7FEFF 		bl	atoi
 12895 5a0e 0346     		mov	r3, r0
 12896 5a10 87F8E530 		strb	r3, [r7, #229]
 12897 5a14 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 12898 5a18 632B     		cmp	r3, #99
 12899 5a1a 00F29181 		bhi	.L707
3859:.\console.c   **** 							if (q[q_table[q_number]].number != Q_NUMBER_UNUSED)
 12900              		.loc 1 3859 0
 12901 5a1e 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12902 5a22 40F20003 		movw	r3, #:lower16:q_table
 12903 5a26 C0F20003 		movt	r3, #:upper16:q_table
 12904 5a2a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12905 5a2c 1946     		mov	r1, r3
 12906 5a2e 40F20002 		movw	r2, #:lower16:q
 12907 5a32 C0F20002 		movt	r2, #:upper16:q
 12908 5a36 0B46     		mov	r3, r1
 12909 5a38 4FEAC303 		lsl	r3, r3, #3
 12910 5a3c 5B18     		adds	r3, r3, r1
 12911 5a3e 4FEA8303 		lsl	r3, r3, #2
 12912 5a42 D318     		adds	r3, r2, r3
 12913 5a44 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 12914 5a46 002B     		cmp	r3, #0
 12915 5a48 47D0     		beq	.L512
3861:.\console.c   **** 								printf("\r\n* Q%02d element (shot) Cleared!\r\n", (uint16)q[q_table[q_number]].number);
 12916              		.loc 1 3861 0
 12917 5a4a 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12918 5a4e 40F20003 		movw	r3, #:lower16:q_table
 12919 5a52 C0F20003 		movt	r3, #:upper16:q_table
 12920 5a56 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12921 5a58 1946     		mov	r1, r3
 12922 5a5a 40F20002 		movw	r2, #:lower16:q
 12923 5a5e C0F20002 		movt	r2, #:upper16:q
 12924 5a62 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 366


 12925 5a64 4FEAC303 		lsl	r3, r3, #3
 12926 5a68 5B18     		adds	r3, r3, r1
 12927 5a6a 4FEA8303 		lsl	r3, r3, #2
 12928 5a6e D318     		adds	r3, r2, r3
 12929 5a70 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 12930 5a72 40F20000 		movw	r0, #:lower16:.LC651
 12931 5a76 C0F20000 		movt	r0, #:upper16:.LC651
 12932 5a7a 1946     		mov	r1, r3
 12933 5a7c FFF7FEFF 		bl	printf
3863:.\console.c   **** 								q[q_table[q_number]].number		= Q_NUMBER_UNUSED;
 12934              		.loc 1 3863 0
 12935 5a80 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12936 5a84 40F20003 		movw	r3, #:lower16:q_table
 12937 5a88 C0F20003 		movt	r3, #:upper16:q_table
 12938 5a8c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12939 5a8e 1946     		mov	r1, r3
 12940 5a90 40F20002 		movw	r2, #:lower16:q
 12941 5a94 C0F20002 		movt	r2, #:upper16:q
 12942 5a98 0B46     		mov	r3, r1
 12943 5a9a 4FEAC303 		lsl	r3, r3, #3
 12944 5a9e 5B18     		adds	r3, r3, r1
 12945 5aa0 4FEA8303 		lsl	r3, r3, #2
 12946 5aa4 D318     		adds	r3, r2, r3
 12947 5aa6 4FF00002 		mov	r2, #0
 12948 5aaa 1A70     		strb	r2, [r3, #0]
3866:.\console.c   **** 								if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 12949              		.loc 1 3866 0
 12950 5aac 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 12951 5ab0 40F20003 		movw	r3, #:lower16:q_table
 12952 5ab4 C0F20003 		movt	r3, #:upper16:q_table
 12953 5ab8 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 12954 5aba DBB2     		uxtb	r3, r3
 12955 5abc 5BB2     		sxtb	r3, r3
 12956 5abe 1846     		mov	r0, r3
 12957 5ac0 FFF7FEFF 		bl	WriteQEEparams
 12958 5ac4 0346     		mov	r3, r0
 12959 5ac6 002B     		cmp	r3, #0
 12960 5ac8 00F03A81 		beq	.L707
3868:.\console.c   **** 									printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
 12961              		.loc 1 3868 0
 12962 5acc 40F20000 		movw	r0, #:lower16:.LC652
 12963 5ad0 C0F20000 		movt	r0, #:upper16:.LC652
 12964 5ad4 FFF7FEFF 		bl	printf
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12965              		.loc 1 3854 0
 12966 5ad8 32E1     		b	.L707
 12967              	.L512:
3873:.\console.c   **** 								printf("\r\n* Nothing to clear: Q element is not allocated!\r\n");	
 12968              		.loc 1 3873 0
 12969 5ada 40F20000 		movw	r0, #:lower16:.LC653
 12970 5ade C0F20000 		movt	r0, #:upper16:.LC653
 12971 5ae2 FFF7FEFF 		bl	puts
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12972              		.loc 1 3854 0
 12973 5ae6 2BE1     		b	.L707
 12974              	.L510:
3877:.\console.c   **** 					else if (((memory_number = atoi(actual_cmd.number2)) >= Q_MEMORY_NUMBER_MIN)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 367


 12975              		.loc 1 3877 0
 12976 5ae8 2348     		ldr	r0, .L757+8
 12977 5aea FFF7FEFF 		bl	atoi
 12978 5aee 0346     		mov	r3, r0
 12979 5af0 A7F8E630 		strh	r3, [r7, #230]	@ movhi
3878:.\console.c   **** 						    && (memory_number = atoi(actual_cmd.number2)) < Q_MEMORY_NUMBER_MAX)
 12980              		.loc 1 3878 0
 12981 5af4 2048     		ldr	r0, .L757+8
 12982 5af6 FFF7FEFF 		bl	atoi
 12983 5afa 0346     		mov	r3, r0
 12984 5afc A7F8E630 		strh	r3, [r7, #230]	@ movhi
 12985 5b00 B7F8E630 		ldrh	r3, [r7, #230]
 12986 5b04 1F2B     		cmp	r3, #31
 12987 5b06 00F21381 		bhi	.L514
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 12988              		.loc 1 3880 0
 12989 5b0a 1A48     		ldr	r0, .L757+4
 12990 5b0c FFF7FEFF 		bl	atoi
 12991 5b10 0346     		mov	r3, r0
 12992 5b12 87F8E530 		strb	r3, [r7, #229]
 12993 5b16 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 12994 5b1a 002B     		cmp	r3, #0
 12995 5b1c 00F00081 		beq	.L515
3881:.\console.c   **** 						&& (q_number = atoi(actual_cmd.number1)) <= Q_NUMBER_MAX)
 12996              		.loc 1 3881 0
 12997 5b20 1448     		ldr	r0, .L757+4
 12998 5b22 FFF7FEFF 		bl	atoi
 12999 5b26 0346     		mov	r3, r0
 13000 5b28 87F8E530 		strb	r3, [r7, #229]
 13001 5b2c 97F8E530 		ldrb	r3, [r7, #229]	@ zero_extendqisi2
 13002 5b30 632B     		cmp	r3, #99
 13003 5b32 00F2F580 		bhi	.L515
3883:.\console.c   **** 							printf("* Warning! Put All Axes to desired position and press y!");
 13004              		.loc 1 3883 0
 13005 5b36 40F20000 		movw	r0, #:lower16:.LC654
 13006 5b3a C0F20000 		movt	r0, #:upper16:.LC654
 13007 5b3e FFF7FEFF 		bl	printf
3885:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _YES)
 13008              		.loc 1 3885 0
 13009 5b42 4FF00100 		mov	r0, #1
 13010 5b46 FFF7FEFF 		bl	ButtonYNChoice
 13011 5b4a 0346     		mov	r3, r0
 13012 5b4c 012B     		cmp	r3, #1
 13013 5b4e 40F0CB80 		bne	.L516
3887:.\console.c   **** 								if (strlen(actual_cmd.number2) != 0)
 13014              		.loc 1 3887 0
 13015 5b52 094B     		ldr	r3, .L757+8
 13016 5b54 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 13017 5b56 002B     		cmp	r3, #0
 13018 5b58 10D0     		beq	.L517
3890:.\console.c   **** 									q_table[q_number] 			= memory_number;				  		/* save for fast indexing 	*/
 13019              		.loc 1 3890 0
 13020 5b5a 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13021 5b5e B7F8E630 		ldrh	r3, [r7, #230]	@ movhi
 13022 5b62 D9B2     		uxtb	r1, r3
 13023 5b64 40F20003 		movw	r3, #:lower16:q_table
 13024 5b68 C0F20003 		movt	r3, #:upper16:q_table
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 368


 13025 5b6c 9954     		strb	r1, [r3, r2]
 13026 5b6e 13E0     		b	.L518
 13027              	.L758:
 13028              		.align	2
 13029              	.L757:
 13030 5b70 0F000000 		.word	actual_cmd+15
 13031 5b74 1E000000 		.word	actual_cmd+30
 13032 5b78 28000000 		.word	actual_cmd+40
 13033              	.L517:
3895:.\console.c   **** 									q_table[q_number] 			= qmemory_standard_address[q_number];	/* save for fast indexing 	*/
 13034              		.loc 1 3895 0
 13035 5b7c 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13036 5b80 97F8E510 		ldrb	r1, [r7, #229]	@ zero_extendqisi2
 13037 5b84 40F20003 		movw	r3, #:lower16:qmemory_standard_address
 13038 5b88 C0F20003 		movt	r3, #:upper16:qmemory_standard_address
 13039 5b8c 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 13040 5b8e 40F20003 		movw	r3, #:lower16:q_table
 13041 5b92 C0F20003 		movt	r3, #:upper16:q_table
 13042 5b96 9954     		strb	r1, [r3, r2]
 13043              	.L518:
3899:.\console.c   **** 								q[q_table[q_number]].number									= (uint8)(q_number);
 13044              		.loc 1 3899 0
 13045 5b98 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13046 5b9c 40F20003 		movw	r3, #:lower16:q_table
 13047 5ba0 C0F20003 		movt	r3, #:upper16:q_table
 13048 5ba4 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13049 5ba6 1946     		mov	r1, r3
 13050 5ba8 40F20002 		movw	r2, #:lower16:q
 13051 5bac C0F20002 		movt	r2, #:upper16:q
 13052 5bb0 0B46     		mov	r3, r1
 13053 5bb2 4FEAC303 		lsl	r3, r3, #3
 13054 5bb6 5B18     		adds	r3, r3, r1
 13055 5bb8 4FEA8303 		lsl	r3, r3, #2
 13056 5bbc D318     		adds	r3, r2, r3
 13057 5bbe 97F8E520 		ldrb	r2, [r7, #229]
 13058 5bc2 1A70     		strb	r2, [r3, #0]
3900:.\console.c   **** 								q[q_table[q_number]].mc.position[PAN_AXIS]             		= pan_absolute_sensor.position;			
 13059              		.loc 1 3900 0
 13060 5bc4 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13061 5bc8 40F20003 		movw	r3, #:lower16:q_table
 13062 5bcc C0F20003 		movt	r3, #:upper16:q_table
 13063 5bd0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13064 5bd2 1946     		mov	r1, r3
 13065 5bd4 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13066 5bd8 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13067 5bdc 5868     		ldr	r0, [r3, #4]	@ float
 13068 5bde 40F20002 		movw	r2, #:lower16:q
 13069 5be2 C0F20002 		movt	r2, #:upper16:q
 13070 5be6 0B46     		mov	r3, r1
 13071 5be8 4FEAC303 		lsl	r3, r3, #3
 13072 5bec 5B18     		adds	r3, r3, r1
 13073 5bee 4FEA8303 		lsl	r3, r3, #2
 13074 5bf2 D318     		adds	r3, r2, r3
 13075 5bf4 03F11803 		add	r3, r3, #24
 13076 5bf8 1860     		str	r0, [r3, #0]	@ float
3901:.\console.c   **** 								q[q_table[q_number]].param.position_default[PAN_AXIS].fnum  = pan_absolute_sensor.position;
 13077              		.loc 1 3901 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 369


 13078 5bfa 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13079 5bfe 40F20003 		movw	r3, #:lower16:q_table
 13080 5c02 C0F20003 		movt	r3, #:upper16:q_table
 13081 5c06 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13082 5c08 1946     		mov	r1, r3
 13083 5c0a 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13084 5c0e C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13085 5c12 5868     		ldr	r0, [r3, #4]	@ float
 13086 5c14 40F20002 		movw	r2, #:lower16:q
 13087 5c18 C0F20002 		movt	r2, #:upper16:q
 13088 5c1c 0B46     		mov	r3, r1
 13089 5c1e 4FEAC303 		lsl	r3, r3, #3
 13090 5c22 5B18     		adds	r3, r3, r1
 13091 5c24 4FEA8303 		lsl	r3, r3, #2
 13092 5c28 D318     		adds	r3, r2, r3
 13093 5c2a 03F10403 		add	r3, r3, #4
 13094 5c2e 1860     		str	r0, [r3, #0]	@ float
3903:.\console.c   **** 								q[q_table[q_number]].mc.position[TILT_AXIS]            		= tilt_absolute_sensor.position;		
 13095              		.loc 1 3903 0
 13096 5c30 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13097 5c34 40F20003 		movw	r3, #:lower16:q_table
 13098 5c38 C0F20003 		movt	r3, #:upper16:q_table
 13099 5c3c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13100 5c3e 1946     		mov	r1, r3
 13101 5c40 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13102 5c44 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13103 5c48 5868     		ldr	r0, [r3, #4]	@ float
 13104 5c4a 40F20002 		movw	r2, #:lower16:q
 13105 5c4e C0F20002 		movt	r2, #:upper16:q
 13106 5c52 0B46     		mov	r3, r1
 13107 5c54 4FEAC303 		lsl	r3, r3, #3
 13108 5c58 5B18     		adds	r3, r3, r1
 13109 5c5a 4FEA8303 		lsl	r3, r3, #2
 13110 5c5e D318     		adds	r3, r2, r3
 13111 5c60 03F11C03 		add	r3, r3, #28
 13112 5c64 1860     		str	r0, [r3, #0]	@ float
3904:.\console.c   **** 								q[q_table[q_number]].param.position_default[TILT_AXIS].fnum = tilt_absolute_sensor.position
 13113              		.loc 1 3904 0
 13114 5c66 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13115 5c6a 40F20003 		movw	r3, #:lower16:q_table
 13116 5c6e C0F20003 		movt	r3, #:upper16:q_table
 13117 5c72 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13118 5c74 1946     		mov	r1, r3
 13119 5c76 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13120 5c7a C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13121 5c7e 5868     		ldr	r0, [r3, #4]	@ float
 13122 5c80 40F20002 		movw	r2, #:lower16:q
 13123 5c84 C0F20002 		movt	r2, #:upper16:q
 13124 5c88 0B46     		mov	r3, r1
 13125 5c8a 4FEAC303 		lsl	r3, r3, #3
 13126 5c8e 5B18     		adds	r3, r3, r1
 13127 5c90 4FEA8303 		lsl	r3, r3, #2
 13128 5c94 D318     		adds	r3, r2, r3
 13129 5c96 03F10803 		add	r3, r3, #8
 13130 5c9a 1860     		str	r0, [r3, #0]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13131              		.loc 1 3906 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 370


 13132 5c9c 97F8E560 		ldrb	r6, [r7, #229]	@ zero_extendqisi2
3908:.\console.c   **** 									(int32)pan_absolute_sensor.position,
 13133              		.loc 1 3908 0
 13134 5ca0 40F20003 		movw	r3, #:lower16:pan_absolute_sensor
 13135 5ca4 C0F20003 		movt	r3, #:upper16:pan_absolute_sensor
 13136 5ca8 5B68     		ldr	r3, [r3, #4]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13137              		.loc 1 3906 0
 13138 5caa 1846     		mov	r0, r3
 13139 5cac FFF7FEFF 		bl	__aeabi_f2iz
 13140 5cb0 0546     		mov	r5, r0
3909:.\console.c   **** 									(int32)tilt_absolute_sensor.position,
 13141              		.loc 1 3909 0
 13142 5cb2 40F20003 		movw	r3, #:lower16:tilt_absolute_sensor
 13143 5cb6 C0F20003 		movt	r3, #:upper16:tilt_absolute_sensor
 13144 5cba 5B68     		ldr	r3, [r3, #4]	@ float
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13145              		.loc 1 3906 0
 13146 5cbc 1846     		mov	r0, r3
 13147 5cbe FFF7FEFF 		bl	__aeabi_f2iz
 13148 5cc2 0446     		mov	r4, r0
3910:.\console.c   **** 									(int16)q_table[q_number]);	
 13149              		.loc 1 3910 0
 13150 5cc4 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13151 5cc8 40F20003 		movw	r3, #:lower16:q_table
 13152 5ccc C0F20003 		movt	r3, #:upper16:q_table
 13153 5cd0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
3906:.\console.c   **** 								printf("\r\n* Q%02d element (shot) ABS position setted to: pan=%+ld [step]   tilt=%+ld [ste
 13154              		.loc 1 3906 0
 13155 5cd2 0093     		str	r3, [sp, #0]
 13156 5cd4 40F20000 		movw	r0, #:lower16:.LC655
 13157 5cd8 C0F20000 		movt	r0, #:upper16:.LC655
 13158 5cdc 3146     		mov	r1, r6
 13159 5cde 2A46     		mov	r2, r5
 13160 5ce0 2346     		mov	r3, r4
 13161 5ce2 FFF7FEFF 		bl	printf
 13162 5ce6 05E0     		b	.L519
 13163              	.L516:
3914:.\console.c   **** 								printf("\r\n* Q element (shot) position not sampled!\r\n");								
 13164              		.loc 1 3914 0
 13165 5ce8 40F20000 		movw	r0, #:lower16:.LC656
 13166 5cec C0F20000 		movt	r0, #:upper16:.LC656
 13167 5cf0 FFF7FEFF 		bl	puts
 13168              	.L519:
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 13169              		.loc 1 3918 0
 13170 5cf4 97F8E520 		ldrb	r2, [r7, #229]	@ zero_extendqisi2
 13171 5cf8 40F20003 		movw	r3, #:lower16:q_table
 13172 5cfc C0F20003 		movt	r3, #:upper16:q_table
 13173 5d00 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 13174 5d02 DBB2     		uxtb	r3, r3
 13175 5d04 5BB2     		sxtb	r3, r3
 13176 5d06 1846     		mov	r0, r3
 13177 5d08 FFF7FEFF 		bl	WriteQEEparams
 13178 5d0c 0346     		mov	r3, r0
 13179 5d0e 002B     		cmp	r3, #0
 13180 5d10 0DD0     		beq	.L521
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 371


3920:.\console.c   **** 								printf(STR_ERROR7);				/* ERROR7: EEPROM row out of bounds! */								
 13181              		.loc 1 3920 0
 13182 5d12 40F20000 		movw	r0, #:lower16:.LC652
 13183 5d16 C0F20000 		movt	r0, #:upper16:.LC652
 13184 5d1a FFF7FEFF 		bl	printf
3918:.\console.c   **** 							if (WriteQEEparams(q_table[q_number]) != CYRET_SUCCESS)
 13185              		.loc 1 3918 0
 13186 5d1e 06E0     		b	.L521
 13187              	.L515:
3925:.\console.c   **** 							printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
 13188              		.loc 1 3925 0
 13189 5d20 40F20000 		movw	r0, #:lower16:.LC450
 13190 5d24 C0F20000 		movt	r0, #:upper16:.LC450
 13191 5d28 FFF7FEFF 		bl	printf
3880:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13192              		.loc 1 3880 0
 13193 5d2c 09E0     		b	.L513
 13194              	.L521:
 13195 5d2e 08E0     		b	.L513
 13196              	.L514:
3956:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */					
 13197              		.loc 1 3956 0
 13198 5d30 40F20000 		movw	r0, #:lower16:.LC450
 13199 5d34 C0F20000 		movt	r0, #:upper16:.LC450
 13200 5d38 FFF7FEFF 		bl	printf
3958:.\console.c   **** 					goto exitpars;
 13201              		.loc 1 3958 0
 13202 5d3c 01F008B9 		b	.L131
 13203              	.L707:
3854:.\console.c   **** 						if (((q_number = atoi(actual_cmd.number1)) >= Q_NUMBER_MIN)
 13204              		.loc 1 3854 0
 13205 5d40 00BF     		nop
 13206              	.L513:
3958:.\console.c   **** 					goto exitpars;
 13207              		.loc 1 3958 0
 13208 5d42 01F005B9 		b	.L131
 13209              	.L508:
3964:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpp") == 0)
 13210              		.loc 1 3964 0
 13211 5d46 B848     		ldr	r0, .L759
 13212 5d48 40F20001 		movw	r1, #:lower16:.LC657
 13213 5d4c C0F20001 		movt	r1, #:upper16:.LC657
 13214 5d50 FFF7FEFF 		bl	strcmp
 13215 5d54 0346     		mov	r3, r0
 13216 5d56 002B     		cmp	r3, #0
 13217 5d58 51D1     		bne	.L522
3966:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
 13218              		.loc 1 3966 0
 13219 5d5a B448     		ldr	r0, .L759+4
 13220 5d5c FFF7FEFF 		bl	atof
 13221 5d60 0246     		mov	r2, r0
 13222 5d62 0B46     		mov	r3, r1
 13223 5d64 1046     		mov	r0, r2
 13224 5d66 1946     		mov	r1, r3
 13225 5d68 FFF7FEFF 		bl	__aeabi_d2f
 13226 5d6c 0346     		mov	r3, r0
 13227 5d6e C7F8D430 		str	r3, [r7, #212]	@ float
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 372


 13228 5d72 D7F8D400 		ldr	r0, [r7, #212]	@ float
 13229 5d76 4FF00001 		mov	r1, #0
 13230 5d7a FFF7FEFF 		bl	__aeabi_fcmpge
 13231 5d7e 0346     		mov	r3, r0
 13232 5d80 002B     		cmp	r3, #0
 13233 5d82 34D0     		beq	.L523
 13234              	.L656:
3967:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
 13235              		.loc 1 3967 0
 13236 5d84 A948     		ldr	r0, .L759+4
 13237 5d86 FFF7FEFF 		bl	atof
 13238 5d8a 0246     		mov	r2, r0
 13239 5d8c 0B46     		mov	r3, r1
 13240 5d8e 1046     		mov	r0, r2
 13241 5d90 1946     		mov	r1, r3
 13242 5d92 FFF7FEFF 		bl	__aeabi_d2f
 13243 5d96 0346     		mov	r3, r0
 13244 5d98 C7F8D430 		str	r3, [r7, #212]	@ float
 13245 5d9c D7F8D400 		ldr	r0, [r7, #212]	@ float
 13246 5da0 4FF00001 		mov	r1, #0
 13247 5da4 C4F2C821 		movt	r1, 17096
 13248 5da8 FFF7FEFF 		bl	__aeabi_fcmple
 13249 5dac 0346     		mov	r3, r0
 13250 5dae 002B     		cmp	r3, #0
 13251 5db0 1DD0     		beq	.L523
 13252              	.L657:
3969:.\console.c   **** 						pan_axis.param.Kpf.fnum = Kp;
 13253              		.loc 1 3969 0
 13254 5db2 40F20003 		movw	r3, #:lower16:pan_axis
 13255 5db6 C0F20003 		movt	r3, #:upper16:pan_axis
 13256 5dba D7F8D420 		ldr	r2, [r7, #212]	@ float
 13257 5dbe 5A61     		str	r2, [r3, #20]	@ float
3972:.\console.c   **** 						dummy = WriteAllEEparams();
 13258              		.loc 1 3972 0
 13259 5dc0 FFF7FEFF 		bl	WriteAllEEparams
 13260 5dc4 0346     		mov	r3, r0
 13261 5dc6 87F8D930 		strb	r3, [r7, #217]
3973:.\console.c   **** 						printf(STR_REM_PMKP, (float)pan_axis.param.Kpf.fnum);   /* REM: Pan Motor Kp setted to...*/		
 13262              		.loc 1 3973 0
 13263 5dca 40F20003 		movw	r3, #:lower16:pan_axis
 13264 5dce C0F20003 		movt	r3, #:upper16:pan_axis
 13265 5dd2 5B69     		ldr	r3, [r3, #20]	@ float
 13266 5dd4 1846     		mov	r0, r3
 13267 5dd6 FFF7FEFF 		bl	__aeabi_f2d
 13268 5dda 0246     		mov	r2, r0
 13269 5ddc 0B46     		mov	r3, r1
 13270 5dde 40F20000 		movw	r0, #:lower16:.LC658
 13271 5de2 C0F20000 		movt	r0, #:upper16:.LC658
 13272 5de6 FFF7FEFF 		bl	printf
3979:.\console.c   **** 					goto exitpars;
 13273              		.loc 1 3979 0
 13274 5dea 01F0B1B8 		b	.L131
 13275              	.L523:
3977:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13276              		.loc 1 3977 0
 13277 5dee 40F20000 		movw	r0, #:lower16:.LC450
 13278 5df2 C0F20000 		movt	r0, #:upper16:.LC450
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 373


 13279 5df6 FFF7FEFF 		bl	printf
3979:.\console.c   **** 					goto exitpars;
 13280              		.loc 1 3979 0
 13281 5dfa 01F0A9B8 		b	.L131
 13282              	.L522:
3985:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kpt") == 0)
 13283              		.loc 1 3985 0
 13284 5dfe 8A48     		ldr	r0, .L759
 13285 5e00 40F20001 		movw	r1, #:lower16:.LC659
 13286 5e04 C0F20001 		movt	r1, #:upper16:.LC659
 13287 5e08 FFF7FEFF 		bl	strcmp
 13288 5e0c 0346     		mov	r3, r0
 13289 5e0e 002B     		cmp	r3, #0
 13290 5e10 51D1     		bne	.L527
3987:.\console.c   **** 					if (((Kp = atof(actual_cmd.number1)) >= 0)
 13291              		.loc 1 3987 0
 13292 5e12 8648     		ldr	r0, .L759+4
 13293 5e14 FFF7FEFF 		bl	atof
 13294 5e18 0246     		mov	r2, r0
 13295 5e1a 0B46     		mov	r3, r1
 13296 5e1c 1046     		mov	r0, r2
 13297 5e1e 1946     		mov	r1, r3
 13298 5e20 FFF7FEFF 		bl	__aeabi_d2f
 13299 5e24 0346     		mov	r3, r0
 13300 5e26 C7F8D430 		str	r3, [r7, #212]	@ float
 13301 5e2a D7F8D400 		ldr	r0, [r7, #212]	@ float
 13302 5e2e 4FF00001 		mov	r1, #0
 13303 5e32 FFF7FEFF 		bl	__aeabi_fcmpge
 13304 5e36 0346     		mov	r3, r0
 13305 5e38 002B     		cmp	r3, #0
 13306 5e3a 34D0     		beq	.L528
 13307              	.L658:
3988:.\console.c   **** 					&& (Kp = atof(actual_cmd.number1)) <= 100)
 13308              		.loc 1 3988 0
 13309 5e3c 7B48     		ldr	r0, .L759+4
 13310 5e3e FFF7FEFF 		bl	atof
 13311 5e42 0246     		mov	r2, r0
 13312 5e44 0B46     		mov	r3, r1
 13313 5e46 1046     		mov	r0, r2
 13314 5e48 1946     		mov	r1, r3
 13315 5e4a FFF7FEFF 		bl	__aeabi_d2f
 13316 5e4e 0346     		mov	r3, r0
 13317 5e50 C7F8D430 		str	r3, [r7, #212]	@ float
 13318 5e54 D7F8D400 		ldr	r0, [r7, #212]	@ float
 13319 5e58 4FF00001 		mov	r1, #0
 13320 5e5c C4F2C821 		movt	r1, 17096
 13321 5e60 FFF7FEFF 		bl	__aeabi_fcmple
 13322 5e64 0346     		mov	r3, r0
 13323 5e66 002B     		cmp	r3, #0
 13324 5e68 1DD0     		beq	.L528
 13325              	.L659:
3990:.\console.c   **** 						tilt_axis.param.Kpf.fnum = Kp;
 13326              		.loc 1 3990 0
 13327 5e6a 40F20003 		movw	r3, #:lower16:tilt_axis
 13328 5e6e C0F20003 		movt	r3, #:upper16:tilt_axis
 13329 5e72 D7F8D420 		ldr	r2, [r7, #212]	@ float
 13330 5e76 5A61     		str	r2, [r3, #20]	@ float
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 374


3993:.\console.c   **** 						dummy = WriteAllEEparams();
 13331              		.loc 1 3993 0
 13332 5e78 FFF7FEFF 		bl	WriteAllEEparams
 13333 5e7c 0346     		mov	r3, r0
 13334 5e7e 87F8D930 		strb	r3, [r7, #217]
3994:.\console.c   **** 						printf(STR_REM_TMKP, (float)tilt_axis.param.Kpf.fnum);   /* REM: Tilt Motor Kp setted to...*/
 13335              		.loc 1 3994 0
 13336 5e82 40F20003 		movw	r3, #:lower16:tilt_axis
 13337 5e86 C0F20003 		movt	r3, #:upper16:tilt_axis
 13338 5e8a 5B69     		ldr	r3, [r3, #20]	@ float
 13339 5e8c 1846     		mov	r0, r3
 13340 5e8e FFF7FEFF 		bl	__aeabi_f2d
 13341 5e92 0246     		mov	r2, r0
 13342 5e94 0B46     		mov	r3, r1
 13343 5e96 40F20000 		movw	r0, #:lower16:.LC660
 13344 5e9a C0F20000 		movt	r0, #:upper16:.LC660
 13345 5e9e FFF7FEFF 		bl	printf
4000:.\console.c   **** 					goto exitpars;
 13346              		.loc 1 4000 0
 13347 5ea2 01F055B8 		b	.L131
 13348              	.L528:
3998:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13349              		.loc 1 3998 0
 13350 5ea6 40F20000 		movw	r0, #:lower16:.LC450
 13351 5eaa C0F20000 		movt	r0, #:upper16:.LC450
 13352 5eae FFF7FEFF 		bl	printf
4000:.\console.c   **** 					goto exitpars;
 13353              		.loc 1 4000 0
 13354 5eb2 01F04DB8 		b	.L131
 13355              	.L527:
4006:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdp") == 0)
 13356              		.loc 1 4006 0
 13357 5eb6 5C48     		ldr	r0, .L759
 13358 5eb8 40F20001 		movw	r1, #:lower16:.LC661
 13359 5ebc C0F20001 		movt	r1, #:upper16:.LC661
 13360 5ec0 FFF7FEFF 		bl	strcmp
 13361 5ec4 0346     		mov	r3, r0
 13362 5ec6 002B     		cmp	r3, #0
 13363 5ec8 51D1     		bne	.L532
4008:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
 13364              		.loc 1 4008 0
 13365 5eca 5848     		ldr	r0, .L759+4
 13366 5ecc FFF7FEFF 		bl	atof
 13367 5ed0 0246     		mov	r2, r0
 13368 5ed2 0B46     		mov	r3, r1
 13369 5ed4 1046     		mov	r0, r2
 13370 5ed6 1946     		mov	r1, r3
 13371 5ed8 FFF7FEFF 		bl	__aeabi_d2f
 13372 5edc 0346     		mov	r3, r0
 13373 5ede C7F8D030 		str	r3, [r7, #208]	@ float
 13374 5ee2 D7F8D000 		ldr	r0, [r7, #208]	@ float
 13375 5ee6 4FF00001 		mov	r1, #0
 13376 5eea FFF7FEFF 		bl	__aeabi_fcmpge
 13377 5eee 0346     		mov	r3, r0
 13378 5ef0 002B     		cmp	r3, #0
 13379 5ef2 34D0     		beq	.L533
 13380              	.L660:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 375


4009:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
 13381              		.loc 1 4009 0
 13382 5ef4 4D48     		ldr	r0, .L759+4
 13383 5ef6 FFF7FEFF 		bl	atof
 13384 5efa 0246     		mov	r2, r0
 13385 5efc 0B46     		mov	r3, r1
 13386 5efe 1046     		mov	r0, r2
 13387 5f00 1946     		mov	r1, r3
 13388 5f02 FFF7FEFF 		bl	__aeabi_d2f
 13389 5f06 0346     		mov	r3, r0
 13390 5f08 C7F8D030 		str	r3, [r7, #208]	@ float
 13391 5f0c D7F8D000 		ldr	r0, [r7, #208]	@ float
 13392 5f10 4FF00001 		mov	r1, #0
 13393 5f14 C4F27A41 		movt	r1, 17530
 13394 5f18 FFF7FEFF 		bl	__aeabi_fcmple
 13395 5f1c 0346     		mov	r3, r0
 13396 5f1e 002B     		cmp	r3, #0
 13397 5f20 1DD0     		beq	.L533
 13398              	.L661:
4011:.\console.c   **** 						pan_axis.param.Kdf.fnum = Kd;
 13399              		.loc 1 4011 0
 13400 5f22 40F20003 		movw	r3, #:lower16:pan_axis
 13401 5f26 C0F20003 		movt	r3, #:upper16:pan_axis
 13402 5f2a D7F8D020 		ldr	r2, [r7, #208]	@ float
 13403 5f2e 9A61     		str	r2, [r3, #24]	@ float
4014:.\console.c   **** 						dummy = WriteAllEEparams();
 13404              		.loc 1 4014 0
 13405 5f30 FFF7FEFF 		bl	WriteAllEEparams
 13406 5f34 0346     		mov	r3, r0
 13407 5f36 87F8D930 		strb	r3, [r7, #217]
4015:.\console.c   **** 						printf(STR_REM_PMKD, (float)pan_axis.param.Kdf.fnum);   /* REM: Pan Motor Kd setted to...*/		
 13408              		.loc 1 4015 0
 13409 5f3a 40F20003 		movw	r3, #:lower16:pan_axis
 13410 5f3e C0F20003 		movt	r3, #:upper16:pan_axis
 13411 5f42 9B69     		ldr	r3, [r3, #24]	@ float
 13412 5f44 1846     		mov	r0, r3
 13413 5f46 FFF7FEFF 		bl	__aeabi_f2d
 13414 5f4a 0246     		mov	r2, r0
 13415 5f4c 0B46     		mov	r3, r1
 13416 5f4e 40F20000 		movw	r0, #:lower16:.LC662
 13417 5f52 C0F20000 		movt	r0, #:upper16:.LC662
 13418 5f56 FFF7FEFF 		bl	printf
4021:.\console.c   **** 					goto exitpars;
 13419              		.loc 1 4021 0
 13420 5f5a 00F0F9BF 		b	.L131
 13421              	.L533:
4019:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13422              		.loc 1 4019 0
 13423 5f5e 40F20000 		movw	r0, #:lower16:.LC450
 13424 5f62 C0F20000 		movt	r0, #:upper16:.LC450
 13425 5f66 FFF7FEFF 		bl	printf
4021:.\console.c   **** 					goto exitpars;
 13426              		.loc 1 4021 0
 13427 5f6a 00F0F1BF 		b	.L131
 13428              	.L532:
4027:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kdt") == 0)
 13429              		.loc 1 4027 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 376


 13430 5f6e 2E48     		ldr	r0, .L759
 13431 5f70 40F20001 		movw	r1, #:lower16:.LC663
 13432 5f74 C0F20001 		movt	r1, #:upper16:.LC663
 13433 5f78 FFF7FEFF 		bl	strcmp
 13434 5f7c 0346     		mov	r3, r0
 13435 5f7e 002B     		cmp	r3, #0
 13436 5f80 56D1     		bne	.L537
4029:.\console.c   **** 					if (((Kd = atof(actual_cmd.number1)) >= 0)
 13437              		.loc 1 4029 0
 13438 5f82 2A48     		ldr	r0, .L759+4
 13439 5f84 FFF7FEFF 		bl	atof
 13440 5f88 0246     		mov	r2, r0
 13441 5f8a 0B46     		mov	r3, r1
 13442 5f8c 1046     		mov	r0, r2
 13443 5f8e 1946     		mov	r1, r3
 13444 5f90 FFF7FEFF 		bl	__aeabi_d2f
 13445 5f94 0346     		mov	r3, r0
 13446 5f96 C7F8D030 		str	r3, [r7, #208]	@ float
 13447 5f9a D7F8D000 		ldr	r0, [r7, #208]	@ float
 13448 5f9e 4FF00001 		mov	r1, #0
 13449 5fa2 FFF7FEFF 		bl	__aeabi_fcmpge
 13450 5fa6 0346     		mov	r3, r0
 13451 5fa8 002B     		cmp	r3, #0
 13452 5faa 34D0     		beq	.L538
 13453              	.L662:
4030:.\console.c   **** 					&& (Kd = atof(actual_cmd.number1)) <= 1000)
 13454              		.loc 1 4030 0
 13455 5fac 1F48     		ldr	r0, .L759+4
 13456 5fae FFF7FEFF 		bl	atof
 13457 5fb2 0246     		mov	r2, r0
 13458 5fb4 0B46     		mov	r3, r1
 13459 5fb6 1046     		mov	r0, r2
 13460 5fb8 1946     		mov	r1, r3
 13461 5fba FFF7FEFF 		bl	__aeabi_d2f
 13462 5fbe 0346     		mov	r3, r0
 13463 5fc0 C7F8D030 		str	r3, [r7, #208]	@ float
 13464 5fc4 D7F8D000 		ldr	r0, [r7, #208]	@ float
 13465 5fc8 4FF00001 		mov	r1, #0
 13466 5fcc C4F27A41 		movt	r1, 17530
 13467 5fd0 FFF7FEFF 		bl	__aeabi_fcmple
 13468 5fd4 0346     		mov	r3, r0
 13469 5fd6 002B     		cmp	r3, #0
 13470 5fd8 1DD0     		beq	.L538
 13471              	.L663:
4032:.\console.c   **** 						tilt_axis.param.Kdf.fnum = Kd;
 13472              		.loc 1 4032 0
 13473 5fda 40F20003 		movw	r3, #:lower16:tilt_axis
 13474 5fde C0F20003 		movt	r3, #:upper16:tilt_axis
 13475 5fe2 D7F8D020 		ldr	r2, [r7, #208]	@ float
 13476 5fe6 9A61     		str	r2, [r3, #24]	@ float
4035:.\console.c   **** 						dummy = WriteAllEEparams();
 13477              		.loc 1 4035 0
 13478 5fe8 FFF7FEFF 		bl	WriteAllEEparams
 13479 5fec 0346     		mov	r3, r0
 13480 5fee 87F8D930 		strb	r3, [r7, #217]
4036:.\console.c   **** 						printf(STR_REM_TMKD, (float)tilt_axis.param.Kdf.fnum);   /* REM: Tilt Motor Kd setted to...*/
 13481              		.loc 1 4036 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 377


 13482 5ff2 40F20003 		movw	r3, #:lower16:tilt_axis
 13483 5ff6 C0F20003 		movt	r3, #:upper16:tilt_axis
 13484 5ffa 9B69     		ldr	r3, [r3, #24]	@ float
 13485 5ffc 1846     		mov	r0, r3
 13486 5ffe FFF7FEFF 		bl	__aeabi_f2d
 13487 6002 0246     		mov	r2, r0
 13488 6004 0B46     		mov	r3, r1
 13489 6006 40F20000 		movw	r0, #:lower16:.LC664
 13490 600a C0F20000 		movt	r0, #:upper16:.LC664
 13491 600e FFF7FEFF 		bl	printf
4042:.\console.c   **** 					goto exitpars;
 13492              		.loc 1 4042 0
 13493 6012 00F09DBF 		b	.L131
 13494              	.L538:
4040:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13495              		.loc 1 4040 0
 13496 6016 40F20000 		movw	r0, #:lower16:.LC450
 13497 601a C0F20000 		movt	r0, #:upper16:.LC450
 13498 601e FFF7FEFF 		bl	printf
4042:.\console.c   **** 					goto exitpars;
 13499              		.loc 1 4042 0
 13500 6022 00F095BF 		b	.L131
 13501              	.L760:
 13502 6026 00BF     		.align	2
 13503              	.L759:
 13504 6028 0F000000 		.word	actual_cmd+15
 13505 602c 1E000000 		.word	actual_cmd+30
 13506              	.L537:
4048:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kip") == 0)
 13507              		.loc 1 4048 0
 13508 6030 B748     		ldr	r0, .L761
 13509 6032 40F20001 		movw	r1, #:lower16:.LC665
 13510 6036 C0F20001 		movt	r1, #:upper16:.LC665
 13511 603a FFF7FEFF 		bl	strcmp
 13512 603e 0346     		mov	r3, r0
 13513 6040 002B     		cmp	r3, #0
 13514 6042 51D1     		bne	.L542
4050:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
 13515              		.loc 1 4050 0
 13516 6044 B348     		ldr	r0, .L761+4
 13517 6046 FFF7FEFF 		bl	atof
 13518 604a 0246     		mov	r2, r0
 13519 604c 0B46     		mov	r3, r1
 13520 604e 1046     		mov	r0, r2
 13521 6050 1946     		mov	r1, r3
 13522 6052 FFF7FEFF 		bl	__aeabi_d2f
 13523 6056 0346     		mov	r3, r0
 13524 6058 C7F8CC30 		str	r3, [r7, #204]	@ float
 13525 605c D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13526 6060 4FF00001 		mov	r1, #0
 13527 6064 FFF7FEFF 		bl	__aeabi_fcmpge
 13528 6068 0346     		mov	r3, r0
 13529 606a 002B     		cmp	r3, #0
 13530 606c 34D0     		beq	.L543
 13531              	.L664:
4051:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
 13532              		.loc 1 4051 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 378


 13533 606e A948     		ldr	r0, .L761+4
 13534 6070 FFF7FEFF 		bl	atof
 13535 6074 0246     		mov	r2, r0
 13536 6076 0B46     		mov	r3, r1
 13537 6078 1046     		mov	r0, r2
 13538 607a 1946     		mov	r1, r3
 13539 607c FFF7FEFF 		bl	__aeabi_d2f
 13540 6080 0346     		mov	r3, r0
 13541 6082 C7F8CC30 		str	r3, [r7, #204]	@ float
 13542 6086 D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13543 608a 4FF00001 		mov	r1, #0
 13544 608e C4F2C821 		movt	r1, 17096
 13545 6092 FFF7FEFF 		bl	__aeabi_fcmple
 13546 6096 0346     		mov	r3, r0
 13547 6098 002B     		cmp	r3, #0
 13548 609a 1DD0     		beq	.L543
 13549              	.L665:
4053:.\console.c   **** 						pan_axis.param.Kif.fnum = Ki;
 13550              		.loc 1 4053 0
 13551 609c 40F20003 		movw	r3, #:lower16:pan_axis
 13552 60a0 C0F20003 		movt	r3, #:upper16:pan_axis
 13553 60a4 D7F8CC20 		ldr	r2, [r7, #204]	@ float
 13554 60a8 DA61     		str	r2, [r3, #28]	@ float
4056:.\console.c   **** 						dummy = WriteAllEEparams();
 13555              		.loc 1 4056 0
 13556 60aa FFF7FEFF 		bl	WriteAllEEparams
 13557 60ae 0346     		mov	r3, r0
 13558 60b0 87F8D930 		strb	r3, [r7, #217]
4057:.\console.c   **** 						printf(STR_REM_PMKI, (float)pan_axis.param.Kif.fnum);   /* REM: Pan Motor Ki setted to...*/		
 13559              		.loc 1 4057 0
 13560 60b4 40F20003 		movw	r3, #:lower16:pan_axis
 13561 60b8 C0F20003 		movt	r3, #:upper16:pan_axis
 13562 60bc DB69     		ldr	r3, [r3, #28]	@ float
 13563 60be 1846     		mov	r0, r3
 13564 60c0 FFF7FEFF 		bl	__aeabi_f2d
 13565 60c4 0246     		mov	r2, r0
 13566 60c6 0B46     		mov	r3, r1
 13567 60c8 40F20000 		movw	r0, #:lower16:.LC666
 13568 60cc C0F20000 		movt	r0, #:upper16:.LC666
 13569 60d0 FFF7FEFF 		bl	printf
4063:.\console.c   **** 					goto exitpars;
 13570              		.loc 1 4063 0
 13571 60d4 00F03CBF 		b	.L131
 13572              	.L543:
4061:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13573              		.loc 1 4061 0
 13574 60d8 40F20000 		movw	r0, #:lower16:.LC450
 13575 60dc C0F20000 		movt	r0, #:upper16:.LC450
 13576 60e0 FFF7FEFF 		bl	printf
4063:.\console.c   **** 					goto exitpars;
 13577              		.loc 1 4063 0
 13578 60e4 00F034BF 		b	.L131
 13579              	.L542:
4069:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kit") == 0)
 13580              		.loc 1 4069 0
 13581 60e8 8948     		ldr	r0, .L761
 13582 60ea 40F20001 		movw	r1, #:lower16:.LC667
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 379


 13583 60ee C0F20001 		movt	r1, #:upper16:.LC667
 13584 60f2 FFF7FEFF 		bl	strcmp
 13585 60f6 0346     		mov	r3, r0
 13586 60f8 002B     		cmp	r3, #0
 13587 60fa 51D1     		bne	.L547
4071:.\console.c   **** 					if (((Ki = atof(actual_cmd.number1)) >= 0)
 13588              		.loc 1 4071 0
 13589 60fc 8548     		ldr	r0, .L761+4
 13590 60fe FFF7FEFF 		bl	atof
 13591 6102 0246     		mov	r2, r0
 13592 6104 0B46     		mov	r3, r1
 13593 6106 1046     		mov	r0, r2
 13594 6108 1946     		mov	r1, r3
 13595 610a FFF7FEFF 		bl	__aeabi_d2f
 13596 610e 0346     		mov	r3, r0
 13597 6110 C7F8CC30 		str	r3, [r7, #204]	@ float
 13598 6114 D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13599 6118 4FF00001 		mov	r1, #0
 13600 611c FFF7FEFF 		bl	__aeabi_fcmpge
 13601 6120 0346     		mov	r3, r0
 13602 6122 002B     		cmp	r3, #0
 13603 6124 34D0     		beq	.L548
 13604              	.L666:
4072:.\console.c   **** 					&& (Ki = atof(actual_cmd.number1)) <= 100)
 13605              		.loc 1 4072 0
 13606 6126 7B48     		ldr	r0, .L761+4
 13607 6128 FFF7FEFF 		bl	atof
 13608 612c 0246     		mov	r2, r0
 13609 612e 0B46     		mov	r3, r1
 13610 6130 1046     		mov	r0, r2
 13611 6132 1946     		mov	r1, r3
 13612 6134 FFF7FEFF 		bl	__aeabi_d2f
 13613 6138 0346     		mov	r3, r0
 13614 613a C7F8CC30 		str	r3, [r7, #204]	@ float
 13615 613e D7F8CC00 		ldr	r0, [r7, #204]	@ float
 13616 6142 4FF00001 		mov	r1, #0
 13617 6146 C4F2C821 		movt	r1, 17096
 13618 614a FFF7FEFF 		bl	__aeabi_fcmple
 13619 614e 0346     		mov	r3, r0
 13620 6150 002B     		cmp	r3, #0
 13621 6152 1DD0     		beq	.L548
 13622              	.L667:
4074:.\console.c   **** 						tilt_axis.param.Kif.fnum = Ki;
 13623              		.loc 1 4074 0
 13624 6154 40F20003 		movw	r3, #:lower16:tilt_axis
 13625 6158 C0F20003 		movt	r3, #:upper16:tilt_axis
 13626 615c D7F8CC20 		ldr	r2, [r7, #204]	@ float
 13627 6160 DA61     		str	r2, [r3, #28]	@ float
4077:.\console.c   **** 						dummy = WriteAllEEparams();
 13628              		.loc 1 4077 0
 13629 6162 FFF7FEFF 		bl	WriteAllEEparams
 13630 6166 0346     		mov	r3, r0
 13631 6168 87F8D930 		strb	r3, [r7, #217]
4078:.\console.c   **** 						printf(STR_REM_TMKI, (float)tilt_axis.param.Kif.fnum);   /* REM: Tilt Motor Ki setted to...*/
 13632              		.loc 1 4078 0
 13633 616c 40F20003 		movw	r3, #:lower16:tilt_axis
 13634 6170 C0F20003 		movt	r3, #:upper16:tilt_axis
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 380


 13635 6174 DB69     		ldr	r3, [r3, #28]	@ float
 13636 6176 1846     		mov	r0, r3
 13637 6178 FFF7FEFF 		bl	__aeabi_f2d
 13638 617c 0246     		mov	r2, r0
 13639 617e 0B46     		mov	r3, r1
 13640 6180 40F20000 		movw	r0, #:lower16:.LC668
 13641 6184 C0F20000 		movt	r0, #:upper16:.LC668
 13642 6188 FFF7FEFF 		bl	printf
4084:.\console.c   **** 					goto exitpars;
 13643              		.loc 1 4084 0
 13644 618c 00F0E0BE 		b	.L131
 13645              	.L548:
4082:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13646              		.loc 1 4082 0
 13647 6190 40F20000 		movw	r0, #:lower16:.LC450
 13648 6194 C0F20000 		movt	r0, #:upper16:.LC450
 13649 6198 FFF7FEFF 		bl	printf
4084:.\console.c   **** 					goto exitpars;
 13650              		.loc 1 4084 0
 13651 619c 00F0D8BE 		b	.L131
 13652              	.L547:
4090:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksip") == 0)
 13653              		.loc 1 4090 0
 13654 61a0 5B48     		ldr	r0, .L761
 13655 61a2 40F20001 		movw	r1, #:lower16:.LC669
 13656 61a6 C0F20001 		movt	r1, #:upper16:.LC669
 13657 61aa FFF7FEFF 		bl	strcmp
 13658 61ae 0346     		mov	r3, r0
 13659 61b0 002B     		cmp	r3, #0
 13660 61b2 51D1     		bne	.L552
4092:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
 13661              		.loc 1 4092 0
 13662 61b4 5748     		ldr	r0, .L761+4
 13663 61b6 FFF7FEFF 		bl	atof
 13664 61ba 0246     		mov	r2, r0
 13665 61bc 0B46     		mov	r3, r1
 13666 61be 1046     		mov	r0, r2
 13667 61c0 1946     		mov	r1, r3
 13668 61c2 FFF7FEFF 		bl	__aeabi_d2f
 13669 61c6 0346     		mov	r3, r0
 13670 61c8 C7F8C830 		str	r3, [r7, #200]	@ float
 13671 61cc D7F8C800 		ldr	r0, [r7, #200]	@ float
 13672 61d0 4FF00001 		mov	r1, #0
 13673 61d4 FFF7FEFF 		bl	__aeabi_fcmpge
 13674 61d8 0346     		mov	r3, r0
 13675 61da 002B     		cmp	r3, #0
 13676 61dc 34D0     		beq	.L553
 13677              	.L668:
4093:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
 13678              		.loc 1 4093 0
 13679 61de 4D48     		ldr	r0, .L761+4
 13680 61e0 FFF7FEFF 		bl	atof
 13681 61e4 0246     		mov	r2, r0
 13682 61e6 0B46     		mov	r3, r1
 13683 61e8 1046     		mov	r0, r2
 13684 61ea 1946     		mov	r1, r3
 13685 61ec FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 381


 13686 61f0 0346     		mov	r3, r0
 13687 61f2 C7F8C830 		str	r3, [r7, #200]	@ float
 13688 61f6 D7F8C800 		ldr	r0, [r7, #200]	@ float
 13689 61fa 4FF41051 		mov	r1, #9216
 13690 61fe C4F67411 		movt	r1, 18804
 13691 6202 FFF7FEFF 		bl	__aeabi_fcmple
 13692 6206 0346     		mov	r3, r0
 13693 6208 002B     		cmp	r3, #0
 13694 620a 1DD0     		beq	.L553
 13695              	.L669:
4095:.\console.c   **** 						pan_axis.param.Ksif.fnum = Ksi;
 13696              		.loc 1 4095 0
 13697 620c 40F20003 		movw	r3, #:lower16:pan_axis
 13698 6210 C0F20003 		movt	r3, #:upper16:pan_axis
 13699 6214 D7F8C820 		ldr	r2, [r7, #200]	@ float
 13700 6218 1A62     		str	r2, [r3, #32]	@ float
4098:.\console.c   **** 						dummy = WriteAllEEparams();
 13701              		.loc 1 4098 0
 13702 621a FFF7FEFF 		bl	WriteAllEEparams
 13703 621e 0346     		mov	r3, r0
 13704 6220 87F8D930 		strb	r3, [r7, #217]
4099:.\console.c   **** 						printf(STR_REM_PMKS, (float)pan_axis.param.Ksif.fnum);   /* REM: Pan Motor Ksi setted to...*/
 13705              		.loc 1 4099 0
 13706 6224 40F20003 		movw	r3, #:lower16:pan_axis
 13707 6228 C0F20003 		movt	r3, #:upper16:pan_axis
 13708 622c 1B6A     		ldr	r3, [r3, #32]	@ float
 13709 622e 1846     		mov	r0, r3
 13710 6230 FFF7FEFF 		bl	__aeabi_f2d
 13711 6234 0246     		mov	r2, r0
 13712 6236 0B46     		mov	r3, r1
 13713 6238 40F20000 		movw	r0, #:lower16:.LC670
 13714 623c C0F20000 		movt	r0, #:upper16:.LC670
 13715 6240 FFF7FEFF 		bl	printf
4105:.\console.c   **** 					goto exitpars;
 13716              		.loc 1 4105 0
 13717 6244 00F084BE 		b	.L131
 13718              	.L553:
4103:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13719              		.loc 1 4103 0
 13720 6248 40F20000 		movw	r0, #:lower16:.LC450
 13721 624c C0F20000 		movt	r0, #:upper16:.LC450
 13722 6250 FFF7FEFF 		bl	printf
4105:.\console.c   **** 					goto exitpars;
 13723              		.loc 1 4105 0
 13724 6254 00F07CBE 		b	.L131
 13725              	.L552:
4111:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "ksit") == 0)
 13726              		.loc 1 4111 0
 13727 6258 2D48     		ldr	r0, .L761
 13728 625a 40F20001 		movw	r1, #:lower16:.LC671
 13729 625e C0F20001 		movt	r1, #:upper16:.LC671
 13730 6262 FFF7FEFF 		bl	strcmp
 13731 6266 0346     		mov	r3, r0
 13732 6268 002B     		cmp	r3, #0
 13733 626a 55D1     		bne	.L557
4113:.\console.c   **** 					if (((Ksi = atof(actual_cmd.number1)) >= 0)
 13734              		.loc 1 4113 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 382


 13735 626c 2948     		ldr	r0, .L761+4
 13736 626e FFF7FEFF 		bl	atof
 13737 6272 0246     		mov	r2, r0
 13738 6274 0B46     		mov	r3, r1
 13739 6276 1046     		mov	r0, r2
 13740 6278 1946     		mov	r1, r3
 13741 627a FFF7FEFF 		bl	__aeabi_d2f
 13742 627e 0346     		mov	r3, r0
 13743 6280 C7F8C830 		str	r3, [r7, #200]	@ float
 13744 6284 D7F8C800 		ldr	r0, [r7, #200]	@ float
 13745 6288 4FF00001 		mov	r1, #0
 13746 628c FFF7FEFF 		bl	__aeabi_fcmpge
 13747 6290 0346     		mov	r3, r0
 13748 6292 002B     		cmp	r3, #0
 13749 6294 34D0     		beq	.L558
 13750              	.L670:
4114:.\console.c   **** 					&& (Ksi = atof(actual_cmd.number1)) <= 1000000)
 13751              		.loc 1 4114 0
 13752 6296 1F48     		ldr	r0, .L761+4
 13753 6298 FFF7FEFF 		bl	atof
 13754 629c 0246     		mov	r2, r0
 13755 629e 0B46     		mov	r3, r1
 13756 62a0 1046     		mov	r0, r2
 13757 62a2 1946     		mov	r1, r3
 13758 62a4 FFF7FEFF 		bl	__aeabi_d2f
 13759 62a8 0346     		mov	r3, r0
 13760 62aa C7F8C830 		str	r3, [r7, #200]	@ float
 13761 62ae D7F8C800 		ldr	r0, [r7, #200]	@ float
 13762 62b2 4FF41051 		mov	r1, #9216
 13763 62b6 C4F67411 		movt	r1, 18804
 13764 62ba FFF7FEFF 		bl	__aeabi_fcmple
 13765 62be 0346     		mov	r3, r0
 13766 62c0 002B     		cmp	r3, #0
 13767 62c2 1DD0     		beq	.L558
 13768              	.L671:
4116:.\console.c   **** 						tilt_axis.param.Ksif.fnum = Ksi;
 13769              		.loc 1 4116 0
 13770 62c4 40F20003 		movw	r3, #:lower16:tilt_axis
 13771 62c8 C0F20003 		movt	r3, #:upper16:tilt_axis
 13772 62cc D7F8C820 		ldr	r2, [r7, #200]	@ float
 13773 62d0 1A62     		str	r2, [r3, #32]	@ float
4119:.\console.c   **** 						dummy = WriteAllEEparams();
 13774              		.loc 1 4119 0
 13775 62d2 FFF7FEFF 		bl	WriteAllEEparams
 13776 62d6 0346     		mov	r3, r0
 13777 62d8 87F8D930 		strb	r3, [r7, #217]
4120:.\console.c   **** 						printf(STR_REM_TMKS, (float)tilt_axis.param.Ksif.fnum);   /* REM: Tilt Motor Ksi setted to...
 13778              		.loc 1 4120 0
 13779 62dc 40F20003 		movw	r3, #:lower16:tilt_axis
 13780 62e0 C0F20003 		movt	r3, #:upper16:tilt_axis
 13781 62e4 1B6A     		ldr	r3, [r3, #32]	@ float
 13782 62e6 1846     		mov	r0, r3
 13783 62e8 FFF7FEFF 		bl	__aeabi_f2d
 13784 62ec 0246     		mov	r2, r0
 13785 62ee 0B46     		mov	r3, r1
 13786 62f0 40F20000 		movw	r0, #:lower16:.LC672
 13787 62f4 C0F20000 		movt	r0, #:upper16:.LC672
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 383


 13788 62f8 FFF7FEFF 		bl	printf
4126:.\console.c   **** 					goto exitpars;
 13789              		.loc 1 4126 0
 13790 62fc 00F028BE 		b	.L131
 13791              	.L558:
4124:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13792              		.loc 1 4124 0
 13793 6300 40F20000 		movw	r0, #:lower16:.LC450
 13794 6304 C0F20000 		movt	r0, #:upper16:.LC450
 13795 6308 FFF7FEFF 		bl	printf
4126:.\console.c   **** 					goto exitpars;
 13796              		.loc 1 4126 0
 13797 630c 00F020BE 		b	.L131
 13798              	.L762:
 13799              		.align	2
 13800              	.L761:
 13801 6310 0F000000 		.word	actual_cmd+15
 13802 6314 1E000000 		.word	actual_cmd+30
 13803              	.L557:
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
 13804              		.loc 1 4132 0
 13805 6318 B148     		ldr	r0, .L763
 13806 631a 40F20001 		movw	r1, #:lower16:.LC673
 13807 631e C0F20001 		movt	r1, #:upper16:.LC673
 13808 6322 FFF7FEFF 		bl	strcmp
 13809 6326 0346     		mov	r3, r0
 13810 6328 002B     		cmp	r3, #0
 13811 632a 09D0     		beq	.L562
4133:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaxis") == 0))
 13812              		.loc 1 4133 0 discriminator 1
 13813 632c AC48     		ldr	r0, .L763
 13814 632e 40F20001 		movw	r1, #:lower16:.LC674
 13815 6332 C0F20001 		movt	r1, #:upper16:.LC674
 13816 6336 FFF7FEFF 		bl	strcmp
 13817 633a 0346     		mov	r3, r0
4132:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "anaoutaxis") == 0) ||
 13818              		.loc 1 4132 0 discriminator 1
 13819 633c 002B     		cmp	r3, #0
 13820 633e 78D1     		bne	.L563
 13821              	.L562:
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
 13822              		.loc 1 4135 0
 13823 6340 A848     		ldr	r0, .L763+4
 13824 6342 40F20001 		movw	r1, #:lower16:.LC675
 13825 6346 C0F20001 		movt	r1, #:upper16:.LC675
 13826 634a FFF7FEFF 		bl	strcmp
 13827 634e 0346     		mov	r3, r0
 13828 6350 002B     		cmp	r3, #0
 13829 6352 09D0     		beq	.L564
4135:.\console.c   **** 					if ((strcmp(actual_cmd.number1, "pan") == 0) || (strcmp(actual_cmd.number1, "tilt") == 0))
 13830              		.loc 1 4135 0 is_stmt 0 discriminator 1
 13831 6354 A348     		ldr	r0, .L763+4
 13832 6356 40F20001 		movw	r1, #:lower16:.LC676
 13833 635a C0F20001 		movt	r1, #:upper16:.LC676
 13834 635e FFF7FEFF 		bl	strcmp
 13835 6362 0346     		mov	r3, r0
 13836 6364 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 384


 13837 6366 5CD1     		bne	.L565
 13838              	.L564:
4137:.\console.c   **** 						if (strcmp(actual_cmd.number1, "pan") == 0)
 13839              		.loc 1 4137 0 is_stmt 1
 13840 6368 9E48     		ldr	r0, .L763+4
 13841 636a 40F20001 		movw	r1, #:lower16:.LC675
 13842 636e C0F20001 		movt	r1, #:upper16:.LC675
 13843 6372 FFF7FEFF 		bl	strcmp
 13844 6376 0346     		mov	r3, r0
 13845 6378 002B     		cmp	r3, #0
 13846 637a 20D1     		bne	.L566
4140:.\console.c   **** 							Selected_ANAOUT=&pan_axis;
 13847              		.loc 1 4140 0
 13848 637c 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 13849 6380 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 13850 6384 40F20002 		movw	r2, #:lower16:pan_axis
 13851 6388 C0F20002 		movt	r2, #:upper16:pan_axis
 13852 638c 1A60     		str	r2, [r3, #0]
4141:.\console.c   **** 							printf(STR_REM_ANAXP);   /* REM: Anaout Axis setted to PAN*/
 13853              		.loc 1 4141 0
 13854 638e 40F20000 		movw	r0, #:lower16:.LC677
 13855 6392 C0F20000 		movt	r0, #:upper16:.LC677
 13856 6396 FFF7FEFF 		bl	puts
4143:.\console.c   **** 							CyDelay(100);
 13857              		.loc 1 4143 0
 13858 639a 4FF06400 		mov	r0, #100
 13859 639e FFF7FEFF 		bl	CyDelay
4144:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
 13860              		.loc 1 4144 0
 13861 63a2 40F20000 		movw	r0, #:lower16:.LC678
 13862 63a6 C0F20000 		movt	r0, #:upper16:.LC678
 13863 63aa FFF7FEFF 		bl	puts
4146:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();							
 13864              		.loc 1 4146 0
 13865 63ae FFF7FEFF 		bl	GetAnaposOffsetZero
 13866 63b2 0246     		mov	r2, r0
 13867 63b4 40F20003 		movw	r3, #:lower16:anapos_offset
 13868 63b8 C0F20003 		movt	r3, #:upper16:anapos_offset
 13869 63bc 1A60     		str	r2, [r3, #0]
 13870              	.L566:
4149:.\console.c   **** 						if (strcmp(actual_cmd.number1, "tilt") == 0)
 13871              		.loc 1 4149 0
 13872 63be 8948     		ldr	r0, .L763+4
 13873 63c0 40F20001 		movw	r1, #:lower16:.LC676
 13874 63c4 C0F20001 		movt	r1, #:upper16:.LC676
 13875 63c8 FFF7FEFF 		bl	strcmp
 13876 63cc 0346     		mov	r3, r0
 13877 63ce 002B     		cmp	r3, #0
 13878 63d0 20D1     		bne	.L567
4152:.\console.c   **** 							Selected_ANAOUT=&tilt_axis;
 13879              		.loc 1 4152 0
 13880 63d2 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 13881 63d6 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 13882 63da 40F20002 		movw	r2, #:lower16:tilt_axis
 13883 63de C0F20002 		movt	r2, #:upper16:tilt_axis
 13884 63e2 1A60     		str	r2, [r3, #0]
4153:.\console.c   **** 							printf(STR_REM_ANAXT);   /* REM: Anaout Axis setted to TILT*/
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 385


 13885              		.loc 1 4153 0
 13886 63e4 40F20000 		movw	r0, #:lower16:.LC679
 13887 63e8 C0F20000 		movt	r0, #:upper16:.LC679
 13888 63ec FFF7FEFF 		bl	puts
4155:.\console.c   **** 							CyDelay(100);
 13889              		.loc 1 4155 0
 13890 63f0 4FF06400 		mov	r0, #100
 13891 63f4 FFF7FEFF 		bl	CyDelay
4156:.\console.c   **** 							printf ("* ANAPOS ZERO!\r\n");
 13892              		.loc 1 4156 0
 13893 63f8 40F20000 		movw	r0, #:lower16:.LC678
 13894 63fc C0F20000 		movt	r0, #:upper16:.LC678
 13895 6400 FFF7FEFF 		bl	puts
4158:.\console.c   **** 							anapos_offset = GetAnaposOffsetZero();	
 13896              		.loc 1 4158 0
 13897 6404 FFF7FEFF 		bl	GetAnaposOffsetZero
 13898 6408 0246     		mov	r2, r0
 13899 640a 40F20003 		movw	r3, #:lower16:anapos_offset
 13900 640e C0F20003 		movt	r3, #:upper16:anapos_offset
 13901 6412 1A60     		str	r2, [r3, #0]
 13902              	.L567:
4162:.\console.c   **** 						dummy = WriteAllEEparams();
 13903              		.loc 1 4162 0
 13904 6414 FFF7FEFF 		bl	WriteAllEEparams
 13905 6418 0346     		mov	r3, r0
 13906 641a 87F8D930 		strb	r3, [r7, #217]
4168:.\console.c   **** 					goto exitpars;
 13907              		.loc 1 4168 0
 13908 641e 00F097BD 		b	.L131
 13909              	.L565:
4166:.\console.c   **** 						printf(STR_ERROR6);			/* ERROR6: Axis may be [pan,tilt,roll,all] */
 13910              		.loc 1 4166 0
 13911 6422 40F20000 		movw	r0, #:lower16:.LC680
 13912 6426 C0F20000 		movt	r0, #:upper16:.LC680
 13913 642a FFF7FEFF 		bl	printf
4168:.\console.c   **** 					goto exitpars;
 13914              		.loc 1 4168 0
 13915 642e 00F08FBD 		b	.L131
 13916              	.L563:
4174:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colorp") == 0)
 13917              		.loc 1 4174 0
 13918 6432 6B48     		ldr	r0, .L763
 13919 6434 40F20001 		movw	r1, #:lower16:.LC681
 13920 6438 C0F20001 		movt	r1, #:upper16:.LC681
 13921 643c FFF7FEFF 		bl	strcmp
 13922 6440 0346     		mov	r3, r0
 13923 6442 002B     		cmp	r3, #0
 13924 6444 32D1     		bne	.L569
4176:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
 13925              		.loc 1 4176 0
 13926 6446 6748     		ldr	r0, .L763+4
 13927 6448 FFF7FEFF 		bl	atoi
 13928 644c 0346     		mov	r3, r0
 13929 644e 87F8C730 		strb	r3, [r7, #199]
4177:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
 13930              		.loc 1 4177 0
 13931 6452 6448     		ldr	r0, .L763+4
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 386


 13932 6454 FFF7FEFF 		bl	atoi
 13933 6458 0346     		mov	r3, r0
 13934 645a 87F8C730 		strb	r3, [r7, #199]
 13935 645e 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 13936 6462 082B     		cmp	r3, #8
 13937 6464 1AD8     		bhi	.L570
4179:.\console.c   **** 						pan_axis.param.color = color;
 13938              		.loc 1 4179 0
 13939 6466 40F20003 		movw	r3, #:lower16:pan_axis
 13940 646a C0F20003 		movt	r3, #:upper16:pan_axis
 13941 646e 97F8C720 		ldrb	r2, [r7, #199]
 13942 6472 83F82C20 		strb	r2, [r3, #44]
4182:.\console.c   **** 						dummy = WriteAllEEparams();
 13943              		.loc 1 4182 0
 13944 6476 FFF7FEFF 		bl	WriteAllEEparams
 13945 647a 0346     		mov	r3, r0
 13946 647c 87F8D930 		strb	r3, [r7, #217]
4183:.\console.c   **** 						printf(STR_REM_SCOL);   /* REM: pan axis color setted to...*/
 13947              		.loc 1 4183 0
 13948 6480 40F20000 		movw	r0, #:lower16:.LC682
 13949 6484 C0F20000 		movt	r0, #:upper16:.LC682
 13950 6488 FFF7FEFF 		bl	printf
4184:.\console.c   **** 						ShowParamsColor(&pan_axis);
 13951              		.loc 1 4184 0
 13952 648c 40F20000 		movw	r0, #:lower16:pan_axis
 13953 6490 C0F20000 		movt	r0, #:upper16:pan_axis
 13954 6494 FFF7FEFF 		bl	ShowParamsColor
4190:.\console.c   **** 					goto exitpars;
 13955              		.loc 1 4190 0
 13956 6498 00F05ABD 		b	.L131
 13957              	.L570:
4188:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 13958              		.loc 1 4188 0
 13959 649c 40F20000 		movw	r0, #:lower16:.LC450
 13960 64a0 C0F20000 		movt	r0, #:upper16:.LC450
 13961 64a4 FFF7FEFF 		bl	printf
4190:.\console.c   **** 					goto exitpars;
 13962              		.loc 1 4190 0
 13963 64a8 00F052BD 		b	.L131
 13964              	.L569:
4196:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "colort") == 0)
 13965              		.loc 1 4196 0
 13966 64ac 4C48     		ldr	r0, .L763
 13967 64ae 40F20001 		movw	r1, #:lower16:.LC683
 13968 64b2 C0F20001 		movt	r1, #:upper16:.LC683
 13969 64b6 FFF7FEFF 		bl	strcmp
 13970 64ba 0346     		mov	r3, r0
 13971 64bc 002B     		cmp	r3, #0
 13972 64be 32D1     		bne	.L572
4198:.\console.c   **** 					if (((color = atoi(actual_cmd.number1)) >= GYRO_RATE)
 13973              		.loc 1 4198 0
 13974 64c0 4848     		ldr	r0, .L763+4
 13975 64c2 FFF7FEFF 		bl	atoi
 13976 64c6 0346     		mov	r3, r0
 13977 64c8 87F8C730 		strb	r3, [r7, #199]
4199:.\console.c   **** 					&& (color = atoi(actual_cmd.number1)) <= CTRL_CV)
 13978              		.loc 1 4199 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 387


 13979 64cc 4548     		ldr	r0, .L763+4
 13980 64ce FFF7FEFF 		bl	atoi
 13981 64d2 0346     		mov	r3, r0
 13982 64d4 87F8C730 		strb	r3, [r7, #199]
 13983 64d8 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 13984 64dc 082B     		cmp	r3, #8
 13985 64de 1AD8     		bhi	.L573
4201:.\console.c   **** 						tilt_axis.param.color = color;
 13986              		.loc 1 4201 0
 13987 64e0 40F20003 		movw	r3, #:lower16:tilt_axis
 13988 64e4 C0F20003 		movt	r3, #:upper16:tilt_axis
 13989 64e8 97F8C720 		ldrb	r2, [r7, #199]
 13990 64ec 83F82C20 		strb	r2, [r3, #44]
4204:.\console.c   **** 						dummy = WriteAllEEparams();
 13991              		.loc 1 4204 0
 13992 64f0 FFF7FEFF 		bl	WriteAllEEparams
 13993 64f4 0346     		mov	r3, r0
 13994 64f6 87F8D930 		strb	r3, [r7, #217]
4205:.\console.c   **** 						printf(STR_REM_SCOLT);   /* REM: tilt axis color setted to...*/
 13995              		.loc 1 4205 0
 13996 64fa 40F20000 		movw	r0, #:lower16:.LC684
 13997 64fe C0F20000 		movt	r0, #:upper16:.LC684
 13998 6502 FFF7FEFF 		bl	printf
4206:.\console.c   **** 						ShowParamsColor(&tilt_axis);						
 13999              		.loc 1 4206 0
 14000 6506 40F20000 		movw	r0, #:lower16:tilt_axis
 14001 650a C0F20000 		movt	r0, #:upper16:tilt_axis
 14002 650e FFF7FEFF 		bl	ShowParamsColor
4212:.\console.c   **** 					goto exitpars;
 14003              		.loc 1 4212 0
 14004 6512 00F01DBD 		b	.L131
 14005              	.L573:
4210:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14006              		.loc 1 4210 0
 14007 6516 40F20000 		movw	r0, #:lower16:.LC450
 14008 651a C0F20000 		movt	r0, #:upper16:.LC450
 14009 651e FFF7FEFF 		bl	printf
4212:.\console.c   **** 					goto exitpars;
 14010              		.loc 1 4212 0
 14011 6522 00F015BD 		b	.L131
 14012              	.L572:
4218:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopfp") == 0)
 14013              		.loc 1 4218 0
 14014 6526 2E48     		ldr	r0, .L763
 14015 6528 40F20001 		movw	r1, #:lower16:.LC685
 14016 652c C0F20001 		movt	r1, #:upper16:.LC685
 14017 6530 FFF7FEFF 		bl	strcmp
 14018 6534 0346     		mov	r3, r0
 14019 6536 002B     		cmp	r3, #0
 14020 6538 56D1     		bne	.L575
4220:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
 14021              		.loc 1 4220 0
 14022 653a 2A48     		ldr	r0, .L763+4
 14023 653c FFF7FEFF 		bl	atof
 14024 6540 0246     		mov	r2, r0
 14025 6542 0B46     		mov	r3, r1
 14026 6544 1046     		mov	r0, r2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 388


 14027 6546 1946     		mov	r1, r3
 14028 6548 FFF7FEFF 		bl	__aeabi_d2f
 14029 654c 0346     		mov	r3, r0
 14030 654e C7F8C030 		str	r3, [r7, #192]	@ float
 14031 6552 D7F8C000 		ldr	r0, [r7, #192]	@ float
 14032 6556 4FF00001 		mov	r1, #0
 14033 655a FFF7FEFF 		bl	__aeabi_fcmpge
 14034 655e 0346     		mov	r3, r0
 14035 6560 002B     		cmp	r3, #0
 14036 6562 34D0     		beq	.L576
 14037              	.L672:
4221:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
 14038              		.loc 1 4221 0
 14039 6564 1F48     		ldr	r0, .L763+4
 14040 6566 FFF7FEFF 		bl	atof
 14041 656a 0246     		mov	r2, r0
 14042 656c 0B46     		mov	r3, r1
 14043 656e 1046     		mov	r0, r2
 14044 6570 1946     		mov	r1, r3
 14045 6572 FFF7FEFF 		bl	__aeabi_d2f
 14046 6576 0346     		mov	r3, r0
 14047 6578 C7F8C030 		str	r3, [r7, #192]	@ float
 14048 657c D7F8C000 		ldr	r0, [r7, #192]	@ float
 14049 6580 4FF00001 		mov	r1, #0
 14050 6584 C4F22011 		movt	r1, 16672
 14051 6588 FFF7FEFF 		bl	__aeabi_fcmple
 14052 658c 0346     		mov	r3, r0
 14053 658e 002B     		cmp	r3, #0
 14054 6590 1DD0     		beq	.L576
 14055              	.L673:
4223:.\console.c   **** 						pan_axis.param.Kopf.fnum = Kopf;
 14056              		.loc 1 4223 0
 14057 6592 40F20003 		movw	r3, #:lower16:pan_axis
 14058 6596 C0F20003 		movt	r3, #:upper16:pan_axis
 14059 659a D7F8C020 		ldr	r2, [r7, #192]	@ float
 14060 659e 5A62     		str	r2, [r3, #36]	@ float
4226:.\console.c   **** 						dummy = WriteAllEEparams();
 14061              		.loc 1 4226 0
 14062 65a0 FFF7FEFF 		bl	WriteAllEEparams
 14063 65a4 0346     		mov	r3, r0
 14064 65a6 87F8D930 		strb	r3, [r7, #217]
4227:.\console.c   **** 						printf(STR_REM_PKOF, (float)pan_axis.param.Kopf.fnum);   /* REM: Pan Motor Kopf setted to...*
 14065              		.loc 1 4227 0
 14066 65aa 40F20003 		movw	r3, #:lower16:pan_axis
 14067 65ae C0F20003 		movt	r3, #:upper16:pan_axis
 14068 65b2 5B6A     		ldr	r3, [r3, #36]	@ float
 14069 65b4 1846     		mov	r0, r3
 14070 65b6 FFF7FEFF 		bl	__aeabi_f2d
 14071 65ba 0246     		mov	r2, r0
 14072 65bc 0B46     		mov	r3, r1
 14073 65be 40F20000 		movw	r0, #:lower16:.LC686
 14074 65c2 C0F20000 		movt	r0, #:upper16:.LC686
 14075 65c6 FFF7FEFF 		bl	printf
4233:.\console.c   **** 					goto exitpars;
 14076              		.loc 1 4233 0
 14077 65ca 00F0C1BC 		b	.L131
 14078              	.L576:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 389


4231:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14079              		.loc 1 4231 0
 14080 65ce 40F20000 		movw	r0, #:lower16:.LC450
 14081 65d2 C0F20000 		movt	r0, #:upper16:.LC450
 14082 65d6 FFF7FEFF 		bl	printf
4233:.\console.c   **** 					goto exitpars;
 14083              		.loc 1 4233 0
 14084 65da 00F0B9BC 		b	.L131
 14085              	.L764:
 14086 65de 00BF     		.align	2
 14087              	.L763:
 14088 65e0 0F000000 		.word	actual_cmd+15
 14089 65e4 1E000000 		.word	actual_cmd+30
 14090              	.L575:
4239:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "kopft") == 0)
 14091              		.loc 1 4239 0
 14092 65e8 AD48     		ldr	r0, .L765
 14093 65ea 40F20001 		movw	r1, #:lower16:.LC687
 14094 65ee C0F20001 		movt	r1, #:upper16:.LC687
 14095 65f2 FFF7FEFF 		bl	strcmp
 14096 65f6 0346     		mov	r3, r0
 14097 65f8 002B     		cmp	r3, #0
 14098 65fa 51D1     		bne	.L580
4241:.\console.c   **** 					if (((Kopf = atof(actual_cmd.number1)) >= 0)
 14099              		.loc 1 4241 0
 14100 65fc A948     		ldr	r0, .L765+4
 14101 65fe FFF7FEFF 		bl	atof
 14102 6602 0246     		mov	r2, r0
 14103 6604 0B46     		mov	r3, r1
 14104 6606 1046     		mov	r0, r2
 14105 6608 1946     		mov	r1, r3
 14106 660a FFF7FEFF 		bl	__aeabi_d2f
 14107 660e 0346     		mov	r3, r0
 14108 6610 C7F8C030 		str	r3, [r7, #192]	@ float
 14109 6614 D7F8C000 		ldr	r0, [r7, #192]	@ float
 14110 6618 4FF00001 		mov	r1, #0
 14111 661c FFF7FEFF 		bl	__aeabi_fcmpge
 14112 6620 0346     		mov	r3, r0
 14113 6622 002B     		cmp	r3, #0
 14114 6624 34D0     		beq	.L581
 14115              	.L674:
4242:.\console.c   **** 					&& (Kopf = atof(actual_cmd.number1)) <= 10)
 14116              		.loc 1 4242 0
 14117 6626 9F48     		ldr	r0, .L765+4
 14118 6628 FFF7FEFF 		bl	atof
 14119 662c 0246     		mov	r2, r0
 14120 662e 0B46     		mov	r3, r1
 14121 6630 1046     		mov	r0, r2
 14122 6632 1946     		mov	r1, r3
 14123 6634 FFF7FEFF 		bl	__aeabi_d2f
 14124 6638 0346     		mov	r3, r0
 14125 663a C7F8C030 		str	r3, [r7, #192]	@ float
 14126 663e D7F8C000 		ldr	r0, [r7, #192]	@ float
 14127 6642 4FF00001 		mov	r1, #0
 14128 6646 C4F22011 		movt	r1, 16672
 14129 664a FFF7FEFF 		bl	__aeabi_fcmple
 14130 664e 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 390


 14131 6650 002B     		cmp	r3, #0
 14132 6652 1DD0     		beq	.L581
 14133              	.L675:
4244:.\console.c   **** 						tilt_axis.param.Kopf.fnum = Kopf;
 14134              		.loc 1 4244 0
 14135 6654 40F20003 		movw	r3, #:lower16:tilt_axis
 14136 6658 C0F20003 		movt	r3, #:upper16:tilt_axis
 14137 665c D7F8C020 		ldr	r2, [r7, #192]	@ float
 14138 6660 5A62     		str	r2, [r3, #36]	@ float
4247:.\console.c   **** 						dummy = WriteAllEEparams();
 14139              		.loc 1 4247 0
 14140 6662 FFF7FEFF 		bl	WriteAllEEparams
 14141 6666 0346     		mov	r3, r0
 14142 6668 87F8D930 		strb	r3, [r7, #217]
4248:.\console.c   **** 						printf(STR_REM_TKOF, (float)tilt_axis.param.Kopf.fnum);   /* REM: Tilt Motor Kopf setted to..
 14143              		.loc 1 4248 0
 14144 666c 40F20003 		movw	r3, #:lower16:tilt_axis
 14145 6670 C0F20003 		movt	r3, #:upper16:tilt_axis
 14146 6674 5B6A     		ldr	r3, [r3, #36]	@ float
 14147 6676 1846     		mov	r0, r3
 14148 6678 FFF7FEFF 		bl	__aeabi_f2d
 14149 667c 0246     		mov	r2, r0
 14150 667e 0B46     		mov	r3, r1
 14151 6680 40F20000 		movw	r0, #:lower16:.LC688
 14152 6684 C0F20000 		movt	r0, #:upper16:.LC688
 14153 6688 FFF7FEFF 		bl	printf
4254:.\console.c   **** 					goto exitpars;
 14154              		.loc 1 4254 0
 14155 668c 00F060BC 		b	.L131
 14156              	.L581:
4252:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14157              		.loc 1 4252 0
 14158 6690 40F20000 		movw	r0, #:lower16:.LC450
 14159 6694 C0F20000 		movt	r0, #:upper16:.LC450
 14160 6698 FFF7FEFF 		bl	printf
4254:.\console.c   **** 					goto exitpars;
 14161              		.loc 1 4254 0
 14162 669c 00F058BC 		b	.L131
 14163              	.L580:
4260:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againp") == 0)
 14164              		.loc 1 4260 0
 14165 66a0 7F48     		ldr	r0, .L765
 14166 66a2 40F20001 		movw	r1, #:lower16:.LC689
 14167 66a6 C0F20001 		movt	r1, #:upper16:.LC689
 14168 66aa FFF7FEFF 		bl	strcmp
 14169 66ae 0346     		mov	r3, r0
 14170 66b0 002B     		cmp	r3, #0
 14171 66b2 52D1     		bne	.L585
4262:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
 14172              		.loc 1 4262 0
 14173 66b4 7B48     		ldr	r0, .L765+4
 14174 66b6 FFF7FEFF 		bl	atof
 14175 66ba 0246     		mov	r2, r0
 14176 66bc 0B46     		mov	r3, r1
 14177 66be 1046     		mov	r0, r2
 14178 66c0 1946     		mov	r1, r3
 14179 66c2 FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 391


 14180 66c6 0346     		mov	r3, r0
 14181 66c8 C7F8BC30 		str	r3, [r7, #188]	@ float
 14182 66cc D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14183 66d0 4FF00001 		mov	r1, #0
 14184 66d4 CCF27A41 		movt	r1, 50298
 14185 66d8 FFF7FEFF 		bl	__aeabi_fcmpge
 14186 66dc 0346     		mov	r3, r0
 14187 66de 002B     		cmp	r3, #0
 14188 66e0 34D0     		beq	.L586
 14189              	.L676:
4263:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
 14190              		.loc 1 4263 0
 14191 66e2 7048     		ldr	r0, .L765+4
 14192 66e4 FFF7FEFF 		bl	atof
 14193 66e8 0246     		mov	r2, r0
 14194 66ea 0B46     		mov	r3, r1
 14195 66ec 1046     		mov	r0, r2
 14196 66ee 1946     		mov	r1, r3
 14197 66f0 FFF7FEFF 		bl	__aeabi_d2f
 14198 66f4 0346     		mov	r3, r0
 14199 66f6 C7F8BC30 		str	r3, [r7, #188]	@ float
 14200 66fa D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14201 66fe 4FF00001 		mov	r1, #0
 14202 6702 C4F27A41 		movt	r1, 17530
 14203 6706 FFF7FEFF 		bl	__aeabi_fcmple
 14204 670a 0346     		mov	r3, r0
 14205 670c 002B     		cmp	r3, #0
 14206 670e 1DD0     		beq	.L586
 14207              	.L677:
4265:.\console.c   **** 						pan_axis.param.Gain_ANAOUT.fnum = anaout_gain;
 14208              		.loc 1 4265 0
 14209 6710 40F20003 		movw	r3, #:lower16:pan_axis
 14210 6714 C0F20003 		movt	r3, #:upper16:pan_axis
 14211 6718 D7F8BC20 		ldr	r2, [r7, #188]	@ float
 14212 671c 9A62     		str	r2, [r3, #40]	@ float
4268:.\console.c   **** 						dummy = WriteAllEEparams();
 14213              		.loc 1 4268 0
 14214 671e FFF7FEFF 		bl	WriteAllEEparams
 14215 6722 0346     		mov	r3, r0
 14216 6724 87F8D930 		strb	r3, [r7, #217]
4269:.\console.c   **** 						printf(STR_REM_PAGA, (float)pan_axis.param.Gain_ANAOUT.fnum);   /* REM: Pan Motor Anaout Gain
 14217              		.loc 1 4269 0
 14218 6728 40F20003 		movw	r3, #:lower16:pan_axis
 14219 672c C0F20003 		movt	r3, #:upper16:pan_axis
 14220 6730 9B6A     		ldr	r3, [r3, #40]	@ float
 14221 6732 1846     		mov	r0, r3
 14222 6734 FFF7FEFF 		bl	__aeabi_f2d
 14223 6738 0246     		mov	r2, r0
 14224 673a 0B46     		mov	r3, r1
 14225 673c 40F20000 		movw	r0, #:lower16:.LC690
 14226 6740 C0F20000 		movt	r0, #:upper16:.LC690
 14227 6744 FFF7FEFF 		bl	printf
4275:.\console.c   **** 					goto exitpars;
 14228              		.loc 1 4275 0
 14229 6748 00F002BC 		b	.L131
 14230              	.L586:
4273:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 392


 14231              		.loc 1 4273 0
 14232 674c 40F20000 		movw	r0, #:lower16:.LC450
 14233 6750 C0F20000 		movt	r0, #:upper16:.LC450
 14234 6754 FFF7FEFF 		bl	printf
4275:.\console.c   **** 					goto exitpars;
 14235              		.loc 1 4275 0
 14236 6758 FAE3     		b	.L131
 14237              	.L585:
4281:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "againt") == 0)
 14238              		.loc 1 4281 0
 14239 675a 5148     		ldr	r0, .L765
 14240 675c 40F20001 		movw	r1, #:lower16:.LC691
 14241 6760 C0F20001 		movt	r1, #:upper16:.LC691
 14242 6764 FFF7FEFF 		bl	strcmp
 14243 6768 0346     		mov	r3, r0
 14244 676a 002B     		cmp	r3, #0
 14245 676c 51D1     		bne	.L590
4283:.\console.c   **** 					if (((anaout_gain = atof(actual_cmd.number1)) >= -1000)
 14246              		.loc 1 4283 0
 14247 676e 4D48     		ldr	r0, .L765+4
 14248 6770 FFF7FEFF 		bl	atof
 14249 6774 0246     		mov	r2, r0
 14250 6776 0B46     		mov	r3, r1
 14251 6778 1046     		mov	r0, r2
 14252 677a 1946     		mov	r1, r3
 14253 677c FFF7FEFF 		bl	__aeabi_d2f
 14254 6780 0346     		mov	r3, r0
 14255 6782 C7F8BC30 		str	r3, [r7, #188]	@ float
 14256 6786 D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14257 678a 4FF00001 		mov	r1, #0
 14258 678e CCF27A41 		movt	r1, 50298
 14259 6792 FFF7FEFF 		bl	__aeabi_fcmpge
 14260 6796 0346     		mov	r3, r0
 14261 6798 002B     		cmp	r3, #0
 14262 679a 33D0     		beq	.L591
 14263              	.L678:
4284:.\console.c   **** 					&& (anaout_gain = atof(actual_cmd.number1)) <= 1000)
 14264              		.loc 1 4284 0
 14265 679c 4148     		ldr	r0, .L765+4
 14266 679e FFF7FEFF 		bl	atof
 14267 67a2 0246     		mov	r2, r0
 14268 67a4 0B46     		mov	r3, r1
 14269 67a6 1046     		mov	r0, r2
 14270 67a8 1946     		mov	r1, r3
 14271 67aa FFF7FEFF 		bl	__aeabi_d2f
 14272 67ae 0346     		mov	r3, r0
 14273 67b0 C7F8BC30 		str	r3, [r7, #188]	@ float
 14274 67b4 D7F8BC00 		ldr	r0, [r7, #188]	@ float
 14275 67b8 4FF00001 		mov	r1, #0
 14276 67bc C4F27A41 		movt	r1, 17530
 14277 67c0 FFF7FEFF 		bl	__aeabi_fcmple
 14278 67c4 0346     		mov	r3, r0
 14279 67c6 002B     		cmp	r3, #0
 14280 67c8 1CD0     		beq	.L591
 14281              	.L679:
4286:.\console.c   **** 						tilt_axis.param.Gain_ANAOUT.fnum = anaout_gain;
 14282              		.loc 1 4286 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 393


 14283 67ca 40F20003 		movw	r3, #:lower16:tilt_axis
 14284 67ce C0F20003 		movt	r3, #:upper16:tilt_axis
 14285 67d2 D7F8BC20 		ldr	r2, [r7, #188]	@ float
 14286 67d6 9A62     		str	r2, [r3, #40]	@ float
4289:.\console.c   **** 						dummy = WriteAllEEparams();
 14287              		.loc 1 4289 0
 14288 67d8 FFF7FEFF 		bl	WriteAllEEparams
 14289 67dc 0346     		mov	r3, r0
 14290 67de 87F8D930 		strb	r3, [r7, #217]
4290:.\console.c   **** 						printf(STR_REM_TAGA, (float)tilt_axis.param.Gain_ANAOUT.fnum);   /* REM: Tilt Motor Anaout Ga
 14291              		.loc 1 4290 0
 14292 67e2 40F20003 		movw	r3, #:lower16:tilt_axis
 14293 67e6 C0F20003 		movt	r3, #:upper16:tilt_axis
 14294 67ea 9B6A     		ldr	r3, [r3, #40]	@ float
 14295 67ec 1846     		mov	r0, r3
 14296 67ee FFF7FEFF 		bl	__aeabi_f2d
 14297 67f2 0246     		mov	r2, r0
 14298 67f4 0B46     		mov	r3, r1
 14299 67f6 40F20000 		movw	r0, #:lower16:.LC692
 14300 67fa C0F20000 		movt	r0, #:upper16:.LC692
 14301 67fe FFF7FEFF 		bl	printf
4296:.\console.c   **** 					goto exitpars;
 14302              		.loc 1 4296 0
 14303 6802 A5E3     		b	.L131
 14304              	.L591:
4294:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14305              		.loc 1 4294 0
 14306 6804 40F20000 		movw	r0, #:lower16:.LC450
 14307 6808 C0F20000 		movt	r0, #:upper16:.LC450
 14308 680c FFF7FEFF 		bl	printf
4296:.\console.c   **** 					goto exitpars;
 14309              		.loc 1 4296 0
 14310 6810 9EE3     		b	.L131
 14311              	.L590:
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
 14312              		.loc 1 4324 0
 14313 6812 2348     		ldr	r0, .L765
 14314 6814 40F20001 		movw	r1, #:lower16:.LC693
 14315 6818 C0F20001 		movt	r1, #:upper16:.LC693
 14316 681c FFF7FEFF 		bl	strcmp
 14317 6820 0346     		mov	r3, r0
 14318 6822 002B     		cmp	r3, #0
 14319 6824 09D0     		beq	.L595
4325:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacxof") == 0))
 14320              		.loc 1 4325 0 discriminator 1
 14321 6826 1E48     		ldr	r0, .L765
 14322 6828 40F20001 		movw	r1, #:lower16:.LC694
 14323 682c C0F20001 		movt	r1, #:upper16:.LC694
 14324 6830 FFF7FEFF 		bl	strcmp
 14325 6834 0346     		mov	r3, r0
4324:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacxoffset") == 0) ||
 14326              		.loc 1 4324 0 discriminator 1
 14327 6836 002B     		cmp	r3, #0
 14328 6838 36D1     		bne	.L596
 14329              	.L595:
4327:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14330              		.loc 1 4327 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 394


 14331 683a 1A48     		ldr	r0, .L765+4
 14332 683c FFF7FEFF 		bl	atoi
 14333 6840 0346     		mov	r3, r0
 14334 6842 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14335 6846 B7F9EE30 		ldrsh	r3, [r7, #238]
 14336 684a 13F1960F 		cmn	r3, #150
 14337 684e 1FDB     		blt	.L597
4328:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14338              		.loc 1 4328 0
 14339 6850 1448     		ldr	r0, .L765+4
 14340 6852 FFF7FEFF 		bl	atoi
 14341 6856 0346     		mov	r3, r0
 14342 6858 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14343 685c B7F9EE30 		ldrsh	r3, [r7, #238]
 14344 6860 962B     		cmp	r3, #150
 14345 6862 15DC     		bgt	.L597
4330:.\console.c   **** 						gobee_param.x_acc_ADC_offset = (int16)offset;
 14346              		.loc 1 4330 0
 14347 6864 40F20003 		movw	r3, #:lower16:gobee_param
 14348 6868 C0F20003 		movt	r3, #:upper16:gobee_param
 14349 686c B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14350 6870 1A81     		strh	r2, [r3, #8]	@ movhi
4333:.\console.c   **** 						dummy = WriteAllEEparams();
 14351              		.loc 1 4333 0
 14352 6872 FFF7FEFF 		bl	WriteAllEEparams
 14353 6876 0346     		mov	r3, r0
 14354 6878 87F8D930 		strb	r3, [r7, #217]
4334:.\console.c   **** 						printf(STR_REM_SEAX, (int16)offset);   /* REM: ACC AXIS X ADC offset setted to...*/					
 14355              		.loc 1 4334 0
 14356 687c B7F9EE30 		ldrsh	r3, [r7, #238]
 14357 6880 40F20000 		movw	r0, #:lower16:.LC695
 14358 6884 C0F20000 		movt	r0, #:upper16:.LC695
 14359 6888 1946     		mov	r1, r3
 14360 688a FFF7FEFF 		bl	printf
4340:.\console.c   **** 					goto exitpars;
 14361              		.loc 1 4340 0
 14362 688e 5FE3     		b	.L131
 14363              	.L597:
4338:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14364              		.loc 1 4338 0
 14365 6890 40F20000 		movw	r0, #:lower16:.LC450
 14366 6894 C0F20000 		movt	r0, #:upper16:.LC450
 14367 6898 FFF7FEFF 		bl	printf
4340:.\console.c   **** 					goto exitpars;
 14368              		.loc 1 4340 0
 14369 689c 58E3     		b	.L131
 14370              	.L766:
 14371 689e 00BF     		.align	2
 14372              	.L765:
 14373 68a0 0F000000 		.word	actual_cmd+15
 14374 68a4 1E000000 		.word	actual_cmd+30
 14375              	.L596:
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
 14376              		.loc 1 4346 0
 14377 68a8 9D48     		ldr	r0, .L767
 14378 68aa 40F20001 		movw	r1, #:lower16:.LC696
 14379 68ae C0F20001 		movt	r1, #:upper16:.LC696
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 395


 14380 68b2 FFF7FEFF 		bl	strcmp
 14381 68b6 0346     		mov	r3, r0
 14382 68b8 002B     		cmp	r3, #0
 14383 68ba 09D0     		beq	.L599
4347:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aacyof") == 0))
 14384              		.loc 1 4347 0 discriminator 1
 14385 68bc 9848     		ldr	r0, .L767
 14386 68be 40F20001 		movw	r1, #:lower16:.LC697
 14387 68c2 C0F20001 		movt	r1, #:upper16:.LC697
 14388 68c6 FFF7FEFF 		bl	strcmp
 14389 68ca 0346     		mov	r3, r0
4346:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aacyoffset") == 0) ||
 14390              		.loc 1 4346 0 discriminator 1
 14391 68cc 002B     		cmp	r3, #0
 14392 68ce 31D1     		bne	.L600
 14393              	.L599:
4349:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14394              		.loc 1 4349 0
 14395 68d0 9448     		ldr	r0, .L767+4
 14396 68d2 FFF7FEFF 		bl	atoi
 14397 68d6 0346     		mov	r3, r0
 14398 68d8 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14399 68dc B7F9EE30 		ldrsh	r3, [r7, #238]
 14400 68e0 13F1960F 		cmn	r3, #150
 14401 68e4 1FDB     		blt	.L601
4350:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14402              		.loc 1 4350 0
 14403 68e6 8F48     		ldr	r0, .L767+4
 14404 68e8 FFF7FEFF 		bl	atoi
 14405 68ec 0346     		mov	r3, r0
 14406 68ee A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14407 68f2 B7F9EE30 		ldrsh	r3, [r7, #238]
 14408 68f6 962B     		cmp	r3, #150
 14409 68f8 15DC     		bgt	.L601
4352:.\console.c   **** 						gobee_param.y_acc_ADC_offset = (int16)offset;
 14410              		.loc 1 4352 0
 14411 68fa 40F20003 		movw	r3, #:lower16:gobee_param
 14412 68fe C0F20003 		movt	r3, #:upper16:gobee_param
 14413 6902 B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14414 6906 5A81     		strh	r2, [r3, #10]	@ movhi
4355:.\console.c   **** 						dummy = WriteAllEEparams();
 14415              		.loc 1 4355 0
 14416 6908 FFF7FEFF 		bl	WriteAllEEparams
 14417 690c 0346     		mov	r3, r0
 14418 690e 87F8D930 		strb	r3, [r7, #217]
4356:.\console.c   **** 						printf(STR_REM_SEAY, (int16)offset);   /* REM: ACC AXIS Y ADC offset setted to...*/					
 14419              		.loc 1 4356 0
 14420 6912 B7F9EE30 		ldrsh	r3, [r7, #238]
 14421 6916 40F20000 		movw	r0, #:lower16:.LC698
 14422 691a C0F20000 		movt	r0, #:upper16:.LC698
 14423 691e 1946     		mov	r1, r3
 14424 6920 FFF7FEFF 		bl	printf
4362:.\console.c   **** 					goto exitpars;
 14425              		.loc 1 4362 0
 14426 6924 14E3     		b	.L131
 14427              	.L601:
4360:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 396


 14428              		.loc 1 4360 0
 14429 6926 40F20000 		movw	r0, #:lower16:.LC450
 14430 692a C0F20000 		movt	r0, #:upper16:.LC450
 14431 692e FFF7FEFF 		bl	printf
4362:.\console.c   **** 					goto exitpars;
 14432              		.loc 1 4362 0
 14433 6932 0DE3     		b	.L131
 14434              	.L600:
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
 14435              		.loc 1 4368 0
 14436 6934 7A48     		ldr	r0, .L767
 14437 6936 40F20001 		movw	r1, #:lower16:.LC699
 14438 693a C0F20001 		movt	r1, #:upper16:.LC699
 14439 693e FFF7FEFF 		bl	strcmp
 14440 6942 0346     		mov	r3, r0
 14441 6944 002B     		cmp	r3, #0
 14442 6946 09D0     		beq	.L603
4369:.\console.c   **** 					(strcmp(actual_cmd.parameter, "aaczof") == 0))
 14443              		.loc 1 4369 0 discriminator 1
 14444 6948 7548     		ldr	r0, .L767
 14445 694a 40F20001 		movw	r1, #:lower16:.LC700
 14446 694e C0F20001 		movt	r1, #:upper16:.LC700
 14447 6952 FFF7FEFF 		bl	strcmp
 14448 6956 0346     		mov	r3, r0
4368:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "aaczoffset") == 0) ||
 14449              		.loc 1 4368 0 discriminator 1
 14450 6958 002B     		cmp	r3, #0
 14451 695a 31D1     		bne	.L604
 14452              	.L603:
4371:.\console.c   **** 					if (((offset = atoi(actual_cmd.number1)) >= -150)
 14453              		.loc 1 4371 0
 14454 695c 7148     		ldr	r0, .L767+4
 14455 695e FFF7FEFF 		bl	atoi
 14456 6962 0346     		mov	r3, r0
 14457 6964 A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14458 6968 B7F9EE30 		ldrsh	r3, [r7, #238]
 14459 696c 13F1960F 		cmn	r3, #150
 14460 6970 1FDB     		blt	.L605
4372:.\console.c   **** 					&& (offset = atoi(actual_cmd.number1)) <= 150)
 14461              		.loc 1 4372 0
 14462 6972 6C48     		ldr	r0, .L767+4
 14463 6974 FFF7FEFF 		bl	atoi
 14464 6978 0346     		mov	r3, r0
 14465 697a A7F8EE30 		strh	r3, [r7, #238]	@ movhi
 14466 697e B7F9EE30 		ldrsh	r3, [r7, #238]
 14467 6982 962B     		cmp	r3, #150
 14468 6984 15DC     		bgt	.L605
4374:.\console.c   **** 						gobee_param.z_acc_ADC_offset = (int16)offset;
 14469              		.loc 1 4374 0
 14470 6986 40F20003 		movw	r3, #:lower16:gobee_param
 14471 698a C0F20003 		movt	r3, #:upper16:gobee_param
 14472 698e B7F8EE20 		ldrh	r2, [r7, #238]	@ movhi
 14473 6992 9A81     		strh	r2, [r3, #12]	@ movhi
4377:.\console.c   **** 						dummy = WriteAllEEparams();
 14474              		.loc 1 4377 0
 14475 6994 FFF7FEFF 		bl	WriteAllEEparams
 14476 6998 0346     		mov	r3, r0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 397


 14477 699a 87F8D930 		strb	r3, [r7, #217]
4378:.\console.c   **** 						printf(STR_REM_SEAZ, (int16)offset);   /* REM: ACC AXIS Z ADC offset setted to...*/					
 14478              		.loc 1 4378 0
 14479 699e B7F9EE30 		ldrsh	r3, [r7, #238]
 14480 69a2 40F20000 		movw	r0, #:lower16:.LC701
 14481 69a6 C0F20000 		movt	r0, #:upper16:.LC701
 14482 69aa 1946     		mov	r1, r3
 14483 69ac FFF7FEFF 		bl	printf
4384:.\console.c   **** 					goto exitpars;
 14484              		.loc 1 4384 0
 14485 69b0 CEE2     		b	.L131
 14486              	.L605:
4382:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14487              		.loc 1 4382 0
 14488 69b2 40F20000 		movw	r0, #:lower16:.LC450
 14489 69b6 C0F20000 		movt	r0, #:upper16:.LC450
 14490 69ba FFF7FEFF 		bl	printf
4384:.\console.c   **** 					goto exitpars;
 14491              		.loc 1 4384 0
 14492 69be C7E2     		b	.L131
 14493              	.L604:
4475:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "beta") == 0)
 14494              		.loc 1 4475 0
 14495 69c0 5748     		ldr	r0, .L767
 14496 69c2 40F20001 		movw	r1, #:lower16:.LC702
 14497 69c6 C0F20001 		movt	r1, #:upper16:.LC702
 14498 69ca FFF7FEFF 		bl	strcmp
 14499 69ce 0346     		mov	r3, r0
 14500 69d0 002B     		cmp	r3, #0
 14501 69d2 4DD1     		bne	.L607
4477:.\console.c   **** 					if (((beta = atof(actual_cmd.number1)) >= 0)
 14502              		.loc 1 4477 0
 14503 69d4 5348     		ldr	r0, .L767+4
 14504 69d6 FFF7FEFF 		bl	atof
 14505 69da 0246     		mov	r2, r0
 14506 69dc 0B46     		mov	r3, r1
 14507 69de 1046     		mov	r0, r2
 14508 69e0 1946     		mov	r1, r3
 14509 69e2 FFF7FEFF 		bl	__aeabi_d2f
 14510 69e6 0346     		mov	r3, r0
 14511 69e8 C7F8F830 		str	r3, [r7, #248]	@ float
 14512 69ec D7F8F800 		ldr	r0, [r7, #248]	@ float
 14513 69f0 4FF00001 		mov	r1, #0
 14514 69f4 FFF7FEFF 		bl	__aeabi_fcmpge
 14515 69f8 0346     		mov	r3, r0
 14516 69fa 002B     		cmp	r3, #0
 14517 69fc 31D0     		beq	.L608
 14518              	.L680:
4478:.\console.c   **** 					&& (beta = atof(actual_cmd.number1)) <= 1)
 14519              		.loc 1 4478 0
 14520 69fe 4948     		ldr	r0, .L767+4
 14521 6a00 FFF7FEFF 		bl	atof
 14522 6a04 0246     		mov	r2, r0
 14523 6a06 0B46     		mov	r3, r1
 14524 6a08 1046     		mov	r0, r2
 14525 6a0a 1946     		mov	r1, r3
 14526 6a0c FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 398


 14527 6a10 0346     		mov	r3, r0
 14528 6a12 C7F8F830 		str	r3, [r7, #248]	@ float
 14529 6a16 D7F8F800 		ldr	r0, [r7, #248]	@ float
 14530 6a1a 4FF07E51 		mov	r1, #1065353216
 14531 6a1e FFF7FEFF 		bl	__aeabi_fcmple
 14532 6a22 0346     		mov	r3, r0
 14533 6a24 002B     		cmp	r3, #0
 14534 6a26 1CD0     		beq	.L608
 14535              	.L681:
4480:.\console.c   **** 						gobee_param.beta.fnum = beta;
 14536              		.loc 1 4480 0
 14537 6a28 40F20003 		movw	r3, #:lower16:gobee_param
 14538 6a2c C0F20003 		movt	r3, #:upper16:gobee_param
 14539 6a30 D7F8F820 		ldr	r2, [r7, #248]	@ float
 14540 6a34 5A60     		str	r2, [r3, #4]	@ float
4483:.\console.c   **** 						dummy = WriteAllEEparams();
 14541              		.loc 1 4483 0
 14542 6a36 FFF7FEFF 		bl	WriteAllEEparams
 14543 6a3a 0346     		mov	r3, r0
 14544 6a3c 87F8D930 		strb	r3, [r7, #217]
4484:.\console.c   **** 						printf(STR_REM_STBT, (float)gobee_param.beta.fnum);   /* REM: beta setted to...*/					
 14545              		.loc 1 4484 0
 14546 6a40 40F20003 		movw	r3, #:lower16:gobee_param
 14547 6a44 C0F20003 		movt	r3, #:upper16:gobee_param
 14548 6a48 5B68     		ldr	r3, [r3, #4]	@ float
 14549 6a4a 1846     		mov	r0, r3
 14550 6a4c FFF7FEFF 		bl	__aeabi_f2d
 14551 6a50 0246     		mov	r2, r0
 14552 6a52 0B46     		mov	r3, r1
 14553 6a54 40F20000 		movw	r0, #:lower16:.LC703
 14554 6a58 C0F20000 		movt	r0, #:upper16:.LC703
 14555 6a5c FFF7FEFF 		bl	printf
4490:.\console.c   **** 					goto exitpars;
 14556              		.loc 1 4490 0
 14557 6a60 76E2     		b	.L131
 14558              	.L608:
4488:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14559              		.loc 1 4488 0
 14560 6a62 40F20000 		movw	r0, #:lower16:.LC450
 14561 6a66 C0F20000 		movt	r0, #:upper16:.LC450
 14562 6a6a FFF7FEFF 		bl	printf
4490:.\console.c   **** 					goto exitpars;
 14563              		.loc 1 4490 0
 14564 6a6e 6FE2     		b	.L131
 14565              	.L607:
4496:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "gamma") == 0)
 14566              		.loc 1 4496 0
 14567 6a70 2B48     		ldr	r0, .L767
 14568 6a72 40F20001 		movw	r1, #:lower16:.LC704
 14569 6a76 C0F20001 		movt	r1, #:upper16:.LC704
 14570 6a7a FFF7FEFF 		bl	strcmp
 14571 6a7e 0346     		mov	r3, r0
 14572 6a80 002B     		cmp	r3, #0
 14573 6a82 51D1     		bne	.L612
4498:.\console.c   **** 					if (((gamma = atof(actual_cmd.number1)) >= 0)
 14574              		.loc 1 4498 0
 14575 6a84 2748     		ldr	r0, .L767+4
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 399


 14576 6a86 FFF7FEFF 		bl	atof
 14577 6a8a 0246     		mov	r2, r0
 14578 6a8c 0B46     		mov	r3, r1
 14579 6a8e 1046     		mov	r0, r2
 14580 6a90 1946     		mov	r1, r3
 14581 6a92 FFF7FEFF 		bl	__aeabi_d2f
 14582 6a96 0346     		mov	r3, r0
 14583 6a98 C7F8F430 		str	r3, [r7, #244]	@ float
 14584 6a9c D7F8F400 		ldr	r0, [r7, #244]	@ float
 14585 6aa0 4FF00001 		mov	r1, #0
 14586 6aa4 FFF7FEFF 		bl	__aeabi_fcmpge
 14587 6aa8 0346     		mov	r3, r0
 14588 6aaa 002B     		cmp	r3, #0
 14589 6aac 31D0     		beq	.L613
 14590              	.L682:
4499:.\console.c   **** 					&& (gamma = atof(actual_cmd.number1)) <= 1)
 14591              		.loc 1 4499 0
 14592 6aae 1D48     		ldr	r0, .L767+4
 14593 6ab0 FFF7FEFF 		bl	atof
 14594 6ab4 0246     		mov	r2, r0
 14595 6ab6 0B46     		mov	r3, r1
 14596 6ab8 1046     		mov	r0, r2
 14597 6aba 1946     		mov	r1, r3
 14598 6abc FFF7FEFF 		bl	__aeabi_d2f
 14599 6ac0 0346     		mov	r3, r0
 14600 6ac2 C7F8F430 		str	r3, [r7, #244]	@ float
 14601 6ac6 D7F8F400 		ldr	r0, [r7, #244]	@ float
 14602 6aca 4FF07E51 		mov	r1, #1065353216
 14603 6ace FFF7FEFF 		bl	__aeabi_fcmple
 14604 6ad2 0346     		mov	r3, r0
 14605 6ad4 002B     		cmp	r3, #0
 14606 6ad6 1CD0     		beq	.L613
 14607              	.L683:
4501:.\console.c   **** 						IMU_sensor.param.gamma.fnum = gamma;
 14608              		.loc 1 4501 0
 14609 6ad8 40F20003 		movw	r3, #:lower16:IMU_sensor
 14610 6adc C0F20003 		movt	r3, #:upper16:IMU_sensor
 14611 6ae0 D7F8F420 		ldr	r2, [r7, #244]	@ float
 14612 6ae4 9A62     		str	r2, [r3, #40]	@ float
4504:.\console.c   **** 						dummy = WriteAllEEparams();
 14613              		.loc 1 4504 0
 14614 6ae6 FFF7FEFF 		bl	WriteAllEEparams
 14615 6aea 0346     		mov	r3, r0
 14616 6aec 87F8D930 		strb	r3, [r7, #217]
4505:.\console.c   **** 						printf(STR_REM_STGM, (float)IMU_sensor.param.gamma.fnum);   /* REM: gamma setted to...*/					
 14617              		.loc 1 4505 0
 14618 6af0 40F20003 		movw	r3, #:lower16:IMU_sensor
 14619 6af4 C0F20003 		movt	r3, #:upper16:IMU_sensor
 14620 6af8 9B6A     		ldr	r3, [r3, #40]	@ float
 14621 6afa 1846     		mov	r0, r3
 14622 6afc FFF7FEFF 		bl	__aeabi_f2d
 14623 6b00 0246     		mov	r2, r0
 14624 6b02 0B46     		mov	r3, r1
 14625 6b04 40F20000 		movw	r0, #:lower16:.LC705
 14626 6b08 C0F20000 		movt	r0, #:upper16:.LC705
 14627 6b0c FFF7FEFF 		bl	printf
4511:.\console.c   **** 					goto exitpars;
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 400


 14628              		.loc 1 4511 0
 14629 6b10 1EE2     		b	.L131
 14630              	.L613:
4509:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14631              		.loc 1 4509 0
 14632 6b12 40F20000 		movw	r0, #:lower16:.LC450
 14633 6b16 C0F20000 		movt	r0, #:upper16:.LC450
 14634 6b1a FFF7FEFF 		bl	printf
4511:.\console.c   **** 					goto exitpars;
 14635              		.loc 1 4511 0
 14636 6b1e 17E2     		b	.L131
 14637              	.L768:
 14638              		.align	2
 14639              	.L767:
 14640 6b20 0F000000 		.word	actual_cmd+15
 14641 6b24 1E000000 		.word	actual_cmd+30
 14642              	.L612:
4517:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "jumpth") == 0)
 14643              		.loc 1 4517 0
 14644 6b28 AE48     		ldr	r0, .L769
 14645 6b2a 40F20001 		movw	r1, #:lower16:.LC706
 14646 6b2e C0F20001 		movt	r1, #:upper16:.LC706
 14647 6b32 FFF7FEFF 		bl	strcmp
 14648 6b36 0346     		mov	r3, r0
 14649 6b38 002B     		cmp	r3, #0
 14650 6b3a 4FD1     		bne	.L617
4519:.\console.c   **** 					if (((jump_g_th = atof(actual_cmd.number1)) >= 0)
 14651              		.loc 1 4519 0
 14652 6b3c AA48     		ldr	r0, .L769+4
 14653 6b3e FFF7FEFF 		bl	atof
 14654 6b42 0246     		mov	r2, r0
 14655 6b44 0B46     		mov	r3, r1
 14656 6b46 1046     		mov	r0, r2
 14657 6b48 1946     		mov	r1, r3
 14658 6b4a FFF7FEFF 		bl	__aeabi_d2f
 14659 6b4e 0346     		mov	r3, r0
 14660 6b50 C7F8E030 		str	r3, [r7, #224]	@ float
 14661 6b54 D7F8E000 		ldr	r0, [r7, #224]	@ float
 14662 6b58 4FF00001 		mov	r1, #0
 14663 6b5c FFF7FEFF 		bl	__aeabi_fcmpge
 14664 6b60 0346     		mov	r3, r0
 14665 6b62 002B     		cmp	r3, #0
 14666 6b64 33D0     		beq	.L618
 14667              	.L684:
4520:.\console.c   **** 					&& (jump_g_th = atof(actual_cmd.number1)) <= 10)
 14668              		.loc 1 4520 0
 14669 6b66 A048     		ldr	r0, .L769+4
 14670 6b68 FFF7FEFF 		bl	atof
 14671 6b6c 0246     		mov	r2, r0
 14672 6b6e 0B46     		mov	r3, r1
 14673 6b70 1046     		mov	r0, r2
 14674 6b72 1946     		mov	r1, r3
 14675 6b74 FFF7FEFF 		bl	__aeabi_d2f
 14676 6b78 0346     		mov	r3, r0
 14677 6b7a C7F8E030 		str	r3, [r7, #224]	@ float
 14678 6b7e D7F8E000 		ldr	r0, [r7, #224]	@ float
 14679 6b82 4FF00001 		mov	r1, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 401


 14680 6b86 C4F22011 		movt	r1, 16672
 14681 6b8a FFF7FEFF 		bl	__aeabi_fcmple
 14682 6b8e 0346     		mov	r3, r0
 14683 6b90 002B     		cmp	r3, #0
 14684 6b92 1CD0     		beq	.L618
 14685              	.L685:
4522:.\console.c   **** 						gobee_param.jump_g_threshold.fnum = jump_g_th;
 14686              		.loc 1 4522 0
 14687 6b94 40F20003 		movw	r3, #:lower16:gobee_param
 14688 6b98 C0F20003 		movt	r3, #:upper16:gobee_param
 14689 6b9c D7F8E020 		ldr	r2, [r7, #224]	@ float
 14690 6ba0 1A61     		str	r2, [r3, #16]	@ float
4525:.\console.c   **** 						dummy = WriteAllEEparams();
 14691              		.loc 1 4525 0
 14692 6ba2 FFF7FEFF 		bl	WriteAllEEparams
 14693 6ba6 0346     		mov	r3, r0
 14694 6ba8 87F8D930 		strb	r3, [r7, #217]
4526:.\console.c   **** 						printf(STR_REM_STJG, (float)gobee_param.jump_g_threshold.fnum);   /* REM: jump g thr setted t
 14695              		.loc 1 4526 0
 14696 6bac 40F20003 		movw	r3, #:lower16:gobee_param
 14697 6bb0 C0F20003 		movt	r3, #:upper16:gobee_param
 14698 6bb4 1B69     		ldr	r3, [r3, #16]	@ float
 14699 6bb6 1846     		mov	r0, r3
 14700 6bb8 FFF7FEFF 		bl	__aeabi_f2d
 14701 6bbc 0246     		mov	r2, r0
 14702 6bbe 0B46     		mov	r3, r1
 14703 6bc0 40F20000 		movw	r0, #:lower16:.LC707
 14704 6bc4 C0F20000 		movt	r0, #:upper16:.LC707
 14705 6bc8 FFF7FEFF 		bl	printf
4532:.\console.c   **** 					goto exitpars;
 14706              		.loc 1 4532 0
 14707 6bcc C0E1     		b	.L131
 14708              	.L618:
4530:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14709              		.loc 1 4530 0
 14710 6bce 40F20000 		movw	r0, #:lower16:.LC450
 14711 6bd2 C0F20000 		movt	r0, #:upper16:.LC450
 14712 6bd6 FFF7FEFF 		bl	printf
4532:.\console.c   **** 					goto exitpars;
 14713              		.loc 1 4532 0
 14714 6bda B9E1     		b	.L131
 14715              	.L617:
4538:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "accth") == 0)
 14716              		.loc 1 4538 0
 14717 6bdc 8148     		ldr	r0, .L769
 14718 6bde 40F20001 		movw	r1, #:lower16:.LC708
 14719 6be2 C0F20001 		movt	r1, #:upper16:.LC708
 14720 6be6 FFF7FEFF 		bl	strcmp
 14721 6bea 0346     		mov	r3, r0
 14722 6bec 002B     		cmp	r3, #0
 14723 6bee 4FD1     		bne	.L622
4540:.\console.c   **** 					if (((acc_g_th = atof(actual_cmd.number1)) >= 0)
 14724              		.loc 1 4540 0
 14725 6bf0 7D48     		ldr	r0, .L769+4
 14726 6bf2 FFF7FEFF 		bl	atof
 14727 6bf6 0246     		mov	r2, r0
 14728 6bf8 0B46     		mov	r3, r1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 402


 14729 6bfa 1046     		mov	r0, r2
 14730 6bfc 1946     		mov	r1, r3
 14731 6bfe FFF7FEFF 		bl	__aeabi_d2f
 14732 6c02 0346     		mov	r3, r0
 14733 6c04 C7F8DC30 		str	r3, [r7, #220]	@ float
 14734 6c08 D7F8DC00 		ldr	r0, [r7, #220]	@ float
 14735 6c0c 4FF00001 		mov	r1, #0
 14736 6c10 FFF7FEFF 		bl	__aeabi_fcmpge
 14737 6c14 0346     		mov	r3, r0
 14738 6c16 002B     		cmp	r3, #0
 14739 6c18 33D0     		beq	.L623
 14740              	.L686:
4541:.\console.c   **** 					&& (acc_g_th = atof(actual_cmd.number1)) <= 10)
 14741              		.loc 1 4541 0
 14742 6c1a 7348     		ldr	r0, .L769+4
 14743 6c1c FFF7FEFF 		bl	atof
 14744 6c20 0246     		mov	r2, r0
 14745 6c22 0B46     		mov	r3, r1
 14746 6c24 1046     		mov	r0, r2
 14747 6c26 1946     		mov	r1, r3
 14748 6c28 FFF7FEFF 		bl	__aeabi_d2f
 14749 6c2c 0346     		mov	r3, r0
 14750 6c2e C7F8DC30 		str	r3, [r7, #220]	@ float
 14751 6c32 D7F8DC00 		ldr	r0, [r7, #220]	@ float
 14752 6c36 4FF00001 		mov	r1, #0
 14753 6c3a C4F22011 		movt	r1, 16672
 14754 6c3e FFF7FEFF 		bl	__aeabi_fcmple
 14755 6c42 0346     		mov	r3, r0
 14756 6c44 002B     		cmp	r3, #0
 14757 6c46 1CD0     		beq	.L623
 14758              	.L687:
4543:.\console.c   **** 						gobee_param.acc_g_threshold.fnum = acc_g_th;
 14759              		.loc 1 4543 0
 14760 6c48 40F20003 		movw	r3, #:lower16:gobee_param
 14761 6c4c C0F20003 		movt	r3, #:upper16:gobee_param
 14762 6c50 D7F8DC20 		ldr	r2, [r7, #220]	@ float
 14763 6c54 5A61     		str	r2, [r3, #20]	@ float
4546:.\console.c   **** 						dummy = WriteAllEEparams();
 14764              		.loc 1 4546 0
 14765 6c56 FFF7FEFF 		bl	WriteAllEEparams
 14766 6c5a 0346     		mov	r3, r0
 14767 6c5c 87F8D930 		strb	r3, [r7, #217]
4547:.\console.c   **** 						printf(STR_REM_STAG, (float)gobee_param.acc_g_threshold.fnum);   /* REM: acc g thr setted to.
 14768              		.loc 1 4547 0
 14769 6c60 40F20003 		movw	r3, #:lower16:gobee_param
 14770 6c64 C0F20003 		movt	r3, #:upper16:gobee_param
 14771 6c68 5B69     		ldr	r3, [r3, #20]	@ float
 14772 6c6a 1846     		mov	r0, r3
 14773 6c6c FFF7FEFF 		bl	__aeabi_f2d
 14774 6c70 0246     		mov	r2, r0
 14775 6c72 0B46     		mov	r3, r1
 14776 6c74 40F20000 		movw	r0, #:lower16:.LC709
 14777 6c78 C0F20000 		movt	r0, #:upper16:.LC709
 14778 6c7c FFF7FEFF 		bl	printf
4553:.\console.c   **** 					goto exitpars;
 14779              		.loc 1 4553 0
 14780 6c80 66E1     		b	.L131
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 403


 14781              	.L623:
4551:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14782              		.loc 1 4551 0
 14783 6c82 40F20000 		movw	r0, #:lower16:.LC450
 14784 6c86 C0F20000 		movt	r0, #:upper16:.LC450
 14785 6c8a FFF7FEFF 		bl	printf
4553:.\console.c   **** 					goto exitpars;
 14786              		.loc 1 4553 0
 14787 6c8e 5FE1     		b	.L131
 14788              	.L622:
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
 14789              		.loc 1 4559 0
 14790 6c90 5448     		ldr	r0, .L769
 14791 6c92 40F20001 		movw	r1, #:lower16:.LC710
 14792 6c96 C0F20001 		movt	r1, #:upper16:.LC710
 14793 6c9a FFF7FEFF 		bl	strcmp
 14794 6c9e 0346     		mov	r3, r0
 14795 6ca0 002B     		cmp	r3, #0
 14796 6ca2 0AD0     		beq	.L627
4560:.\console.c   **** 				   (strcmp(actual_cmd.parameter, "astimtype") == 0)) 
 14797              		.loc 1 4560 0 discriminator 1
 14798 6ca4 4F48     		ldr	r0, .L769
 14799 6ca6 40F20001 		movw	r1, #:lower16:.LC711
 14800 6caa C0F20001 		movt	r1, #:upper16:.LC711
 14801 6cae FFF7FEFF 		bl	strcmp
 14802 6cb2 0346     		mov	r3, r0
4559:.\console.c   **** 				if ((strcmp(actual_cmd.parameter, "astype") == 0) ||
 14803              		.loc 1 4559 0 discriminator 1
 14804 6cb4 002B     		cmp	r3, #0
 14805 6cb6 40F09980 		bne	.L628
 14806              	.L627:
4562:.\console.c   **** 					if (((astim_type = atoi(actual_cmd.number1)) >= NO_ASTIM)
 14807              		.loc 1 4562 0
 14808 6cba 4B48     		ldr	r0, .L769+4
 14809 6cbc FFF7FEFF 		bl	atoi
 14810 6cc0 0346     		mov	r3, r0
 14811 6cc2 87F8ED30 		strb	r3, [r7, #237]
4563:.\console.c   **** 					&& (astim_type = atoi(actual_cmd.number1)) <= SQUARE_ASTIM)
 14812              		.loc 1 4563 0
 14813 6cc6 4848     		ldr	r0, .L769+4
 14814 6cc8 FFF7FEFF 		bl	atoi
 14815 6ccc 0346     		mov	r3, r0
 14816 6cce 87F8ED30 		strb	r3, [r7, #237]
 14817 6cd2 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14818 6cd6 032B     		cmp	r3, #3
 14819 6cd8 7BD8     		bhi	.L629
4577:.\console.c   **** 							pan_axis.vparam.astim_type  = astim_type;
 14820              		.loc 1 4577 0
 14821 6cda 40F20003 		movw	r3, #:lower16:pan_axis
 14822 6cde C0F20003 		movt	r3, #:upper16:pan_axis
 14823 6ce2 97F8ED20 		ldrb	r2, [r7, #237]
 14824 6ce6 5A70     		strb	r2, [r3, #1]
4578:.\console.c   **** 							tilt_axis.vparam.astim_type = astim_type;						
 14825              		.loc 1 4578 0
 14826 6ce8 40F20003 		movw	r3, #:lower16:tilt_axis
 14827 6cec C0F20003 		movt	r3, #:upper16:tilt_axis
 14828 6cf0 97F8ED20 		ldrb	r2, [r7, #237]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 404


 14829 6cf4 5A70     		strb	r2, [r3, #1]
4580:.\console.c   **** 							printf(STR_REM_ASTP, (uint16)astim_type);   /* REM: PAN  Astim Type Configured to...*/
 14830              		.loc 1 4580 0
 14831 6cf6 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14832 6cfa 40F20000 		movw	r0, #:lower16:.LC712
 14833 6cfe C0F20000 		movt	r0, #:upper16:.LC712
 14834 6d02 1946     		mov	r1, r3
 14835 6d04 FFF7FEFF 		bl	printf
4581:.\console.c   **** 							printf(STR_REM_ASTT, (uint16)astim_type);   /* REM: TILT Astim Type Configured to...*/						
 14836              		.loc 1 4581 0
 14837 6d08 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14838 6d0c 40F20000 		movw	r0, #:lower16:.LC713
 14839 6d10 C0F20000 		movt	r0, #:upper16:.LC713
 14840 6d14 1946     		mov	r1, r3
 14841 6d16 FFF7FEFF 		bl	printf
4583:.\console.c   **** 							WaveDAC8_Start();					//Starts WaveDAC8	
 14842              		.loc 1 4583 0
 14843 6d1a FFF7FEFF 		bl	WaveDAC8_Start
4584:.\console.c   **** 							PGA_ASTIM_Start();					//Starts PGA_ASTIM
 14844              		.loc 1 4584 0
 14845 6d1e FFF7FEFF 		bl	PGA_ASTIM_Start
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14846              		.loc 1 4586 0
 14847 6d22 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14848 6d26 012B     		cmp	r3, #1
 14849 6d28 0ED1     		bne	.L630
4588:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
 14850              		.loc 1 4588 0
 14851 6d2a FFF7FEFF 		bl	WaveDAC8_Stop
4589:.\console.c   **** 								Control_Reg_WS_Write(0);			//Selects wave 0
 14852              		.loc 1 4589 0
 14853 6d2e 4FF00000 		mov	r0, #0
 14854 6d32 FFF7FEFF 		bl	Control_Reg_WS_Write
4590:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 14855              		.loc 1 4590 0
 14856 6d36 FFF7FEFF 		bl	WaveDAC8_Start
4591:.\console.c   **** 								printf("Sine Wave Astim Started!\r\n");							
 14857              		.loc 1 4591 0
 14858 6d3a 40F20000 		movw	r0, #:lower16:.LC714
 14859 6d3e C0F20000 		movt	r0, #:upper16:.LC714
 14860 6d42 FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14861              		.loc 1 4586 0
 14862 6d46 4BE0     		b	.L708
 14863              	.L630:
4593:.\console.c   **** 							else if (astim_type == TRIANGLE_ASTIM)
 14864              		.loc 1 4593 0
 14865 6d48 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14866 6d4c 022B     		cmp	r3, #2
 14867 6d4e 16D1     		bne	.L632
4595:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8	
 14868              		.loc 1 4595 0
 14869 6d50 FFF7FEFF 		bl	WaveDAC8_Stop
4596:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1																	
 14870              		.loc 1 4596 0
 14871 6d54 4FF00100 		mov	r0, #1
 14872 6d58 FFF7FEFF 		bl	Control_Reg_WS_Write
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 405


4597:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_triangle, WaveDAC8_WAVE_TRIANGLE_LENGTH);	//SELECTS TRIAN
 14873              		.loc 1 4597 0
 14874 6d5c 40F20000 		movw	r0, #:lower16:WaveDAC8_wave_triangle
 14875 6d60 C0F20000 		movt	r0, #:upper16:WaveDAC8_wave_triangle
 14876 6d64 40F60551 		movw	r1, #3333
 14877 6d68 FFF7FEFF 		bl	WaveDAC8_Wave2Setup
4598:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 14878              		.loc 1 4598 0
 14879 6d6c FFF7FEFF 		bl	WaveDAC8_Start
4599:.\console.c   **** 								printf("Triangle Wave Astim Started!\r\n");								
 14880              		.loc 1 4599 0
 14881 6d70 40F20000 		movw	r0, #:lower16:.LC715
 14882 6d74 C0F20000 		movt	r0, #:upper16:.LC715
 14883 6d78 FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14884              		.loc 1 4586 0
 14885 6d7c 30E0     		b	.L708
 14886              	.L632:
4601:.\console.c   **** 							else if (astim_type == SQUARE_ASTIM)
 14887              		.loc 1 4601 0
 14888 6d7e 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14889 6d82 032B     		cmp	r3, #3
 14890 6d84 16D1     		bne	.L633
4603:.\console.c   **** 								WaveDAC8_Stop();					//Stops 						
 14891              		.loc 1 4603 0
 14892 6d86 FFF7FEFF 		bl	WaveDAC8_Stop
4604:.\console.c   **** 								Control_Reg_WS_Write(1);			//Selects wave 1	
 14893              		.loc 1 4604 0
 14894 6d8a 4FF00100 		mov	r0, #1
 14895 6d8e FFF7FEFF 		bl	Control_Reg_WS_Write
4605:.\console.c   **** 								WaveDAC8_Wave2Setup(WaveDAC8_wave_square, WaveDAC8_WAVE_SQUARE_LENGTH);	//SELECTS SQUARE
 14896              		.loc 1 4605 0
 14897 6d92 40F20000 		movw	r0, #:lower16:WaveDAC8_wave_square
 14898 6d96 C0F20000 		movt	r0, #:upper16:WaveDAC8_wave_square
 14899 6d9a 40F60551 		movw	r1, #3333
 14900 6d9e FFF7FEFF 		bl	WaveDAC8_Wave2Setup
4606:.\console.c   **** 								WaveDAC8_Start();					//Starts WaveDAC8
 14901              		.loc 1 4606 0
 14902 6da2 FFF7FEFF 		bl	WaveDAC8_Start
4607:.\console.c   **** 								printf("Square Wave Astim Started!\r\n");								
 14903              		.loc 1 4607 0
 14904 6da6 40F20000 		movw	r0, #:lower16:.LC716
 14905 6daa C0F20000 		movt	r0, #:upper16:.LC716
 14906 6dae FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14907              		.loc 1 4586 0
 14908 6db2 15E0     		b	.L708
 14909              	.L633:
4609:.\console.c   **** 							else if (astim_type == NO_ASTIM)
 14910              		.loc 1 4609 0
 14911 6db4 97F8ED30 		ldrb	r3, [r7, #237]	@ zero_extendqisi2
 14912 6db8 002B     		cmp	r3, #0
 14913 6dba 11D1     		bne	.L708
4611:.\console.c   **** 								WaveDAC8_Stop();					//Stops WaveDAC8
 14914              		.loc 1 4611 0
 14915 6dbc FFF7FEFF 		bl	WaveDAC8_Stop
4612:.\console.c   **** 								PGA_ASTIM_Stop();					//Stops PGA_ASTIM
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 406


 14916              		.loc 1 4612 0
 14917 6dc0 FFF7FEFF 		bl	PGA_ASTIM_Stop
4613:.\console.c   **** 								printf("Wave Astim Stopped!\r\n");							
 14918              		.loc 1 4613 0
 14919 6dc4 40F20000 		movw	r0, #:lower16:.LC717
 14920 6dc8 C0F20000 		movt	r0, #:upper16:.LC717
 14921 6dcc FFF7FEFF 		bl	puts
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14922              		.loc 1 4586 0
 14923 6dd0 06E0     		b	.L708
 14924              	.L629:
4622:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 14925              		.loc 1 4622 0
 14926 6dd2 40F20000 		movw	r0, #:lower16:.LC450
 14927 6dd6 C0F20000 		movt	r0, #:upper16:.LC450
 14928 6dda FFF7FEFF 		bl	printf
4624:.\console.c   **** 					goto exitpars;
 14929              		.loc 1 4624 0
 14930 6dde B7E0     		b	.L131
 14931              	.L708:
4586:.\console.c   **** 							if (astim_type == SINE_ASTIM)
 14932              		.loc 1 4586 0
 14933 6de0 00BF     		nop
 14934              	.L634:
4624:.\console.c   **** 					goto exitpars;
 14935              		.loc 1 4624 0
 14936 6de2 B5E0     		b	.L131
 14937              	.L770:
 14938              		.align	2
 14939              	.L769:
 14940 6de4 0F000000 		.word	actual_cmd+15
 14941 6de8 1E000000 		.word	actual_cmd+30
 14942              	.L628:
4630:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimp") == 0) 
 14943              		.loc 1 4630 0
 14944 6dec 5C48     		ldr	r0, .L771
 14945 6dee 40F20001 		movw	r1, #:lower16:.LC718
 14946 6df2 C0F20001 		movt	r1, #:upper16:.LC718
 14947 6df6 FFF7FEFF 		bl	strcmp
 14948 6dfa 0346     		mov	r3, r0
 14949 6dfc 002B     		cmp	r3, #0
 14950 6dfe 44D1     		bne	.L635
4632:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
 14951              		.loc 1 4632 0
 14952 6e00 5848     		ldr	r0, .L771+4
 14953 6e02 FFF7FEFF 		bl	atoi
 14954 6e06 0346     		mov	r3, r0
 14955 6e08 87F8EC30 		strb	r3, [r7, #236]
4633:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
 14956              		.loc 1 4633 0
 14957 6e0c 5548     		ldr	r0, .L771+4
 14958 6e0e FFF7FEFF 		bl	atoi
 14959 6e12 0346     		mov	r3, r0
 14960 6e14 87F8EC30 		strb	r3, [r7, #236]
 14961 6e18 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14962 6e1c 012B     		cmp	r3, #1
 14963 6e1e 2DD8     		bhi	.L636
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 407


4635:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
 14964              		.loc 1 4635 0
 14965 6e20 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14966 6e24 012B     		cmp	r3, #1
 14967 6e26 18D1     		bne	.L637
4637:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
 14968              		.loc 1 4637 0
 14969 6e28 40F20000 		movw	r0, #:lower16:.LC719
 14970 6e2c C0F20000 		movt	r0, #:upper16:.LC719
 14971 6e30 FFF7FEFF 		bl	puts
4638:.\console.c   **** 							printf(STR_ASTIMB);				//
 14972              		.loc 1 4638 0
 14973 6e34 40F20000 		movw	r0, #:lower16:.LC720
 14974 6e38 C0F20000 		movt	r0, #:upper16:.LC720
 14975 6e3c FFF7FEFF 		bl	printf
4640:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
 14976              		.loc 1 4640 0
 14977 6e40 4FF00100 		mov	r0, #1
 14978 6e44 FFF7FEFF 		bl	ButtonYNChoice
 14979 6e48 0346     		mov	r3, r0
 14980 6e4a 002B     		cmp	r3, #0
 14981 6e4c 7BD0     		beq	.L709
 14982              	.L638:
4644:.\console.c   **** 							printf("\r\n");	
 14983              		.loc 1 4644 0
 14984 6e4e 40F20000 		movw	r0, #:lower16:.LC42
 14985 6e52 C0F20000 		movt	r0, #:upper16:.LC42
 14986 6e56 FFF7FEFF 		bl	puts
 14987              	.L637:
4650:.\console.c   **** 						pan_axis.vparam.astim_enable  = astim_enable;
 14988              		.loc 1 4650 0
 14989 6e5a 40F20003 		movw	r3, #:lower16:pan_axis
 14990 6e5e C0F20003 		movt	r3, #:upper16:pan_axis
 14991 6e62 97F8EC20 		ldrb	r2, [r7, #236]
 14992 6e66 1A70     		strb	r2, [r3, #0]
4652:.\console.c   **** 						printf(STR_REM_ASEP, (uint16)astim_enable);   /* REM: PAN  Astim Type Configured to...*/
 14993              		.loc 1 4652 0
 14994 6e68 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 14995 6e6c 40F20000 		movw	r0, #:lower16:.LC721
 14996 6e70 C0F20000 		movt	r0, #:upper16:.LC721
 14997 6e74 1946     		mov	r1, r3
 14998 6e76 FFF7FEFF 		bl	printf
4658:.\console.c   **** 					goto exitpars;
 14999              		.loc 1 4658 0
 15000 6e7a 69E0     		b	.L131
 15001              	.L636:
4656:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15002              		.loc 1 4656 0
 15003 6e7c 40F20000 		movw	r0, #:lower16:.LC450
 15004 6e80 C0F20000 		movt	r0, #:upper16:.LC450
 15005 6e84 FFF7FEFF 		bl	printf
4658:.\console.c   **** 					goto exitpars;
 15006              		.loc 1 4658 0
 15007 6e88 62E0     		b	.L131
 15008              	.L635:
4664:.\console.c   **** 				if (strcmp(actual_cmd.parameter, "astimt") == 0) 
 15009              		.loc 1 4664 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 408


 15010 6e8a 3548     		ldr	r0, .L771
 15011 6e8c 40F20001 		movw	r1, #:lower16:.LC722
 15012 6e90 C0F20001 		movt	r1, #:upper16:.LC722
 15013 6e94 FFF7FEFF 		bl	strcmp
 15014 6e98 0346     		mov	r3, r0
 15015 6e9a 002B     		cmp	r3, #0
 15016 6e9c 55D1     		bne	.L710
4666:.\console.c   **** 					if (((astim_enable = atoi(actual_cmd.number1)) >= ASTIM_DISABLED)
 15017              		.loc 1 4666 0
 15018 6e9e 3148     		ldr	r0, .L771+4
 15019 6ea0 FFF7FEFF 		bl	atoi
 15020 6ea4 0346     		mov	r3, r0
 15021 6ea6 87F8EC30 		strb	r3, [r7, #236]
4667:.\console.c   **** 					&& (astim_enable = atoi(actual_cmd.number1)) <= ASTIM_ENABLED)
 15022              		.loc 1 4667 0
 15023 6eaa 2E48     		ldr	r0, .L771+4
 15024 6eac FFF7FEFF 		bl	atoi
 15025 6eb0 0346     		mov	r3, r0
 15026 6eb2 87F8EC30 		strb	r3, [r7, #236]
 15027 6eb6 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15028 6eba 012B     		cmp	r3, #1
 15029 6ebc 2DD8     		bhi	.L640
4669:.\console.c   **** 						if (astim_enable == ASTIM_ENABLED)
 15030              		.loc 1 4669 0
 15031 6ebe 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15032 6ec2 012B     		cmp	r3, #1
 15033 6ec4 18D1     		bne	.L641
4671:.\console.c   **** 							printf(STR_ASTIMA);				/* DANGER!!! PROMPT					*/
 15034              		.loc 1 4671 0
 15035 6ec6 40F20000 		movw	r0, #:lower16:.LC719
 15036 6eca C0F20000 		movt	r0, #:upper16:.LC719
 15037 6ece FFF7FEFF 		bl	puts
4672:.\console.c   **** 							printf(STR_ASTIMB);				//
 15038              		.loc 1 4672 0
 15039 6ed2 40F20000 		movw	r0, #:lower16:.LC720
 15040 6ed6 C0F20000 		movt	r0, #:upper16:.LC720
 15041 6eda FFF7FEFF 		bl	printf
4674:.\console.c   **** 							if (ButtonYNChoice(ECHO_ON) == _NO)
 15042              		.loc 1 4674 0
 15043 6ede 4FF00100 		mov	r0, #1
 15044 6ee2 FFF7FEFF 		bl	ButtonYNChoice
 15045 6ee6 0346     		mov	r3, r0
 15046 6ee8 002B     		cmp	r3, #0
 15047 6eea 30D0     		beq	.L711
 15048              	.L642:
4678:.\console.c   **** 							printf("\r\n");
 15049              		.loc 1 4678 0
 15050 6eec 40F20000 		movw	r0, #:lower16:.LC42
 15051 6ef0 C0F20000 		movt	r0, #:upper16:.LC42
 15052 6ef4 FFF7FEFF 		bl	puts
 15053              	.L641:
4684:.\console.c   **** 							tilt_axis.vparam.astim_enable  = astim_enable;
 15054              		.loc 1 4684 0
 15055 6ef8 40F20003 		movw	r3, #:lower16:tilt_axis
 15056 6efc C0F20003 		movt	r3, #:upper16:tilt_axis
 15057 6f00 97F8EC20 		ldrb	r2, [r7, #236]
 15058 6f04 1A70     		strb	r2, [r3, #0]
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 409


4686:.\console.c   **** 							printf(STR_REM_ASET, (uint16)astim_enable);   /* REM: TILT  Astim Type Configured to...*/
 15059              		.loc 1 4686 0
 15060 6f06 97F8EC30 		ldrb	r3, [r7, #236]	@ zero_extendqisi2
 15061 6f0a 40F20000 		movw	r0, #:lower16:.LC723
 15062 6f0e C0F20000 		movt	r0, #:upper16:.LC723
 15063 6f12 1946     		mov	r1, r3
 15064 6f14 FFF7FEFF 		bl	printf
4692:.\console.c   **** 					goto exitpars;
 15065              		.loc 1 4692 0
 15066 6f18 1AE0     		b	.L131
 15067              	.L640:
4690:.\console.c   **** 						printf(STR_ERROR5);				/* ERROR5: Number not allowed */
 15068              		.loc 1 4690 0
 15069 6f1a 40F20000 		movw	r0, #:lower16:.LC450
 15070 6f1e C0F20000 		movt	r0, #:upper16:.LC450
 15071 6f22 FFF7FEFF 		bl	printf
4692:.\console.c   **** 					goto exitpars;
 15072              		.loc 1 4692 0
 15073 6f26 13E0     		b	.L131
 15074              	.L413:
4753:.\console.c   **** 		}	
4754:.\console.c   **** 	printf(STR_ERROR4);
 15075              		.loc 1 4754 0
 15076 6f28 40F20000 		movw	r0, #:lower16:.LC724
 15077 6f2c C0F20000 		movt	r0, #:upper16:.LC724
 15078 6f30 FFF7FEFF 		bl	printf
 15079 6f34 0CE0     		b	.L131
 15080              	.L691:
1207:.\console.c   **** 	goto exitpars;
 15081              		.loc 1 1207 0
 15082 6f36 00BF     		nop
 15083 6f38 0AE0     		b	.L131
 15084              	.L700:
2279:.\console.c   **** 				goto exitpars;	
 15085              		.loc 1 2279 0
 15086 6f3a 00BF     		nop
 15087 6f3c 08E0     		b	.L131
 15088              	.L705:
2770:.\console.c   **** 				goto exitpars;
 15089              		.loc 1 2770 0
 15090 6f3e 00BF     		nop
 15091 6f40 06E0     		b	.L131
 15092              	.L706:
2991:.\console.c   **** 		goto exitpars;	
 15093              		.loc 1 2991 0
 15094 6f42 00BF     		nop
 15095 6f44 04E0     		b	.L131
 15096              	.L709:
4642:.\console.c   **** 								goto exitpars;
 15097              		.loc 1 4642 0
 15098 6f46 00BF     		nop
 15099 6f48 02E0     		b	.L131
 15100              	.L710:
4752:.\console.c   **** 		goto exitpars;	
 15101              		.loc 1 4752 0
 15102 6f4a 00BF     		nop
 15103 6f4c 00E0     		b	.L131
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 410


 15104              	.L711:
4676:.\console.c   **** 								goto exitpars;
 15105              		.loc 1 4676 0
 15106 6f4e 00BF     		nop
 15107              	.L131:
4755:.\console.c   **** 
4756:.\console.c   **** 	
4757:.\console.c   **** exitpars:	
4758:.\console.c   **** 	//printf("\r\n");	
4759:.\console.c   **** 	return 0;	// PARS_OK//
 15108              		.loc 1 4759 0
 15109 6f50 4FF00003 		mov	r3, #0
4760:.\console.c   **** }
 15110              		.loc 1 4760 0
 15111 6f54 1846     		mov	r0, r3
 15112 6f56 07F58E77 		add	r7, r7, #284
 15113 6f5a BD46     		mov	sp, r7
 15114 6f5c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 15115              	.L772:
 15116              		.align	2
 15117              	.L771:
 15118 6f60 0F000000 		.word	actual_cmd+15
 15119 6f64 1E000000 		.word	actual_cmd+30
 15120              		.cfi_endproc
 15121              	.LFE69:
 15122              		.size	parser, .-parser
 15123              		.section	.text.AnyButtonPressed,"ax",%progbits
 15124              		.align	2
 15125              		.global	AnyButtonPressed
 15126              		.thumb
 15127              		.thumb_func
 15128              		.type	AnyButtonPressed, %function
 15129              	AnyButtonPressed:
 15130              	.LFB70:
4761:.\console.c   **** 
4762:.\console.c   **** 
4763:.\console.c   **** /* Verify Any CHAR pressed */
4764:.\console.c   **** uint8 AnyButtonPressed(void)
4765:.\console.c   **** {	
 15131              		.loc 1 4765 0
 15132              		.cfi_startproc
 15133              		@ args = 0, pretend = 0, frame = 0
 15134              		@ frame_needed = 1, uses_anonymous_args = 0
 15135 0000 80B5     		push	{r7, lr}
 15136              	.LCFI40:
 15137              		.cfi_def_cfa_offset 8
 15138              		.cfi_offset 7, -8
 15139              		.cfi_offset 14, -4
 15140 0002 00AF     		add	r7, sp, #0
 15141              	.LCFI41:
 15142              		.cfi_def_cfa_register 7
4766:.\console.c   **** 	// case USB standard input
4767:.\console.c   **** 	if (UART_USB_GetChar() == 0)
 15143              		.loc 1 4767 0
 15144 0004 FFF7FEFF 		bl	UART_USB_GetChar
 15145 0008 0346     		mov	r3, r0
 15146 000a 002B     		cmp	r3, #0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 411


 15147 000c 02D1     		bne	.L774
4768:.\console.c   **** 	{
4769:.\console.c   **** 		return NO_PRESSED;
 15148              		.loc 1 4769 0
 15149 000e 4FF00003 		mov	r3, #0
 15150 0012 01E0     		b	.L775
 15151              	.L774:
4770:.\console.c   **** 	}
4771:.\console.c   **** 	else
4772:.\console.c   **** 	{
4773:.\console.c   **** 		return PRESSED;
 15152              		.loc 1 4773 0
 15153 0014 4FF00103 		mov	r3, #1
 15154              	.L775:
4774:.\console.c   **** 	}
4775:.\console.c   **** }
 15155              		.loc 1 4775 0
 15156 0018 1846     		mov	r0, r3
 15157 001a 80BD     		pop	{r7, pc}
 15158              		.cfi_endproc
 15159              	.LFE70:
 15160              		.size	AnyButtonPressed, .-AnyButtonPressed
 15161              		.section	.text.ButtonYNChoice,"ax",%progbits
 15162              		.align	2
 15163              		.global	ButtonYNChoice
 15164              		.thumb
 15165              		.thumb_func
 15166              		.type	ButtonYNChoice, %function
 15167              	ButtonYNChoice:
 15168              	.LFB71:
4776:.\console.c   **** 
4777:.\console.c   **** 
4778:.\console.c   **** 
4779:.\console.c   **** /* Verify [Y/N] choice */
4780:.\console.c   **** uint8 ButtonYNChoice(bit echo)
4781:.\console.c   **** {	
 15169              		.loc 1 4781 0
 15170              		.cfi_startproc
 15171              		@ args = 0, pretend = 0, frame = 16
 15172              		@ frame_needed = 1, uses_anonymous_args = 0
 15173 0000 80B5     		push	{r7, lr}
 15174              	.LCFI42:
 15175              		.cfi_def_cfa_offset 8
 15176              		.cfi_offset 7, -8
 15177              		.cfi_offset 14, -4
 15178 0002 84B0     		sub	sp, sp, #16
 15179              	.LCFI43:
 15180              		.cfi_def_cfa_offset 24
 15181 0004 00AF     		add	r7, sp, #0
 15182              	.LCFI44:
 15183              		.cfi_def_cfa_register 7
 15184 0006 0346     		mov	r3, r0
 15185 0008 FB71     		strb	r3, [r7, #7]
 15186              	.L777:
4782:.\console.c   **** 	char charin;
4783:.\console.c   **** 	
4784:.\console.c   **** //	if (std_input == USB_STD_INPUT)
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 412


4785:.\console.c   **** //	{
4786:.\console.c   **** 		// case USB standard input
4787:.\console.c   **** 		while ((charin = UART_USB_GetChar()) == 0)
 15187              		.loc 1 4787 0 discriminator 1
 15188 000a FFF7FEFF 		bl	UART_USB_GetChar
 15189 000e 0346     		mov	r3, r0
 15190 0010 FB73     		strb	r3, [r7, #15]
 15191 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15192 0014 002B     		cmp	r3, #0
 15193 0016 F8D0     		beq	.L777
4788:.\console.c   **** 		{
4789:.\console.c   **** 		//wait for char
4790:.\console.c   **** 		}
4791:.\console.c   **** //	}
4792:.\console.c   **** //	else
4793:.\console.c   **** //	{
4794:.\console.c   **** //		// case BT standard input
4795:.\console.c   **** //		while ((charin = UART_BT_GetChar()) == 0)
4796:.\console.c   **** //		{
4797:.\console.c   **** //		//wait for char
4798:.\console.c   **** //		}
4799:.\console.c   **** //	}
4800:.\console.c   **** 	
4801:.\console.c   **** 	if (echo == 1)
 15194              		.loc 1 4801 0
 15195 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 15196 001a 012B     		cmp	r3, #1
 15197 001c 03D1     		bne	.L778
4802:.\console.c   **** 	{
4803:.\console.c   **** 		printf("%c", charin);
 15198              		.loc 1 4803 0
 15199 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15200 0020 1846     		mov	r0, r3
 15201 0022 FFF7FEFF 		bl	putchar
 15202              	.L778:
 15203              	.LBB10:
4804:.\console.c   **** 	}
4805:.\console.c   **** 	
4806:.\console.c   **** 	if (tolower((int)charin) == 'y')
 15204              		.loc 1 4806 0
 15205 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15206 0028 BB60     		str	r3, [r7, #8]
 15207 002a 40F20003 		movw	r3, #:lower16:__ctype_ptr__
 15208 002e C0F20003 		movt	r3, #:upper16:__ctype_ptr__
 15209 0032 1A68     		ldr	r2, [r3, #0]
 15210 0034 BB68     		ldr	r3, [r7, #8]
 15211 0036 03F10103 		add	r3, r3, #1
 15212 003a D318     		adds	r3, r2, r3
 15213 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 15214 003e 03F00303 		and	r3, r3, #3
 15215 0042 012B     		cmp	r3, #1
 15216 0044 03D1     		bne	.L779
 15217              		.loc 1 4806 0 is_stmt 0 discriminator 1
 15218 0046 BB68     		ldr	r3, [r7, #8]
 15219 0048 03F12003 		add	r3, r3, #32
 15220 004c 00E0     		b	.L780
 15221              	.L779:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 413


 15222              		.loc 1 4806 0 discriminator 2
 15223 004e BB68     		ldr	r3, [r7, #8]
 15224              	.L780:
 15225              	.LBE10:
 15226              		.loc 1 4806 0 discriminator 3
 15227 0050 792B     		cmp	r3, #121
 15228 0052 02D1     		bne	.L781
4807:.\console.c   **** 	{
4808:.\console.c   **** 		return _YES;
 15229              		.loc 1 4808 0 is_stmt 1
 15230 0054 4FF00103 		mov	r3, #1
 15231 0058 01E0     		b	.L782
 15232              	.L781:
4809:.\console.c   **** 	}
4810:.\console.c   **** 	else
4811:.\console.c   **** 	{
4812:.\console.c   **** 		return _NO;
 15233              		.loc 1 4812 0
 15234 005a 4FF00003 		mov	r3, #0
 15235              	.L782:
4813:.\console.c   **** 	}
4814:.\console.c   **** 
4815:.\console.c   **** }
 15236              		.loc 1 4815 0
 15237 005e 1846     		mov	r0, r3
 15238 0060 07F11007 		add	r7, r7, #16
 15239 0064 BD46     		mov	sp, r7
 15240 0066 80BD     		pop	{r7, pc}
 15241              		.cfi_endproc
 15242              	.LFE71:
 15243              		.size	ButtonYNChoice, .-ButtonYNChoice
 15244              		.section	.text.clear_string,"ax",%progbits
 15245              		.align	2
 15246              		.global	clear_string
 15247              		.thumb
 15248              		.thumb_func
 15249              		.type	clear_string, %function
 15250              	clear_string:
 15251              	.LFB72:
4816:.\console.c   **** 
4817:.\console.c   **** 
4818:.\console.c   **** void clear_string(char *str)
4819:.\console.c   **** {
 15252              		.loc 1 4819 0
 15253              		.cfi_startproc
 15254              		@ args = 0, pretend = 0, frame = 16
 15255              		@ frame_needed = 1, uses_anonymous_args = 0
 15256              		@ link register save eliminated.
 15257 0000 80B4     		push	{r7}
 15258              	.LCFI45:
 15259              		.cfi_def_cfa_offset 4
 15260              		.cfi_offset 7, -4
 15261 0002 85B0     		sub	sp, sp, #20
 15262              	.LCFI46:
 15263              		.cfi_def_cfa_offset 24
 15264 0004 00AF     		add	r7, sp, #0
 15265              	.LCFI47:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 414


 15266              		.cfi_def_cfa_register 7
 15267 0006 7860     		str	r0, [r7, #4]
4820:.\console.c   **** 	uint8 idx = 0;
 15268              		.loc 1 4820 0
 15269 0008 4FF00003 		mov	r3, #0
 15270 000c FB73     		strb	r3, [r7, #15]
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15271              		.loc 1 4821 0
 15272 000e 4FF00003 		mov	r3, #0
 15273 0012 FB73     		strb	r3, [r7, #15]
 15274 0014 09E0     		b	.L784
 15275              	.L785:
4822:.\console.c   **** 	{
4823:.\console.c   **** 		*(str + idx) = '\0';
 15276              		.loc 1 4823 0 discriminator 2
 15277 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15278 0018 7A68     		ldr	r2, [r7, #4]
 15279 001a D318     		adds	r3, r2, r3
 15280 001c 4FF00002 		mov	r2, #0
 15281 0020 1A70     		strb	r2, [r3, #0]
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15282              		.loc 1 4821 0 discriminator 2
 15283 0022 FB7B     		ldrb	r3, [r7, #15]
 15284 0024 03F10103 		add	r3, r3, #1
 15285 0028 FB73     		strb	r3, [r7, #15]
 15286              	.L784:
4821:.\console.c   **** 	for (idx=0; idx <= sizeof(str); idx++)
 15287              		.loc 1 4821 0 is_stmt 0 discriminator 1
 15288 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 15289 002c 042B     		cmp	r3, #4
 15290 002e F2D9     		bls	.L785
4824:.\console.c   **** 	}
4825:.\console.c   **** }
 15291              		.loc 1 4825 0 is_stmt 1
 15292 0030 07F11407 		add	r7, r7, #20
 15293 0034 BD46     		mov	sp, r7
 15294 0036 80BC     		pop	{r7}
 15295 0038 7047     		bx	lr
 15296              		.cfi_endproc
 15297              	.LFE72:
 15298              		.size	clear_string, .-clear_string
 15299 003a 00BF     		.section	.text.USB_Check,"ax",%progbits
 15300              		.align	2
 15301              		.global	USB_Check
 15302              		.thumb
 15303              		.thumb_func
 15304              		.type	USB_Check, %function
 15305              	USB_Check:
 15306              	.LFB73:
4826:.\console.c   **** 
4827:.\console.c   **** 
4828:.\console.c   **** uint8 USB_Check(void)
4829:.\console.c   **** {	
 15307              		.loc 1 4829 0
 15308              		.cfi_startproc
 15309              		@ args = 0, pretend = 0, frame = 0
 15310              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 415


 15311              		@ link register save eliminated.
 15312 0000 80B4     		push	{r7}
 15313              	.LCFI48:
 15314              		.cfi_def_cfa_offset 4
 15315              		.cfi_offset 7, -4
 15316 0002 00AF     		add	r7, sp, #0
 15317              	.LCFI49:
 15318              		.cfi_def_cfa_register 7
4830:.\console.c   **** 	return USB_INSERTED;	/* There is not the phisical signal on the board */
 15319              		.loc 1 4830 0
 15320 0004 4FF00103 		mov	r3, #1
4831:.\console.c   **** 
4832:.\console.c   **** }
 15321              		.loc 1 4832 0
 15322 0008 1846     		mov	r0, r3
 15323 000a BD46     		mov	sp, r7
 15324 000c 80BC     		pop	{r7}
 15325 000e 7047     		bx	lr
 15326              		.cfi_endproc
 15327              	.LFE73:
 15328              		.size	USB_Check, .-USB_Check
 15329              		.section	.text.GetAnaposOffsetZero,"ax",%progbits
 15330              		.align	2
 15331              		.global	GetAnaposOffsetZero
 15332              		.thumb
 15333              		.thumb_func
 15334              		.type	GetAnaposOffsetZero, %function
 15335              	GetAnaposOffsetZero:
 15336              	.LFB74:
4833:.\console.c   **** 
4834:.\console.c   **** 
4835:.\console.c   **** /* Get Anapos Offset value to zero Oscilloscope									*/
4836:.\console.c   **** /*   returns: (int32)anapos_offset  correct value to zero oscilloscope output	*/
4837:.\console.c   **** int32 GetAnaposOffsetZero(void)
4838:.\console.c   **** {	
 15337              		.loc 1 4838 0
 15338              		.cfi_startproc
 15339              		@ args = 0, pretend = 0, frame = 0
 15340              		@ frame_needed = 1, uses_anonymous_args = 0
 15341 0000 80B5     		push	{r7, lr}
 15342              	.LCFI50:
 15343              		.cfi_def_cfa_offset 8
 15344              		.cfi_offset 7, -8
 15345              		.cfi_offset 14, -4
 15346 0002 00AF     		add	r7, sp, #0
 15347              	.LCFI51:
 15348              		.cfi_def_cfa_register 7
4839:.\console.c   **** 	/* CONTROL integral(t) CASE		*/
4840:.\console.c   **** 	if ((*Selected_ANAOUT).param.color == CTRL_IERROR)
 15349              		.loc 1 4840 0
 15350 0004 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15351 0008 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15352 000c 1B68     		ldr	r3, [r3, #0]
 15353 000e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15354 0012 062B     		cmp	r3, #6
 15355 0014 0FD1     		bne	.L789
4841:.\console.c   **** 	{
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 416


4842:.\console.c   **** 		anapos_offset = (*Selected_ANAOUT).mc.ierror;
 15356              		.loc 1 4842 0
 15357 0016 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15358 001a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15359 001e 1B68     		ldr	r3, [r3, #0]
 15360 0020 1B6E     		ldr	r3, [r3, #96]	@ float
 15361 0022 1846     		mov	r0, r3
 15362 0024 FFF7FEFF 		bl	__aeabi_f2iz
 15363 0028 0246     		mov	r2, r0
 15364 002a 40F20003 		movw	r3, #:lower16:anapos_offset
 15365 002e C0F20003 		movt	r3, #:upper16:anapos_offset
 15366 0032 1A60     		str	r2, [r3, #0]
 15367 0034 87E0     		b	.L790
 15368              	.L789:
4843:.\console.c   **** 	}
4844:.\console.c   **** 	/* CONTROL integral_action(t) CASE	*/
4845:.\console.c   **** 	else if ((*Selected_ANAOUT).param.color == CTRL_AZIERROR)
 15369              		.loc 1 4845 0
 15370 0036 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15371 003a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15372 003e 1B68     		ldr	r3, [r3, #0]
 15373 0040 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15374 0044 072B     		cmp	r3, #7
 15375 0046 1AD1     		bne	.L791
4846:.\console.c   **** 	{
4847:.\console.c   **** 		anapos_offset = (*Selected_ANAOUT).param.Kif.fnum * (*Selected_ANAOUT).mc.ierror;
 15376              		.loc 1 4847 0
 15377 0048 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15378 004c C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15379 0050 1B68     		ldr	r3, [r3, #0]
 15380 0052 DA69     		ldr	r2, [r3, #28]	@ float
 15381 0054 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15382 0058 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15383 005c 1B68     		ldr	r3, [r3, #0]
 15384 005e 1B6E     		ldr	r3, [r3, #96]	@ float
 15385 0060 1046     		mov	r0, r2
 15386 0062 1946     		mov	r1, r3
 15387 0064 FFF7FEFF 		bl	__aeabi_fmul
 15388 0068 0346     		mov	r3, r0
 15389 006a 1846     		mov	r0, r3
 15390 006c FFF7FEFF 		bl	__aeabi_f2iz
 15391 0070 0246     		mov	r2, r0
 15392 0072 40F20003 		movw	r3, #:lower16:anapos_offset
 15393 0076 C0F20003 		movt	r3, #:upper16:anapos_offset
 15394 007a 1A60     		str	r2, [r3, #0]
 15395 007c 63E0     		b	.L790
 15396              	.L791:
4848:.\console.c   **** 	}	
4849:.\console.c   **** 	/* SLAVE CASE */
4850:.\console.c   **** 	else if ((*Selected_ANAOUT).param.color == SLAVE_ENC_POS)
 15397              		.loc 1 4850 0
 15398 007e 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15399 0082 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15400 0086 1B68     		ldr	r3, [r3, #0]
 15401 0088 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15402 008c 012B     		cmp	r3, #1
 15403 008e 2FD1     		bne	.L792
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 417


4851:.\console.c   **** 	{
4852:.\console.c   **** 		if (Selected_ANAOUT == &pan_axis)
 15404              		.loc 1 4852 0
 15405 0090 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15406 0094 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15407 0098 1A68     		ldr	r2, [r3, #0]
 15408 009a 40F20003 		movw	r3, #:lower16:pan_axis
 15409 009e C0F20003 		movt	r3, #:upper16:pan_axis
 15410 00a2 9A42     		cmp	r2, r3
 15411 00a4 08D1     		bne	.L793
4853:.\console.c   **** 		{
4854:.\console.c   **** 			anapos_offset = QuadDec_PAN_GetCounter();
 15412              		.loc 1 4854 0
 15413 00a6 FFF7FEFF 		bl	QuadDec_PAN_GetCounter
 15414 00aa 0246     		mov	r2, r0
 15415 00ac 40F20003 		movw	r3, #:lower16:anapos_offset
 15416 00b0 C0F20003 		movt	r3, #:upper16:anapos_offset
 15417 00b4 1A60     		str	r2, [r3, #0]
 15418 00b6 46E0     		b	.L790
 15419              	.L793:
4855:.\console.c   **** 		}
4856:.\console.c   **** 		else if (Selected_ANAOUT == &tilt_axis)
 15420              		.loc 1 4856 0
 15421 00b8 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15422 00bc C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15423 00c0 1A68     		ldr	r2, [r3, #0]
 15424 00c2 40F20003 		movw	r3, #:lower16:tilt_axis
 15425 00c6 C0F20003 		movt	r3, #:upper16:tilt_axis
 15426 00ca 9A42     		cmp	r2, r3
 15427 00cc 08D1     		bne	.L794
4857:.\console.c   **** 		{
4858:.\console.c   **** 			anapos_offset = QuadDec_TILT_GetCounter();
 15428              		.loc 1 4858 0
 15429 00ce FFF7FEFF 		bl	QuadDec_TILT_GetCounter
 15430 00d2 0246     		mov	r2, r0
 15431 00d4 40F20003 		movw	r3, #:lower16:anapos_offset
 15432 00d8 C0F20003 		movt	r3, #:upper16:anapos_offset
 15433 00dc 1A60     		str	r2, [r3, #0]
 15434 00de 32E0     		b	.L790
 15435              	.L794:
4859:.\console.c   **** 		}	
4860:.\console.c   **** //		else if (Selected_ANAOUT == &roll_axis)
4861:.\console.c   **** //		{
4862:.\console.c   **** //			anapos_offset = QuadDec_ROLL_GetCounter();
4863:.\console.c   **** //		}	
4864:.\console.c   **** 		else
4865:.\console.c   **** 		{
4866:.\console.c   **** 			anapos_offset = 0;
 15436              		.loc 1 4866 0
 15437 00e0 40F20003 		movw	r3, #:lower16:anapos_offset
 15438 00e4 C0F20003 		movt	r3, #:upper16:anapos_offset
 15439 00e8 4FF00002 		mov	r2, #0
 15440 00ec 1A60     		str	r2, [r3, #0]
 15441 00ee 2AE0     		b	.L790
 15442              	.L792:
4867:.\console.c   **** 		}				
4868:.\console.c   **** 	}
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 418


4869:.\console.c   **** 	/* ASTIM CASE */
4870:.\console.c   **** 	else if (((*Selected_ANAOUT).param.color == ASTIM_IN) || 
 15443              		.loc 1 4870 0
 15444 00f0 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15445 00f4 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15446 00f8 1B68     		ldr	r3, [r3, #0]
 15447 00fa 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 15448 00fe 032B     		cmp	r3, #3
 15449 0100 1AD0     		beq	.L795
4871:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_ERROR) ||
 15450              		.loc 1 4871 0 discriminator 1
 15451 0102 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15452 0106 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15453 010a 1B68     		ldr	r3, [r3, #0]
 15454 010c 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4870:.\console.c   **** 	else if (((*Selected_ANAOUT).param.color == ASTIM_IN) || 
 15455              		.loc 1 4870 0 discriminator 1
 15456 0110 042B     		cmp	r3, #4
 15457 0112 11D0     		beq	.L795
4872:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_DERROR) ||
 15458              		.loc 1 4872 0
 15459 0114 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15460 0118 C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15461 011c 1B68     		ldr	r3, [r3, #0]
 15462 011e 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4871:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_ERROR) ||
 15463              		.loc 1 4871 0
 15464 0122 052B     		cmp	r3, #5
 15465 0124 08D0     		beq	.L795
4873:.\console.c   **** 			((*Selected_ANAOUT).param.color == GYRO_RATE))
 15466              		.loc 1 4873 0
 15467 0126 40F20003 		movw	r3, #:lower16:Selected_ANAOUT
 15468 012a C0F20003 		movt	r3, #:upper16:Selected_ANAOUT
 15469 012e 1B68     		ldr	r3, [r3, #0]
 15470 0130 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
4872:.\console.c   **** 			((*Selected_ANAOUT).param.color == CTRL_DERROR) ||
 15471              		.loc 1 4872 0
 15472 0134 002B     		cmp	r3, #0
 15473 0136 06D1     		bne	.L790
 15474              	.L795:
4874:.\console.c   **** 	{
4875:.\console.c   **** 			anapos_offset = 0;
 15475              		.loc 1 4875 0
 15476 0138 40F20003 		movw	r3, #:lower16:anapos_offset
 15477 013c C0F20003 		movt	r3, #:upper16:anapos_offset
 15478 0140 4FF00002 		mov	r2, #0
 15479 0144 1A60     		str	r2, [r3, #0]
 15480              	.L790:
4876:.\console.c   **** 	}
4877:.\console.c   **** 	
4878:.\console.c   **** 	return anapos_offset;
 15481              		.loc 1 4878 0
 15482 0146 40F20003 		movw	r3, #:lower16:anapos_offset
 15483 014a C0F20003 		movt	r3, #:upper16:anapos_offset
 15484 014e 1B68     		ldr	r3, [r3, #0]
4879:.\console.c   **** }
 15485              		.loc 1 4879 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 419


 15486 0150 1846     		mov	r0, r3
 15487 0152 80BD     		pop	{r7, pc}
 15488              		.cfi_endproc
 15489              	.LFE74:
 15490              		.size	GetAnaposOffsetZero, .-GetAnaposOffsetZero
 15491              		.text
 15492              	.Letext0:
 15493              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.0\\psoc creator\\import\\gnu_cs\\arm\\4
 15494              		.file 3 "./Generated_Source/PSoC5/cytypes.h"
 15495              		.file 4 "./gobee.h"
 15496              		.file 5 "./console.h"
 15497              		.file 6 "./mover.h"
 15498              		.file 7 "./clu.h"
 15499              		.file 8 "./statistics.h"
 15500              		.file 9 "./torquestat.h"
 15501              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\3.0\\psoc creator\\import\\gnu_cs\\arm\\
 15502              		.file 11 "./Generated_Source/PSoC5/core_cm3.h"
 15503              		.file 12 "./XTR-8LR100.h"
 15504              		.section	.debug_info,"",%progbits
 15505              	.Ldebug_info0:
 15506 0000 AB160000 		.4byte	0x16ab
 15507 0004 0200     		.2byte	0x2
 15508 0006 00000000 		.4byte	.Ldebug_abbrev0
 15509 000a 04       		.byte	0x4
 15510 000b 01       		.uleb128 0x1
 15511 000c D0030000 		.4byte	.LASF287
 15512 0010 01       		.byte	0x1
 15513 0011 C70C0000 		.4byte	.LASF288
 15514 0015 B0020000 		.4byte	.LASF289
 15515 0019 00000000 		.4byte	.Ldebug_ranges0+0
 15516 001d 00000000 		.4byte	0
 15517 0021 00000000 		.4byte	0
 15518 0025 00000000 		.4byte	.Ldebug_line0
 15519 0029 02       		.uleb128 0x2
 15520 002a 01       		.byte	0x1
 15521 002b 06       		.byte	0x6
 15522 002c 28030000 		.4byte	.LASF0
 15523 0030 02       		.uleb128 0x2
 15524 0031 01       		.byte	0x1
 15525 0032 08       		.byte	0x8
 15526 0033 88030000 		.4byte	.LASF1
 15527 0037 02       		.uleb128 0x2
 15528 0038 02       		.byte	0x2
 15529 0039 05       		.byte	0x5
 15530 003a D40B0000 		.4byte	.LASF2
 15531 003e 02       		.uleb128 0x2
 15532 003f 02       		.byte	0x2
 15533 0040 07       		.byte	0x7
 15534 0041 180D0000 		.4byte	.LASF3
 15535 0045 03       		.uleb128 0x3
 15536 0046 73000000 		.4byte	.LASF9
 15537 004a 02       		.byte	0x2
 15538 004b 4F       		.byte	0x4f
 15539 004c 50000000 		.4byte	0x50
 15540 0050 02       		.uleb128 0x2
 15541 0051 04       		.byte	0x4
 15542 0052 05       		.byte	0x5
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 420


 15543 0053 7A020000 		.4byte	.LASF4
 15544 0057 02       		.uleb128 0x2
 15545 0058 04       		.byte	0x4
 15546 0059 07       		.byte	0x7
 15547 005a 50060000 		.4byte	.LASF5
 15548 005e 02       		.uleb128 0x2
 15549 005f 08       		.byte	0x8
 15550 0060 05       		.byte	0x5
 15551 0061 57070000 		.4byte	.LASF6
 15552 0065 02       		.uleb128 0x2
 15553 0066 08       		.byte	0x8
 15554 0067 07       		.byte	0x7
 15555 0068 D7090000 		.4byte	.LASF7
 15556 006c 04       		.uleb128 0x4
 15557 006d 04       		.byte	0x4
 15558 006e 05       		.byte	0x5
 15559 006f 696E7400 		.ascii	"int\000"
 15560 0073 02       		.uleb128 0x2
 15561 0074 04       		.byte	0x4
 15562 0075 07       		.byte	0x7
 15563 0076 17080000 		.4byte	.LASF8
 15564 007a 03       		.uleb128 0x3
 15565 007b 990B0000 		.4byte	.LASF10
 15566 007f 03       		.byte	0x3
 15567 0080 5B       		.byte	0x5b
 15568 0081 30000000 		.4byte	0x30
 15569 0085 03       		.uleb128 0x3
 15570 0086 E30D0000 		.4byte	.LASF11
 15571 008a 03       		.byte	0x3
 15572 008b 5C       		.byte	0x5c
 15573 008c 3E000000 		.4byte	0x3e
 15574 0090 03       		.uleb128 0x3
 15575 0091 BD000000 		.4byte	.LASF12
 15576 0095 03       		.byte	0x3
 15577 0096 5D       		.byte	0x5d
 15578 0097 57000000 		.4byte	0x57
 15579 009b 03       		.uleb128 0x3
 15580 009c 99010000 		.4byte	.LASF13
 15581 00a0 03       		.byte	0x3
 15582 00a1 5E       		.byte	0x5e
 15583 00a2 29000000 		.4byte	0x29
 15584 00a6 03       		.uleb128 0x3
 15585 00a7 DD0C0000 		.4byte	.LASF14
 15586 00ab 03       		.byte	0x3
 15587 00ac 5F       		.byte	0x5f
 15588 00ad 37000000 		.4byte	0x37
 15589 00b1 03       		.uleb128 0x3
 15590 00b2 5A0D0000 		.4byte	.LASF15
 15591 00b6 03       		.byte	0x3
 15592 00b7 60       		.byte	0x60
 15593 00b8 50000000 		.4byte	0x50
 15594 00bc 02       		.uleb128 0x2
 15595 00bd 04       		.byte	0x4
 15596 00be 04       		.byte	0x4
 15597 00bf FB070000 		.4byte	.LASF16
 15598 00c3 02       		.uleb128 0x2
 15599 00c4 08       		.byte	0x8
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 421


 15600 00c5 04       		.byte	0x4
 15601 00c6 AB070000 		.4byte	.LASF17
 15602 00ca 03       		.uleb128 0x3
 15603 00cb 33010000 		.4byte	.LASF18
 15604 00cf 03       		.byte	0x3
 15605 00d0 6C       		.byte	0x6c
 15606 00d1 D5000000 		.4byte	0xd5
 15607 00d5 02       		.uleb128 0x2
 15608 00d6 01       		.byte	0x1
 15609 00d7 08       		.byte	0x8
 15610 00d8 83040000 		.4byte	.LASF19
 15611 00dc 02       		.uleb128 0x2
 15612 00dd 04       		.byte	0x4
 15613 00de 07       		.byte	0x7
 15614 00df 0B000000 		.4byte	.LASF20
 15615 00e3 05       		.uleb128 0x5
 15616 00e4 04       		.byte	0x4
 15617 00e5 D5000000 		.4byte	0xd5
 15618 00e9 05       		.uleb128 0x5
 15619 00ea 04       		.byte	0x4
 15620 00eb EF000000 		.4byte	0xef
 15621 00ef 06       		.uleb128 0x6
 15622 00f0 D5000000 		.4byte	0xd5
 15623 00f4 02       		.uleb128 0x2
 15624 00f5 08       		.byte	0x8
 15625 00f6 04       		.byte	0x4
 15626 00f7 67090000 		.4byte	.LASF21
 15627 00fb 07       		.uleb128 0x7
 15628 00fc 04       		.byte	0x4
 15629 00fd 04       		.byte	0x4
 15630 00fe 1B01     		.2byte	0x11b
 15631 0100 1D010000 		.4byte	0x11d
 15632 0104 08       		.uleb128 0x8
 15633 0105 A5070000 		.4byte	.LASF22
 15634 0109 04       		.byte	0x4
 15635 010a 1D01     		.2byte	0x11d
 15636 010c 1D010000 		.4byte	0x11d
 15637 0110 08       		.uleb128 0x8
 15638 0111 73090000 		.4byte	.LASF23
 15639 0115 04       		.byte	0x4
 15640 0116 1E01     		.2byte	0x11e
 15641 0118 BC000000 		.4byte	0xbc
 15642 011c 00       		.byte	0
 15643 011d 09       		.uleb128 0x9
 15644 011e CA000000 		.4byte	0xca
 15645 0122 2D010000 		.4byte	0x12d
 15646 0126 0A       		.uleb128 0xa
 15647 0127 DC000000 		.4byte	0xdc
 15648 012b 03       		.byte	0x3
 15649 012c 00       		.byte	0
 15650 012d 0B       		.uleb128 0xb
 15651 012e FF0A0000 		.4byte	.LASF24
 15652 0132 04       		.byte	0x4
 15653 0133 1F01     		.2byte	0x11f
 15654 0135 FB000000 		.4byte	0xfb
 15655 0139 0C       		.uleb128 0xc
 15656 013a 19020000 		.4byte	.LASF33
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 422


 15657 013e 18       		.byte	0x18
 15658 013f 04       		.byte	0x4
 15659 0140 3401     		.2byte	0x134
 15660 0142 BF010000 		.4byte	0x1bf
 15661 0146 0D       		.uleb128 0xd
 15662 0147 E30B0000 		.4byte	.LASF25
 15663 014b 04       		.byte	0x4
 15664 014c 3601     		.2byte	0x136
 15665 014e 7A000000 		.4byte	0x7a
 15666 0152 02       		.byte	0x2
 15667 0153 23       		.byte	0x23
 15668 0154 00       		.uleb128 0
 15669 0155 0D       		.uleb128 0xd
 15670 0156 08090000 		.4byte	.LASF26
 15671 015a 04       		.byte	0x4
 15672 015b 3A01     		.2byte	0x13a
 15673 015d 7A000000 		.4byte	0x7a
 15674 0161 02       		.byte	0x2
 15675 0162 23       		.byte	0x23
 15676 0163 01       		.uleb128 0x1
 15677 0164 0D       		.uleb128 0xd
 15678 0165 0E0B0000 		.4byte	.LASF27
 15679 0169 04       		.byte	0x4
 15680 016a 3C01     		.2byte	0x13c
 15681 016c 2D010000 		.4byte	0x12d
 15682 0170 02       		.byte	0x2
 15683 0171 23       		.byte	0x23
 15684 0172 04       		.uleb128 0x4
 15685 0173 0D       		.uleb128 0xd
 15686 0174 AA030000 		.4byte	.LASF28
 15687 0178 04       		.byte	0x4
 15688 0179 4001     		.2byte	0x140
 15689 017b A6000000 		.4byte	0xa6
 15690 017f 02       		.byte	0x2
 15691 0180 23       		.byte	0x23
 15692 0181 08       		.uleb128 0x8
 15693 0182 0D       		.uleb128 0xd
 15694 0183 8D090000 		.4byte	.LASF29
 15695 0187 04       		.byte	0x4
 15696 0188 4101     		.2byte	0x141
 15697 018a A6000000 		.4byte	0xa6
 15698 018e 02       		.byte	0x2
 15699 018f 23       		.byte	0x23
 15700 0190 0A       		.uleb128 0xa
 15701 0191 0D       		.uleb128 0xd
 15702 0192 28060000 		.4byte	.LASF30
 15703 0196 04       		.byte	0x4
 15704 0197 4201     		.2byte	0x142
 15705 0199 A6000000 		.4byte	0xa6
 15706 019d 02       		.byte	0x2
 15707 019e 23       		.byte	0x23
 15708 019f 0C       		.uleb128 0xc
 15709 01a0 0D       		.uleb128 0xd
 15710 01a1 370C0000 		.4byte	.LASF31
 15711 01a5 04       		.byte	0x4
 15712 01a6 4601     		.2byte	0x146
 15713 01a8 2D010000 		.4byte	0x12d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 423


 15714 01ac 02       		.byte	0x2
 15715 01ad 23       		.byte	0x23
 15716 01ae 10       		.uleb128 0x10
 15717 01af 0D       		.uleb128 0xd
 15718 01b0 88040000 		.4byte	.LASF32
 15719 01b4 04       		.byte	0x4
 15720 01b5 4701     		.2byte	0x147
 15721 01b7 2D010000 		.4byte	0x12d
 15722 01bb 02       		.byte	0x2
 15723 01bc 23       		.byte	0x23
 15724 01bd 14       		.uleb128 0x14
 15725 01be 00       		.byte	0
 15726 01bf 0C       		.uleb128 0xc
 15727 01c0 2E090000 		.4byte	.LASF34
 15728 01c4 06       		.byte	0x6
 15729 01c5 04       		.byte	0x4
 15730 01c6 4C01     		.2byte	0x14c
 15731 01c8 09020000 		.4byte	0x209
 15732 01cc 0D       		.uleb128 0xd
 15733 01cd 55080000 		.4byte	.LASF35
 15734 01d1 04       		.byte	0x4
 15735 01d2 4E01     		.2byte	0x14e
 15736 01d4 85000000 		.4byte	0x85
 15737 01d8 02       		.byte	0x2
 15738 01d9 23       		.byte	0x23
 15739 01da 00       		.uleb128 0
 15740 01db 0D       		.uleb128 0xd
 15741 01dc 43000000 		.4byte	.LASF36
 15742 01e0 04       		.byte	0x4
 15743 01e1 4F01     		.2byte	0x14f
 15744 01e3 7A000000 		.4byte	0x7a
 15745 01e7 02       		.byte	0x2
 15746 01e8 23       		.byte	0x23
 15747 01e9 02       		.uleb128 0x2
 15748 01ea 0D       		.uleb128 0xd
 15749 01eb 42030000 		.4byte	.LASF37
 15750 01ef 04       		.byte	0x4
 15751 01f0 5101     		.2byte	0x151
 15752 01f2 7A000000 		.4byte	0x7a
 15753 01f6 02       		.byte	0x2
 15754 01f7 23       		.byte	0x23
 15755 01f8 03       		.uleb128 0x3
 15756 01f9 0D       		.uleb128 0xd
 15757 01fa 480C0000 		.4byte	.LASF38
 15758 01fe 04       		.byte	0x4
 15759 01ff 5201     		.2byte	0x152
 15760 0201 7A000000 		.4byte	0x7a
 15761 0205 02       		.byte	0x2
 15762 0206 23       		.byte	0x23
 15763 0207 04       		.uleb128 0x4
 15764 0208 00       		.byte	0
 15765 0209 0C       		.uleb128 0xc
 15766 020a F5020000 		.4byte	.LASF39
 15767 020e 10       		.byte	0x10
 15768 020f 04       		.byte	0x4
 15769 0210 7901     		.2byte	0x179
 15770 0212 53020000 		.4byte	0x253
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 424


 15771 0216 0E       		.uleb128 0xe
 15772 0217 41444300 		.ascii	"ADC\000"
 15773 021b 04       		.byte	0x4
 15774 021c 7B01     		.2byte	0x17b
 15775 021e A6000000 		.4byte	0xa6
 15776 0222 02       		.byte	0x2
 15777 0223 23       		.byte	0x23
 15778 0224 00       		.uleb128 0
 15779 0225 0D       		.uleb128 0xd
 15780 0226 82030000 		.4byte	.LASF40
 15781 022a 04       		.byte	0x4
 15782 022b 7C01     		.2byte	0x17c
 15783 022d BC000000 		.4byte	0xbc
 15784 0231 02       		.byte	0x2
 15785 0232 23       		.byte	0x23
 15786 0233 04       		.uleb128 0x4
 15787 0234 0D       		.uleb128 0xd
 15788 0235 0F010000 		.4byte	.LASF41
 15789 0239 04       		.byte	0x4
 15790 023a 7D01     		.2byte	0x17d
 15791 023c BC000000 		.4byte	0xbc
 15792 0240 02       		.byte	0x2
 15793 0241 23       		.byte	0x23
 15794 0242 08       		.uleb128 0x8
 15795 0243 0D       		.uleb128 0xd
 15796 0244 C8080000 		.4byte	.LASF42
 15797 0248 04       		.byte	0x4
 15798 0249 7E01     		.2byte	0x17e
 15799 024b BC000000 		.4byte	0xbc
 15800 024f 02       		.byte	0x2
 15801 0250 23       		.byte	0x23
 15802 0251 0C       		.uleb128 0xc
 15803 0252 00       		.byte	0
 15804 0253 0C       		.uleb128 0xc
 15805 0254 A90B0000 		.4byte	.LASF43
 15806 0258 10       		.byte	0x10
 15807 0259 04       		.byte	0x4
 15808 025a 8101     		.2byte	0x181
 15809 025c 9D020000 		.4byte	0x29d
 15810 0260 0E       		.uleb128 0xe
 15811 0261 41444300 		.ascii	"ADC\000"
 15812 0265 04       		.byte	0x4
 15813 0266 8301     		.2byte	0x183
 15814 0268 A6000000 		.4byte	0xa6
 15815 026c 02       		.byte	0x2
 15816 026d 23       		.byte	0x23
 15817 026e 00       		.uleb128 0
 15818 026f 0D       		.uleb128 0xd
 15819 0270 82030000 		.4byte	.LASF40
 15820 0274 04       		.byte	0x4
 15821 0275 8401     		.2byte	0x184
 15822 0277 BC000000 		.4byte	0xbc
 15823 027b 02       		.byte	0x2
 15824 027c 23       		.byte	0x23
 15825 027d 04       		.uleb128 0x4
 15826 027e 0D       		.uleb128 0xd
 15827 027f 0F010000 		.4byte	.LASF41
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 425


 15828 0283 04       		.byte	0x4
 15829 0284 8501     		.2byte	0x185
 15830 0286 BC000000 		.4byte	0xbc
 15831 028a 02       		.byte	0x2
 15832 028b 23       		.byte	0x23
 15833 028c 08       		.uleb128 0x8
 15834 028d 0D       		.uleb128 0xd
 15835 028e C8080000 		.4byte	.LASF42
 15836 0292 04       		.byte	0x4
 15837 0293 8601     		.2byte	0x186
 15838 0295 BC000000 		.4byte	0xbc
 15839 0299 02       		.byte	0x2
 15840 029a 23       		.byte	0x23
 15841 029b 0C       		.uleb128 0xc
 15842 029c 00       		.byte	0
 15843 029d 0C       		.uleb128 0xc
 15844 029e 85060000 		.4byte	.LASF44
 15845 02a2 10       		.byte	0x10
 15846 02a3 04       		.byte	0x4
 15847 02a4 8901     		.2byte	0x189
 15848 02a6 E7020000 		.4byte	0x2e7
 15849 02aa 0E       		.uleb128 0xe
 15850 02ab 41444300 		.ascii	"ADC\000"
 15851 02af 04       		.byte	0x4
 15852 02b0 8B01     		.2byte	0x18b
 15853 02b2 A6000000 		.4byte	0xa6
 15854 02b6 02       		.byte	0x2
 15855 02b7 23       		.byte	0x23
 15856 02b8 00       		.uleb128 0
 15857 02b9 0D       		.uleb128 0xd
 15858 02ba 82030000 		.4byte	.LASF40
 15859 02be 04       		.byte	0x4
 15860 02bf 8C01     		.2byte	0x18c
 15861 02c1 BC000000 		.4byte	0xbc
 15862 02c5 02       		.byte	0x2
 15863 02c6 23       		.byte	0x23
 15864 02c7 04       		.uleb128 0x4
 15865 02c8 0D       		.uleb128 0xd
 15866 02c9 0F010000 		.4byte	.LASF41
 15867 02cd 04       		.byte	0x4
 15868 02ce 8D01     		.2byte	0x18d
 15869 02d0 BC000000 		.4byte	0xbc
 15870 02d4 02       		.byte	0x2
 15871 02d5 23       		.byte	0x23
 15872 02d6 08       		.uleb128 0x8
 15873 02d7 0D       		.uleb128 0xd
 15874 02d8 C8080000 		.4byte	.LASF42
 15875 02dc 04       		.byte	0x4
 15876 02dd 8E01     		.2byte	0x18e
 15877 02df BC000000 		.4byte	0xbc
 15878 02e3 02       		.byte	0x2
 15879 02e4 23       		.byte	0x23
 15880 02e5 0C       		.uleb128 0xc
 15881 02e6 00       		.byte	0
 15882 02e7 0C       		.uleb128 0xc
 15883 02e8 3E0A0000 		.4byte	.LASF45
 15884 02ec 3C       		.byte	0x3c
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 426


 15885 02ed 04       		.byte	0x4
 15886 02ee 7601     		.2byte	0x176
 15887 02f0 4F030000 		.4byte	0x34f
 15888 02f4 0D       		.uleb128 0xd
 15889 02f5 CD0B0000 		.4byte	.LASF46
 15890 02f9 04       		.byte	0x4
 15891 02fa 7F01     		.2byte	0x17f
 15892 02fc 09020000 		.4byte	0x209
 15893 0300 02       		.byte	0x2
 15894 0301 23       		.byte	0x23
 15895 0302 00       		.uleb128 0
 15896 0303 0D       		.uleb128 0xd
 15897 0304 8C060000 		.4byte	.LASF47
 15898 0308 04       		.byte	0x4
 15899 0309 8701     		.2byte	0x187
 15900 030b 53020000 		.4byte	0x253
 15901 030f 02       		.byte	0x2
 15902 0310 23       		.byte	0x23
 15903 0311 10       		.uleb128 0x10
 15904 0312 0D       		.uleb128 0xd
 15905 0313 B6000000 		.4byte	.LASF48
 15906 0317 04       		.byte	0x4
 15907 0318 9001     		.2byte	0x190
 15908 031a 9D020000 		.4byte	0x29d
 15909 031e 02       		.byte	0x2
 15910 031f 23       		.byte	0x23
 15911 0320 20       		.uleb128 0x20
 15912 0321 0D       		.uleb128 0xd
 15913 0322 1A030000 		.4byte	.LASF49
 15914 0326 04       		.byte	0x4
 15915 0327 9201     		.2byte	0x192
 15916 0329 BC000000 		.4byte	0xbc
 15917 032d 02       		.byte	0x2
 15918 032e 23       		.byte	0x23
 15919 032f 30       		.uleb128 0x30
 15920 0330 0D       		.uleb128 0xd
 15921 0331 A5040000 		.4byte	.LASF50
 15922 0335 04       		.byte	0x4
 15923 0336 9301     		.2byte	0x193
 15924 0338 BC000000 		.4byte	0xbc
 15925 033c 02       		.byte	0x2
 15926 033d 23       		.byte	0x23
 15927 033e 34       		.uleb128 0x34
 15928 033f 0D       		.uleb128 0xd
 15929 0340 C6010000 		.4byte	.LASF51
 15930 0344 04       		.byte	0x4
 15931 0345 9401     		.2byte	0x194
 15932 0347 BC000000 		.4byte	0xbc
 15933 034b 02       		.byte	0x2
 15934 034c 23       		.byte	0x23
 15935 034d 38       		.uleb128 0x38
 15936 034e 00       		.byte	0
 15937 034f 0C       		.uleb128 0xc
 15938 0350 34030000 		.4byte	.LASF52
 15939 0354 04       		.byte	0x4
 15940 0355 04       		.byte	0x4
 15941 0356 A001     		.2byte	0x1a0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 427


 15942 0358 6C030000 		.4byte	0x36c
 15943 035c 0D       		.uleb128 0xd
 15944 035d 000C0000 		.4byte	.LASF53
 15945 0361 04       		.byte	0x4
 15946 0362 A201     		.2byte	0x1a2
 15947 0364 B1000000 		.4byte	0xb1
 15948 0368 02       		.byte	0x2
 15949 0369 23       		.byte	0x23
 15950 036a 00       		.uleb128 0
 15951 036b 00       		.byte	0
 15952 036c 0C       		.uleb128 0xc
 15953 036d 5E020000 		.4byte	.LASF54
 15954 0371 14       		.byte	0x14
 15955 0372 04       		.byte	0x4
 15956 0373 9901     		.2byte	0x199
 15957 0375 C5030000 		.4byte	0x3c5
 15958 0379 0D       		.uleb128 0xd
 15959 037a 4C080000 		.4byte	.LASF55
 15960 037e 04       		.byte	0x4
 15961 037f 9B01     		.2byte	0x19b
 15962 0381 B1000000 		.4byte	0xb1
 15963 0385 02       		.byte	0x2
 15964 0386 23       		.byte	0x23
 15965 0387 00       		.uleb128 0
 15966 0388 0D       		.uleb128 0xd
 15967 0389 8A080000 		.4byte	.LASF56
 15968 038d 04       		.byte	0x4
 15969 038e 9C01     		.2byte	0x19c
 15970 0390 BC000000 		.4byte	0xbc
 15971 0394 02       		.byte	0x2
 15972 0395 23       		.byte	0x23
 15973 0396 04       		.uleb128 0x4
 15974 0397 0D       		.uleb128 0xd
 15975 0398 E2060000 		.4byte	.LASF57
 15976 039c 04       		.byte	0x4
 15977 039d 9D01     		.2byte	0x19d
 15978 039f BC000000 		.4byte	0xbc
 15979 03a3 02       		.byte	0x2
 15980 03a4 23       		.byte	0x23
 15981 03a5 08       		.uleb128 0x8
 15982 03a6 0D       		.uleb128 0xd
 15983 03a7 0B050000 		.4byte	.LASF58
 15984 03ab 04       		.byte	0x4
 15985 03ac 9E01     		.2byte	0x19e
 15986 03ae BC000000 		.4byte	0xbc
 15987 03b2 02       		.byte	0x2
 15988 03b3 23       		.byte	0x23
 15989 03b4 0C       		.uleb128 0xc
 15990 03b5 0D       		.uleb128 0xd
 15991 03b6 D50D0000 		.4byte	.LASF59
 15992 03ba 04       		.byte	0x4
 15993 03bb A601     		.2byte	0x1a6
 15994 03bd 4F030000 		.4byte	0x34f
 15995 03c1 02       		.byte	0x2
 15996 03c2 23       		.byte	0x23
 15997 03c3 10       		.uleb128 0x10
 15998 03c4 00       		.byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 428


 15999 03c5 0C       		.uleb128 0xc
 16000 03c6 19040000 		.4byte	.LASF60
 16001 03ca 10       		.byte	0x10
 16002 03cb 04       		.byte	0x4
 16003 03cc BF01     		.2byte	0x1bf
 16004 03ce 2D040000 		.4byte	0x42d
 16005 03d2 0D       		.uleb128 0xd
 16006 03d3 E8060000 		.4byte	.LASF61
 16007 03d7 04       		.byte	0x4
 16008 03d8 C101     		.2byte	0x1c1
 16009 03da 7A000000 		.4byte	0x7a
 16010 03de 02       		.byte	0x2
 16011 03df 23       		.byte	0x23
 16012 03e0 00       		.uleb128 0
 16013 03e1 0D       		.uleb128 0xd
 16014 03e2 C7030000 		.4byte	.LASF62
 16015 03e6 04       		.byte	0x4
 16016 03e7 C201     		.2byte	0x1c2
 16017 03e9 A6000000 		.4byte	0xa6
 16018 03ed 02       		.byte	0x2
 16019 03ee 23       		.byte	0x23
 16020 03ef 02       		.uleb128 0x2
 16021 03f0 0D       		.uleb128 0xd
 16022 03f1 FD050000 		.4byte	.LASF63
 16023 03f5 04       		.byte	0x4
 16024 03f6 C301     		.2byte	0x1c3
 16025 03f8 A6000000 		.4byte	0xa6
 16026 03fc 02       		.byte	0x2
 16027 03fd 23       		.byte	0x23
 16028 03fe 04       		.uleb128 0x4
 16029 03ff 0D       		.uleb128 0xd
 16030 0400 78090000 		.4byte	.LASF64
 16031 0404 04       		.byte	0x4
 16032 0405 C401     		.2byte	0x1c4
 16033 0407 A6000000 		.4byte	0xa6
 16034 040b 02       		.byte	0x2
 16035 040c 23       		.byte	0x23
 16036 040d 06       		.uleb128 0x6
 16037 040e 0D       		.uleb128 0xd
 16038 040f B8090000 		.4byte	.LASF65
 16039 0413 04       		.byte	0x4
 16040 0414 C501     		.2byte	0x1c5
 16041 0416 A6000000 		.4byte	0xa6
 16042 041a 02       		.byte	0x2
 16043 041b 23       		.byte	0x23
 16044 041c 08       		.uleb128 0x8
 16045 041d 0D       		.uleb128 0xd
 16046 041e 66020000 		.4byte	.LASF66
 16047 0422 04       		.byte	0x4
 16048 0423 C601     		.2byte	0x1c6
 16049 0425 2D010000 		.4byte	0x12d
 16050 0429 02       		.byte	0x2
 16051 042a 23       		.byte	0x23
 16052 042b 0C       		.uleb128 0xc
 16053 042c 00       		.byte	0
 16054 042d 0C       		.uleb128 0xc
 16055 042e 490B0000 		.4byte	.LASF67
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 429


 16056 0432 3C       		.byte	0x3c
 16057 0433 04       		.byte	0x4
 16058 0434 AB01     		.2byte	0x1ab
 16059 0436 EF040000 		.4byte	0x4ef
 16060 043a 0E       		.uleb128 0xe
 16061 043b 72617700 		.ascii	"raw\000"
 16062 043f 04       		.byte	0x4
 16063 0440 AE01     		.2byte	0x1ae
 16064 0442 A6000000 		.4byte	0xa6
 16065 0446 02       		.byte	0x2
 16066 0447 23       		.byte	0x23
 16067 0448 00       		.uleb128 0
 16068 0449 0D       		.uleb128 0xd
 16069 044a 4C080000 		.4byte	.LASF55
 16070 044e 04       		.byte	0x4
 16071 044f B101     		.2byte	0x1b1
 16072 0451 BC000000 		.4byte	0xbc
 16073 0455 02       		.byte	0x2
 16074 0456 23       		.byte	0x23
 16075 0457 04       		.uleb128 0x4
 16076 0458 0D       		.uleb128 0xd
 16077 0459 8A080000 		.4byte	.LASF56
 16078 045d 04       		.byte	0x4
 16079 045e B201     		.2byte	0x1b2
 16080 0460 BC000000 		.4byte	0xbc
 16081 0464 02       		.byte	0x2
 16082 0465 23       		.byte	0x23
 16083 0466 08       		.uleb128 0x8
 16084 0467 0D       		.uleb128 0xd
 16085 0468 E2060000 		.4byte	.LASF57
 16086 046c 04       		.byte	0x4
 16087 046d B301     		.2byte	0x1b3
 16088 046f BC000000 		.4byte	0xbc
 16089 0473 02       		.byte	0x2
 16090 0474 23       		.byte	0x23
 16091 0475 0C       		.uleb128 0xc
 16092 0476 0D       		.uleb128 0xd
 16093 0477 A2060000 		.4byte	.LASF68
 16094 047b 04       		.byte	0x4
 16095 047c B401     		.2byte	0x1b4
 16096 047e BC000000 		.4byte	0xbc
 16097 0482 02       		.byte	0x2
 16098 0483 23       		.byte	0x23
 16099 0484 10       		.uleb128 0x10
 16100 0485 0D       		.uleb128 0xd
 16101 0486 0B050000 		.4byte	.LASF58
 16102 048a 04       		.byte	0x4
 16103 048b B501     		.2byte	0x1b5
 16104 048d BC000000 		.4byte	0xbc
 16105 0491 02       		.byte	0x2
 16106 0492 23       		.byte	0x23
 16107 0493 14       		.uleb128 0x14
 16108 0494 0D       		.uleb128 0xd
 16109 0495 8A0D0000 		.4byte	.LASF69
 16110 0499 04       		.byte	0x4
 16111 049a B801     		.2byte	0x1b8
 16112 049c B1000000 		.4byte	0xb1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 430


 16113 04a0 02       		.byte	0x2
 16114 04a1 23       		.byte	0x23
 16115 04a2 18       		.uleb128 0x18
 16116 04a3 0D       		.uleb128 0xd
 16117 04a4 9E090000 		.4byte	.LASF70
 16118 04a8 04       		.byte	0x4
 16119 04a9 B901     		.2byte	0x1b9
 16120 04ab B1000000 		.4byte	0xb1
 16121 04af 02       		.byte	0x2
 16122 04b0 23       		.byte	0x23
 16123 04b1 1C       		.uleb128 0x1c
 16124 04b2 0D       		.uleb128 0xd
 16125 04b3 8F010000 		.4byte	.LASF71
 16126 04b7 04       		.byte	0x4
 16127 04b8 BA01     		.2byte	0x1ba
 16128 04ba BC000000 		.4byte	0xbc
 16129 04be 02       		.byte	0x2
 16130 04bf 23       		.byte	0x23
 16131 04c0 20       		.uleb128 0x20
 16132 04c1 0D       		.uleb128 0xd
 16133 04c2 F80C0000 		.4byte	.LASF72
 16134 04c6 04       		.byte	0x4
 16135 04c7 BB01     		.2byte	0x1bb
 16136 04c9 BC000000 		.4byte	0xbc
 16137 04cd 02       		.byte	0x2
 16138 04ce 23       		.byte	0x23
 16139 04cf 24       		.uleb128 0x24
 16140 04d0 0D       		.uleb128 0xd
 16141 04d1 66050000 		.4byte	.LASF73
 16142 04d5 04       		.byte	0x4
 16143 04d6 BC01     		.2byte	0x1bc
 16144 04d8 BC000000 		.4byte	0xbc
 16145 04dc 02       		.byte	0x2
 16146 04dd 23       		.byte	0x23
 16147 04de 28       		.uleb128 0x28
 16148 04df 0D       		.uleb128 0xd
 16149 04e0 D50D0000 		.4byte	.LASF59
 16150 04e4 04       		.byte	0x4
 16151 04e5 C701     		.2byte	0x1c7
 16152 04e7 C5030000 		.4byte	0x3c5
 16153 04eb 02       		.byte	0x2
 16154 04ec 23       		.byte	0x23
 16155 04ed 2C       		.uleb128 0x2c
 16156 04ee 00       		.byte	0
 16157 04ef 0C       		.uleb128 0xc
 16158 04f0 6A0C0000 		.4byte	.LASF74
 16159 04f4 08       		.byte	0x8
 16160 04f5 04       		.byte	0x4
 16161 04f6 DB01     		.2byte	0x1db
 16162 04f8 48050000 		.4byte	0x548
 16163 04fc 0D       		.uleb128 0xd
 16164 04fd 93000000 		.4byte	.LASF75
 16165 0501 04       		.byte	0x4
 16166 0502 DD01     		.2byte	0x1dd
 16167 0504 7A000000 		.4byte	0x7a
 16168 0508 02       		.byte	0x2
 16169 0509 23       		.byte	0x23
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 431


 16170 050a 00       		.uleb128 0
 16171 050b 0D       		.uleb128 0xd
 16172 050c 31020000 		.4byte	.LASF76
 16173 0510 04       		.byte	0x4
 16174 0511 DE01     		.2byte	0x1de
 16175 0513 7A000000 		.4byte	0x7a
 16176 0517 02       		.byte	0x2
 16177 0518 23       		.byte	0x23
 16178 0519 01       		.uleb128 0x1
 16179 051a 0D       		.uleb128 0xd
 16180 051b EE090000 		.4byte	.LASF77
 16181 051f 04       		.byte	0x4
 16182 0520 DF01     		.2byte	0x1df
 16183 0522 7A000000 		.4byte	0x7a
 16184 0526 02       		.byte	0x2
 16185 0527 23       		.byte	0x23
 16186 0528 02       		.uleb128 0x2
 16187 0529 0D       		.uleb128 0xd
 16188 052a CF0A0000 		.4byte	.LASF78
 16189 052e 04       		.byte	0x4
 16190 052f E101     		.2byte	0x1e1
 16191 0531 7A000000 		.4byte	0x7a
 16192 0535 02       		.byte	0x2
 16193 0536 23       		.byte	0x23
 16194 0537 03       		.uleb128 0x3
 16195 0538 0D       		.uleb128 0xd
 16196 0539 22030000 		.4byte	.LASF79
 16197 053d 04       		.byte	0x4
 16198 053e E301     		.2byte	0x1e3
 16199 0540 2D010000 		.4byte	0x12d
 16200 0544 02       		.byte	0x2
 16201 0545 23       		.byte	0x23
 16202 0546 04       		.uleb128 0x4
 16203 0547 00       		.byte	0
 16204 0548 0C       		.uleb128 0xc
 16205 0549 F6060000 		.4byte	.LASF80
 16206 054d 2C       		.byte	0x2c
 16207 054e 04       		.byte	0x4
 16208 054f CB01     		.2byte	0x1cb
 16209 0551 EC050000 		.4byte	0x5ec
 16210 0555 0D       		.uleb128 0xd
 16211 0556 96050000 		.4byte	.LASF81
 16212 055a 04       		.byte	0x4
 16213 055b CE01     		.2byte	0x1ce
 16214 055d BC000000 		.4byte	0xbc
 16215 0561 02       		.byte	0x2
 16216 0562 23       		.byte	0x23
 16217 0563 00       		.uleb128 0
 16218 0564 0D       		.uleb128 0xd
 16219 0565 A30A0000 		.4byte	.LASF82
 16220 0569 04       		.byte	0x4
 16221 056a CF01     		.2byte	0x1cf
 16222 056c BC000000 		.4byte	0xbc
 16223 0570 02       		.byte	0x2
 16224 0571 23       		.byte	0x23
 16225 0572 04       		.uleb128 0x4
 16226 0573 0D       		.uleb128 0xd
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 432


 16227 0574 CD090000 		.4byte	.LASF83
 16228 0578 04       		.byte	0x4
 16229 0579 D001     		.2byte	0x1d0
 16230 057b BC000000 		.4byte	0xbc
 16231 057f 02       		.byte	0x2
 16232 0580 23       		.byte	0x23
 16233 0581 08       		.uleb128 0x8
 16234 0582 0D       		.uleb128 0xd
 16235 0583 0D030000 		.4byte	.LASF84
 16236 0587 04       		.byte	0x4
 16237 0588 D101     		.2byte	0x1d1
 16238 058a BC000000 		.4byte	0xbc
 16239 058e 02       		.byte	0x2
 16240 058f 23       		.byte	0x23
 16241 0590 0C       		.uleb128 0xc
 16242 0591 0D       		.uleb128 0xd
 16243 0592 88070000 		.4byte	.LASF85
 16244 0596 04       		.byte	0x4
 16245 0597 D201     		.2byte	0x1d2
 16246 0599 BC000000 		.4byte	0xbc
 16247 059d 02       		.byte	0x2
 16248 059e 23       		.byte	0x23
 16249 059f 10       		.uleb128 0x10
 16250 05a0 0D       		.uleb128 0xd
 16251 05a1 39060000 		.4byte	.LASF86
 16252 05a5 04       		.byte	0x4
 16253 05a6 D301     		.2byte	0x1d3
 16254 05a8 BC000000 		.4byte	0xbc
 16255 05ac 02       		.byte	0x2
 16256 05ad 23       		.byte	0x23
 16257 05ae 14       		.uleb128 0x14
 16258 05af 0D       		.uleb128 0xd
 16259 05b0 1C010000 		.4byte	.LASF87
 16260 05b4 04       		.byte	0x4
 16261 05b5 D601     		.2byte	0x1d6
 16262 05b7 BC000000 		.4byte	0xbc
 16263 05bb 02       		.byte	0x2
 16264 05bc 23       		.byte	0x23
 16265 05bd 18       		.uleb128 0x18
 16266 05be 0D       		.uleb128 0xd
 16267 05bf AE0A0000 		.4byte	.LASF88
 16268 05c3 04       		.byte	0x4
 16269 05c4 D701     		.2byte	0x1d7
 16270 05c6 BC000000 		.4byte	0xbc
 16271 05ca 02       		.byte	0x2
 16272 05cb 23       		.byte	0x23
 16273 05cc 1C       		.uleb128 0x1c
 16274 05cd 0D       		.uleb128 0xd
 16275 05ce 6F0D0000 		.4byte	.LASF89
 16276 05d2 04       		.byte	0x4
 16277 05d3 D801     		.2byte	0x1d8
 16278 05d5 BC000000 		.4byte	0xbc
 16279 05d9 02       		.byte	0x2
 16280 05da 23       		.byte	0x23
 16281 05db 20       		.uleb128 0x20
 16282 05dc 0D       		.uleb128 0xd
 16283 05dd D50D0000 		.4byte	.LASF59
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 433


 16284 05e1 04       		.byte	0x4
 16285 05e2 E601     		.2byte	0x1e6
 16286 05e4 EF040000 		.4byte	0x4ef
 16287 05e8 02       		.byte	0x2
 16288 05e9 23       		.byte	0x23
 16289 05ea 24       		.uleb128 0x24
 16290 05eb 00       		.byte	0
 16291 05ec 0C       		.uleb128 0xc
 16292 05ed 8B000000 		.4byte	.LASF90
 16293 05f1 0C       		.byte	0xc
 16294 05f2 04       		.byte	0x4
 16295 05f3 EE01     		.2byte	0x1ee
 16296 05f5 36060000 		.4byte	0x636
 16297 05f9 0D       		.uleb128 0xd
 16298 05fa AC060000 		.4byte	.LASF91
 16299 05fe 04       		.byte	0x4
 16300 05ff F001     		.2byte	0x1f0
 16301 0601 7A000000 		.4byte	0x7a
 16302 0605 02       		.byte	0x2
 16303 0606 23       		.byte	0x23
 16304 0607 00       		.uleb128 0
 16305 0608 0D       		.uleb128 0xd
 16306 0609 350D0000 		.4byte	.LASF92
 16307 060d 04       		.byte	0x4
 16308 060e F401     		.2byte	0x1f4
 16309 0610 7A000000 		.4byte	0x7a
 16310 0614 02       		.byte	0x2
 16311 0615 23       		.byte	0x23
 16312 0616 01       		.uleb128 0x1
 16313 0617 0D       		.uleb128 0xd
 16314 0618 41020000 		.4byte	.LASF93
 16315 061c 04       		.byte	0x4
 16316 061d FA01     		.2byte	0x1fa
 16317 061f BC000000 		.4byte	0xbc
 16318 0623 02       		.byte	0x2
 16319 0624 23       		.byte	0x23
 16320 0625 04       		.uleb128 0x4
 16321 0626 0D       		.uleb128 0xd
 16322 0627 5F040000 		.4byte	.LASF94
 16323 062b 04       		.byte	0x4
 16324 062c FB01     		.2byte	0x1fb
 16325 062e BC000000 		.4byte	0xbc
 16326 0632 02       		.byte	0x2
 16327 0633 23       		.byte	0x23
 16328 0634 08       		.uleb128 0x8
 16329 0635 00       		.byte	0
 16330 0636 0C       		.uleb128 0xc
 16331 0637 5F000000 		.4byte	.LASF95
 16332 063b 28       		.byte	0x28
 16333 063c 04       		.byte	0x4
 16334 063d 0002     		.2byte	0x200
 16335 063f E9060000 		.4byte	0x6e9
 16336 0643 0D       		.uleb128 0xd
 16337 0644 000C0000 		.4byte	.LASF53
 16338 0648 04       		.byte	0x4
 16339 0649 0202     		.2byte	0x202
 16340 064b 2D010000 		.4byte	0x12d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 434


 16341 064f 02       		.byte	0x2
 16342 0650 23       		.byte	0x23
 16343 0651 00       		.uleb128 0
 16344 0652 0D       		.uleb128 0xd
 16345 0653 14000000 		.4byte	.LASF96
 16346 0657 04       		.byte	0x4
 16347 0658 0802     		.2byte	0x208
 16348 065a 7A000000 		.4byte	0x7a
 16349 065e 02       		.byte	0x2
 16350 065f 23       		.byte	0x23
 16351 0660 04       		.uleb128 0x4
 16352 0661 0E       		.uleb128 0xe
 16353 0662 4B706600 		.ascii	"Kpf\000"
 16354 0666 04       		.byte	0x4
 16355 0667 0C02     		.2byte	0x20c
 16356 0669 2D010000 		.4byte	0x12d
 16357 066d 02       		.byte	0x2
 16358 066e 23       		.byte	0x23
 16359 066f 08       		.uleb128 0x8
 16360 0670 0E       		.uleb128 0xe
 16361 0671 4B646600 		.ascii	"Kdf\000"
 16362 0675 04       		.byte	0x4
 16363 0676 0E02     		.2byte	0x20e
 16364 0678 2D010000 		.4byte	0x12d
 16365 067c 02       		.byte	0x2
 16366 067d 23       		.byte	0x23
 16367 067e 0C       		.uleb128 0xc
 16368 067f 0E       		.uleb128 0xe
 16369 0680 4B696600 		.ascii	"Kif\000"
 16370 0684 04       		.byte	0x4
 16371 0685 1002     		.2byte	0x210
 16372 0687 2D010000 		.4byte	0x12d
 16373 068b 02       		.byte	0x2
 16374 068c 23       		.byte	0x23
 16375 068d 10       		.uleb128 0x10
 16376 068e 0D       		.uleb128 0xd
 16377 068f FC080000 		.4byte	.LASF97
 16378 0693 04       		.byte	0x4
 16379 0694 1202     		.2byte	0x212
 16380 0696 2D010000 		.4byte	0x12d
 16381 069a 02       		.byte	0x2
 16382 069b 23       		.byte	0x23
 16383 069c 14       		.uleb128 0x14
 16384 069d 0D       		.uleb128 0xd
 16385 069e B1000000 		.4byte	.LASF98
 16386 06a2 04       		.byte	0x4
 16387 06a3 1602     		.2byte	0x216
 16388 06a5 2D010000 		.4byte	0x12d
 16389 06a9 02       		.byte	0x2
 16390 06aa 23       		.byte	0x23
 16391 06ab 18       		.uleb128 0x18
 16392 06ac 0D       		.uleb128 0xd
 16393 06ad F0080000 		.4byte	.LASF99
 16394 06b1 04       		.byte	0x4
 16395 06b2 1802     		.2byte	0x218
 16396 06b4 2D010000 		.4byte	0x12d
 16397 06b8 02       		.byte	0x2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 435


 16398 06b9 23       		.byte	0x23
 16399 06ba 1C       		.uleb128 0x1c
 16400 06bb 0D       		.uleb128 0xd
 16401 06bc F90A0000 		.4byte	.LASF100
 16402 06c0 04       		.byte	0x4
 16403 06c1 1A02     		.2byte	0x21a
 16404 06c3 7A000000 		.4byte	0x7a
 16405 06c7 02       		.byte	0x2
 16406 06c8 23       		.byte	0x23
 16407 06c9 20       		.uleb128 0x20
 16408 06ca 0D       		.uleb128 0xd
 16409 06cb BB0A0000 		.4byte	.LASF101
 16410 06cf 04       		.byte	0x4
 16411 06d0 1E02     		.2byte	0x21e
 16412 06d2 7A000000 		.4byte	0x7a
 16413 06d6 02       		.byte	0x2
 16414 06d7 23       		.byte	0x23
 16415 06d8 21       		.uleb128 0x21
 16416 06d9 0D       		.uleb128 0xd
 16417 06da F5000000 		.4byte	.LASF102
 16418 06de 04       		.byte	0x4
 16419 06df 2202     		.2byte	0x222
 16420 06e1 2D010000 		.4byte	0x12d
 16421 06e5 02       		.byte	0x2
 16422 06e6 23       		.byte	0x23
 16423 06e7 24       		.uleb128 0x24
 16424 06e8 00       		.byte	0
 16425 06e9 0C       		.uleb128 0xc
 16426 06ea B0090000 		.4byte	.LASF103
 16427 06ee 50       		.byte	0x50
 16428 06ef 04       		.byte	0x4
 16429 06f0 2802     		.2byte	0x228
 16430 06f2 F6070000 		.4byte	0x7f6
 16431 06f6 0D       		.uleb128 0xd
 16432 06f7 60010000 		.4byte	.LASF104
 16433 06fb 04       		.byte	0x4
 16434 06fc 2A02     		.2byte	0x22a
 16435 06fe B1000000 		.4byte	0xb1
 16436 0702 02       		.byte	0x2
 16437 0703 23       		.byte	0x23
 16438 0704 00       		.uleb128 0
 16439 0705 0D       		.uleb128 0xd
 16440 0706 72080000 		.4byte	.LASF105
 16441 070a 04       		.byte	0x4
 16442 070b 2B02     		.2byte	0x22b
 16443 070d B1000000 		.4byte	0xb1
 16444 0711 02       		.byte	0x2
 16445 0712 23       		.byte	0x23
 16446 0713 04       		.uleb128 0x4
 16447 0714 0D       		.uleb128 0xd
 16448 0715 C9040000 		.4byte	.LASF106
 16449 0719 04       		.byte	0x4
 16450 071a 3002     		.2byte	0x230
 16451 071c B1000000 		.4byte	0xb1
 16452 0720 02       		.byte	0x2
 16453 0721 23       		.byte	0x23
 16454 0722 08       		.uleb128 0x8
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 436


 16455 0723 0D       		.uleb128 0xd
 16456 0724 6A030000 		.4byte	.LASF107
 16457 0728 04       		.byte	0x4
 16458 0729 3102     		.2byte	0x231
 16459 072b B1000000 		.4byte	0xb1
 16460 072f 02       		.byte	0x2
 16461 0730 23       		.byte	0x23
 16462 0731 0C       		.uleb128 0xc
 16463 0732 0D       		.uleb128 0xd
 16464 0733 78050000 		.4byte	.LASF108
 16465 0737 04       		.byte	0x4
 16466 0738 3602     		.2byte	0x236
 16467 073a 6C030000 		.4byte	0x36c
 16468 073e 02       		.byte	0x2
 16469 073f 23       		.byte	0x23
 16470 0740 10       		.uleb128 0x10
 16471 0741 0D       		.uleb128 0xd
 16472 0742 DF020000 		.4byte	.LASF109
 16473 0746 04       		.byte	0x4
 16474 0747 3802     		.2byte	0x238
 16475 0749 BC000000 		.4byte	0xbc
 16476 074d 02       		.byte	0x2
 16477 074e 23       		.byte	0x23
 16478 074f 24       		.uleb128 0x24
 16479 0750 0D       		.uleb128 0xd
 16480 0751 9F0B0000 		.4byte	.LASF110
 16481 0755 04       		.byte	0x4
 16482 0756 3902     		.2byte	0x239
 16483 0758 BC000000 		.4byte	0xbc
 16484 075c 02       		.byte	0x2
 16485 075d 23       		.byte	0x23
 16486 075e 28       		.uleb128 0x28
 16487 075f 0D       		.uleb128 0xd
 16488 0760 E0080000 		.4byte	.LASF111
 16489 0764 04       		.byte	0x4
 16490 0765 3A02     		.2byte	0x23a
 16491 0767 BC000000 		.4byte	0xbc
 16492 076b 02       		.byte	0x2
 16493 076c 23       		.byte	0x23
 16494 076d 2C       		.uleb128 0x2c
 16495 076e 0D       		.uleb128 0xd
 16496 076f E30C0000 		.4byte	.LASF112
 16497 0773 04       		.byte	0x4
 16498 0774 3B02     		.2byte	0x23b
 16499 0776 BC000000 		.4byte	0xbc
 16500 077a 02       		.byte	0x2
 16501 077b 23       		.byte	0x23
 16502 077c 30       		.uleb128 0x30
 16503 077d 0D       		.uleb128 0xd
 16504 077e 26000000 		.4byte	.LASF113
 16505 0782 04       		.byte	0x4
 16506 0783 3C02     		.2byte	0x23c
 16507 0785 BC000000 		.4byte	0xbc
 16508 0789 02       		.byte	0x2
 16509 078a 23       		.byte	0x23
 16510 078b 34       		.uleb128 0x34
 16511 078c 0D       		.uleb128 0xd
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 437


 16512 078d 22050000 		.4byte	.LASF114
 16513 0791 04       		.byte	0x4
 16514 0792 3D02     		.2byte	0x23d
 16515 0794 BC000000 		.4byte	0xbc
 16516 0798 02       		.byte	0x2
 16517 0799 23       		.byte	0x23
 16518 079a 38       		.uleb128 0x38
 16519 079b 0D       		.uleb128 0xd
 16520 079c B2050000 		.4byte	.LASF115
 16521 07a0 04       		.byte	0x4
 16522 07a1 3F02     		.2byte	0x23f
 16523 07a3 BC000000 		.4byte	0xbc
 16524 07a7 02       		.byte	0x2
 16525 07a8 23       		.byte	0x23
 16526 07a9 3C       		.uleb128 0x3c
 16527 07aa 0D       		.uleb128 0xd
 16528 07ab DB0D0000 		.4byte	.LASF116
 16529 07af 04       		.byte	0x4
 16530 07b0 4002     		.2byte	0x240
 16531 07b2 A6000000 		.4byte	0xa6
 16532 07b6 02       		.byte	0x2
 16533 07b7 23       		.byte	0x23
 16534 07b8 40       		.uleb128 0x40
 16535 07b9 0D       		.uleb128 0xd
 16536 07ba E7040000 		.4byte	.LASF117
 16537 07be 04       		.byte	0x4
 16538 07bf 4102     		.2byte	0x241
 16539 07c1 A6000000 		.4byte	0xa6
 16540 07c5 02       		.byte	0x2
 16541 07c6 23       		.byte	0x23
 16542 07c7 42       		.uleb128 0x42
 16543 07c8 0D       		.uleb128 0xd
 16544 07c9 AB080000 		.4byte	.LASF118
 16545 07cd 04       		.byte	0x4
 16546 07ce 4302     		.2byte	0x243
 16547 07d0 BC000000 		.4byte	0xbc
 16548 07d4 02       		.byte	0x2
 16549 07d5 23       		.byte	0x23
 16550 07d6 44       		.uleb128 0x44
 16551 07d7 0D       		.uleb128 0xd
 16552 07d8 DA070000 		.4byte	.LASF119
 16553 07dc 04       		.byte	0x4
 16554 07dd 4502     		.2byte	0x245
 16555 07df BC000000 		.4byte	0xbc
 16556 07e3 02       		.byte	0x2
 16557 07e4 23       		.byte	0x23
 16558 07e5 48       		.uleb128 0x48
 16559 07e6 0D       		.uleb128 0xd
 16560 07e7 150C0000 		.4byte	.LASF120
 16561 07eb 04       		.byte	0x4
 16562 07ec 4602     		.2byte	0x246
 16563 07ee 7A000000 		.4byte	0x7a
 16564 07f2 02       		.byte	0x2
 16565 07f3 23       		.byte	0x23
 16566 07f4 4C       		.uleb128 0x4c
 16567 07f5 00       		.byte	0
 16568 07f6 0C       		.uleb128 0xc
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 438


 16569 07f7 66000000 		.4byte	.LASF121
 16570 07fb 0C       		.byte	0xc
 16571 07fc 04       		.byte	0x4
 16572 07fd 4A02     		.2byte	0x24a
 16573 07ff 31080000 		.4byte	0x831
 16574 0803 0D       		.uleb128 0xd
 16575 0804 7E060000 		.4byte	.LASF122
 16576 0808 04       		.byte	0x4
 16577 0809 4C02     		.2byte	0x24c
 16578 080b 7A000000 		.4byte	0x7a
 16579 080f 02       		.byte	0x2
 16580 0810 23       		.byte	0x23
 16581 0811 00       		.uleb128 0
 16582 0812 0D       		.uleb128 0xd
 16583 0813 9E010000 		.4byte	.LASF123
 16584 0817 04       		.byte	0x4
 16585 0818 4D02     		.2byte	0x24d
 16586 081a BC000000 		.4byte	0xbc
 16587 081e 02       		.byte	0x2
 16588 081f 23       		.byte	0x23
 16589 0820 04       		.uleb128 0x4
 16590 0821 0D       		.uleb128 0xd
 16591 0822 2E040000 		.4byte	.LASF124
 16592 0826 04       		.byte	0x4
 16593 0827 4E02     		.2byte	0x24e
 16594 0829 BC000000 		.4byte	0xbc
 16595 082d 02       		.byte	0x2
 16596 082e 23       		.byte	0x23
 16597 082f 08       		.uleb128 0x8
 16598 0830 00       		.byte	0
 16599 0831 0C       		.uleb128 0xc
 16600 0832 0B0A0000 		.4byte	.LASF125
 16601 0836 90       		.byte	0x90
 16602 0837 04       		.byte	0x4
 16603 0838 EB01     		.2byte	0x1eb
 16604 083a 7A080000 		.4byte	0x87a
 16605 083e 0D       		.uleb128 0xd
 16606 083f 83020000 		.4byte	.LASF126
 16607 0843 04       		.byte	0x4
 16608 0844 FD01     		.2byte	0x1fd
 16609 0846 EC050000 		.4byte	0x5ec
 16610 084a 02       		.byte	0x2
 16611 084b 23       		.byte	0x23
 16612 084c 00       		.uleb128 0
 16613 084d 0D       		.uleb128 0xd
 16614 084e D50D0000 		.4byte	.LASF59
 16615 0852 04       		.byte	0x4
 16616 0853 2402     		.2byte	0x224
 16617 0855 36060000 		.4byte	0x636
 16618 0859 02       		.byte	0x2
 16619 085a 23       		.byte	0x23
 16620 085b 0C       		.uleb128 0xc
 16621 085c 0E       		.uleb128 0xe
 16622 085d 6D6300   		.ascii	"mc\000"
 16623 0860 04       		.byte	0x4
 16624 0861 4702     		.2byte	0x247
 16625 0863 E9060000 		.4byte	0x6e9
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 439


 16626 0867 02       		.byte	0x2
 16627 0868 23       		.byte	0x23
 16628 0869 34       		.uleb128 0x34
 16629 086a 0E       		.uleb128 0xe
 16630 086b 6C6300   		.ascii	"lc\000"
 16631 086e 04       		.byte	0x4
 16632 086f 4F02     		.2byte	0x24f
 16633 0871 F6070000 		.4byte	0x7f6
 16634 0875 03       		.byte	0x3
 16635 0876 23       		.byte	0x23
 16636 0877 8401     		.uleb128 0x84
 16637 0879 00       		.byte	0
 16638 087a 0C       		.uleb128 0xc
 16639 087b 810B0000 		.4byte	.LASF127
 16640 087f 0C       		.byte	0xc
 16641 0880 04       		.byte	0x4
 16642 0881 5702     		.2byte	0x257
 16643 0883 B5080000 		.4byte	0x8b5
 16644 0887 0D       		.uleb128 0xd
 16645 0888 C1010000 		.4byte	.LASF128
 16646 088c 04       		.byte	0x4
 16647 088d 5902     		.2byte	0x259
 16648 088f 90000000 		.4byte	0x90
 16649 0893 02       		.byte	0x2
 16650 0894 23       		.byte	0x23
 16651 0895 00       		.uleb128 0
 16652 0896 0E       		.uleb128 0xe
 16653 0897 73656300 		.ascii	"sec\000"
 16654 089b 04       		.byte	0x4
 16655 089c 5A02     		.2byte	0x25a
 16656 089e 90000000 		.4byte	0x90
 16657 08a2 02       		.byte	0x2
 16658 08a3 23       		.byte	0x23
 16659 08a4 04       		.uleb128 0x4
 16660 08a5 0D       		.uleb128 0xd
 16661 08a6 18060000 		.4byte	.LASF129
 16662 08aa 04       		.byte	0x4
 16663 08ab 5B02     		.2byte	0x25b
 16664 08ad 90000000 		.4byte	0x90
 16665 08b1 02       		.byte	0x2
 16666 08b2 23       		.byte	0x23
 16667 08b3 08       		.uleb128 0x8
 16668 08b4 00       		.byte	0
 16669 08b5 0C       		.uleb128 0xc
 16670 08b6 47060000 		.4byte	.LASF130
 16671 08ba 05       		.byte	0x5
 16672 08bb 04       		.byte	0x4
 16673 08bc 5E02     		.2byte	0x25e
 16674 08be 0E090000 		.4byte	0x90e
 16675 08c2 0D       		.uleb128 0xd
 16676 08c3 55010000 		.4byte	.LASF131
 16677 08c7 04       		.byte	0x4
 16678 08c8 6002     		.2byte	0x260
 16679 08ca 7A000000 		.4byte	0x7a
 16680 08ce 02       		.byte	0x2
 16681 08cf 23       		.byte	0x23
 16682 08d0 00       		.uleb128 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 440


 16683 08d1 0D       		.uleb128 0xd
 16684 08d2 BB050000 		.4byte	.LASF132
 16685 08d6 04       		.byte	0x4
 16686 08d7 6102     		.2byte	0x261
 16687 08d9 7A000000 		.4byte	0x7a
 16688 08dd 02       		.byte	0x2
 16689 08de 23       		.byte	0x23
 16690 08df 01       		.uleb128 0x1
 16691 08e0 0D       		.uleb128 0xd
 16692 08e1 DE0B0000 		.4byte	.LASF133
 16693 08e5 04       		.byte	0x4
 16694 08e6 6202     		.2byte	0x262
 16695 08e8 7A000000 		.4byte	0x7a
 16696 08ec 02       		.byte	0x2
 16697 08ed 23       		.byte	0x23
 16698 08ee 02       		.uleb128 0x2
 16699 08ef 0D       		.uleb128 0xd
 16700 08f0 0F010000 		.4byte	.LASF41
 16701 08f4 04       		.byte	0x4
 16702 08f5 6302     		.2byte	0x263
 16703 08f7 7A000000 		.4byte	0x7a
 16704 08fb 02       		.byte	0x2
 16705 08fc 23       		.byte	0x23
 16706 08fd 03       		.uleb128 0x3
 16707 08fe 0D       		.uleb128 0xd
 16708 08ff 0D080000 		.4byte	.LASF134
 16709 0903 04       		.byte	0x4
 16710 0904 6402     		.2byte	0x264
 16711 0906 7A000000 		.4byte	0x7a
 16712 090a 02       		.byte	0x2
 16713 090b 23       		.byte	0x23
 16714 090c 04       		.uleb128 0x4
 16715 090d 00       		.byte	0
 16716 090e 0C       		.uleb128 0xc
 16717 090f 04050000 		.4byte	.LASF135
 16718 0913 18       		.byte	0x18
 16719 0914 04       		.byte	0x4
 16720 0915 5302     		.2byte	0x253
 16721 0917 49090000 		.4byte	0x949
 16722 091b 0D       		.uleb128 0xd
 16723 091c EE0B0000 		.4byte	.LASF136
 16724 0920 04       		.byte	0x4
 16725 0921 5502     		.2byte	0x255
 16726 0923 7A000000 		.4byte	0x7a
 16727 0927 02       		.byte	0x2
 16728 0928 23       		.byte	0x23
 16729 0929 00       		.uleb128 0
 16730 092a 0D       		.uleb128 0xd
 16731 092b 82050000 		.4byte	.LASF137
 16732 092f 04       		.byte	0x4
 16733 0930 5C02     		.2byte	0x25c
 16734 0932 7A080000 		.4byte	0x87a
 16735 0936 02       		.byte	0x2
 16736 0937 23       		.byte	0x23
 16737 0938 04       		.uleb128 0x4
 16738 0939 0D       		.uleb128 0xd
 16739 093a C50D0000 		.4byte	.LASF138
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 441


 16740 093e 04       		.byte	0x4
 16741 093f 6502     		.2byte	0x265
 16742 0941 B5080000 		.4byte	0x8b5
 16743 0945 02       		.byte	0x2
 16744 0946 23       		.byte	0x23
 16745 0947 10       		.uleb128 0x10
 16746 0948 00       		.byte	0
 16747 0949 0F       		.uleb128 0xf
 16748 094a FD090000 		.4byte	.LASF139
 16749 094e 2D       		.byte	0x2d
 16750 094f 05       		.byte	0x5
 16751 0950 12       		.byte	0x12
 16752 0951 8E090000 		.4byte	0x98e
 16753 0955 10       		.uleb128 0x10
 16754 0956 59030000 		.4byte	.LASF140
 16755 095a 05       		.byte	0x5
 16756 095b 14       		.byte	0x14
 16757 095c 8E090000 		.4byte	0x98e
 16758 0960 02       		.byte	0x2
 16759 0961 23       		.byte	0x23
 16760 0962 00       		.uleb128 0
 16761 0963 10       		.uleb128 0x10
 16762 0964 DD040000 		.4byte	.LASF141
 16763 0968 05       		.byte	0x5
 16764 0969 15       		.byte	0x15
 16765 096a 8E090000 		.4byte	0x98e
 16766 096e 02       		.byte	0x2
 16767 096f 23       		.byte	0x23
 16768 0970 0F       		.uleb128 0xf
 16769 0971 10       		.uleb128 0x10
 16770 0972 73040000 		.4byte	.LASF142
 16771 0976 05       		.byte	0x5
 16772 0977 16       		.byte	0x16
 16773 0978 9E090000 		.4byte	0x99e
 16774 097c 02       		.byte	0x2
 16775 097d 23       		.byte	0x23
 16776 097e 1E       		.uleb128 0x1e
 16777 097f 10       		.uleb128 0x10
 16778 0980 7B040000 		.4byte	.LASF143
 16779 0984 05       		.byte	0x5
 16780 0985 17       		.byte	0x17
 16781 0986 AE090000 		.4byte	0x9ae
 16782 098a 02       		.byte	0x2
 16783 098b 23       		.byte	0x23
 16784 098c 28       		.uleb128 0x28
 16785 098d 00       		.byte	0
 16786 098e 09       		.uleb128 0x9
 16787 098f D5000000 		.4byte	0xd5
 16788 0993 9E090000 		.4byte	0x99e
 16789 0997 0A       		.uleb128 0xa
 16790 0998 DC000000 		.4byte	0xdc
 16791 099c 0E       		.byte	0xe
 16792 099d 00       		.byte	0
 16793 099e 09       		.uleb128 0x9
 16794 099f D5000000 		.4byte	0xd5
 16795 09a3 AE090000 		.4byte	0x9ae
 16796 09a7 0A       		.uleb128 0xa
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 442


 16797 09a8 DC000000 		.4byte	0xdc
 16798 09ac 09       		.byte	0x9
 16799 09ad 00       		.byte	0
 16800 09ae 09       		.uleb128 0x9
 16801 09af D5000000 		.4byte	0xd5
 16802 09b3 BE090000 		.4byte	0x9be
 16803 09b7 0A       		.uleb128 0xa
 16804 09b8 DC000000 		.4byte	0xdc
 16805 09bc 04       		.byte	0x4
 16806 09bd 00       		.byte	0
 16807 09be 11       		.uleb128 0x11
 16808 09bf 30       		.byte	0x30
 16809 09c0 06       		.byte	0x6
 16810 09c1 7B       		.byte	0x7b
 16811 09c2 450A0000 		.4byte	0xa45
 16812 09c6 10       		.uleb128 0x10
 16813 09c7 7E060000 		.4byte	.LASF122
 16814 09cb 06       		.byte	0x6
 16815 09cc 7D       		.byte	0x7d
 16816 09cd 7A000000 		.4byte	0x7a
 16817 09d1 02       		.byte	0x2
 16818 09d2 23       		.byte	0x23
 16819 09d3 00       		.uleb128 0
 16820 09d4 10       		.uleb128 0x10
 16821 09d5 710B0000 		.4byte	.LASF144
 16822 09d9 06       		.byte	0x6
 16823 09da 7E       		.byte	0x7e
 16824 09db 7A000000 		.4byte	0x7a
 16825 09df 02       		.byte	0x2
 16826 09e0 23       		.byte	0x23
 16827 09e1 01       		.uleb128 0x1
 16828 09e2 10       		.uleb128 0x10
 16829 09e3 20070000 		.4byte	.LASF145
 16830 09e7 06       		.byte	0x6
 16831 09e8 7F       		.byte	0x7f
 16832 09e9 90000000 		.4byte	0x90
 16833 09ed 02       		.byte	0x2
 16834 09ee 23       		.byte	0x23
 16835 09ef 04       		.uleb128 0x4
 16836 09f0 10       		.uleb128 0x10
 16837 09f1 4C050000 		.4byte	.LASF146
 16838 09f5 06       		.byte	0x6
 16839 09f6 80       		.byte	0x80
 16840 09f7 C3000000 		.4byte	0xc3
 16841 09fb 02       		.byte	0x2
 16842 09fc 23       		.byte	0x23
 16843 09fd 08       		.uleb128 0x8
 16844 09fe 10       		.uleb128 0x10
 16845 09ff 1C050000 		.4byte	.LASF147
 16846 0a03 06       		.byte	0x6
 16847 0a04 81       		.byte	0x81
 16848 0a05 B1000000 		.4byte	0xb1
 16849 0a09 02       		.byte	0x2
 16850 0a0a 23       		.byte	0x23
 16851 0a0b 10       		.uleb128 0x10
 16852 0a0c 10       		.uleb128 0x10
 16853 0a0d 52090000 		.4byte	.LASF148
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 443


 16854 0a11 06       		.byte	0x6
 16855 0a12 82       		.byte	0x82
 16856 0a13 C3000000 		.4byte	0xc3
 16857 0a17 02       		.byte	0x2
 16858 0a18 23       		.byte	0x23
 16859 0a19 18       		.uleb128 0x18
 16860 0a1a 10       		.uleb128 0x10
 16861 0a1b 5D0A0000 		.4byte	.LASF149
 16862 0a1f 06       		.byte	0x6
 16863 0a20 83       		.byte	0x83
 16864 0a21 B1000000 		.4byte	0xb1
 16865 0a25 02       		.byte	0x2
 16866 0a26 23       		.byte	0x23
 16867 0a27 20       		.uleb128 0x20
 16868 0a28 10       		.uleb128 0x10
 16869 0a29 50000000 		.4byte	.LASF150
 16870 0a2d 06       		.byte	0x6
 16871 0a2e 84       		.byte	0x84
 16872 0a2f B1000000 		.4byte	0xb1
 16873 0a33 02       		.byte	0x2
 16874 0a34 23       		.byte	0x23
 16875 0a35 24       		.uleb128 0x24
 16876 0a36 10       		.uleb128 0x10
 16877 0a37 E30A0000 		.4byte	.LASF151
 16878 0a3b 06       		.byte	0x6
 16879 0a3c 85       		.byte	0x85
 16880 0a3d 7A000000 		.4byte	0x7a
 16881 0a41 02       		.byte	0x2
 16882 0a42 23       		.byte	0x23
 16883 0a43 28       		.uleb128 0x28
 16884 0a44 00       		.byte	0
 16885 0a45 03       		.uleb128 0x3
 16886 0a46 8B050000 		.4byte	.LASF152
 16887 0a4a 06       		.byte	0x6
 16888 0a4b 87       		.byte	0x87
 16889 0a4c BE090000 		.4byte	0x9be
 16890 0a50 0F       		.uleb128 0xf
 16891 0a51 59040000 		.4byte	.LASF153
 16892 0a55 14       		.byte	0x14
 16893 0a56 06       		.byte	0x6
 16894 0a57 93       		.byte	0x93
 16895 0a58 790A0000 		.4byte	0xa79
 16896 0a5c 10       		.uleb128 0x10
 16897 0a5d 26070000 		.4byte	.LASF154
 16898 0a61 06       		.byte	0x6
 16899 0a62 95       		.byte	0x95
 16900 0a63 790A0000 		.4byte	0xa79
 16901 0a67 02       		.byte	0x2
 16902 0a68 23       		.byte	0x23
 16903 0a69 00       		.uleb128 0
 16904 0a6a 10       		.uleb128 0x10
 16905 0a6b F4040000 		.4byte	.LASF155
 16906 0a6f 06       		.byte	0x6
 16907 0a70 97       		.byte	0x97
 16908 0a71 890A0000 		.4byte	0xa89
 16909 0a75 02       		.byte	0x2
 16910 0a76 23       		.byte	0x23
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 444


 16911 0a77 0C       		.uleb128 0xc
 16912 0a78 00       		.byte	0
 16913 0a79 09       		.uleb128 0x9
 16914 0a7a 2D010000 		.4byte	0x12d
 16915 0a7e 890A0000 		.4byte	0xa89
 16916 0a82 0A       		.uleb128 0xa
 16917 0a83 DC000000 		.4byte	0xdc
 16918 0a87 02       		.byte	0x2
 16919 0a88 00       		.byte	0
 16920 0a89 09       		.uleb128 0x9
 16921 0a8a A6000000 		.4byte	0xa6
 16922 0a8e 990A0000 		.4byte	0xa99
 16923 0a92 0A       		.uleb128 0xa
 16924 0a93 DC000000 		.4byte	0xdc
 16925 0a97 02       		.byte	0x2
 16926 0a98 00       		.byte	0
 16927 0a99 12       		.uleb128 0x12
 16928 0a9a 514D4300 		.ascii	"QMC\000"
 16929 0a9e 0C       		.byte	0xc
 16930 0a9f 06       		.byte	0x6
 16931 0aa0 9C       		.byte	0x9c
 16932 0aa1 B40A0000 		.4byte	0xab4
 16933 0aa5 10       		.uleb128 0x10
 16934 0aa6 4C080000 		.4byte	.LASF55
 16935 0aaa 06       		.byte	0x6
 16936 0aab 9E       		.byte	0x9e
 16937 0aac B40A0000 		.4byte	0xab4
 16938 0ab0 02       		.byte	0x2
 16939 0ab1 23       		.byte	0x23
 16940 0ab2 00       		.uleb128 0
 16941 0ab3 00       		.byte	0
 16942 0ab4 09       		.uleb128 0x9
 16943 0ab5 BC000000 		.4byte	0xbc
 16944 0ab9 C40A0000 		.4byte	0xac4
 16945 0abd 0A       		.uleb128 0xa
 16946 0abe DC000000 		.4byte	0xdc
 16947 0ac2 02       		.byte	0x2
 16948 0ac3 00       		.byte	0
 16949 0ac4 0F       		.uleb128 0xf
 16950 0ac5 DC010000 		.4byte	.LASF156
 16951 0ac9 24       		.byte	0x24
 16952 0aca 06       		.byte	0x6
 16953 0acb 8B       		.byte	0x8b
 16954 0acc 080B0000 		.4byte	0xb08
 16955 0ad0 10       		.uleb128 0x10
 16956 0ad1 070B0000 		.4byte	.LASF157
 16957 0ad5 06       		.byte	0x6
 16958 0ad6 8D       		.byte	0x8d
 16959 0ad7 7A000000 		.4byte	0x7a
 16960 0adb 02       		.byte	0x2
 16961 0adc 23       		.byte	0x23
 16962 0add 00       		.uleb128 0
 16963 0ade 10       		.uleb128 0x10
 16964 0adf E30B0000 		.4byte	.LASF25
 16965 0ae3 06       		.byte	0x6
 16966 0ae4 90       		.byte	0x90
 16967 0ae5 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 445


 16968 0ae9 02       		.byte	0x2
 16969 0aea 23       		.byte	0x23
 16970 0aeb 01       		.uleb128 0x1
 16971 0aec 10       		.uleb128 0x10
 16972 0aed D50D0000 		.4byte	.LASF59
 16973 0af1 06       		.byte	0x6
 16974 0af2 99       		.byte	0x99
 16975 0af3 500A0000 		.4byte	0xa50
 16976 0af7 02       		.byte	0x2
 16977 0af8 23       		.byte	0x23
 16978 0af9 04       		.uleb128 0x4
 16979 0afa 13       		.uleb128 0x13
 16980 0afb 6D6300   		.ascii	"mc\000"
 16981 0afe 06       		.byte	0x6
 16982 0aff A0       		.byte	0xa0
 16983 0b00 990A0000 		.4byte	0xa99
 16984 0b04 02       		.byte	0x2
 16985 0b05 23       		.byte	0x23
 16986 0b06 18       		.uleb128 0x18
 16987 0b07 00       		.byte	0
 16988 0b08 0F       		.uleb128 0xf
 16989 0b09 570B0000 		.4byte	.LASF158
 16990 0b0d 0A       		.byte	0xa
 16991 0b0e 07       		.byte	0x7
 16992 0b0f 18       		.byte	0x18
 16993 0b10 770B0000 		.4byte	0xb77
 16994 0b14 10       		.uleb128 0x10
 16995 0b15 7E060000 		.4byte	.LASF122
 16996 0b19 07       		.byte	0x7
 16997 0b1a 1A       		.byte	0x1a
 16998 0b1b 7A000000 		.4byte	0x7a
 16999 0b1f 02       		.byte	0x2
 17000 0b20 23       		.byte	0x23
 17001 0b21 00       		.uleb128 0
 17002 0b22 10       		.uleb128 0x10
 17003 0b23 A8050000 		.4byte	.LASF159
 17004 0b27 07       		.byte	0x7
 17005 0b28 1B       		.byte	0x1b
 17006 0b29 7A000000 		.4byte	0x7a
 17007 0b2d 02       		.byte	0x2
 17008 0b2e 23       		.byte	0x23
 17009 0b2f 01       		.uleb128 0x1
 17010 0b30 10       		.uleb128 0x10
 17011 0b31 F5050000 		.4byte	.LASF160
 17012 0b35 07       		.byte	0x7
 17013 0b36 1C       		.byte	0x1c
 17014 0b37 7A000000 		.4byte	0x7a
 17015 0b3b 02       		.byte	0x2
 17016 0b3c 23       		.byte	0x23
 17017 0b3d 02       		.uleb128 0x2
 17018 0b3e 10       		.uleb128 0x10
 17019 0b3f 28010000 		.4byte	.LASF161
 17020 0b43 07       		.byte	0x7
 17021 0b44 1D       		.byte	0x1d
 17022 0b45 85000000 		.4byte	0x85
 17023 0b49 02       		.byte	0x2
 17024 0b4a 23       		.byte	0x23
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 446


 17025 0b4b 04       		.uleb128 0x4
 17026 0b4c 10       		.uleb128 0x10
 17027 0b4d 43050000 		.4byte	.LASF162
 17028 0b51 07       		.byte	0x7
 17029 0b52 1E       		.byte	0x1e
 17030 0b53 85000000 		.4byte	0x85
 17031 0b57 02       		.byte	0x2
 17032 0b58 23       		.byte	0x23
 17033 0b59 06       		.uleb128 0x6
 17034 0b5a 10       		.uleb128 0x10
 17035 0b5b 600C0000 		.4byte	.LASF163
 17036 0b5f 07       		.byte	0x7
 17037 0b60 1F       		.byte	0x1f
 17038 0b61 7A000000 		.4byte	0x7a
 17039 0b65 02       		.byte	0x2
 17040 0b66 23       		.byte	0x23
 17041 0b67 08       		.uleb128 0x8
 17042 0b68 10       		.uleb128 0x10
 17043 0b69 8B0A0000 		.4byte	.LASF164
 17044 0b6d 07       		.byte	0x7
 17045 0b6e 20       		.byte	0x20
 17046 0b6f 7A000000 		.4byte	0x7a
 17047 0b73 02       		.byte	0x2
 17048 0b74 23       		.byte	0x23
 17049 0b75 09       		.uleb128 0x9
 17050 0b76 00       		.byte	0
 17051 0b77 0F       		.uleb128 0xf
 17052 0b78 BA0D0000 		.4byte	.LASF165
 17053 0b7c 30       		.byte	0x30
 17054 0b7d 08       		.byte	0x8
 17055 0b7e 18       		.byte	0x18
 17056 0b7f 2B0C0000 		.4byte	0xc2b
 17057 0b83 10       		.uleb128 0x10
 17058 0b84 050A0000 		.4byte	.LASF166
 17059 0b88 08       		.byte	0x8
 17060 0b89 1A       		.byte	0x1a
 17061 0b8a 7A000000 		.4byte	0x7a
 17062 0b8e 02       		.byte	0x2
 17063 0b8f 23       		.byte	0x23
 17064 0b90 00       		.uleb128 0
 17065 0b91 10       		.uleb128 0x10
 17066 0b92 390A0000 		.4byte	.LASF167
 17067 0b96 08       		.byte	0x8
 17068 0b97 1C       		.byte	0x1c
 17069 0b98 BC000000 		.4byte	0xbc
 17070 0b9c 02       		.byte	0x2
 17071 0b9d 23       		.byte	0x23
 17072 0b9e 04       		.uleb128 0x4
 17073 0b9f 10       		.uleb128 0x10
 17074 0ba0 D5050000 		.4byte	.LASF168
 17075 0ba4 08       		.byte	0x8
 17076 0ba5 1D       		.byte	0x1d
 17077 0ba6 BC000000 		.4byte	0xbc
 17078 0baa 02       		.byte	0x2
 17079 0bab 23       		.byte	0x23
 17080 0bac 08       		.uleb128 0x8
 17081 0bad 13       		.uleb128 0x13
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 447


 17082 0bae 6D696E00 		.ascii	"min\000"
 17083 0bb2 08       		.byte	0x8
 17084 0bb3 1E       		.byte	0x1e
 17085 0bb4 BC000000 		.4byte	0xbc
 17086 0bb8 02       		.byte	0x2
 17087 0bb9 23       		.byte	0x23
 17088 0bba 0C       		.uleb128 0xc
 17089 0bbb 13       		.uleb128 0x13
 17090 0bbc 6D617800 		.ascii	"max\000"
 17091 0bc0 08       		.byte	0x8
 17092 0bc1 1F       		.byte	0x1f
 17093 0bc2 BC000000 		.4byte	0xbc
 17094 0bc6 02       		.byte	0x2
 17095 0bc7 23       		.byte	0x23
 17096 0bc8 10       		.uleb128 0x10
 17097 0bc9 10       		.uleb128 0x10
 17098 0bca E80B0000 		.4byte	.LASF169
 17099 0bce 08       		.byte	0x8
 17100 0bcf 20       		.byte	0x20
 17101 0bd0 BC000000 		.4byte	0xbc
 17102 0bd4 02       		.byte	0x2
 17103 0bd5 23       		.byte	0x23
 17104 0bd6 14       		.uleb128 0x14
 17105 0bd7 10       		.uleb128 0x10
 17106 0bd8 01090000 		.4byte	.LASF170
 17107 0bdc 08       		.byte	0x8
 17108 0bdd 21       		.byte	0x21
 17109 0bde BC000000 		.4byte	0xbc
 17110 0be2 02       		.byte	0x2
 17111 0be3 23       		.byte	0x23
 17112 0be4 18       		.uleb128 0x18
 17113 0be5 13       		.uleb128 0x13
 17114 0be6 516B00   		.ascii	"Qk\000"
 17115 0be9 08       		.byte	0x8
 17116 0bea 22       		.byte	0x22
 17117 0beb BC000000 		.4byte	0xbc
 17118 0bef 02       		.byte	0x2
 17119 0bf0 23       		.byte	0x23
 17120 0bf1 1C       		.uleb128 0x1c
 17121 0bf2 10       		.uleb128 0x10
 17122 0bf3 8A020000 		.4byte	.LASF171
 17123 0bf7 08       		.byte	0x8
 17124 0bf8 23       		.byte	0x23
 17125 0bf9 BC000000 		.4byte	0xbc
 17126 0bfd 02       		.byte	0x2
 17127 0bfe 23       		.byte	0x23
 17128 0bff 20       		.uleb128 0x20
 17129 0c00 10       		.uleb128 0x10
 17130 0c01 F00A0000 		.4byte	.LASF172
 17131 0c05 08       		.byte	0x8
 17132 0c06 24       		.byte	0x24
 17133 0c07 BC000000 		.4byte	0xbc
 17134 0c0b 02       		.byte	0x2
 17135 0c0c 23       		.byte	0x23
 17136 0c0d 24       		.uleb128 0x24
 17137 0c0e 10       		.uleb128 0x10
 17138 0c0f 950A0000 		.4byte	.LASF173
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 448


 17139 0c13 08       		.byte	0x8
 17140 0c14 26       		.byte	0x26
 17141 0c15 90000000 		.4byte	0x90
 17142 0c19 02       		.byte	0x2
 17143 0c1a 23       		.byte	0x23
 17144 0c1b 28       		.uleb128 0x28
 17145 0c1c 10       		.uleb128 0x10
 17146 0c1d 9D060000 		.4byte	.LASF174
 17147 0c21 08       		.byte	0x8
 17148 0c22 28       		.byte	0x28
 17149 0c23 90000000 		.4byte	0x90
 17150 0c27 02       		.byte	0x2
 17151 0c28 23       		.byte	0x23
 17152 0c29 2C       		.uleb128 0x2c
 17153 0c2a 00       		.byte	0
 17154 0c2b 0F       		.uleb128 0xf
 17155 0c2c A00C0000 		.4byte	.LASF175
 17156 0c30 08       		.byte	0x8
 17157 0c31 09       		.byte	0x9
 17158 0c32 8C       		.byte	0x8c
 17159 0c33 540C0000 		.4byte	0xc54
 17160 0c37 10       		.uleb128 0x10
 17161 0c38 AA0C0000 		.4byte	.LASF176
 17162 0c3c 09       		.byte	0x9
 17163 0c3d 8E       		.byte	0x8e
 17164 0c3e BC000000 		.4byte	0xbc
 17165 0c42 02       		.byte	0x2
 17166 0c43 23       		.byte	0x23
 17167 0c44 00       		.uleb128 0
 17168 0c45 10       		.uleb128 0x10
 17169 0c46 1D000000 		.4byte	.LASF177
 17170 0c4a 09       		.byte	0x9
 17171 0c4b 8F       		.byte	0x8f
 17172 0c4c BC000000 		.4byte	0xbc
 17173 0c50 02       		.byte	0x2
 17174 0c51 23       		.byte	0x23
 17175 0c52 04       		.uleb128 0x4
 17176 0c53 00       		.byte	0
 17177 0c54 0F       		.uleb128 0xf
 17178 0c55 55020000 		.4byte	.LASF178
 17179 0c59 08       		.byte	0x8
 17180 0c5a 09       		.byte	0x9
 17181 0c5b 92       		.byte	0x92
 17182 0c5c 7D0C0000 		.4byte	0xc7d
 17183 0c60 10       		.uleb128 0x10
 17184 0c61 400D0000 		.4byte	.LASF179
 17185 0c65 09       		.byte	0x9
 17186 0c66 94       		.byte	0x94
 17187 0c67 BC000000 		.4byte	0xbc
 17188 0c6b 02       		.byte	0x2
 17189 0c6c 23       		.byte	0x23
 17190 0c6d 00       		.uleb128 0
 17191 0c6e 10       		.uleb128 0x10
 17192 0c6f B60C0000 		.4byte	.LASF180
 17193 0c73 09       		.byte	0x9
 17194 0c74 95       		.byte	0x95
 17195 0c75 B1000000 		.4byte	0xb1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 449


 17196 0c79 02       		.byte	0x2
 17197 0c7a 23       		.byte	0x23
 17198 0c7b 04       		.uleb128 0x4
 17199 0c7c 00       		.byte	0
 17200 0c7d 0F       		.uleb128 0xf
 17201 0c7e A5020000 		.4byte	.LASF181
 17202 0c82 20       		.byte	0x20
 17203 0c83 09       		.byte	0x9
 17204 0c84 87       		.byte	0x87
 17205 0c85 C20C0000 		.4byte	0xcc2
 17206 0c89 10       		.uleb128 0x10
 17207 0c8a FC020000 		.4byte	.LASF182
 17208 0c8e 09       		.byte	0x9
 17209 0c8f 89       		.byte	0x89
 17210 0c90 C3000000 		.4byte	0xc3
 17211 0c94 02       		.byte	0x2
 17212 0c95 23       		.byte	0x23
 17213 0c96 00       		.uleb128 0
 17214 0c97 10       		.uleb128 0x10
 17215 0c98 97070000 		.4byte	.LASF183
 17216 0c9c 09       		.byte	0x9
 17217 0c9d 8A       		.byte	0x8a
 17218 0c9e BC000000 		.4byte	0xbc
 17219 0ca2 02       		.byte	0x2
 17220 0ca3 23       		.byte	0x23
 17221 0ca4 08       		.uleb128 0x8
 17222 0ca5 10       		.uleb128 0x10
 17223 0ca6 A9090000 		.4byte	.LASF184
 17224 0caa 09       		.byte	0x9
 17225 0cab 90       		.byte	0x90
 17226 0cac 2B0C0000 		.4byte	0xc2b
 17227 0cb0 02       		.byte	0x2
 17228 0cb1 23       		.byte	0x23
 17229 0cb2 0C       		.uleb128 0xc
 17230 0cb3 10       		.uleb128 0x10
 17231 0cb4 C90A0000 		.4byte	.LASF185
 17232 0cb8 09       		.byte	0x9
 17233 0cb9 96       		.byte	0x96
 17234 0cba 540C0000 		.4byte	0xc54
 17235 0cbe 02       		.byte	0x2
 17236 0cbf 23       		.byte	0x23
 17237 0cc0 14       		.uleb128 0x14
 17238 0cc1 00       		.byte	0
 17239 0cc2 14       		.uleb128 0x14
 17240 0cc3 01       		.byte	0x1
 17241 0cc4 C4000000 		.4byte	.LASF186
 17242 0cc8 01       		.byte	0x1
 17243 0cc9 B3       		.byte	0xb3
 17244 0cca 01       		.byte	0x1
 17245 0ccb 00000000 		.4byte	.LFB56
 17246 0ccf D2000000 		.4byte	.LFE56
 17247 0cd3 00000000 		.4byte	.LLST0
 17248 0cd7 01       		.byte	0x1
 17249 0cd8 EB0C0000 		.4byte	0xceb
 17250 0cdc 15       		.uleb128 0x15
 17251 0cdd 7E060000 		.4byte	.LASF122
 17252 0ce1 01       		.byte	0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 450


 17253 0ce2 B3       		.byte	0xb3
 17254 0ce3 7A000000 		.4byte	0x7a
 17255 0ce7 02       		.byte	0x2
 17256 0ce8 91       		.byte	0x91
 17257 0ce9 77       		.sleb128 -9
 17258 0cea 00       		.byte	0
 17259 0ceb 14       		.uleb128 0x14
 17260 0cec 01       		.byte	0x1
 17261 0ced 39000000 		.4byte	.LASF187
 17262 0cf1 01       		.byte	0x1
 17263 0cf2 DB       		.byte	0xdb
 17264 0cf3 01       		.byte	0x1
 17265 0cf4 00000000 		.4byte	.LFB57
 17266 0cf8 EE000000 		.4byte	.LFE57
 17267 0cfc 38000000 		.4byte	.LLST1
 17268 0d00 01       		.byte	0x1
 17269 0d01 140D0000 		.4byte	0xd14
 17270 0d05 15       		.uleb128 0x15
 17271 0d06 7E060000 		.4byte	.LASF122
 17272 0d0a 01       		.byte	0x1
 17273 0d0b DB       		.byte	0xdb
 17274 0d0c 7A000000 		.4byte	0x7a
 17275 0d10 02       		.byte	0x2
 17276 0d11 91       		.byte	0x91
 17277 0d12 77       		.sleb128 -9
 17278 0d13 00       		.byte	0
 17279 0d14 16       		.uleb128 0x16
 17280 0d15 01       		.byte	0x1
 17281 0d16 6B060000 		.4byte	.LASF188
 17282 0d1a 01       		.byte	0x1
 17283 0d1b 0701     		.2byte	0x107
 17284 0d1d 01       		.byte	0x1
 17285 0d1e 00000000 		.4byte	.LFB58
 17286 0d22 74010000 		.4byte	.LFE58
 17287 0d26 70000000 		.4byte	.LLST2
 17288 0d2a 01       		.byte	0x1
 17289 0d2b 16       		.uleb128 0x16
 17290 0d2c 01       		.byte	0x1
 17291 0d2d 96020000 		.4byte	.LASF189
 17292 0d31 01       		.byte	0x1
 17293 0d32 4801     		.2byte	0x148
 17294 0d34 01       		.byte	0x1
 17295 0d35 00000000 		.4byte	.LFB59
 17296 0d39 50000000 		.4byte	.LFE59
 17297 0d3d 9C000000 		.4byte	.LLST3
 17298 0d41 01       		.byte	0x1
 17299 0d42 17       		.uleb128 0x17
 17300 0d43 01       		.byte	0x1
 17301 0d44 2F0B0000 		.4byte	.LASF190
 17302 0d48 01       		.byte	0x1
 17303 0d49 5901     		.2byte	0x159
 17304 0d4b 01       		.byte	0x1
 17305 0d4c 00000000 		.4byte	.LFB60
 17306 0d50 80000000 		.4byte	.LFE60
 17307 0d54 C8000000 		.4byte	.LLST4
 17308 0d58 01       		.byte	0x1
 17309 0d59 6D0D0000 		.4byte	0xd6d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 451


 17310 0d5d 18       		.uleb128 0x18
 17311 0d5e F20C0000 		.4byte	.LASF191
 17312 0d62 01       		.byte	0x1
 17313 0d63 5901     		.2byte	0x159
 17314 0d65 6D0D0000 		.4byte	0xd6d
 17315 0d69 02       		.byte	0x2
 17316 0d6a 91       		.byte	0x91
 17317 0d6b 74       		.sleb128 -12
 17318 0d6c 00       		.byte	0
 17319 0d6d 05       		.uleb128 0x5
 17320 0d6e 04       		.byte	0x4
 17321 0d6f 31080000 		.4byte	0x831
 17322 0d73 17       		.uleb128 0x17
 17323 0d74 01       		.byte	0x1
 17324 0d75 B3080000 		.4byte	.LASF192
 17325 0d79 01       		.byte	0x1
 17326 0d7a 7201     		.2byte	0x172
 17327 0d7c 01       		.byte	0x1
 17328 0d7d 00000000 		.4byte	.LFB61
 17329 0d81 98000000 		.4byte	.LFE61
 17330 0d85 00010000 		.4byte	.LLST5
 17331 0d89 01       		.byte	0x1
 17332 0d8a 9E0D0000 		.4byte	0xd9e
 17333 0d8e 18       		.uleb128 0x18
 17334 0d8f F20C0000 		.4byte	.LASF191
 17335 0d93 01       		.byte	0x1
 17336 0d94 7201     		.2byte	0x172
 17337 0d96 6D0D0000 		.4byte	0xd6d
 17338 0d9a 02       		.byte	0x2
 17339 0d9b 91       		.byte	0x91
 17340 0d9c 74       		.sleb128 -12
 17341 0d9d 00       		.byte	0
 17342 0d9e 17       		.uleb128 0x17
 17343 0d9f 01       		.byte	0x1
 17344 0da0 B00B0000 		.4byte	.LASF193
 17345 0da4 01       		.byte	0x1
 17346 0da5 8001     		.2byte	0x180
 17347 0da7 01       		.byte	0x1
 17348 0da8 00000000 		.4byte	.LFB62
 17349 0dac 54000000 		.4byte	.LFE62
 17350 0db0 38010000 		.4byte	.LLST6
 17351 0db4 01       		.byte	0x1
 17352 0db5 C90D0000 		.4byte	0xdc9
 17353 0db9 18       		.uleb128 0x18
 17354 0dba F20C0000 		.4byte	.LASF191
 17355 0dbe 01       		.byte	0x1
 17356 0dbf 8001     		.2byte	0x180
 17357 0dc1 6D0D0000 		.4byte	0xd6d
 17358 0dc5 02       		.byte	0x2
 17359 0dc6 91       		.byte	0x91
 17360 0dc7 74       		.sleb128 -12
 17361 0dc8 00       		.byte	0
 17362 0dc9 16       		.uleb128 0x16
 17363 0dca 01       		.byte	0x1
 17364 0dcb 7B000000 		.4byte	.LASF194
 17365 0dcf 01       		.byte	0x1
 17366 0dd0 9501     		.2byte	0x195
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 452


 17367 0dd2 01       		.byte	0x1
 17368 0dd3 00000000 		.4byte	.LFB63
 17369 0dd7 66000000 		.4byte	.LFE63
 17370 0ddb 70010000 		.4byte	.LLST7
 17371 0ddf 01       		.byte	0x1
 17372 0de0 16       		.uleb128 0x16
 17373 0de1 01       		.byte	0x1
 17374 0de2 B2070000 		.4byte	.LASF195
 17375 0de6 01       		.byte	0x1
 17376 0de7 9B01     		.2byte	0x19b
 17377 0de9 01       		.byte	0x1
 17378 0dea 00000000 		.4byte	.LFB64
 17379 0dee 66000000 		.4byte	.LFE64
 17380 0df2 A8010000 		.4byte	.LLST8
 17381 0df6 01       		.byte	0x1
 17382 0df7 17       		.uleb128 0x17
 17383 0df8 01       		.byte	0x1
 17384 0df9 A1000000 		.4byte	.LASF196
 17385 0dfd 01       		.byte	0x1
 17386 0dfe A101     		.2byte	0x1a1
 17387 0e00 01       		.byte	0x1
 17388 0e01 00000000 		.4byte	.LFB65
 17389 0e05 20010000 		.4byte	.LFE65
 17390 0e09 E0010000 		.4byte	.LLST9
 17391 0e0d 01       		.byte	0x1
 17392 0e0e 220E0000 		.4byte	0xe22
 17393 0e12 18       		.uleb128 0x18
 17394 0e13 F20C0000 		.4byte	.LASF191
 17395 0e17 01       		.byte	0x1
 17396 0e18 A101     		.2byte	0x1a1
 17397 0e1a 6D0D0000 		.4byte	0xd6d
 17398 0e1e 02       		.byte	0x2
 17399 0e1f 91       		.byte	0x91
 17400 0e20 74       		.sleb128 -12
 17401 0e21 00       		.byte	0
 17402 0e22 17       		.uleb128 0x17
 17403 0e23 01       		.byte	0x1
 17404 0e24 D7060000 		.4byte	.LASF197
 17405 0e28 01       		.byte	0x1
 17406 0e29 D301     		.2byte	0x1d3
 17407 0e2b 01       		.byte	0x1
 17408 0e2c 00000000 		.4byte	.LFB66
 17409 0e30 64000000 		.4byte	.LFE66
 17410 0e34 18020000 		.4byte	.LLST10
 17411 0e38 01       		.byte	0x1
 17412 0e39 4D0E0000 		.4byte	0xe4d
 17413 0e3d 18       		.uleb128 0x18
 17414 0e3e F20C0000 		.4byte	.LASF191
 17415 0e42 01       		.byte	0x1
 17416 0e43 D301     		.2byte	0x1d3
 17417 0e45 6D0D0000 		.4byte	0xd6d
 17418 0e49 02       		.byte	0x2
 17419 0e4a 91       		.byte	0x91
 17420 0e4b 74       		.sleb128 -12
 17421 0e4c 00       		.byte	0
 17422 0e4d 19       		.uleb128 0x19
 17423 0e4e 01       		.byte	0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 453


 17424 0e4f 210B0000 		.4byte	.LASF202
 17425 0e53 01       		.byte	0x1
 17426 0e54 ED01     		.2byte	0x1ed
 17427 0e56 01       		.byte	0x1
 17428 0e57 7A000000 		.4byte	0x7a
 17429 0e5b 00000000 		.4byte	.LFB67
 17430 0e5f FA000000 		.4byte	.LFE67
 17431 0e63 50020000 		.4byte	.LLST11
 17432 0e67 01       		.byte	0x1
 17433 0e68 D10E0000 		.4byte	0xed1
 17434 0e6c 18       		.uleb128 0x18
 17435 0e6d 65070000 		.4byte	.LASF198
 17436 0e71 01       		.byte	0x1
 17437 0e72 ED01     		.2byte	0x1ed
 17438 0e74 7A000000 		.4byte	0x7a
 17439 0e78 02       		.byte	0x2
 17440 0e79 91       		.byte	0x91
 17441 0e7a 67       		.sleb128 -25
 17442 0e7b 18       		.uleb128 0x18
 17443 0e7c F3070000 		.4byte	.LASF199
 17444 0e80 01       		.byte	0x1
 17445 0e81 ED01     		.2byte	0x1ed
 17446 0e83 7A000000 		.4byte	0x7a
 17447 0e87 02       		.byte	0x2
 17448 0e88 91       		.byte	0x91
 17449 0e89 66       		.sleb128 -26
 17450 0e8a 1A       		.uleb128 0x1a
 17451 0e8b 0B060000 		.4byte	.LASF200
 17452 0e8f 01       		.byte	0x1
 17453 0e90 EF01     		.2byte	0x1ef
 17454 0e92 7A000000 		.4byte	0x7a
 17455 0e96 02       		.byte	0x2
 17456 0e97 91       		.byte	0x91
 17457 0e98 77       		.sleb128 -9
 17458 0e99 1A       		.uleb128 0x1a
 17459 0e9a 20070000 		.4byte	.LASF145
 17460 0e9e 01       		.byte	0x1
 17461 0e9f F001     		.2byte	0x1f0
 17462 0ea1 85000000 		.4byte	0x85
 17463 0ea5 02       		.byte	0x2
 17464 0ea6 91       		.byte	0x91
 17465 0ea7 74       		.sleb128 -12
 17466 0ea8 1A       		.uleb128 0x1a
 17467 0ea9 11060000 		.4byte	.LASF201
 17468 0ead 01       		.byte	0x1
 17469 0eae F101     		.2byte	0x1f1
 17470 0eb0 D5000000 		.4byte	0xd5
 17471 0eb4 02       		.byte	0x2
 17472 0eb5 91       		.byte	0x91
 17473 0eb6 73       		.sleb128 -13
 17474 0eb7 1B       		.uleb128 0x1b
 17475 0eb8 36000000 		.4byte	.LBB2
 17476 0ebc 60000000 		.4byte	.LBE2
 17477 0ec0 1C       		.uleb128 0x1c
 17478 0ec1 5F5F7800 		.ascii	"__x\000"
 17479 0ec5 01       		.byte	0x1
 17480 0ec6 FC01     		.2byte	0x1fc
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 454


 17481 0ec8 6C000000 		.4byte	0x6c
 17482 0ecc 02       		.byte	0x2
 17483 0ecd 91       		.byte	0x91
 17484 0ece 6C       		.sleb128 -20
 17485 0ecf 00       		.byte	0
 17486 0ed0 00       		.byte	0
 17487 0ed1 19       		.uleb128 0x19
 17488 0ed2 01       		.byte	0x1
 17489 0ed3 A2080000 		.4byte	.LASF203
 17490 0ed7 01       		.byte	0x1
 17491 0ed8 2D02     		.2byte	0x22d
 17492 0eda 01       		.byte	0x1
 17493 0edb 7A000000 		.4byte	0x7a
 17494 0edf 00000000 		.4byte	.LFB68
 17495 0ee3 04030000 		.4byte	.LFE68
 17496 0ee7 88020000 		.4byte	.LLST12
 17497 0eeb 01       		.byte	0x1
 17498 0eec 4A0F0000 		.4byte	0xf4a
 17499 0ef0 18       		.uleb128 0x18
 17500 0ef1 4F070000 		.4byte	.LASF204
 17501 0ef5 01       		.byte	0x1
 17502 0ef6 2D02     		.2byte	0x22d
 17503 0ef8 7A000000 		.4byte	0x7a
 17504 0efc 03       		.byte	0x3
 17505 0efd 91       		.byte	0x91
 17506 0efe BF7F     		.sleb128 -65
 17507 0f00 1A       		.uleb128 0x1a
 17508 0f01 560A0000 		.4byte	.LASF205
 17509 0f05 01       		.byte	0x1
 17510 0f06 2F02     		.2byte	0x22f
 17511 0f08 7A000000 		.4byte	0x7a
 17512 0f0c 02       		.byte	0x2
 17513 0f0d 91       		.byte	0x91
 17514 0f0e 6F       		.sleb128 -17
 17515 0f0f 1A       		.uleb128 0x1a
 17516 0f10 D5070000 		.4byte	.LASF206
 17517 0f14 01       		.byte	0x1
 17518 0f15 3002     		.2byte	0x230
 17519 0f17 7A000000 		.4byte	0x7a
 17520 0f1b 02       		.byte	0x2
 17521 0f1c 91       		.byte	0x91
 17522 0f1d 77       		.sleb128 -9
 17523 0f1e 1A       		.uleb128 0x1a
 17524 0f1f EA0D0000 		.4byte	.LASF207
 17525 0f23 01       		.byte	0x1
 17526 0f24 3002     		.2byte	0x230
 17527 0f26 7A000000 		.4byte	0x7a
 17528 0f2a 02       		.byte	0x2
 17529 0f2b 91       		.byte	0x91
 17530 0f2c 76       		.sleb128 -10
 17531 0f2d 1A       		.uleb128 0x1a
 17532 0f2e DF000000 		.4byte	.LASF208
 17533 0f32 01       		.byte	0x1
 17534 0f33 3102     		.2byte	0x231
 17535 0f35 4A0F0000 		.4byte	0xf4a
 17536 0f39 02       		.byte	0x2
 17537 0f3a 91       		.byte	0x91
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 455


 17538 0f3b 44       		.sleb128 -60
 17539 0f3c 1C       		.uleb128 0x1c
 17540 0f3d 7000     		.ascii	"p\000"
 17541 0f3f 01       		.byte	0x1
 17542 0f40 3202     		.2byte	0x232
 17543 0f42 E3000000 		.4byte	0xe3
 17544 0f46 02       		.byte	0x2
 17545 0f47 91       		.byte	0x91
 17546 0f48 70       		.sleb128 -16
 17547 0f49 00       		.byte	0
 17548 0f4a 09       		.uleb128 0x9
 17549 0f4b D5000000 		.4byte	0xd5
 17550 0f4f 5A0F0000 		.4byte	0xf5a
 17551 0f53 0A       		.uleb128 0xa
 17552 0f54 DC000000 		.4byte	0xdc
 17553 0f58 27       		.byte	0x27
 17554 0f59 00       		.byte	0
 17555 0f5a 1D       		.uleb128 0x1d
 17556 0f5b 01       		.byte	0x1
 17557 0f5c D8000000 		.4byte	.LASF209
 17558 0f60 01       		.byte	0x1
 17559 0f61 B402     		.2byte	0x2b4
 17560 0f63 7A000000 		.4byte	0x7a
 17561 0f67 00000000 		.4byte	.LFB69
 17562 0f6b 686F0000 		.4byte	.LFE69
 17563 0f6f C2020000 		.4byte	.LLST13
 17564 0f73 01       		.byte	0x1
 17565 0f74 2D130000 		.4byte	0x132d
 17566 0f78 1A       		.uleb128 0x1a
 17567 0f79 5D050000 		.4byte	.LASF210
 17568 0f7d 01       		.byte	0x1
 17569 0f7e B602     		.2byte	0x2b6
 17570 0f80 7A000000 		.4byte	0x7a
 17571 0f84 03       		.byte	0x3
 17572 0f85 91       		.byte	0x91
 17573 0f86 9B7F     		.sleb128 -101
 17574 0f88 1A       		.uleb128 0x1a
 17575 0f89 08090000 		.4byte	.LASF26
 17576 0f8d 01       		.byte	0x1
 17577 0f8e B802     		.2byte	0x2b8
 17578 0f90 7A000000 		.4byte	0x7a
 17579 0f94 03       		.byte	0x3
 17580 0f95 91       		.byte	0x91
 17581 0f96 F37E     		.sleb128 -141
 17582 0f98 1A       		.uleb128 0x1a
 17583 0f99 62060000 		.4byte	.LASF211
 17584 0f9d 01       		.byte	0x1
 17585 0f9e B902     		.2byte	0x2b9
 17586 0fa0 7A000000 		.4byte	0x7a
 17587 0fa4 03       		.byte	0x3
 17588 0fa5 91       		.byte	0x91
 17589 0fa6 9A7F     		.sleb128 -102
 17590 0fa8 1A       		.uleb128 0x1a
 17591 0fa9 0E0B0000 		.4byte	.LASF27
 17592 0fad 01       		.byte	0x1
 17593 0fae BA02     		.2byte	0x2ba
 17594 0fb0 BC000000 		.4byte	0xbc
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 456


 17595 0fb4 03       		.byte	0x3
 17596 0fb5 91       		.byte	0x91
 17597 0fb6 B87F     		.sleb128 -72
 17598 0fb8 1A       		.uleb128 0x1a
 17599 0fb9 22030000 		.4byte	.LASF79
 17600 0fbd 01       		.byte	0x1
 17601 0fbe BB02     		.2byte	0x2bb
 17602 0fc0 BC000000 		.4byte	0xbc
 17603 0fc4 03       		.byte	0x3
 17604 0fc5 91       		.byte	0x91
 17605 0fc6 B47F     		.sleb128 -76
 17606 0fc8 1A       		.uleb128 0x1a
 17607 0fc9 14000000 		.4byte	.LASF96
 17608 0fcd 01       		.byte	0x1
 17609 0fce BC02     		.2byte	0x2bc
 17610 0fd0 7A000000 		.4byte	0x7a
 17611 0fd4 03       		.byte	0x3
 17612 0fd5 91       		.byte	0x91
 17613 0fd6 B37F     		.sleb128 -77
 17614 0fd8 1A       		.uleb128 0x1a
 17615 0fd9 2E080000 		.4byte	.LASF212
 17616 0fdd 01       		.byte	0x1
 17617 0fde BD02     		.2byte	0x2bd
 17618 0fe0 7A000000 		.4byte	0x7a
 17619 0fe4 03       		.byte	0x3
 17620 0fe5 91       		.byte	0x91
 17621 0fe6 B27F     		.sleb128 -78
 17622 0fe8 1A       		.uleb128 0x1a
 17623 0fe9 C3070000 		.4byte	.LASF213
 17624 0fed 01       		.byte	0x1
 17625 0fee BE02     		.2byte	0x2be
 17626 0ff0 7A000000 		.4byte	0x7a
 17627 0ff4 03       		.byte	0x3
 17628 0ff5 91       		.byte	0x91
 17629 0ff6 B17F     		.sleb128 -79
 17630 0ff8 1A       		.uleb128 0x1a
 17631 0ff9 D9080000 		.4byte	.LASF214
 17632 0ffd 01       		.byte	0x1
 17633 0ffe BF02     		.2byte	0x2bf
 17634 1000 A6000000 		.4byte	0xa6
 17635 1004 03       		.byte	0x3
 17636 1005 91       		.byte	0x91
 17637 1006 AE7F     		.sleb128 -82
 17638 1008 1C       		.uleb128 0x1c
 17639 1009 4B7000   		.ascii	"Kp\000"
 17640 100c 01       		.byte	0x1
 17641 100d C102     		.2byte	0x2c1
 17642 100f BC000000 		.4byte	0xbc
 17643 1013 03       		.byte	0x3
 17644 1014 91       		.byte	0x91
 17645 1015 947F     		.sleb128 -108
 17646 1017 1C       		.uleb128 0x1c
 17647 1018 4B6400   		.ascii	"Kd\000"
 17648 101b 01       		.byte	0x1
 17649 101c C202     		.2byte	0x2c2
 17650 101e BC000000 		.4byte	0xbc
 17651 1022 03       		.byte	0x3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 457


 17652 1023 91       		.byte	0x91
 17653 1024 907F     		.sleb128 -112
 17654 1026 1C       		.uleb128 0x1c
 17655 1027 4B6900   		.ascii	"Ki\000"
 17656 102a 01       		.byte	0x1
 17657 102b C302     		.2byte	0x2c3
 17658 102d BC000000 		.4byte	0xbc
 17659 1031 03       		.byte	0x3
 17660 1032 91       		.byte	0x91
 17661 1033 8C7F     		.sleb128 -116
 17662 1035 1C       		.uleb128 0x1c
 17663 1036 4B736900 		.ascii	"Ksi\000"
 17664 103a 01       		.byte	0x1
 17665 103b C402     		.2byte	0x2c4
 17666 103d BC000000 		.4byte	0xbc
 17667 1041 03       		.byte	0x3
 17668 1042 91       		.byte	0x91
 17669 1043 887F     		.sleb128 -120
 17670 1045 1A       		.uleb128 0x1a
 17671 1046 BB0A0000 		.4byte	.LASF101
 17672 104a 01       		.byte	0x1
 17673 104b C502     		.2byte	0x2c5
 17674 104d 7A000000 		.4byte	0x7a
 17675 1051 03       		.byte	0x3
 17676 1052 91       		.byte	0x91
 17677 1053 F47E     		.sleb128 -140
 17678 1055 1A       		.uleb128 0x1a
 17679 1056 E8060000 		.4byte	.LASF61
 17680 105a 01       		.byte	0x1
 17681 105b C602     		.2byte	0x2c6
 17682 105d 7A000000 		.4byte	0x7a
 17683 1061 03       		.byte	0x3
 17684 1062 91       		.byte	0x91
 17685 1063 F57E     		.sleb128 -139
 17686 1065 1A       		.uleb128 0x1a
 17687 1066 8A0B0000 		.4byte	.LASF215
 17688 106a 01       		.byte	0x1
 17689 106b C702     		.2byte	0x2c7
 17690 106d 85000000 		.4byte	0x85
 17691 1071 03       		.byte	0x3
 17692 1072 91       		.byte	0x91
 17693 1073 F67E     		.sleb128 -138
 17694 1075 1A       		.uleb128 0x1a
 17695 1076 600D0000 		.4byte	.LASF216
 17696 107a 01       		.byte	0x1
 17697 107b C802     		.2byte	0x2c8
 17698 107d BC000000 		.4byte	0xbc
 17699 1081 03       		.byte	0x3
 17700 1082 91       		.byte	0x91
 17701 1083 F87E     		.sleb128 -136
 17702 1085 1A       		.uleb128 0x1a
 17703 1086 B1000000 		.4byte	.LASF98
 17704 108a 01       		.byte	0x1
 17705 108b C902     		.2byte	0x2c9
 17706 108d BC000000 		.4byte	0xbc
 17707 1091 03       		.byte	0x3
 17708 1092 91       		.byte	0x91
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 458


 17709 1093 807F     		.sleb128 -128
 17710 1095 1A       		.uleb128 0x1a
 17711 1096 01080000 		.4byte	.LASF217
 17712 109a 01       		.byte	0x1
 17713 109b CA02     		.2byte	0x2ca
 17714 109d BC000000 		.4byte	0xbc
 17715 10a1 03       		.byte	0x3
 17716 10a2 91       		.byte	0x91
 17717 10a3 FC7E     		.sleb128 -132
 17718 10a5 1A       		.uleb128 0x1a
 17719 10a6 F90A0000 		.4byte	.LASF100
 17720 10aa 01       		.byte	0x1
 17721 10ab CB02     		.2byte	0x2cb
 17722 10ad 7A000000 		.4byte	0x7a
 17723 10b1 03       		.byte	0x3
 17724 10b2 91       		.byte	0x91
 17725 10b3 877F     		.sleb128 -121
 17726 10b5 1A       		.uleb128 0x1a
 17727 10b6 350D0000 		.4byte	.LASF92
 17728 10ba 01       		.byte	0x1
 17729 10bb CC02     		.2byte	0x2cc
 17730 10bd 7A000000 		.4byte	0x7a
 17731 10c1 03       		.byte	0x3
 17732 10c2 91       		.byte	0x91
 17733 10c3 AD7F     		.sleb128 -83
 17734 10c5 1A       		.uleb128 0x1a
 17735 10c6 AC060000 		.4byte	.LASF91
 17736 10ca 01       		.byte	0x1
 17737 10cb CD02     		.2byte	0x2cd
 17738 10cd 7A000000 		.4byte	0x7a
 17739 10d1 03       		.byte	0x3
 17740 10d2 91       		.byte	0x91
 17741 10d3 AC7F     		.sleb128 -84
 17742 10d5 1A       		.uleb128 0x1a
 17743 10d6 86090000 		.4byte	.LASF218
 17744 10da 01       		.byte	0x1
 17745 10db CE02     		.2byte	0x2ce
 17746 10dd 7A000000 		.4byte	0x7a
 17747 10e1 03       		.byte	0x3
 17748 10e2 91       		.byte	0x91
 17749 10e3 AB7F     		.sleb128 -85
 17750 10e5 1A       		.uleb128 0x1a
 17751 10e6 220C0000 		.4byte	.LASF219
 17752 10ea 01       		.byte	0x1
 17753 10eb CF02     		.2byte	0x2cf
 17754 10ed 7A000000 		.4byte	0x7a
 17755 10f1 03       		.byte	0x3
 17756 10f2 91       		.byte	0x91
 17757 10f3 AA7F     		.sleb128 -86
 17758 10f5 1A       		.uleb128 0x1a
 17759 10f6 0B0C0000 		.4byte	.LASF220
 17760 10fa 01       		.byte	0x1
 17761 10fb D002     		.2byte	0x2d0
 17762 10fd 7A000000 		.4byte	0x7a
 17763 1101 03       		.byte	0x3
 17764 1102 91       		.byte	0x91
 17765 1103 A97F     		.sleb128 -87
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 459


 17766 1105 1A       		.uleb128 0x1a
 17767 1106 B9060000 		.4byte	.LASF221
 17768 110a 01       		.byte	0x1
 17769 110b D102     		.2byte	0x2d1
 17770 110d 85000000 		.4byte	0x85
 17771 1111 03       		.byte	0x3
 17772 1112 91       		.byte	0x91
 17773 1113 A67F     		.sleb128 -90
 17774 1115 1A       		.uleb128 0x1a
 17775 1116 96030000 		.4byte	.LASF222
 17776 111a 01       		.byte	0x1
 17777 111b D202     		.2byte	0x2d2
 17778 111d 7A000000 		.4byte	0x7a
 17779 1121 03       		.byte	0x3
 17780 1122 91       		.byte	0x91
 17781 1123 A57F     		.sleb128 -91
 17782 1125 1A       		.uleb128 0x1a
 17783 1126 4C010000 		.4byte	.LASF223
 17784 112a 01       		.byte	0x1
 17785 112b D302     		.2byte	0x2d3
 17786 112d BC000000 		.4byte	0xbc
 17787 1131 02       		.byte	0x2
 17788 1132 91       		.byte	0x91
 17789 1133 54       		.sleb128 -44
 17790 1134 1A       		.uleb128 0x1a
 17791 1135 EB000000 		.4byte	.LASF224
 17792 1139 01       		.byte	0x1
 17793 113a D402     		.2byte	0x2d4
 17794 113c BC000000 		.4byte	0xbc
 17795 1140 03       		.byte	0x3
 17796 1141 91       		.byte	0x91
 17797 1142 A07F     		.sleb128 -96
 17798 1144 1A       		.uleb128 0x1a
 17799 1145 02020000 		.4byte	.LASF225
 17800 1149 01       		.byte	0x1
 17801 114a D502     		.2byte	0x2d5
 17802 114c BC000000 		.4byte	0xbc
 17803 1150 03       		.byte	0x3
 17804 1151 91       		.byte	0x91
 17805 1152 9C7F     		.sleb128 -100
 17806 1154 1A       		.uleb128 0x1a
 17807 1155 1B0B0000 		.4byte	.LASF226
 17808 1159 01       		.byte	0x1
 17809 115a D802     		.2byte	0x2d8
 17810 115c 7A000000 		.4byte	0x7a
 17811 1160 03       		.byte	0x3
 17812 1161 91       		.byte	0x91
 17813 1162 997F     		.sleb128 -103
 17814 1164 1C       		.uleb128 0x1c
 17815 1165 69647800 		.ascii	"idx\000"
 17816 1169 01       		.byte	0x1
 17817 116a D902     		.2byte	0x2d9
 17818 116c 7A000000 		.4byte	0x7a
 17819 1170 02       		.byte	0x2
 17820 1171 91       		.byte	0x91
 17821 1172 53       		.sleb128 -45
 17822 1173 1A       		.uleb128 0x1a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 460


 17823 1174 70050000 		.4byte	.LASF227
 17824 1178 01       		.byte	0x1
 17825 1179 DA02     		.2byte	0x2da
 17826 117b 7A000000 		.4byte	0x7a
 17827 117f 02       		.byte	0x2
 17828 1180 91       		.byte	0x91
 17829 1181 52       		.sleb128 -46
 17830 1182 1E       		.uleb128 0x1e
 17831 1183 CE060000 		.4byte	.LASF228
 17832 1187 01       		.byte	0x1
 17833 1188 9512     		.2byte	0x1295
 17834 118a 506F0000 		.4byte	.L131
 17835 118e 1E       		.uleb128 0x1e
 17836 118f 7C0D0000 		.4byte	.LASF229
 17837 1193 01       		.byte	0x1
 17838 1194 E308     		.2byte	0x8e3
 17839 1196 F2300000 		.4byte	.L312
 17840 119a 1E       		.uleb128 0x1e
 17841 119b 2B0D0000 		.4byte	.LASF230
 17842 119f 01       		.byte	0x1
 17843 11a0 480A     		.2byte	0xa48
 17844 11a2 3E380000 		.4byte	.L358
 17845 11a6 1E       		.uleb128 0x1e
 17846 11a7 60030000 		.4byte	.LASF231
 17847 11ab 01       		.byte	0x1
 17848 11ac 9E0A     		.2byte	0xa9e
 17849 11ae 6E3A0000 		.4byte	.L369
 17850 11b2 1F       		.uleb128 0x1f
 17851 11b3 E4050000 		.4byte	.LBB3
 17852 11b7 5E070000 		.4byte	.LBE3
 17853 11bb CF110000 		.4byte	0x11cf
 17854 11bf 1A       		.uleb128 0x1a
 17855 11c0 7D0C0000 		.4byte	.LASF232
 17856 11c4 01       		.byte	0x1
 17857 11c5 1004     		.2byte	0x410
 17858 11c7 BC000000 		.4byte	0xbc
 17859 11cb 02       		.byte	0x2
 17860 11cc 91       		.byte	0x91
 17861 11cd 4C       		.sleb128 -52
 17862 11ce 00       		.byte	0
 17863 11cf 1F       		.uleb128 0x1f
 17864 11d0 94070000 		.4byte	.LBB4
 17865 11d4 24090000 		.4byte	.LBE4
 17866 11d8 EC110000 		.4byte	0x11ec
 17867 11dc 1A       		.uleb128 0x1a
 17868 11dd 93080000 		.4byte	.LASF233
 17869 11e1 01       		.byte	0x1
 17870 11e2 3D04     		.2byte	0x43d
 17871 11e4 BC000000 		.4byte	0xbc
 17872 11e8 02       		.byte	0x2
 17873 11e9 91       		.byte	0x91
 17874 11ea 48       		.sleb128 -56
 17875 11eb 00       		.byte	0
 17876 11ec 1F       		.uleb128 0x1f
 17877 11ed 5A090000 		.4byte	.LBB5
 17878 11f1 CC0B0000 		.4byte	.LBE5
 17879 11f5 18120000 		.4byte	0x1218
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 461


 17880 11f9 1A       		.uleb128 0x1a
 17881 11fa 7D0C0000 		.4byte	.LASF232
 17882 11fe 01       		.byte	0x1
 17883 11ff 6A04     		.2byte	0x46a
 17884 1201 BC000000 		.4byte	0xbc
 17885 1205 02       		.byte	0x2
 17886 1206 91       		.byte	0x91
 17887 1207 44       		.sleb128 -60
 17888 1208 1A       		.uleb128 0x1a
 17889 1209 93080000 		.4byte	.LASF233
 17890 120d 01       		.byte	0x1
 17891 120e 6B04     		.2byte	0x46b
 17892 1210 BC000000 		.4byte	0xbc
 17893 1214 02       		.byte	0x2
 17894 1215 91       		.byte	0x91
 17895 1216 40       		.sleb128 -64
 17896 1217 00       		.byte	0
 17897 1218 1F       		.uleb128 0x1f
 17898 1219 58260000 		.4byte	.LBB6
 17899 121d 34270000 		.4byte	.LBE6
 17900 1221 86120000 		.4byte	0x1286
 17901 1225 1A       		.uleb128 0x1a
 17902 1226 74010000 		.4byte	.LASF234
 17903 122a 01       		.byte	0x1
 17904 122b 5C07     		.2byte	0x75c
 17905 122d BC000000 		.4byte	0xbc
 17906 1231 03       		.byte	0x3
 17907 1232 91       		.byte	0x91
 17908 1233 D47E     		.sleb128 -172
 17909 1235 1A       		.uleb128 0x1a
 17910 1236 9F050000 		.4byte	.LASF235
 17911 123a 01       		.byte	0x1
 17912 123b 5D07     		.2byte	0x75d
 17913 123d BC000000 		.4byte	0xbc
 17914 1241 03       		.byte	0x3
 17915 1242 91       		.byte	0x91
 17916 1243 D07E     		.sleb128 -176
 17917 1245 1A       		.uleb128 0x1a
 17918 1246 6B0A0000 		.4byte	.LASF236
 17919 124a 01       		.byte	0x1
 17920 124b 5E07     		.2byte	0x75e
 17921 124d BC000000 		.4byte	0xbc
 17922 1251 03       		.byte	0x3
 17923 1252 91       		.byte	0x91
 17924 1253 CC7E     		.sleb128 -180
 17925 1255 1A       		.uleb128 0x1a
 17926 1256 130B0000 		.4byte	.LASF237
 17927 125a 01       		.byte	0x1
 17928 125b 5F07     		.2byte	0x75f
 17929 125d BC000000 		.4byte	0xbc
 17930 1261 03       		.byte	0x3
 17931 1262 91       		.byte	0x91
 17932 1263 C87E     		.sleb128 -184
 17933 1265 1A       		.uleb128 0x1a
 17934 1266 24080000 		.4byte	.LASF238
 17935 126a 01       		.byte	0x1
 17936 126b 6007     		.2byte	0x760
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 462


 17937 126d BC000000 		.4byte	0xbc
 17938 1271 03       		.byte	0x3
 17939 1272 91       		.byte	0x91
 17940 1273 C47E     		.sleb128 -188
 17941 1275 1A       		.uleb128 0x1a
 17942 1276 D30C0000 		.4byte	.LASF239
 17943 127a 01       		.byte	0x1
 17944 127b 6107     		.2byte	0x761
 17945 127d BC000000 		.4byte	0xbc
 17946 1281 03       		.byte	0x3
 17947 1282 91       		.byte	0x91
 17948 1283 C07E     		.sleb128 -192
 17949 1285 00       		.byte	0
 17950 1286 1F       		.uleb128 0x1f
 17951 1287 B4270000 		.4byte	.LBB7
 17952 128b 90280000 		.4byte	.LBE7
 17953 128f F4120000 		.4byte	0x12f4
 17954 1293 1A       		.uleb128 0x1a
 17955 1294 74010000 		.4byte	.LASF234
 17956 1298 01       		.byte	0x1
 17957 1299 8407     		.2byte	0x784
 17958 129b BC000000 		.4byte	0xbc
 17959 129f 03       		.byte	0x3
 17960 12a0 91       		.byte	0x91
 17961 12a1 EC7E     		.sleb128 -148
 17962 12a3 1A       		.uleb128 0x1a
 17963 12a4 9F050000 		.4byte	.LASF235
 17964 12a8 01       		.byte	0x1
 17965 12a9 8507     		.2byte	0x785
 17966 12ab BC000000 		.4byte	0xbc
 17967 12af 03       		.byte	0x3
 17968 12b0 91       		.byte	0x91
 17969 12b1 E87E     		.sleb128 -152
 17970 12b3 1A       		.uleb128 0x1a
 17971 12b4 6B0A0000 		.4byte	.LASF236
 17972 12b8 01       		.byte	0x1
 17973 12b9 8607     		.2byte	0x786
 17974 12bb BC000000 		.4byte	0xbc
 17975 12bf 03       		.byte	0x3
 17976 12c0 91       		.byte	0x91
 17977 12c1 E47E     		.sleb128 -156
 17978 12c3 1A       		.uleb128 0x1a
 17979 12c4 130B0000 		.4byte	.LASF237
 17980 12c8 01       		.byte	0x1
 17981 12c9 8707     		.2byte	0x787
 17982 12cb BC000000 		.4byte	0xbc
 17983 12cf 03       		.byte	0x3
 17984 12d0 91       		.byte	0x91
 17985 12d1 E07E     		.sleb128 -160
 17986 12d3 1A       		.uleb128 0x1a
 17987 12d4 24080000 		.4byte	.LASF238
 17988 12d8 01       		.byte	0x1
 17989 12d9 8807     		.2byte	0x788
 17990 12db BC000000 		.4byte	0xbc
 17991 12df 03       		.byte	0x3
 17992 12e0 91       		.byte	0x91
 17993 12e1 DC7E     		.sleb128 -164
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 463


 17994 12e3 1A       		.uleb128 0x1a
 17995 12e4 D30C0000 		.4byte	.LASF239
 17996 12e8 01       		.byte	0x1
 17997 12e9 8907     		.2byte	0x789
 17998 12eb BC000000 		.4byte	0xbc
 17999 12ef 03       		.byte	0x3
 18000 12f0 91       		.byte	0x91
 18001 12f1 D87E     		.sleb128 -168
 18002 12f3 00       		.byte	0
 18003 12f4 1F       		.uleb128 0x1f
 18004 12f5 F0310000 		.4byte	.LBB8
 18005 12f9 7A320000 		.4byte	.LBE8
 18006 12fd 12130000 		.4byte	0x1312
 18007 1301 1A       		.uleb128 0x1a
 18008 1302 9F030000 		.4byte	.LASF240
 18009 1306 01       		.byte	0x1
 18010 1307 3609     		.2byte	0x936
 18011 1309 9B000000 		.4byte	0x9b
 18012 130d 03       		.byte	0x3
 18013 130e 91       		.byte	0x91
 18014 130f BF7F     		.sleb128 -65
 18015 1311 00       		.byte	0
 18016 1312 1B       		.uleb128 0x1b
 18017 1313 56470000 		.4byte	.LBB9
 18018 1317 12480000 		.4byte	.LBE9
 18019 131b 1A       		.uleb128 0x1a
 18020 131c EF0D0000 		.4byte	.LASF241
 18021 1320 01       		.byte	0x1
 18022 1321 0C0C     		.2byte	0xc0c
 18023 1323 7A000000 		.4byte	0x7a
 18024 1327 03       		.byte	0x3
 18025 1328 91       		.byte	0x91
 18026 1329 BE7F     		.sleb128 -66
 18027 132b 00       		.byte	0
 18028 132c 00       		.byte	0
 18029 132d 20       		.uleb128 0x20
 18030 132e 01       		.byte	0x1
 18031 132f 7E010000 		.4byte	.LASF244
 18032 1333 01       		.byte	0x1
 18033 1334 9C12     		.2byte	0x129c
 18034 1336 01       		.byte	0x1
 18035 1337 7A000000 		.4byte	0x7a
 18036 133b 00000000 		.4byte	.LFB70
 18037 133f 1C000000 		.4byte	.LFE70
 18038 1343 FC020000 		.4byte	.LLST14
 18039 1347 01       		.byte	0x1
 18040 1348 19       		.uleb128 0x19
 18041 1349 01       		.byte	0x1
 18042 134a C6050000 		.4byte	.LASF242
 18043 134e 01       		.byte	0x1
 18044 134f AC12     		.2byte	0x12ac
 18045 1351 01       		.byte	0x1
 18046 1352 7A000000 		.4byte	0x7a
 18047 1356 00000000 		.4byte	.LFB71
 18048 135a 68000000 		.4byte	.LFE71
 18049 135e 28030000 		.4byte	.LLST15
 18050 1362 01       		.byte	0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 464


 18051 1363 9F130000 		.4byte	0x139f
 18052 1367 18       		.uleb128 0x18
 18053 1368 65070000 		.4byte	.LASF198
 18054 136c 01       		.byte	0x1
 18055 136d AC12     		.2byte	0x12ac
 18056 136f 7A000000 		.4byte	0x7a
 18057 1373 02       		.byte	0x2
 18058 1374 91       		.byte	0x91
 18059 1375 6F       		.sleb128 -17
 18060 1376 1A       		.uleb128 0x1a
 18061 1377 11060000 		.4byte	.LASF201
 18062 137b 01       		.byte	0x1
 18063 137c AE12     		.2byte	0x12ae
 18064 137e D5000000 		.4byte	0xd5
 18065 1382 02       		.byte	0x2
 18066 1383 91       		.byte	0x91
 18067 1384 77       		.sleb128 -9
 18068 1385 1B       		.uleb128 0x1b
 18069 1386 26000000 		.4byte	.LBB10
 18070 138a 50000000 		.4byte	.LBE10
 18071 138e 1C       		.uleb128 0x1c
 18072 138f 5F5F7800 		.ascii	"__x\000"
 18073 1393 01       		.byte	0x1
 18074 1394 C612     		.2byte	0x12c6
 18075 1396 6C000000 		.4byte	0x6c
 18076 139a 02       		.byte	0x2
 18077 139b 91       		.byte	0x91
 18078 139c 70       		.sleb128 -16
 18079 139d 00       		.byte	0
 18080 139e 00       		.byte	0
 18081 139f 21       		.uleb128 0x21
 18082 13a0 01       		.byte	0x1
 18083 13a1 BC040000 		.4byte	.LASF243
 18084 13a5 01       		.byte	0x1
 18085 13a6 D212     		.2byte	0x12d2
 18086 13a8 01       		.byte	0x1
 18087 13a9 00000000 		.4byte	.LFB72
 18088 13ad 3A000000 		.4byte	.LFE72
 18089 13b1 60030000 		.4byte	.LLST16
 18090 13b5 01       		.byte	0x1
 18091 13b6 D9130000 		.4byte	0x13d9
 18092 13ba 22       		.uleb128 0x22
 18093 13bb 73747200 		.ascii	"str\000"
 18094 13bf 01       		.byte	0x1
 18095 13c0 D212     		.2byte	0x12d2
 18096 13c2 E3000000 		.4byte	0xe3
 18097 13c6 02       		.byte	0x2
 18098 13c7 91       		.byte	0x91
 18099 13c8 6C       		.sleb128 -20
 18100 13c9 1C       		.uleb128 0x1c
 18101 13ca 69647800 		.ascii	"idx\000"
 18102 13ce 01       		.byte	0x1
 18103 13cf D412     		.2byte	0x12d4
 18104 13d1 7A000000 		.4byte	0x7a
 18105 13d5 02       		.byte	0x2
 18106 13d6 91       		.byte	0x91
 18107 13d7 77       		.sleb128 -9
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 465


 18108 13d8 00       		.byte	0
 18109 13d9 23       		.uleb128 0x23
 18110 13da 01       		.byte	0x1
 18111 13db 3F0B0000 		.4byte	.LASF245
 18112 13df 01       		.byte	0x1
 18113 13e0 DC12     		.2byte	0x12dc
 18114 13e2 01       		.byte	0x1
 18115 13e3 7A000000 		.4byte	0x7a
 18116 13e7 00000000 		.4byte	.LFB73
 18117 13eb 10000000 		.4byte	.LFE73
 18118 13ef 98030000 		.4byte	.LLST17
 18119 13f3 01       		.byte	0x1
 18120 13f4 20       		.uleb128 0x20
 18121 13f5 01       		.byte	0x1
 18122 13f6 01070000 		.4byte	.LASF246
 18123 13fa 01       		.byte	0x1
 18124 13fb E512     		.2byte	0x12e5
 18125 13fd 01       		.byte	0x1
 18126 13fe B1000000 		.4byte	0xb1
 18127 1402 00000000 		.4byte	.LFB74
 18128 1406 54010000 		.4byte	.LFE74
 18129 140a C4030000 		.4byte	.LLST18
 18130 140e 01       		.byte	0x1
 18131 140f 24       		.uleb128 0x24
 18132 1410 20090000 		.4byte	.LASF247
 18133 1414 0A       		.byte	0xa
 18134 1415 2D       		.byte	0x2d
 18135 1416 E9000000 		.4byte	0xe9
 18136 141a 01       		.byte	0x1
 18137 141b 01       		.byte	0x1
 18138 141c 25       		.uleb128 0x25
 18139 141d E6070000 		.4byte	.LASF248
 18140 1421 0B       		.byte	0xb
 18141 1422 1606     		.2byte	0x616
 18142 1424 2A140000 		.4byte	0x142a
 18143 1428 01       		.byte	0x1
 18144 1429 01       		.byte	0x1
 18145 142a 26       		.uleb128 0x26
 18146 142b 45000000 		.4byte	0x45
 18147 142f 09       		.uleb128 0x9
 18148 1430 D5000000 		.4byte	0xd5
 18149 1434 3A140000 		.4byte	0x143a
 18150 1438 27       		.uleb128 0x27
 18151 1439 00       		.byte	0
 18152 143a 24       		.uleb128 0x24
 18153 143b C7060000 		.4byte	.LASF249
 18154 143f 0C       		.byte	0xc
 18155 1440 1D       		.byte	0x1d
 18156 1441 47140000 		.4byte	0x1447
 18157 1445 01       		.byte	0x1
 18158 1446 01       		.byte	0x1
 18159 1447 06       		.uleb128 0x6
 18160 1448 2F140000 		.4byte	0x142f
 18161 144c 24       		.uleb128 0x24
 18162 144d 39010000 		.4byte	.LASF250
 18163 1451 0C       		.byte	0xc
 18164 1452 22       		.byte	0x22
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 466


 18165 1453 59140000 		.4byte	0x1459
 18166 1457 01       		.byte	0x1
 18167 1458 01       		.byte	0x1
 18168 1459 06       		.uleb128 0x6
 18169 145a 2F140000 		.4byte	0x142f
 18170 145e 28       		.uleb128 0x28
 18171 145f A5020000 		.4byte	.LASF181
 18172 1463 09       		.byte	0x9
 18173 1464 97       		.byte	0x97
 18174 1465 7D0C0000 		.4byte	0xc7d
 18175 1469 01       		.byte	0x1
 18176 146a 05       		.byte	0x5
 18177 146b 03       		.byte	0x3
 18178 146c 00000000 		.4byte	TORQUESTAT
 18179 1470 24       		.uleb128 0x24
 18180 1471 F6010000 		.4byte	.LASF251
 18181 1475 01       		.byte	0x1
 18182 1476 29       		.byte	0x29
 18183 1477 39010000 		.4byte	0x139
 18184 147b 01       		.byte	0x1
 18185 147c 01       		.byte	0x1
 18186 147d 09       		.uleb128 0x9
 18187 147e A6000000 		.4byte	0xa6
 18188 1482 8D140000 		.4byte	0x148d
 18189 1486 0A       		.uleb128 0xa
 18190 1487 DC000000 		.4byte	0xdc
 18191 148b 08       		.byte	0x8
 18192 148c 00       		.byte	0
 18193 148d 24       		.uleb128 0x24
 18194 148e CC070000 		.4byte	.LASF252
 18195 1492 01       		.byte	0x1
 18196 1493 2A       		.byte	0x2a
 18197 1494 7D140000 		.4byte	0x147d
 18198 1498 01       		.byte	0x1
 18199 1499 01       		.byte	0x1
 18200 149a 24       		.uleb128 0x24
 18201 149b 0B020000 		.4byte	.LASF253
 18202 149f 01       		.byte	0x1
 18203 14a0 2C       		.byte	0x2c
 18204 14a1 7A000000 		.4byte	0x7a
 18205 14a5 01       		.byte	0x1
 18206 14a6 01       		.byte	0x1
 18207 14a7 24       		.uleb128 0x24
 18208 14a8 BB030000 		.4byte	.LASF254
 18209 14ac 01       		.byte	0x1
 18210 14ad 30       		.byte	0x30
 18211 14ae BF010000 		.4byte	0x1bf
 18212 14b2 01       		.byte	0x1
 18213 14b3 01       		.byte	0x1
 18214 14b4 24       		.uleb128 0x24
 18215 14b5 F80D0000 		.4byte	.LASF255
 18216 14b9 01       		.byte	0x1
 18217 14ba 33       		.byte	0x33
 18218 14bb 080B0000 		.4byte	0xb08
 18219 14bf 01       		.byte	0x1
 18220 14c0 01       		.byte	0x1
 18221 14c1 24       		.uleb128 0x24
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 467


 18222 14c2 2D0C0000 		.4byte	.LASF256
 18223 14c6 01       		.byte	0x1
 18224 14c7 36       		.byte	0x36
 18225 14c8 BC000000 		.4byte	0xbc
 18226 14cc 01       		.byte	0x1
 18227 14cd 01       		.byte	0x1
 18228 14ce 24       		.uleb128 0x24
 18229 14cf E7080000 		.4byte	.LASF257
 18230 14d3 01       		.byte	0x1
 18231 14d4 3A       		.byte	0x3a
 18232 14d5 31080000 		.4byte	0x831
 18233 14d9 01       		.byte	0x1
 18234 14da 01       		.byte	0x1
 18235 14db 24       		.uleb128 0x24
 18236 14dc 2F0A0000 		.4byte	.LASF258
 18237 14e0 01       		.byte	0x1
 18238 14e1 3B       		.byte	0x3b
 18239 14e2 31080000 		.4byte	0x831
 18240 14e6 01       		.byte	0x1
 18241 14e7 01       		.byte	0x1
 18242 14e8 24       		.uleb128 0x24
 18243 14e9 E5020000 		.4byte	.LASF259
 18244 14ed 01       		.byte	0x1
 18245 14ee 3C       		.byte	0x3c
 18246 14ef 6D0D0000 		.4byte	0xd6d
 18247 14f3 01       		.byte	0x1
 18248 14f4 01       		.byte	0x1
 18249 14f5 24       		.uleb128 0x24
 18250 14f6 38080000 		.4byte	.LASF260
 18251 14fa 01       		.byte	0x1
 18252 14fb 3F       		.byte	0x3f
 18253 14fc 2D040000 		.4byte	0x42d
 18254 1500 01       		.byte	0x1
 18255 1501 01       		.byte	0x1
 18256 1502 24       		.uleb128 0x24
 18257 1503 8B0C0000 		.4byte	.LASF261
 18258 1507 01       		.byte	0x1
 18259 1508 40       		.byte	0x40
 18260 1509 2D040000 		.4byte	0x42d
 18261 150d 01       		.byte	0x1
 18262 150e 01       		.byte	0x1
 18263 150f 24       		.uleb128 0x24
 18264 1510 160A0000 		.4byte	.LASF262
 18265 1514 01       		.byte	0x1
 18266 1515 43       		.byte	0x43
 18267 1516 770B0000 		.4byte	0xb77
 18268 151a 01       		.byte	0x1
 18269 151b 01       		.byte	0x1
 18270 151c 24       		.uleb128 0x24
 18271 151d A00D0000 		.4byte	.LASF263
 18272 1521 01       		.byte	0x1
 18273 1522 44       		.byte	0x44
 18274 1523 770B0000 		.4byte	0xb77
 18275 1527 01       		.byte	0x1
 18276 1528 01       		.byte	0x1
 18277 1529 24       		.uleb128 0x24
 18278 152a 32050000 		.4byte	.LASF264
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 468


 18279 152e 01       		.byte	0x1
 18280 152f 47       		.byte	0x47
 18281 1530 770B0000 		.4byte	0xb77
 18282 1534 01       		.byte	0x1
 18283 1535 01       		.byte	0x1
 18284 1536 24       		.uleb128 0x24
 18285 1537 78070000 		.4byte	.LASF265
 18286 153b 01       		.byte	0x1
 18287 153c 48       		.byte	0x48
 18288 153d 770B0000 		.4byte	0xb77
 18289 1541 01       		.byte	0x1
 18290 1542 01       		.byte	0x1
 18291 1543 24       		.uleb128 0x24
 18292 1544 E3050000 		.4byte	.LASF266
 18293 1548 01       		.byte	0x1
 18294 1549 49       		.byte	0x49
 18295 154a 770B0000 		.4byte	0xb77
 18296 154e 01       		.byte	0x1
 18297 154f 01       		.byte	0x1
 18298 1550 24       		.uleb128 0x24
 18299 1551 E5010000 		.4byte	.LASF267
 18300 1555 01       		.byte	0x1
 18301 1556 4A       		.byte	0x4a
 18302 1557 770B0000 		.4byte	0xb77
 18303 155b 01       		.byte	0x1
 18304 155c 01       		.byte	0x1
 18305 155d 24       		.uleb128 0x24
 18306 155e AC040000 		.4byte	.LASF268
 18307 1562 01       		.byte	0x1
 18308 1563 4D       		.byte	0x4d
 18309 1564 7D0C0000 		.4byte	0xc7d
 18310 1568 01       		.byte	0x1
 18311 1569 01       		.byte	0x1
 18312 156a 24       		.uleb128 0x24
 18313 156b 020D0000 		.4byte	.LASF269
 18314 156f 01       		.byte	0x1
 18315 1570 4E       		.byte	0x4e
 18316 1571 7D0C0000 		.4byte	0xc7d
 18317 1575 01       		.byte	0x1
 18318 1576 01       		.byte	0x1
 18319 1577 24       		.uleb128 0x24
 18320 1578 93060000 		.4byte	.LASF270
 18321 157c 01       		.byte	0x1
 18322 157d 55       		.byte	0x55
 18323 157e 450A0000 		.4byte	0xa45
 18324 1582 01       		.byte	0x1
 18325 1583 01       		.byte	0x1
 18326 1584 24       		.uleb128 0x24
 18327 1585 00000000 		.4byte	.LASF271
 18328 1589 01       		.byte	0x1
 18329 158a 56       		.byte	0x56
 18330 158b 450A0000 		.4byte	0xa45
 18331 158f 01       		.byte	0x1
 18332 1590 01       		.byte	0x1
 18333 1591 09       		.uleb128 0x9
 18334 1592 C40A0000 		.4byte	0xac4
 18335 1596 A1150000 		.4byte	0x15a1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 469


 18336 159a 0A       		.uleb128 0xa
 18337 159b DC000000 		.4byte	0xdc
 18338 159f 20       		.byte	0x20
 18339 15a0 00       		.byte	0
 18340 15a1 29       		.uleb128 0x29
 18341 15a2 7100     		.ascii	"q\000"
 18342 15a4 01       		.byte	0x1
 18343 15a5 59       		.byte	0x59
 18344 15a6 91150000 		.4byte	0x1591
 18345 15aa 01       		.byte	0x1
 18346 15ab 01       		.byte	0x1
 18347 15ac 09       		.uleb128 0x9
 18348 15ad 7A000000 		.4byte	0x7a
 18349 15b1 BC150000 		.4byte	0x15bc
 18350 15b5 0A       		.uleb128 0xa
 18351 15b6 DC000000 		.4byte	0xdc
 18352 15ba 63       		.byte	0x63
 18353 15bb 00       		.byte	0
 18354 15bc 24       		.uleb128 0x24
 18355 15bd EA0C0000 		.4byte	.LASF272
 18356 15c1 01       		.byte	0x1
 18357 15c2 5C       		.byte	0x5c
 18358 15c3 AC150000 		.4byte	0x15ac
 18359 15c7 01       		.byte	0x1
 18360 15c8 01       		.byte	0x1
 18361 15c9 24       		.uleb128 0x24
 18362 15ca 720A0000 		.4byte	.LASF273
 18363 15ce 01       		.byte	0x1
 18364 15cf 5D       		.byte	0x5d
 18365 15d0 AC150000 		.4byte	0x15ac
 18366 15d4 01       		.byte	0x1
 18367 15d5 01       		.byte	0x1
 18368 15d6 24       		.uleb128 0x24
 18369 15d7 98040000 		.4byte	.LASF274
 18370 15db 01       		.byte	0x1
 18371 15dc 60       		.byte	0x60
 18372 15dd AC150000 		.4byte	0x15ac
 18373 15e1 01       		.byte	0x1
 18374 15e2 01       		.byte	0x1
 18375 15e3 24       		.uleb128 0x24
 18376 15e4 CE0D0000 		.4byte	.LASF275
 18377 15e8 01       		.byte	0x1
 18378 15e9 63       		.byte	0x63
 18379 15ea 0E090000 		.4byte	0x90e
 18380 15ee 01       		.byte	0x1
 18381 15ef 01       		.byte	0x1
 18382 15f0 24       		.uleb128 0x24
 18383 15f1 26020000 		.4byte	.LASF276
 18384 15f5 01       		.byte	0x1
 18385 15f6 6B       		.byte	0x6b
 18386 15f7 48050000 		.4byte	0x548
 18387 15fb 01       		.byte	0x1
 18388 15fc 01       		.byte	0x1
 18389 15fd 24       		.uleb128 0x24
 18390 15fe 130D0000 		.4byte	.LASF277
 18391 1602 01       		.byte	0x1
 18392 1603 8A       		.byte	0x8a
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 470


 18393 1604 E7020000 		.4byte	0x2e7
 18394 1608 01       		.byte	0x1
 18395 1609 01       		.byte	0x1
 18396 160a 24       		.uleb128 0x24
 18397 160b 6A070000 		.4byte	.LASF278
 18398 160f 01       		.byte	0x1
 18399 1610 98       		.byte	0x98
 18400 1611 B1000000 		.4byte	0xb1
 18401 1615 01       		.byte	0x1
 18402 1616 01       		.byte	0x1
 18403 1617 24       		.uleb128 0x24
 18404 1618 37070000 		.4byte	.LASF279
 18405 161c 01       		.byte	0x1
 18406 161d 9B       		.byte	0x9b
 18407 161e 85000000 		.4byte	0x85
 18408 1622 01       		.byte	0x1
 18409 1623 01       		.byte	0x1
 18410 1624 24       		.uleb128 0x24
 18411 1625 3B090000 		.4byte	.LASF280
 18412 1629 01       		.byte	0x1
 18413 162a 9C       		.byte	0x9c
 18414 162b 85000000 		.4byte	0x85
 18415 162f 01       		.byte	0x1
 18416 1630 01       		.byte	0x1
 18417 1631 09       		.uleb128 0x9
 18418 1632 7A000000 		.4byte	0x7a
 18419 1636 42160000 		.4byte	0x1642
 18420 163a 2A       		.uleb128 0x2a
 18421 163b DC000000 		.4byte	0xdc
 18422 163f 040D     		.2byte	0xd04
 18423 1641 00       		.byte	0
 18424 1642 24       		.uleb128 0x24
 18425 1643 42040000 		.4byte	.LASF281
 18426 1647 01       		.byte	0x1
 18427 1648 A7       		.byte	0xa7
 18428 1649 4F160000 		.4byte	0x164f
 18429 164d 01       		.byte	0x1
 18430 164e 01       		.byte	0x1
 18431 164f 06       		.uleb128 0x6
 18432 1650 31160000 		.4byte	0x1631
 18433 1654 24       		.uleb128 0x24
 18434 1655 5D080000 		.4byte	.LASF282
 18435 1659 01       		.byte	0x1
 18436 165a A8       		.byte	0xa8
 18437 165b 61160000 		.4byte	0x1661
 18438 165f 01       		.byte	0x1
 18439 1660 01       		.byte	0x1
 18440 1661 06       		.uleb128 0x6
 18441 1662 31160000 		.4byte	0x1631
 18442 1666 28       		.uleb128 0x28
 18443 1667 B1010000 		.4byte	.LASF283
 18444 166b 01       		.byte	0x1
 18445 166c AB       		.byte	0xab
 18446 166d 4A0F0000 		.4byte	0xf4a
 18447 1671 01       		.byte	0x1
 18448 1672 05       		.byte	0x5
 18449 1673 03       		.byte	0x3
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 471


 18450 1674 00000000 		.4byte	userInputBuffer
 18451 1678 28       		.uleb128 0x28
 18452 1679 15070000 		.4byte	.LASF284
 18453 167d 01       		.byte	0x1
 18454 167e AC       		.byte	0xac
 18455 167f 49090000 		.4byte	0x949
 18456 1683 01       		.byte	0x1
 18457 1684 05       		.byte	0x5
 18458 1685 03       		.byte	0x3
 18459 1686 00000000 		.4byte	actual_cmd
 18460 168a 28       		.uleb128 0x28
 18461 168b 11090000 		.4byte	.LASF285
 18462 168f 01       		.byte	0x1
 18463 1690 AD       		.byte	0xad
 18464 1691 7A000000 		.4byte	0x7a
 18465 1695 01       		.byte	0x1
 18466 1696 05       		.byte	0x5
 18467 1697 03       		.byte	0x3
 18468 1698 00000000 		.4byte	USB_Check_prev
 18469 169c 28       		.uleb128 0x28
 18470 169d 680B0000 		.4byte	.LASF286
 18471 16a1 01       		.byte	0x1
 18472 16a2 AE       		.byte	0xae
 18473 16a3 8E090000 		.4byte	0x98e
 18474 16a7 01       		.byte	0x1
 18475 16a8 05       		.byte	0x5
 18476 16a9 03       		.byte	0x3
 18477 16aa 00000000 		.4byte	slegenda
 18478 16ae 00       		.byte	0
 18479              		.section	.debug_abbrev,"",%progbits
 18480              	.Ldebug_abbrev0:
 18481 0000 01       		.uleb128 0x1
 18482 0001 11       		.uleb128 0x11
 18483 0002 01       		.byte	0x1
 18484 0003 25       		.uleb128 0x25
 18485 0004 0E       		.uleb128 0xe
 18486 0005 13       		.uleb128 0x13
 18487 0006 0B       		.uleb128 0xb
 18488 0007 03       		.uleb128 0x3
 18489 0008 0E       		.uleb128 0xe
 18490 0009 1B       		.uleb128 0x1b
 18491 000a 0E       		.uleb128 0xe
 18492 000b 55       		.uleb128 0x55
 18493 000c 06       		.uleb128 0x6
 18494 000d 11       		.uleb128 0x11
 18495 000e 01       		.uleb128 0x1
 18496 000f 52       		.uleb128 0x52
 18497 0010 01       		.uleb128 0x1
 18498 0011 10       		.uleb128 0x10
 18499 0012 06       		.uleb128 0x6
 18500 0013 00       		.byte	0
 18501 0014 00       		.byte	0
 18502 0015 02       		.uleb128 0x2
 18503 0016 24       		.uleb128 0x24
 18504 0017 00       		.byte	0
 18505 0018 0B       		.uleb128 0xb
 18506 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 472


 18507 001a 3E       		.uleb128 0x3e
 18508 001b 0B       		.uleb128 0xb
 18509 001c 03       		.uleb128 0x3
 18510 001d 0E       		.uleb128 0xe
 18511 001e 00       		.byte	0
 18512 001f 00       		.byte	0
 18513 0020 03       		.uleb128 0x3
 18514 0021 16       		.uleb128 0x16
 18515 0022 00       		.byte	0
 18516 0023 03       		.uleb128 0x3
 18517 0024 0E       		.uleb128 0xe
 18518 0025 3A       		.uleb128 0x3a
 18519 0026 0B       		.uleb128 0xb
 18520 0027 3B       		.uleb128 0x3b
 18521 0028 0B       		.uleb128 0xb
 18522 0029 49       		.uleb128 0x49
 18523 002a 13       		.uleb128 0x13
 18524 002b 00       		.byte	0
 18525 002c 00       		.byte	0
 18526 002d 04       		.uleb128 0x4
 18527 002e 24       		.uleb128 0x24
 18528 002f 00       		.byte	0
 18529 0030 0B       		.uleb128 0xb
 18530 0031 0B       		.uleb128 0xb
 18531 0032 3E       		.uleb128 0x3e
 18532 0033 0B       		.uleb128 0xb
 18533 0034 03       		.uleb128 0x3
 18534 0035 08       		.uleb128 0x8
 18535 0036 00       		.byte	0
 18536 0037 00       		.byte	0
 18537 0038 05       		.uleb128 0x5
 18538 0039 0F       		.uleb128 0xf
 18539 003a 00       		.byte	0
 18540 003b 0B       		.uleb128 0xb
 18541 003c 0B       		.uleb128 0xb
 18542 003d 49       		.uleb128 0x49
 18543 003e 13       		.uleb128 0x13
 18544 003f 00       		.byte	0
 18545 0040 00       		.byte	0
 18546 0041 06       		.uleb128 0x6
 18547 0042 26       		.uleb128 0x26
 18548 0043 00       		.byte	0
 18549 0044 49       		.uleb128 0x49
 18550 0045 13       		.uleb128 0x13
 18551 0046 00       		.byte	0
 18552 0047 00       		.byte	0
 18553 0048 07       		.uleb128 0x7
 18554 0049 17       		.uleb128 0x17
 18555 004a 01       		.byte	0x1
 18556 004b 0B       		.uleb128 0xb
 18557 004c 0B       		.uleb128 0xb
 18558 004d 3A       		.uleb128 0x3a
 18559 004e 0B       		.uleb128 0xb
 18560 004f 3B       		.uleb128 0x3b
 18561 0050 05       		.uleb128 0x5
 18562 0051 01       		.uleb128 0x1
 18563 0052 13       		.uleb128 0x13
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 473


 18564 0053 00       		.byte	0
 18565 0054 00       		.byte	0
 18566 0055 08       		.uleb128 0x8
 18567 0056 0D       		.uleb128 0xd
 18568 0057 00       		.byte	0
 18569 0058 03       		.uleb128 0x3
 18570 0059 0E       		.uleb128 0xe
 18571 005a 3A       		.uleb128 0x3a
 18572 005b 0B       		.uleb128 0xb
 18573 005c 3B       		.uleb128 0x3b
 18574 005d 05       		.uleb128 0x5
 18575 005e 49       		.uleb128 0x49
 18576 005f 13       		.uleb128 0x13
 18577 0060 00       		.byte	0
 18578 0061 00       		.byte	0
 18579 0062 09       		.uleb128 0x9
 18580 0063 01       		.uleb128 0x1
 18581 0064 01       		.byte	0x1
 18582 0065 49       		.uleb128 0x49
 18583 0066 13       		.uleb128 0x13
 18584 0067 01       		.uleb128 0x1
 18585 0068 13       		.uleb128 0x13
 18586 0069 00       		.byte	0
 18587 006a 00       		.byte	0
 18588 006b 0A       		.uleb128 0xa
 18589 006c 21       		.uleb128 0x21
 18590 006d 00       		.byte	0
 18591 006e 49       		.uleb128 0x49
 18592 006f 13       		.uleb128 0x13
 18593 0070 2F       		.uleb128 0x2f
 18594 0071 0B       		.uleb128 0xb
 18595 0072 00       		.byte	0
 18596 0073 00       		.byte	0
 18597 0074 0B       		.uleb128 0xb
 18598 0075 16       		.uleb128 0x16
 18599 0076 00       		.byte	0
 18600 0077 03       		.uleb128 0x3
 18601 0078 0E       		.uleb128 0xe
 18602 0079 3A       		.uleb128 0x3a
 18603 007a 0B       		.uleb128 0xb
 18604 007b 3B       		.uleb128 0x3b
 18605 007c 05       		.uleb128 0x5
 18606 007d 49       		.uleb128 0x49
 18607 007e 13       		.uleb128 0x13
 18608 007f 00       		.byte	0
 18609 0080 00       		.byte	0
 18610 0081 0C       		.uleb128 0xc
 18611 0082 13       		.uleb128 0x13
 18612 0083 01       		.byte	0x1
 18613 0084 03       		.uleb128 0x3
 18614 0085 0E       		.uleb128 0xe
 18615 0086 0B       		.uleb128 0xb
 18616 0087 0B       		.uleb128 0xb
 18617 0088 3A       		.uleb128 0x3a
 18618 0089 0B       		.uleb128 0xb
 18619 008a 3B       		.uleb128 0x3b
 18620 008b 05       		.uleb128 0x5
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 474


 18621 008c 01       		.uleb128 0x1
 18622 008d 13       		.uleb128 0x13
 18623 008e 00       		.byte	0
 18624 008f 00       		.byte	0
 18625 0090 0D       		.uleb128 0xd
 18626 0091 0D       		.uleb128 0xd
 18627 0092 00       		.byte	0
 18628 0093 03       		.uleb128 0x3
 18629 0094 0E       		.uleb128 0xe
 18630 0095 3A       		.uleb128 0x3a
 18631 0096 0B       		.uleb128 0xb
 18632 0097 3B       		.uleb128 0x3b
 18633 0098 05       		.uleb128 0x5
 18634 0099 49       		.uleb128 0x49
 18635 009a 13       		.uleb128 0x13
 18636 009b 38       		.uleb128 0x38
 18637 009c 0A       		.uleb128 0xa
 18638 009d 00       		.byte	0
 18639 009e 00       		.byte	0
 18640 009f 0E       		.uleb128 0xe
 18641 00a0 0D       		.uleb128 0xd
 18642 00a1 00       		.byte	0
 18643 00a2 03       		.uleb128 0x3
 18644 00a3 08       		.uleb128 0x8
 18645 00a4 3A       		.uleb128 0x3a
 18646 00a5 0B       		.uleb128 0xb
 18647 00a6 3B       		.uleb128 0x3b
 18648 00a7 05       		.uleb128 0x5
 18649 00a8 49       		.uleb128 0x49
 18650 00a9 13       		.uleb128 0x13
 18651 00aa 38       		.uleb128 0x38
 18652 00ab 0A       		.uleb128 0xa
 18653 00ac 00       		.byte	0
 18654 00ad 00       		.byte	0
 18655 00ae 0F       		.uleb128 0xf
 18656 00af 13       		.uleb128 0x13
 18657 00b0 01       		.byte	0x1
 18658 00b1 03       		.uleb128 0x3
 18659 00b2 0E       		.uleb128 0xe
 18660 00b3 0B       		.uleb128 0xb
 18661 00b4 0B       		.uleb128 0xb
 18662 00b5 3A       		.uleb128 0x3a
 18663 00b6 0B       		.uleb128 0xb
 18664 00b7 3B       		.uleb128 0x3b
 18665 00b8 0B       		.uleb128 0xb
 18666 00b9 01       		.uleb128 0x1
 18667 00ba 13       		.uleb128 0x13
 18668 00bb 00       		.byte	0
 18669 00bc 00       		.byte	0
 18670 00bd 10       		.uleb128 0x10
 18671 00be 0D       		.uleb128 0xd
 18672 00bf 00       		.byte	0
 18673 00c0 03       		.uleb128 0x3
 18674 00c1 0E       		.uleb128 0xe
 18675 00c2 3A       		.uleb128 0x3a
 18676 00c3 0B       		.uleb128 0xb
 18677 00c4 3B       		.uleb128 0x3b
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 475


 18678 00c5 0B       		.uleb128 0xb
 18679 00c6 49       		.uleb128 0x49
 18680 00c7 13       		.uleb128 0x13
 18681 00c8 38       		.uleb128 0x38
 18682 00c9 0A       		.uleb128 0xa
 18683 00ca 00       		.byte	0
 18684 00cb 00       		.byte	0
 18685 00cc 11       		.uleb128 0x11
 18686 00cd 13       		.uleb128 0x13
 18687 00ce 01       		.byte	0x1
 18688 00cf 0B       		.uleb128 0xb
 18689 00d0 0B       		.uleb128 0xb
 18690 00d1 3A       		.uleb128 0x3a
 18691 00d2 0B       		.uleb128 0xb
 18692 00d3 3B       		.uleb128 0x3b
 18693 00d4 0B       		.uleb128 0xb
 18694 00d5 01       		.uleb128 0x1
 18695 00d6 13       		.uleb128 0x13
 18696 00d7 00       		.byte	0
 18697 00d8 00       		.byte	0
 18698 00d9 12       		.uleb128 0x12
 18699 00da 13       		.uleb128 0x13
 18700 00db 01       		.byte	0x1
 18701 00dc 03       		.uleb128 0x3
 18702 00dd 08       		.uleb128 0x8
 18703 00de 0B       		.uleb128 0xb
 18704 00df 0B       		.uleb128 0xb
 18705 00e0 3A       		.uleb128 0x3a
 18706 00e1 0B       		.uleb128 0xb
 18707 00e2 3B       		.uleb128 0x3b
 18708 00e3 0B       		.uleb128 0xb
 18709 00e4 01       		.uleb128 0x1
 18710 00e5 13       		.uleb128 0x13
 18711 00e6 00       		.byte	0
 18712 00e7 00       		.byte	0
 18713 00e8 13       		.uleb128 0x13
 18714 00e9 0D       		.uleb128 0xd
 18715 00ea 00       		.byte	0
 18716 00eb 03       		.uleb128 0x3
 18717 00ec 08       		.uleb128 0x8
 18718 00ed 3A       		.uleb128 0x3a
 18719 00ee 0B       		.uleb128 0xb
 18720 00ef 3B       		.uleb128 0x3b
 18721 00f0 0B       		.uleb128 0xb
 18722 00f1 49       		.uleb128 0x49
 18723 00f2 13       		.uleb128 0x13
 18724 00f3 38       		.uleb128 0x38
 18725 00f4 0A       		.uleb128 0xa
 18726 00f5 00       		.byte	0
 18727 00f6 00       		.byte	0
 18728 00f7 14       		.uleb128 0x14
 18729 00f8 2E       		.uleb128 0x2e
 18730 00f9 01       		.byte	0x1
 18731 00fa 3F       		.uleb128 0x3f
 18732 00fb 0C       		.uleb128 0xc
 18733 00fc 03       		.uleb128 0x3
 18734 00fd 0E       		.uleb128 0xe
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 476


 18735 00fe 3A       		.uleb128 0x3a
 18736 00ff 0B       		.uleb128 0xb
 18737 0100 3B       		.uleb128 0x3b
 18738 0101 0B       		.uleb128 0xb
 18739 0102 27       		.uleb128 0x27
 18740 0103 0C       		.uleb128 0xc
 18741 0104 11       		.uleb128 0x11
 18742 0105 01       		.uleb128 0x1
 18743 0106 12       		.uleb128 0x12
 18744 0107 01       		.uleb128 0x1
 18745 0108 40       		.uleb128 0x40
 18746 0109 06       		.uleb128 0x6
 18747 010a 9642     		.uleb128 0x2116
 18748 010c 0C       		.uleb128 0xc
 18749 010d 01       		.uleb128 0x1
 18750 010e 13       		.uleb128 0x13
 18751 010f 00       		.byte	0
 18752 0110 00       		.byte	0
 18753 0111 15       		.uleb128 0x15
 18754 0112 05       		.uleb128 0x5
 18755 0113 00       		.byte	0
 18756 0114 03       		.uleb128 0x3
 18757 0115 0E       		.uleb128 0xe
 18758 0116 3A       		.uleb128 0x3a
 18759 0117 0B       		.uleb128 0xb
 18760 0118 3B       		.uleb128 0x3b
 18761 0119 0B       		.uleb128 0xb
 18762 011a 49       		.uleb128 0x49
 18763 011b 13       		.uleb128 0x13
 18764 011c 02       		.uleb128 0x2
 18765 011d 0A       		.uleb128 0xa
 18766 011e 00       		.byte	0
 18767 011f 00       		.byte	0
 18768 0120 16       		.uleb128 0x16
 18769 0121 2E       		.uleb128 0x2e
 18770 0122 00       		.byte	0
 18771 0123 3F       		.uleb128 0x3f
 18772 0124 0C       		.uleb128 0xc
 18773 0125 03       		.uleb128 0x3
 18774 0126 0E       		.uleb128 0xe
 18775 0127 3A       		.uleb128 0x3a
 18776 0128 0B       		.uleb128 0xb
 18777 0129 3B       		.uleb128 0x3b
 18778 012a 05       		.uleb128 0x5
 18779 012b 27       		.uleb128 0x27
 18780 012c 0C       		.uleb128 0xc
 18781 012d 11       		.uleb128 0x11
 18782 012e 01       		.uleb128 0x1
 18783 012f 12       		.uleb128 0x12
 18784 0130 01       		.uleb128 0x1
 18785 0131 40       		.uleb128 0x40
 18786 0132 06       		.uleb128 0x6
 18787 0133 9642     		.uleb128 0x2116
 18788 0135 0C       		.uleb128 0xc
 18789 0136 00       		.byte	0
 18790 0137 00       		.byte	0
 18791 0138 17       		.uleb128 0x17
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 477


 18792 0139 2E       		.uleb128 0x2e
 18793 013a 01       		.byte	0x1
 18794 013b 3F       		.uleb128 0x3f
 18795 013c 0C       		.uleb128 0xc
 18796 013d 03       		.uleb128 0x3
 18797 013e 0E       		.uleb128 0xe
 18798 013f 3A       		.uleb128 0x3a
 18799 0140 0B       		.uleb128 0xb
 18800 0141 3B       		.uleb128 0x3b
 18801 0142 05       		.uleb128 0x5
 18802 0143 27       		.uleb128 0x27
 18803 0144 0C       		.uleb128 0xc
 18804 0145 11       		.uleb128 0x11
 18805 0146 01       		.uleb128 0x1
 18806 0147 12       		.uleb128 0x12
 18807 0148 01       		.uleb128 0x1
 18808 0149 40       		.uleb128 0x40
 18809 014a 06       		.uleb128 0x6
 18810 014b 9642     		.uleb128 0x2116
 18811 014d 0C       		.uleb128 0xc
 18812 014e 01       		.uleb128 0x1
 18813 014f 13       		.uleb128 0x13
 18814 0150 00       		.byte	0
 18815 0151 00       		.byte	0
 18816 0152 18       		.uleb128 0x18
 18817 0153 05       		.uleb128 0x5
 18818 0154 00       		.byte	0
 18819 0155 03       		.uleb128 0x3
 18820 0156 0E       		.uleb128 0xe
 18821 0157 3A       		.uleb128 0x3a
 18822 0158 0B       		.uleb128 0xb
 18823 0159 3B       		.uleb128 0x3b
 18824 015a 05       		.uleb128 0x5
 18825 015b 49       		.uleb128 0x49
 18826 015c 13       		.uleb128 0x13
 18827 015d 02       		.uleb128 0x2
 18828 015e 0A       		.uleb128 0xa
 18829 015f 00       		.byte	0
 18830 0160 00       		.byte	0
 18831 0161 19       		.uleb128 0x19
 18832 0162 2E       		.uleb128 0x2e
 18833 0163 01       		.byte	0x1
 18834 0164 3F       		.uleb128 0x3f
 18835 0165 0C       		.uleb128 0xc
 18836 0166 03       		.uleb128 0x3
 18837 0167 0E       		.uleb128 0xe
 18838 0168 3A       		.uleb128 0x3a
 18839 0169 0B       		.uleb128 0xb
 18840 016a 3B       		.uleb128 0x3b
 18841 016b 05       		.uleb128 0x5
 18842 016c 27       		.uleb128 0x27
 18843 016d 0C       		.uleb128 0xc
 18844 016e 49       		.uleb128 0x49
 18845 016f 13       		.uleb128 0x13
 18846 0170 11       		.uleb128 0x11
 18847 0171 01       		.uleb128 0x1
 18848 0172 12       		.uleb128 0x12
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 478


 18849 0173 01       		.uleb128 0x1
 18850 0174 40       		.uleb128 0x40
 18851 0175 06       		.uleb128 0x6
 18852 0176 9642     		.uleb128 0x2116
 18853 0178 0C       		.uleb128 0xc
 18854 0179 01       		.uleb128 0x1
 18855 017a 13       		.uleb128 0x13
 18856 017b 00       		.byte	0
 18857 017c 00       		.byte	0
 18858 017d 1A       		.uleb128 0x1a
 18859 017e 34       		.uleb128 0x34
 18860 017f 00       		.byte	0
 18861 0180 03       		.uleb128 0x3
 18862 0181 0E       		.uleb128 0xe
 18863 0182 3A       		.uleb128 0x3a
 18864 0183 0B       		.uleb128 0xb
 18865 0184 3B       		.uleb128 0x3b
 18866 0185 05       		.uleb128 0x5
 18867 0186 49       		.uleb128 0x49
 18868 0187 13       		.uleb128 0x13
 18869 0188 02       		.uleb128 0x2
 18870 0189 0A       		.uleb128 0xa
 18871 018a 00       		.byte	0
 18872 018b 00       		.byte	0
 18873 018c 1B       		.uleb128 0x1b
 18874 018d 0B       		.uleb128 0xb
 18875 018e 01       		.byte	0x1
 18876 018f 11       		.uleb128 0x11
 18877 0190 01       		.uleb128 0x1
 18878 0191 12       		.uleb128 0x12
 18879 0192 01       		.uleb128 0x1
 18880 0193 00       		.byte	0
 18881 0194 00       		.byte	0
 18882 0195 1C       		.uleb128 0x1c
 18883 0196 34       		.uleb128 0x34
 18884 0197 00       		.byte	0
 18885 0198 03       		.uleb128 0x3
 18886 0199 08       		.uleb128 0x8
 18887 019a 3A       		.uleb128 0x3a
 18888 019b 0B       		.uleb128 0xb
 18889 019c 3B       		.uleb128 0x3b
 18890 019d 05       		.uleb128 0x5
 18891 019e 49       		.uleb128 0x49
 18892 019f 13       		.uleb128 0x13
 18893 01a0 02       		.uleb128 0x2
 18894 01a1 0A       		.uleb128 0xa
 18895 01a2 00       		.byte	0
 18896 01a3 00       		.byte	0
 18897 01a4 1D       		.uleb128 0x1d
 18898 01a5 2E       		.uleb128 0x2e
 18899 01a6 01       		.byte	0x1
 18900 01a7 3F       		.uleb128 0x3f
 18901 01a8 0C       		.uleb128 0xc
 18902 01a9 03       		.uleb128 0x3
 18903 01aa 0E       		.uleb128 0xe
 18904 01ab 3A       		.uleb128 0x3a
 18905 01ac 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 479


 18906 01ad 3B       		.uleb128 0x3b
 18907 01ae 05       		.uleb128 0x5
 18908 01af 49       		.uleb128 0x49
 18909 01b0 13       		.uleb128 0x13
 18910 01b1 11       		.uleb128 0x11
 18911 01b2 01       		.uleb128 0x1
 18912 01b3 12       		.uleb128 0x12
 18913 01b4 01       		.uleb128 0x1
 18914 01b5 40       		.uleb128 0x40
 18915 01b6 06       		.uleb128 0x6
 18916 01b7 9642     		.uleb128 0x2116
 18917 01b9 0C       		.uleb128 0xc
 18918 01ba 01       		.uleb128 0x1
 18919 01bb 13       		.uleb128 0x13
 18920 01bc 00       		.byte	0
 18921 01bd 00       		.byte	0
 18922 01be 1E       		.uleb128 0x1e
 18923 01bf 0A       		.uleb128 0xa
 18924 01c0 00       		.byte	0
 18925 01c1 03       		.uleb128 0x3
 18926 01c2 0E       		.uleb128 0xe
 18927 01c3 3A       		.uleb128 0x3a
 18928 01c4 0B       		.uleb128 0xb
 18929 01c5 3B       		.uleb128 0x3b
 18930 01c6 05       		.uleb128 0x5
 18931 01c7 11       		.uleb128 0x11
 18932 01c8 01       		.uleb128 0x1
 18933 01c9 00       		.byte	0
 18934 01ca 00       		.byte	0
 18935 01cb 1F       		.uleb128 0x1f
 18936 01cc 0B       		.uleb128 0xb
 18937 01cd 01       		.byte	0x1
 18938 01ce 11       		.uleb128 0x11
 18939 01cf 01       		.uleb128 0x1
 18940 01d0 12       		.uleb128 0x12
 18941 01d1 01       		.uleb128 0x1
 18942 01d2 01       		.uleb128 0x1
 18943 01d3 13       		.uleb128 0x13
 18944 01d4 00       		.byte	0
 18945 01d5 00       		.byte	0
 18946 01d6 20       		.uleb128 0x20
 18947 01d7 2E       		.uleb128 0x2e
 18948 01d8 00       		.byte	0
 18949 01d9 3F       		.uleb128 0x3f
 18950 01da 0C       		.uleb128 0xc
 18951 01db 03       		.uleb128 0x3
 18952 01dc 0E       		.uleb128 0xe
 18953 01dd 3A       		.uleb128 0x3a
 18954 01de 0B       		.uleb128 0xb
 18955 01df 3B       		.uleb128 0x3b
 18956 01e0 05       		.uleb128 0x5
 18957 01e1 27       		.uleb128 0x27
 18958 01e2 0C       		.uleb128 0xc
 18959 01e3 49       		.uleb128 0x49
 18960 01e4 13       		.uleb128 0x13
 18961 01e5 11       		.uleb128 0x11
 18962 01e6 01       		.uleb128 0x1
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 480


 18963 01e7 12       		.uleb128 0x12
 18964 01e8 01       		.uleb128 0x1
 18965 01e9 40       		.uleb128 0x40
 18966 01ea 06       		.uleb128 0x6
 18967 01eb 9642     		.uleb128 0x2116
 18968 01ed 0C       		.uleb128 0xc
 18969 01ee 00       		.byte	0
 18970 01ef 00       		.byte	0
 18971 01f0 21       		.uleb128 0x21
 18972 01f1 2E       		.uleb128 0x2e
 18973 01f2 01       		.byte	0x1
 18974 01f3 3F       		.uleb128 0x3f
 18975 01f4 0C       		.uleb128 0xc
 18976 01f5 03       		.uleb128 0x3
 18977 01f6 0E       		.uleb128 0xe
 18978 01f7 3A       		.uleb128 0x3a
 18979 01f8 0B       		.uleb128 0xb
 18980 01f9 3B       		.uleb128 0x3b
 18981 01fa 05       		.uleb128 0x5
 18982 01fb 27       		.uleb128 0x27
 18983 01fc 0C       		.uleb128 0xc
 18984 01fd 11       		.uleb128 0x11
 18985 01fe 01       		.uleb128 0x1
 18986 01ff 12       		.uleb128 0x12
 18987 0200 01       		.uleb128 0x1
 18988 0201 40       		.uleb128 0x40
 18989 0202 06       		.uleb128 0x6
 18990 0203 9742     		.uleb128 0x2117
 18991 0205 0C       		.uleb128 0xc
 18992 0206 01       		.uleb128 0x1
 18993 0207 13       		.uleb128 0x13
 18994 0208 00       		.byte	0
 18995 0209 00       		.byte	0
 18996 020a 22       		.uleb128 0x22
 18997 020b 05       		.uleb128 0x5
 18998 020c 00       		.byte	0
 18999 020d 03       		.uleb128 0x3
 19000 020e 08       		.uleb128 0x8
 19001 020f 3A       		.uleb128 0x3a
 19002 0210 0B       		.uleb128 0xb
 19003 0211 3B       		.uleb128 0x3b
 19004 0212 05       		.uleb128 0x5
 19005 0213 49       		.uleb128 0x49
 19006 0214 13       		.uleb128 0x13
 19007 0215 02       		.uleb128 0x2
 19008 0216 0A       		.uleb128 0xa
 19009 0217 00       		.byte	0
 19010 0218 00       		.byte	0
 19011 0219 23       		.uleb128 0x23
 19012 021a 2E       		.uleb128 0x2e
 19013 021b 00       		.byte	0
 19014 021c 3F       		.uleb128 0x3f
 19015 021d 0C       		.uleb128 0xc
 19016 021e 03       		.uleb128 0x3
 19017 021f 0E       		.uleb128 0xe
 19018 0220 3A       		.uleb128 0x3a
 19019 0221 0B       		.uleb128 0xb
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 481


 19020 0222 3B       		.uleb128 0x3b
 19021 0223 05       		.uleb128 0x5
 19022 0224 27       		.uleb128 0x27
 19023 0225 0C       		.uleb128 0xc
 19024 0226 49       		.uleb128 0x49
 19025 0227 13       		.uleb128 0x13
 19026 0228 11       		.uleb128 0x11
 19027 0229 01       		.uleb128 0x1
 19028 022a 12       		.uleb128 0x12
 19029 022b 01       		.uleb128 0x1
 19030 022c 40       		.uleb128 0x40
 19031 022d 06       		.uleb128 0x6
 19032 022e 9742     		.uleb128 0x2117
 19033 0230 0C       		.uleb128 0xc
 19034 0231 00       		.byte	0
 19035 0232 00       		.byte	0
 19036 0233 24       		.uleb128 0x24
 19037 0234 34       		.uleb128 0x34
 19038 0235 00       		.byte	0
 19039 0236 03       		.uleb128 0x3
 19040 0237 0E       		.uleb128 0xe
 19041 0238 3A       		.uleb128 0x3a
 19042 0239 0B       		.uleb128 0xb
 19043 023a 3B       		.uleb128 0x3b
 19044 023b 0B       		.uleb128 0xb
 19045 023c 49       		.uleb128 0x49
 19046 023d 13       		.uleb128 0x13
 19047 023e 3F       		.uleb128 0x3f
 19048 023f 0C       		.uleb128 0xc
 19049 0240 3C       		.uleb128 0x3c
 19050 0241 0C       		.uleb128 0xc
 19051 0242 00       		.byte	0
 19052 0243 00       		.byte	0
 19053 0244 25       		.uleb128 0x25
 19054 0245 34       		.uleb128 0x34
 19055 0246 00       		.byte	0
 19056 0247 03       		.uleb128 0x3
 19057 0248 0E       		.uleb128 0xe
 19058 0249 3A       		.uleb128 0x3a
 19059 024a 0B       		.uleb128 0xb
 19060 024b 3B       		.uleb128 0x3b
 19061 024c 05       		.uleb128 0x5
 19062 024d 49       		.uleb128 0x49
 19063 024e 13       		.uleb128 0x13
 19064 024f 3F       		.uleb128 0x3f
 19065 0250 0C       		.uleb128 0xc
 19066 0251 3C       		.uleb128 0x3c
 19067 0252 0C       		.uleb128 0xc
 19068 0253 00       		.byte	0
 19069 0254 00       		.byte	0
 19070 0255 26       		.uleb128 0x26
 19071 0256 35       		.uleb128 0x35
 19072 0257 00       		.byte	0
 19073 0258 49       		.uleb128 0x49
 19074 0259 13       		.uleb128 0x13
 19075 025a 00       		.byte	0
 19076 025b 00       		.byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 482


 19077 025c 27       		.uleb128 0x27
 19078 025d 21       		.uleb128 0x21
 19079 025e 00       		.byte	0
 19080 025f 00       		.byte	0
 19081 0260 00       		.byte	0
 19082 0261 28       		.uleb128 0x28
 19083 0262 34       		.uleb128 0x34
 19084 0263 00       		.byte	0
 19085 0264 03       		.uleb128 0x3
 19086 0265 0E       		.uleb128 0xe
 19087 0266 3A       		.uleb128 0x3a
 19088 0267 0B       		.uleb128 0xb
 19089 0268 3B       		.uleb128 0x3b
 19090 0269 0B       		.uleb128 0xb
 19091 026a 49       		.uleb128 0x49
 19092 026b 13       		.uleb128 0x13
 19093 026c 3F       		.uleb128 0x3f
 19094 026d 0C       		.uleb128 0xc
 19095 026e 02       		.uleb128 0x2
 19096 026f 0A       		.uleb128 0xa
 19097 0270 00       		.byte	0
 19098 0271 00       		.byte	0
 19099 0272 29       		.uleb128 0x29
 19100 0273 34       		.uleb128 0x34
 19101 0274 00       		.byte	0
 19102 0275 03       		.uleb128 0x3
 19103 0276 08       		.uleb128 0x8
 19104 0277 3A       		.uleb128 0x3a
 19105 0278 0B       		.uleb128 0xb
 19106 0279 3B       		.uleb128 0x3b
 19107 027a 0B       		.uleb128 0xb
 19108 027b 49       		.uleb128 0x49
 19109 027c 13       		.uleb128 0x13
 19110 027d 3F       		.uleb128 0x3f
 19111 027e 0C       		.uleb128 0xc
 19112 027f 3C       		.uleb128 0x3c
 19113 0280 0C       		.uleb128 0xc
 19114 0281 00       		.byte	0
 19115 0282 00       		.byte	0
 19116 0283 2A       		.uleb128 0x2a
 19117 0284 21       		.uleb128 0x21
 19118 0285 00       		.byte	0
 19119 0286 49       		.uleb128 0x49
 19120 0287 13       		.uleb128 0x13
 19121 0288 2F       		.uleb128 0x2f
 19122 0289 05       		.uleb128 0x5
 19123 028a 00       		.byte	0
 19124 028b 00       		.byte	0
 19125 028c 00       		.byte	0
 19126              		.section	.debug_loc,"",%progbits
 19127              	.Ldebug_loc0:
 19128              	.LLST0:
 19129 0000 00000000 		.4byte	.LFB56
 19130 0004 02000000 		.4byte	.LCFI0
 19131 0008 0200     		.2byte	0x2
 19132 000a 7D       		.byte	0x7d
 19133 000b 00       		.sleb128 0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 483


 19134 000c 02000000 		.4byte	.LCFI0
 19135 0010 04000000 		.4byte	.LCFI1
 19136 0014 0200     		.2byte	0x2
 19137 0016 7D       		.byte	0x7d
 19138 0017 08       		.sleb128 8
 19139 0018 04000000 		.4byte	.LCFI1
 19140 001c 06000000 		.4byte	.LCFI2
 19141 0020 0200     		.2byte	0x2
 19142 0022 7D       		.byte	0x7d
 19143 0023 10       		.sleb128 16
 19144 0024 06000000 		.4byte	.LCFI2
 19145 0028 D2000000 		.4byte	.LFE56
 19146 002c 0200     		.2byte	0x2
 19147 002e 77       		.byte	0x77
 19148 002f 10       		.sleb128 16
 19149 0030 00000000 		.4byte	0
 19150 0034 00000000 		.4byte	0
 19151              	.LLST1:
 19152 0038 00000000 		.4byte	.LFB57
 19153 003c 02000000 		.4byte	.LCFI3
 19154 0040 0200     		.2byte	0x2
 19155 0042 7D       		.byte	0x7d
 19156 0043 00       		.sleb128 0
 19157 0044 02000000 		.4byte	.LCFI3
 19158 0048 04000000 		.4byte	.LCFI4
 19159 004c 0200     		.2byte	0x2
 19160 004e 7D       		.byte	0x7d
 19161 004f 08       		.sleb128 8
 19162 0050 04000000 		.4byte	.LCFI4
 19163 0054 06000000 		.4byte	.LCFI5
 19164 0058 0200     		.2byte	0x2
 19165 005a 7D       		.byte	0x7d
 19166 005b 10       		.sleb128 16
 19167 005c 06000000 		.4byte	.LCFI5
 19168 0060 EE000000 		.4byte	.LFE57
 19169 0064 0200     		.2byte	0x2
 19170 0066 77       		.byte	0x77
 19171 0067 10       		.sleb128 16
 19172 0068 00000000 		.4byte	0
 19173 006c 00000000 		.4byte	0
 19174              	.LLST2:
 19175 0070 00000000 		.4byte	.LFB58
 19176 0074 02000000 		.4byte	.LCFI6
 19177 0078 0200     		.2byte	0x2
 19178 007a 7D       		.byte	0x7d
 19179 007b 00       		.sleb128 0
 19180 007c 02000000 		.4byte	.LCFI6
 19181 0080 04000000 		.4byte	.LCFI7
 19182 0084 0200     		.2byte	0x2
 19183 0086 7D       		.byte	0x7d
 19184 0087 08       		.sleb128 8
 19185 0088 04000000 		.4byte	.LCFI7
 19186 008c 74010000 		.4byte	.LFE58
 19187 0090 0200     		.2byte	0x2
 19188 0092 77       		.byte	0x77
 19189 0093 08       		.sleb128 8
 19190 0094 00000000 		.4byte	0
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 484


 19191 0098 00000000 		.4byte	0
 19192              	.LLST3:
 19193 009c 00000000 		.4byte	.LFB59
 19194 00a0 02000000 		.4byte	.LCFI8
 19195 00a4 0200     		.2byte	0x2
 19196 00a6 7D       		.byte	0x7d
 19197 00a7 00       		.sleb128 0
 19198 00a8 02000000 		.4byte	.LCFI8
 19199 00ac 04000000 		.4byte	.LCFI9
 19200 00b0 0200     		.2byte	0x2
 19201 00b2 7D       		.byte	0x7d
 19202 00b3 08       		.sleb128 8
 19203 00b4 04000000 		.4byte	.LCFI9
 19204 00b8 50000000 		.4byte	.LFE59
 19205 00bc 0200     		.2byte	0x2
 19206 00be 77       		.byte	0x77
 19207 00bf 08       		.sleb128 8
 19208 00c0 00000000 		.4byte	0
 19209 00c4 00000000 		.4byte	0
 19210              	.LLST4:
 19211 00c8 00000000 		.4byte	.LFB60
 19212 00cc 02000000 		.4byte	.LCFI10
 19213 00d0 0200     		.2byte	0x2
 19214 00d2 7D       		.byte	0x7d
 19215 00d3 00       		.sleb128 0
 19216 00d4 02000000 		.4byte	.LCFI10
 19217 00d8 04000000 		.4byte	.LCFI11
 19218 00dc 0200     		.2byte	0x2
 19219 00de 7D       		.byte	0x7d
 19220 00df 08       		.sleb128 8
 19221 00e0 04000000 		.4byte	.LCFI11
 19222 00e4 06000000 		.4byte	.LCFI12
 19223 00e8 0200     		.2byte	0x2
 19224 00ea 7D       		.byte	0x7d
 19225 00eb 10       		.sleb128 16
 19226 00ec 06000000 		.4byte	.LCFI12
 19227 00f0 80000000 		.4byte	.LFE60
 19228 00f4 0200     		.2byte	0x2
 19229 00f6 77       		.byte	0x77
 19230 00f7 10       		.sleb128 16
 19231 00f8 00000000 		.4byte	0
 19232 00fc 00000000 		.4byte	0
 19233              	.LLST5:
 19234 0100 00000000 		.4byte	.LFB61
 19235 0104 02000000 		.4byte	.LCFI13
 19236 0108 0200     		.2byte	0x2
 19237 010a 7D       		.byte	0x7d
 19238 010b 00       		.sleb128 0
 19239 010c 02000000 		.4byte	.LCFI13
 19240 0110 04000000 		.4byte	.LCFI14
 19241 0114 0200     		.2byte	0x2
 19242 0116 7D       		.byte	0x7d
 19243 0117 08       		.sleb128 8
 19244 0118 04000000 		.4byte	.LCFI14
 19245 011c 06000000 		.4byte	.LCFI15
 19246 0120 0200     		.2byte	0x2
 19247 0122 7D       		.byte	0x7d
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 485


 19248 0123 10       		.sleb128 16
 19249 0124 06000000 		.4byte	.LCFI15
 19250 0128 98000000 		.4byte	.LFE61
 19251 012c 0200     		.2byte	0x2
 19252 012e 77       		.byte	0x77
 19253 012f 10       		.sleb128 16
 19254 0130 00000000 		.4byte	0
 19255 0134 00000000 		.4byte	0
 19256              	.LLST6:
 19257 0138 00000000 		.4byte	.LFB62
 19258 013c 02000000 		.4byte	.LCFI16
 19259 0140 0200     		.2byte	0x2
 19260 0142 7D       		.byte	0x7d
 19261 0143 00       		.sleb128 0
 19262 0144 02000000 		.4byte	.LCFI16
 19263 0148 04000000 		.4byte	.LCFI17
 19264 014c 0200     		.2byte	0x2
 19265 014e 7D       		.byte	0x7d
 19266 014f 08       		.sleb128 8
 19267 0150 04000000 		.4byte	.LCFI17
 19268 0154 06000000 		.4byte	.LCFI18
 19269 0158 0200     		.2byte	0x2
 19270 015a 7D       		.byte	0x7d
 19271 015b 10       		.sleb128 16
 19272 015c 06000000 		.4byte	.LCFI18
 19273 0160 54000000 		.4byte	.LFE62
 19274 0164 0200     		.2byte	0x2
 19275 0166 77       		.byte	0x77
 19276 0167 10       		.sleb128 16
 19277 0168 00000000 		.4byte	0
 19278 016c 00000000 		.4byte	0
 19279              	.LLST7:
 19280 0170 00000000 		.4byte	.LFB63
 19281 0174 02000000 		.4byte	.LCFI19
 19282 0178 0200     		.2byte	0x2
 19283 017a 7D       		.byte	0x7d
 19284 017b 00       		.sleb128 0
 19285 017c 02000000 		.4byte	.LCFI19
 19286 0180 04000000 		.4byte	.LCFI20
 19287 0184 0200     		.2byte	0x2
 19288 0186 7D       		.byte	0x7d
 19289 0187 10       		.sleb128 16
 19290 0188 04000000 		.4byte	.LCFI20
 19291 018c 06000000 		.4byte	.LCFI21
 19292 0190 0200     		.2byte	0x2
 19293 0192 7D       		.byte	0x7d
 19294 0193 18       		.sleb128 24
 19295 0194 06000000 		.4byte	.LCFI21
 19296 0198 66000000 		.4byte	.LFE63
 19297 019c 0200     		.2byte	0x2
 19298 019e 77       		.byte	0x77
 19299 019f 10       		.sleb128 16
 19300 01a0 00000000 		.4byte	0
 19301 01a4 00000000 		.4byte	0
 19302              	.LLST8:
 19303 01a8 00000000 		.4byte	.LFB64
 19304 01ac 02000000 		.4byte	.LCFI22
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 486


 19305 01b0 0200     		.2byte	0x2
 19306 01b2 7D       		.byte	0x7d
 19307 01b3 00       		.sleb128 0
 19308 01b4 02000000 		.4byte	.LCFI22
 19309 01b8 04000000 		.4byte	.LCFI23
 19310 01bc 0200     		.2byte	0x2
 19311 01be 7D       		.byte	0x7d
 19312 01bf 10       		.sleb128 16
 19313 01c0 04000000 		.4byte	.LCFI23
 19314 01c4 06000000 		.4byte	.LCFI24
 19315 01c8 0200     		.2byte	0x2
 19316 01ca 7D       		.byte	0x7d
 19317 01cb 18       		.sleb128 24
 19318 01cc 06000000 		.4byte	.LCFI24
 19319 01d0 66000000 		.4byte	.LFE64
 19320 01d4 0200     		.2byte	0x2
 19321 01d6 77       		.byte	0x77
 19322 01d7 10       		.sleb128 16
 19323 01d8 00000000 		.4byte	0
 19324 01dc 00000000 		.4byte	0
 19325              	.LLST9:
 19326 01e0 00000000 		.4byte	.LFB65
 19327 01e4 02000000 		.4byte	.LCFI25
 19328 01e8 0200     		.2byte	0x2
 19329 01ea 7D       		.byte	0x7d
 19330 01eb 00       		.sleb128 0
 19331 01ec 02000000 		.4byte	.LCFI25
 19332 01f0 04000000 		.4byte	.LCFI26
 19333 01f4 0200     		.2byte	0x2
 19334 01f6 7D       		.byte	0x7d
 19335 01f7 08       		.sleb128 8
 19336 01f8 04000000 		.4byte	.LCFI26
 19337 01fc 06000000 		.4byte	.LCFI27
 19338 0200 0200     		.2byte	0x2
 19339 0202 7D       		.byte	0x7d
 19340 0203 10       		.sleb128 16
 19341 0204 06000000 		.4byte	.LCFI27
 19342 0208 20010000 		.4byte	.LFE65
 19343 020c 0200     		.2byte	0x2
 19344 020e 77       		.byte	0x77
 19345 020f 10       		.sleb128 16
 19346 0210 00000000 		.4byte	0
 19347 0214 00000000 		.4byte	0
 19348              	.LLST10:
 19349 0218 00000000 		.4byte	.LFB66
 19350 021c 02000000 		.4byte	.LCFI28
 19351 0220 0200     		.2byte	0x2
 19352 0222 7D       		.byte	0x7d
 19353 0223 00       		.sleb128 0
 19354 0224 02000000 		.4byte	.LCFI28
 19355 0228 04000000 		.4byte	.LCFI29
 19356 022c 0200     		.2byte	0x2
 19357 022e 7D       		.byte	0x7d
 19358 022f 08       		.sleb128 8
 19359 0230 04000000 		.4byte	.LCFI29
 19360 0234 06000000 		.4byte	.LCFI30
 19361 0238 0200     		.2byte	0x2
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 487


 19362 023a 7D       		.byte	0x7d
 19363 023b 10       		.sleb128 16
 19364 023c 06000000 		.4byte	.LCFI30
 19365 0240 64000000 		.4byte	.LFE66
 19366 0244 0200     		.2byte	0x2
 19367 0246 77       		.byte	0x77
 19368 0247 10       		.sleb128 16
 19369 0248 00000000 		.4byte	0
 19370 024c 00000000 		.4byte	0
 19371              	.LLST11:
 19372 0250 00000000 		.4byte	.LFB67
 19373 0254 02000000 		.4byte	.LCFI31
 19374 0258 0200     		.2byte	0x2
 19375 025a 7D       		.byte	0x7d
 19376 025b 00       		.sleb128 0
 19377 025c 02000000 		.4byte	.LCFI31
 19378 0260 04000000 		.4byte	.LCFI32
 19379 0264 0200     		.2byte	0x2
 19380 0266 7D       		.byte	0x7d
 19381 0267 08       		.sleb128 8
 19382 0268 04000000 		.4byte	.LCFI32
 19383 026c 06000000 		.4byte	.LCFI33
 19384 0270 0200     		.2byte	0x2
 19385 0272 7D       		.byte	0x7d
 19386 0273 20       		.sleb128 32
 19387 0274 06000000 		.4byte	.LCFI33
 19388 0278 FA000000 		.4byte	.LFE67
 19389 027c 0200     		.2byte	0x2
 19390 027e 77       		.byte	0x77
 19391 027f 20       		.sleb128 32
 19392 0280 00000000 		.4byte	0
 19393 0284 00000000 		.4byte	0
 19394              	.LLST12:
 19395 0288 00000000 		.4byte	.LFB68
 19396 028c 02000000 		.4byte	.LCFI34
 19397 0290 0200     		.2byte	0x2
 19398 0292 7D       		.byte	0x7d
 19399 0293 00       		.sleb128 0
 19400 0294 02000000 		.4byte	.LCFI34
 19401 0298 04000000 		.4byte	.LCFI35
 19402 029c 0200     		.2byte	0x2
 19403 029e 7D       		.byte	0x7d
 19404 029f 08       		.sleb128 8
 19405 02a0 04000000 		.4byte	.LCFI35
 19406 02a4 06000000 		.4byte	.LCFI36
 19407 02a8 0300     		.2byte	0x3
 19408 02aa 7D       		.byte	0x7d
 19409 02ab C800     		.sleb128 72
 19410 02ad 06000000 		.4byte	.LCFI36
 19411 02b1 04030000 		.4byte	.LFE68
 19412 02b5 0300     		.2byte	0x3
 19413 02b7 77       		.byte	0x77
 19414 02b8 C800     		.sleb128 72
 19415 02ba 00000000 		.4byte	0
 19416 02be 00000000 		.4byte	0
 19417              	.LLST13:
 19418 02c2 00000000 		.4byte	.LFB69
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 488


 19419 02c6 04000000 		.4byte	.LCFI37
 19420 02ca 0200     		.2byte	0x2
 19421 02cc 7D       		.byte	0x7d
 19422 02cd 00       		.sleb128 0
 19423 02ce 04000000 		.4byte	.LCFI37
 19424 02d2 06000000 		.4byte	.LCFI38
 19425 02d6 0200     		.2byte	0x2
 19426 02d8 7D       		.byte	0x7d
 19427 02d9 24       		.sleb128 36
 19428 02da 06000000 		.4byte	.LCFI38
 19429 02de 08000000 		.4byte	.LCFI39
 19430 02e2 0300     		.2byte	0x3
 19431 02e4 7D       		.byte	0x7d
 19432 02e5 F002     		.sleb128 368
 19433 02e7 08000000 		.4byte	.LCFI39
 19434 02eb 686F0000 		.4byte	.LFE69
 19435 02ef 0300     		.2byte	0x3
 19436 02f1 77       		.byte	0x77
 19437 02f2 C002     		.sleb128 320
 19438 02f4 00000000 		.4byte	0
 19439 02f8 00000000 		.4byte	0
 19440              	.LLST14:
 19441 02fc 00000000 		.4byte	.LFB70
 19442 0300 02000000 		.4byte	.LCFI40
 19443 0304 0200     		.2byte	0x2
 19444 0306 7D       		.byte	0x7d
 19445 0307 00       		.sleb128 0
 19446 0308 02000000 		.4byte	.LCFI40
 19447 030c 04000000 		.4byte	.LCFI41
 19448 0310 0200     		.2byte	0x2
 19449 0312 7D       		.byte	0x7d
 19450 0313 08       		.sleb128 8
 19451 0314 04000000 		.4byte	.LCFI41
 19452 0318 1C000000 		.4byte	.LFE70
 19453 031c 0200     		.2byte	0x2
 19454 031e 77       		.byte	0x77
 19455 031f 08       		.sleb128 8
 19456 0320 00000000 		.4byte	0
 19457 0324 00000000 		.4byte	0
 19458              	.LLST15:
 19459 0328 00000000 		.4byte	.LFB71
 19460 032c 02000000 		.4byte	.LCFI42
 19461 0330 0200     		.2byte	0x2
 19462 0332 7D       		.byte	0x7d
 19463 0333 00       		.sleb128 0
 19464 0334 02000000 		.4byte	.LCFI42
 19465 0338 04000000 		.4byte	.LCFI43
 19466 033c 0200     		.2byte	0x2
 19467 033e 7D       		.byte	0x7d
 19468 033f 08       		.sleb128 8
 19469 0340 04000000 		.4byte	.LCFI43
 19470 0344 06000000 		.4byte	.LCFI44
 19471 0348 0200     		.2byte	0x2
 19472 034a 7D       		.byte	0x7d
 19473 034b 18       		.sleb128 24
 19474 034c 06000000 		.4byte	.LCFI44
 19475 0350 68000000 		.4byte	.LFE71
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 489


 19476 0354 0200     		.2byte	0x2
 19477 0356 77       		.byte	0x77
 19478 0357 18       		.sleb128 24
 19479 0358 00000000 		.4byte	0
 19480 035c 00000000 		.4byte	0
 19481              	.LLST16:
 19482 0360 00000000 		.4byte	.LFB72
 19483 0364 02000000 		.4byte	.LCFI45
 19484 0368 0200     		.2byte	0x2
 19485 036a 7D       		.byte	0x7d
 19486 036b 00       		.sleb128 0
 19487 036c 02000000 		.4byte	.LCFI45
 19488 0370 04000000 		.4byte	.LCFI46
 19489 0374 0200     		.2byte	0x2
 19490 0376 7D       		.byte	0x7d
 19491 0377 04       		.sleb128 4
 19492 0378 04000000 		.4byte	.LCFI46
 19493 037c 06000000 		.4byte	.LCFI47
 19494 0380 0200     		.2byte	0x2
 19495 0382 7D       		.byte	0x7d
 19496 0383 18       		.sleb128 24
 19497 0384 06000000 		.4byte	.LCFI47
 19498 0388 3A000000 		.4byte	.LFE72
 19499 038c 0200     		.2byte	0x2
 19500 038e 77       		.byte	0x77
 19501 038f 18       		.sleb128 24
 19502 0390 00000000 		.4byte	0
 19503 0394 00000000 		.4byte	0
 19504              	.LLST17:
 19505 0398 00000000 		.4byte	.LFB73
 19506 039c 02000000 		.4byte	.LCFI48
 19507 03a0 0200     		.2byte	0x2
 19508 03a2 7D       		.byte	0x7d
 19509 03a3 00       		.sleb128 0
 19510 03a4 02000000 		.4byte	.LCFI48
 19511 03a8 04000000 		.4byte	.LCFI49
 19512 03ac 0200     		.2byte	0x2
 19513 03ae 7D       		.byte	0x7d
 19514 03af 04       		.sleb128 4
 19515 03b0 04000000 		.4byte	.LCFI49
 19516 03b4 10000000 		.4byte	.LFE73
 19517 03b8 0200     		.2byte	0x2
 19518 03ba 77       		.byte	0x77
 19519 03bb 04       		.sleb128 4
 19520 03bc 00000000 		.4byte	0
 19521 03c0 00000000 		.4byte	0
 19522              	.LLST18:
 19523 03c4 00000000 		.4byte	.LFB74
 19524 03c8 02000000 		.4byte	.LCFI50
 19525 03cc 0200     		.2byte	0x2
 19526 03ce 7D       		.byte	0x7d
 19527 03cf 00       		.sleb128 0
 19528 03d0 02000000 		.4byte	.LCFI50
 19529 03d4 04000000 		.4byte	.LCFI51
 19530 03d8 0200     		.2byte	0x2
 19531 03da 7D       		.byte	0x7d
 19532 03db 08       		.sleb128 8
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 490


 19533 03dc 04000000 		.4byte	.LCFI51
 19534 03e0 54010000 		.4byte	.LFE74
 19535 03e4 0200     		.2byte	0x2
 19536 03e6 77       		.byte	0x77
 19537 03e7 08       		.sleb128 8
 19538 03e8 00000000 		.4byte	0
 19539 03ec 00000000 		.4byte	0
 19540              		.section	.debug_aranges,"",%progbits
 19541 0000 AC000000 		.4byte	0xac
 19542 0004 0200     		.2byte	0x2
 19543 0006 00000000 		.4byte	.Ldebug_info0
 19544 000a 04       		.byte	0x4
 19545 000b 00       		.byte	0
 19546 000c 0000     		.2byte	0
 19547 000e 0000     		.2byte	0
 19548 0010 00000000 		.4byte	.LFB56
 19549 0014 D2000000 		.4byte	.LFE56-.LFB56
 19550 0018 00000000 		.4byte	.LFB57
 19551 001c EE000000 		.4byte	.LFE57-.LFB57
 19552 0020 00000000 		.4byte	.LFB58
 19553 0024 74010000 		.4byte	.LFE58-.LFB58
 19554 0028 00000000 		.4byte	.LFB59
 19555 002c 50000000 		.4byte	.LFE59-.LFB59
 19556 0030 00000000 		.4byte	.LFB60
 19557 0034 80000000 		.4byte	.LFE60-.LFB60
 19558 0038 00000000 		.4byte	.LFB61
 19559 003c 98000000 		.4byte	.LFE61-.LFB61
 19560 0040 00000000 		.4byte	.LFB62
 19561 0044 54000000 		.4byte	.LFE62-.LFB62
 19562 0048 00000000 		.4byte	.LFB63
 19563 004c 66000000 		.4byte	.LFE63-.LFB63
 19564 0050 00000000 		.4byte	.LFB64
 19565 0054 66000000 		.4byte	.LFE64-.LFB64
 19566 0058 00000000 		.4byte	.LFB65
 19567 005c 20010000 		.4byte	.LFE65-.LFB65
 19568 0060 00000000 		.4byte	.LFB66
 19569 0064 64000000 		.4byte	.LFE66-.LFB66
 19570 0068 00000000 		.4byte	.LFB67
 19571 006c FA000000 		.4byte	.LFE67-.LFB67
 19572 0070 00000000 		.4byte	.LFB68
 19573 0074 04030000 		.4byte	.LFE68-.LFB68
 19574 0078 00000000 		.4byte	.LFB69
 19575 007c 686F0000 		.4byte	.LFE69-.LFB69
 19576 0080 00000000 		.4byte	.LFB70
 19577 0084 1C000000 		.4byte	.LFE70-.LFB70
 19578 0088 00000000 		.4byte	.LFB71
 19579 008c 68000000 		.4byte	.LFE71-.LFB71
 19580 0090 00000000 		.4byte	.LFB72
 19581 0094 3A000000 		.4byte	.LFE72-.LFB72
 19582 0098 00000000 		.4byte	.LFB73
 19583 009c 10000000 		.4byte	.LFE73-.LFB73
 19584 00a0 00000000 		.4byte	.LFB74
 19585 00a4 54010000 		.4byte	.LFE74-.LFB74
 19586 00a8 00000000 		.4byte	0
 19587 00ac 00000000 		.4byte	0
 19588              		.section	.debug_ranges,"",%progbits
 19589              	.Ldebug_ranges0:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 491


 19590 0000 00000000 		.4byte	.LFB56
 19591 0004 D2000000 		.4byte	.LFE56
 19592 0008 00000000 		.4byte	.LFB57
 19593 000c EE000000 		.4byte	.LFE57
 19594 0010 00000000 		.4byte	.LFB58
 19595 0014 74010000 		.4byte	.LFE58
 19596 0018 00000000 		.4byte	.LFB59
 19597 001c 50000000 		.4byte	.LFE59
 19598 0020 00000000 		.4byte	.LFB60
 19599 0024 80000000 		.4byte	.LFE60
 19600 0028 00000000 		.4byte	.LFB61
 19601 002c 98000000 		.4byte	.LFE61
 19602 0030 00000000 		.4byte	.LFB62
 19603 0034 54000000 		.4byte	.LFE62
 19604 0038 00000000 		.4byte	.LFB63
 19605 003c 66000000 		.4byte	.LFE63
 19606 0040 00000000 		.4byte	.LFB64
 19607 0044 66000000 		.4byte	.LFE64
 19608 0048 00000000 		.4byte	.LFB65
 19609 004c 20010000 		.4byte	.LFE65
 19610 0050 00000000 		.4byte	.LFB66
 19611 0054 64000000 		.4byte	.LFE66
 19612 0058 00000000 		.4byte	.LFB67
 19613 005c FA000000 		.4byte	.LFE67
 19614 0060 00000000 		.4byte	.LFB68
 19615 0064 04030000 		.4byte	.LFE68
 19616 0068 00000000 		.4byte	.LFB69
 19617 006c 686F0000 		.4byte	.LFE69
 19618 0070 00000000 		.4byte	.LFB70
 19619 0074 1C000000 		.4byte	.LFE70
 19620 0078 00000000 		.4byte	.LFB71
 19621 007c 68000000 		.4byte	.LFE71
 19622 0080 00000000 		.4byte	.LFB72
 19623 0084 3A000000 		.4byte	.LFE72
 19624 0088 00000000 		.4byte	.LFB73
 19625 008c 10000000 		.4byte	.LFE73
 19626 0090 00000000 		.4byte	.LFB74
 19627 0094 54010000 		.4byte	.LFE74
 19628 0098 00000000 		.4byte	0
 19629 009c 00000000 		.4byte	0
 19630              		.section	.debug_line,"",%progbits
 19631              	.Ldebug_line0:
 19632 0000 21100000 		.section	.debug_str,"MS",%progbits,1
 19632      02007101 
 19632      00000201 
 19632      FB0E0D00 
 19632      01010101 
 19633              	.LASF271:
 19634 0000 6D6F7665 		.ascii	"mover_tilt\000"
 19634      725F7469 
 19634      6C7400
 19635              	.LASF20:
 19636 000b 73697A65 		.ascii	"sizetype\000"
 19636      74797065 
 19636      00
 19637              	.LASF96:
 19638 0014 706F6C61 		.ascii	"polarity\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 492


 19638      72697479 
 19638      00
 19639              	.LASF177:
 19640 001d 71706F77 		.ascii	"qpower_t\000"
 19640      65725F74 
 19640      00
 19641              	.LASF113:
 19642 0026 64657269 		.ascii	"derivative_lowpass\000"
 19642      76617469 
 19642      76655F6C 
 19642      6F777061 
 19642      737300
 19643              	.LASF187:
 19644 0039 53686F77 		.ascii	"ShowCLUSM\000"
 19644      434C5553 
 19644      4D00
 19645              	.LASF36:
 19646 0043 46626B45 		.ascii	"FbkEncFaults\000"
 19646      6E634661 
 19646      756C7473 
 19646      00
 19647              	.LASF150:
 19648 0050 73746570 		.ascii	"steps_integral\000"
 19648      735F696E 
 19648      74656772 
 19648      616C00
 19649              	.LASF95:
 19650 005f 50415241 		.ascii	"PARAMS\000"
 19650      4D5300
 19651              	.LASF121:
 19652 0066 4C494D49 		.ascii	"LIMITCONTROL\000"
 19652      54434F4E 
 19652      54524F4C 
 19652      00
 19653              	.LASF9:
 19654 0073 696E7433 		.ascii	"int32_t\000"
 19654      325F7400 
 19655              	.LASF194:
 19656 007b 53686F77 		.ascii	"ShowParamsKiPan\000"
 19656      50617261 
 19656      6D734B69 
 19656      50616E00 
 19657              	.LASF90:
 19658 008b 56504152 		.ascii	"VPARAMS\000"
 19658      414D5300 
 19659              	.LASF75:
 19660 0093 7961775F 		.ascii	"yaw_invertion\000"
 19660      696E7665 
 19660      7274696F 
 19660      6E00
 19661              	.LASF196:
 19662 00a1 53686F77 		.ascii	"ShowParamsColor\000"
 19662      50617261 
 19662      6D73436F 
 19662      6C6F7200 
 19663              	.LASF98:
 19664 00b1 4B6F7066 		.ascii	"Kopf\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 493


 19664      00
 19665              	.LASF48:
 19666 00b6 7A5F6178 		.ascii	"z_axis\000"
 19666      697300
 19667              	.LASF12:
 19668 00bd 75696E74 		.ascii	"uint32\000"
 19668      333200
 19669              	.LASF186:
 19670 00c4 53686F77 		.ascii	"ShowStatusMappingSM\000"
 19670      53746174 
 19670      75734D61 
 19670      7070696E 
 19670      67534D00 
 19671              	.LASF209:
 19672 00d8 70617273 		.ascii	"parser\000"
 19672      657200
 19673              	.LASF208:
 19674 00df 6C6F6361 		.ascii	"localBuffer\000"
 19674      6C427566 
 19674      66657200 
 19675              	.LASF224:
 19676 00eb 6A756D70 		.ascii	"jump_g_th\000"
 19676      5F675F74 
 19676      6800
 19677              	.LASF102:
 19678 00f5 6C696D69 		.ascii	"limit_deceleration_factor\000"
 19678      745F6465 
 19678      63656C65 
 19678      72617469 
 19678      6F6E5F66 
 19679              	.LASF41:
 19680 010f 61636365 		.ascii	"acceleration\000"
 19680      6C657261 
 19680      74696F6E 
 19680      00
 19681              	.LASF87:
 19682 011c 63616D5F 		.ascii	"cam_gyropan\000"
 19682      6779726F 
 19682      70616E00 
 19683              	.LASF161:
 19684 0128 70617573 		.ascii	"pauseticks\000"
 19684      65746963 
 19684      6B7300
 19685              	.LASF18:
 19686 0133 63686172 		.ascii	"char8\000"
 19686      3800
 19687              	.LASF250:
 19688 0139 434D445F 		.ascii	"CMD_AT_SHOWVERSION\000"
 19688      41545F53 
 19688      484F5756 
 19688      45525349 
 19688      4F4E00
 19689              	.LASF223:
 19690 014c 74696D65 		.ascii	"time_loc\000"
 19690      5F6C6F63 
 19690      00
 19691              	.LASF131:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 494


 19692 0155 74696C74 		.ascii	"tilt_angle\000"
 19692      5F616E67 
 19692      6C6500
 19693              	.LASF104:
 19694 0160 6D617374 		.ascii	"master_enc_position\000"
 19694      65725F65 
 19694      6E635F70 
 19694      6F736974 
 19694      696F6E00 
 19695              	.LASF234:
 19696 0174 6D795F74 		.ascii	"my_torque\000"
 19696      6F727175 
 19696      6500
 19697              	.LASF244:
 19698 017e 416E7942 		.ascii	"AnyButtonPressed\000"
 19698      7574746F 
 19698      6E507265 
 19698      73736564 
 19698      00
 19699              	.LASF71:
 19700 018f 73616D70 		.ascii	"sample_d1\000"
 19700      6C655F64 
 19700      3100
 19701              	.LASF13:
 19702 0199 696E7438 		.ascii	"int8\000"
 19702      00
 19703              	.LASF123:
 19704 019e 6D617374 		.ascii	"master_limit_delta\000"
 19704      65725F6C 
 19704      696D6974 
 19704      5F64656C 
 19704      746100
 19705              	.LASF283:
 19706 01b1 75736572 		.ascii	"userInputBuffer\000"
 19706      496E7075 
 19706      74427566 
 19706      66657200 
 19707              	.LASF128:
 19708 01c1 64736563 		.ascii	"dsec\000"
 19708      00
 19709              	.LASF51:
 19710 01c6 73797374 		.ascii	"system_dynamic_scalar\000"
 19710      656D5F64 
 19710      796E616D 
 19710      69635F73 
 19710      63616C61 
 19711              	.LASF156:
 19712 01dc 51454C45 		.ascii	"QELEMENT\000"
 19712      4D454E54 
 19712      00
 19713              	.LASF267:
 19714 01e5 74696C74 		.ascii	"tilt_qpower_stat\000"
 19714      5F71706F 
 19714      7765725F 
 19714      73746174 
 19714      00
 19715              	.LASF251:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 495


 19716 01f6 676F6265 		.ascii	"gobee_param\000"
 19716      655F7061 
 19716      72616D00 
 19717              	.LASF225:
 19718 0202 6163635F 		.ascii	"acc_g_th\000"
 19718      675F7468 
 19718      00
 19719              	.LASF253:
 19720 020b 6D616368 		.ascii	"machine_state\000"
 19720      696E655F 
 19720      73746174 
 19720      6500
 19721              	.LASF33:
 19722 0219 474F4245 		.ascii	"GOBEE_PARAMS\000"
 19722      455F5041 
 19722      52414D53 
 19722      00
 19723              	.LASF276:
 19724 0226 494D555F 		.ascii	"IMU_sensor\000"
 19724      73656E73 
 19724      6F7200
 19725              	.LASF76:
 19726 0231 70697463 		.ascii	"pitch_invertion\000"
 19726      685F696E 
 19726      76657274 
 19726      696F6E00 
 19727              	.LASF93:
 19728 0241 7265736F 		.ascii	"resolution_step_deg\000"
 19728      6C757469 
 19728      6F6E5F73 
 19728      7465705F 
 19728      64656700 
 19729              	.LASF178:
 19730 0255 56454C4F 		.ascii	"VELOCALC\000"
 19730      43414C43 
 19730      00
 19731              	.LASF54:
 19732 025e 454E434F 		.ascii	"ENCODER\000"
 19732      44455200 
 19733              	.LASF66:
 19734 0266 73746570 		.ascii	"step_over_abs_ratio\000"
 19734      5F6F7665 
 19734      725F6162 
 19734      735F7261 
 19734      74696F00 
 19735              	.LASF4:
 19736 027a 6C6F6E67 		.ascii	"long int\000"
 19736      20696E74 
 19736      00
 19737              	.LASF126:
 19738 0283 76706172 		.ascii	"vparam\000"
 19738      616D00
 19739              	.LASF171:
 19740 028a 516B5F70 		.ascii	"Qk_previous\000"
 19740      72657669 
 19740      6F757300 
 19741              	.LASF189:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 496


 19742 0296 53686F77 		.ascii	"ShowParamsMode\000"
 19742      50617261 
 19742      6D734D6F 
 19742      646500
 19743              	.LASF181:
 19744 02a5 544F5251 		.ascii	"TORQUESTAT\000"
 19744      55455354 
 19744      415400
 19745              	.LASF289:
 19746 02b0 443A5C5F 		.ascii	"D:\\_GITHUB repos\\Squit-HW0.0\\Squit-Proto.cydsn\000"
 19746      47495448 
 19746      55422072 
 19746      65706F73 
 19746      5C537175 
 19747              	.LASF109:
 19748 02df 6572726F 		.ascii	"error\000"
 19748      7200
 19749              	.LASF259:
 19750 02e5 53656C65 		.ascii	"Selected_ANAOUT\000"
 19750      63746564 
 19750      5F414E41 
 19750      4F555400 
 19751              	.LASF39:
 19752 02f5 585F4158 		.ascii	"X_AXIS\000"
 19752      495300
 19753              	.LASF182:
 19754 02fc 63757272 		.ascii	"current_integral\000"
 19754      656E745F 
 19754      696E7465 
 19754      6772616C 
 19754      00
 19755              	.LASF84:
 19756 030d 62696B65 		.ascii	"bike_yaw_lpf\000"
 19756      5F796177 
 19756      5F6C7066 
 19756      00
 19757              	.LASF49:
 19758 031a 73717561 		.ascii	"squared\000"
 19758      72656400 
 19759              	.LASF79:
 19760 0322 67616D6D 		.ascii	"gamma\000"
 19760      6100
 19761              	.LASF0:
 19762 0328 7369676E 		.ascii	"signed char\000"
 19762      65642063 
 19762      68617200 
 19763              	.LASF52:
 19764 0334 454E435F 		.ascii	"ENC_PARAMETER\000"
 19764      50415241 
 19764      4D455445 
 19764      5200
 19765              	.LASF37:
 19766 0342 70616E5F 		.ascii	"pan_FE_FAULT_prescaler\000"
 19766      46455F46 
 19766      41554C54 
 19766      5F707265 
 19766      7363616C 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 497


 19767              	.LASF140:
 19768 0359 61637469 		.ascii	"action\000"
 19768      6F6E00
 19769              	.LASF231:
 19770 0360 54736176 		.ascii	"TsavetoEE\000"
 19770      65746F45 
 19770      4500
 19771              	.LASF107:
 19772 036a 6D617374 		.ascii	"master_joy_sample_delta\000"
 19772      65725F6A 
 19772      6F795F73 
 19772      616D706C 
 19772      655F6465 
 19773              	.LASF40:
 19774 0382 7363616C 		.ascii	"scale\000"
 19774      6500
 19775              	.LASF1:
 19776 0388 756E7369 		.ascii	"unsigned char\000"
 19776      676E6564 
 19776      20636861 
 19776      7200
 19777              	.LASF222:
 19778 0396 715F6E75 		.ascii	"q_number\000"
 19778      6D626572 
 19778      00
 19779              	.LASF240:
 19780 039f 6D656D6F 		.ascii	"memory_num\000"
 19780      72795F6E 
 19780      756D00
 19781              	.LASF28:
 19782 03aa 785F6163 		.ascii	"x_acc_ADC_offset\000"
 19782      635F4144 
 19782      435F6F66 
 19782      66736574 
 19782      00
 19783              	.LASF254:
 19784 03bb 676F6265 		.ascii	"gobeeFaults\000"
 19784      65466175 
 19784      6C747300 
 19785              	.LASF62:
 19786 03c7 7261775F 		.ascii	"raw_home\000"
 19786      686F6D65 
 19786      00
 19787              	.LASF287:
 19788 03d0 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 19788      4320342E 
 19788      372E3320 
 19788      32303133 
 19788      30333132 
 19789 0403 616E6368 		.ascii	"anch revision 196615]\000"
 19789      20726576 
 19789      6973696F 
 19789      6E203139 
 19789      36363135 
 19790              	.LASF60:
 19791 0419 4142504F 		.ascii	"ABPOS_SENS_PARAMETER\000"
 19791      535F5345 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 498


 19791      4E535F50 
 19791      4152414D 
 19791      45544552 
 19792              	.LASF124:
 19793 042e 64656365 		.ascii	"deceleration_factor\000"
 19793      6C657261 
 19793      74696F6E 
 19793      5F666163 
 19793      746F7200 
 19794              	.LASF281:
 19795 0442 57617665 		.ascii	"WaveDAC8_wave_triangle\000"
 19795      44414338 
 19795      5F776176 
 19795      655F7472 
 19795      69616E67 
 19796              	.LASF153:
 19797 0459 51504152 		.ascii	"QPARA\000"
 19797      4100
 19798              	.LASF94:
 19799 045f 7265736F 		.ascii	"resolution_rad_step\000"
 19799      6C757469 
 19799      6F6E5F72 
 19799      61645F73 
 19799      74657000 
 19800              	.LASF142:
 19801 0473 6E756D62 		.ascii	"number1\000"
 19801      65723100 
 19802              	.LASF143:
 19803 047b 6E756D62 		.ascii	"number2\000"
 19803      65723200 
 19804              	.LASF19:
 19805 0483 63686172 		.ascii	"char\000"
 19805      00
 19806              	.LASF32:
 19807 0488 6163635F 		.ascii	"acc_g_threshold\000"
 19807      675F7468 
 19807      72657368 
 19807      6F6C6400 
 19808              	.LASF274:
 19809 0498 636C755F 		.ascii	"clu_sequence\000"
 19809      73657175 
 19809      656E6365 
 19809      00
 19810              	.LASF50:
 19811 04a5 6D6F6475 		.ascii	"modulo\000"
 19811      6C6F00
 19812              	.LASF268:
 19813 04ac 70616E5F 		.ascii	"pan_torque_stat\000"
 19813      746F7271 
 19813      75655F73 
 19813      74617400 
 19814              	.LASF243:
 19815 04bc 636C6561 		.ascii	"clear_string\000"
 19815      725F7374 
 19815      72696E67 
 19815      00
 19816              	.LASF106:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 499


 19817 04c9 6D617374 		.ascii	"master_joy_position\000"
 19817      65725F6A 
 19817      6F795F70 
 19817      6F736974 
 19817      696F6E00 
 19818              	.LASF141:
 19819 04dd 70617261 		.ascii	"parameter\000"
 19819      6D657465 
 19819      7200
 19820              	.LASF117:
 19821 04e7 70776D5F 		.ascii	"pwm_test_var\000"
 19821      74657374 
 19821      5F766172 
 19821      00
 19822              	.LASF155:
 19823 04f4 706F7369 		.ascii	"position_adjust\000"
 19823      74696F6E 
 19823      5F61646A 
 19823      75737400 
 19824              	.LASF135:
 19825 0504 4556454E 		.ascii	"EVENTS\000"
 19825      545300
 19826              	.LASF58:
 19827 050b 616E6775 		.ascii	"angular_velocity\000"
 19827      6C61725F 
 19827      76656C6F 
 19827      63697479 
 19827      00
 19828              	.LASF147:
 19829 051c 73746570 		.ascii	"steps\000"
 19829      7300
 19830              	.LASF114:
 19831 0522 64656164 		.ascii	"deadband_factor\000"
 19831      62616E64 
 19831      5F666163 
 19831      746F7200 
 19832              	.LASF264:
 19833 0532 70616E5F 		.ascii	"pan_current_stat\000"
 19833      63757272 
 19833      656E745F 
 19833      73746174 
 19833      00
 19834              	.LASF162:
 19835 0543 70617573 		.ascii	"pausemax\000"
 19835      656D6178 
 19835      00
 19836              	.LASF146:
 19837 054c 72656D61 		.ascii	"remainder_double\000"
 19837      696E6465 
 19837      725F646F 
 19837      75626C65 
 19837      00
 19838              	.LASF210:
 19839 055d 7363616E 		.ascii	"scanstat\000"
 19839      73746174 
 19839      00
 19840              	.LASF73:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 500


 19841 0566 72617469 		.ascii	"ratio_tmp\000"
 19841      6F5F746D 
 19841      7000
 19842              	.LASF227:
 19843 0570 6765745F 		.ascii	"get_key\000"
 19843      6B657900 
 19844              	.LASF108:
 19845 0578 736C6176 		.ascii	"slave_enc\000"
 19845      655F656E 
 19845      6300
 19846              	.LASF137:
 19847 0582 74696D65 		.ascii	"timecode\000"
 19847      636F6465 
 19847      00
 19848              	.LASF152:
 19849 058b 6D6F7665 		.ascii	"mover_type\000"
 19849      725F7479 
 19849      706500
 19850              	.LASF81:
 19851 0596 62696B65 		.ascii	"bike_yaw\000"
 19851      5F796177 
 19851      00
 19852              	.LASF235:
 19853 059f 6D795F6F 		.ascii	"my_omega\000"
 19853      6D656761 
 19853      00
 19854              	.LASF159:
 19855 05a8 636C756E 		.ascii	"clunumber\000"
 19855      756D6265 
 19855      7200
 19856              	.LASF115:
 19857 05b2 6374726C 		.ascii	"ctrl_var\000"
 19857      5F766172 
 19857      00
 19858              	.LASF132:
 19859 05bb 726F6C6C 		.ascii	"roll_angle\000"
 19859      5F616E67 
 19859      6C6500
 19860              	.LASF242:
 19861 05c6 42757474 		.ascii	"ButtonYNChoice\000"
 19861      6F6E594E 
 19861      43686F69 
 19861      636500
 19862              	.LASF168:
 19863 05d5 6D65616E 		.ascii	"mean_previous\000"
 19863      5F707265 
 19863      76696F75 
 19863      7300
 19864              	.LASF266:
 19865 05e3 74696C74 		.ascii	"tilt_current_stat\000"
 19865      5F637572 
 19865      72656E74 
 19865      5F737461 
 19865      7400
 19866              	.LASF160:
 19867 05f5 636C756C 		.ascii	"cluline\000"
 19867      696E6500 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 501


 19868              	.LASF63:
 19869 05fd 7261775F 		.ascii	"raw_limit_max\000"
 19869      6C696D69 
 19869      745F6D61 
 19869      7800
 19870              	.LASF200:
 19871 060b 696E6465 		.ascii	"index\000"
 19871      7800
 19872              	.LASF201:
 19873 0611 63686172 		.ascii	"charin\000"
 19873      696E00
 19874              	.LASF129:
 19875 0618 6F6E5F6F 		.ascii	"on_origin_ticks\000"
 19875      72696769 
 19875      6E5F7469 
 19875      636B7300 
 19876              	.LASF30:
 19877 0628 7A5F6163 		.ascii	"z_acc_ADC_offset\000"
 19877      635F4144 
 19877      435F6F66 
 19877      66736574 
 19877      00
 19878              	.LASF86:
 19879 0639 62696B65 		.ascii	"bike_roll_lpf\000"
 19879      5F726F6C 
 19879      6C5F6C70 
 19879      6600
 19880              	.LASF130:
 19881 0647 494E4552 		.ascii	"INERTIAL\000"
 19881      5449414C 
 19881      00
 19882              	.LASF5:
 19883 0650 6C6F6E67 		.ascii	"long unsigned int\000"
 19883      20756E73 
 19883      69676E65 
 19883      6420696E 
 19883      7400
 19884              	.LASF211:
 19885 0662 6D6F6465 		.ascii	"mode_loc\000"
 19885      5F6C6F63 
 19885      00
 19886              	.LASF188:
 19887 066b 53686F77 		.ascii	"ShowParamsDirector\000"
 19887      50617261 
 19887      6D734469 
 19887      72656374 
 19887      6F7200
 19888              	.LASF122:
 19889 067e 73746174 		.ascii	"status\000"
 19889      757300
 19890              	.LASF44:
 19891 0685 5A5F4158 		.ascii	"Z_AXIS\000"
 19891      495300
 19892              	.LASF47:
 19893 068c 795F6178 		.ascii	"y_axis\000"
 19893      697300
 19894              	.LASF270:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 502


 19895 0693 6D6F7665 		.ascii	"mover_pan\000"
 19895      725F7061 
 19895      6E00
 19896              	.LASF174:
 19897 069d 7469636B 		.ascii	"tick\000"
 19897      00
 19898              	.LASF68:
 19899 06a2 616E676C 		.ascii	"angle_rad\000"
 19899      655F7261 
 19899      6400
 19900              	.LASF91:
 19901 06ac 61737469 		.ascii	"astim_enable\000"
 19901      6D5F656E 
 19901      61626C65 
 19901      00
 19902              	.LASF221:
 19903 06b9 6D656D6F 		.ascii	"memory_number\000"
 19903      72795F6E 
 19903      756D6265 
 19903      7200
 19904              	.LASF249:
 19905 06c7 434D445F 		.ascii	"CMD_AT\000"
 19905      415400
 19906              	.LASF228:
 19907 06ce 65786974 		.ascii	"exitpars\000"
 19907      70617273 
 19907      00
 19908              	.LASF197:
 19909 06d7 53686F77 		.ascii	"ShowLimits\000"
 19909      4C696D69 
 19909      747300
 19910              	.LASF57:
 19911 06e2 616E676C 		.ascii	"angle\000"
 19911      6500
 19912              	.LASF61:
 19913 06e8 7261775F 		.ascii	"raw_invertion\000"
 19913      696E7665 
 19913      7274696F 
 19913      6E00
 19914              	.LASF80:
 19915 06f6 494D555F 		.ascii	"IMU_SENSOR\000"
 19915      53454E53 
 19915      4F5200
 19916              	.LASF246:
 19917 0701 47657441 		.ascii	"GetAnaposOffsetZero\000"
 19917      6E61706F 
 19917      734F6666 
 19917      7365745A 
 19917      65726F00 
 19918              	.LASF284:
 19919 0715 61637475 		.ascii	"actual_cmd\000"
 19919      616C5F63 
 19919      6D6400
 19920              	.LASF145:
 19921 0720 7469636B 		.ascii	"ticks\000"
 19921      7300
 19922              	.LASF154:
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 503


 19923 0726 706F7369 		.ascii	"position_default\000"
 19923      74696F6E 
 19923      5F646566 
 19923      61756C74 
 19923      00
 19924              	.LASF279:
 19925 0737 6973725F 		.ascii	"isr_START_check_counter\000"
 19925      53544152 
 19925      545F6368 
 19925      65636B5F 
 19925      636F756E 
 19926              	.LASF204:
 19927 074f 76657262 		.ascii	"verbose\000"
 19927      6F736500 
 19928              	.LASF6:
 19929 0757 6C6F6E67 		.ascii	"long long int\000"
 19929      206C6F6E 
 19929      6720696E 
 19929      7400
 19930              	.LASF198:
 19931 0765 6563686F 		.ascii	"echo\000"
 19931      00
 19932              	.LASF278:
 19933 076a 616E6170 		.ascii	"anapos_offset\000"
 19933      6F735F6F 
 19933      66667365 
 19933      7400
 19934              	.LASF265:
 19935 0778 70616E5F 		.ascii	"pan_qpower_stat\000"
 19935      71706F77 
 19935      65725F73 
 19935      74617400 
 19936              	.LASF85:
 19937 0788 62696B65 		.ascii	"bike_pitch_lpf\000"
 19937      5F706974 
 19937      63685F6C 
 19937      706600
 19938              	.LASF183:
 19939 0797 6162735F 		.ascii	"abs_current_t\000"
 19939      63757272 
 19939      656E745F 
 19939      7400
 19940              	.LASF22:
 19941 07a5 66627974 		.ascii	"fbyte\000"
 19941      6500
 19942              	.LASF17:
 19943 07ab 646F7562 		.ascii	"double\000"
 19943      6C6500
 19944              	.LASF195:
 19945 07b2 53686F77 		.ascii	"ShowParamsKiTilt\000"
 19945      50617261 
 19945      6D734B69 
 19945      54696C74 
 19945      00
 19946              	.LASF213:
 19947 07c3 65786368 		.ascii	"exchange\000"
 19947      616E6765 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 504


 19947      00
 19948              	.LASF252:
 19949 07cc 41646356 		.ascii	"AdcValue\000"
 19949      616C7565 
 19949      00
 19950              	.LASF206:
 19951 07d5 75696478 		.ascii	"uidx\000"
 19951      00
 19952              	.LASF119:
 19953 07da 466C6F61 		.ascii	"Float_ASTIM\000"
 19953      745F4153 
 19953      54494D00 
 19954              	.LASF248:
 19955 07e6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 19955      52784275 
 19955      66666572 
 19955      00
 19956              	.LASF199:
 19957 07f3 74696D65 		.ascii	"timeout\000"
 19957      6F757400 
 19958              	.LASF16:
 19959 07fb 666C6F61 		.ascii	"float\000"
 19959      7400
 19960              	.LASF217:
 19961 0801 616E616F 		.ascii	"anaout_gain\000"
 19961      75745F67 
 19961      61696E00 
 19962              	.LASF134:
 19963 080d 76696272 		.ascii	"vibration\000"
 19963      6174696F 
 19963      6E00
 19964              	.LASF8:
 19965 0817 756E7369 		.ascii	"unsigned int\000"
 19965      676E6564 
 19965      20696E74 
 19965      00
 19966              	.LASF238:
 19967 0824 6D795F70 		.ascii	"my_pm_max\000"
 19967      6D5F6D61 
 19967      7800
 19968              	.LASF212:
 19969 082e 696E7665 		.ascii	"invertion\000"
 19969      7274696F 
 19969      6E00
 19970              	.LASF260:
 19971 0838 70616E5F 		.ascii	"pan_absolute_sensor\000"
 19971      6162736F 
 19971      6C757465 
 19971      5F73656E 
 19971      736F7200 
 19972              	.LASF55:
 19973 084c 706F7369 		.ascii	"position\000"
 19973      74696F6E 
 19973      00
 19974              	.LASF35:
 19975 0855 67656E65 		.ascii	"general\000"
 19975      72616C00 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 505


 19976              	.LASF282:
 19977 085d 57617665 		.ascii	"WaveDAC8_wave_square\000"
 19977      44414338 
 19977      5F776176 
 19977      655F7371 
 19977      75617265 
 19978              	.LASF105:
 19979 0872 6D617374 		.ascii	"master_enc_sample_delta\000"
 19979      65725F65 
 19979      6E635F73 
 19979      616D706C 
 19979      655F6465 
 19980              	.LASF56:
 19981 088a 76656C6F 		.ascii	"velocity\000"
 19981      63697479 
 19981      00
 19982              	.LASF233:
 19983 0893 74696C74 		.ascii	"tilt_joy_delta\000"
 19983      5F6A6F79 
 19983      5F64656C 
 19983      746100
 19984              	.LASF203:
 19985 08a2 7363616E 		.ascii	"scanner2\000"
 19985      6E657232 
 19985      00
 19986              	.LASF118:
 19987 08ab 63757272 		.ascii	"current\000"
 19987      656E7400 
 19988              	.LASF192:
 19989 08b3 53686F77 		.ascii	"ShowParamsGainAnaout\000"
 19989      50617261 
 19989      6D734761 
 19989      696E416E 
 19989      616F7574 
 19990              	.LASF42:
 19991 08c8 61636365 		.ascii	"acceleration_lpf\000"
 19991      6C657261 
 19991      74696F6E 
 19991      5F6C7066 
 19991      00
 19992              	.LASF214:
 19993 08d9 6F666673 		.ascii	"offset\000"
 19993      657400
 19994              	.LASF111:
 19995 08e0 69657272 		.ascii	"ierror\000"
 19995      6F7200
 19996              	.LASF257:
 19997 08e7 70616E5F 		.ascii	"pan_axis\000"
 19997      61786973 
 19997      00
 19998              	.LASF99:
 19999 08f0 4761696E 		.ascii	"Gain_ANAOUT\000"
 19999      5F414E41 
 19999      4F555400 
 20000              	.LASF97:
 20001 08fc 4B736966 		.ascii	"Ksif\000"
 20001      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 506


 20002              	.LASF170:
 20003 0901 73636172 		.ascii	"scarto\000"
 20003      746F00
 20004              	.LASF26:
 20005 0908 64697265 		.ascii	"director\000"
 20005      63746F72 
 20005      00
 20006              	.LASF285:
 20007 0911 5553425F 		.ascii	"USB_Check_prev\000"
 20007      43686563 
 20007      6B5F7072 
 20007      657600
 20008              	.LASF247:
 20009 0920 5F5F6374 		.ascii	"__ctype_ptr__\000"
 20009      7970655F 
 20009      7074725F 
 20009      5F00
 20010              	.LASF34:
 20011 092e 474F4245 		.ascii	"GOBEE_FAULTS\000"
 20011      455F4641 
 20011      554C5453 
 20011      00
 20012              	.LASF280:
 20013 093b 6973725F 		.ascii	"isr_STOP_check_counter\000"
 20013      53544F50 
 20013      5F636865 
 20013      636B5F63 
 20013      6F756E74 
 20014              	.LASF148:
 20015 0952 73746570 		.ascii	"steps_to_move_double\000"
 20015      735F746F 
 20015      5F6D6F76 
 20015      655F646F 
 20015      75626C65 
 20016              	.LASF21:
 20017 0967 6C6F6E67 		.ascii	"long double\000"
 20017      20646F75 
 20017      626C6500 
 20018              	.LASF23:
 20019 0973 666E756D 		.ascii	"fnum\000"
 20019      00
 20020              	.LASF64:
 20021 0978 7261775F 		.ascii	"raw_limit_min\000"
 20021      6C696D69 
 20021      745F6D69 
 20021      6E00
 20022              	.LASF218:
 20023 0986 70617468 		.ascii	"path_n\000"
 20023      5F6E00
 20024              	.LASF29:
 20025 098d 795F6163 		.ascii	"y_acc_ADC_offset\000"
 20025      635F4144 
 20025      435F6F66 
 20025      66736574 
 20025      00
 20026              	.LASF70:
 20027 099e 7261775F 		.ascii	"raw_adc_p0\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 507


 20027      6164635F 
 20027      703000
 20028              	.LASF184:
 20029 09a9 70776361 		.ascii	"pwcalc\000"
 20029      6C6300
 20030              	.LASF103:
 20031 09b0 4D434441 		.ascii	"MCDATAS\000"
 20031      54415300 
 20032              	.LASF65:
 20033 09b8 7261775F 		.ascii	"raw_limit_hysteresis\000"
 20033      6C696D69 
 20033      745F6879 
 20033      73746572 
 20033      65736973 
 20034              	.LASF83:
 20035 09cd 62696B65 		.ascii	"bike_roll\000"
 20035      5F726F6C 
 20035      6C00
 20036              	.LASF7:
 20037 09d7 6C6F6E67 		.ascii	"long long unsigned int\000"
 20037      206C6F6E 
 20037      6720756E 
 20037      7369676E 
 20037      65642069 
 20038              	.LASF77:
 20039 09ee 726F6C6C 		.ascii	"roll_invertion\000"
 20039      5F696E76 
 20039      65727469 
 20039      6F6E00
 20040              	.LASF139:
 20041 09fd 636F6D6D 		.ascii	"command\000"
 20041      616E6400 
 20042              	.LASF166:
 20043 0a05 6D657373 		.ascii	"messg\000"
 20043      6700
 20044              	.LASF125:
 20045 0a0b 4D4F544F 		.ascii	"MOTOR_AXIS\000"
 20045      525F4158 
 20045      495300
 20046              	.LASF262:
 20047 0a16 70616E5F 		.ascii	"pan_absolute_sensor_stat\000"
 20047      6162736F 
 20047      6C757465 
 20047      5F73656E 
 20047      736F725F 
 20048              	.LASF258:
 20049 0a2f 74696C74 		.ascii	"tilt_axis\000"
 20049      5F617869 
 20049      7300
 20050              	.LASF167:
 20051 0a39 6D65616E 		.ascii	"mean\000"
 20051      00
 20052              	.LASF45:
 20053 0a3e 414E414C 		.ascii	"ANALOG_3D_ACCELEROMETER\000"
 20053      4F475F33 
 20053      445F4143 
 20053      43454C45 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 508


 20053      524F4D45 
 20054              	.LASF205:
 20055 0a56 72647374 		.ascii	"rdstat\000"
 20055      617400
 20056              	.LASF149:
 20057 0a5d 73746570 		.ascii	"steps_to_move\000"
 20057      735F746F 
 20057      5F6D6F76 
 20057      6500
 20058              	.LASF236:
 20059 0a6b 6D795F72 		.ascii	"my_rpm\000"
 20059      706D00
 20060              	.LASF273:
 20061 0a72 716D656D 		.ascii	"qmemory_standard_address\000"
 20061      6F72795F 
 20061      7374616E 
 20061      64617264 
 20061      5F616464 
 20062              	.LASF164:
 20063 0a8b 74747261 		.ascii	"ttrap_num\000"
 20063      705F6E75 
 20063      6D00
 20064              	.LASF173:
 20065 0a95 69746572 		.ascii	"iteration_num\000"
 20065      6174696F 
 20065      6E5F6E75 
 20065      6D00
 20066              	.LASF82:
 20067 0aa3 62696B65 		.ascii	"bike_pitch\000"
 20067      5F706974 
 20067      636800
 20068              	.LASF88:
 20069 0aae 63616D5F 		.ascii	"cam_gyrotilt\000"
 20069      6779726F 
 20069      74696C74 
 20069      00
 20070              	.LASF101:
 20071 0abb 6C696D69 		.ascii	"limit_control\000"
 20071      745F636F 
 20071      6E74726F 
 20071      6C00
 20072              	.LASF185:
 20073 0ac9 7663616C 		.ascii	"vcalc\000"
 20073      6300
 20074              	.LASF78:
 20075 0acf 70697463 		.ascii	"pitch_roll_exchange\000"
 20075      685F726F 
 20075      6C6C5F65 
 20075      78636861 
 20075      6E676500 
 20076              	.LASF151:
 20077 0ae3 70617468 		.ascii	"path_to_move\000"
 20077      5F746F5F 
 20077      6D6F7665 
 20077      00
 20078              	.LASF172:
 20079 0af0 76617269 		.ascii	"variance\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 509


 20079      616E6365 
 20079      00
 20080              	.LASF100:
 20081 0af9 636F6C6F 		.ascii	"color\000"
 20081      7200
 20082              	.LASF24:
 20083 0aff 666C6F61 		.ascii	"floatEE\000"
 20083      74454500 
 20084              	.LASF157:
 20085 0b07 6E756D62 		.ascii	"number\000"
 20085      657200
 20086              	.LASF27:
 20087 0b0e 62657461 		.ascii	"beta\000"
 20087      00
 20088              	.LASF237:
 20089 0b13 6D795F70 		.ascii	"my_pm_t\000"
 20089      6D5F7400 
 20090              	.LASF226:
 20091 0b1b 64756D6D 		.ascii	"dummy\000"
 20091      7900
 20092              	.LASF202:
 20093 0b21 52656164 		.ascii	"ReadUSBbuffer\000"
 20093      55534262 
 20093      75666665 
 20093      7200
 20094              	.LASF190:
 20095 0b2f 53686F77 		.ascii	"ShowParamsAstim\000"
 20095      50617261 
 20095      6D734173 
 20095      74696D00 
 20096              	.LASF245:
 20097 0b3f 5553425F 		.ascii	"USB_Check\000"
 20097      43686563 
 20097      6B00
 20098              	.LASF67:
 20099 0b49 41425350 		.ascii	"ABSPOS_SENSOR\000"
 20099      4F535F53 
 20099      454E534F 
 20099      5200
 20100              	.LASF158:
 20101 0b57 434C555F 		.ascii	"CLU_STATEMACHINE\000"
 20101      53544154 
 20101      454D4143 
 20101      48494E45 
 20101      00
 20102              	.LASF286:
 20103 0b68 736C6567 		.ascii	"slegenda\000"
 20103      656E6461 
 20103      00
 20104              	.LASF144:
 20105 0b71 74726170 		.ascii	"trapezoid_index\000"
 20105      657A6F69 
 20105      645F696E 
 20105      64657800 
 20106              	.LASF127:
 20107 0b81 54494D45 		.ascii	"TIMECODE\000"
 20107      434F4445 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 510


 20107      00
 20108              	.LASF215:
 20109 0b8a 7261775F 		.ascii	"raw_limit_hyst\000"
 20109      6C696D69 
 20109      745F6879 
 20109      737400
 20110              	.LASF10:
 20111 0b99 75696E74 		.ascii	"uint8\000"
 20111      3800
 20112              	.LASF110:
 20113 0b9f 6572726F 		.ascii	"error_bef\000"
 20113      725F6265 
 20113      6600
 20114              	.LASF43:
 20115 0ba9 595F4158 		.ascii	"Y_AXIS\000"
 20115      495300
 20116              	.LASF193:
 20117 0bb0 53686F77 		.ascii	"ShowParamsAnaoutSelectedAxis\000"
 20117      50617261 
 20117      6D73416E 
 20117      616F7574 
 20117      53656C65 
 20118              	.LASF46:
 20119 0bcd 785F6178 		.ascii	"x_axis\000"
 20119      697300
 20120              	.LASF2:
 20121 0bd4 73686F72 		.ascii	"short int\000"
 20121      7420696E 
 20121      7400
 20122              	.LASF133:
 20123 0bde 6A756D70 		.ascii	"jump\000"
 20123      00
 20124              	.LASF25:
 20125 0be3 6D6F6465 		.ascii	"mode\000"
 20125      00
 20126              	.LASF169:
 20127 0be8 72616E67 		.ascii	"range\000"
 20127      6500
 20128              	.LASF136:
 20129 0bee 6D617070 		.ascii	"mapping_sm_status\000"
 20129      696E675F 
 20129      736D5F73 
 20129      74617475 
 20129      7300
 20130              	.LASF53:
 20131 0c00 7265736F 		.ascii	"resolution\000"
 20131      6C757469 
 20131      6F6E00
 20132              	.LASF220:
 20133 0c0b 636C755F 		.ascii	"clu_pause\000"
 20133      70617573 
 20133      6500
 20134              	.LASF120:
 20135 0c15 61737469 		.ascii	"astim_ZCsync\000"
 20135      6D5F5A43 
 20135      73796E63 
 20135      00
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 511


 20136              	.LASF219:
 20137 0c22 636C755F 		.ascii	"clu_number\000"
 20137      6E756D62 
 20137      657200
 20138              	.LASF256:
 20139 0c2d 6673616D 		.ascii	"fsampling\000"
 20139      706C696E 
 20139      6700
 20140              	.LASF31:
 20141 0c37 6A756D70 		.ascii	"jump_g_threshold\000"
 20141      5F675F74 
 20141      68726573 
 20141      686F6C64 
 20141      00
 20142              	.LASF38:
 20143 0c48 74696C74 		.ascii	"tilt_FE_FAULT_prescaler\000"
 20143      5F46455F 
 20143      4641554C 
 20143      545F7072 
 20143      65736361 
 20144              	.LASF163:
 20145 0c60 70747261 		.ascii	"ptrap_num\000"
 20145      705F6E75 
 20145      6D00
 20146              	.LASF74:
 20147 0c6a 494D555F 		.ascii	"IMU_SENS_PARAMETER\000"
 20147      53454E53 
 20147      5F504152 
 20147      414D4554 
 20147      455200
 20148              	.LASF232:
 20149 0c7d 70616E5F 		.ascii	"pan_joy_delta\000"
 20149      6A6F795F 
 20149      64656C74 
 20149      6100
 20150              	.LASF261:
 20151 0c8b 74696C74 		.ascii	"tilt_absolute_sensor\000"
 20151      5F616273 
 20151      6F6C7574 
 20151      655F7365 
 20151      6E736F72 
 20152              	.LASF175:
 20153 0ca0 504F5745 		.ascii	"POWERCALC\000"
 20153      5243414C 
 20153      4300
 20154              	.LASF176:
 20155 0caa 6162735F 		.ascii	"abs_omega_t\000"
 20155      6F6D6567 
 20155      615F7400 
 20156              	.LASF180:
 20157 0cb6 656E635F 		.ascii	"enc_position_bef\000"
 20157      706F7369 
 20157      74696F6E 
 20157      5F626566 
 20157      00
 20158              	.LASF288:
 20159 0cc7 2E5C636F 		.ascii	".\\console.c\000"
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 512


 20159      6E736F6C 
 20159      652E6300 
 20160              	.LASF239:
 20161 0cd3 6D795F70 		.ascii	"my_pm_med\000"
 20161      6D5F6D65 
 20161      6400
 20162              	.LASF14:
 20163 0cdd 696E7431 		.ascii	"int16\000"
 20163      3600
 20164              	.LASF112:
 20165 0ce3 64657272 		.ascii	"derror\000"
 20165      6F7200
 20166              	.LASF272:
 20167 0cea 715F7461 		.ascii	"q_table\000"
 20167      626C6500 
 20168              	.LASF191:
 20169 0cf2 70617869 		.ascii	"paxis\000"
 20169      7300
 20170              	.LASF72:
 20171 0cf8 73616D70 		.ascii	"sample_d2\000"
 20171      6C655F64 
 20171      3200
 20172              	.LASF269:
 20173 0d02 74696C74 		.ascii	"tilt_torque_stat\000"
 20173      5F746F72 
 20173      7175655F 
 20173      73746174 
 20173      00
 20174              	.LASF277:
 20175 0d13 61616363 		.ascii	"aacc\000"
 20175      00
 20176              	.LASF3:
 20177 0d18 73686F72 		.ascii	"short unsigned int\000"
 20177      7420756E 
 20177      7369676E 
 20177      65642069 
 20177      6E7400
 20178              	.LASF230:
 20179 0d2b 50736176 		.ascii	"PsavetoEE\000"
 20179      65746F45 
 20179      4500
 20180              	.LASF92:
 20181 0d35 61737469 		.ascii	"astim_type\000"
 20181      6D5F7479 
 20181      706500
 20182              	.LASF179:
 20183 0d40 61637475 		.ascii	"actual_abs_motor_velocity\000"
 20183      616C5F61 
 20183      62735F6D 
 20183      6F746F72 
 20183      5F76656C 
 20184              	.LASF15:
 20185 0d5a 696E7433 		.ascii	"int32\000"
 20185      3200
 20186              	.LASF216:
 20187 0d60 73746570 		.ascii	"step_abs_ratio\000"
 20187      5F616273 
ARM GAS  C:\Users\gravi\AppData\Local\Temp\cclgAqHk.s 			page 513


 20187      5F726174 
 20187      696F00
 20188              	.LASF89:
 20189 0d6f 63616D5F 		.ascii	"cam_gyroroll\000"
 20189      6779726F 
 20189      726F6C6C 
 20189      00
 20190              	.LASF229:
 20191 0d7c 65786974 		.ascii	"exit_showencf\000"
 20191      5F73686F 
 20191      77656E63 
 20191      6600
 20192              	.LASF69:
 20193 0d8a 736C6176 		.ascii	"slave_encoder_step_p0\000"
 20193      655F656E 
 20193      636F6465 
 20193      725F7374 
 20193      65705F70 
 20194              	.LASF263:
 20195 0da0 74696C74 		.ascii	"tilt_absolute_sensor_stat\000"
 20195      5F616273 
 20195      6F6C7574 
 20195      655F7365 
 20195      6E736F72 
 20196              	.LASF165:
 20197 0dba 53544154 		.ascii	"STATISTICS\000"
 20197      49535449 
 20197      435300
 20198              	.LASF138:
 20199 0dc5 696E6572 		.ascii	"inertial\000"
 20199      7469616C 
 20199      00
 20200              	.LASF275:
 20201 0dce 6576656E 		.ascii	"events\000"
 20201      747300
 20202              	.LASF59:
 20203 0dd5 70617261 		.ascii	"param\000"
 20203      6D00
 20204              	.LASF116:
 20205 0ddb 70776D5F 		.ascii	"pwm_var\000"
 20205      76617200 
 20206              	.LASF11:
 20207 0de3 75696E74 		.ascii	"uint16\000"
 20207      313600
 20208              	.LASF207:
 20209 0dea 75696479 		.ascii	"uidy\000"
 20209      00
 20210              	.LASF241:
 20211 0def 636C755F 		.ascii	"clu_step\000"
 20211      73746570 
 20211      00
 20212              	.LASF255:
 20213 0df8 636C755F 		.ascii	"clu_sm\000"
 20213      736D00
 20214              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
